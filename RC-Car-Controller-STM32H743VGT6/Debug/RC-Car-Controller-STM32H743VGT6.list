
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018540  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  080187e0  080187e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018e48  08018e48  00019e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018e50  08018e50  00019e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018e54  08018e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08018e58  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0003aebc  24000158  08018fb0  0001a158  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2403b014  08018fb0  0001b014  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a158  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c83f  00000000  00000000  0001a186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005332  00000000  00000000  000469c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f38  00000000  00000000  0004bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001830  00000000  00000000  0004dc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dbc4  00000000  00000000  0004f460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d5b0  00000000  00000000  0008d024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178768  00000000  00000000  000ba5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00232d3c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008aac  00000000  00000000  00232d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  0023b82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080187c8 	.word	0x080187c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	080187c8 	.word	0x080187c8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	@ 0x30
 80006c0:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80006c2:	f000 ffc1 	bl	8001648 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c6:	f001 ffc3 	bl	8002650 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ca:	f000 fa3d 	bl	8000b48 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80006ce:	f000 fab5 	bl	8000c3c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006d2:	f000 fd35 	bl	8001140 <MX_GPIO_Init>
	MX_MDMA_Init();
 80006d6:	f000 fd13 	bl	8001100 <MX_MDMA_Init>
	MX_DMA_Init();
 80006da:	f000 fcc1 	bl	8001060 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80006de:	f000 fc6d 	bl	8000fbc <MX_USART1_UART_Init>
	MX_USB_DEVICE_Init();
 80006e2:	f016 fe77 	bl	80173d4 <MX_USB_DEVICE_Init>
	MX_JPEG_Init();
 80006e6:	f000 fbff 	bl	8000ee8 <MX_JPEG_Init>
	MX_I2C1_Init();
 80006ea:	f000 fb7d 	bl	8000de8 <MX_I2C1_Init>
	MX_SPI4_Init();
 80006ee:	f000 fc0f 	bl	8000f10 <MX_SPI4_Init>
	MX_ADC1_Init();
 80006f2:	f000 faed 	bl	8000cd0 <MX_ADC1_Init>
	MX_I2C2_Init();
 80006f6:	f000 fbb7 	bl	8000e68 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	// ------------------------------------------------------------ SETUP ADC DMA -- //

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 80006fa:	2214      	movs	r2, #20
 80006fc:	49a7      	ldr	r1, [pc, #668]	@ (800099c <main+0x2e0>)
 80006fe:	48a8      	ldr	r0, [pc, #672]	@ (80009a0 <main+0x2e4>)
 8000700:	f002 fc24 	bl	8002f4c <HAL_ADC_Start_DMA>

	// ------------------------------------------------------------ SETUP SSD1306 -- //

	uint8_t init_result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	777b      	strb	r3, [r7, #29]

	hssd1.i2c_handle = &hi2c2;
 8000708:	4ba6      	ldr	r3, [pc, #664]	@ (80009a4 <main+0x2e8>)
 800070a:	4aa7      	ldr	r2, [pc, #668]	@ (80009a8 <main+0x2ec>)
 800070c:	601a      	str	r2, [r3, #0]
	hssd1.address = OLED_ADDR;
 800070e:	4ba5      	ldr	r3, [pc, #660]	@ (80009a4 <main+0x2e8>)
 8000710:	223c      	movs	r2, #60	@ 0x3c
 8000712:	711a      	strb	r2, [r3, #4]
	hssd1.vram_full = ssd1_vram;
 8000714:	4ba3      	ldr	r3, [pc, #652]	@ (80009a4 <main+0x2e8>)
 8000716:	4aa5      	ldr	r2, [pc, #660]	@ (80009ac <main+0x2f0>)
 8000718:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd1);
 800071a:	48a2      	ldr	r0, [pc, #648]	@ (80009a4 <main+0x2e8>)
 800071c:	f001 fd70 	bl	8002200 <SSD1306_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	777b      	strb	r3, [r7, #29]
	if (init_result) {
 8000724:	7f7b      	ldrb	r3, [r7, #29]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d013      	beq.n	8000752 <main+0x96>
		while (1) {
			sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 800072a:	7f7b      	ldrb	r3, [r7, #29]
 800072c:	461a      	mov	r2, r3
 800072e:	49a0      	ldr	r1, [pc, #640]	@ (80009b0 <main+0x2f4>)
 8000730:	48a0      	ldr	r0, [pc, #640]	@ (80009b4 <main+0x2f8>)
 8000732:	f017 fba9 	bl	8017e88 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000736:	489f      	ldr	r0, [pc, #636]	@ (80009b4 <main+0x2f8>)
 8000738:	f7ff fdd2 	bl	80002e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	4619      	mov	r1, r3
 8000740:	489c      	ldr	r0, [pc, #624]	@ (80009b4 <main+0x2f8>)
 8000742:	f016 ff21 	bl	8017588 <CDC_Transmit_FS>
			HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f002 f813 	bl	8002774 <HAL_Delay>
		while (1) {
 800074e:	bf00      	nop
 8000750:	e7eb      	b.n	800072a <main+0x6e>
		}
	}

	hssd2.i2c_handle = &hi2c1;
 8000752:	4b99      	ldr	r3, [pc, #612]	@ (80009b8 <main+0x2fc>)
 8000754:	4a99      	ldr	r2, [pc, #612]	@ (80009bc <main+0x300>)
 8000756:	601a      	str	r2, [r3, #0]
	hssd2.address = OLED_ADDR;
 8000758:	4b97      	ldr	r3, [pc, #604]	@ (80009b8 <main+0x2fc>)
 800075a:	223c      	movs	r2, #60	@ 0x3c
 800075c:	711a      	strb	r2, [r3, #4]
	hssd2.vram_full = ssd2_vram;
 800075e:	4b96      	ldr	r3, [pc, #600]	@ (80009b8 <main+0x2fc>)
 8000760:	4a97      	ldr	r2, [pc, #604]	@ (80009c0 <main+0x304>)
 8000762:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd2);
 8000764:	4894      	ldr	r0, [pc, #592]	@ (80009b8 <main+0x2fc>)
 8000766:	f001 fd4b 	bl	8002200 <SSD1306_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	777b      	strb	r3, [r7, #29]
	if (init_result) {
 800076e:	7f7b      	ldrb	r3, [r7, #29]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <main+0xe0>
		while (1) {
			sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 8000774:	7f7b      	ldrb	r3, [r7, #29]
 8000776:	461a      	mov	r2, r3
 8000778:	4992      	ldr	r1, [pc, #584]	@ (80009c4 <main+0x308>)
 800077a:	488e      	ldr	r0, [pc, #568]	@ (80009b4 <main+0x2f8>)
 800077c:	f017 fb84 	bl	8017e88 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000780:	488c      	ldr	r0, [pc, #560]	@ (80009b4 <main+0x2f8>)
 8000782:	f7ff fdad 	bl	80002e0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	488a      	ldr	r0, [pc, #552]	@ (80009b4 <main+0x2f8>)
 800078c:	f016 fefc 	bl	8017588 <CDC_Transmit_FS>
			HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000794:	f001 ffee 	bl	8002774 <HAL_Delay>
		while (1) {
 8000798:	bf00      	nop
 800079a:	e7eb      	b.n	8000774 <main+0xb8>
		}
	}

	// ------------------------------------------------------------ SETUP ST7789 -- //
	hst7789.spi_handle = &hspi4;
 800079c:	4b8a      	ldr	r3, [pc, #552]	@ (80009c8 <main+0x30c>)
 800079e:	4a8b      	ldr	r2, [pc, #556]	@ (80009cc <main+0x310>)
 80007a0:	601a      	str	r2, [r3, #0]
	hst7789.spi_ready = 1;
 80007a2:	4b89      	ldr	r3, [pc, #548]	@ (80009c8 <main+0x30c>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	711a      	strb	r2, [r3, #4]
	hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 80007a8:	4b87      	ldr	r3, [pc, #540]	@ (80009c8 <main+0x30c>)
 80007aa:	4a89      	ldr	r2, [pc, #548]	@ (80009d0 <main+0x314>)
 80007ac:	609a      	str	r2, [r3, #8]
	hst7789.dc_gpio_pin = SPI4_DC_Pin;
 80007ae:	4b86      	ldr	r3, [pc, #536]	@ (80009c8 <main+0x30c>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	819a      	strh	r2, [r3, #12]
	hst7789.vram = st7789_vram;
 80007b4:	4b84      	ldr	r3, [pc, #528]	@ (80009c8 <main+0x30c>)
 80007b6:	4a87      	ldr	r2, [pc, #540]	@ (80009d4 <main+0x318>)
 80007b8:	611a      	str	r2, [r3, #16]
	init_result = ST7789_Init(&hst7789);
 80007ba:	4883      	ldr	r0, [pc, #524]	@ (80009c8 <main+0x30c>)
 80007bc:	f001 fe44 	bl	8002448 <ST7789_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	777b      	strb	r3, [r7, #29]
	if (init_result) {
 80007c4:	7f7b      	ldrb	r3, [r7, #29]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d013      	beq.n	80007f2 <main+0x136>
		while (1) {
			sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 80007ca:	7f7b      	ldrb	r3, [r7, #29]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4982      	ldr	r1, [pc, #520]	@ (80009d8 <main+0x31c>)
 80007d0:	4878      	ldr	r0, [pc, #480]	@ (80009b4 <main+0x2f8>)
 80007d2:	f017 fb59 	bl	8017e88 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007d6:	4877      	ldr	r0, [pc, #476]	@ (80009b4 <main+0x2f8>)
 80007d8:	f7ff fd82 	bl	80002e0 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	4619      	mov	r1, r3
 80007e0:	4874      	ldr	r0, [pc, #464]	@ (80009b4 <main+0x2f8>)
 80007e2:	f016 fed1 	bl	8017588 <CDC_Transmit_FS>
			HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ea:	f001 ffc3 	bl	8002774 <HAL_Delay>
		while (1) {
 80007ee:	bf00      	nop
 80007f0:	e7eb      	b.n	80007ca <main+0x10e>
		}
	}

	// Clear the screen
	ST7789_Clear(&hst7789, 0x00);
 80007f2:	2100      	movs	r1, #0
 80007f4:	4874      	ldr	r0, [pc, #464]	@ (80009c8 <main+0x30c>)
 80007f6:	f001 fed0 	bl	800259a <ST7789_Clear>
	ST7789_Update(&hst7789, 0);
 80007fa:	2100      	movs	r1, #0
 80007fc:	4872      	ldr	r0, [pc, #456]	@ (80009c8 <main+0x30c>)
 80007fe:	f001 fedf 	bl	80025c0 <ST7789_Update>
	HAL_Delay(50);
 8000802:	2032      	movs	r0, #50	@ 0x32
 8000804:	f001 ffb6 	bl	8002774 <HAL_Delay>
	ST7789_Update(&hst7789, 1);
 8000808:	2101      	movs	r1, #1
 800080a:	486f      	ldr	r0, [pc, #444]	@ (80009c8 <main+0x30c>)
 800080c:	f001 fed8 	bl	80025c0 <ST7789_Update>

	// ------------------------------------------------------------ SETUP JPEG ENCODING -- //
	// Set the CONFIG
	JPEG_ConfTypeDef* jpeg_config;
	jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
	//jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
	//jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
	jpeg_config->ImageWidth = JPEG_WIDTH;
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	f240 123b 	movw	r2, #315	@ 0x13b
 800081c:	60da      	str	r2, [r3, #12]
	jpeg_config->ImageHeight = JPEG_HEIGHT;
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	2278      	movs	r2, #120	@ 0x78
 8000822:	609a      	str	r2, [r3, #8]

	// ------------------------------------------------------------ SETUP UART -- //
	// TODO: Move this into a class
	// TODO: Register a callback instead of using the legacy one

	uint8_t col = 0xF0;
 8000824:	23f0      	movs	r3, #240	@ 0xf0
 8000826:	75fb      	strb	r3, [r7, #23]
	uint8_t screen_portion = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	75bb      	strb	r3, [r7, #22]
	uint8_t fill_byte = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	757b      	strb	r3, [r7, #21]

	uint32_t old_t = HAL_GetTick();
 8000830:	f001 ff94 	bl	800275c <HAL_GetTick>
 8000834:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t debug_live = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	753b      	strb	r3, [r7, #20]

	sprintf(ssd_msg, " JPEG X");
 800083a:	4968      	ldr	r1, [pc, #416]	@ (80009dc <main+0x320>)
 800083c:	4868      	ldr	r0, [pc, #416]	@ (80009e0 <main+0x324>)
 800083e:	f017 fb23 	bl	8017e88 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8000842:	4867      	ldr	r0, [pc, #412]	@ (80009e0 <main+0x324>)
 8000844:	f7ff fd4c 	bl	80002e0 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4619      	mov	r1, r3
 800084e:	4864      	ldr	r0, [pc, #400]	@ (80009e0 <main+0x324>)
 8000850:	f000 fed4 	bl	80015fc <WriteDebug>

	// Begin a UART capture
	uart_rx_packetState = 2;
 8000854:	4b63      	ldr	r3, [pc, #396]	@ (80009e4 <main+0x328>)
 8000856:	2202      	movs	r2, #2
 8000858:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, uart_rxDMA_buffer, UART_BUFFERSIZE);
 800085a:	2243      	movs	r2, #67	@ 0x43
 800085c:	4962      	ldr	r1, [pc, #392]	@ (80009e8 <main+0x32c>)
 800085e:	4863      	ldr	r0, [pc, #396]	@ (80009ec <main+0x330>)
 8000860:	f011 fb54 	bl	8011f0c <HAL_UART_Receive_DMA>

		/* USER CODE BEGIN 3 */

		// If there's a packet, process it
		// If the packet is good, push it to the screen
		if (uart_rx_packetState == 0) {
 8000864:	4b5f      	ldr	r3, [pc, #380]	@ (80009e4 <main+0x328>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	f040 808f 	bne.w	800098c <main+0x2d0>
			uint16_t rx_byte = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	827b      	strh	r3, [r7, #18]
			rx_byte += uart_rx_packetFullBuffer[1];
 8000872:	4b5f      	ldr	r3, [pc, #380]	@ (80009f0 <main+0x334>)
 8000874:	785b      	ldrb	r3, [r3, #1]
 8000876:	461a      	mov	r2, r3
 8000878:	8a7b      	ldrh	r3, [r7, #18]
 800087a:	4413      	add	r3, r2
 800087c:	827b      	strh	r3, [r7, #18]
			rx_byte *= 256;
 800087e:	8a7b      	ldrh	r3, [r7, #18]
 8000880:	021b      	lsls	r3, r3, #8
 8000882:	827b      	strh	r3, [r7, #18]
			rx_byte += uart_rx_packetFullBuffer[2];
 8000884:	4b5a      	ldr	r3, [pc, #360]	@ (80009f0 <main+0x334>)
 8000886:	789b      	ldrb	r3, [r3, #2]
 8000888:	461a      	mov	r2, r3
 800088a:	8a7b      	ldrh	r3, [r7, #18]
 800088c:	4413      	add	r3, r2
 800088e:	827b      	strh	r3, [r7, #18]

			if (rx_byte <= JPEG_WIDTH*JPEG_HEIGHT/64 + 1) {
 8000890:	8a7b      	ldrh	r3, [r7, #18]
 8000892:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8000896:	d279      	bcs.n	800098c <main+0x2d0>
				//				if (rx_byte % 10 == 0) {
				//					sprintf(ssd_msg, " RX %d", rx_byte);
				//					WriteDebug(ssd_msg, strlen(ssd_msg));
				//				}

				if (rx_byte > uart_rx_lastPacketNum + 1) {
 8000898:	8a7a      	ldrh	r2, [r7, #18]
 800089a:	4b56      	ldr	r3, [pc, #344]	@ (80009f4 <main+0x338>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	429a      	cmp	r2, r3
 80008a2:	dd0e      	ble.n	80008c2 <main+0x206>
					uart_rx_skippedPackets += (rx_byte - uart_rx_lastPacketNum) - 1;
 80008a4:	8a7b      	ldrh	r3, [r7, #18]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b52      	ldr	r3, [pc, #328]	@ (80009f4 <main+0x338>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b51      	ldr	r3, [pc, #324]	@ (80009f8 <main+0x33c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	3b01      	subs	r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b4e      	ldr	r3, [pc, #312]	@ (80009f8 <main+0x33c>)
 80008c0:	701a      	strb	r2, [r3, #0]
				}

				// Data was fully sent
				if (rx_byte < uart_rx_lastPacketNum) {
 80008c2:	4b4c      	ldr	r3, [pc, #304]	@ (80009f4 <main+0x338>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	8a7a      	ldrh	r2, [r7, #18]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d238      	bcs.n	800093e <main+0x282>
					// Data good, process
					if (uart_rx_skippedPackets == 0 && jpeg_state == 0) {
 80008cc:	4b4a      	ldr	r3, [pc, #296]	@ (80009f8 <main+0x33c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d131      	bne.n	8000938 <main+0x27c>
 80008d4:	4b49      	ldr	r3, [pc, #292]	@ (80009fc <main+0x340>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d12d      	bne.n	8000938 <main+0x27c>
						// Start the jpeg decode
						jpeg_size = uart_rx_lastPacketNum*64;
 80008dc:	4b45      	ldr	r3, [pc, #276]	@ (80009f4 <main+0x338>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	019b      	lsls	r3, r3, #6
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b46      	ldr	r3, [pc, #280]	@ (8000a00 <main+0x344>)
 80008e6:	801a      	strh	r2, [r3, #0]
						ST7789_Update(&hst7789, 0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	4837      	ldr	r0, [pc, #220]	@ (80009c8 <main+0x30c>)
 80008ec:	f001 fe68 	bl	80025c0 <ST7789_Update>
						//sprintf(ssd_msg, " JPEG SZ %d", jpeg_size);
						//WriteDebug(ssd_msg, strlen(ssd_msg));
						HAL_StatusTypeDef ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw, jpeg_size, jpeg_out, JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT*64);
 80008f0:	4b43      	ldr	r3, [pc, #268]	@ (8000a00 <main+0x344>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	4b41      	ldr	r3, [pc, #260]	@ (8000a04 <main+0x348>)
 80008fe:	4942      	ldr	r1, [pc, #264]	@ (8000a08 <main+0x34c>)
 8000900:	4842      	ldr	r0, [pc, #264]	@ (8000a0c <main+0x350>)
 8000902:	f009 f9aa 	bl	8009c5a <HAL_JPEG_Decode_DMA>
 8000906:	4603      	mov	r3, r0
 8000908:	747b      	strb	r3, [r7, #17]
						if (ret) {
 800090a:	7c7b      	ldrb	r3, [r7, #17]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00f      	beq.n	8000930 <main+0x274>
							sprintf(ssd_msg, " JPEG FAIL %d", ret);
 8000910:	7c7b      	ldrb	r3, [r7, #17]
 8000912:	461a      	mov	r2, r3
 8000914:	493e      	ldr	r1, [pc, #248]	@ (8000a10 <main+0x354>)
 8000916:	4832      	ldr	r0, [pc, #200]	@ (80009e0 <main+0x324>)
 8000918:	f017 fab6 	bl	8017e88 <siprintf>
							WriteDebug(ssd_msg, strlen(ssd_msg));
 800091c:	4830      	ldr	r0, [pc, #192]	@ (80009e0 <main+0x324>)
 800091e:	f7ff fcdf 	bl	80002e0 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4619      	mov	r1, r3
 8000928:	482d      	ldr	r0, [pc, #180]	@ (80009e0 <main+0x324>)
 800092a:	f000 fe67 	bl	80015fc <WriteDebug>
					if (uart_rx_skippedPackets == 0 && jpeg_state == 0) {
 800092e:	e006      	b.n	800093e <main+0x282>
						} else {
							jpeg_state = 1;
 8000930:	4b32      	ldr	r3, [pc, #200]	@ (80009fc <main+0x340>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
					if (uart_rx_skippedPackets == 0 && jpeg_state == 0) {
 8000936:	e002      	b.n	800093e <main+0x282>
						}
					} else {
						// Packets skipped
						uart_rx_skippedPackets = 0;
 8000938:	4b2f      	ldr	r3, [pc, #188]	@ (80009f8 <main+0x33c>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
					}
				}
				// flag the packet as processed
				uart_rx_lastPacketNum = rx_byte;
 800093e:	4a2d      	ldr	r2, [pc, #180]	@ (80009f4 <main+0x338>)
 8000940:	8a7b      	ldrh	r3, [r7, #18]
 8000942:	8013      	strh	r3, [r2, #0]
				uart_rx_packetState = 2;
 8000944:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <main+0x328>)
 8000946:	2202      	movs	r2, #2
 8000948:	701a      	strb	r2, [r3, #0]

				// fill in the received data
				//memcpy(hst7789.vram + rx_byte * 64, uart_rx_packetFullBuffer + 3, 64);
				memcpy(jpeg_raw + rx_byte * 64, uart_rx_packetFullBuffer + 3, 64);
 800094a:	8a7b      	ldrh	r3, [r7, #18]
 800094c:	019b      	lsls	r3, r3, #6
 800094e:	461a      	mov	r2, r3
 8000950:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <main+0x34c>)
 8000952:	4413      	add	r3, r2
 8000954:	492f      	ldr	r1, [pc, #188]	@ (8000a14 <main+0x358>)
 8000956:	2240      	movs	r2, #64	@ 0x40
 8000958:	4618      	mov	r0, r3
 800095a:	f017 faeb 	bl	8017f34 <memcpy>
				// log time
				uint32_t delta_t = HAL_GetTick() - old_t;
 800095e:	f001 fefd 	bl	800275c <HAL_GetTick>
 8000962:	4602      	mov	r2, r0
 8000964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	60fb      	str	r3, [r7, #12]
				sprintf(ssd_msg, " MS: %d", delta_t);
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	492a      	ldr	r1, [pc, #168]	@ (8000a18 <main+0x35c>)
 800096e:	481c      	ldr	r0, [pc, #112]	@ (80009e0 <main+0x324>)
 8000970:	f017 fa8a 	bl	8017e88 <siprintf>
				WriteDebug(ssd_msg, strlen(ssd_msg));
 8000974:	481a      	ldr	r0, [pc, #104]	@ (80009e0 <main+0x324>)
 8000976:	f7ff fcb3 	bl	80002e0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4619      	mov	r1, r3
 8000980:	4817      	ldr	r0, [pc, #92]	@ (80009e0 <main+0x324>)
 8000982:	f000 fe3b 	bl	80015fc <WriteDebug>
				old_t = HAL_GetTick();
 8000986:	f001 fee9 	bl	800275c <HAL_GetTick>
 800098a:	6278      	str	r0, [r7, #36]	@ 0x24
			}
		}

		// If the JPEG is decoded, process it
		if (jpeg_state == 2) {
 800098c:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <main+0x340>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b02      	cmp	r3, #2
 8000992:	f47f af67 	bne.w	8000864 <main+0x1a8>
			// TODO: Make this an async loop
			// TODO: Turn these screen dimensions into defines

			// Loop through every mcu block
			for (uint16_t mcu_x = 0; mcu_x < JPEG_MCU_WIDTH; mcu_x++) {
 8000996:	2300      	movs	r3, #0
 8000998:	847b      	strh	r3, [r7, #34]	@ 0x22
 800099a:	e0ab      	b.n	8000af4 <main+0x438>
 800099c:	24026828 	.word	0x24026828
 80009a0:	24000174 	.word	0x24000174
 80009a4:	24000724 	.word	0x24000724
 80009a8:	240002a4 	.word	0x240002a4
 80009ac:	2400074c 	.word	0x2400074c
 80009b0:	080187e0 	.word	0x080187e0
 80009b4:	24000fb0 	.word	0x24000fb0
 80009b8:	24000738 	.word	0x24000738
 80009bc:	24000250 	.word	0x24000250
 80009c0:	24000b4c 	.word	0x24000b4c
 80009c4:	080187fc 	.word	0x080187fc
 80009c8:	24001014 	.word	0x24001014
 80009cc:	24000518 	.word	0x24000518
 80009d0:	58021000 	.word	0x58021000
 80009d4:	24001028 	.word	0x24001028
 80009d8:	08018818 	.word	0x08018818
 80009dc:	08018834 	.word	0x08018834
 80009e0:	24000f4c 	.word	0x24000f4c
 80009e4:	24026927 	.word	0x24026927
 80009e8:	2402685c 	.word	0x2402685c
 80009ec:	24000618 	.word	0x24000618
 80009f0:	240268e4 	.word	0x240268e4
 80009f4:	24026928 	.word	0x24026928
 80009f8:	2402692a 	.word	0x2402692a
 80009fc:	240392d6 	.word	0x240392d6
 8000a00:	240392d4 	.word	0x240392d4
 8000a04:	2402fcd4 	.word	0x2402fcd4
 8000a08:	2402692c 	.word	0x2402692c
 8000a0c:	240003e8 	.word	0x240003e8
 8000a10:	0801883c 	.word	0x0801883c
 8000a14:	240268e7 	.word	0x240268e7
 8000a18:	0801884c 	.word	0x0801884c
				uint16_t mcu_idx = current_mcu_y*JPEG_MCU_WIDTH + mcu_x;
 8000a1c:	4b46      	ldr	r3, [pc, #280]	@ (8000b38 <main+0x47c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000a2c:	4413      	add	r3, r2
 8000a2e:	817b      	strh	r3, [r7, #10]

				for (uint16_t y = 0; y < 8; y++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	843b      	strh	r3, [r7, #32]
 8000a34:	e058      	b.n	8000ae8 <main+0x42c>
					for (uint16_t x = 0; x < 8; x++) {
 8000a36:	2300      	movs	r3, #0
 8000a38:	83fb      	strh	r3, [r7, #30]
 8000a3a:	e04f      	b.n	8000adc <main+0x420>
						// Bounds check
						if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 8000a3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000a3e:	00da      	lsls	r2, r3, #3
 8000a40:	8bfb      	ldrh	r3, [r7, #30]
 8000a42:	4413      	add	r3, r2
 8000a44:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a46:	dc45      	bgt.n	8000ad4 <main+0x418>
						// COLOR FORMAT
						// |RRRRR GGG|GGG BBBBB|
						// TODO: stop transmitting overscan to save bandwidth
						uint8_t sample = jpeg_out[mcu_idx*64 + y*8 + x];
 8000a48:	897b      	ldrh	r3, [r7, #10]
 8000a4a:	00da      	lsls	r2, r3, #3
 8000a4c:	8c3b      	ldrh	r3, [r7, #32]
 8000a4e:	4413      	add	r3, r2
 8000a50:	00da      	lsls	r2, r3, #3
 8000a52:	8bfb      	ldrh	r3, [r7, #30]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a39      	ldr	r2, [pc, #228]	@ (8000b3c <main+0x480>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	727b      	strb	r3, [r7, #9]

						uint32_t pix_x = (LCD_WIDTH-(mcu_x*8 + x))*2;
 8000a5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000a5e:	00da      	lsls	r2, r3, #3
 8000a60:	8bfb      	ldrh	r3, [r7, #30]
 8000a62:	4413      	add	r3, r2
 8000a64:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
						uint32_t pix_y = (current_mcu_y*16 + y*2)*LCD_WIDTH*2;
 8000a6c:	4b32      	ldr	r3, [pc, #200]	@ (8000b38 <main+0x47c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	00da      	lsls	r2, r3, #3
 8000a72:	8c3b      	ldrh	r3, [r7, #32]
 8000a74:	441a      	add	r2, r3
 8000a76:	4613      	mov	r3, r2
 8000a78:	011b      	lsls	r3, r3, #4
 8000a7a:	1a9b      	subs	r3, r3, r2
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	603b      	str	r3, [r7, #0]

						hst7789.vram[pix_y + pix_x] = (sample & 0b11111000) | ((sample & 0b11100000)>>5);
 8000a80:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000a84:	f023 0307 	bic.w	r3, r3, #7
 8000a88:	b25a      	sxtb	r2, r3
 8000a8a:	7a7b      	ldrb	r3, [r7, #9]
 8000a8c:	095b      	lsrs	r3, r3, #5
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b258      	sxtb	r0, r3
 8000a96:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <main+0x484>)
 8000a98:	691a      	ldr	r2, [r3, #16]
 8000a9a:	6839      	ldr	r1, [r7, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b2c2      	uxtb	r2, r0
 8000aa4:	701a      	strb	r2, [r3, #0]
						hst7789.vram[pix_y + pix_x + 1] = ((sample & 0b11111000) >> 3) | ((sample & 0b00011100)<<3);
 8000aa6:	7a7b      	ldrb	r3, [r7, #9]
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	b25a      	sxtb	r2, r3
 8000aae:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	f023 031f 	bic.w	r3, r3, #31
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b258      	sxtb	r0, r3
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <main+0x484>)
 8000ac2:	691a      	ldr	r2, [r3, #16]
 8000ac4:	6839      	ldr	r1, [r7, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	440b      	add	r3, r1
 8000aca:	3301      	adds	r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	b2c2      	uxtb	r2, r0
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	e000      	b.n	8000ad6 <main+0x41a>
						if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 8000ad4:	bf00      	nop
					for (uint16_t x = 0; x < 8; x++) {
 8000ad6:	8bfb      	ldrh	r3, [r7, #30]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	83fb      	strh	r3, [r7, #30]
 8000adc:	8bfb      	ldrh	r3, [r7, #30]
 8000ade:	2b07      	cmp	r3, #7
 8000ae0:	d9ac      	bls.n	8000a3c <main+0x380>
				for (uint16_t y = 0; y < 8; y++) {
 8000ae2:	8c3b      	ldrh	r3, [r7, #32]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	843b      	strh	r3, [r7, #32]
 8000ae8:	8c3b      	ldrh	r3, [r7, #32]
 8000aea:	2b07      	cmp	r3, #7
 8000aec:	d9a3      	bls.n	8000a36 <main+0x37a>
			for (uint16_t mcu_x = 0; mcu_x < JPEG_MCU_WIDTH; mcu_x++) {
 8000aee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000af0:	3301      	adds	r3, #1
 8000af2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000af4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000af6:	2b27      	cmp	r3, #39	@ 0x27
 8000af8:	d990      	bls.n	8000a1c <main+0x360>
						//hst7789.vram[(mcu_y*16 + y*2 + 1) * LCD_WIDTH*2 + (LCD_WIDTH-(mcu_x*8 + x))*2 + 1] = ((sample & 0b11111000) >> 3) | ((sample & 0b00011100)<<3);
					}
				}
			}

			current_mcu_y++;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <main+0x47c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <main+0x47c>)
 8000b04:	701a      	strb	r2, [r3, #0]

			if (current_mcu_y == JPEG_MCU_HEIGHT/2 + 1) {
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <main+0x47c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d103      	bne.n	8000b16 <main+0x45a>
				ST7789_Update(&hst7789, 0);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	480b      	ldr	r0, [pc, #44]	@ (8000b40 <main+0x484>)
 8000b12:	f001 fd55 	bl	80025c0 <ST7789_Update>
			}

			if (current_mcu_y >= JPEG_MCU_HEIGHT) {
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <main+0x47c>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b0e      	cmp	r3, #14
 8000b1c:	f67f aea2 	bls.w	8000864 <main+0x1a8>
				ST7789_Update(&hst7789, 1);
 8000b20:	2101      	movs	r1, #1
 8000b22:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <main+0x484>)
 8000b24:	f001 fd4c 	bl	80025c0 <ST7789_Update>
				current_mcu_y = 0;
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <main+0x47c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
				// Flag JPEG as idle
				jpeg_state = 0;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <main+0x488>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
		if (uart_rx_packetState == 0) {
 8000b34:	e696      	b.n	8000864 <main+0x1a8>
 8000b36:	bf00      	nop
 8000b38:	240392d7 	.word	0x240392d7
 8000b3c:	2402fcd4 	.word	0x2402fcd4
 8000b40:	24001014 	.word	0x24001014
 8000b44:	240392d6 	.word	0x240392d6

08000b48 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b09c      	sub	sp, #112	@ 0x70
 8000b4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b52:	224c      	movs	r2, #76	@ 0x4c
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f017 f9b8 	bl	8017ecc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2220      	movs	r2, #32
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f017 f9b2 	bl	8017ecc <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f00c fc17 	bl	800d39c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b30      	ldr	r3, [pc, #192]	@ (8000c34 <SystemClock_Config+0xec>)
 8000b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b76:	4a2f      	ldr	r2, [pc, #188]	@ (8000c34 <SystemClock_Config+0xec>)
 8000b78:	f023 0301 	bic.w	r3, r3, #1
 8000b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <SystemClock_Config+0xec>)
 8000b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <SystemClock_Config+0xf0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a2a      	ldr	r2, [pc, #168]	@ (8000c38 <SystemClock_Config+0xf0>)
 8000b8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <SystemClock_Config+0xf0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba0:	bf00      	nop
 8000ba2:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <SystemClock_Config+0xf0>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bae:	d1f8      	bne.n	8000ba2 <SystemClock_Config+0x5a>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 8000bc6:	2318      	movs	r3, #24
 8000bc8:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be6:	4618      	mov	r0, r3
 8000be8:	f00c fc22 	bl	800d430 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000bf2:	f000 fd55 	bl	80016a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	233f      	movs	r3, #63	@ 0x3f
 8000bf8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c06:	2340      	movs	r3, #64	@ 0x40
 8000c08:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c0a:	2340      	movs	r3, #64	@ 0x40
 8000c0c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c12:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c14:	2340      	movs	r3, #64	@ 0x40
 8000c16:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00d f861 	bl	800dce4 <HAL_RCC_ClockConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8000c28:	f000 fd3a 	bl	80016a0 <Error_Handler>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	3770      	adds	r7, #112	@ 0x70
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	58000400 	.word	0x58000400
 8000c38:	58024800 	.word	0x58024800

08000c3c <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0b0      	sub	sp, #192	@ 0xc0
 8000c40:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	22c0      	movs	r2, #192	@ 0xc0
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f017 f93f 	bl	8017ecc <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C2
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ccc <PeriphCommonClock_Config+0x90>)
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e9c7 2300 	strd	r2, r3, [r7]
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SPI4;
	PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000c5c:	2380      	movs	r3, #128	@ 0x80
 8000c5e:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 20;
 8000c60:	2314      	movs	r3, #20
 8000c62:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	637b      	str	r3, [r7, #52]	@ 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000c8c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000c92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c96:	643b      	str	r3, [r7, #64]	@ 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000c9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ca0:	667b      	str	r3, [r7, #100]	@ 0x64
	PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f00d fba2 	bl	800e3fc <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <PeriphCommonClock_Config+0x86>
	{
		Error_Handler();
 8000cbe:	f000 fcef 	bl	80016a0 <Error_Handler>
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	37c0      	adds	r7, #192	@ 0xc0
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	00082008 	.word	0x00082008

08000cd0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000cf4:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000cf6:	4a39      	ldr	r2, [pc, #228]	@ (8000ddc <MX_ADC1_Init+0x10c>)
 8000cf8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000cfa:	4b37      	ldr	r3, [pc, #220]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000cfc:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000d00:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000d02:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d08:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d0e:	4b32      	ldr	r3, [pc, #200]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d10:	2208      	movs	r2, #8
 8000d12:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d14:	4b30      	ldr	r3, [pc, #192]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 2;
 8000d20:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d26:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d32:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d38:	4b27      	ldr	r3, [pc, #156]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d44:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000d4a:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Oversampling.Ratio = 1;
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d58:	481f      	ldr	r0, [pc, #124]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d5a:	f001 ff55 	bl	8002c08 <HAL_ADC_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8000d64:	f000 fc9c 	bl	80016a0 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	4819      	ldr	r0, [pc, #100]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000d74:	f002 ff02 	bl	8003b7c <HAL_ADCEx_MultiModeConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0xb2>
	{
		Error_Handler();
 8000d7e:	f000 fc8f 	bl	80016a0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_ADC1_Init+0x110>)
 8000d84:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d86:	2306      	movs	r3, #6
 8000d88:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d8e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d92:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d94:	2304      	movs	r3, #4
 8000d96:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000da6:	f002 f9a9 	bl	80030fc <HAL_ADC_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_ADC1_Init+0xe4>
	{
		Error_Handler();
 8000db0:	f000 fc76 	bl	80016a0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_ADC1_Init+0x114>)
 8000db6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000db8:	230c      	movs	r3, #12
 8000dba:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_ADC1_Init+0x108>)
 8000dc2:	f002 f99b 	bl	80030fc <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC1_Init+0x100>
	{
		Error_Handler();
 8000dcc:	f000 fc68 	bl	80016a0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	@ 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000174 	.word	0x24000174
 8000ddc:	40022000 	.word	0x40022000
 8000de0:	0c900008 	.word	0x0c900008
 8000de4:	10c00010 	.word	0x10c00010

08000de8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dee:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <MX_I2C1_Init+0x78>)
 8000df0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00401959;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000df4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <MX_I2C1_Init+0x7c>)
 8000df6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e22:	480e      	ldr	r0, [pc, #56]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e24:	f006 f930 	bl	8007088 <HAL_I2C_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000e2e:	f000 fc37 	bl	80016a0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e36:	f008 fd61 	bl	80098fc <HAL_I2CEx_ConfigAnalogFilter>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000e40:	f000 fc2e 	bl	80016a0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e48:	f008 fda3 	bl	8009992 <HAL_I2CEx_ConfigDigitalFilter>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000e52:	f000 fc25 	bl	80016a0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	24000250 	.word	0x24000250
 8000e60:	40005400 	.word	0x40005400
 8000e64:	00401959 	.word	0x00401959

08000e68 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee0 <MX_I2C2_Init+0x78>)
 8000e70:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00401959;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee4 <MX_I2C2_Init+0x7c>)
 8000e76:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ea2:	480e      	ldr	r0, [pc, #56]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000ea4:	f006 f8f0 	bl	8007088 <HAL_I2C_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8000eae:	f000 fbf7 	bl	80016a0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4809      	ldr	r0, [pc, #36]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000eb6:	f008 fd21 	bl	80098fc <HAL_I2CEx_ConfigAnalogFilter>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8000ec0:	f000 fbee 	bl	80016a0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000ec8:	f008 fd63 	bl	8009992 <HAL_I2CEx_ConfigDigitalFilter>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8000ed2:	f000 fbe5 	bl	80016a0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	240002a4 	.word	0x240002a4
 8000ee0:	40005800 	.word	0x40005800
 8000ee4:	00401959 	.word	0x00401959

08000ee8 <MX_JPEG_Init>:
 * @brief JPEG Initialization Function
 * @param None
 * @retval None
 */
static void MX_JPEG_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	/* USER CODE END JPEG_Init 0 */

	/* USER CODE BEGIN JPEG_Init 1 */

	/* USER CODE END JPEG_Init 1 */
	hjpeg.Instance = JPEG;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <MX_JPEG_Init+0x20>)
 8000eee:	4a07      	ldr	r2, [pc, #28]	@ (8000f0c <MX_JPEG_Init+0x24>)
 8000ef0:	601a      	str	r2, [r3, #0]
	if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_JPEG_Init+0x20>)
 8000ef4:	f008 fd9a 	bl	8009a2c <HAL_JPEG_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_JPEG_Init+0x1a>
	{
		Error_Handler();
 8000efe:	f000 fbcf 	bl	80016a0 <Error_Handler>
	}
	/* USER CODE BEGIN JPEG_Init 2 */

	/* USER CODE END JPEG_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	240003e8 	.word	0x240003e8
 8000f0c:	52003000 	.word	0x52003000

08000f10 <MX_SPI4_Init>:
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f16:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <MX_SPI4_Init+0xa8>)
 8000f18:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f1c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f20:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000f22:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f28:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f2a:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f30:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f3e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f42:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi4.Init.CRCPolynomial = 0x0;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f68:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	645a      	str	r2, [r3, #68]	@ 0x44
	hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <MX_SPI4_Init+0xa4>)
 8000fa2:	f00f ff29 	bl	8010df8 <HAL_SPI_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_SPI4_Init+0xa0>
	{
		Error_Handler();
 8000fac:	f000 fb78 	bl	80016a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24000518 	.word	0x24000518
 8000fb8:	40013400 	.word	0x40013400

08000fbc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fc2:	4a25      	ldr	r2, [pc, #148]	@ (8001058 <MX_USART1_UART_Init+0x9c>)
 8000fc4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 111111;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fc8:	4a24      	ldr	r2, [pc, #144]	@ (800105c <MX_USART1_UART_Init+0xa0>)
 8000fca:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fe0:	220c      	movs	r2, #12
 8000fe2:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8000ffe:	2220      	movs	r2, #32
 8001000:	629a      	str	r2, [r3, #40]	@ 0x28
	huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8001004:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001008:	641a      	str	r2, [r3, #64]	@ 0x40
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800100a:	4812      	ldr	r0, [pc, #72]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 800100c:	f010 fe9f 	bl	8011d4e <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x5e>
	{
		Error_Handler();
 8001016:	f000 fb43 	bl	80016a0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101a:	2100      	movs	r1, #0
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 800101e:	f012 fdba 	bl	8013b96 <HAL_UARTEx_SetTxFifoThreshold>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART1_UART_Init+0x70>
	{
		Error_Handler();
 8001028:	f000 fb3a 	bl	80016a0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102c:	2100      	movs	r1, #0
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8001030:	f012 fdef 	bl	8013c12 <HAL_UARTEx_SetRxFifoThreshold>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART1_UART_Init+0x82>
	{
		Error_Handler();
 800103a:	f000 fb31 	bl	80016a0 <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_USART1_UART_Init+0x98>)
 8001040:	f012 fd6e 	bl	8013b20 <HAL_UARTEx_EnableFifoMode>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART1_UART_Init+0x92>
	{
		Error_Handler();
 800104a:	f000 fb29 	bl	80016a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000618 	.word	0x24000618
 8001058:	40011000 	.word	0x40011000
 800105c:	0001b207 	.word	0x0001b207

08001060 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001066:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <MX_DMA_Init+0x9c>)
 8001068:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800106c:	4a23      	ldr	r2, [pc, #140]	@ (80010fc <MX_DMA_Init+0x9c>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001076:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <MX_DMA_Init+0x9c>)
 8001078:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_DMA_Init+0x9c>)
 8001086:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800108a:	4a1c      	ldr	r2, [pc, #112]	@ (80010fc <MX_DMA_Init+0x9c>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <MX_DMA_Init+0x9c>)
 8001096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	200b      	movs	r0, #11
 80010a8:	f002 ff21 	bl	8003eee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010ac:	200b      	movs	r0, #11
 80010ae:	f002 ff38 	bl	8003f22 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	200c      	movs	r0, #12
 80010b8:	f002 ff19 	bl	8003eee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010bc:	200c      	movs	r0, #12
 80010be:	f002 ff30 	bl	8003f22 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	200d      	movs	r0, #13
 80010c8:	f002 ff11 	bl	8003eee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010cc:	200d      	movs	r0, #13
 80010ce:	f002 ff28 	bl	8003f22 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	200e      	movs	r0, #14
 80010d8:	f002 ff09 	bl	8003eee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010dc:	200e      	movs	r0, #14
 80010de:	f002 ff20 	bl	8003f22 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2038      	movs	r0, #56	@ 0x38
 80010e8:	f002 ff01 	bl	8003eee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010ec:	2038      	movs	r0, #56	@ 0x38
 80010ee:	f002 ff18 	bl	8003f22 <HAL_NVIC_EnableIRQ>

}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	58024400 	.word	0x58024400

08001100 <MX_MDMA_Init>:

/**
 * Enable MDMA controller clock
 */
static void MX_MDMA_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

	/* MDMA controller clock enable */
	__HAL_RCC_MDMA_CLK_ENABLE();
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <MX_MDMA_Init+0x3c>)
 8001108:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800110c:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <MX_MDMA_Init+0x3c>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_MDMA_Init+0x3c>)
 8001118:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
	/* Local variables */

	/* MDMA interrupt initialization */
	/* MDMA_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	207a      	movs	r0, #122	@ 0x7a
 800112a:	f002 fee0 	bl	8003eee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800112e:	207a      	movs	r0, #122	@ 0x7a
 8001130:	f002 fef7 	bl	8003f22 <HAL_NVIC_EnableIRQ>

}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	58024400 	.word	0x58024400

08001140 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001156:	4b47      	ldr	r3, [pc, #284]	@ (8001274 <MX_GPIO_Init+0x134>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115c:	4a45      	ldr	r2, [pc, #276]	@ (8001274 <MX_GPIO_Init+0x134>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001166:	4b43      	ldr	r3, [pc, #268]	@ (8001274 <MX_GPIO_Init+0x134>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001174:	4b3f      	ldr	r3, [pc, #252]	@ (8001274 <MX_GPIO_Init+0x134>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117a:	4a3e      	ldr	r2, [pc, #248]	@ (8001274 <MX_GPIO_Init+0x134>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001184:	4b3b      	ldr	r3, [pc, #236]	@ (8001274 <MX_GPIO_Init+0x134>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b38      	ldr	r3, [pc, #224]	@ (8001274 <MX_GPIO_Init+0x134>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001198:	4a36      	ldr	r2, [pc, #216]	@ (8001274 <MX_GPIO_Init+0x134>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a2:	4b34      	ldr	r3, [pc, #208]	@ (8001274 <MX_GPIO_Init+0x134>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011b0:	4b30      	ldr	r3, [pc, #192]	@ (8001274 <MX_GPIO_Init+0x134>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001274 <MX_GPIO_Init+0x134>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <MX_GPIO_Init+0x134>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <MX_GPIO_Init+0x134>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d4:	4a27      	ldr	r2, [pc, #156]	@ (8001274 <MX_GPIO_Init+0x134>)
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011de:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <MX_GPIO_Init+0x134>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2120      	movs	r1, #32
 80011f0:	4821      	ldr	r0, [pc, #132]	@ (8001278 <MX_GPIO_Init+0x138>)
 80011f2:	f005 ff2f 	bl	8007054 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011fc:	481f      	ldr	r0, [pc, #124]	@ (800127c <MX_GPIO_Init+0x13c>)
 80011fe:	f005 ff29 	bl	8007054 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI4_DC_Pin */
	GPIO_InitStruct.Pin = SPI4_DC_Pin;
 8001202:	2320      	movs	r3, #32
 8001204:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4817      	ldr	r0, [pc, #92]	@ (8001278 <MX_GPIO_Init+0x138>)
 800121a:	f005 fd6b 	bl	8006cf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_L_Pin */
	GPIO_InitStruct.Pin = BTN_L_Pin;
 800121e:	2320      	movs	r3, #32
 8001220:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN_L_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4813      	ldr	r0, [pc, #76]	@ (8001280 <MX_GPIO_Init+0x140>)
 8001232:	f005 fd5f 	bl	8006cf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_R_Pin */
	GPIO_InitStruct.Pin = BTN_R_Pin;
 8001236:	2320      	movs	r3, #32
 8001238:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <MX_GPIO_Init+0x13c>)
 800124a:	f005 fd53 	bl	8006cf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI4_RST_Pin */
	GPIO_InitStruct.Pin = SPI4_RST_Pin;
 800124e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001252:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_GPIO_Init+0x13c>)
 8001268:	f005 fd44 	bl	8006cf4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	@ 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58024400 	.word	0x58024400
 8001278:	58021000 	.word	0x58021000
 800127c:	58020800 	.word	0x58020800
 8001280:	58020000 	.word	0x58020000

08001284 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint16_t old_head = uart_rxDMA_readHead;
 800128c:	4b3a      	ldr	r3, [pc, #232]	@ (8001378 <HAL_UART_RxCpltCallback+0xf4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	827b      	strh	r3, [r7, #18]

	// Find the delimeter
	uint8_t found_delim = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	75fb      	strb	r3, [r7, #23]
	for (uint16_t circular_ptr = 0; circular_ptr < UART_BUFFERSIZE; circular_ptr++) {
 8001296:	2300      	movs	r3, #0
 8001298:	82bb      	strh	r3, [r7, #20]
 800129a:	e020      	b.n	80012de <HAL_UART_RxCpltCallback+0x5a>
		uint16_t packet_ptr = (circular_ptr + uart_rxDMA_readHead) % UART_BUFFERSIZE;
 800129c:	8abb      	ldrh	r3, [r7, #20]
 800129e:	4a36      	ldr	r2, [pc, #216]	@ (8001378 <HAL_UART_RxCpltCallback+0xf4>)
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	1899      	adds	r1, r3, r2
 80012a4:	4b35      	ldr	r3, [pc, #212]	@ (800137c <HAL_UART_RxCpltCallback+0xf8>)
 80012a6:	fb83 2301 	smull	r2, r3, r3, r1
 80012aa:	105a      	asrs	r2, r3, #1
 80012ac:	17cb      	asrs	r3, r1, #31
 80012ae:	1ad2      	subs	r2, r2, r3
 80012b0:	4613      	mov	r3, r2
 80012b2:	015b      	lsls	r3, r3, #5
 80012b4:	4413      	add	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	1aca      	subs	r2, r1, r3
 80012bc:	4613      	mov	r3, r2
 80012be:	823b      	strh	r3, [r7, #16]
		if (uart_rxDMA_buffer[packet_ptr] == 0b10101010) {
 80012c0:	8a3b      	ldrh	r3, [r7, #16]
 80012c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001380 <HAL_UART_RxCpltCallback+0xfc>)
 80012c4:	5cd3      	ldrb	r3, [r2, r3]
 80012c6:	2baa      	cmp	r3, #170	@ 0xaa
 80012c8:	d106      	bne.n	80012d8 <HAL_UART_RxCpltCallback+0x54>
			found_delim = 1;					// Update flag
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
			uart_rxDMA_readHead = packet_ptr;	// Move the readHead
 80012ce:	8a3b      	ldrh	r3, [r7, #16]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b29      	ldr	r3, [pc, #164]	@ (8001378 <HAL_UART_RxCpltCallback+0xf4>)
 80012d4:	701a      	strb	r2, [r3, #0]
			break;
 80012d6:	e005      	b.n	80012e4 <HAL_UART_RxCpltCallback+0x60>
	for (uint16_t circular_ptr = 0; circular_ptr < UART_BUFFERSIZE; circular_ptr++) {
 80012d8:	8abb      	ldrh	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	82bb      	strh	r3, [r7, #20]
 80012de:	8abb      	ldrh	r3, [r7, #20]
 80012e0:	2b42      	cmp	r3, #66	@ 0x42
 80012e2:	d9db      	bls.n	800129c <HAL_UART_RxCpltCallback+0x18>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) {
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <HAL_UART_RxCpltCallback+0x6e>
		uart_rx_packetState = 1;	// Flag as malformed
 80012ea:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <HAL_UART_RxCpltCallback+0x100>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
		return;
 80012f0:	e03e      	b.n	8001370 <HAL_UART_RxCpltCallback+0xec>
	}

	// Copy the partial packet contents into the completed packet buffer
	memcpy(uart_rx_packetFullBuffer, uart_rx_packetPartBuffer, UART_BUFFERSIZE);
 80012f2:	4a25      	ldr	r2, [pc, #148]	@ (8001388 <HAL_UART_RxCpltCallback+0x104>)
 80012f4:	4b25      	ldr	r3, [pc, #148]	@ (800138c <HAL_UART_RxCpltCallback+0x108>)
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	2343      	movs	r3, #67	@ 0x43
 80012fc:	461a      	mov	r2, r3
 80012fe:	f016 fe19 	bl	8017f34 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(uart_rx_packetPartBuffer, uart_rxDMA_buffer + uart_rxDMA_readHead, UART_BUFFERSIZE - uart_rxDMA_readHead);
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <HAL_UART_RxCpltCallback+0xf4>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_UART_RxCpltCallback+0xfc>)
 800130a:	4413      	add	r3, r2
 800130c:	4a1a      	ldr	r2, [pc, #104]	@ (8001378 <HAL_UART_RxCpltCallback+0xf4>)
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	f1c2 0243 	rsb	r2, r2, #67	@ 0x43
 8001314:	4619      	mov	r1, r3
 8001316:	481d      	ldr	r0, [pc, #116]	@ (800138c <HAL_UART_RxCpltCallback+0x108>)
 8001318:	f016 fe0c 	bl	8017f34 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	if (old_head < uart_rxDMA_readHead) {
 800131c:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <HAL_UART_RxCpltCallback+0xf4>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	8a7b      	ldrh	r3, [r7, #18]
 8001324:	4293      	cmp	r3, r2
 8001326:	d203      	bcs.n	8001330 <HAL_UART_RxCpltCallback+0xac>
		uart_rx_packetState = 1;	// Flag as malformed
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <HAL_UART_RxCpltCallback+0x100>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
		return;
 800132e:	e01f      	b.n	8001370 <HAL_UART_RxCpltCallback+0xec>
	}

	uint16_t head_slip = old_head - uart_rxDMA_readHead;	// How many bytes were dropped
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <HAL_UART_RxCpltCallback+0xf4>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	8a7b      	ldrh	r3, [r7, #18]
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	81fb      	strh	r3, [r7, #14]
	memset(uart_rx_packetFullBuffer + (UART_BUFFERSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 800133c:	8a7b      	ldrh	r3, [r7, #18]
 800133e:	f1c3 0343 	rsb	r3, r3, #67	@ 0x43
 8001342:	461a      	mov	r2, r3
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <HAL_UART_RxCpltCallback+0x104>)
 8001346:	4413      	add	r3, r2
 8001348:	89fa      	ldrh	r2, [r7, #14]
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f016 fdbd 	bl	8017ecc <memset>
	memcpy(uart_rx_packetFullBuffer + (UART_BUFFERSIZE - old_head) + head_slip, uart_rxDMA_buffer, uart_rxDMA_readHead); // Fill in missing bytes
 8001352:	89fa      	ldrh	r2, [r7, #14]
 8001354:	8a7b      	ldrh	r3, [r7, #18]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	3343      	adds	r3, #67	@ 0x43
 800135a:	4a0b      	ldr	r2, [pc, #44]	@ (8001388 <HAL_UART_RxCpltCallback+0x104>)
 800135c:	4413      	add	r3, r2
 800135e:	4a06      	ldr	r2, [pc, #24]	@ (8001378 <HAL_UART_RxCpltCallback+0xf4>)
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	4907      	ldr	r1, [pc, #28]	@ (8001380 <HAL_UART_RxCpltCallback+0xfc>)
 8001364:	4618      	mov	r0, r3
 8001366:	f016 fde5 	bl	8017f34 <memcpy>
	// What this looks like in memory:
	// B0 B1 B2 B3 B4 XX XX B7
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// Packet is ready
	uart_rx_packetState = 0;
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_UART_RxCpltCallback+0x100>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
}
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2402689f 	.word	0x2402689f
 800137c:	07a44c6b 	.word	0x07a44c6b
 8001380:	2402685c 	.word	0x2402685c
 8001384:	24026927 	.word	0x24026927
 8001388:	240268e4 	.word	0x240268e4
 800138c:	240268a0 	.word	0x240268a0

08001390 <HAL_JPEG_DecodeCpltCallback>:

// ------------------------------------------------------------ OVERRIDE JPEG DMA CALLBACKS -- //
// JPEG hardware has completed the current image
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef * hjpeg) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	//sprintf(ssd_msg, " JPEG CPLT");
	//WriteDebug(ssd_msg, strlen(ssd_msg));
	jpeg_state = 2;
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800139a:	2202      	movs	r2, #2
 800139c:	701a      	strb	r2, [r3, #0]
	// Debug MSG
	//	sprintf(usb_msg, "JPEG: Finished encode\r\n");
	//	CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	240392d6 	.word	0x240392d6

080013b0 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 80013b8:	4909      	ldr	r1, [pc, #36]	@ (80013e0 <HAL_JPEG_ErrorCallback+0x30>)
 80013ba:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <HAL_JPEG_ErrorCallback+0x34>)
 80013bc:	f016 fd64 	bl	8017e88 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 80013c0:	4808      	ldr	r0, [pc, #32]	@ (80013e4 <HAL_JPEG_ErrorCallback+0x34>)
 80013c2:	f7fe ff8d 	bl	80002e0 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <HAL_JPEG_ErrorCallback+0x34>)
 80013ce:	f000 f915 	bl	80015fc <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 2;
 80013d2:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <HAL_JPEG_ErrorCallback+0x38>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	701a      	strb	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	08018854 	.word	0x08018854
 80013e4:	24000f4c 	.word	0x24000f4c
 80013e8:	240392d6 	.word	0x240392d6

080013ec <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef * hjpeg, uint8_t * pDataOut, uint32_t OutDataLength) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
	sprintf(ssd_msg, " JPEG D %d", OutDataLength);
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	490a      	ldr	r1, [pc, #40]	@ (8001424 <HAL_JPEG_DataReadyCallback+0x38>)
 80013fc:	480a      	ldr	r0, [pc, #40]	@ (8001428 <HAL_JPEG_DataReadyCallback+0x3c>)
 80013fe:	f016 fd43 	bl	8017e88 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001402:	4809      	ldr	r0, [pc, #36]	@ (8001428 <HAL_JPEG_DataReadyCallback+0x3c>)
 8001404:	f7fe ff6c 	bl	80002e0 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	@ (8001428 <HAL_JPEG_DataReadyCallback+0x3c>)
 8001410:	f000 f8f4 	bl	80015fc <WriteDebug>
	//HAL_JPEG_Abort(hjpeg);
	jpeg_state = 2;
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <HAL_JPEG_DataReadyCallback+0x40>)
 8001416:	2202      	movs	r2, #2
 8001418:	701a      	strb	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	08018860 	.word	0x08018860
 8001428:	24000f4c 	.word	0x24000f4c
 800142c:	240392d6 	.word	0x240392d6

08001430 <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 8001438:	4803      	ldr	r0, [pc, #12]	@ (8001448 <HAL_SPI_TxCpltCallback+0x18>)
 800143a:	f001 f8fb 	bl	8002634 <ST7789_DMATransmitCplt>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	24001014 	.word	0x24001014
 800144c:	00000000 	.word	0x00000000

08001450 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	// Roll the blunt (rolling average)
	//adc_average[0] = 0;
	//adc_average[1] = 0;
	uint16_t adc_newavg[2] = {0, 0};
 8001458:	2300      	movs	r3, #0
 800145a:	81bb      	strh	r3, [r7, #12]
 800145c:	2300      	movs	r3, #0
 800145e:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 20; i++) {
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e01f      	b.n	80014a6 <HAL_ADC_ConvCpltCallback+0x56>
		// Accumulate the samples
		// Have to pre-divide so the result fits in a uint16
		adc_newavg[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	bfb8      	it	lt
 8001470:	425b      	neglt	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	0053      	lsls	r3, r2, #1
 8001476:	3318      	adds	r3, #24
 8001478:	443b      	add	r3, r7
 800147a:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 800147e:	4858      	ldr	r0, [pc, #352]	@ (80015e0 <HAL_ADC_ConvCpltCallback+0x190>)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001486:	4857      	ldr	r0, [pc, #348]	@ (80015e4 <HAL_ADC_ConvCpltCallback+0x194>)
 8001488:	fba0 0303 	umull	r0, r3, r0, r3
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	b29b      	uxth	r3, r3
 8001490:	440b      	add	r3, r1
 8001492:	b299      	uxth	r1, r3
 8001494:	0053      	lsls	r3, r2, #1
 8001496:	3318      	adds	r3, #24
 8001498:	443b      	add	r3, r7
 800149a:	460a      	mov	r2, r1
 800149c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (int i = 0; i < 20; i++) {
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3301      	adds	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b13      	cmp	r3, #19
 80014aa:	dddc      	ble.n	8001466 <HAL_ADC_ConvCpltCallback+0x16>
	}

	for (int i = 0; i < 2; i++) {
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	e081      	b.n	80015b6 <HAL_ADC_ConvCpltCallback+0x166>
		// Interpolate for smoother control
		adc_average[i] *= 0.4;
 80014b2:	4a4d      	ldr	r2, [pc, #308]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0x198>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014c2:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 80015d0 <HAL_ADC_ConvCpltCallback+0x180>
 80014c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014ce:	ee17 3a90 	vmov	r3, s15
 80014d2:	b299      	uxth	r1, r3
 80014d4:	4a44      	ldr	r2, [pc, #272]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0x198>)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_average[i] += adc_newavg[i]*0.6;
 80014dc:	4a42      	ldr	r2, [pc, #264]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0x198>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	3318      	adds	r3, #24
 80014f2:	443b      	add	r3, r7
 80014f4:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001500:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 80015d8 <HAL_ADC_ConvCpltCallback+0x188>
 8001504:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001508:	ee36 7b07 	vadd.f64	d7, d6, d7
 800150c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001510:	ee17 3a90 	vmov	r3, s15
 8001514:	b299      	uxth	r1, r3
 8001516:	4a34      	ldr	r2, [pc, #208]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0x198>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 800151e:	4a32      	ldr	r2, [pc, #200]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0x198>)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001526:	b21b      	sxth	r3, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	0bdb      	lsrs	r3, r3, #15
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	4a2e      	ldr	r2, [pc, #184]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x19c>)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4413      	add	r3, r2
 8001538:	460a      	mov	r2, r1
 800153a:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 800153c:	4a2a      	ldr	r2, [pc, #168]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0x198>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001544:	09db      	lsrs	r3, r3, #7
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2d9      	uxtb	r1, r3
 800154a:	4a29      	ldr	r2, [pc, #164]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4413      	add	r3, r2
 8001550:	460a      	mov	r2, r1
 8001552:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 8001554:	4a25      	ldr	r2, [pc, #148]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x19c>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <HAL_ADC_ConvCpltCallback+0x126>
 8001560:	4a23      	ldr	r2, [pc, #140]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	43db      	mvns	r3, r3
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	4a20      	ldr	r2, [pc, #128]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4413      	add	r3, r2
 8001572:	460a      	mov	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 8001576:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4413      	add	r3, r2
 800157c:	781a      	ldrb	r2, [r3, #0]
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d204      	bcs.n	8001590 <HAL_ADC_ConvCpltCallback+0x140>
			slider_magnitude[i] = 0;
 8001586:	4a1a      	ldr	r2, [pc, #104]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4413      	add	r3, r2
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 8001590:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dd04      	ble.n	80015b0 <HAL_ADC_ConvCpltCallback+0x160>
			slider_magnitude[i] = 0xFF;
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4413      	add	r3, r2
 80015ac:	22ff      	movs	r2, #255	@ 0xff
 80015ae:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	3301      	adds	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f77f af7a 	ble.w	80014b2 <HAL_ADC_ConvCpltCallback+0x62>

	}
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	f3af 8000 	nop.w
 80015d0:	9999999a 	.word	0x9999999a
 80015d4:	3fd99999 	.word	0x3fd99999
 80015d8:	33333333 	.word	0x33333333
 80015dc:	3fe33333 	.word	0x3fe33333
 80015e0:	24026828 	.word	0x24026828
 80015e4:	cccccccd 	.word	0xcccccccd
 80015e8:	24026850 	.word	0x24026850
 80015ec:	24026858 	.word	0x24026858
 80015f0:	24026854 	.word	0x24026854
 80015f4:	24000000 	.word	0x24000000
 80015f8:	24000001 	.word	0x24000001

080015fc <WriteDebug>:
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
	}
}

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear(&hssd1);
 8001608:	480d      	ldr	r0, [pc, #52]	@ (8001640 <WriteDebug+0x44>)
 800160a:	f000 fe43 	bl	8002294 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 800160e:	480d      	ldr	r0, [pc, #52]	@ (8001644 <WriteDebug+0x48>)
 8001610:	f000 fe40 	bl	8002294 <SSD1306_Clear>
	SSD1306_DrawString(&hssd1, str_ptr, str_len);
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	461a      	mov	r2, r3
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4809      	ldr	r0, [pc, #36]	@ (8001640 <WriteDebug+0x44>)
 800161c:	f000 feac 	bl	8002378 <SSD1306_DrawString>
	SSD1306_DrawString(&hssd2, str_ptr, str_len);
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	461a      	mov	r2, r3
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4807      	ldr	r0, [pc, #28]	@ (8001644 <WriteDebug+0x48>)
 8001628:	f000 fea6 	bl	8002378 <SSD1306_DrawString>
	SSD1306_Update(&hssd1);
 800162c:	4804      	ldr	r0, [pc, #16]	@ (8001640 <WriteDebug+0x44>)
 800162e:	f000 fe45 	bl	80022bc <SSD1306_Update>
	SSD1306_Update(&hssd2);
 8001632:	4804      	ldr	r0, [pc, #16]	@ (8001644 <WriteDebug+0x48>)
 8001634:	f000 fe42 	bl	80022bc <SSD1306_Update>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	24000724 	.word	0x24000724
 8001644:	24000738 	.word	0x24000738

08001648 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800164e:	463b      	mov	r3, r7
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 800165a:	f002 fc7d 	bl	8003f58 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001662:	2300      	movs	r3, #0
 8001664:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800166a:	231f      	movs	r3, #31
 800166c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 800166e:	2387      	movs	r3, #135	@ 0x87
 8001670:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001672:	2300      	movs	r3, #0
 8001674:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001676:	2300      	movs	r3, #0
 8001678:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800167a:	2301      	movs	r3, #1
 800167c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800167e:	2301      	movs	r3, #1
 8001680:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800168a:	463b      	mov	r3, r7
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fc9b 	bl	8003fc8 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001692:	2004      	movs	r0, #4
 8001694:	f002 fc78 	bl	8003f88 <HAL_MPU_Enable>

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <Error_Handler+0x8>

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_MspInit+0x30>)
 80016b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016b8:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <HAL_MspInit+0x30>)
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_MspInit+0x30>)
 80016c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	58024400 	.word	0x58024400

080016e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	@ 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a3e      	ldr	r2, [pc, #248]	@ (80017f8 <HAL_ADC_MspInit+0x118>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d175      	bne.n	80017ee <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001702:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <HAL_ADC_MspInit+0x11c>)
 8001704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001708:	4a3c      	ldr	r2, [pc, #240]	@ (80017fc <HAL_ADC_MspInit+0x11c>)
 800170a:	f043 0320 	orr.w	r3, r3, #32
 800170e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001712:	4b3a      	ldr	r3, [pc, #232]	@ (80017fc <HAL_ADC_MspInit+0x11c>)
 8001714:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <HAL_ADC_MspInit+0x11c>)
 8001722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001726:	4a35      	ldr	r2, [pc, #212]	@ (80017fc <HAL_ADC_MspInit+0x11c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001730:	4b32      	ldr	r3, [pc, #200]	@ (80017fc <HAL_ADC_MspInit+0x11c>)
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <HAL_ADC_MspInit+0x11c>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001744:	4a2d      	ldr	r2, [pc, #180]	@ (80017fc <HAL_ADC_MspInit+0x11c>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800174e:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <HAL_ADC_MspInit+0x11c>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 800175c:	2340      	movs	r3, #64	@ 0x40
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001760:	2303      	movs	r3, #3
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4824      	ldr	r0, [pc, #144]	@ (8001800 <HAL_ADC_MspInit+0x120>)
 8001770:	f005 fac0 	bl	8006cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8001774:	2310      	movs	r3, #16
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001778:	2303      	movs	r3, #3
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	481f      	ldr	r0, [pc, #124]	@ (8001804 <HAL_ADC_MspInit+0x124>)
 8001788:	f005 fab4 	bl	8006cf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream3;
 800178c:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 800178e:	4a1f      	ldr	r2, [pc, #124]	@ (800180c <HAL_ADC_MspInit+0x12c>)
 8001790:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 8001794:	2209      	movs	r2, #9
 8001796:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001798:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800179e:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017a4:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 80017a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 80017ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 80017b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 80017be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80017c4:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 80017c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017d2:	480d      	ldr	r0, [pc, #52]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 80017d4:	f002 fc38 	bl	8004048 <HAL_DMA_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80017de:	f7ff ff5f 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 80017e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_ADC_MspInit+0x128>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	@ 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000
 80017fc:	58024400 	.word	0x58024400
 8001800:	58020000 	.word	0x58020000
 8001804:	58020800 	.word	0x58020800
 8001808:	240001d8 	.word	0x240001d8
 800180c:	40020058 	.word	0x40020058

08001810 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	@ 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a73      	ldr	r2, [pc, #460]	@ (80019fc <HAL_I2C_MspInit+0x1ec>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d16d      	bne.n	800190e <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b73      	ldr	r3, [pc, #460]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 8001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001838:	4a71      	ldr	r2, [pc, #452]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001842:	4b6f      	ldr	r3, [pc, #444]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001850:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001856:	2312      	movs	r3, #18
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001862:	2304      	movs	r3, #4
 8001864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4865      	ldr	r0, [pc, #404]	@ (8001a04 <HAL_I2C_MspInit+0x1f4>)
 800186e:	f005 fa41 	bl	8006cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001872:	4b63      	ldr	r3, [pc, #396]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 8001874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001878:	4a61      	ldr	r2, [pc, #388]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 800187a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800187e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001882:	4b5f      	ldr	r3, [pc, #380]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 8001884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001890:	4b5d      	ldr	r3, [pc, #372]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 8001892:	4a5e      	ldr	r2, [pc, #376]	@ (8001a0c <HAL_I2C_MspInit+0x1fc>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001896:	4b5c      	ldr	r3, [pc, #368]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 8001898:	2222      	movs	r2, #34	@ 0x22
 800189a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800189c:	4b5a      	ldr	r3, [pc, #360]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 800189e:	2240      	movs	r2, #64	@ 0x40
 80018a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a2:	4b59      	ldr	r3, [pc, #356]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018a8:	4b57      	ldr	r3, [pc, #348]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 80018aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018ae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b0:	4b55      	ldr	r3, [pc, #340]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b6:	4b54      	ldr	r3, [pc, #336]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80018bc:	4b52      	ldr	r3, [pc, #328]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018c2:	4b51      	ldr	r3, [pc, #324]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 80018c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018c8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ca:	4b4f      	ldr	r3, [pc, #316]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80018d0:	484d      	ldr	r0, [pc, #308]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 80018d2:	f002 fbb9 	bl	8004048 <HAL_DMA_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80018dc:	f7ff fee0 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a49      	ldr	r2, [pc, #292]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 80018e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80018e6:	4a48      	ldr	r2, [pc, #288]	@ (8001a08 <HAL_I2C_MspInit+0x1f8>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	201f      	movs	r0, #31
 80018f2:	f002 fafc 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018f6:	201f      	movs	r0, #31
 80018f8:	f002 fb13 	bl	8003f22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	2020      	movs	r0, #32
 8001902:	f002 faf4 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001906:	2020      	movs	r0, #32
 8001908:	f002 fb0b 	bl	8003f22 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800190c:	e071      	b.n	80019f2 <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a3f      	ldr	r2, [pc, #252]	@ (8001a10 <HAL_I2C_MspInit+0x200>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d16c      	bne.n	80019f2 <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	4b39      	ldr	r3, [pc, #228]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191e:	4a38      	ldr	r2, [pc, #224]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001928:	4b35      	ldr	r3, [pc, #212]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001936:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193c:	2312      	movs	r3, #18
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001940:	2301      	movs	r3, #1
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001948:	2304      	movs	r3, #4
 800194a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	482c      	ldr	r0, [pc, #176]	@ (8001a04 <HAL_I2C_MspInit+0x1f4>)
 8001954:	f005 f9ce 	bl	8006cf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001958:	4b29      	ldr	r3, [pc, #164]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 800195a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800195e:	4a28      	ldr	r2, [pc, #160]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 8001960:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001964:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001968:	4b25      	ldr	r3, [pc, #148]	@ (8001a00 <HAL_I2C_MspInit+0x1f0>)
 800196a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800196e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8001976:	4b27      	ldr	r3, [pc, #156]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 8001978:	4a27      	ldr	r2, [pc, #156]	@ (8001a18 <HAL_I2C_MspInit+0x208>)
 800197a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800197c:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 800197e:	2224      	movs	r2, #36	@ 0x24
 8001980:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001982:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 8001984:	2240      	movs	r2, #64	@ 0x40
 8001986:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001988:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800198e:	4b21      	ldr	r3, [pc, #132]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 8001990:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001994:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001996:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 80019aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019ae:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b0:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80019b6:	4817      	ldr	r0, [pc, #92]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 80019b8:	f002 fb46 	bl	8004048 <HAL_DMA_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 80019c2:	f7ff fe6d 	bl	80016a0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 80019ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80019cc:	4a11      	ldr	r2, [pc, #68]	@ (8001a14 <HAL_I2C_MspInit+0x204>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	2021      	movs	r0, #33	@ 0x21
 80019d8:	f002 fa89 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80019dc:	2021      	movs	r0, #33	@ 0x21
 80019de:	f002 faa0 	bl	8003f22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2022      	movs	r0, #34	@ 0x22
 80019e8:	f002 fa81 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80019ec:	2022      	movs	r0, #34	@ 0x22
 80019ee:	f002 fa98 	bl	8003f22 <HAL_NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3730      	adds	r7, #48	@ 0x30
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40005400 	.word	0x40005400
 8001a00:	58024400 	.word	0x58024400
 8001a04:	58020400 	.word	0x58020400
 8001a08:	240002f8 	.word	0x240002f8
 8001a0c:	40020040 	.word	0x40020040
 8001a10:	40005800 	.word	0x40005800
 8001a14:	24000370 	.word	0x24000370
 8001a18:	40020028 	.word	0x40020028

08001a1c <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a55      	ldr	r2, [pc, #340]	@ (8001b80 <HAL_JPEG_MspInit+0x164>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f040 80a3 	bne.w	8001b76 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001a30:	4b54      	ldr	r3, [pc, #336]	@ (8001b84 <HAL_JPEG_MspInit+0x168>)
 8001a32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a36:	4a53      	ldr	r2, [pc, #332]	@ (8001b84 <HAL_JPEG_MspInit+0x168>)
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001a40:	4b50      	ldr	r3, [pc, #320]	@ (8001b84 <HAL_JPEG_MspInit+0x168>)
 8001a42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a50:	4a4e      	ldr	r2, [pc, #312]	@ (8001b8c <HAL_JPEG_MspInit+0x170>)
 8001a52:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001a54:	4b4c      	ldr	r3, [pc, #304]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a56:	2211      	movs	r2, #17
 8001a58:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001a60:	4b49      	ldr	r3, [pc, #292]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a62:	2240      	movs	r2, #64	@ 0x40
 8001a64:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001a66:	4b48      	ldr	r3, [pc, #288]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001a6c:	4b46      	ldr	r3, [pc, #280]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a6e:	2202      	movs	r2, #2
 8001a70:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001a72:	4b45      	ldr	r3, [pc, #276]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001a78:	4b43      	ldr	r3, [pc, #268]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001a7e:	4b42      	ldr	r3, [pc, #264]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a80:	2280      	movs	r2, #128	@ 0x80
 8001a82:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001a84:	4b40      	ldr	r3, [pc, #256]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a8e:	2220      	movs	r2, #32
 8001a90:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001a92:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001a98:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001aa4:	4b38      	ldr	r3, [pc, #224]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001aaa:	4837      	ldr	r0, [pc, #220]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001aac:	f009 fe34 	bl	800b718 <HAL_MDMA_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001ab6:	f7ff fdf3 	bl	80016a0 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	4832      	ldr	r0, [pc, #200]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001ac0:	f009 fe76 	bl	800b7b0 <HAL_MDMA_ConfigPostRequestMask>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001aca:	f7ff fde9 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8001b88 <HAL_JPEG_MspInit+0x16c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001ada:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001adc:	4a2d      	ldr	r2, [pc, #180]	@ (8001b94 <HAL_JPEG_MspInit+0x178>)
 8001ade:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001ae2:	2214      	movs	r2, #20
 8001ae4:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001aec:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001aee:	2240      	movs	r2, #64	@ 0x40
 8001af0:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001af8:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001afe:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b00:	2208      	movs	r2, #8
 8001b02:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b06:	2220      	movs	r2, #32
 8001b08:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001b10:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b16:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001b30:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001b36:	4816      	ldr	r0, [pc, #88]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b38:	f009 fdee 	bl	800b718 <HAL_MDMA_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001b42:	f7ff fdad 	bl	80016a0 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4811      	ldr	r0, [pc, #68]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b4c:	f009 fe30 	bl	800b7b0 <HAL_MDMA_ConfigPostRequestMask>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001b56:	f7ff fda3 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b60:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <HAL_JPEG_MspInit+0x174>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2079      	movs	r0, #121	@ 0x79
 8001b6c:	f002 f9bf 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001b70:	2079      	movs	r0, #121	@ 0x79
 8001b72:	f002 f9d6 	bl	8003f22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	52003000 	.word	0x52003000
 8001b84:	58024400 	.word	0x58024400
 8001b88:	24000440 	.word	0x24000440
 8001b8c:	52000040 	.word	0x52000040
 8001b90:	240004ac 	.word	0x240004ac
 8001b94:	52000080 	.word	0x52000080

08001b98 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a3d      	ldr	r2, [pc, #244]	@ (8001cac <HAL_SPI_MspInit+0x114>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d173      	bne.n	8001ca2 <HAL_SPI_MspInit+0x10a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001bba:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb0 <HAL_SPI_MspInit+0x118>)
 8001bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8001cb0 <HAL_SPI_MspInit+0x118>)
 8001bc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bca:	4b39      	ldr	r3, [pc, #228]	@ (8001cb0 <HAL_SPI_MspInit+0x118>)
 8001bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd8:	4b35      	ldr	r3, [pc, #212]	@ (8001cb0 <HAL_SPI_MspInit+0x118>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bde:	4a34      	ldr	r2, [pc, #208]	@ (8001cb0 <HAL_SPI_MspInit+0x118>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be8:	4b31      	ldr	r3, [pc, #196]	@ (8001cb0 <HAL_SPI_MspInit+0x118>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001bf6:	2344      	movs	r3, #68	@ 0x44
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c06:	2305      	movs	r3, #5
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4828      	ldr	r0, [pc, #160]	@ (8001cb4 <HAL_SPI_MspInit+0x11c>)
 8001c12:	f005 f86f 	bl	8006cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c16:	2310      	movs	r3, #16
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c26:	2305      	movs	r3, #5
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4820      	ldr	r0, [pc, #128]	@ (8001cb4 <HAL_SPI_MspInit+0x11c>)
 8001c32:	f005 f85f 	bl	8006cf4 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8001c36:	4b20      	ldr	r3, [pc, #128]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c38:	4a20      	ldr	r2, [pc, #128]	@ (8001cbc <HAL_SPI_MspInit+0x124>)
 8001c3a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c3e:	2254      	movs	r2, #84	@ 0x54
 8001c40:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c44:	2240      	movs	r2, #64	@ 0x40
 8001c46:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c54:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c56:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c6a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c6e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001c76:	4810      	ldr	r0, [pc, #64]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c78:	f002 f9e6 	bl	8004048 <HAL_DMA_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 8001c82:	f7ff fd0d 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c8a:	679a      	str	r2, [r3, #120]	@ 0x78
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <HAL_SPI_MspInit+0x120>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2054      	movs	r0, #84	@ 0x54
 8001c98:	f002 f929 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001c9c:	2054      	movs	r0, #84	@ 0x54
 8001c9e:	f002 f940 	bl	8003f22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	@ 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40013400 	.word	0x40013400
 8001cb0:	58024400 	.word	0x58024400
 8001cb4:	58021000 	.word	0x58021000
 8001cb8:	240005a0 	.word	0x240005a0
 8001cbc:	40020010 	.word	0x40020010

08001cc0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0ba      	sub	sp, #232	@ 0xe8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	22c0      	movs	r2, #192	@ 0xc0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f016 f8f3 	bl	8017ecc <memset>
  if(huart->Instance==USART1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a43      	ldr	r2, [pc, #268]	@ (8001df8 <HAL_UART_MspInit+0x138>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d17e      	bne.n	8001dee <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cf0:	f04f 0201 	mov.w	r2, #1
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00c fb78 	bl	800e3fc <HAL_RCCEx_PeriphCLKConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d12:	f7ff fcc5 	bl	80016a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d16:	4b39      	ldr	r3, [pc, #228]	@ (8001dfc <HAL_UART_MspInit+0x13c>)
 8001d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d1c:	4a37      	ldr	r2, [pc, #220]	@ (8001dfc <HAL_UART_MspInit+0x13c>)
 8001d1e:	f043 0310 	orr.w	r3, r3, #16
 8001d22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d26:	4b35      	ldr	r3, [pc, #212]	@ (8001dfc <HAL_UART_MspInit+0x13c>)
 8001d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	4b31      	ldr	r3, [pc, #196]	@ (8001dfc <HAL_UART_MspInit+0x13c>)
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d3a:	4a30      	ldr	r2, [pc, #192]	@ (8001dfc <HAL_UART_MspInit+0x13c>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d44:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <HAL_UART_MspInit+0x13c>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d52:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d76:	4619      	mov	r1, r3
 8001d78:	4821      	ldr	r0, [pc, #132]	@ (8001e00 <HAL_UART_MspInit+0x140>)
 8001d7a:	f004 ffbb 	bl	8006cf4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8001d7e:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001d80:	4a21      	ldr	r2, [pc, #132]	@ (8001e08 <HAL_UART_MspInit+0x148>)
 8001d82:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d84:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001d86:	2229      	movs	r2, #41	@ 0x29
 8001d88:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d90:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001d98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da4:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001daa:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001dac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001db0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001db4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001db8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001dc0:	4810      	ldr	r0, [pc, #64]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001dc2:	f002 f941 	bl	8004048 <HAL_DMA_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001dcc:	f7ff fc68 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001dd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <HAL_UART_MspInit+0x144>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2025      	movs	r0, #37	@ 0x25
 8001de4:	f002 f883 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001de8:	2025      	movs	r0, #37	@ 0x25
 8001dea:	f002 f89a 	bl	8003f22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dee:	bf00      	nop
 8001df0:	37e8      	adds	r7, #232	@ 0xe8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40011000 	.word	0x40011000
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	58020400 	.word	0x58020400
 8001e04:	240006ac 	.word	0x240006ac
 8001e08:	40020410 	.word	0x40020410

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <NMI_Handler+0x4>

08001e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <HardFault_Handler+0x4>

08001e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <MemManage_Handler+0x4>

08001e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e62:	f000 fc67 	bl	8002734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <DMA1_Stream0_IRQHandler+0x10>)
 8001e72:	f003 fc13 	bl	800569c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	240005a0 	.word	0x240005a0

08001e80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <DMA1_Stream1_IRQHandler+0x10>)
 8001e86:	f003 fc09 	bl	800569c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	24000370 	.word	0x24000370

08001e94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <DMA1_Stream2_IRQHandler+0x10>)
 8001e9a:	f003 fbff 	bl	800569c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	240002f8 	.word	0x240002f8

08001ea8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <DMA1_Stream3_IRQHandler+0x10>)
 8001eae:	f003 fbf5 	bl	800569c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	240001d8 	.word	0x240001d8

08001ebc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	@ (8001ecc <I2C1_EV_IRQHandler+0x10>)
 8001ec2:	f005 fba9 	bl	8007618 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	24000250 	.word	0x24000250

08001ed0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <I2C1_ER_IRQHandler+0x10>)
 8001ed6:	f005 fbb9 	bl	800764c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	24000250 	.word	0x24000250

08001ee4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <I2C2_EV_IRQHandler+0x10>)
 8001eea:	f005 fb95 	bl	8007618 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	240002a4 	.word	0x240002a4

08001ef8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <I2C2_ER_IRQHandler+0x10>)
 8001efe:	f005 fba5 	bl	800764c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	240002a4 	.word	0x240002a4

08001f0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <USART1_IRQHandler+0x10>)
 8001f12:	f010 f847 	bl	8011fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	24000618 	.word	0x24000618

08001f20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f24:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <DMA2_Stream0_IRQHandler+0x10>)
 8001f26:	f003 fbb9 	bl	800569c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	240006ac 	.word	0x240006ac

08001f34 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <SPI4_IRQHandler+0x10>)
 8001f3a:	f00f fbb1 	bl	80116a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	24000518 	.word	0x24000518

08001f48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <OTG_FS_IRQHandler+0x10>)
 8001f4e:	f00a f8c6 	bl	800c0de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2403a7c8 	.word	0x2403a7c8

08001f5c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001f60:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <JPEG_IRQHandler+0x10>)
 8001f62:	f007 ff55 	bl	8009e10 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	240003e8 	.word	0x240003e8

08001f70 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001f74:	4803      	ldr	r0, [pc, #12]	@ (8001f84 <MDMA_IRQHandler+0x14>)
 8001f76:	f009 fd15 	bl	800b9a4 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8001f7a:	4803      	ldr	r0, [pc, #12]	@ (8001f88 <MDMA_IRQHandler+0x18>)
 8001f7c:	f009 fd12 	bl	800b9a4 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	24000440 	.word	0x24000440
 8001f88:	240004ac 	.word	0x240004ac

08001f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f94:	4a14      	ldr	r2, [pc, #80]	@ (8001fe8 <_sbrk+0x5c>)
 8001f96:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <_sbrk+0x60>)
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <_sbrk+0x64>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <_sbrk+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d207      	bcs.n	8001fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fbc:	f015 ff8e 	bl	8017edc <__errno>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e009      	b.n	8001fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <_sbrk+0x64>)
 8001fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fde:	68fb      	ldr	r3, [r7, #12]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24080000 	.word	0x24080000
 8001fec:	00000400 	.word	0x00000400
 8001ff0:	240392dc 	.word	0x240392dc
 8001ff4:	2403b018 	.word	0x2403b018

08001ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b43      	ldr	r3, [pc, #268]	@ (800210c <SystemInit+0x114>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002002:	4a42      	ldr	r2, [pc, #264]	@ (800210c <SystemInit+0x114>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800200c:	4b40      	ldr	r3, [pc, #256]	@ (8002110 <SystemInit+0x118>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	2b06      	cmp	r3, #6
 8002016:	d807      	bhi.n	8002028 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002018:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <SystemInit+0x118>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 030f 	bic.w	r3, r3, #15
 8002020:	4a3b      	ldr	r2, [pc, #236]	@ (8002110 <SystemInit+0x118>)
 8002022:	f043 0307 	orr.w	r3, r3, #7
 8002026:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002028:	4b3a      	ldr	r3, [pc, #232]	@ (8002114 <SystemInit+0x11c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a39      	ldr	r2, [pc, #228]	@ (8002114 <SystemInit+0x11c>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002034:	4b37      	ldr	r3, [pc, #220]	@ (8002114 <SystemInit+0x11c>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800203a:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <SystemInit+0x11c>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4935      	ldr	r1, [pc, #212]	@ (8002114 <SystemInit+0x11c>)
 8002040:	4b35      	ldr	r3, [pc, #212]	@ (8002118 <SystemInit+0x120>)
 8002042:	4013      	ands	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002046:	4b32      	ldr	r3, [pc, #200]	@ (8002110 <SystemInit+0x118>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002052:	4b2f      	ldr	r3, [pc, #188]	@ (8002110 <SystemInit+0x118>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 030f 	bic.w	r3, r3, #15
 800205a:	4a2d      	ldr	r2, [pc, #180]	@ (8002110 <SystemInit+0x118>)
 800205c:	f043 0307 	orr.w	r3, r3, #7
 8002060:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002062:	4b2c      	ldr	r3, [pc, #176]	@ (8002114 <SystemInit+0x11c>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002068:	4b2a      	ldr	r3, [pc, #168]	@ (8002114 <SystemInit+0x11c>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800206e:	4b29      	ldr	r3, [pc, #164]	@ (8002114 <SystemInit+0x11c>)
 8002070:	2200      	movs	r2, #0
 8002072:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002074:	4b27      	ldr	r3, [pc, #156]	@ (8002114 <SystemInit+0x11c>)
 8002076:	4a29      	ldr	r2, [pc, #164]	@ (800211c <SystemInit+0x124>)
 8002078:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800207a:	4b26      	ldr	r3, [pc, #152]	@ (8002114 <SystemInit+0x11c>)
 800207c:	4a28      	ldr	r2, [pc, #160]	@ (8002120 <SystemInit+0x128>)
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002080:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <SystemInit+0x11c>)
 8002082:	4a28      	ldr	r2, [pc, #160]	@ (8002124 <SystemInit+0x12c>)
 8002084:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002086:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <SystemInit+0x11c>)
 8002088:	2200      	movs	r2, #0
 800208a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800208c:	4b21      	ldr	r3, [pc, #132]	@ (8002114 <SystemInit+0x11c>)
 800208e:	4a25      	ldr	r2, [pc, #148]	@ (8002124 <SystemInit+0x12c>)
 8002090:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002092:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <SystemInit+0x11c>)
 8002094:	2200      	movs	r2, #0
 8002096:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002098:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <SystemInit+0x11c>)
 800209a:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <SystemInit+0x12c>)
 800209c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800209e:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <SystemInit+0x11c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <SystemInit+0x11c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002114 <SystemInit+0x11c>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020b0:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <SystemInit+0x11c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80020b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <SystemInit+0x130>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b1c      	ldr	r3, [pc, #112]	@ (800212c <SystemInit+0x134>)
 80020bc:	4013      	ands	r3, r2
 80020be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020c2:	d202      	bcs.n	80020ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80020c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <SystemInit+0x138>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80020ca:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <SystemInit+0x11c>)
 80020cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d113      	bne.n	8002100 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80020d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <SystemInit+0x11c>)
 80020da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020de:	4a0d      	ldr	r2, [pc, #52]	@ (8002114 <SystemInit+0x11c>)
 80020e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80020e8:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <SystemInit+0x13c>)
 80020ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80020ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <SystemInit+0x11c>)
 80020f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020f6:	4a07      	ldr	r2, [pc, #28]	@ (8002114 <SystemInit+0x11c>)
 80020f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00
 8002110:	52002000 	.word	0x52002000
 8002114:	58024400 	.word	0x58024400
 8002118:	eaf6ed7f 	.word	0xeaf6ed7f
 800211c:	02020200 	.word	0x02020200
 8002120:	01ff0000 	.word	0x01ff0000
 8002124:	01010280 	.word	0x01010280
 8002128:	5c001000 	.word	0x5c001000
 800212c:	ffff0000 	.word	0xffff0000
 8002130:	51008108 	.word	0x51008108
 8002134:	52004000 	.word	0x52004000

08002138 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <ExitRun0Mode+0x2c>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4a08      	ldr	r2, [pc, #32]	@ (8002164 <ExitRun0Mode+0x2c>)
 8002142:	f043 0302 	orr.w	r3, r3, #2
 8002146:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002148:	bf00      	nop
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <ExitRun0Mode+0x2c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f9      	beq.n	800214a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	58024800 	.word	0x58024800

08002168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002168:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80021a4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800216c:	f7ff ffe4 	bl	8002138 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002170:	f7ff ff42 	bl	8001ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002174:	480c      	ldr	r0, [pc, #48]	@ (80021a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002176:	490d      	ldr	r1, [pc, #52]	@ (80021ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800218c:	4c0a      	ldr	r4, [pc, #40]	@ (80021b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219a:	f015 fea5 	bl	8017ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800219e:	f7fe fa8d 	bl	80006bc <main>
  bx  lr
 80021a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021ac:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 80021b0:	08018e58 	.word	0x08018e58
  ldr r2, =_sbss
 80021b4:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 80021b8:	2403b014 	.word	0x2403b014

080021bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC3_IRQHandler>

080021be <SSD1306_SendCommand>:
    0x06, 0x00, 0b00010000, 0b00001000, 0b00010000, 0b00100000, 0b00010000, 0x00  // ------ 126 - ~
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af02      	add	r7, sp, #8
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	733b      	strb	r3, [r7, #12]
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	791b      	ldrb	r3, [r3, #4]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	b299      	uxth	r1, r3
 80021de:	f107 020c 	add.w	r2, r7, #12
 80021e2:	2364      	movs	r3, #100	@ 0x64
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2302      	movs	r3, #2
 80021e8:	f004 ffea 	bl	80071c0 <HAL_I2C_Master_Transmit>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <SSD1306_SendCommand+0x38>
		return ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8002218:	2312      	movs	r3, #18
 800221a:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 800221c:	2301      	movs	r3, #1
 800221e:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002220:	e02c      	b.n	800227c <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	4a1a      	ldr	r2, [pc, #104]	@ (8002290 <SSD1306_Init+0x90>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	3301      	adds	r3, #1
 800222e:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002230:	897b      	ldrh	r3, [r7, #10]
 8002232:	4a17      	ldr	r2, [pc, #92]	@ (8002290 <SSD1306_Init+0x90>)
 8002234:	5cd3      	ldrb	r3, [r2, r3]
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffc0 	bl	80021be <SSD1306_SendCommand>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <SSD1306_Init+0x4a>
 8002244:	897b      	ldrh	r3, [r7, #10]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	e01e      	b.n	8002288 <SSD1306_Init+0x88>
	        cmd_idx++;
 800224a:	897b      	ldrh	r3, [r7, #10]
 800224c:	3301      	adds	r3, #1
 800224e:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8002250:	e00f      	b.n	8002272 <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	4a0e      	ldr	r2, [pc, #56]	@ (8002290 <SSD1306_Init+0x90>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	4619      	mov	r1, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffaf 	bl	80021be <SSD1306_SendCommand>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <SSD1306_Init+0x6c>
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e00d      	b.n	8002288 <SSD1306_Init+0x88>
	            cmd_idx++;
 800226c:	897b      	ldrh	r3, [r7, #10]
 800226e:	3301      	adds	r3, #1
 8002270:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 8002272:	89bb      	ldrh	r3, [r7, #12]
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	81ba      	strh	r2, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ea      	bne.n	8002252 <SSD1306_Init+0x52>
	while (n_commands--) {
 800227c:	89fb      	ldrh	r3, [r7, #14]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	81fa      	strh	r2, [r7, #14]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1cd      	bne.n	8002222 <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	080188cc 	.word	0x080188cc

08002294 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f015 fe0d 	bl	8017ecc <memset>
	return 0;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2240      	movs	r2, #64	@ 0x40
 80022ca:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	791b      	ldrb	r3, [r3, #4]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	b299      	uxth	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	f240 4301 	movw	r3, #1025	@ 0x401
 80022e0:	f005 f886 	bl	80073f0 <HAL_I2C_Master_Transmit_DMA>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	70fb      	strb	r3, [r7, #3]
	if (ch < 32 || ch > 126) return ERROR;	// char is unable to be rendered
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	2b1f      	cmp	r3, #31
 8002300:	d902      	bls.n	8002308 <SSD1306_DrawChar+0x18>
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	2b7e      	cmp	r3, #126	@ 0x7e
 8002306:	d901      	bls.n	800230c <SSD1306_DrawChar+0x1c>
 8002308:	2301      	movs	r3, #1
 800230a:	e02e      	b.n	800236a <SSD1306_DrawChar+0x7a>
	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	3b20      	subs	r3, #32
 8002310:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	2b60      	cmp	r3, #96	@ 0x60
 8002316:	d906      	bls.n	8002326 <SSD1306_DrawChar+0x36>
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	2b7a      	cmp	r3, #122	@ 0x7a
 800231c:	d803      	bhi.n	8002326 <SSD1306_DrawChar+0x36>
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	3b20      	subs	r3, #32
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e005      	b.n	8002332 <SSD1306_DrawChar+0x42>
	else if (ch >= 123) newC -= 26;			// remap the brace set to align with the font table
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	2b7a      	cmp	r3, #122	@ 0x7a
 800232a:	d902      	bls.n	8002332 <SSD1306_DrawChar+0x42>
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	3b1a      	subs	r3, #26
 8002330:	73fb      	strb	r3, [r7, #15]

	uint8_t len = ALPHNUM[newC*8];
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4a0f      	ldr	r2, [pc, #60]	@ (8002374 <SSD1306_DrawChar+0x84>)
 8002338:	5cd3      	ldrb	r3, [r2, r3]
 800233a:	73bb      	strb	r3, [r7, #14]
	memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	8a12      	ldrh	r2, [r2, #16]
 8002344:	1898      	adds	r0, r3, r2
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	3301      	adds	r3, #1
 800234c:	4a09      	ldr	r2, [pc, #36]	@ (8002374 <SSD1306_DrawChar+0x84>)
 800234e:	4413      	add	r3, r2
 8002350:	7bba      	ldrb	r2, [r7, #14]
 8002352:	4619      	mov	r1, r3
 8002354:	f015 fdee 	bl	8017f34 <memcpy>
	hssd->str_cursor += len;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8a1a      	ldrh	r2, [r3, #16]
 800235c:	7bbb      	ldrb	r3, [r7, #14]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4413      	add	r3, r2
 8002362:	b29a      	uxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	08018900 	.word	0x08018900

08002378 <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < length; i++) {
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
 800238a:	e013      	b.n	80023b4 <SSD1306_DrawString+0x3c>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x06;
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7ff ffaa 	bl	80022f0 <SSD1306_DrawChar>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <SSD1306_DrawString+0x36>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8a1b      	ldrh	r3, [r3, #16]
 80023a6:	3306      	adds	r3, #6
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	3301      	adds	r3, #1
 80023b2:	75fb      	strb	r3, [r7, #23]
 80023b4:	7dfa      	ldrb	r2, [r7, #23]
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3e7      	bcc.n	800238c <SSD1306_DrawString+0x14>
	}

	return SUCCESS;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6898      	ldr	r0, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	899b      	ldrh	r3, [r3, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	4619      	mov	r1, r3
 80023de:	f004 fe39 	bl	8007054 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	1cf9      	adds	r1, r7, #3
 80023e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023ec:	2201      	movs	r2, #1
 80023ee:	f00e fe27 	bl	8011040 <HAL_SPI_Transmit>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <ST7789_SendByte_Command+0x36>
		return ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6898      	ldr	r0, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	899b      	ldrh	r3, [r3, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	4619      	mov	r1, r3
 800241e:	f004 fe19 	bl	8007054 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	1cf9      	adds	r1, r7, #3
 8002428:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800242c:	2201      	movs	r2, #1
 800242e:	f00e fe07 	bl	8011040 <HAL_SPI_Transmit>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <ST7789_SendByte_Data+0x36>
		return ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 8002450:	2300      	movs	r3, #0
 8002452:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f107 0109 	add.w	r1, r7, #9
 800245c:	2201      	movs	r2, #1
 800245e:	4618      	mov	r0, r3
 8002460:	f00e ffdc 	bl	801141c <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 8002464:	200a      	movs	r0, #10
 8002466:	f000 f985 	bl	8002774 <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 800246a:	2313      	movs	r3, #19
 800246c:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002472:	e02c      	b.n	80024ce <ST7789_Init+0x86>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 8002474:	897b      	ldrh	r3, [r7, #10]
 8002476:	4a1b      	ldr	r2, [pc, #108]	@ (80024e4 <ST7789_Init+0x9c>)
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 800247c:	897b      	ldrh	r3, [r7, #10]
 800247e:	3301      	adds	r3, #1
 8002480:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	4a17      	ldr	r2, [pc, #92]	@ (80024e4 <ST7789_Init+0x9c>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff9b 	bl	80023c6 <ST7789_SendByte_Command>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <ST7789_Init+0x54>
 8002496:	897b      	ldrh	r3, [r7, #10]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e01e      	b.n	80024da <ST7789_Init+0x92>
	    cmd_idx++;
 800249c:	897b      	ldrh	r3, [r7, #10]
 800249e:	3301      	adds	r3, #1
 80024a0:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 80024a2:	e00f      	b.n	80024c4 <ST7789_Init+0x7c>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 80024a4:	897b      	ldrh	r3, [r7, #10]
 80024a6:	4a0f      	ldr	r2, [pc, #60]	@ (80024e4 <ST7789_Init+0x9c>)
 80024a8:	5cd3      	ldrb	r3, [r2, r3]
 80024aa:	4619      	mov	r1, r3
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ffaa 	bl	8002406 <ST7789_SendByte_Data>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <ST7789_Init+0x76>
 80024b8:	897b      	ldrh	r3, [r7, #10]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	e00d      	b.n	80024da <ST7789_Init+0x92>
				cmd_idx++;
 80024be:	897b      	ldrh	r3, [r7, #10]
 80024c0:	3301      	adds	r3, #1
 80024c2:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 80024c4:	89bb      	ldrh	r3, [r7, #12]
 80024c6:	1e5a      	subs	r2, r3, #1
 80024c8:	81ba      	strh	r2, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1ea      	bne.n	80024a4 <ST7789_Init+0x5c>
	while (n_commands--) {
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	81fa      	strh	r2, [r7, #14]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1cd      	bne.n	8002474 <ST7789_Init+0x2c>
	    }
	}
	return SUCCESS;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	08018b28 	.word	0x08018b28

080024e8 <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	4608      	mov	r0, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	817b      	strh	r3, [r7, #10]
 80024fa:	460b      	mov	r3, r1
 80024fc:	813b      	strh	r3, [r7, #8]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 8002502:	212a      	movs	r1, #42	@ 0x2a
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7ff ff5e 	bl	80023c6 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 800250a:	897b      	ldrh	r3, [r7, #10]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	b29b      	uxth	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	4619      	mov	r1, r3
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f7ff ff76 	bl	8002406 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 800251a:	897b      	ldrh	r3, [r7, #10]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7ff ff70 	bl	8002406 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	3b01      	subs	r3, #1
 800252a:	121b      	asrs	r3, r3, #8
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7ff ff68 	bl	8002406 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4619      	mov	r1, r3
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff ff60 	bl	8002406 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 8002546:	212b      	movs	r1, #43	@ 0x2b
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7ff ff3c 	bl	80023c6 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 800254e:	893b      	ldrh	r3, [r7, #8]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	b29b      	uxth	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	4619      	mov	r1, r3
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f7ff ff54 	bl	8002406 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 800255e:	893b      	ldrh	r3, [r7, #8]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4619      	mov	r1, r3
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff ff4e 	bl	8002406 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 800256a:	8b3b      	ldrh	r3, [r7, #24]
 800256c:	3b01      	subs	r3, #1
 800256e:	121b      	asrs	r3, r3, #8
 8002570:	b2db      	uxtb	r3, r3
 8002572:	4619      	mov	r1, r3
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f7ff ff46 	bl	8002406 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 800257a:	8b3b      	ldrh	r3, [r7, #24]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4619      	mov	r1, r3
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff ff3e 	bl	8002406 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 800258a:	212c      	movs	r1, #44	@ 0x2c
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff ff1a 	bl	80023c6 <ST7789_SendByte_Command>
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789, uint8_t col) {
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	70fb      	strb	r3, [r7, #3]
	// fill VRAM with white
	memset(hst7789->vram, col, LCD_WIDTH*LCD_HEIGHT*2);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	78f9      	ldrb	r1, [r7, #3]
 80025ac:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 80025b0:	4618      	mov	r0, r3
 80025b2:	f015 fc8b 	bl	8017ecc <memset>
	return SUCCESS;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <ST7789_Update>:

uint8_t ST7789_Update(ST7789_HandleTypeDef *hst7789, uint8_t screen_section) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
	// Flag busy
	hst7789->spi_ready = 0;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	711a      	strb	r2, [r3, #4]

	// Set the window based on the vram offset
	ST7789_SetWindow(hst7789, 0, (screen_section*0xEA60)/(LCD_WIDTH*2), LCD_WIDTH, LCD_HEIGHT);
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	0152      	lsls	r2, r2, #5
 80025da:	1ad2      	subs	r2, r2, r3
 80025dc:	0092      	lsls	r2, r2, #2
 80025de:	4413      	add	r3, r2
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	23f0      	movs	r3, #240	@ 0xf0
 80025ea:	2100      	movs	r1, #0
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ff7b 	bl	80024e8 <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (~CMD)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6898      	ldr	r0, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	899b      	ldrh	r3, [r3, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4619      	mov	r1, r3
 80025fe:	f004 fd29 	bl	8007054 <HAL_GPIO_WritePin>


	if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0xEA60))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8002610:	fb01 f202 	mul.w	r2, r1, r2
 8002614:	4413      	add	r3, r2
 8002616:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800261a:	4619      	mov	r1, r3
 800261c:	f00e fefe 	bl	801141c <HAL_SPI_Transmit_DMA>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <ST7789_Update+0x6a>
		return ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <ST7789_Update+0x6c>
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <ST7789_DMATransmitCplt>:

void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	hst7789->spi_ready = 1;	// Flag ready
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	711a      	strb	r2, [r3, #4]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002656:	2003      	movs	r0, #3
 8002658:	f001 fc3e 	bl	8003ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800265c:	f00b fcf8 	bl	800e050 <HAL_RCC_GetSysClockFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_Init+0x68>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	4913      	ldr	r1, [pc, #76]	@ (80026bc <HAL_Init+0x6c>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
 8002678:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800267a:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_Init+0x68>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	4a0e      	ldr	r2, [pc, #56]	@ (80026bc <HAL_Init+0x6c>)
 8002684:	5cd3      	ldrb	r3, [r2, r3]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <HAL_Init+0x70>)
 8002692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002694:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <HAL_Init+0x74>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800269a:	200f      	movs	r0, #15
 800269c:	f000 f814 	bl	80026c8 <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e002      	b.n	80026b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026aa:	f7fe ffff 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	58024400 	.word	0x58024400
 80026bc:	080188bc 	.word	0x080188bc
 80026c0:	24000008 	.word	0x24000008
 80026c4:	24000004 	.word	0x24000004

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026d0:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_InitTick+0x60>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e021      	b.n	8002720 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026dc:	4b13      	ldr	r3, [pc, #76]	@ (800272c <HAL_InitTick+0x64>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <HAL_InitTick+0x60>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	f001 fc23 	bl	8003f3e <HAL_SYSTICK_Config>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e00e      	b.n	8002720 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b0f      	cmp	r3, #15
 8002706:	d80a      	bhi.n	800271e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002708:	2200      	movs	r2, #0
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	f001 fbed 	bl	8003eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002714:	4a06      	ldr	r2, [pc, #24]	@ (8002730 <HAL_InitTick+0x68>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e000      	b.n	8002720 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	24000010 	.word	0x24000010
 800272c:	24000004 	.word	0x24000004
 8002730:	2400000c 	.word	0x2400000c

08002734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002738:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <HAL_IncTick+0x20>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_IncTick+0x24>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4413      	add	r3, r2
 8002744:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <HAL_IncTick+0x24>)
 8002746:	6013      	str	r3, [r2, #0]
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	24000010 	.word	0x24000010
 8002758:	240392e0 	.word	0x240392e0

0800275c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return uwTick;
 8002760:	4b03      	ldr	r3, [pc, #12]	@ (8002770 <HAL_GetTick+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	240392e0 	.word	0x240392e0

08002774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff ffee 	bl	800275c <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d005      	beq.n	800279a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_Delay+0x44>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800279a:	bf00      	nop
 800279c:	f7ff ffde 	bl	800275c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d8f7      	bhi.n	800279c <HAL_Delay+0x28>
  {
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	24000010 	.word	0x24000010

080027bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027c0:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <HAL_GetREVID+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0c1b      	lsrs	r3, r3, #16
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	5c001000 	.word	0x5c001000

080027d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <LL_ADC_SetChannelPreselection+0x24>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2201      	movs	r2, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	e015      	b.n	800288c <LL_ADC_SetChannelPreselection+0x50>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002876:	2320      	movs	r3, #32
 8002878:	e003      	b.n	8002882 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2201      	movs	r2, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	69d2      	ldr	r2, [r2, #28]
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b087      	sub	sp, #28
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3360      	adds	r3, #96	@ 0x60
 80028b4:	461a      	mov	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	430b      	orrs	r3, r1
 80028d0:	431a      	orrs	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	431a      	orrs	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	611a      	str	r2, [r3, #16]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3360      	adds	r3, #96	@ 0x60
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	431a      	orrs	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	601a      	str	r2, [r3, #0]
  }
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3330      	adds	r3, #48	@ 0x30
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	4413      	add	r3, r2
 800298e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	211f      	movs	r1, #31
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	f003 011f 	and.w	r1, r3, #31
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	431a      	orrs	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029bc:	bf00      	nop
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f023 0203 	bic.w	r2, r3, #3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60da      	str	r2, [r3, #12]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b087      	sub	sp, #28
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3314      	adds	r3, #20
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	0e5b      	lsrs	r3, r3, #25
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	4413      	add	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0d1b      	lsrs	r3, r3, #20
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2107      	movs	r1, #7
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0d1b      	lsrs	r3, r3, #20
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	431a      	orrs	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	401a      	ands	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0318 	and.w	r3, r3, #24
 8002a66:	4908      	ldr	r1, [pc, #32]	@ (8002a88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a68:	40d9      	lsrs	r1, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a72:	431a      	orrs	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	000fffff 	.word	0x000fffff

08002a8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 031f 	and.w	r3, r3, #31
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6093      	str	r3, [r2, #8]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	5fffffc0 	.word	0x5fffffc0

08002acc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ae0:	d101      	bne.n	8002ae6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	6fffffc0 	.word	0x6fffffc0

08002b1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b30:	d101      	bne.n	8002b36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <LL_ADC_Enable+0x24>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	7fffffc0 	.word	0x7fffffc0

08002b6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <LL_ADC_IsEnabled+0x18>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <LL_ADC_IsEnabled+0x1a>
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <LL_ADC_REG_StartConversion+0x24>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	f043 0204 	orr.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	7fffffc0 	.word	0x7fffffc0

08002bbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d101      	bne.n	8002bd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d101      	bne.n	8002bfa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b089      	sub	sp, #36	@ 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e18f      	b.n	8002f42 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe fd55 	bl	80016e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff3f 	bl	8002acc <LL_ADC_IsDeepPowerDownEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff25 	bl	8002aa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff ff5a 	bl	8002b1c <LL_ADC_IsInternalRegulatorEnabled>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d114      	bne.n	8002c98 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ff3e 	bl	8002af4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c78:	4b87      	ldr	r3, [pc, #540]	@ (8002e98 <HAL_ADC_Init+0x290>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	4a87      	ldr	r2, [pc, #540]	@ (8002e9c <HAL_ADC_Init+0x294>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	3301      	adds	r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c8a:	e002      	b.n	8002c92 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f9      	bne.n	8002c8c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff3d 	bl	8002b1c <LL_ADC_IsInternalRegulatorEnabled>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10d      	bne.n	8002cc4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	f043 0210 	orr.w	r2, r3, #16
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff77 	bl	8002bbc <LL_ADC_REG_IsConversionOngoing>
 8002cce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f040 8129 	bne.w	8002f30 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f040 8125 	bne.w	8002f30 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cea:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002cee:	f043 0202 	orr.w	r2, r3, #2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff36 	bl	8002b6c <LL_ADC_IsEnabled>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d136      	bne.n	8002d74 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a65      	ldr	r2, [pc, #404]	@ (8002ea0 <HAL_ADC_Init+0x298>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_ADC_Init+0x112>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a63      	ldr	r2, [pc, #396]	@ (8002ea4 <HAL_ADC_Init+0x29c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d10e      	bne.n	8002d38 <HAL_ADC_Init+0x130>
 8002d1a:	4861      	ldr	r0, [pc, #388]	@ (8002ea0 <HAL_ADC_Init+0x298>)
 8002d1c:	f7ff ff26 	bl	8002b6c <LL_ADC_IsEnabled>
 8002d20:	4604      	mov	r4, r0
 8002d22:	4860      	ldr	r0, [pc, #384]	@ (8002ea4 <HAL_ADC_Init+0x29c>)
 8002d24:	f7ff ff22 	bl	8002b6c <LL_ADC_IsEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4323      	orrs	r3, r4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e008      	b.n	8002d4a <HAL_ADC_Init+0x142>
 8002d38:	485b      	ldr	r0, [pc, #364]	@ (8002ea8 <HAL_ADC_Init+0x2a0>)
 8002d3a:	f7ff ff17 	bl	8002b6c <LL_ADC_IsEnabled>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d012      	beq.n	8002d74 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a53      	ldr	r2, [pc, #332]	@ (8002ea0 <HAL_ADC_Init+0x298>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_Init+0x15a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a51      	ldr	r2, [pc, #324]	@ (8002ea4 <HAL_ADC_Init+0x29c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Init+0x15e>
 8002d62:	4a52      	ldr	r2, [pc, #328]	@ (8002eac <HAL_ADC_Init+0x2a4>)
 8002d64:	e000      	b.n	8002d68 <HAL_ADC_Init+0x160>
 8002d66:	4a52      	ldr	r2, [pc, #328]	@ (8002eb0 <HAL_ADC_Init+0x2a8>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f7ff fd30 	bl	80027d4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002d74:	f7ff fd22 	bl	80027bc <HAL_GetREVID>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d914      	bls.n	8002dac <HAL_ADC_Init+0x1a4>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	d110      	bne.n	8002dac <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	7d5b      	ldrb	r3, [r3, #21]
 8002d8e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d94:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002d9a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7f1b      	ldrb	r3, [r3, #28]
 8002da0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002da2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002da4:	f043 030c 	orr.w	r3, r3, #12
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	e00d      	b.n	8002dc8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	7d5b      	ldrb	r3, [r3, #21]
 8002db0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002db6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002dbc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7f1b      	ldrb	r3, [r3, #28]
 8002dc2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7f1b      	ldrb	r3, [r3, #28]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d106      	bne.n	8002dde <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	045b      	lsls	r3, r3, #17
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb4 <HAL_ADC_Init+0x2ac>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	69b9      	ldr	r1, [r7, #24]
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fed2 	bl	8002bbc <LL_ADC_REG_IsConversionOngoing>
 8002e18:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fedf 	bl	8002be2 <LL_ADC_INJ_IsConversionOngoing>
 8002e24:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d15f      	bne.n	8002eec <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d15c      	bne.n	8002eec <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7d1b      	ldrb	r3, [r3, #20]
 8002e36:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb8 <HAL_ADC_Init+0x2b0>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d130      	bne.n	8002ec0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <HAL_ADC_Init+0x2b4>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e72:	3a01      	subs	r2, #1
 8002e74:	0411      	lsls	r1, r2, #16
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e7a:	4311      	orrs	r1, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e80:	4311      	orrs	r1, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e86:	430a      	orrs	r2, r1
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	611a      	str	r2, [r3, #16]
 8002e94:	e01c      	b.n	8002ed0 <HAL_ADC_Init+0x2c8>
 8002e96:	bf00      	nop
 8002e98:	24000004 	.word	0x24000004
 8002e9c:	053e2d63 	.word	0x053e2d63
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40022100 	.word	0x40022100
 8002ea8:	58026000 	.word	0x58026000
 8002eac:	40022300 	.word	0x40022300
 8002eb0:	58026300 	.word	0x58026300
 8002eb4:	fff0c003 	.word	0xfff0c003
 8002eb8:	ffffbffc 	.word	0xffffbffc
 8002ebc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fd16 	bl	8003918 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d10c      	bne.n	8002f0e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	f023 010f 	bic.w	r1, r3, #15
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	1e5a      	subs	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f0c:	e007      	b.n	8002f1e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 020f 	bic.w	r2, r2, #15
 8002f1c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f22:	f023 0303 	bic.w	r3, r3, #3
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f2e:	e007      	b.n	8002f40 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	@ 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd90      	pop	{r4, r7, pc}
 8002f4a:	bf00      	nop

08002f4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a55      	ldr	r2, [pc, #340]	@ (80030b4 <HAL_ADC_Start_DMA+0x168>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_ADC_Start_DMA+0x20>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a54      	ldr	r2, [pc, #336]	@ (80030b8 <HAL_ADC_Start_DMA+0x16c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_Start_DMA+0x24>
 8002f6c:	4b53      	ldr	r3, [pc, #332]	@ (80030bc <HAL_ADC_Start_DMA+0x170>)
 8002f6e:	e000      	b.n	8002f72 <HAL_ADC_Start_DMA+0x26>
 8002f70:	4b53      	ldr	r3, [pc, #332]	@ (80030c0 <HAL_ADC_Start_DMA+0x174>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fd8a 	bl	8002a8c <LL_ADC_GetMultimode>
 8002f78:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fe1c 	bl	8002bbc <LL_ADC_REG_IsConversionOngoing>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 808c 	bne.w	80030a4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Start_DMA+0x4e>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e087      	b.n	80030aa <HAL_ADC_Start_DMA+0x15e>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d002      	beq.n	8002fb4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b09      	cmp	r3, #9
 8002fb2:	d170      	bne.n	8003096 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fb91 	bl	80036dc <ADC_Enable>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d163      	bne.n	800308c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80030c4 <HAL_ADC_Start_DMA+0x178>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a37      	ldr	r2, [pc, #220]	@ (80030b8 <HAL_ADC_Start_DMA+0x16c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d002      	beq.n	8002fe4 <HAL_ADC_Start_DMA+0x98>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	e000      	b.n	8002fe6 <HAL_ADC_Start_DMA+0x9a>
 8002fe4:	4b33      	ldr	r3, [pc, #204]	@ (80030b4 <HAL_ADC_Start_DMA+0x168>)
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d002      	beq.n	8002ff4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003004:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	f023 0206 	bic.w	r2, r3, #6
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	659a      	str	r2, [r3, #88]	@ 0x58
 8003018:	e002      	b.n	8003020 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003024:	4a28      	ldr	r2, [pc, #160]	@ (80030c8 <HAL_ADC_Start_DMA+0x17c>)
 8003026:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302c:	4a27      	ldr	r2, [pc, #156]	@ (80030cc <HAL_ADC_Start_DMA+0x180>)
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003034:	4a26      	ldr	r2, [pc, #152]	@ (80030d0 <HAL_ADC_Start_DMA+0x184>)
 8003036:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	221c      	movs	r2, #28
 800303e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0210 	orr.w	r2, r2, #16
 8003056:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f7ff fcb0 	bl	80029c8 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3340      	adds	r3, #64	@ 0x40
 8003072:	4619      	mov	r1, r3
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f001 fb42 	bl	8004700 <HAL_DMA_Start_IT>
 800307c:	4603      	mov	r3, r0
 800307e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fd85 	bl	8002b94 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800308a:	e00d      	b.n	80030a8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003094:	e008      	b.n	80030a8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80030a2:	e001      	b.n	80030a8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030a4:	2302      	movs	r3, #2
 80030a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40022000 	.word	0x40022000
 80030b8:	40022100 	.word	0x40022100
 80030bc:	40022300 	.word	0x40022300
 80030c0:	58026300 	.word	0x58026300
 80030c4:	fffff0fe 	.word	0xfffff0fe
 80030c8:	080037f1 	.word	0x080037f1
 80030cc:	080038c9 	.word	0x080038c9
 80030d0:	080038e5 	.word	0x080038e5

080030d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b08d      	sub	sp, #52	@ 0x34
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a65      	ldr	r2, [pc, #404]	@ (80032ac <HAL_ADC_ConfigChannel+0x1b0>)
 8003116:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x2a>
 8003122:	2302      	movs	r3, #2
 8003124:	e2c7      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x5ba>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fd42 	bl	8002bbc <LL_ADC_REG_IsConversionOngoing>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 82ac 	bne.w	8003698 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db2c      	blt.n	80031a2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003150:	2b00      	cmp	r3, #0
 8003152:	d108      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x6a>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2201      	movs	r2, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	e016      	b.n	8003194 <HAL_ADC_ConfigChannel+0x98>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	613b      	str	r3, [r7, #16]
  return result;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800317e:	2320      	movs	r3, #32
 8003180:	e003      	b.n	800318a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2201      	movs	r2, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	69d1      	ldr	r1, [r2, #28]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	430b      	orrs	r3, r1
 80031a0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7ff fbde 	bl	8002970 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fcff 	bl	8002bbc <LL_ADC_REG_IsConversionOngoing>
 80031be:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fd0c 	bl	8002be2 <LL_ADC_INJ_IsConversionOngoing>
 80031ca:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 80b8 	bne.w	8003344 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 80b4 	bne.w	8003344 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	461a      	mov	r2, r3
 80031ea:	f7ff fc00 	bl	80029ee <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031ee:	4b30      	ldr	r3, [pc, #192]	@ (80032b0 <HAL_ADC_ConfigChannel+0x1b4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80031f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031fa:	d10b      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x118>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	e01d      	b.n	8003250 <HAL_ADC_ConfigChannel+0x154>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10b      	bne.n	800323a <HAL_ADC_ConfigChannel+0x13e>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	e00a      	b.n	8003250 <HAL_ADC_ConfigChannel+0x154>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b04      	cmp	r3, #4
 8003258:	d02c      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6919      	ldr	r1, [r3, #16]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f7ff fb1b 	bl	80028a2 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6919      	ldr	r1, [r3, #16]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	7e5b      	ldrb	r3, [r3, #25]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d102      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x186>
 800327c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003280:	e000      	b.n	8003284 <HAL_ADC_ConfigChannel+0x188>
 8003282:	2300      	movs	r3, #0
 8003284:	461a      	mov	r2, r3
 8003286:	f7ff fb45 	bl	8002914 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6919      	ldr	r1, [r3, #16]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	7e1b      	ldrb	r3, [r3, #24]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d102      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1a4>
 800329a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800329e:	e000      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x1a6>
 80032a0:	2300      	movs	r3, #0
 80032a2:	461a      	mov	r2, r3
 80032a4:	f7ff fb1d 	bl	80028e2 <LL_ADC_SetDataRightShift>
 80032a8:	e04c      	b.n	8003344 <HAL_ADC_ConfigChannel+0x248>
 80032aa:	bf00      	nop
 80032ac:	47ff0000 	.word	0x47ff0000
 80032b0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	069b      	lsls	r3, r3, #26
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d107      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032d6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	069b      	lsls	r3, r3, #26
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d107      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032fa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003302:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	069b      	lsls	r3, r3, #26
 800330c:	429a      	cmp	r2, r3
 800330e:	d107      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800331e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003326:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	069b      	lsls	r3, r3, #26
 8003330:	429a      	cmp	r2, r3
 8003332:	d107      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003342:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fc0f 	bl	8002b6c <LL_ADC_IsEnabled>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 81aa 	bne.w	80036aa <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	461a      	mov	r2, r3
 8003364:	f7ff fb6e 	bl	8002a44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a87      	ldr	r2, [pc, #540]	@ (800358c <HAL_ADC_ConfigChannel+0x490>)
 800336e:	4293      	cmp	r3, r2
 8003370:	f040 809a 	bne.w	80034a8 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4984      	ldr	r1, [pc, #528]	@ (8003590 <HAL_ADC_ConfigChannel+0x494>)
 800337e:	428b      	cmp	r3, r1
 8003380:	d147      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x316>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4983      	ldr	r1, [pc, #524]	@ (8003594 <HAL_ADC_ConfigChannel+0x498>)
 8003388:	428b      	cmp	r3, r1
 800338a:	d040      	beq.n	800340e <HAL_ADC_ConfigChannel+0x312>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4981      	ldr	r1, [pc, #516]	@ (8003598 <HAL_ADC_ConfigChannel+0x49c>)
 8003392:	428b      	cmp	r3, r1
 8003394:	d039      	beq.n	800340a <HAL_ADC_ConfigChannel+0x30e>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4980      	ldr	r1, [pc, #512]	@ (800359c <HAL_ADC_ConfigChannel+0x4a0>)
 800339c:	428b      	cmp	r3, r1
 800339e:	d032      	beq.n	8003406 <HAL_ADC_ConfigChannel+0x30a>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	497e      	ldr	r1, [pc, #504]	@ (80035a0 <HAL_ADC_ConfigChannel+0x4a4>)
 80033a6:	428b      	cmp	r3, r1
 80033a8:	d02b      	beq.n	8003402 <HAL_ADC_ConfigChannel+0x306>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	497d      	ldr	r1, [pc, #500]	@ (80035a4 <HAL_ADC_ConfigChannel+0x4a8>)
 80033b0:	428b      	cmp	r3, r1
 80033b2:	d024      	beq.n	80033fe <HAL_ADC_ConfigChannel+0x302>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	497b      	ldr	r1, [pc, #492]	@ (80035a8 <HAL_ADC_ConfigChannel+0x4ac>)
 80033ba:	428b      	cmp	r3, r1
 80033bc:	d01d      	beq.n	80033fa <HAL_ADC_ConfigChannel+0x2fe>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	497a      	ldr	r1, [pc, #488]	@ (80035ac <HAL_ADC_ConfigChannel+0x4b0>)
 80033c4:	428b      	cmp	r3, r1
 80033c6:	d016      	beq.n	80033f6 <HAL_ADC_ConfigChannel+0x2fa>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4978      	ldr	r1, [pc, #480]	@ (80035b0 <HAL_ADC_ConfigChannel+0x4b4>)
 80033ce:	428b      	cmp	r3, r1
 80033d0:	d00f      	beq.n	80033f2 <HAL_ADC_ConfigChannel+0x2f6>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4977      	ldr	r1, [pc, #476]	@ (80035b4 <HAL_ADC_ConfigChannel+0x4b8>)
 80033d8:	428b      	cmp	r3, r1
 80033da:	d008      	beq.n	80033ee <HAL_ADC_ConfigChannel+0x2f2>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4975      	ldr	r1, [pc, #468]	@ (80035b8 <HAL_ADC_ConfigChannel+0x4bc>)
 80033e2:	428b      	cmp	r3, r1
 80033e4:	d101      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x2ee>
 80033e6:	4b75      	ldr	r3, [pc, #468]	@ (80035bc <HAL_ADC_ConfigChannel+0x4c0>)
 80033e8:	e05a      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 80033ea:	2300      	movs	r3, #0
 80033ec:	e058      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 80033ee:	4b74      	ldr	r3, [pc, #464]	@ (80035c0 <HAL_ADC_ConfigChannel+0x4c4>)
 80033f0:	e056      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 80033f2:	4b74      	ldr	r3, [pc, #464]	@ (80035c4 <HAL_ADC_ConfigChannel+0x4c8>)
 80033f4:	e054      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 80033f6:	4b6e      	ldr	r3, [pc, #440]	@ (80035b0 <HAL_ADC_ConfigChannel+0x4b4>)
 80033f8:	e052      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 80033fa:	4b6c      	ldr	r3, [pc, #432]	@ (80035ac <HAL_ADC_ConfigChannel+0x4b0>)
 80033fc:	e050      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 80033fe:	4b72      	ldr	r3, [pc, #456]	@ (80035c8 <HAL_ADC_ConfigChannel+0x4cc>)
 8003400:	e04e      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 8003402:	4b72      	ldr	r3, [pc, #456]	@ (80035cc <HAL_ADC_ConfigChannel+0x4d0>)
 8003404:	e04c      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 8003406:	4b72      	ldr	r3, [pc, #456]	@ (80035d0 <HAL_ADC_ConfigChannel+0x4d4>)
 8003408:	e04a      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 800340a:	4b72      	ldr	r3, [pc, #456]	@ (80035d4 <HAL_ADC_ConfigChannel+0x4d8>)
 800340c:	e048      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 800340e:	2301      	movs	r3, #1
 8003410:	e046      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4970      	ldr	r1, [pc, #448]	@ (80035d8 <HAL_ADC_ConfigChannel+0x4dc>)
 8003418:	428b      	cmp	r3, r1
 800341a:	d140      	bne.n	800349e <HAL_ADC_ConfigChannel+0x3a2>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	495c      	ldr	r1, [pc, #368]	@ (8003594 <HAL_ADC_ConfigChannel+0x498>)
 8003422:	428b      	cmp	r3, r1
 8003424:	d039      	beq.n	800349a <HAL_ADC_ConfigChannel+0x39e>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	495b      	ldr	r1, [pc, #364]	@ (8003598 <HAL_ADC_ConfigChannel+0x49c>)
 800342c:	428b      	cmp	r3, r1
 800342e:	d032      	beq.n	8003496 <HAL_ADC_ConfigChannel+0x39a>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4959      	ldr	r1, [pc, #356]	@ (800359c <HAL_ADC_ConfigChannel+0x4a0>)
 8003436:	428b      	cmp	r3, r1
 8003438:	d02b      	beq.n	8003492 <HAL_ADC_ConfigChannel+0x396>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4958      	ldr	r1, [pc, #352]	@ (80035a0 <HAL_ADC_ConfigChannel+0x4a4>)
 8003440:	428b      	cmp	r3, r1
 8003442:	d024      	beq.n	800348e <HAL_ADC_ConfigChannel+0x392>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4956      	ldr	r1, [pc, #344]	@ (80035a4 <HAL_ADC_ConfigChannel+0x4a8>)
 800344a:	428b      	cmp	r3, r1
 800344c:	d01d      	beq.n	800348a <HAL_ADC_ConfigChannel+0x38e>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4955      	ldr	r1, [pc, #340]	@ (80035a8 <HAL_ADC_ConfigChannel+0x4ac>)
 8003454:	428b      	cmp	r3, r1
 8003456:	d016      	beq.n	8003486 <HAL_ADC_ConfigChannel+0x38a>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4953      	ldr	r1, [pc, #332]	@ (80035ac <HAL_ADC_ConfigChannel+0x4b0>)
 800345e:	428b      	cmp	r3, r1
 8003460:	d00f      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x386>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4952      	ldr	r1, [pc, #328]	@ (80035b0 <HAL_ADC_ConfigChannel+0x4b4>)
 8003468:	428b      	cmp	r3, r1
 800346a:	d008      	beq.n	800347e <HAL_ADC_ConfigChannel+0x382>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4951      	ldr	r1, [pc, #324]	@ (80035b8 <HAL_ADC_ConfigChannel+0x4bc>)
 8003472:	428b      	cmp	r3, r1
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x37e>
 8003476:	4b51      	ldr	r3, [pc, #324]	@ (80035bc <HAL_ADC_ConfigChannel+0x4c0>)
 8003478:	e012      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 800347a:	2300      	movs	r3, #0
 800347c:	e010      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 800347e:	4b51      	ldr	r3, [pc, #324]	@ (80035c4 <HAL_ADC_ConfigChannel+0x4c8>)
 8003480:	e00e      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 8003482:	4b4b      	ldr	r3, [pc, #300]	@ (80035b0 <HAL_ADC_ConfigChannel+0x4b4>)
 8003484:	e00c      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 8003486:	4b49      	ldr	r3, [pc, #292]	@ (80035ac <HAL_ADC_ConfigChannel+0x4b0>)
 8003488:	e00a      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 800348a:	4b4f      	ldr	r3, [pc, #316]	@ (80035c8 <HAL_ADC_ConfigChannel+0x4cc>)
 800348c:	e008      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 800348e:	4b4f      	ldr	r3, [pc, #316]	@ (80035cc <HAL_ADC_ConfigChannel+0x4d0>)
 8003490:	e006      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 8003492:	4b4f      	ldr	r3, [pc, #316]	@ (80035d0 <HAL_ADC_ConfigChannel+0x4d4>)
 8003494:	e004      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 8003496:	4b4f      	ldr	r3, [pc, #316]	@ (80035d4 <HAL_ADC_ConfigChannel+0x4d8>)
 8003498:	e002      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3a4>
 800349e:	2300      	movs	r3, #0
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f7ff f9ca 	bl	800283c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f280 80fc 	bge.w	80036aa <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a36      	ldr	r2, [pc, #216]	@ (8003590 <HAL_ADC_ConfigChannel+0x494>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_ADC_ConfigChannel+0x3ca>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a45      	ldr	r2, [pc, #276]	@ (80035d8 <HAL_ADC_ConfigChannel+0x4dc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x3ce>
 80034c6:	4b45      	ldr	r3, [pc, #276]	@ (80035dc <HAL_ADC_ConfigChannel+0x4e0>)
 80034c8:	e000      	b.n	80034cc <HAL_ADC_ConfigChannel+0x3d0>
 80034ca:	4b45      	ldr	r3, [pc, #276]	@ (80035e0 <HAL_ADC_ConfigChannel+0x4e4>)
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f9a7 	bl	8002820 <LL_ADC_GetCommonPathInternalCh>
 80034d2:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003590 <HAL_ADC_ConfigChannel+0x494>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_ADC_ConfigChannel+0x3ec>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a3d      	ldr	r2, [pc, #244]	@ (80035d8 <HAL_ADC_ConfigChannel+0x4dc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d10e      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x40a>
 80034e8:	4829      	ldr	r0, [pc, #164]	@ (8003590 <HAL_ADC_ConfigChannel+0x494>)
 80034ea:	f7ff fb3f 	bl	8002b6c <LL_ADC_IsEnabled>
 80034ee:	4604      	mov	r4, r0
 80034f0:	4839      	ldr	r0, [pc, #228]	@ (80035d8 <HAL_ADC_ConfigChannel+0x4dc>)
 80034f2:	f7ff fb3b 	bl	8002b6c <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4323      	orrs	r3, r4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e008      	b.n	8003518 <HAL_ADC_ConfigChannel+0x41c>
 8003506:	4837      	ldr	r0, [pc, #220]	@ (80035e4 <HAL_ADC_ConfigChannel+0x4e8>)
 8003508:	f7ff fb30 	bl	8002b6c <LL_ADC_IsEnabled>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80b3 	beq.w	8003684 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a31      	ldr	r2, [pc, #196]	@ (80035e8 <HAL_ADC_ConfigChannel+0x4ec>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d165      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x4f8>
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d160      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2b      	ldr	r2, [pc, #172]	@ (80035e4 <HAL_ADC_ConfigChannel+0x4e8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	f040 80b6 	bne.w	80036aa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a13      	ldr	r2, [pc, #76]	@ (8003590 <HAL_ADC_ConfigChannel+0x494>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x456>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a22      	ldr	r2, [pc, #136]	@ (80035d8 <HAL_ADC_ConfigChannel+0x4dc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x45a>
 8003552:	4a22      	ldr	r2, [pc, #136]	@ (80035dc <HAL_ADC_ConfigChannel+0x4e0>)
 8003554:	e000      	b.n	8003558 <HAL_ADC_ConfigChannel+0x45c>
 8003556:	4a22      	ldr	r2, [pc, #136]	@ (80035e0 <HAL_ADC_ConfigChannel+0x4e4>)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f7ff f94a 	bl	80027fa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003566:	4b21      	ldr	r3, [pc, #132]	@ (80035ec <HAL_ADC_ConfigChannel+0x4f0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	4a20      	ldr	r2, [pc, #128]	@ (80035f0 <HAL_ADC_ConfigChannel+0x4f4>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	3301      	adds	r3, #1
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800357a:	e002      	b.n	8003582 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3b01      	subs	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f9      	bne.n	800357c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003588:	e08f      	b.n	80036aa <HAL_ADC_ConfigChannel+0x5ae>
 800358a:	bf00      	nop
 800358c:	47ff0000 	.word	0x47ff0000
 8003590:	40022000 	.word	0x40022000
 8003594:	04300002 	.word	0x04300002
 8003598:	08600004 	.word	0x08600004
 800359c:	0c900008 	.word	0x0c900008
 80035a0:	10c00010 	.word	0x10c00010
 80035a4:	14f00020 	.word	0x14f00020
 80035a8:	2a000400 	.word	0x2a000400
 80035ac:	2e300800 	.word	0x2e300800
 80035b0:	32601000 	.word	0x32601000
 80035b4:	43210000 	.word	0x43210000
 80035b8:	4b840000 	.word	0x4b840000
 80035bc:	4fb80000 	.word	0x4fb80000
 80035c0:	47520000 	.word	0x47520000
 80035c4:	36902000 	.word	0x36902000
 80035c8:	25b00200 	.word	0x25b00200
 80035cc:	21800100 	.word	0x21800100
 80035d0:	1d500080 	.word	0x1d500080
 80035d4:	19200040 	.word	0x19200040
 80035d8:	40022100 	.word	0x40022100
 80035dc:	40022300 	.word	0x40022300
 80035e0:	58026300 	.word	0x58026300
 80035e4:	58026000 	.word	0x58026000
 80035e8:	cb840000 	.word	0xcb840000
 80035ec:	24000004 	.word	0x24000004
 80035f0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a31      	ldr	r2, [pc, #196]	@ (80036c0 <HAL_ADC_ConfigChannel+0x5c4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d11e      	bne.n	800363c <HAL_ADC_ConfigChannel+0x540>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d119      	bne.n	800363c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2d      	ldr	r2, [pc, #180]	@ (80036c4 <HAL_ADC_ConfigChannel+0x5c8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d14b      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2c      	ldr	r2, [pc, #176]	@ (80036c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_ADC_ConfigChannel+0x52a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2a      	ldr	r2, [pc, #168]	@ (80036cc <HAL_ADC_ConfigChannel+0x5d0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x52e>
 8003626:	4a2a      	ldr	r2, [pc, #168]	@ (80036d0 <HAL_ADC_ConfigChannel+0x5d4>)
 8003628:	e000      	b.n	800362c <HAL_ADC_ConfigChannel+0x530>
 800362a:	4a2a      	ldr	r2, [pc, #168]	@ (80036d4 <HAL_ADC_ConfigChannel+0x5d8>)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7ff f8e0 	bl	80027fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800363a:	e036      	b.n	80036aa <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a25      	ldr	r2, [pc, #148]	@ (80036d8 <HAL_ADC_ConfigChannel+0x5dc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d131      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x5ae>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d12c      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1b      	ldr	r2, [pc, #108]	@ (80036c4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d127      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1a      	ldr	r2, [pc, #104]	@ (80036c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_ADC_ConfigChannel+0x572>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a18      	ldr	r2, [pc, #96]	@ (80036cc <HAL_ADC_ConfigChannel+0x5d0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x576>
 800366e:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <HAL_ADC_ConfigChannel+0x5d4>)
 8003670:	e000      	b.n	8003674 <HAL_ADC_ConfigChannel+0x578>
 8003672:	4a18      	ldr	r2, [pc, #96]	@ (80036d4 <HAL_ADC_ConfigChannel+0x5d8>)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f7ff f8bc 	bl	80027fa <LL_ADC_SetCommonPathInternalCh>
 8003682:	e012      	b.n	80036aa <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003696:	e008      	b.n	80036aa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3734      	adds	r7, #52	@ 0x34
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd90      	pop	{r4, r7, pc}
 80036be:	bf00      	nop
 80036c0:	c7520000 	.word	0xc7520000
 80036c4:	58026000 	.word	0x58026000
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40022100 	.word	0x40022100
 80036d0:	40022300 	.word	0x40022300
 80036d4:	58026300 	.word	0x58026300
 80036d8:	cfb80000 	.word	0xcfb80000

080036dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fa3f 	bl	8002b6c <LL_ADC_IsEnabled>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d16e      	bne.n	80037d2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	4b38      	ldr	r3, [pc, #224]	@ (80037dc <ADC_Enable+0x100>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003706:	f043 0210 	orr.w	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	f043 0201 	orr.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e05a      	b.n	80037d4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fa0e 	bl	8002b44 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003728:	f7ff f818 	bl	800275c <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2b      	ldr	r2, [pc, #172]	@ (80037e0 <ADC_Enable+0x104>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <ADC_Enable+0x66>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a29      	ldr	r2, [pc, #164]	@ (80037e4 <ADC_Enable+0x108>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <ADC_Enable+0x6a>
 8003742:	4b29      	ldr	r3, [pc, #164]	@ (80037e8 <ADC_Enable+0x10c>)
 8003744:	e000      	b.n	8003748 <ADC_Enable+0x6c>
 8003746:	4b29      	ldr	r3, [pc, #164]	@ (80037ec <ADC_Enable+0x110>)
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f99f 	bl	8002a8c <LL_ADC_GetMultimode>
 800374e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a23      	ldr	r2, [pc, #140]	@ (80037e4 <ADC_Enable+0x108>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d002      	beq.n	8003760 <ADC_Enable+0x84>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	e000      	b.n	8003762 <ADC_Enable+0x86>
 8003760:	4b1f      	ldr	r3, [pc, #124]	@ (80037e0 <ADC_Enable+0x104>)
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	4293      	cmp	r3, r2
 8003768:	d02c      	beq.n	80037c4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d130      	bne.n	80037d2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003770:	e028      	b.n	80037c4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff f9f8 	bl	8002b6c <LL_ADC_IsEnabled>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff f9dc 	bl	8002b44 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800378c:	f7fe ffe6 	bl	800275c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d914      	bls.n	80037c4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d00d      	beq.n	80037c4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ac:	f043 0210 	orr.w	r2, r3, #16
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	f043 0201 	orr.w	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e007      	b.n	80037d4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d1cf      	bne.n	8003772 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	8000003f 	.word	0x8000003f
 80037e0:	40022000 	.word	0x40022000
 80037e4:	40022100 	.word	0x40022100
 80037e8:	40022300 	.word	0x40022300
 80037ec:	58026300 	.word	0x58026300

080037f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003802:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003806:	2b00      	cmp	r3, #0
 8003808:	d14b      	bne.n	80038a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d021      	beq.n	8003868 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff f88e 	bl	800294a <LL_ADC_REG_IsTriggerSourceSWStart>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d032      	beq.n	800389a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d12b      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11f      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	655a      	str	r2, [r3, #84]	@ 0x54
 8003866:	e018      	b.n	800389a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d111      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003892:	f043 0201 	orr.w	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f7fd fdd8 	bl	8001450 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038a0:	e00e      	b.n	80038c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff fc1a 	bl	80030e8 <HAL_ADC_ErrorCallback>
}
 80038b4:	e004      	b.n	80038c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff fbfc 	bl	80030d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff fbec 	bl	80030e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a7a      	ldr	r2, [pc, #488]	@ (8003b10 <ADC_ConfigureBoostMode+0x1f8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <ADC_ConfigureBoostMode+0x1c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a79      	ldr	r2, [pc, #484]	@ (8003b14 <ADC_ConfigureBoostMode+0x1fc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d109      	bne.n	8003948 <ADC_ConfigureBoostMode+0x30>
 8003934:	4b78      	ldr	r3, [pc, #480]	@ (8003b18 <ADC_ConfigureBoostMode+0x200>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf14      	ite	ne
 8003940:	2301      	movne	r3, #1
 8003942:	2300      	moveq	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e008      	b.n	800395a <ADC_ConfigureBoostMode+0x42>
 8003948:	4b74      	ldr	r3, [pc, #464]	@ (8003b1c <ADC_ConfigureBoostMode+0x204>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01c      	beq.n	8003998 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800395e:	f00a fcf1 	bl	800e344 <HAL_RCC_GetHCLKFreq>
 8003962:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800396c:	d010      	beq.n	8003990 <ADC_ConfigureBoostMode+0x78>
 800396e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003972:	d873      	bhi.n	8003a5c <ADC_ConfigureBoostMode+0x144>
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003978:	d002      	beq.n	8003980 <ADC_ConfigureBoostMode+0x68>
 800397a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800397e:	d16d      	bne.n	8003a5c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	60fb      	str	r3, [r7, #12]
        break;
 800398e:	e068      	b.n	8003a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	60fb      	str	r3, [r7, #12]
        break;
 8003996:	e064      	b.n	8003a62 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003998:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	f00b ff36 	bl	800f810 <HAL_RCCEx_GetPeriphCLKFreq>
 80039a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80039ae:	d051      	beq.n	8003a54 <ADC_ConfigureBoostMode+0x13c>
 80039b0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80039b4:	d854      	bhi.n	8003a60 <ADC_ConfigureBoostMode+0x148>
 80039b6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80039ba:	d047      	beq.n	8003a4c <ADC_ConfigureBoostMode+0x134>
 80039bc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80039c0:	d84e      	bhi.n	8003a60 <ADC_ConfigureBoostMode+0x148>
 80039c2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80039c6:	d03d      	beq.n	8003a44 <ADC_ConfigureBoostMode+0x12c>
 80039c8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80039cc:	d848      	bhi.n	8003a60 <ADC_ConfigureBoostMode+0x148>
 80039ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039d2:	d033      	beq.n	8003a3c <ADC_ConfigureBoostMode+0x124>
 80039d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039d8:	d842      	bhi.n	8003a60 <ADC_ConfigureBoostMode+0x148>
 80039da:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80039de:	d029      	beq.n	8003a34 <ADC_ConfigureBoostMode+0x11c>
 80039e0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80039e4:	d83c      	bhi.n	8003a60 <ADC_ConfigureBoostMode+0x148>
 80039e6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80039ea:	d01a      	beq.n	8003a22 <ADC_ConfigureBoostMode+0x10a>
 80039ec:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80039f0:	d836      	bhi.n	8003a60 <ADC_ConfigureBoostMode+0x148>
 80039f2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80039f6:	d014      	beq.n	8003a22 <ADC_ConfigureBoostMode+0x10a>
 80039f8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80039fc:	d830      	bhi.n	8003a60 <ADC_ConfigureBoostMode+0x148>
 80039fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a02:	d00e      	beq.n	8003a22 <ADC_ConfigureBoostMode+0x10a>
 8003a04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a08:	d82a      	bhi.n	8003a60 <ADC_ConfigureBoostMode+0x148>
 8003a0a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a0e:	d008      	beq.n	8003a22 <ADC_ConfigureBoostMode+0x10a>
 8003a10:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a14:	d824      	bhi.n	8003a60 <ADC_ConfigureBoostMode+0x148>
 8003a16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a1a:	d002      	beq.n	8003a22 <ADC_ConfigureBoostMode+0x10a>
 8003a1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a20:	d11e      	bne.n	8003a60 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0c9b      	lsrs	r3, r3, #18
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	60fb      	str	r3, [r7, #12]
        break;
 8003a32:	e016      	b.n	8003a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	60fb      	str	r3, [r7, #12]
        break;
 8003a3a:	e012      	b.n	8003a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	60fb      	str	r3, [r7, #12]
        break;
 8003a42:	e00e      	b.n	8003a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	60fb      	str	r3, [r7, #12]
        break;
 8003a4a:	e00a      	b.n	8003a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	09db      	lsrs	r3, r3, #7
 8003a50:	60fb      	str	r3, [r7, #12]
        break;
 8003a52:	e006      	b.n	8003a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	60fb      	str	r3, [r7, #12]
        break;
 8003a5a:	e002      	b.n	8003a62 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003a5c:	bf00      	nop
 8003a5e:	e000      	b.n	8003a62 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003a60:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003a62:	f7fe feab 	bl	80027bc <HAL_GetREVID>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d815      	bhi.n	8003a9c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a2b      	ldr	r2, [pc, #172]	@ (8003b20 <ADC_ConfigureBoostMode+0x208>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d908      	bls.n	8003a8a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a86:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a88:	e03e      	b.n	8003b08 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a98:	609a      	str	r2, [r3, #8]
}
 8003a9a:	e035      	b.n	8003b08 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b24 <ADC_ConfigureBoostMode+0x20c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d808      	bhi.n	8003abc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003ab8:	609a      	str	r2, [r3, #8]
}
 8003aba:	e025      	b.n	8003b08 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a1a      	ldr	r2, [pc, #104]	@ (8003b28 <ADC_ConfigureBoostMode+0x210>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d80a      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	e016      	b.n	8003b08 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a13      	ldr	r2, [pc, #76]	@ (8003b2c <ADC_ConfigureBoostMode+0x214>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d80a      	bhi.n	8003af8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af4:	609a      	str	r2, [r3, #8]
}
 8003af6:	e007      	b.n	8003b08 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003b06:	609a      	str	r2, [r3, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40022100 	.word	0x40022100
 8003b18:	40022300 	.word	0x40022300
 8003b1c:	58026300 	.word	0x58026300
 8003b20:	01312d00 	.word	0x01312d00
 8003b24:	005f5e10 	.word	0x005f5e10
 8003b28:	00bebc20 	.word	0x00bebc20
 8003b2c:	017d7840 	.word	0x017d7840

08003b30 <LL_ADC_IsEnabled>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <LL_ADC_IsEnabled+0x18>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <LL_ADC_IsEnabled+0x1a>
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d101      	bne.n	8003b6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b09f      	sub	sp, #124	@ 0x7c
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0be      	b.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5c      	ldr	r2, [pc, #368]	@ (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d102      	bne.n	8003bba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	e001      	b.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e09d      	b.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ffb9 	bl	8003b56 <LL_ADC_REG_IsConversionOngoing>
 8003be4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ffb3 	bl	8003b56 <LL_ADC_REG_IsConversionOngoing>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d17f      	bne.n	8003cf6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d17c      	bne.n	8003cf6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a47      	ldr	r2, [pc, #284]	@ (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a46      	ldr	r2, [pc, #280]	@ (8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003c10:	4b45      	ldr	r3, [pc, #276]	@ (8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c12:	e000      	b.n	8003c16 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003c14:	4b45      	ldr	r3, [pc, #276]	@ (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c16:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d039      	beq.n	8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c30:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a3a      	ldr	r2, [pc, #232]	@ (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a38      	ldr	r2, [pc, #224]	@ (8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d10e      	bne.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c46:	4836      	ldr	r0, [pc, #216]	@ (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c48:	f7ff ff72 	bl	8003b30 <LL_ADC_IsEnabled>
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	4835      	ldr	r0, [pc, #212]	@ (8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c50:	f7ff ff6e 	bl	8003b30 <LL_ADC_IsEnabled>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4323      	orrs	r3, r4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e008      	b.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003c64:	4832      	ldr	r0, [pc, #200]	@ (8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003c66:	f7ff ff63 	bl	8003b30 <LL_ADC_IsEnabled>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d047      	beq.n	8003d0a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	6811      	ldr	r1, [r2, #0]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	6892      	ldr	r2, [r2, #8]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c90:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c92:	e03a      	b.n	8003d0a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c9e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d10e      	bne.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003cb4:	481a      	ldr	r0, [pc, #104]	@ (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cb6:	f7ff ff3b 	bl	8003b30 <LL_ADC_IsEnabled>
 8003cba:	4604      	mov	r4, r0
 8003cbc:	4819      	ldr	r0, [pc, #100]	@ (8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cbe:	f7ff ff37 	bl	8003b30 <LL_ADC_IsEnabled>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4323      	orrs	r3, r4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	e008      	b.n	8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003cd2:	4817      	ldr	r0, [pc, #92]	@ (8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003cd4:	f7ff ff2c 	bl	8003b30 <LL_ADC_IsEnabled>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cf2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf4:	e009      	b.n	8003d0a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003d08:	e000      	b.n	8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d0a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d14:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	377c      	adds	r7, #124	@ 0x7c
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40022100 	.word	0x40022100
 8003d28:	40022300 	.word	0x40022300
 8003d2c:	58026300 	.word	0x58026300
 8003d30:	58026000 	.word	0x58026000
 8003d34:	fffff0e0 	.word	0xfffff0e0

08003d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d48:	4b0b      	ldr	r3, [pc, #44]	@ (8003d78 <__NVIC_SetPriorityGrouping+0x40>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d54:	4013      	ands	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d60:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d66:	4a04      	ldr	r2, [pc, #16]	@ (8003d78 <__NVIC_SetPriorityGrouping+0x40>)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	60d3      	str	r3, [r2, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00
 8003d7c:	05fa0000 	.word	0x05fa0000

08003d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d84:	4b04      	ldr	r3, [pc, #16]	@ (8003d98 <__NVIC_GetPriorityGrouping+0x18>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	f003 0307 	and.w	r3, r3, #7
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	db0b      	blt.n	8003dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4907      	ldr	r1, [pc, #28]	@ (8003dd4 <__NVIC_EnableIRQ+0x38>)
 8003db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	e000e100 	.word	0xe000e100

08003dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	6039      	str	r1, [r7, #0]
 8003de2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	db0a      	blt.n	8003e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	490c      	ldr	r1, [pc, #48]	@ (8003e24 <__NVIC_SetPriority+0x4c>)
 8003df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003df6:	0112      	lsls	r2, r2, #4
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e00:	e00a      	b.n	8003e18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	4908      	ldr	r1, [pc, #32]	@ (8003e28 <__NVIC_SetPriority+0x50>)
 8003e08:	88fb      	ldrh	r3, [r7, #6]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	3b04      	subs	r3, #4
 8003e10:	0112      	lsls	r2, r2, #4
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	440b      	add	r3, r1
 8003e16:	761a      	strb	r2, [r3, #24]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	e000e100 	.word	0xe000e100
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b089      	sub	sp, #36	@ 0x24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f1c3 0307 	rsb	r3, r3, #7
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	bf28      	it	cs
 8003e4a:	2304      	movcs	r3, #4
 8003e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	3304      	adds	r3, #4
 8003e52:	2b06      	cmp	r3, #6
 8003e54:	d902      	bls.n	8003e5c <NVIC_EncodePriority+0x30>
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3b03      	subs	r3, #3
 8003e5a:	e000      	b.n	8003e5e <NVIC_EncodePriority+0x32>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e60:	f04f 32ff 	mov.w	r2, #4294967295
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	401a      	ands	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e74:	f04f 31ff 	mov.w	r1, #4294967295
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	43d9      	mvns	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e84:	4313      	orrs	r3, r2
         );
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3724      	adds	r7, #36	@ 0x24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ea4:	d301      	bcc.n	8003eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e00f      	b.n	8003eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed4 <SysTick_Config+0x40>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eb2:	210f      	movs	r1, #15
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb8:	f7ff ff8e 	bl	8003dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ebc:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <SysTick_Config+0x40>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ec2:	4b04      	ldr	r3, [pc, #16]	@ (8003ed4 <SysTick_Config+0x40>)
 8003ec4:	2207      	movs	r2, #7
 8003ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	e000e010 	.word	0xe000e010

08003ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ff29 	bl	8003d38 <__NVIC_SetPriorityGrouping>
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b086      	sub	sp, #24
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003efc:	f7ff ff40 	bl	8003d80 <__NVIC_GetPriorityGrouping>
 8003f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	6978      	ldr	r0, [r7, #20]
 8003f08:	f7ff ff90 	bl	8003e2c <NVIC_EncodePriority>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff5f 	bl	8003dd8 <__NVIC_SetPriority>
}
 8003f1a:	bf00      	nop
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	4603      	mov	r3, r0
 8003f2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff ff33 	bl	8003d9c <__NVIC_EnableIRQ>
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ffa4 	bl	8003e94 <SysTick_Config>
 8003f4c:	4603      	mov	r3, r0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003f5c:	f3bf 8f5f 	dmb	sy
}
 8003f60:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f62:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <HAL_MPU_Disable+0x28>)
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	4a06      	ldr	r2, [pc, #24]	@ (8003f80 <HAL_MPU_Disable+0x28>)
 8003f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003f6e:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_MPU_Disable+0x2c>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000ed00 	.word	0xe000ed00
 8003f84:	e000ed90 	.word	0xe000ed90

08003f88 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003f90:	4a0b      	ldr	r2, [pc, #44]	@ (8003fc0 <HAL_MPU_Enable+0x38>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc4 <HAL_MPU_Enable+0x3c>)
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	4a09      	ldr	r2, [pc, #36]	@ (8003fc4 <HAL_MPU_Enable+0x3c>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003fa6:	f3bf 8f4f 	dsb	sy
}
 8003faa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fac:	f3bf 8f6f 	isb	sy
}
 8003fb0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000ed90 	.word	0xe000ed90
 8003fc4:	e000ed00 	.word	0xe000ed00

08003fc8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	785a      	ldrb	r2, [r3, #1]
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <HAL_MPU_ConfigRegion+0x7c>)
 8003fd6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004044 <HAL_MPU_ConfigRegion+0x7c>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	@ (8004044 <HAL_MPU_ConfigRegion+0x7c>)
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003fe4:	4a17      	ldr	r2, [pc, #92]	@ (8004044 <HAL_MPU_ConfigRegion+0x7c>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	7b1b      	ldrb	r3, [r3, #12]
 8003ff0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	7adb      	ldrb	r3, [r3, #11]
 8003ff6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ff8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	7a9b      	ldrb	r3, [r3, #10]
 8003ffe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004000:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7b5b      	ldrb	r3, [r3, #13]
 8004006:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7b9b      	ldrb	r3, [r3, #14]
 800400e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7bdb      	ldrb	r3, [r3, #15]
 8004016:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004018:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	7a5b      	ldrb	r3, [r3, #9]
 800401e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004020:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7a1b      	ldrb	r3, [r3, #8]
 8004026:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004028:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	7812      	ldrb	r2, [r2, #0]
 800402e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004030:	4a04      	ldr	r2, [pc, #16]	@ (8004044 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004032:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004034:	6113      	str	r3, [r2, #16]
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	e000ed90 	.word	0xe000ed90

08004048 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004050:	f7fe fb84 	bl	800275c <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e316      	b.n	800468e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a66      	ldr	r2, [pc, #408]	@ (8004200 <HAL_DMA_Init+0x1b8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d04a      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a65      	ldr	r2, [pc, #404]	@ (8004204 <HAL_DMA_Init+0x1bc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d045      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a63      	ldr	r2, [pc, #396]	@ (8004208 <HAL_DMA_Init+0x1c0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d040      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a62      	ldr	r2, [pc, #392]	@ (800420c <HAL_DMA_Init+0x1c4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d03b      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a60      	ldr	r2, [pc, #384]	@ (8004210 <HAL_DMA_Init+0x1c8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d036      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a5f      	ldr	r2, [pc, #380]	@ (8004214 <HAL_DMA_Init+0x1cc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d031      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004218 <HAL_DMA_Init+0x1d0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d02c      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a5c      	ldr	r2, [pc, #368]	@ (800421c <HAL_DMA_Init+0x1d4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d027      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004220 <HAL_DMA_Init+0x1d8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d022      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a59      	ldr	r2, [pc, #356]	@ (8004224 <HAL_DMA_Init+0x1dc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d01d      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a57      	ldr	r2, [pc, #348]	@ (8004228 <HAL_DMA_Init+0x1e0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a56      	ldr	r2, [pc, #344]	@ (800422c <HAL_DMA_Init+0x1e4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a54      	ldr	r2, [pc, #336]	@ (8004230 <HAL_DMA_Init+0x1e8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00e      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a53      	ldr	r2, [pc, #332]	@ (8004234 <HAL_DMA_Init+0x1ec>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a51      	ldr	r2, [pc, #324]	@ (8004238 <HAL_DMA_Init+0x1f0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_DMA_Init+0xb8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a50      	ldr	r2, [pc, #320]	@ (800423c <HAL_DMA_Init+0x1f4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_DMA_Init+0xbc>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_DMA_Init+0xbe>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 813b 	beq.w	8004382 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a37      	ldr	r2, [pc, #220]	@ (8004200 <HAL_DMA_Init+0x1b8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d04a      	beq.n	80041bc <HAL_DMA_Init+0x174>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a36      	ldr	r2, [pc, #216]	@ (8004204 <HAL_DMA_Init+0x1bc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d045      	beq.n	80041bc <HAL_DMA_Init+0x174>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a34      	ldr	r2, [pc, #208]	@ (8004208 <HAL_DMA_Init+0x1c0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d040      	beq.n	80041bc <HAL_DMA_Init+0x174>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a33      	ldr	r2, [pc, #204]	@ (800420c <HAL_DMA_Init+0x1c4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d03b      	beq.n	80041bc <HAL_DMA_Init+0x174>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a31      	ldr	r2, [pc, #196]	@ (8004210 <HAL_DMA_Init+0x1c8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d036      	beq.n	80041bc <HAL_DMA_Init+0x174>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a30      	ldr	r2, [pc, #192]	@ (8004214 <HAL_DMA_Init+0x1cc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d031      	beq.n	80041bc <HAL_DMA_Init+0x174>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2e      	ldr	r2, [pc, #184]	@ (8004218 <HAL_DMA_Init+0x1d0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d02c      	beq.n	80041bc <HAL_DMA_Init+0x174>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2d      	ldr	r2, [pc, #180]	@ (800421c <HAL_DMA_Init+0x1d4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d027      	beq.n	80041bc <HAL_DMA_Init+0x174>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2b      	ldr	r2, [pc, #172]	@ (8004220 <HAL_DMA_Init+0x1d8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d022      	beq.n	80041bc <HAL_DMA_Init+0x174>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2a      	ldr	r2, [pc, #168]	@ (8004224 <HAL_DMA_Init+0x1dc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d01d      	beq.n	80041bc <HAL_DMA_Init+0x174>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a28      	ldr	r2, [pc, #160]	@ (8004228 <HAL_DMA_Init+0x1e0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_DMA_Init+0x174>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a27      	ldr	r2, [pc, #156]	@ (800422c <HAL_DMA_Init+0x1e4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_DMA_Init+0x174>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a25      	ldr	r2, [pc, #148]	@ (8004230 <HAL_DMA_Init+0x1e8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_DMA_Init+0x174>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a24      	ldr	r2, [pc, #144]	@ (8004234 <HAL_DMA_Init+0x1ec>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_DMA_Init+0x174>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a22      	ldr	r2, [pc, #136]	@ (8004238 <HAL_DMA_Init+0x1f0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_DMA_Init+0x174>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a21      	ldr	r2, [pc, #132]	@ (800423c <HAL_DMA_Init+0x1f4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d108      	bne.n	80041ce <HAL_DMA_Init+0x186>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e007      	b.n	80041de <HAL_DMA_Init+0x196>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041de:	e02f      	b.n	8004240 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041e0:	f7fe fabc 	bl	800275c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b05      	cmp	r3, #5
 80041ec:	d928      	bls.n	8004240 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2203      	movs	r2, #3
 80041f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e246      	b.n	800468e <HAL_DMA_Init+0x646>
 8004200:	40020010 	.word	0x40020010
 8004204:	40020028 	.word	0x40020028
 8004208:	40020040 	.word	0x40020040
 800420c:	40020058 	.word	0x40020058
 8004210:	40020070 	.word	0x40020070
 8004214:	40020088 	.word	0x40020088
 8004218:	400200a0 	.word	0x400200a0
 800421c:	400200b8 	.word	0x400200b8
 8004220:	40020410 	.word	0x40020410
 8004224:	40020428 	.word	0x40020428
 8004228:	40020440 	.word	0x40020440
 800422c:	40020458 	.word	0x40020458
 8004230:	40020470 	.word	0x40020470
 8004234:	40020488 	.word	0x40020488
 8004238:	400204a0 	.word	0x400204a0
 800423c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1c8      	bne.n	80041e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4b83      	ldr	r3, [pc, #524]	@ (8004468 <HAL_DMA_Init+0x420>)
 800425a:	4013      	ands	r3, r2
 800425c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004266:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004272:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800427e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	2b04      	cmp	r3, #4
 8004292:	d107      	bne.n	80042a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429c:	4313      	orrs	r3, r2
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80042a4:	4b71      	ldr	r3, [pc, #452]	@ (800446c <HAL_DMA_Init+0x424>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b71      	ldr	r3, [pc, #452]	@ (8004470 <HAL_DMA_Init+0x428>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042b0:	d328      	bcc.n	8004304 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b28      	cmp	r3, #40	@ 0x28
 80042b8:	d903      	bls.n	80042c2 <HAL_DMA_Init+0x27a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b2e      	cmp	r3, #46	@ 0x2e
 80042c0:	d917      	bls.n	80042f2 <HAL_DMA_Init+0x2aa>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80042c8:	d903      	bls.n	80042d2 <HAL_DMA_Init+0x28a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b42      	cmp	r3, #66	@ 0x42
 80042d0:	d90f      	bls.n	80042f2 <HAL_DMA_Init+0x2aa>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b46      	cmp	r3, #70	@ 0x46
 80042d8:	d903      	bls.n	80042e2 <HAL_DMA_Init+0x29a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b48      	cmp	r3, #72	@ 0x48
 80042e0:	d907      	bls.n	80042f2 <HAL_DMA_Init+0x2aa>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80042e8:	d905      	bls.n	80042f6 <HAL_DMA_Init+0x2ae>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b52      	cmp	r3, #82	@ 0x52
 80042f0:	d801      	bhi.n	80042f6 <HAL_DMA_Init+0x2ae>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <HAL_DMA_Init+0x2b0>
 80042f6:	2300      	movs	r3, #0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004302:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0307 	bic.w	r3, r3, #7
 800431a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	2b04      	cmp	r3, #4
 800432c:	d117      	bne.n	800435e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00e      	beq.n	800435e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f002 fb4d 	bl	80069e0 <DMA_CheckFifoParam>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2240      	movs	r2, #64	@ 0x40
 8004350:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e197      	b.n	800468e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f002 fa88 	bl	800687c <DMA_CalcBaseAndBitshift>
 800436c:	4603      	mov	r3, r0
 800436e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	223f      	movs	r2, #63	@ 0x3f
 800437a:	409a      	lsls	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	e0cd      	b.n	800451e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3b      	ldr	r2, [pc, #236]	@ (8004474 <HAL_DMA_Init+0x42c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <HAL_DMA_Init+0x38a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a39      	ldr	r2, [pc, #228]	@ (8004478 <HAL_DMA_Init+0x430>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d01d      	beq.n	80043d2 <HAL_DMA_Init+0x38a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a38      	ldr	r2, [pc, #224]	@ (800447c <HAL_DMA_Init+0x434>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d018      	beq.n	80043d2 <HAL_DMA_Init+0x38a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a36      	ldr	r2, [pc, #216]	@ (8004480 <HAL_DMA_Init+0x438>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_DMA_Init+0x38a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a35      	ldr	r2, [pc, #212]	@ (8004484 <HAL_DMA_Init+0x43c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_DMA_Init+0x38a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a33      	ldr	r2, [pc, #204]	@ (8004488 <HAL_DMA_Init+0x440>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_DMA_Init+0x38a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a32      	ldr	r2, [pc, #200]	@ (800448c <HAL_DMA_Init+0x444>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_DMA_Init+0x38a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a30      	ldr	r2, [pc, #192]	@ (8004490 <HAL_DMA_Init+0x448>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d101      	bne.n	80043d6 <HAL_DMA_Init+0x38e>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <HAL_DMA_Init+0x390>
 80043d6:	2300      	movs	r3, #0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8097 	beq.w	800450c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a24      	ldr	r2, [pc, #144]	@ (8004474 <HAL_DMA_Init+0x42c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d021      	beq.n	800442c <HAL_DMA_Init+0x3e4>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a22      	ldr	r2, [pc, #136]	@ (8004478 <HAL_DMA_Init+0x430>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01c      	beq.n	800442c <HAL_DMA_Init+0x3e4>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a21      	ldr	r2, [pc, #132]	@ (800447c <HAL_DMA_Init+0x434>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d017      	beq.n	800442c <HAL_DMA_Init+0x3e4>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1f      	ldr	r2, [pc, #124]	@ (8004480 <HAL_DMA_Init+0x438>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d012      	beq.n	800442c <HAL_DMA_Init+0x3e4>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1e      	ldr	r2, [pc, #120]	@ (8004484 <HAL_DMA_Init+0x43c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00d      	beq.n	800442c <HAL_DMA_Init+0x3e4>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1c      	ldr	r2, [pc, #112]	@ (8004488 <HAL_DMA_Init+0x440>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d008      	beq.n	800442c <HAL_DMA_Init+0x3e4>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1b      	ldr	r2, [pc, #108]	@ (800448c <HAL_DMA_Init+0x444>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <HAL_DMA_Init+0x3e4>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a19      	ldr	r2, [pc, #100]	@ (8004490 <HAL_DMA_Init+0x448>)
 800442a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4b13      	ldr	r3, [pc, #76]	@ (8004494 <HAL_DMA_Init+0x44c>)
 8004448:	4013      	ands	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b40      	cmp	r3, #64	@ 0x40
 8004452:	d021      	beq.n	8004498 <HAL_DMA_Init+0x450>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b80      	cmp	r3, #128	@ 0x80
 800445a:	d102      	bne.n	8004462 <HAL_DMA_Init+0x41a>
 800445c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004460:	e01b      	b.n	800449a <HAL_DMA_Init+0x452>
 8004462:	2300      	movs	r3, #0
 8004464:	e019      	b.n	800449a <HAL_DMA_Init+0x452>
 8004466:	bf00      	nop
 8004468:	fe10803f 	.word	0xfe10803f
 800446c:	5c001000 	.word	0x5c001000
 8004470:	ffff0000 	.word	0xffff0000
 8004474:	58025408 	.word	0x58025408
 8004478:	5802541c 	.word	0x5802541c
 800447c:	58025430 	.word	0x58025430
 8004480:	58025444 	.word	0x58025444
 8004484:	58025458 	.word	0x58025458
 8004488:	5802546c 	.word	0x5802546c
 800448c:	58025480 	.word	0x58025480
 8004490:	58025494 	.word	0x58025494
 8004494:	fffe000f 	.word	0xfffe000f
 8004498:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68d2      	ldr	r2, [r2, #12]
 800449e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80044b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80044c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80044c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	4b6e      	ldr	r3, [pc, #440]	@ (8004698 <HAL_DMA_Init+0x650>)
 80044e0:	4413      	add	r3, r2
 80044e2:	4a6e      	ldr	r2, [pc, #440]	@ (800469c <HAL_DMA_Init+0x654>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f002 f9c3 	bl	800687c <DMA_CalcBaseAndBitshift>
 80044f6:	4603      	mov	r3, r0
 80044f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	2201      	movs	r2, #1
 8004504:	409a      	lsls	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	e008      	b.n	800451e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2240      	movs	r2, #64	@ 0x40
 8004510:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2203      	movs	r2, #3
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e0b7      	b.n	800468e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a5f      	ldr	r2, [pc, #380]	@ (80046a0 <HAL_DMA_Init+0x658>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d072      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a5d      	ldr	r2, [pc, #372]	@ (80046a4 <HAL_DMA_Init+0x65c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d06d      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5c      	ldr	r2, [pc, #368]	@ (80046a8 <HAL_DMA_Init+0x660>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d068      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a5a      	ldr	r2, [pc, #360]	@ (80046ac <HAL_DMA_Init+0x664>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d063      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a59      	ldr	r2, [pc, #356]	@ (80046b0 <HAL_DMA_Init+0x668>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d05e      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a57      	ldr	r2, [pc, #348]	@ (80046b4 <HAL_DMA_Init+0x66c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d059      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a56      	ldr	r2, [pc, #344]	@ (80046b8 <HAL_DMA_Init+0x670>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d054      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a54      	ldr	r2, [pc, #336]	@ (80046bc <HAL_DMA_Init+0x674>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d04f      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a53      	ldr	r2, [pc, #332]	@ (80046c0 <HAL_DMA_Init+0x678>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d04a      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a51      	ldr	r2, [pc, #324]	@ (80046c4 <HAL_DMA_Init+0x67c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d045      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a50      	ldr	r2, [pc, #320]	@ (80046c8 <HAL_DMA_Init+0x680>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d040      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a4e      	ldr	r2, [pc, #312]	@ (80046cc <HAL_DMA_Init+0x684>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d03b      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a4d      	ldr	r2, [pc, #308]	@ (80046d0 <HAL_DMA_Init+0x688>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d036      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a4b      	ldr	r2, [pc, #300]	@ (80046d4 <HAL_DMA_Init+0x68c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d031      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a4a      	ldr	r2, [pc, #296]	@ (80046d8 <HAL_DMA_Init+0x690>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d02c      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a48      	ldr	r2, [pc, #288]	@ (80046dc <HAL_DMA_Init+0x694>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d027      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a47      	ldr	r2, [pc, #284]	@ (80046e0 <HAL_DMA_Init+0x698>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d022      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a45      	ldr	r2, [pc, #276]	@ (80046e4 <HAL_DMA_Init+0x69c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01d      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a44      	ldr	r2, [pc, #272]	@ (80046e8 <HAL_DMA_Init+0x6a0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d018      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a42      	ldr	r2, [pc, #264]	@ (80046ec <HAL_DMA_Init+0x6a4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a41      	ldr	r2, [pc, #260]	@ (80046f0 <HAL_DMA_Init+0x6a8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a3f      	ldr	r2, [pc, #252]	@ (80046f4 <HAL_DMA_Init+0x6ac>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a3e      	ldr	r2, [pc, #248]	@ (80046f8 <HAL_DMA_Init+0x6b0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_DMA_Init+0x5c6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a3c      	ldr	r2, [pc, #240]	@ (80046fc <HAL_DMA_Init+0x6b4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d101      	bne.n	8004612 <HAL_DMA_Init+0x5ca>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_DMA_Init+0x5cc>
 8004612:	2300      	movs	r3, #0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d032      	beq.n	800467e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f002 fa5d 	bl	8006ad8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b80      	cmp	r3, #128	@ 0x80
 8004624:	d102      	bne.n	800462c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004640:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <HAL_DMA_Init+0x624>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b08      	cmp	r3, #8
 8004650:	d80c      	bhi.n	800466c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f002 fada 	bl	8006c0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	e008      	b.n	800467e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	a7fdabf8 	.word	0xa7fdabf8
 800469c:	cccccccd 	.word	0xcccccccd
 80046a0:	40020010 	.word	0x40020010
 80046a4:	40020028 	.word	0x40020028
 80046a8:	40020040 	.word	0x40020040
 80046ac:	40020058 	.word	0x40020058
 80046b0:	40020070 	.word	0x40020070
 80046b4:	40020088 	.word	0x40020088
 80046b8:	400200a0 	.word	0x400200a0
 80046bc:	400200b8 	.word	0x400200b8
 80046c0:	40020410 	.word	0x40020410
 80046c4:	40020428 	.word	0x40020428
 80046c8:	40020440 	.word	0x40020440
 80046cc:	40020458 	.word	0x40020458
 80046d0:	40020470 	.word	0x40020470
 80046d4:	40020488 	.word	0x40020488
 80046d8:	400204a0 	.word	0x400204a0
 80046dc:	400204b8 	.word	0x400204b8
 80046e0:	58025408 	.word	0x58025408
 80046e4:	5802541c 	.word	0x5802541c
 80046e8:	58025430 	.word	0x58025430
 80046ec:	58025444 	.word	0x58025444
 80046f0:	58025458 	.word	0x58025458
 80046f4:	5802546c 	.word	0x5802546c
 80046f8:	58025480 	.word	0x58025480
 80046fc:	58025494 	.word	0x58025494

08004700 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e226      	b.n	8004b6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_DMA_Start_IT+0x2a>
 8004726:	2302      	movs	r3, #2
 8004728:	e21f      	b.n	8004b6a <HAL_DMA_Start_IT+0x46a>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	f040 820a 	bne.w	8004b54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a68      	ldr	r2, [pc, #416]	@ (80048f4 <HAL_DMA_Start_IT+0x1f4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d04a      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a66      	ldr	r2, [pc, #408]	@ (80048f8 <HAL_DMA_Start_IT+0x1f8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d045      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a65      	ldr	r2, [pc, #404]	@ (80048fc <HAL_DMA_Start_IT+0x1fc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d040      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a63      	ldr	r2, [pc, #396]	@ (8004900 <HAL_DMA_Start_IT+0x200>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d03b      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a62      	ldr	r2, [pc, #392]	@ (8004904 <HAL_DMA_Start_IT+0x204>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d036      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a60      	ldr	r2, [pc, #384]	@ (8004908 <HAL_DMA_Start_IT+0x208>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d031      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a5f      	ldr	r2, [pc, #380]	@ (800490c <HAL_DMA_Start_IT+0x20c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d02c      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a5d      	ldr	r2, [pc, #372]	@ (8004910 <HAL_DMA_Start_IT+0x210>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d027      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004914 <HAL_DMA_Start_IT+0x214>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004918 <HAL_DMA_Start_IT+0x218>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01d      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a59      	ldr	r2, [pc, #356]	@ (800491c <HAL_DMA_Start_IT+0x21c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a57      	ldr	r2, [pc, #348]	@ (8004920 <HAL_DMA_Start_IT+0x220>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a56      	ldr	r2, [pc, #344]	@ (8004924 <HAL_DMA_Start_IT+0x224>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a54      	ldr	r2, [pc, #336]	@ (8004928 <HAL_DMA_Start_IT+0x228>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a53      	ldr	r2, [pc, #332]	@ (800492c <HAL_DMA_Start_IT+0x22c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_DMA_Start_IT+0xee>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a51      	ldr	r2, [pc, #324]	@ (8004930 <HAL_DMA_Start_IT+0x230>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d108      	bne.n	8004800 <HAL_DMA_Start_IT+0x100>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0201 	bic.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e007      	b.n	8004810 <HAL_DMA_Start_IT+0x110>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f001 fe84 	bl	8006524 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a34      	ldr	r2, [pc, #208]	@ (80048f4 <HAL_DMA_Start_IT+0x1f4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d04a      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a33      	ldr	r2, [pc, #204]	@ (80048f8 <HAL_DMA_Start_IT+0x1f8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d045      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a31      	ldr	r2, [pc, #196]	@ (80048fc <HAL_DMA_Start_IT+0x1fc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d040      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a30      	ldr	r2, [pc, #192]	@ (8004900 <HAL_DMA_Start_IT+0x200>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d03b      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2e      	ldr	r2, [pc, #184]	@ (8004904 <HAL_DMA_Start_IT+0x204>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d036      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2d      	ldr	r2, [pc, #180]	@ (8004908 <HAL_DMA_Start_IT+0x208>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d031      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2b      	ldr	r2, [pc, #172]	@ (800490c <HAL_DMA_Start_IT+0x20c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d02c      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a2a      	ldr	r2, [pc, #168]	@ (8004910 <HAL_DMA_Start_IT+0x210>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d027      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a28      	ldr	r2, [pc, #160]	@ (8004914 <HAL_DMA_Start_IT+0x214>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d022      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a27      	ldr	r2, [pc, #156]	@ (8004918 <HAL_DMA_Start_IT+0x218>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d01d      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a25      	ldr	r2, [pc, #148]	@ (800491c <HAL_DMA_Start_IT+0x21c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d018      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a24      	ldr	r2, [pc, #144]	@ (8004920 <HAL_DMA_Start_IT+0x220>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d013      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a22      	ldr	r2, [pc, #136]	@ (8004924 <HAL_DMA_Start_IT+0x224>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00e      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a21      	ldr	r2, [pc, #132]	@ (8004928 <HAL_DMA_Start_IT+0x228>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d009      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1f      	ldr	r2, [pc, #124]	@ (800492c <HAL_DMA_Start_IT+0x22c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d004      	beq.n	80048bc <HAL_DMA_Start_IT+0x1bc>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004930 <HAL_DMA_Start_IT+0x230>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d101      	bne.n	80048c0 <HAL_DMA_Start_IT+0x1c0>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <HAL_DMA_Start_IT+0x1c2>
 80048c0:	2300      	movs	r3, #0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d036      	beq.n	8004934 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f023 021e 	bic.w	r2, r3, #30
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0216 	orr.w	r2, r2, #22
 80048d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d03e      	beq.n	8004960 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0208 	orr.w	r2, r2, #8
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e035      	b.n	8004960 <HAL_DMA_Start_IT+0x260>
 80048f4:	40020010 	.word	0x40020010
 80048f8:	40020028 	.word	0x40020028
 80048fc:	40020040 	.word	0x40020040
 8004900:	40020058 	.word	0x40020058
 8004904:	40020070 	.word	0x40020070
 8004908:	40020088 	.word	0x40020088
 800490c:	400200a0 	.word	0x400200a0
 8004910:	400200b8 	.word	0x400200b8
 8004914:	40020410 	.word	0x40020410
 8004918:	40020428 	.word	0x40020428
 800491c:	40020440 	.word	0x40020440
 8004920:	40020458 	.word	0x40020458
 8004924:	40020470 	.word	0x40020470
 8004928:	40020488 	.word	0x40020488
 800492c:	400204a0 	.word	0x400204a0
 8004930:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 020e 	bic.w	r2, r3, #14
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 020a 	orr.w	r2, r2, #10
 8004946:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0204 	orr.w	r2, r2, #4
 800495e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a83      	ldr	r2, [pc, #524]	@ (8004b74 <HAL_DMA_Start_IT+0x474>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d072      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a82      	ldr	r2, [pc, #520]	@ (8004b78 <HAL_DMA_Start_IT+0x478>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d06d      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a80      	ldr	r2, [pc, #512]	@ (8004b7c <HAL_DMA_Start_IT+0x47c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d068      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a7f      	ldr	r2, [pc, #508]	@ (8004b80 <HAL_DMA_Start_IT+0x480>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d063      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a7d      	ldr	r2, [pc, #500]	@ (8004b84 <HAL_DMA_Start_IT+0x484>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d05e      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a7c      	ldr	r2, [pc, #496]	@ (8004b88 <HAL_DMA_Start_IT+0x488>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d059      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a7a      	ldr	r2, [pc, #488]	@ (8004b8c <HAL_DMA_Start_IT+0x48c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d054      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a79      	ldr	r2, [pc, #484]	@ (8004b90 <HAL_DMA_Start_IT+0x490>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d04f      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a77      	ldr	r2, [pc, #476]	@ (8004b94 <HAL_DMA_Start_IT+0x494>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d04a      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a76      	ldr	r2, [pc, #472]	@ (8004b98 <HAL_DMA_Start_IT+0x498>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d045      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a74      	ldr	r2, [pc, #464]	@ (8004b9c <HAL_DMA_Start_IT+0x49c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d040      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a73      	ldr	r2, [pc, #460]	@ (8004ba0 <HAL_DMA_Start_IT+0x4a0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d03b      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a71      	ldr	r2, [pc, #452]	@ (8004ba4 <HAL_DMA_Start_IT+0x4a4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d036      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a70      	ldr	r2, [pc, #448]	@ (8004ba8 <HAL_DMA_Start_IT+0x4a8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d031      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a6e      	ldr	r2, [pc, #440]	@ (8004bac <HAL_DMA_Start_IT+0x4ac>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d02c      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a6d      	ldr	r2, [pc, #436]	@ (8004bb0 <HAL_DMA_Start_IT+0x4b0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d027      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a6b      	ldr	r2, [pc, #428]	@ (8004bb4 <HAL_DMA_Start_IT+0x4b4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d022      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a6a      	ldr	r2, [pc, #424]	@ (8004bb8 <HAL_DMA_Start_IT+0x4b8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d01d      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a68      	ldr	r2, [pc, #416]	@ (8004bbc <HAL_DMA_Start_IT+0x4bc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d018      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a67      	ldr	r2, [pc, #412]	@ (8004bc0 <HAL_DMA_Start_IT+0x4c0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a65      	ldr	r2, [pc, #404]	@ (8004bc4 <HAL_DMA_Start_IT+0x4c4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00e      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a64      	ldr	r2, [pc, #400]	@ (8004bc8 <HAL_DMA_Start_IT+0x4c8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d009      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a62      	ldr	r2, [pc, #392]	@ (8004bcc <HAL_DMA_Start_IT+0x4cc>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_DMA_Start_IT+0x350>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a61      	ldr	r2, [pc, #388]	@ (8004bd0 <HAL_DMA_Start_IT+0x4d0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d101      	bne.n	8004a54 <HAL_DMA_Start_IT+0x354>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <HAL_DMA_Start_IT+0x356>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d01a      	beq.n	8004a90 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a76:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a8e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a37      	ldr	r2, [pc, #220]	@ (8004b74 <HAL_DMA_Start_IT+0x474>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d04a      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a36      	ldr	r2, [pc, #216]	@ (8004b78 <HAL_DMA_Start_IT+0x478>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d045      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a34      	ldr	r2, [pc, #208]	@ (8004b7c <HAL_DMA_Start_IT+0x47c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d040      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a33      	ldr	r2, [pc, #204]	@ (8004b80 <HAL_DMA_Start_IT+0x480>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d03b      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a31      	ldr	r2, [pc, #196]	@ (8004b84 <HAL_DMA_Start_IT+0x484>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d036      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a30      	ldr	r2, [pc, #192]	@ (8004b88 <HAL_DMA_Start_IT+0x488>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d031      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8004b8c <HAL_DMA_Start_IT+0x48c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d02c      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a2d      	ldr	r2, [pc, #180]	@ (8004b90 <HAL_DMA_Start_IT+0x490>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d027      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b94 <HAL_DMA_Start_IT+0x494>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d022      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2a      	ldr	r2, [pc, #168]	@ (8004b98 <HAL_DMA_Start_IT+0x498>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d01d      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a28      	ldr	r2, [pc, #160]	@ (8004b9c <HAL_DMA_Start_IT+0x49c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d018      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a27      	ldr	r2, [pc, #156]	@ (8004ba0 <HAL_DMA_Start_IT+0x4a0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a25      	ldr	r2, [pc, #148]	@ (8004ba4 <HAL_DMA_Start_IT+0x4a4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00e      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a24      	ldr	r2, [pc, #144]	@ (8004ba8 <HAL_DMA_Start_IT+0x4a8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a22      	ldr	r2, [pc, #136]	@ (8004bac <HAL_DMA_Start_IT+0x4ac>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_DMA_Start_IT+0x430>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a21      	ldr	r2, [pc, #132]	@ (8004bb0 <HAL_DMA_Start_IT+0x4b0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d108      	bne.n	8004b42 <HAL_DMA_Start_IT+0x442>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e012      	b.n	8004b68 <HAL_DMA_Start_IT+0x468>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e009      	b.n	8004b68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40020010 	.word	0x40020010
 8004b78:	40020028 	.word	0x40020028
 8004b7c:	40020040 	.word	0x40020040
 8004b80:	40020058 	.word	0x40020058
 8004b84:	40020070 	.word	0x40020070
 8004b88:	40020088 	.word	0x40020088
 8004b8c:	400200a0 	.word	0x400200a0
 8004b90:	400200b8 	.word	0x400200b8
 8004b94:	40020410 	.word	0x40020410
 8004b98:	40020428 	.word	0x40020428
 8004b9c:	40020440 	.word	0x40020440
 8004ba0:	40020458 	.word	0x40020458
 8004ba4:	40020470 	.word	0x40020470
 8004ba8:	40020488 	.word	0x40020488
 8004bac:	400204a0 	.word	0x400204a0
 8004bb0:	400204b8 	.word	0x400204b8
 8004bb4:	58025408 	.word	0x58025408
 8004bb8:	5802541c 	.word	0x5802541c
 8004bbc:	58025430 	.word	0x58025430
 8004bc0:	58025444 	.word	0x58025444
 8004bc4:	58025458 	.word	0x58025458
 8004bc8:	5802546c 	.word	0x5802546c
 8004bcc:	58025480 	.word	0x58025480
 8004bd0:	58025494 	.word	0x58025494

08004bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004bdc:	f7fd fdbe 	bl	800275c <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e2dc      	b.n	80051a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d008      	beq.n	8004c0a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2280      	movs	r2, #128	@ 0x80
 8004bfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e2cd      	b.n	80051a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a76      	ldr	r2, [pc, #472]	@ (8004de8 <HAL_DMA_Abort+0x214>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d04a      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a74      	ldr	r2, [pc, #464]	@ (8004dec <HAL_DMA_Abort+0x218>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d045      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a73      	ldr	r2, [pc, #460]	@ (8004df0 <HAL_DMA_Abort+0x21c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d040      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a71      	ldr	r2, [pc, #452]	@ (8004df4 <HAL_DMA_Abort+0x220>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d03b      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a70      	ldr	r2, [pc, #448]	@ (8004df8 <HAL_DMA_Abort+0x224>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d036      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a6e      	ldr	r2, [pc, #440]	@ (8004dfc <HAL_DMA_Abort+0x228>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d031      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6d      	ldr	r2, [pc, #436]	@ (8004e00 <HAL_DMA_Abort+0x22c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d02c      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a6b      	ldr	r2, [pc, #428]	@ (8004e04 <HAL_DMA_Abort+0x230>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d027      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a6a      	ldr	r2, [pc, #424]	@ (8004e08 <HAL_DMA_Abort+0x234>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d022      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a68      	ldr	r2, [pc, #416]	@ (8004e0c <HAL_DMA_Abort+0x238>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01d      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a67      	ldr	r2, [pc, #412]	@ (8004e10 <HAL_DMA_Abort+0x23c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d018      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a65      	ldr	r2, [pc, #404]	@ (8004e14 <HAL_DMA_Abort+0x240>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a64      	ldr	r2, [pc, #400]	@ (8004e18 <HAL_DMA_Abort+0x244>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a62      	ldr	r2, [pc, #392]	@ (8004e1c <HAL_DMA_Abort+0x248>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a61      	ldr	r2, [pc, #388]	@ (8004e20 <HAL_DMA_Abort+0x24c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_DMA_Abort+0xd6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8004e24 <HAL_DMA_Abort+0x250>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <HAL_DMA_Abort+0xda>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <HAL_DMA_Abort+0xdc>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 021e 	bic.w	r2, r2, #30
 8004cc2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695a      	ldr	r2, [r3, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cd2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	e00a      	b.n	8004cf2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 020e 	bic.w	r2, r2, #14
 8004cea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8004de8 <HAL_DMA_Abort+0x214>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d072      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a3a      	ldr	r2, [pc, #232]	@ (8004dec <HAL_DMA_Abort+0x218>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d06d      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a39      	ldr	r2, [pc, #228]	@ (8004df0 <HAL_DMA_Abort+0x21c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d068      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a37      	ldr	r2, [pc, #220]	@ (8004df4 <HAL_DMA_Abort+0x220>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d063      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a36      	ldr	r2, [pc, #216]	@ (8004df8 <HAL_DMA_Abort+0x224>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d05e      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a34      	ldr	r2, [pc, #208]	@ (8004dfc <HAL_DMA_Abort+0x228>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d059      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a33      	ldr	r2, [pc, #204]	@ (8004e00 <HAL_DMA_Abort+0x22c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d054      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a31      	ldr	r2, [pc, #196]	@ (8004e04 <HAL_DMA_Abort+0x230>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d04f      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a30      	ldr	r2, [pc, #192]	@ (8004e08 <HAL_DMA_Abort+0x234>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d04a      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a2e      	ldr	r2, [pc, #184]	@ (8004e0c <HAL_DMA_Abort+0x238>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d045      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e10 <HAL_DMA_Abort+0x23c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d040      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2b      	ldr	r2, [pc, #172]	@ (8004e14 <HAL_DMA_Abort+0x240>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d03b      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e18 <HAL_DMA_Abort+0x244>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d036      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a28      	ldr	r2, [pc, #160]	@ (8004e1c <HAL_DMA_Abort+0x248>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d031      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a27      	ldr	r2, [pc, #156]	@ (8004e20 <HAL_DMA_Abort+0x24c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d02c      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a25      	ldr	r2, [pc, #148]	@ (8004e24 <HAL_DMA_Abort+0x250>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d027      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a24      	ldr	r2, [pc, #144]	@ (8004e28 <HAL_DMA_Abort+0x254>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d022      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a22      	ldr	r2, [pc, #136]	@ (8004e2c <HAL_DMA_Abort+0x258>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01d      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a21      	ldr	r2, [pc, #132]	@ (8004e30 <HAL_DMA_Abort+0x25c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d018      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e34 <HAL_DMA_Abort+0x260>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004e38 <HAL_DMA_Abort+0x264>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00e      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e3c <HAL_DMA_Abort+0x268>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e40 <HAL_DMA_Abort+0x26c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <HAL_DMA_Abort+0x20e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <HAL_DMA_Abort+0x270>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d132      	bne.n	8004e48 <HAL_DMA_Abort+0x274>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e031      	b.n	8004e4a <HAL_DMA_Abort+0x276>
 8004de6:	bf00      	nop
 8004de8:	40020010 	.word	0x40020010
 8004dec:	40020028 	.word	0x40020028
 8004df0:	40020040 	.word	0x40020040
 8004df4:	40020058 	.word	0x40020058
 8004df8:	40020070 	.word	0x40020070
 8004dfc:	40020088 	.word	0x40020088
 8004e00:	400200a0 	.word	0x400200a0
 8004e04:	400200b8 	.word	0x400200b8
 8004e08:	40020410 	.word	0x40020410
 8004e0c:	40020428 	.word	0x40020428
 8004e10:	40020440 	.word	0x40020440
 8004e14:	40020458 	.word	0x40020458
 8004e18:	40020470 	.word	0x40020470
 8004e1c:	40020488 	.word	0x40020488
 8004e20:	400204a0 	.word	0x400204a0
 8004e24:	400204b8 	.word	0x400204b8
 8004e28:	58025408 	.word	0x58025408
 8004e2c:	5802541c 	.word	0x5802541c
 8004e30:	58025430 	.word	0x58025430
 8004e34:	58025444 	.word	0x58025444
 8004e38:	58025458 	.word	0x58025458
 8004e3c:	5802546c 	.word	0x5802546c
 8004e40:	58025480 	.word	0x58025480
 8004e44:	58025494 	.word	0x58025494
 8004e48:	2300      	movs	r3, #0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a6d      	ldr	r2, [pc, #436]	@ (8005018 <HAL_DMA_Abort+0x444>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d04a      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a6b      	ldr	r2, [pc, #428]	@ (800501c <HAL_DMA_Abort+0x448>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d045      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6a      	ldr	r2, [pc, #424]	@ (8005020 <HAL_DMA_Abort+0x44c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d040      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a68      	ldr	r2, [pc, #416]	@ (8005024 <HAL_DMA_Abort+0x450>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d03b      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a67      	ldr	r2, [pc, #412]	@ (8005028 <HAL_DMA_Abort+0x454>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d036      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a65      	ldr	r2, [pc, #404]	@ (800502c <HAL_DMA_Abort+0x458>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d031      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a64      	ldr	r2, [pc, #400]	@ (8005030 <HAL_DMA_Abort+0x45c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d02c      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a62      	ldr	r2, [pc, #392]	@ (8005034 <HAL_DMA_Abort+0x460>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d027      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a61      	ldr	r2, [pc, #388]	@ (8005038 <HAL_DMA_Abort+0x464>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d022      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a5f      	ldr	r2, [pc, #380]	@ (800503c <HAL_DMA_Abort+0x468>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01d      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8005040 <HAL_DMA_Abort+0x46c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d018      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a5c      	ldr	r2, [pc, #368]	@ (8005044 <HAL_DMA_Abort+0x470>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d013      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a5b      	ldr	r2, [pc, #364]	@ (8005048 <HAL_DMA_Abort+0x474>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00e      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a59      	ldr	r2, [pc, #356]	@ (800504c <HAL_DMA_Abort+0x478>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d009      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a58      	ldr	r2, [pc, #352]	@ (8005050 <HAL_DMA_Abort+0x47c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d004      	beq.n	8004efe <HAL_DMA_Abort+0x32a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a56      	ldr	r2, [pc, #344]	@ (8005054 <HAL_DMA_Abort+0x480>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d108      	bne.n	8004f10 <HAL_DMA_Abort+0x33c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e007      	b.n	8004f20 <HAL_DMA_Abort+0x34c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f20:	e013      	b.n	8004f4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f22:	f7fd fc1b 	bl	800275c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	d90c      	bls.n	8004f4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2203      	movs	r2, #3
 8004f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e12d      	b.n	80051a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e5      	bne.n	8004f22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8005018 <HAL_DMA_Abort+0x444>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d04a      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2d      	ldr	r2, [pc, #180]	@ (800501c <HAL_DMA_Abort+0x448>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d045      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8005020 <HAL_DMA_Abort+0x44c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d040      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2a      	ldr	r2, [pc, #168]	@ (8005024 <HAL_DMA_Abort+0x450>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d03b      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a29      	ldr	r2, [pc, #164]	@ (8005028 <HAL_DMA_Abort+0x454>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d036      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a27      	ldr	r2, [pc, #156]	@ (800502c <HAL_DMA_Abort+0x458>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d031      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a26      	ldr	r2, [pc, #152]	@ (8005030 <HAL_DMA_Abort+0x45c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d02c      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a24      	ldr	r2, [pc, #144]	@ (8005034 <HAL_DMA_Abort+0x460>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d027      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a23      	ldr	r2, [pc, #140]	@ (8005038 <HAL_DMA_Abort+0x464>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d022      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a21      	ldr	r2, [pc, #132]	@ (800503c <HAL_DMA_Abort+0x468>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01d      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a20      	ldr	r2, [pc, #128]	@ (8005040 <HAL_DMA_Abort+0x46c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d018      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8005044 <HAL_DMA_Abort+0x470>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8005048 <HAL_DMA_Abort+0x474>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800504c <HAL_DMA_Abort+0x478>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8005050 <HAL_DMA_Abort+0x47c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_DMA_Abort+0x422>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	@ (8005054 <HAL_DMA_Abort+0x480>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d101      	bne.n	8004ffa <HAL_DMA_Abort+0x426>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_DMA_Abort+0x428>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d02b      	beq.n	8005058 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005004:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	223f      	movs	r2, #63	@ 0x3f
 8005010:	409a      	lsls	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	609a      	str	r2, [r3, #8]
 8005016:	e02a      	b.n	800506e <HAL_DMA_Abort+0x49a>
 8005018:	40020010 	.word	0x40020010
 800501c:	40020028 	.word	0x40020028
 8005020:	40020040 	.word	0x40020040
 8005024:	40020058 	.word	0x40020058
 8005028:	40020070 	.word	0x40020070
 800502c:	40020088 	.word	0x40020088
 8005030:	400200a0 	.word	0x400200a0
 8005034:	400200b8 	.word	0x400200b8
 8005038:	40020410 	.word	0x40020410
 800503c:	40020428 	.word	0x40020428
 8005040:	40020440 	.word	0x40020440
 8005044:	40020458 	.word	0x40020458
 8005048:	40020470 	.word	0x40020470
 800504c:	40020488 	.word	0x40020488
 8005050:	400204a0 	.word	0x400204a0
 8005054:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2201      	movs	r2, #1
 8005068:	409a      	lsls	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a4f      	ldr	r2, [pc, #316]	@ (80051b0 <HAL_DMA_Abort+0x5dc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d072      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a4d      	ldr	r2, [pc, #308]	@ (80051b4 <HAL_DMA_Abort+0x5e0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d06d      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a4c      	ldr	r2, [pc, #304]	@ (80051b8 <HAL_DMA_Abort+0x5e4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d068      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a4a      	ldr	r2, [pc, #296]	@ (80051bc <HAL_DMA_Abort+0x5e8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d063      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a49      	ldr	r2, [pc, #292]	@ (80051c0 <HAL_DMA_Abort+0x5ec>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d05e      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a47      	ldr	r2, [pc, #284]	@ (80051c4 <HAL_DMA_Abort+0x5f0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d059      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a46      	ldr	r2, [pc, #280]	@ (80051c8 <HAL_DMA_Abort+0x5f4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d054      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a44      	ldr	r2, [pc, #272]	@ (80051cc <HAL_DMA_Abort+0x5f8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d04f      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a43      	ldr	r2, [pc, #268]	@ (80051d0 <HAL_DMA_Abort+0x5fc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d04a      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a41      	ldr	r2, [pc, #260]	@ (80051d4 <HAL_DMA_Abort+0x600>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d045      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a40      	ldr	r2, [pc, #256]	@ (80051d8 <HAL_DMA_Abort+0x604>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d040      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a3e      	ldr	r2, [pc, #248]	@ (80051dc <HAL_DMA_Abort+0x608>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d03b      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a3d      	ldr	r2, [pc, #244]	@ (80051e0 <HAL_DMA_Abort+0x60c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d036      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3b      	ldr	r2, [pc, #236]	@ (80051e4 <HAL_DMA_Abort+0x610>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a3a      	ldr	r2, [pc, #232]	@ (80051e8 <HAL_DMA_Abort+0x614>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d02c      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a38      	ldr	r2, [pc, #224]	@ (80051ec <HAL_DMA_Abort+0x618>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d027      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a37      	ldr	r2, [pc, #220]	@ (80051f0 <HAL_DMA_Abort+0x61c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a35      	ldr	r2, [pc, #212]	@ (80051f4 <HAL_DMA_Abort+0x620>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a34      	ldr	r2, [pc, #208]	@ (80051f8 <HAL_DMA_Abort+0x624>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a32      	ldr	r2, [pc, #200]	@ (80051fc <HAL_DMA_Abort+0x628>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a31      	ldr	r2, [pc, #196]	@ (8005200 <HAL_DMA_Abort+0x62c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2f      	ldr	r2, [pc, #188]	@ (8005204 <HAL_DMA_Abort+0x630>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2e      	ldr	r2, [pc, #184]	@ (8005208 <HAL_DMA_Abort+0x634>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_DMA_Abort+0x58a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2c      	ldr	r2, [pc, #176]	@ (800520c <HAL_DMA_Abort+0x638>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d101      	bne.n	8005162 <HAL_DMA_Abort+0x58e>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_DMA_Abort+0x590>
 8005162:	2300      	movs	r3, #0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d015      	beq.n	8005194 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005170:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00c      	beq.n	8005194 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005188:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005192:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40020010 	.word	0x40020010
 80051b4:	40020028 	.word	0x40020028
 80051b8:	40020040 	.word	0x40020040
 80051bc:	40020058 	.word	0x40020058
 80051c0:	40020070 	.word	0x40020070
 80051c4:	40020088 	.word	0x40020088
 80051c8:	400200a0 	.word	0x400200a0
 80051cc:	400200b8 	.word	0x400200b8
 80051d0:	40020410 	.word	0x40020410
 80051d4:	40020428 	.word	0x40020428
 80051d8:	40020440 	.word	0x40020440
 80051dc:	40020458 	.word	0x40020458
 80051e0:	40020470 	.word	0x40020470
 80051e4:	40020488 	.word	0x40020488
 80051e8:	400204a0 	.word	0x400204a0
 80051ec:	400204b8 	.word	0x400204b8
 80051f0:	58025408 	.word	0x58025408
 80051f4:	5802541c 	.word	0x5802541c
 80051f8:	58025430 	.word	0x58025430
 80051fc:	58025444 	.word	0x58025444
 8005200:	58025458 	.word	0x58025458
 8005204:	5802546c 	.word	0x5802546c
 8005208:	58025480 	.word	0x58025480
 800520c:	58025494 	.word	0x58025494

08005210 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e237      	b.n	8005692 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d004      	beq.n	8005238 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2280      	movs	r2, #128	@ 0x80
 8005232:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e22c      	b.n	8005692 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a5c      	ldr	r2, [pc, #368]	@ (80053b0 <HAL_DMA_Abort_IT+0x1a0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d04a      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a5b      	ldr	r2, [pc, #364]	@ (80053b4 <HAL_DMA_Abort_IT+0x1a4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d045      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a59      	ldr	r2, [pc, #356]	@ (80053b8 <HAL_DMA_Abort_IT+0x1a8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d040      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a58      	ldr	r2, [pc, #352]	@ (80053bc <HAL_DMA_Abort_IT+0x1ac>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d03b      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a56      	ldr	r2, [pc, #344]	@ (80053c0 <HAL_DMA_Abort_IT+0x1b0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d036      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a55      	ldr	r2, [pc, #340]	@ (80053c4 <HAL_DMA_Abort_IT+0x1b4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d031      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a53      	ldr	r2, [pc, #332]	@ (80053c8 <HAL_DMA_Abort_IT+0x1b8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d02c      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a52      	ldr	r2, [pc, #328]	@ (80053cc <HAL_DMA_Abort_IT+0x1bc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d027      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a50      	ldr	r2, [pc, #320]	@ (80053d0 <HAL_DMA_Abort_IT+0x1c0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d022      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a4f      	ldr	r2, [pc, #316]	@ (80053d4 <HAL_DMA_Abort_IT+0x1c4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d01d      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a4d      	ldr	r2, [pc, #308]	@ (80053d8 <HAL_DMA_Abort_IT+0x1c8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d018      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a4c      	ldr	r2, [pc, #304]	@ (80053dc <HAL_DMA_Abort_IT+0x1cc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d013      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a4a      	ldr	r2, [pc, #296]	@ (80053e0 <HAL_DMA_Abort_IT+0x1d0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00e      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a49      	ldr	r2, [pc, #292]	@ (80053e4 <HAL_DMA_Abort_IT+0x1d4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d009      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a47      	ldr	r2, [pc, #284]	@ (80053e8 <HAL_DMA_Abort_IT+0x1d8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <HAL_DMA_Abort_IT+0xc8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a46      	ldr	r2, [pc, #280]	@ (80053ec <HAL_DMA_Abort_IT+0x1dc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d101      	bne.n	80052dc <HAL_DMA_Abort_IT+0xcc>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <HAL_DMA_Abort_IT+0xce>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8086 	beq.w	80053f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2204      	movs	r2, #4
 80052e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a2f      	ldr	r2, [pc, #188]	@ (80053b0 <HAL_DMA_Abort_IT+0x1a0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d04a      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a2e      	ldr	r2, [pc, #184]	@ (80053b4 <HAL_DMA_Abort_IT+0x1a4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d045      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2c      	ldr	r2, [pc, #176]	@ (80053b8 <HAL_DMA_Abort_IT+0x1a8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d040      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2b      	ldr	r2, [pc, #172]	@ (80053bc <HAL_DMA_Abort_IT+0x1ac>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d03b      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a29      	ldr	r2, [pc, #164]	@ (80053c0 <HAL_DMA_Abort_IT+0x1b0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d036      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a28      	ldr	r2, [pc, #160]	@ (80053c4 <HAL_DMA_Abort_IT+0x1b4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d031      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a26      	ldr	r2, [pc, #152]	@ (80053c8 <HAL_DMA_Abort_IT+0x1b8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d02c      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a25      	ldr	r2, [pc, #148]	@ (80053cc <HAL_DMA_Abort_IT+0x1bc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d027      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a23      	ldr	r2, [pc, #140]	@ (80053d0 <HAL_DMA_Abort_IT+0x1c0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d022      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a22      	ldr	r2, [pc, #136]	@ (80053d4 <HAL_DMA_Abort_IT+0x1c4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d01d      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a20      	ldr	r2, [pc, #128]	@ (80053d8 <HAL_DMA_Abort_IT+0x1c8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d018      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1f      	ldr	r2, [pc, #124]	@ (80053dc <HAL_DMA_Abort_IT+0x1cc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1d      	ldr	r2, [pc, #116]	@ (80053e0 <HAL_DMA_Abort_IT+0x1d0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00e      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1c      	ldr	r2, [pc, #112]	@ (80053e4 <HAL_DMA_Abort_IT+0x1d4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d009      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1a      	ldr	r2, [pc, #104]	@ (80053e8 <HAL_DMA_Abort_IT+0x1d8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_DMA_Abort_IT+0x17c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a19      	ldr	r2, [pc, #100]	@ (80053ec <HAL_DMA_Abort_IT+0x1dc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d108      	bne.n	800539e <HAL_DMA_Abort_IT+0x18e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e178      	b.n	8005690 <HAL_DMA_Abort_IT+0x480>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	e16f      	b.n	8005690 <HAL_DMA_Abort_IT+0x480>
 80053b0:	40020010 	.word	0x40020010
 80053b4:	40020028 	.word	0x40020028
 80053b8:	40020040 	.word	0x40020040
 80053bc:	40020058 	.word	0x40020058
 80053c0:	40020070 	.word	0x40020070
 80053c4:	40020088 	.word	0x40020088
 80053c8:	400200a0 	.word	0x400200a0
 80053cc:	400200b8 	.word	0x400200b8
 80053d0:	40020410 	.word	0x40020410
 80053d4:	40020428 	.word	0x40020428
 80053d8:	40020440 	.word	0x40020440
 80053dc:	40020458 	.word	0x40020458
 80053e0:	40020470 	.word	0x40020470
 80053e4:	40020488 	.word	0x40020488
 80053e8:	400204a0 	.word	0x400204a0
 80053ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 020e 	bic.w	r2, r2, #14
 80053fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a6c      	ldr	r2, [pc, #432]	@ (80055b8 <HAL_DMA_Abort_IT+0x3a8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d04a      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a6b      	ldr	r2, [pc, #428]	@ (80055bc <HAL_DMA_Abort_IT+0x3ac>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d045      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a69      	ldr	r2, [pc, #420]	@ (80055c0 <HAL_DMA_Abort_IT+0x3b0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d040      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a68      	ldr	r2, [pc, #416]	@ (80055c4 <HAL_DMA_Abort_IT+0x3b4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d03b      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a66      	ldr	r2, [pc, #408]	@ (80055c8 <HAL_DMA_Abort_IT+0x3b8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d036      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a65      	ldr	r2, [pc, #404]	@ (80055cc <HAL_DMA_Abort_IT+0x3bc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d031      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a63      	ldr	r2, [pc, #396]	@ (80055d0 <HAL_DMA_Abort_IT+0x3c0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d02c      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a62      	ldr	r2, [pc, #392]	@ (80055d4 <HAL_DMA_Abort_IT+0x3c4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d027      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a60      	ldr	r2, [pc, #384]	@ (80055d8 <HAL_DMA_Abort_IT+0x3c8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d022      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a5f      	ldr	r2, [pc, #380]	@ (80055dc <HAL_DMA_Abort_IT+0x3cc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d01d      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5d      	ldr	r2, [pc, #372]	@ (80055e0 <HAL_DMA_Abort_IT+0x3d0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d018      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a5c      	ldr	r2, [pc, #368]	@ (80055e4 <HAL_DMA_Abort_IT+0x3d4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d013      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a5a      	ldr	r2, [pc, #360]	@ (80055e8 <HAL_DMA_Abort_IT+0x3d8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00e      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a59      	ldr	r2, [pc, #356]	@ (80055ec <HAL_DMA_Abort_IT+0x3dc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d009      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a57      	ldr	r2, [pc, #348]	@ (80055f0 <HAL_DMA_Abort_IT+0x3e0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d004      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x290>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a56      	ldr	r2, [pc, #344]	@ (80055f4 <HAL_DMA_Abort_IT+0x3e4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d108      	bne.n	80054b2 <HAL_DMA_Abort_IT+0x2a2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0201 	bic.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e007      	b.n	80054c2 <HAL_DMA_Abort_IT+0x2b2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0201 	bic.w	r2, r2, #1
 80054c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a3c      	ldr	r2, [pc, #240]	@ (80055b8 <HAL_DMA_Abort_IT+0x3a8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d072      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a3a      	ldr	r2, [pc, #232]	@ (80055bc <HAL_DMA_Abort_IT+0x3ac>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d06d      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a39      	ldr	r2, [pc, #228]	@ (80055c0 <HAL_DMA_Abort_IT+0x3b0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d068      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a37      	ldr	r2, [pc, #220]	@ (80055c4 <HAL_DMA_Abort_IT+0x3b4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d063      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a36      	ldr	r2, [pc, #216]	@ (80055c8 <HAL_DMA_Abort_IT+0x3b8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d05e      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a34      	ldr	r2, [pc, #208]	@ (80055cc <HAL_DMA_Abort_IT+0x3bc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d059      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a33      	ldr	r2, [pc, #204]	@ (80055d0 <HAL_DMA_Abort_IT+0x3c0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d054      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a31      	ldr	r2, [pc, #196]	@ (80055d4 <HAL_DMA_Abort_IT+0x3c4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d04f      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a30      	ldr	r2, [pc, #192]	@ (80055d8 <HAL_DMA_Abort_IT+0x3c8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d04a      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2e      	ldr	r2, [pc, #184]	@ (80055dc <HAL_DMA_Abort_IT+0x3cc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d045      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2d      	ldr	r2, [pc, #180]	@ (80055e0 <HAL_DMA_Abort_IT+0x3d0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d040      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a2b      	ldr	r2, [pc, #172]	@ (80055e4 <HAL_DMA_Abort_IT+0x3d4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d03b      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2a      	ldr	r2, [pc, #168]	@ (80055e8 <HAL_DMA_Abort_IT+0x3d8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d036      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a28      	ldr	r2, [pc, #160]	@ (80055ec <HAL_DMA_Abort_IT+0x3dc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d031      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a27      	ldr	r2, [pc, #156]	@ (80055f0 <HAL_DMA_Abort_IT+0x3e0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d02c      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a25      	ldr	r2, [pc, #148]	@ (80055f4 <HAL_DMA_Abort_IT+0x3e4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d027      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a24      	ldr	r2, [pc, #144]	@ (80055f8 <HAL_DMA_Abort_IT+0x3e8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d022      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <HAL_DMA_Abort_IT+0x3ec>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01d      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a21      	ldr	r2, [pc, #132]	@ (8005600 <HAL_DMA_Abort_IT+0x3f0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d018      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1f      	ldr	r2, [pc, #124]	@ (8005604 <HAL_DMA_Abort_IT+0x3f4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1e      	ldr	r2, [pc, #120]	@ (8005608 <HAL_DMA_Abort_IT+0x3f8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1c      	ldr	r2, [pc, #112]	@ (800560c <HAL_DMA_Abort_IT+0x3fc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005610 <HAL_DMA_Abort_IT+0x400>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x3a2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a19      	ldr	r2, [pc, #100]	@ (8005614 <HAL_DMA_Abort_IT+0x404>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d132      	bne.n	8005618 <HAL_DMA_Abort_IT+0x408>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e031      	b.n	800561a <HAL_DMA_Abort_IT+0x40a>
 80055b6:	bf00      	nop
 80055b8:	40020010 	.word	0x40020010
 80055bc:	40020028 	.word	0x40020028
 80055c0:	40020040 	.word	0x40020040
 80055c4:	40020058 	.word	0x40020058
 80055c8:	40020070 	.word	0x40020070
 80055cc:	40020088 	.word	0x40020088
 80055d0:	400200a0 	.word	0x400200a0
 80055d4:	400200b8 	.word	0x400200b8
 80055d8:	40020410 	.word	0x40020410
 80055dc:	40020428 	.word	0x40020428
 80055e0:	40020440 	.word	0x40020440
 80055e4:	40020458 	.word	0x40020458
 80055e8:	40020470 	.word	0x40020470
 80055ec:	40020488 	.word	0x40020488
 80055f0:	400204a0 	.word	0x400204a0
 80055f4:	400204b8 	.word	0x400204b8
 80055f8:	58025408 	.word	0x58025408
 80055fc:	5802541c 	.word	0x5802541c
 8005600:	58025430 	.word	0x58025430
 8005604:	58025444 	.word	0x58025444
 8005608:	58025458 	.word	0x58025458
 800560c:	5802546c 	.word	0x5802546c
 8005610:	58025480 	.word	0x58025480
 8005614:	58025494 	.word	0x58025494
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d028      	beq.n	8005670 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005628:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800562c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005632:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	2201      	movs	r2, #1
 800563e:	409a      	lsls	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800564c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005660:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005664:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800566e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop

0800569c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	@ 0x28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056a8:	4b67      	ldr	r3, [pc, #412]	@ (8005848 <HAL_DMA_IRQHandler+0x1ac>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a67      	ldr	r2, [pc, #412]	@ (800584c <HAL_DMA_IRQHandler+0x1b0>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0a9b      	lsrs	r3, r3, #10
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a5f      	ldr	r2, [pc, #380]	@ (8005850 <HAL_DMA_IRQHandler+0x1b4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d04a      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005854 <HAL_DMA_IRQHandler+0x1b8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d045      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a5c      	ldr	r2, [pc, #368]	@ (8005858 <HAL_DMA_IRQHandler+0x1bc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d040      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a5a      	ldr	r2, [pc, #360]	@ (800585c <HAL_DMA_IRQHandler+0x1c0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d03b      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a59      	ldr	r2, [pc, #356]	@ (8005860 <HAL_DMA_IRQHandler+0x1c4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d036      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a57      	ldr	r2, [pc, #348]	@ (8005864 <HAL_DMA_IRQHandler+0x1c8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d031      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a56      	ldr	r2, [pc, #344]	@ (8005868 <HAL_DMA_IRQHandler+0x1cc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d02c      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a54      	ldr	r2, [pc, #336]	@ (800586c <HAL_DMA_IRQHandler+0x1d0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d027      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a53      	ldr	r2, [pc, #332]	@ (8005870 <HAL_DMA_IRQHandler+0x1d4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d022      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a51      	ldr	r2, [pc, #324]	@ (8005874 <HAL_DMA_IRQHandler+0x1d8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01d      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a50      	ldr	r2, [pc, #320]	@ (8005878 <HAL_DMA_IRQHandler+0x1dc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d018      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a4e      	ldr	r2, [pc, #312]	@ (800587c <HAL_DMA_IRQHandler+0x1e0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a4d      	ldr	r2, [pc, #308]	@ (8005880 <HAL_DMA_IRQHandler+0x1e4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00e      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a4b      	ldr	r2, [pc, #300]	@ (8005884 <HAL_DMA_IRQHandler+0x1e8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a4a      	ldr	r2, [pc, #296]	@ (8005888 <HAL_DMA_IRQHandler+0x1ec>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a48      	ldr	r2, [pc, #288]	@ (800588c <HAL_DMA_IRQHandler+0x1f0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d101      	bne.n	8005772 <HAL_DMA_IRQHandler+0xd6>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <HAL_DMA_IRQHandler+0xd8>
 8005772:	2300      	movs	r3, #0
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 842b 	beq.w	8005fd0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2208      	movs	r2, #8
 8005784:	409a      	lsls	r2, r3
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80a2 	beq.w	80058d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a2e      	ldr	r2, [pc, #184]	@ (8005850 <HAL_DMA_IRQHandler+0x1b4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d04a      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2d      	ldr	r2, [pc, #180]	@ (8005854 <HAL_DMA_IRQHandler+0x1b8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d045      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005858 <HAL_DMA_IRQHandler+0x1bc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d040      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2a      	ldr	r2, [pc, #168]	@ (800585c <HAL_DMA_IRQHandler+0x1c0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d03b      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a28      	ldr	r2, [pc, #160]	@ (8005860 <HAL_DMA_IRQHandler+0x1c4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d036      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a27      	ldr	r2, [pc, #156]	@ (8005864 <HAL_DMA_IRQHandler+0x1c8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d031      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a25      	ldr	r2, [pc, #148]	@ (8005868 <HAL_DMA_IRQHandler+0x1cc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d02c      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a24      	ldr	r2, [pc, #144]	@ (800586c <HAL_DMA_IRQHandler+0x1d0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d027      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a22      	ldr	r2, [pc, #136]	@ (8005870 <HAL_DMA_IRQHandler+0x1d4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d022      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a21      	ldr	r2, [pc, #132]	@ (8005874 <HAL_DMA_IRQHandler+0x1d8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d01d      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005878 <HAL_DMA_IRQHandler+0x1dc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d018      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1e      	ldr	r2, [pc, #120]	@ (800587c <HAL_DMA_IRQHandler+0x1e0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d013      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1c      	ldr	r2, [pc, #112]	@ (8005880 <HAL_DMA_IRQHandler+0x1e4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00e      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1b      	ldr	r2, [pc, #108]	@ (8005884 <HAL_DMA_IRQHandler+0x1e8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d009      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a19      	ldr	r2, [pc, #100]	@ (8005888 <HAL_DMA_IRQHandler+0x1ec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a18      	ldr	r2, [pc, #96]	@ (800588c <HAL_DMA_IRQHandler+0x1f0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d12f      	bne.n	8005890 <HAL_DMA_IRQHandler+0x1f4>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf14      	ite	ne
 800583e:	2301      	movne	r3, #1
 8005840:	2300      	moveq	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	e02e      	b.n	80058a4 <HAL_DMA_IRQHandler+0x208>
 8005846:	bf00      	nop
 8005848:	24000004 	.word	0x24000004
 800584c:	1b4e81b5 	.word	0x1b4e81b5
 8005850:	40020010 	.word	0x40020010
 8005854:	40020028 	.word	0x40020028
 8005858:	40020040 	.word	0x40020040
 800585c:	40020058 	.word	0x40020058
 8005860:	40020070 	.word	0x40020070
 8005864:	40020088 	.word	0x40020088
 8005868:	400200a0 	.word	0x400200a0
 800586c:	400200b8 	.word	0x400200b8
 8005870:	40020410 	.word	0x40020410
 8005874:	40020428 	.word	0x40020428
 8005878:	40020440 	.word	0x40020440
 800587c:	40020458 	.word	0x40020458
 8005880:	40020470 	.word	0x40020470
 8005884:	40020488 	.word	0x40020488
 8005888:	400204a0 	.word	0x400204a0
 800588c:	400204b8 	.word	0x400204b8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d015      	beq.n	80058d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0204 	bic.w	r2, r2, #4
 80058b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2208      	movs	r2, #8
 80058c2:	409a      	lsls	r2, r3
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058cc:	f043 0201 	orr.w	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	fa22 f303 	lsr.w	r3, r2, r3
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d06e      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a69      	ldr	r2, [pc, #420]	@ (8005a94 <HAL_DMA_IRQHandler+0x3f8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d04a      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a67      	ldr	r2, [pc, #412]	@ (8005a98 <HAL_DMA_IRQHandler+0x3fc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d045      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a66      	ldr	r2, [pc, #408]	@ (8005a9c <HAL_DMA_IRQHandler+0x400>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d040      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a64      	ldr	r2, [pc, #400]	@ (8005aa0 <HAL_DMA_IRQHandler+0x404>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d03b      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a63      	ldr	r2, [pc, #396]	@ (8005aa4 <HAL_DMA_IRQHandler+0x408>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d036      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a61      	ldr	r2, [pc, #388]	@ (8005aa8 <HAL_DMA_IRQHandler+0x40c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d031      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a60      	ldr	r2, [pc, #384]	@ (8005aac <HAL_DMA_IRQHandler+0x410>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d02c      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a5e      	ldr	r2, [pc, #376]	@ (8005ab0 <HAL_DMA_IRQHandler+0x414>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d027      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a5d      	ldr	r2, [pc, #372]	@ (8005ab4 <HAL_DMA_IRQHandler+0x418>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d022      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a5b      	ldr	r2, [pc, #364]	@ (8005ab8 <HAL_DMA_IRQHandler+0x41c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01d      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a5a      	ldr	r2, [pc, #360]	@ (8005abc <HAL_DMA_IRQHandler+0x420>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d018      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a58      	ldr	r2, [pc, #352]	@ (8005ac0 <HAL_DMA_IRQHandler+0x424>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a57      	ldr	r2, [pc, #348]	@ (8005ac4 <HAL_DMA_IRQHandler+0x428>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00e      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a55      	ldr	r2, [pc, #340]	@ (8005ac8 <HAL_DMA_IRQHandler+0x42c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d009      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a54      	ldr	r2, [pc, #336]	@ (8005acc <HAL_DMA_IRQHandler+0x430>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a52      	ldr	r2, [pc, #328]	@ (8005ad0 <HAL_DMA_IRQHandler+0x434>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d10a      	bne.n	80059a0 <HAL_DMA_IRQHandler+0x304>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005994:	2b00      	cmp	r3, #0
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e003      	b.n	80059a8 <HAL_DMA_IRQHandler+0x30c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2300      	movs	r3, #0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00d      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2201      	movs	r2, #1
 80059b6:	409a      	lsls	r2, r3
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c0:	f043 0202 	orr.w	r2, r3, #2
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	2204      	movs	r2, #4
 80059d2:	409a      	lsls	r2, r3
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 808f 	beq.w	8005afc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a94 <HAL_DMA_IRQHandler+0x3f8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d04a      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005a98 <HAL_DMA_IRQHandler+0x3fc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d045      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a29      	ldr	r2, [pc, #164]	@ (8005a9c <HAL_DMA_IRQHandler+0x400>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d040      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a27      	ldr	r2, [pc, #156]	@ (8005aa0 <HAL_DMA_IRQHandler+0x404>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d03b      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a26      	ldr	r2, [pc, #152]	@ (8005aa4 <HAL_DMA_IRQHandler+0x408>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d036      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a24      	ldr	r2, [pc, #144]	@ (8005aa8 <HAL_DMA_IRQHandler+0x40c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d031      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a23      	ldr	r2, [pc, #140]	@ (8005aac <HAL_DMA_IRQHandler+0x410>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d02c      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a21      	ldr	r2, [pc, #132]	@ (8005ab0 <HAL_DMA_IRQHandler+0x414>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d027      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a20      	ldr	r2, [pc, #128]	@ (8005ab4 <HAL_DMA_IRQHandler+0x418>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d022      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab8 <HAL_DMA_IRQHandler+0x41c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01d      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1d      	ldr	r2, [pc, #116]	@ (8005abc <HAL_DMA_IRQHandler+0x420>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac0 <HAL_DMA_IRQHandler+0x424>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ac4 <HAL_DMA_IRQHandler+0x428>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a18      	ldr	r2, [pc, #96]	@ (8005ac8 <HAL_DMA_IRQHandler+0x42c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	@ (8005acc <HAL_DMA_IRQHandler+0x430>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a15      	ldr	r2, [pc, #84]	@ (8005ad0 <HAL_DMA_IRQHandler+0x434>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d12a      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0x438>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e023      	b.n	8005adc <HAL_DMA_IRQHandler+0x440>
 8005a94:	40020010 	.word	0x40020010
 8005a98:	40020028 	.word	0x40020028
 8005a9c:	40020040 	.word	0x40020040
 8005aa0:	40020058 	.word	0x40020058
 8005aa4:	40020070 	.word	0x40020070
 8005aa8:	40020088 	.word	0x40020088
 8005aac:	400200a0 	.word	0x400200a0
 8005ab0:	400200b8 	.word	0x400200b8
 8005ab4:	40020410 	.word	0x40020410
 8005ab8:	40020428 	.word	0x40020428
 8005abc:	40020440 	.word	0x40020440
 8005ac0:	40020458 	.word	0x40020458
 8005ac4:	40020470 	.word	0x40020470
 8005ac8:	40020488 	.word	0x40020488
 8005acc:	400204a0 	.word	0x400204a0
 8005ad0:	400204b8 	.word	0x400204b8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00d      	beq.n	8005afc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	2204      	movs	r2, #4
 8005aea:	409a      	lsls	r2, r3
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af4:	f043 0204 	orr.w	r2, r3, #4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	2210      	movs	r2, #16
 8005b06:	409a      	lsls	r2, r3
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80a6 	beq.w	8005c5e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a85      	ldr	r2, [pc, #532]	@ (8005d2c <HAL_DMA_IRQHandler+0x690>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d04a      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a83      	ldr	r2, [pc, #524]	@ (8005d30 <HAL_DMA_IRQHandler+0x694>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d045      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a82      	ldr	r2, [pc, #520]	@ (8005d34 <HAL_DMA_IRQHandler+0x698>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d040      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a80      	ldr	r2, [pc, #512]	@ (8005d38 <HAL_DMA_IRQHandler+0x69c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d03b      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a7f      	ldr	r2, [pc, #508]	@ (8005d3c <HAL_DMA_IRQHandler+0x6a0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d036      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a7d      	ldr	r2, [pc, #500]	@ (8005d40 <HAL_DMA_IRQHandler+0x6a4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d031      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a7c      	ldr	r2, [pc, #496]	@ (8005d44 <HAL_DMA_IRQHandler+0x6a8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d02c      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a7a      	ldr	r2, [pc, #488]	@ (8005d48 <HAL_DMA_IRQHandler+0x6ac>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d027      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a79      	ldr	r2, [pc, #484]	@ (8005d4c <HAL_DMA_IRQHandler+0x6b0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d022      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a77      	ldr	r2, [pc, #476]	@ (8005d50 <HAL_DMA_IRQHandler+0x6b4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01d      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a76      	ldr	r2, [pc, #472]	@ (8005d54 <HAL_DMA_IRQHandler+0x6b8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d018      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a74      	ldr	r2, [pc, #464]	@ (8005d58 <HAL_DMA_IRQHandler+0x6bc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a73      	ldr	r2, [pc, #460]	@ (8005d5c <HAL_DMA_IRQHandler+0x6c0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00e      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a71      	ldr	r2, [pc, #452]	@ (8005d60 <HAL_DMA_IRQHandler+0x6c4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d009      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a70      	ldr	r2, [pc, #448]	@ (8005d64 <HAL_DMA_IRQHandler+0x6c8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d004      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6e      	ldr	r2, [pc, #440]	@ (8005d68 <HAL_DMA_IRQHandler+0x6cc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10a      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0x52c>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e009      	b.n	8005bdc <HAL_DMA_IRQHandler+0x540>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bf14      	ite	ne
 8005bd6:	2301      	movne	r3, #1
 8005bd8:	2300      	moveq	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d03e      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2210      	movs	r2, #16
 8005bea:	409a      	lsls	r2, r3
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d018      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d108      	bne.n	8005c1e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d024      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
 8005c1c:	e01f      	b.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01b      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
 8005c2e:	e016      	b.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0208 	bic.w	r2, r2, #8
 8005c4c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c62:	f003 031f 	and.w	r3, r3, #31
 8005c66:	2220      	movs	r2, #32
 8005c68:	409a      	lsls	r2, r3
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8110 	beq.w	8005e94 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2c      	ldr	r2, [pc, #176]	@ (8005d2c <HAL_DMA_IRQHandler+0x690>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d04a      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2b      	ldr	r2, [pc, #172]	@ (8005d30 <HAL_DMA_IRQHandler+0x694>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d045      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a29      	ldr	r2, [pc, #164]	@ (8005d34 <HAL_DMA_IRQHandler+0x698>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d040      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a28      	ldr	r2, [pc, #160]	@ (8005d38 <HAL_DMA_IRQHandler+0x69c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d03b      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a26      	ldr	r2, [pc, #152]	@ (8005d3c <HAL_DMA_IRQHandler+0x6a0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d036      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a25      	ldr	r2, [pc, #148]	@ (8005d40 <HAL_DMA_IRQHandler+0x6a4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d031      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a23      	ldr	r2, [pc, #140]	@ (8005d44 <HAL_DMA_IRQHandler+0x6a8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d02c      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a22      	ldr	r2, [pc, #136]	@ (8005d48 <HAL_DMA_IRQHandler+0x6ac>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d027      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a20      	ldr	r2, [pc, #128]	@ (8005d4c <HAL_DMA_IRQHandler+0x6b0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d022      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005d50 <HAL_DMA_IRQHandler+0x6b4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d01d      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d54 <HAL_DMA_IRQHandler+0x6b8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d018      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d58 <HAL_DMA_IRQHandler+0x6bc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d5c <HAL_DMA_IRQHandler+0x6c0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00e      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a19      	ldr	r2, [pc, #100]	@ (8005d60 <HAL_DMA_IRQHandler+0x6c4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d009      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a17      	ldr	r2, [pc, #92]	@ (8005d64 <HAL_DMA_IRQHandler+0x6c8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a16      	ldr	r2, [pc, #88]	@ (8005d68 <HAL_DMA_IRQHandler+0x6cc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d12b      	bne.n	8005d6c <HAL_DMA_IRQHandler+0x6d0>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf14      	ite	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	2300      	moveq	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	e02a      	b.n	8005d80 <HAL_DMA_IRQHandler+0x6e4>
 8005d2a:	bf00      	nop
 8005d2c:	40020010 	.word	0x40020010
 8005d30:	40020028 	.word	0x40020028
 8005d34:	40020040 	.word	0x40020040
 8005d38:	40020058 	.word	0x40020058
 8005d3c:	40020070 	.word	0x40020070
 8005d40:	40020088 	.word	0x40020088
 8005d44:	400200a0 	.word	0x400200a0
 8005d48:	400200b8 	.word	0x400200b8
 8005d4c:	40020410 	.word	0x40020410
 8005d50:	40020428 	.word	0x40020428
 8005d54:	40020440 	.word	0x40020440
 8005d58:	40020458 	.word	0x40020458
 8005d5c:	40020470 	.word	0x40020470
 8005d60:	40020488 	.word	0x40020488
 8005d64:	400204a0 	.word	0x400204a0
 8005d68:	400204b8 	.word	0x400204b8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bf14      	ite	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	2300      	moveq	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8087 	beq.w	8005e94 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2220      	movs	r2, #32
 8005d90:	409a      	lsls	r2, r3
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d139      	bne.n	8005e16 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0216 	bic.w	r2, r2, #22
 8005db0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695a      	ldr	r2, [r3, #20]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d103      	bne.n	8005dd2 <HAL_DMA_IRQHandler+0x736>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0208 	bic.w	r2, r2, #8
 8005de0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	223f      	movs	r2, #63	@ 0x3f
 8005dec:	409a      	lsls	r2, r3
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 834a 	beq.w	80064a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
          }
          return;
 8005e14:	e344      	b.n	80064a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d018      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d108      	bne.n	8005e44 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d02c      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
 8005e42:	e027      	b.n	8005e94 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d023      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
 8005e54:	e01e      	b.n	8005e94 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10f      	bne.n	8005e84 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0210 	bic.w	r2, r2, #16
 8005e72:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8306 	beq.w	80064aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8088 	beq.w	8005fbc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2204      	movs	r2, #4
 8005eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a7a      	ldr	r2, [pc, #488]	@ (80060a4 <HAL_DMA_IRQHandler+0xa08>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d04a      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a79      	ldr	r2, [pc, #484]	@ (80060a8 <HAL_DMA_IRQHandler+0xa0c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d045      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a77      	ldr	r2, [pc, #476]	@ (80060ac <HAL_DMA_IRQHandler+0xa10>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d040      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a76      	ldr	r2, [pc, #472]	@ (80060b0 <HAL_DMA_IRQHandler+0xa14>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d03b      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a74      	ldr	r2, [pc, #464]	@ (80060b4 <HAL_DMA_IRQHandler+0xa18>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d036      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a73      	ldr	r2, [pc, #460]	@ (80060b8 <HAL_DMA_IRQHandler+0xa1c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d031      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a71      	ldr	r2, [pc, #452]	@ (80060bc <HAL_DMA_IRQHandler+0xa20>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d02c      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a70      	ldr	r2, [pc, #448]	@ (80060c0 <HAL_DMA_IRQHandler+0xa24>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d027      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a6e      	ldr	r2, [pc, #440]	@ (80060c4 <HAL_DMA_IRQHandler+0xa28>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d022      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6d      	ldr	r2, [pc, #436]	@ (80060c8 <HAL_DMA_IRQHandler+0xa2c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d01d      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80060cc <HAL_DMA_IRQHandler+0xa30>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d018      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6a      	ldr	r2, [pc, #424]	@ (80060d0 <HAL_DMA_IRQHandler+0xa34>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a68      	ldr	r2, [pc, #416]	@ (80060d4 <HAL_DMA_IRQHandler+0xa38>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00e      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a67      	ldr	r2, [pc, #412]	@ (80060d8 <HAL_DMA_IRQHandler+0xa3c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d009      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a65      	ldr	r2, [pc, #404]	@ (80060dc <HAL_DMA_IRQHandler+0xa40>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a64      	ldr	r2, [pc, #400]	@ (80060e0 <HAL_DMA_IRQHandler+0xa44>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d108      	bne.n	8005f66 <HAL_DMA_IRQHandler+0x8ca>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0201 	bic.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e007      	b.n	8005f76 <HAL_DMA_IRQHandler+0x8da>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d307      	bcc.n	8005f92 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f2      	bne.n	8005f76 <HAL_DMA_IRQHandler+0x8da>
 8005f90:	e000      	b.n	8005f94 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f92:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005faa:	e003      	b.n	8005fb4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8272 	beq.w	80064aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
 8005fce:	e26c      	b.n	80064aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a43      	ldr	r2, [pc, #268]	@ (80060e4 <HAL_DMA_IRQHandler+0xa48>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d022      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a42      	ldr	r2, [pc, #264]	@ (80060e8 <HAL_DMA_IRQHandler+0xa4c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d01d      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a40      	ldr	r2, [pc, #256]	@ (80060ec <HAL_DMA_IRQHandler+0xa50>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d018      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80060f0 <HAL_DMA_IRQHandler+0xa54>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a3d      	ldr	r2, [pc, #244]	@ (80060f4 <HAL_DMA_IRQHandler+0xa58>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00e      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a3c      	ldr	r2, [pc, #240]	@ (80060f8 <HAL_DMA_IRQHandler+0xa5c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d009      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a3a      	ldr	r2, [pc, #232]	@ (80060fc <HAL_DMA_IRQHandler+0xa60>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a39      	ldr	r2, [pc, #228]	@ (8006100 <HAL_DMA_IRQHandler+0xa64>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d101      	bne.n	8006024 <HAL_DMA_IRQHandler+0x988>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_DMA_IRQHandler+0x98a>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 823f 	beq.w	80064aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2204      	movs	r2, #4
 800603e:	409a      	lsls	r2, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80cd 	beq.w	80061e4 <HAL_DMA_IRQHandler+0xb48>
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80c7 	beq.w	80061e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	2204      	movs	r2, #4
 8006060:	409a      	lsls	r2, r3
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d049      	beq.n	8006104 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8210 	beq.w	80064a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800608c:	e20a      	b.n	80064a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 8206 	beq.w	80064a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060a0:	e200      	b.n	80064a4 <HAL_DMA_IRQHandler+0xe08>
 80060a2:	bf00      	nop
 80060a4:	40020010 	.word	0x40020010
 80060a8:	40020028 	.word	0x40020028
 80060ac:	40020040 	.word	0x40020040
 80060b0:	40020058 	.word	0x40020058
 80060b4:	40020070 	.word	0x40020070
 80060b8:	40020088 	.word	0x40020088
 80060bc:	400200a0 	.word	0x400200a0
 80060c0:	400200b8 	.word	0x400200b8
 80060c4:	40020410 	.word	0x40020410
 80060c8:	40020428 	.word	0x40020428
 80060cc:	40020440 	.word	0x40020440
 80060d0:	40020458 	.word	0x40020458
 80060d4:	40020470 	.word	0x40020470
 80060d8:	40020488 	.word	0x40020488
 80060dc:	400204a0 	.word	0x400204a0
 80060e0:	400204b8 	.word	0x400204b8
 80060e4:	58025408 	.word	0x58025408
 80060e8:	5802541c 	.word	0x5802541c
 80060ec:	58025430 	.word	0x58025430
 80060f0:	58025444 	.word	0x58025444
 80060f4:	58025458 	.word	0x58025458
 80060f8:	5802546c 	.word	0x5802546c
 80060fc:	58025480 	.word	0x58025480
 8006100:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d160      	bne.n	80061d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a7f      	ldr	r2, [pc, #508]	@ (8006310 <HAL_DMA_IRQHandler+0xc74>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d04a      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a7d      	ldr	r2, [pc, #500]	@ (8006314 <HAL_DMA_IRQHandler+0xc78>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d045      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a7c      	ldr	r2, [pc, #496]	@ (8006318 <HAL_DMA_IRQHandler+0xc7c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d040      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a7a      	ldr	r2, [pc, #488]	@ (800631c <HAL_DMA_IRQHandler+0xc80>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d03b      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a79      	ldr	r2, [pc, #484]	@ (8006320 <HAL_DMA_IRQHandler+0xc84>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d036      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a77      	ldr	r2, [pc, #476]	@ (8006324 <HAL_DMA_IRQHandler+0xc88>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d031      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a76      	ldr	r2, [pc, #472]	@ (8006328 <HAL_DMA_IRQHandler+0xc8c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d02c      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a74      	ldr	r2, [pc, #464]	@ (800632c <HAL_DMA_IRQHandler+0xc90>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d027      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a73      	ldr	r2, [pc, #460]	@ (8006330 <HAL_DMA_IRQHandler+0xc94>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d022      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a71      	ldr	r2, [pc, #452]	@ (8006334 <HAL_DMA_IRQHandler+0xc98>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a70      	ldr	r2, [pc, #448]	@ (8006338 <HAL_DMA_IRQHandler+0xc9c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a6e      	ldr	r2, [pc, #440]	@ (800633c <HAL_DMA_IRQHandler+0xca0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a6d      	ldr	r2, [pc, #436]	@ (8006340 <HAL_DMA_IRQHandler+0xca4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a6b      	ldr	r2, [pc, #428]	@ (8006344 <HAL_DMA_IRQHandler+0xca8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a6a      	ldr	r2, [pc, #424]	@ (8006348 <HAL_DMA_IRQHandler+0xcac>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a68      	ldr	r2, [pc, #416]	@ (800634c <HAL_DMA_IRQHandler+0xcb0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d108      	bne.n	80061c0 <HAL_DMA_IRQHandler+0xb24>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0208 	bic.w	r2, r2, #8
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e007      	b.n	80061d0 <HAL_DMA_IRQHandler+0xb34>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0204 	bic.w	r2, r2, #4
 80061ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8165 	beq.w	80064a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e2:	e15f      	b.n	80064a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	2202      	movs	r2, #2
 80061ee:	409a      	lsls	r2, r3
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80c5 	beq.w	8006384 <HAL_DMA_IRQHandler+0xce8>
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80bf 	beq.w	8006384 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2202      	movs	r2, #2
 8006210:	409a      	lsls	r2, r3
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d018      	beq.n	8006252 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 813a 	beq.w	80064a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800623c:	e134      	b.n	80064a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8130 	beq.w	80064a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006250:	e12a      	b.n	80064a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	f040 8089 	bne.w	8006370 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2b      	ldr	r2, [pc, #172]	@ (8006310 <HAL_DMA_IRQHandler+0xc74>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d04a      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a29      	ldr	r2, [pc, #164]	@ (8006314 <HAL_DMA_IRQHandler+0xc78>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d045      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a28      	ldr	r2, [pc, #160]	@ (8006318 <HAL_DMA_IRQHandler+0xc7c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d040      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a26      	ldr	r2, [pc, #152]	@ (800631c <HAL_DMA_IRQHandler+0xc80>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d03b      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a25      	ldr	r2, [pc, #148]	@ (8006320 <HAL_DMA_IRQHandler+0xc84>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d036      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a23      	ldr	r2, [pc, #140]	@ (8006324 <HAL_DMA_IRQHandler+0xc88>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d031      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a22      	ldr	r2, [pc, #136]	@ (8006328 <HAL_DMA_IRQHandler+0xc8c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d02c      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a20      	ldr	r2, [pc, #128]	@ (800632c <HAL_DMA_IRQHandler+0xc90>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d027      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006330 <HAL_DMA_IRQHandler+0xc94>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d022      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006334 <HAL_DMA_IRQHandler+0xc98>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01d      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006338 <HAL_DMA_IRQHandler+0xc9c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d018      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1a      	ldr	r2, [pc, #104]	@ (800633c <HAL_DMA_IRQHandler+0xca0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a19      	ldr	r2, [pc, #100]	@ (8006340 <HAL_DMA_IRQHandler+0xca4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00e      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a17      	ldr	r2, [pc, #92]	@ (8006344 <HAL_DMA_IRQHandler+0xca8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a16      	ldr	r2, [pc, #88]	@ (8006348 <HAL_DMA_IRQHandler+0xcac>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a14      	ldr	r2, [pc, #80]	@ (800634c <HAL_DMA_IRQHandler+0xcb0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d128      	bne.n	8006350 <HAL_DMA_IRQHandler+0xcb4>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0214 	bic.w	r2, r2, #20
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e027      	b.n	8006360 <HAL_DMA_IRQHandler+0xcc4>
 8006310:	40020010 	.word	0x40020010
 8006314:	40020028 	.word	0x40020028
 8006318:	40020040 	.word	0x40020040
 800631c:	40020058 	.word	0x40020058
 8006320:	40020070 	.word	0x40020070
 8006324:	40020088 	.word	0x40020088
 8006328:	400200a0 	.word	0x400200a0
 800632c:	400200b8 	.word	0x400200b8
 8006330:	40020410 	.word	0x40020410
 8006334:	40020428 	.word	0x40020428
 8006338:	40020440 	.word	0x40020440
 800633c:	40020458 	.word	0x40020458
 8006340:	40020470 	.word	0x40020470
 8006344:	40020488 	.word	0x40020488
 8006348:	400204a0 	.word	0x400204a0
 800634c:	400204b8 	.word	0x400204b8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 020a 	bic.w	r2, r2, #10
 800635e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8097 	beq.w	80064a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006382:	e091      	b.n	80064a8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	2208      	movs	r2, #8
 800638e:	409a      	lsls	r2, r3
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4013      	ands	r3, r2
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8088 	beq.w	80064aa <HAL_DMA_IRQHandler+0xe0e>
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8082 	beq.w	80064aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a41      	ldr	r2, [pc, #260]	@ (80064b0 <HAL_DMA_IRQHandler+0xe14>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d04a      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a3f      	ldr	r2, [pc, #252]	@ (80064b4 <HAL_DMA_IRQHandler+0xe18>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d045      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a3e      	ldr	r2, [pc, #248]	@ (80064b8 <HAL_DMA_IRQHandler+0xe1c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d040      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a3c      	ldr	r2, [pc, #240]	@ (80064bc <HAL_DMA_IRQHandler+0xe20>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d03b      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a3b      	ldr	r2, [pc, #236]	@ (80064c0 <HAL_DMA_IRQHandler+0xe24>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d036      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a39      	ldr	r2, [pc, #228]	@ (80064c4 <HAL_DMA_IRQHandler+0xe28>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d031      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a38      	ldr	r2, [pc, #224]	@ (80064c8 <HAL_DMA_IRQHandler+0xe2c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d02c      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a36      	ldr	r2, [pc, #216]	@ (80064cc <HAL_DMA_IRQHandler+0xe30>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d027      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a35      	ldr	r2, [pc, #212]	@ (80064d0 <HAL_DMA_IRQHandler+0xe34>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d022      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a33      	ldr	r2, [pc, #204]	@ (80064d4 <HAL_DMA_IRQHandler+0xe38>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01d      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a32      	ldr	r2, [pc, #200]	@ (80064d8 <HAL_DMA_IRQHandler+0xe3c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d018      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a30      	ldr	r2, [pc, #192]	@ (80064dc <HAL_DMA_IRQHandler+0xe40>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a2f      	ldr	r2, [pc, #188]	@ (80064e0 <HAL_DMA_IRQHandler+0xe44>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a2d      	ldr	r2, [pc, #180]	@ (80064e4 <HAL_DMA_IRQHandler+0xe48>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a2c      	ldr	r2, [pc, #176]	@ (80064e8 <HAL_DMA_IRQHandler+0xe4c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2a      	ldr	r2, [pc, #168]	@ (80064ec <HAL_DMA_IRQHandler+0xe50>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d108      	bne.n	8006458 <HAL_DMA_IRQHandler+0xdbc>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 021c 	bic.w	r2, r2, #28
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e007      	b.n	8006468 <HAL_DMA_IRQHandler+0xdcc>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 020e 	bic.w	r2, r2, #14
 8006466:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	2201      	movs	r2, #1
 8006472:	409a      	lsls	r2, r3
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
 800649e:	e004      	b.n	80064aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80064a0:	bf00      	nop
 80064a2:	e002      	b.n	80064aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80064aa:	3728      	adds	r7, #40	@ 0x28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40020010 	.word	0x40020010
 80064b4:	40020028 	.word	0x40020028
 80064b8:	40020040 	.word	0x40020040
 80064bc:	40020058 	.word	0x40020058
 80064c0:	40020070 	.word	0x40020070
 80064c4:	40020088 	.word	0x40020088
 80064c8:	400200a0 	.word	0x400200a0
 80064cc:	400200b8 	.word	0x400200b8
 80064d0:	40020410 	.word	0x40020410
 80064d4:	40020428 	.word	0x40020428
 80064d8:	40020440 	.word	0x40020440
 80064dc:	40020458 	.word	0x40020458
 80064e0:	40020470 	.word	0x40020470
 80064e4:	40020488 	.word	0x40020488
 80064e8:	400204a0 	.word	0x400204a0
 80064ec:	400204b8 	.word	0x400204b8

080064f0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064fe:	b2db      	uxtb	r3, r3
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006536:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800653c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a7f      	ldr	r2, [pc, #508]	@ (8006740 <DMA_SetConfig+0x21c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d072      	beq.n	800662e <DMA_SetConfig+0x10a>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a7d      	ldr	r2, [pc, #500]	@ (8006744 <DMA_SetConfig+0x220>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d06d      	beq.n	800662e <DMA_SetConfig+0x10a>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a7c      	ldr	r2, [pc, #496]	@ (8006748 <DMA_SetConfig+0x224>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d068      	beq.n	800662e <DMA_SetConfig+0x10a>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a7a      	ldr	r2, [pc, #488]	@ (800674c <DMA_SetConfig+0x228>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d063      	beq.n	800662e <DMA_SetConfig+0x10a>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a79      	ldr	r2, [pc, #484]	@ (8006750 <DMA_SetConfig+0x22c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d05e      	beq.n	800662e <DMA_SetConfig+0x10a>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a77      	ldr	r2, [pc, #476]	@ (8006754 <DMA_SetConfig+0x230>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d059      	beq.n	800662e <DMA_SetConfig+0x10a>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a76      	ldr	r2, [pc, #472]	@ (8006758 <DMA_SetConfig+0x234>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d054      	beq.n	800662e <DMA_SetConfig+0x10a>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a74      	ldr	r2, [pc, #464]	@ (800675c <DMA_SetConfig+0x238>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d04f      	beq.n	800662e <DMA_SetConfig+0x10a>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a73      	ldr	r2, [pc, #460]	@ (8006760 <DMA_SetConfig+0x23c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d04a      	beq.n	800662e <DMA_SetConfig+0x10a>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a71      	ldr	r2, [pc, #452]	@ (8006764 <DMA_SetConfig+0x240>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d045      	beq.n	800662e <DMA_SetConfig+0x10a>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a70      	ldr	r2, [pc, #448]	@ (8006768 <DMA_SetConfig+0x244>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d040      	beq.n	800662e <DMA_SetConfig+0x10a>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a6e      	ldr	r2, [pc, #440]	@ (800676c <DMA_SetConfig+0x248>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d03b      	beq.n	800662e <DMA_SetConfig+0x10a>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a6d      	ldr	r2, [pc, #436]	@ (8006770 <DMA_SetConfig+0x24c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d036      	beq.n	800662e <DMA_SetConfig+0x10a>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a6b      	ldr	r2, [pc, #428]	@ (8006774 <DMA_SetConfig+0x250>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d031      	beq.n	800662e <DMA_SetConfig+0x10a>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a6a      	ldr	r2, [pc, #424]	@ (8006778 <DMA_SetConfig+0x254>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d02c      	beq.n	800662e <DMA_SetConfig+0x10a>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a68      	ldr	r2, [pc, #416]	@ (800677c <DMA_SetConfig+0x258>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d027      	beq.n	800662e <DMA_SetConfig+0x10a>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a67      	ldr	r2, [pc, #412]	@ (8006780 <DMA_SetConfig+0x25c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d022      	beq.n	800662e <DMA_SetConfig+0x10a>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a65      	ldr	r2, [pc, #404]	@ (8006784 <DMA_SetConfig+0x260>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01d      	beq.n	800662e <DMA_SetConfig+0x10a>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a64      	ldr	r2, [pc, #400]	@ (8006788 <DMA_SetConfig+0x264>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d018      	beq.n	800662e <DMA_SetConfig+0x10a>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a62      	ldr	r2, [pc, #392]	@ (800678c <DMA_SetConfig+0x268>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <DMA_SetConfig+0x10a>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a61      	ldr	r2, [pc, #388]	@ (8006790 <DMA_SetConfig+0x26c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00e      	beq.n	800662e <DMA_SetConfig+0x10a>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a5f      	ldr	r2, [pc, #380]	@ (8006794 <DMA_SetConfig+0x270>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d009      	beq.n	800662e <DMA_SetConfig+0x10a>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a5e      	ldr	r2, [pc, #376]	@ (8006798 <DMA_SetConfig+0x274>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <DMA_SetConfig+0x10a>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a5c      	ldr	r2, [pc, #368]	@ (800679c <DMA_SetConfig+0x278>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d101      	bne.n	8006632 <DMA_SetConfig+0x10e>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <DMA_SetConfig+0x110>
 8006632:	2300      	movs	r3, #0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00d      	beq.n	8006654 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006640:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006652:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a39      	ldr	r2, [pc, #228]	@ (8006740 <DMA_SetConfig+0x21c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d04a      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a38      	ldr	r2, [pc, #224]	@ (8006744 <DMA_SetConfig+0x220>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d045      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a36      	ldr	r2, [pc, #216]	@ (8006748 <DMA_SetConfig+0x224>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d040      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a35      	ldr	r2, [pc, #212]	@ (800674c <DMA_SetConfig+0x228>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d03b      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a33      	ldr	r2, [pc, #204]	@ (8006750 <DMA_SetConfig+0x22c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d036      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a32      	ldr	r2, [pc, #200]	@ (8006754 <DMA_SetConfig+0x230>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d031      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a30      	ldr	r2, [pc, #192]	@ (8006758 <DMA_SetConfig+0x234>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d02c      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2f      	ldr	r2, [pc, #188]	@ (800675c <DMA_SetConfig+0x238>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d027      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2d      	ldr	r2, [pc, #180]	@ (8006760 <DMA_SetConfig+0x23c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d022      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006764 <DMA_SetConfig+0x240>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d01d      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006768 <DMA_SetConfig+0x244>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d018      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a29      	ldr	r2, [pc, #164]	@ (800676c <DMA_SetConfig+0x248>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d013      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a27      	ldr	r2, [pc, #156]	@ (8006770 <DMA_SetConfig+0x24c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00e      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a26      	ldr	r2, [pc, #152]	@ (8006774 <DMA_SetConfig+0x250>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d009      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a24      	ldr	r2, [pc, #144]	@ (8006778 <DMA_SetConfig+0x254>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d004      	beq.n	80066f4 <DMA_SetConfig+0x1d0>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a23      	ldr	r2, [pc, #140]	@ (800677c <DMA_SetConfig+0x258>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d101      	bne.n	80066f8 <DMA_SetConfig+0x1d4>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <DMA_SetConfig+0x1d6>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d059      	beq.n	80067b2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	223f      	movs	r2, #63	@ 0x3f
 8006708:	409a      	lsls	r2, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800671c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2b40      	cmp	r3, #64	@ 0x40
 800672c:	d138      	bne.n	80067a0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800673e:	e086      	b.n	800684e <DMA_SetConfig+0x32a>
 8006740:	40020010 	.word	0x40020010
 8006744:	40020028 	.word	0x40020028
 8006748:	40020040 	.word	0x40020040
 800674c:	40020058 	.word	0x40020058
 8006750:	40020070 	.word	0x40020070
 8006754:	40020088 	.word	0x40020088
 8006758:	400200a0 	.word	0x400200a0
 800675c:	400200b8 	.word	0x400200b8
 8006760:	40020410 	.word	0x40020410
 8006764:	40020428 	.word	0x40020428
 8006768:	40020440 	.word	0x40020440
 800676c:	40020458 	.word	0x40020458
 8006770:	40020470 	.word	0x40020470
 8006774:	40020488 	.word	0x40020488
 8006778:	400204a0 	.word	0x400204a0
 800677c:	400204b8 	.word	0x400204b8
 8006780:	58025408 	.word	0x58025408
 8006784:	5802541c 	.word	0x5802541c
 8006788:	58025430 	.word	0x58025430
 800678c:	58025444 	.word	0x58025444
 8006790:	58025458 	.word	0x58025458
 8006794:	5802546c 	.word	0x5802546c
 8006798:	58025480 	.word	0x58025480
 800679c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	60da      	str	r2, [r3, #12]
}
 80067b0:	e04d      	b.n	800684e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a29      	ldr	r2, [pc, #164]	@ (800685c <DMA_SetConfig+0x338>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d022      	beq.n	8006802 <DMA_SetConfig+0x2de>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a27      	ldr	r2, [pc, #156]	@ (8006860 <DMA_SetConfig+0x33c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d01d      	beq.n	8006802 <DMA_SetConfig+0x2de>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a26      	ldr	r2, [pc, #152]	@ (8006864 <DMA_SetConfig+0x340>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d018      	beq.n	8006802 <DMA_SetConfig+0x2de>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a24      	ldr	r2, [pc, #144]	@ (8006868 <DMA_SetConfig+0x344>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <DMA_SetConfig+0x2de>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a23      	ldr	r2, [pc, #140]	@ (800686c <DMA_SetConfig+0x348>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00e      	beq.n	8006802 <DMA_SetConfig+0x2de>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a21      	ldr	r2, [pc, #132]	@ (8006870 <DMA_SetConfig+0x34c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <DMA_SetConfig+0x2de>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a20      	ldr	r2, [pc, #128]	@ (8006874 <DMA_SetConfig+0x350>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <DMA_SetConfig+0x2de>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006878 <DMA_SetConfig+0x354>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d101      	bne.n	8006806 <DMA_SetConfig+0x2e2>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <DMA_SetConfig+0x2e4>
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d020      	beq.n	800684e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2201      	movs	r2, #1
 8006816:	409a      	lsls	r2, r3
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b40      	cmp	r3, #64	@ 0x40
 800682a:	d108      	bne.n	800683e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	60da      	str	r2, [r3, #12]
}
 800683c:	e007      	b.n	800684e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	58025408 	.word	0x58025408
 8006860:	5802541c 	.word	0x5802541c
 8006864:	58025430 	.word	0x58025430
 8006868:	58025444 	.word	0x58025444
 800686c:	58025458 	.word	0x58025458
 8006870:	5802546c 	.word	0x5802546c
 8006874:	58025480 	.word	0x58025480
 8006878:	58025494 	.word	0x58025494

0800687c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a42      	ldr	r2, [pc, #264]	@ (8006994 <DMA_CalcBaseAndBitshift+0x118>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d04a      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a41      	ldr	r2, [pc, #260]	@ (8006998 <DMA_CalcBaseAndBitshift+0x11c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d045      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a3f      	ldr	r2, [pc, #252]	@ (800699c <DMA_CalcBaseAndBitshift+0x120>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d040      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a3e      	ldr	r2, [pc, #248]	@ (80069a0 <DMA_CalcBaseAndBitshift+0x124>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d03b      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a3c      	ldr	r2, [pc, #240]	@ (80069a4 <DMA_CalcBaseAndBitshift+0x128>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d036      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a3b      	ldr	r2, [pc, #236]	@ (80069a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d031      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a39      	ldr	r2, [pc, #228]	@ (80069ac <DMA_CalcBaseAndBitshift+0x130>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d02c      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a38      	ldr	r2, [pc, #224]	@ (80069b0 <DMA_CalcBaseAndBitshift+0x134>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d027      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a36      	ldr	r2, [pc, #216]	@ (80069b4 <DMA_CalcBaseAndBitshift+0x138>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d022      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a35      	ldr	r2, [pc, #212]	@ (80069b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d01d      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a33      	ldr	r2, [pc, #204]	@ (80069bc <DMA_CalcBaseAndBitshift+0x140>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d018      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a32      	ldr	r2, [pc, #200]	@ (80069c0 <DMA_CalcBaseAndBitshift+0x144>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d013      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a30      	ldr	r2, [pc, #192]	@ (80069c4 <DMA_CalcBaseAndBitshift+0x148>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00e      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a2f      	ldr	r2, [pc, #188]	@ (80069c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d009      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a2d      	ldr	r2, [pc, #180]	@ (80069cc <DMA_CalcBaseAndBitshift+0x150>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d004      	beq.n	8006924 <DMA_CalcBaseAndBitshift+0xa8>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a2c      	ldr	r2, [pc, #176]	@ (80069d0 <DMA_CalcBaseAndBitshift+0x154>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d101      	bne.n	8006928 <DMA_CalcBaseAndBitshift+0xac>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <DMA_CalcBaseAndBitshift+0xae>
 8006928:	2300      	movs	r3, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d024      	beq.n	8006978 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	3b10      	subs	r3, #16
 8006936:	4a27      	ldr	r2, [pc, #156]	@ (80069d4 <DMA_CalcBaseAndBitshift+0x158>)
 8006938:	fba2 2303 	umull	r2, r3, r2, r3
 800693c:	091b      	lsrs	r3, r3, #4
 800693e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	4a24      	ldr	r2, [pc, #144]	@ (80069d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006948:	5cd3      	ldrb	r3, [r2, r3]
 800694a:	461a      	mov	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b03      	cmp	r3, #3
 8006954:	d908      	bls.n	8006968 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	4b1f      	ldr	r3, [pc, #124]	@ (80069dc <DMA_CalcBaseAndBitshift+0x160>)
 800695e:	4013      	ands	r3, r2
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	659a      	str	r2, [r3, #88]	@ 0x58
 8006966:	e00d      	b.n	8006984 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	4b1b      	ldr	r3, [pc, #108]	@ (80069dc <DMA_CalcBaseAndBitshift+0x160>)
 8006970:	4013      	ands	r3, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6593      	str	r3, [r2, #88]	@ 0x58
 8006976:	e005      	b.n	8006984 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40020010 	.word	0x40020010
 8006998:	40020028 	.word	0x40020028
 800699c:	40020040 	.word	0x40020040
 80069a0:	40020058 	.word	0x40020058
 80069a4:	40020070 	.word	0x40020070
 80069a8:	40020088 	.word	0x40020088
 80069ac:	400200a0 	.word	0x400200a0
 80069b0:	400200b8 	.word	0x400200b8
 80069b4:	40020410 	.word	0x40020410
 80069b8:	40020428 	.word	0x40020428
 80069bc:	40020440 	.word	0x40020440
 80069c0:	40020458 	.word	0x40020458
 80069c4:	40020470 	.word	0x40020470
 80069c8:	40020488 	.word	0x40020488
 80069cc:	400204a0 	.word	0x400204a0
 80069d0:	400204b8 	.word	0x400204b8
 80069d4:	aaaaaaab 	.word	0xaaaaaaab
 80069d8:	08018b84 	.word	0x08018b84
 80069dc:	fffffc00 	.word	0xfffffc00

080069e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d120      	bne.n	8006a36 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d858      	bhi.n	8006aae <DMA_CheckFifoParam+0xce>
 80069fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006a04 <DMA_CheckFifoParam+0x24>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a27 	.word	0x08006a27
 8006a0c:	08006a15 	.word	0x08006a15
 8006a10:	08006aaf 	.word	0x08006aaf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d048      	beq.n	8006ab2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a24:	e045      	b.n	8006ab2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a2e:	d142      	bne.n	8006ab6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a34:	e03f      	b.n	8006ab6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a3e:	d123      	bne.n	8006a88 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d838      	bhi.n	8006aba <DMA_CheckFifoParam+0xda>
 8006a48:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <DMA_CheckFifoParam+0x70>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a61 	.word	0x08006a61
 8006a54:	08006a67 	.word	0x08006a67
 8006a58:	08006a61 	.word	0x08006a61
 8006a5c:	08006a79 	.word	0x08006a79
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
        break;
 8006a64:	e030      	b.n	8006ac8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d025      	beq.n	8006abe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a76:	e022      	b.n	8006abe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a80:	d11f      	bne.n	8006ac2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a86:	e01c      	b.n	8006ac2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d902      	bls.n	8006a96 <DMA_CheckFifoParam+0xb6>
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d003      	beq.n	8006a9c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006a94:	e018      	b.n	8006ac8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	73fb      	strb	r3, [r7, #15]
        break;
 8006a9a:	e015      	b.n	8006ac8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00e      	beq.n	8006ac6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8006aac:	e00b      	b.n	8006ac6 <DMA_CheckFifoParam+0xe6>
        break;
 8006aae:	bf00      	nop
 8006ab0:	e00a      	b.n	8006ac8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ab2:	bf00      	nop
 8006ab4:	e008      	b.n	8006ac8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ab6:	bf00      	nop
 8006ab8:	e006      	b.n	8006ac8 <DMA_CheckFifoParam+0xe8>
        break;
 8006aba:	bf00      	nop
 8006abc:	e004      	b.n	8006ac8 <DMA_CheckFifoParam+0xe8>
        break;
 8006abe:	bf00      	nop
 8006ac0:	e002      	b.n	8006ac8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ac2:	bf00      	nop
 8006ac4:	e000      	b.n	8006ac8 <DMA_CheckFifoParam+0xe8>
    break;
 8006ac6:	bf00      	nop
    }
  }

  return status;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop

08006ad8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a38      	ldr	r2, [pc, #224]	@ (8006bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d022      	beq.n	8006b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a36      	ldr	r2, [pc, #216]	@ (8006bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d01d      	beq.n	8006b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a35      	ldr	r2, [pc, #212]	@ (8006bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d018      	beq.n	8006b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a33      	ldr	r2, [pc, #204]	@ (8006bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a32      	ldr	r2, [pc, #200]	@ (8006bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00e      	beq.n	8006b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a30      	ldr	r2, [pc, #192]	@ (8006be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d009      	beq.n	8006b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2f      	ldr	r2, [pc, #188]	@ (8006be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d004      	beq.n	8006b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a2d      	ldr	r2, [pc, #180]	@ (8006be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d101      	bne.n	8006b3a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01a      	beq.n	8006b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	3b08      	subs	r3, #8
 8006b48:	4a28      	ldr	r2, [pc, #160]	@ (8006bec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4b26      	ldr	r3, [pc, #152]	@ (8006bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a24      	ldr	r2, [pc, #144]	@ (8006bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006b64:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f003 031f 	and.w	r3, r3, #31
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	409a      	lsls	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006b74:	e024      	b.n	8006bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	3b10      	subs	r3, #16
 8006b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006b80:	fba2 2303 	umull	r2, r3, r2, r3
 8006b84:	091b      	lsrs	r3, r3, #4
 8006b86:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d806      	bhi.n	8006b9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4a1b      	ldr	r2, [pc, #108]	@ (8006c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d902      	bls.n	8006b9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	4b18      	ldr	r3, [pc, #96]	@ (8006c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a16      	ldr	r2, [pc, #88]	@ (8006c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006bb0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2201      	movs	r2, #1
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006bc0:	bf00      	nop
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	58025408 	.word	0x58025408
 8006bd0:	5802541c 	.word	0x5802541c
 8006bd4:	58025430 	.word	0x58025430
 8006bd8:	58025444 	.word	0x58025444
 8006bdc:	58025458 	.word	0x58025458
 8006be0:	5802546c 	.word	0x5802546c
 8006be4:	58025480 	.word	0x58025480
 8006be8:	58025494 	.word	0x58025494
 8006bec:	cccccccd 	.word	0xcccccccd
 8006bf0:	16009600 	.word	0x16009600
 8006bf4:	58025880 	.word	0x58025880
 8006bf8:	aaaaaaab 	.word	0xaaaaaaab
 8006bfc:	400204b8 	.word	0x400204b8
 8006c00:	4002040f 	.word	0x4002040f
 8006c04:	10008200 	.word	0x10008200
 8006c08:	40020880 	.word	0x40020880

08006c0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d04a      	beq.n	8006cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d847      	bhi.n	8006cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a25      	ldr	r2, [pc, #148]	@ (8006cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d022      	beq.n	8006c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a24      	ldr	r2, [pc, #144]	@ (8006cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d01d      	beq.n	8006c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a22      	ldr	r2, [pc, #136]	@ (8006ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d018      	beq.n	8006c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a21      	ldr	r2, [pc, #132]	@ (8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d013      	beq.n	8006c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00e      	beq.n	8006c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d009      	beq.n	8006c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1c      	ldr	r2, [pc, #112]	@ (8006cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d004      	beq.n	8006c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d101      	bne.n	8006c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4b17      	ldr	r3, [pc, #92]	@ (8006ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a15      	ldr	r2, [pc, #84]	@ (8006ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006c94:	671a      	str	r2, [r3, #112]	@ 0x70
 8006c96:	e009      	b.n	8006cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4b14      	ldr	r3, [pc, #80]	@ (8006cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a11      	ldr	r2, [pc, #68]	@ (8006cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006caa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	409a      	lsls	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	58025408 	.word	0x58025408
 8006cc8:	5802541c 	.word	0x5802541c
 8006ccc:	58025430 	.word	0x58025430
 8006cd0:	58025444 	.word	0x58025444
 8006cd4:	58025458 	.word	0x58025458
 8006cd8:	5802546c 	.word	0x5802546c
 8006cdc:	58025480 	.word	0x58025480
 8006ce0:	58025494 	.word	0x58025494
 8006ce4:	1600963f 	.word	0x1600963f
 8006ce8:	58025940 	.word	0x58025940
 8006cec:	1000823f 	.word	0x1000823f
 8006cf0:	40020940 	.word	0x40020940

08006cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b089      	sub	sp, #36	@ 0x24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006d02:	4b89      	ldr	r3, [pc, #548]	@ (8006f28 <HAL_GPIO_Init+0x234>)
 8006d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d06:	e194      	b.n	8007032 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	fa01 f303 	lsl.w	r3, r1, r3
 8006d14:	4013      	ands	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 8186 	beq.w	800702c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d005      	beq.n	8006d38 <HAL_GPIO_Init+0x44>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f003 0303 	and.w	r3, r3, #3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d130      	bne.n	8006d9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	2203      	movs	r2, #3
 8006d44:	fa02 f303 	lsl.w	r3, r2, r3
 8006d48:	43db      	mvns	r3, r3
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d6e:	2201      	movs	r2, #1
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	fa02 f303 	lsl.w	r3, r2, r3
 8006d76:	43db      	mvns	r3, r3
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	091b      	lsrs	r3, r3, #4
 8006d84:	f003 0201 	and.w	r2, r3, #1
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d017      	beq.n	8006dd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	2203      	movs	r2, #3
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	43db      	mvns	r3, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d123      	bne.n	8006e2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	08da      	lsrs	r2, r3, #3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3208      	adds	r2, #8
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	220f      	movs	r2, #15
 8006dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfe:	43db      	mvns	r3, r3
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	4013      	ands	r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	08da      	lsrs	r2, r3, #3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3208      	adds	r2, #8
 8006e24:	69b9      	ldr	r1, [r7, #24]
 8006e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	2203      	movs	r2, #3
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f003 0203 	and.w	r2, r3, #3
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 80e0 	beq.w	800702c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8006f2c <HAL_GPIO_Init+0x238>)
 8006e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e72:	4a2e      	ldr	r2, [pc, #184]	@ (8006f2c <HAL_GPIO_Init+0x238>)
 8006e74:	f043 0302 	orr.w	r3, r3, #2
 8006e78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f2c <HAL_GPIO_Init+0x238>)
 8006e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e8a:	4a29      	ldr	r2, [pc, #164]	@ (8006f30 <HAL_GPIO_Init+0x23c>)
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	089b      	lsrs	r3, r3, #2
 8006e90:	3302      	adds	r3, #2
 8006e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	220f      	movs	r2, #15
 8006ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea6:	43db      	mvns	r3, r3
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a20      	ldr	r2, [pc, #128]	@ (8006f34 <HAL_GPIO_Init+0x240>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d052      	beq.n	8006f5c <HAL_GPIO_Init+0x268>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8006f38 <HAL_GPIO_Init+0x244>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d031      	beq.n	8006f22 <HAL_GPIO_Init+0x22e>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8006f3c <HAL_GPIO_Init+0x248>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d02b      	beq.n	8006f1e <HAL_GPIO_Init+0x22a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f40 <HAL_GPIO_Init+0x24c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d025      	beq.n	8006f1a <HAL_GPIO_Init+0x226>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8006f44 <HAL_GPIO_Init+0x250>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d01f      	beq.n	8006f16 <HAL_GPIO_Init+0x222>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8006f48 <HAL_GPIO_Init+0x254>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d019      	beq.n	8006f12 <HAL_GPIO_Init+0x21e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8006f4c <HAL_GPIO_Init+0x258>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d013      	beq.n	8006f0e <HAL_GPIO_Init+0x21a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a19      	ldr	r2, [pc, #100]	@ (8006f50 <HAL_GPIO_Init+0x25c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00d      	beq.n	8006f0a <HAL_GPIO_Init+0x216>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a18      	ldr	r2, [pc, #96]	@ (8006f54 <HAL_GPIO_Init+0x260>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d007      	beq.n	8006f06 <HAL_GPIO_Init+0x212>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a17      	ldr	r2, [pc, #92]	@ (8006f58 <HAL_GPIO_Init+0x264>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d101      	bne.n	8006f02 <HAL_GPIO_Init+0x20e>
 8006efe:	2309      	movs	r3, #9
 8006f00:	e02d      	b.n	8006f5e <HAL_GPIO_Init+0x26a>
 8006f02:	230a      	movs	r3, #10
 8006f04:	e02b      	b.n	8006f5e <HAL_GPIO_Init+0x26a>
 8006f06:	2308      	movs	r3, #8
 8006f08:	e029      	b.n	8006f5e <HAL_GPIO_Init+0x26a>
 8006f0a:	2307      	movs	r3, #7
 8006f0c:	e027      	b.n	8006f5e <HAL_GPIO_Init+0x26a>
 8006f0e:	2306      	movs	r3, #6
 8006f10:	e025      	b.n	8006f5e <HAL_GPIO_Init+0x26a>
 8006f12:	2305      	movs	r3, #5
 8006f14:	e023      	b.n	8006f5e <HAL_GPIO_Init+0x26a>
 8006f16:	2304      	movs	r3, #4
 8006f18:	e021      	b.n	8006f5e <HAL_GPIO_Init+0x26a>
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e01f      	b.n	8006f5e <HAL_GPIO_Init+0x26a>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e01d      	b.n	8006f5e <HAL_GPIO_Init+0x26a>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e01b      	b.n	8006f5e <HAL_GPIO_Init+0x26a>
 8006f26:	bf00      	nop
 8006f28:	58000080 	.word	0x58000080
 8006f2c:	58024400 	.word	0x58024400
 8006f30:	58000400 	.word	0x58000400
 8006f34:	58020000 	.word	0x58020000
 8006f38:	58020400 	.word	0x58020400
 8006f3c:	58020800 	.word	0x58020800
 8006f40:	58020c00 	.word	0x58020c00
 8006f44:	58021000 	.word	0x58021000
 8006f48:	58021400 	.word	0x58021400
 8006f4c:	58021800 	.word	0x58021800
 8006f50:	58021c00 	.word	0x58021c00
 8006f54:	58022000 	.word	0x58022000
 8006f58:	58022400 	.word	0x58022400
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	f002 0203 	and.w	r2, r2, #3
 8006f64:	0092      	lsls	r2, r2, #2
 8006f66:	4093      	lsls	r3, r2
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f6e:	4938      	ldr	r1, [pc, #224]	@ (8007050 <HAL_GPIO_Init+0x35c>)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	089b      	lsrs	r3, r3, #2
 8006f74:	3302      	adds	r3, #2
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	43db      	mvns	r3, r3
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006fa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006faa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	43db      	mvns	r3, r3
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006fd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	43db      	mvns	r3, r3
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	4013      	ands	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	3301      	adds	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	f47f ae63 	bne.w	8006d08 <HAL_GPIO_Init+0x14>
  }
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	3724      	adds	r7, #36	@ 0x24
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	58000400 	.word	0x58000400

08007054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	807b      	strh	r3, [r7, #2]
 8007060:	4613      	mov	r3, r2
 8007062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007064:	787b      	ldrb	r3, [r7, #1]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800706a:	887a      	ldrh	r2, [r7, #2]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007070:	e003      	b.n	800707a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007072:	887b      	ldrh	r3, [r7, #2]
 8007074:	041a      	lsls	r2, r3, #16
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	619a      	str	r2, [r3, #24]
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
	...

08007088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e08b      	b.n	80071b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fa fbae 	bl	8001810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2224      	movs	r2, #36	@ 0x24
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0201 	bic.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80070d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d107      	bne.n	8007102 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070fe:	609a      	str	r2, [r3, #8]
 8007100:	e006      	b.n	8007110 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800710e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d108      	bne.n	800712a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007126:	605a      	str	r2, [r3, #4]
 8007128:	e007      	b.n	800713a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007138:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6859      	ldr	r1, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	4b1d      	ldr	r3, [pc, #116]	@ (80071bc <HAL_I2C_Init+0x134>)
 8007146:	430b      	orrs	r3, r1
 8007148:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007158:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69d9      	ldr	r1, [r3, #28]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1a      	ldr	r2, [r3, #32]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	02008000 	.word	0x02008000

080071c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	461a      	mov	r2, r3
 80071cc:	460b      	mov	r3, r1
 80071ce:	817b      	strh	r3, [r7, #10]
 80071d0:	4613      	mov	r3, r2
 80071d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b20      	cmp	r3, #32
 80071de:	f040 80fd 	bne.w	80073dc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_I2C_Master_Transmit+0x30>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e0f6      	b.n	80073de <HAL_I2C_Master_Transmit+0x21e>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071f8:	f7fb fab0 	bl	800275c <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	2319      	movs	r3, #25
 8007204:	2201      	movs	r2, #1
 8007206:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f002 f89e 	bl	800934c <I2C_WaitOnFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e0e1      	b.n	80073de <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2221      	movs	r2, #33	@ 0x21
 800721e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2210      	movs	r2, #16
 8007226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	893a      	ldrh	r2, [r7, #8]
 800723a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007246:	b29b      	uxth	r3, r3
 8007248:	2bff      	cmp	r3, #255	@ 0xff
 800724a:	d906      	bls.n	800725a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	22ff      	movs	r2, #255	@ 0xff
 8007250:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007252:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	e007      	b.n	800726a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800725e:	b29a      	uxth	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007264:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007268:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800726e:	2b00      	cmp	r3, #0
 8007270:	d024      	beq.n	80072bc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	3301      	adds	r3, #1
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	8979      	ldrh	r1, [r7, #10]
 80072ae:	4b4e      	ldr	r3, [pc, #312]	@ (80073e8 <HAL_I2C_Master_Transmit+0x228>)
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f002 fa0d 	bl	80096d4 <I2C_TransferConfig>
 80072ba:	e066      	b.n	800738a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	8979      	ldrh	r1, [r7, #10]
 80072c4:	4b48      	ldr	r3, [pc, #288]	@ (80073e8 <HAL_I2C_Master_Transmit+0x228>)
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f002 fa02 	bl	80096d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80072d0:	e05b      	b.n	800738a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	6a39      	ldr	r1, [r7, #32]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f002 f891 	bl	80093fe <I2C_WaitOnTXISFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e07b      	b.n	80073de <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ea:	781a      	ldrb	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d034      	beq.n	800738a <HAL_I2C_Master_Transmit+0x1ca>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007324:	2b00      	cmp	r3, #0
 8007326:	d130      	bne.n	800738a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	2200      	movs	r2, #0
 8007330:	2180      	movs	r1, #128	@ 0x80
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f002 f80a 	bl	800934c <I2C_WaitOnFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e04d      	b.n	80073de <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007346:	b29b      	uxth	r3, r3
 8007348:	2bff      	cmp	r3, #255	@ 0xff
 800734a:	d90e      	bls.n	800736a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	22ff      	movs	r2, #255	@ 0xff
 8007350:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007356:	b2da      	uxtb	r2, r3
 8007358:	8979      	ldrh	r1, [r7, #10]
 800735a:	2300      	movs	r3, #0
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f002 f9b6 	bl	80096d4 <I2C_TransferConfig>
 8007368:	e00f      	b.n	800738a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007378:	b2da      	uxtb	r2, r3
 800737a:	8979      	ldrh	r1, [r7, #10]
 800737c:	2300      	movs	r3, #0
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f002 f9a5 	bl	80096d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d19e      	bne.n	80072d2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	6a39      	ldr	r1, [r7, #32]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f002 f877 	bl	800948c <I2C_WaitOnSTOPFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e01a      	b.n	80073de <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2220      	movs	r2, #32
 80073ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6859      	ldr	r1, [r3, #4]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4b0c      	ldr	r3, [pc, #48]	@ (80073ec <HAL_I2C_Master_Transmit+0x22c>)
 80073bc:	400b      	ands	r3, r1
 80073be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	e000      	b.n	80073de <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80073dc:	2302      	movs	r3, #2
  }
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	80002000 	.word	0x80002000
 80073ec:	fe00e800 	.word	0xfe00e800

080073f0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08a      	sub	sp, #40	@ 0x28
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	607a      	str	r2, [r7, #4]
 80073fa:	461a      	mov	r2, r3
 80073fc:	460b      	mov	r3, r1
 80073fe:	817b      	strh	r3, [r7, #10]
 8007400:	4613      	mov	r3, r2
 8007402:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b20      	cmp	r3, #32
 8007412:	f040 80ef 	bne.w	80075f4 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007424:	d101      	bne.n	800742a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8007426:	2302      	movs	r3, #2
 8007428:	e0e5      	b.n	80075f6 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_I2C_Master_Transmit_DMA+0x48>
 8007434:	2302      	movs	r3, #2
 8007436:	e0de      	b.n	80075f6 <HAL_I2C_Master_Transmit_DMA+0x206>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2221      	movs	r2, #33	@ 0x21
 8007444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2210      	movs	r2, #16
 800744c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	893a      	ldrh	r2, [r7, #8]
 8007460:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4a66      	ldr	r2, [pc, #408]	@ (8007600 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8007466:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4a66      	ldr	r2, [pc, #408]	@ (8007604 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800746c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007472:	b29b      	uxth	r3, r3
 8007474:	2bff      	cmp	r3, #255	@ 0xff
 8007476:	d906      	bls.n	8007486 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	22ff      	movs	r2, #255	@ 0xff
 800747c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800747e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	e007      	b.n	8007496 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007490:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007494:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800749a:	2b00      	cmp	r3, #0
 800749c:	d01a      	beq.n	80074d4 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a2:	781a      	ldrb	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074b8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074be:	b29b      	uxth	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d074      	beq.n	80075c6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d022      	beq.n	800752a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e8:	4a47      	ldr	r2, [pc, #284]	@ (8007608 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80074ea:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f0:	4a46      	ldr	r2, [pc, #280]	@ (800760c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80074f2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f8:	2200      	movs	r2, #0
 80074fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007500:	2200      	movs	r2, #0
 8007502:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007514:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800751a:	f7fd f8f1 	bl	8004700 <HAL_DMA_Start_IT>
 800751e:	4603      	mov	r3, r0
 8007520:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d13a      	bne.n	800759e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007528:	e013      	b.n	8007552 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e051      	b.n	80075f6 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007556:	b2db      	uxtb	r3, r3
 8007558:	3301      	adds	r3, #1
 800755a:	b2da      	uxtb	r2, r3
 800755c:	8979      	ldrh	r1, [r7, #10]
 800755e:	4b2c      	ldr	r3, [pc, #176]	@ (8007610 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f002 f8b5 	bl	80096d4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007584:	2110      	movs	r1, #16
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f002 f8d6 	bl	8009738 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e028      	b.n	80075f0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b2:	f043 0210 	orr.w	r2, r3, #16
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e017      	b.n	80075f6 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4a12      	ldr	r2, [pc, #72]	@ (8007614 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80075ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	8979      	ldrh	r1, [r7, #10]
 80075d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007610 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f002 f87a 	bl	80096d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80075e8:	2101      	movs	r1, #1
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f002 f8a4 	bl	8009738 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e000      	b.n	80075f6 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80075f4:	2302      	movs	r3, #2
  }
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	ffff0000 	.word	0xffff0000
 8007604:	08007c4f 	.word	0x08007c4f
 8007608:	08009007 	.word	0x08009007
 800760c:	0800909d 	.word	0x0800909d
 8007610:	80002000 	.word	0x80002000
 8007614:	080077df 	.word	0x080077df

08007618 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3
  }
}
 8007644:	bf00      	nop
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	0a1b      	lsrs	r3, r3, #8
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d010      	beq.n	8007692 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	09db      	lsrs	r3, r3, #7
 8007674:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007680:	f043 0201 	orr.w	r2, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007690:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	0a9b      	lsrs	r3, r3, #10
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d010      	beq.n	80076c0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	09db      	lsrs	r3, r3, #7
 80076a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ae:	f043 0208 	orr.w	r2, r3, #8
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80076be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	0a5b      	lsrs	r3, r3, #9
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d010      	beq.n	80076ee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	09db      	lsrs	r3, r3, #7
 80076d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076dc:	f043 0202 	orr.w	r2, r3, #2
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f003 030b 	and.w	r3, r3, #11
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fb45 	bl	8008d90 <I2C_ITError>
  }
}
 8007706:	bf00      	nop
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
 800776a:	4613      	mov	r3, r2
 800776c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800776e:	bf00      	nop
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b088      	sub	sp, #32
 80077e2:	af02      	add	r7, sp, #8
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <I2C_Master_ISR_IT+0x1e>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e120      	b.n	8007a3e <I2C_Master_ISR_IT+0x260>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d013      	beq.n	8007838 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	091b      	lsrs	r3, r3, #4
 8007814:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00d      	beq.n	8007838 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2210      	movs	r2, #16
 8007822:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007828:	f043 0204 	orr.w	r2, r3, #4
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f001 fbc4 	bl	8008fbe <I2C_Flush_TXDR>
 8007836:	e0ed      	b.n	8007a14 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	089b      	lsrs	r3, r3, #2
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d023      	beq.n	800788c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	089b      	lsrs	r3, r3, #2
 8007848:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01d      	beq.n	800788c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f023 0304 	bic.w	r3, r3, #4
 8007856:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007862:	b2d2      	uxtb	r2, r2
 8007864:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800788a:	e0c3      	b.n	8007a14 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	099b      	lsrs	r3, r3, #6
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d12a      	bne.n	80078ee <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	085b      	lsrs	r3, r3, #1
 800789c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d024      	beq.n	80078ee <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01e      	beq.n	80078ee <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 80ac 	beq.w	8007a14 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c0:	781a      	ldrb	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078d6:	3b01      	subs	r3, #1
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80078ec:	e092      	b.n	8007a14 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	09db      	lsrs	r3, r3, #7
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d05d      	beq.n	80079b6 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	099b      	lsrs	r3, r3, #6
 80078fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007902:	2b00      	cmp	r3, #0
 8007904:	d057      	beq.n	80079b6 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d040      	beq.n	8007992 <I2C_Master_ISR_IT+0x1b4>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007914:	2b00      	cmp	r3, #0
 8007916:	d13c      	bne.n	8007992 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007924:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800792a:	b29b      	uxth	r3, r3
 800792c:	2bff      	cmp	r3, #255	@ 0xff
 800792e:	d90e      	bls.n	800794e <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	22ff      	movs	r2, #255	@ 0xff
 8007934:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800793a:	b2da      	uxtb	r2, r3
 800793c:	8a79      	ldrh	r1, [r7, #18]
 800793e:	2300      	movs	r3, #0
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f001 fec4 	bl	80096d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800794c:	e032      	b.n	80079b4 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007960:	d00b      	beq.n	800797a <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007966:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800796c:	8a79      	ldrh	r1, [r7, #18]
 800796e:	2000      	movs	r0, #0
 8007970:	9000      	str	r0, [sp, #0]
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f001 feae 	bl	80096d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007978:	e01c      	b.n	80079b4 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800797e:	b2da      	uxtb	r2, r3
 8007980:	8a79      	ldrh	r1, [r7, #18]
 8007982:	2300      	movs	r3, #0
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f001 fea2 	bl	80096d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007990:	e010      	b.n	80079b4 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800799c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079a0:	d003      	beq.n	80079aa <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fdde 	bl	8008564 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079a8:	e034      	b.n	8007a14 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80079aa:	2140      	movs	r1, #64	@ 0x40
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f001 f9ef 	bl	8008d90 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079b2:	e02f      	b.n	8007a14 <I2C_Master_ISR_IT+0x236>
 80079b4:	e02e      	b.n	8007a14 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	099b      	lsrs	r3, r3, #6
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d028      	beq.n	8007a14 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	099b      	lsrs	r3, r3, #6
 80079c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d022      	beq.n	8007a14 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d119      	bne.n	8007a0c <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079e6:	d015      	beq.n	8007a14 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80079f0:	d108      	bne.n	8007a04 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a00:	605a      	str	r2, [r3, #4]
 8007a02:	e007      	b.n	8007a14 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fdad 	bl	8008564 <I2C_ITMasterSeqCplt>
 8007a0a:	e003      	b.n	8007a14 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007a0c:	2140      	movs	r1, #64	@ 0x40
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f001 f9be 	bl	8008d90 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d009      	beq.n	8007a34 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007a2c:	6979      	ldr	r1, [r7, #20]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 fe34 	bl	800869c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b086      	sub	sp, #24
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d101      	bne.n	8007a6a <I2C_Slave_ISR_IT+0x24>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e0ed      	b.n	8007c46 <I2C_Slave_ISR_IT+0x200>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	095b      	lsrs	r3, r3, #5
 8007a82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007a8a:	6939      	ldr	r1, [r7, #16]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 fecf 	bl	8008830 <I2C_ITSlaveCplt>
 8007a92:	e0d3      	b.n	8007c3c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	091b      	lsrs	r3, r3, #4
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d04d      	beq.n	8007b3c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	091b      	lsrs	r3, r3, #4
 8007aa4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d047      	beq.n	8007b3c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d128      	bne.n	8007b08 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b28      	cmp	r3, #40	@ 0x28
 8007ac0:	d108      	bne.n	8007ad4 <I2C_Slave_ISR_IT+0x8e>
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ac8:	d104      	bne.n	8007ad4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007aca:	6939      	ldr	r1, [r7, #16]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f001 f909 	bl	8008ce4 <I2C_ITListenCplt>
 8007ad2:	e032      	b.n	8007b3a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b29      	cmp	r3, #41	@ 0x29
 8007ade:	d10e      	bne.n	8007afe <I2C_Slave_ISR_IT+0xb8>
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ae6:	d00a      	beq.n	8007afe <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2210      	movs	r2, #16
 8007aee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f001 fa64 	bl	8008fbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 fd71 	bl	80085de <I2C_ITSlaveSeqCplt>
 8007afc:	e01d      	b.n	8007b3a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2210      	movs	r2, #16
 8007b04:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007b06:	e096      	b.n	8007c36 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2210      	movs	r2, #16
 8007b0e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b14:	f043 0204 	orr.w	r2, r3, #4
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d004      	beq.n	8007b2c <I2C_Slave_ISR_IT+0xe6>
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b28:	f040 8085 	bne.w	8007c36 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b30:	4619      	mov	r1, r3
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f001 f92c 	bl	8008d90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007b38:	e07d      	b.n	8007c36 <I2C_Slave_ISR_IT+0x1f0>
 8007b3a:	e07c      	b.n	8007c36 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	089b      	lsrs	r3, r3, #2
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d030      	beq.n	8007baa <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	089b      	lsrs	r3, r3, #2
 8007b4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d02a      	beq.n	8007baa <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d018      	beq.n	8007b90 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b68:	b2d2      	uxtb	r2, r2
 8007b6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d14f      	bne.n	8007c3a <I2C_Slave_ISR_IT+0x1f4>
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ba0:	d04b      	beq.n	8007c3a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fd1b 	bl	80085de <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007ba8:	e047      	b.n	8007c3a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	08db      	lsrs	r3, r3, #3
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	08db      	lsrs	r3, r3, #3
 8007bba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d004      	beq.n	8007bcc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007bc2:	6939      	ldr	r1, [r7, #16]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 fc49 	bl	800845c <I2C_ITAddrCplt>
 8007bca:	e037      	b.n	8007c3c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d031      	beq.n	8007c3c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	085b      	lsrs	r3, r3, #1
 8007bdc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d02b      	beq.n	8007c3c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d018      	beq.n	8007c20 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf2:	781a      	ldrb	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c16:	3b01      	subs	r3, #1
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007c1e:	e00d      	b.n	8007c3c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c26:	d002      	beq.n	8007c2e <I2C_Slave_ISR_IT+0x1e8>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 fcd5 	bl	80085de <I2C_ITSlaveSeqCplt>
 8007c34:	e002      	b.n	8007c3c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8007c36:	bf00      	nop
 8007c38:	e000      	b.n	8007c3c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8007c3a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b088      	sub	sp, #32
 8007c52:	af02      	add	r7, sp, #8
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <I2C_Master_ISR_DMA+0x1a>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e0e1      	b.n	8007e2c <I2C_Master_ISR_DMA+0x1de>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	091b      	lsrs	r3, r3, #4
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d017      	beq.n	8007cac <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	091b      	lsrs	r3, r3, #4
 8007c80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d011      	beq.n	8007cac <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2210      	movs	r2, #16
 8007c8e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c94:	f043 0204 	orr.w	r2, r3, #4
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007c9c:	2120      	movs	r1, #32
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f001 fd4a 	bl	8009738 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f001 f98a 	bl	8008fbe <I2C_Flush_TXDR>
 8007caa:	e0ba      	b.n	8007e22 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	09db      	lsrs	r3, r3, #7
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d072      	beq.n	8007d9e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	099b      	lsrs	r3, r3, #6
 8007cbc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d06c      	beq.n	8007d9e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cd2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d04e      	beq.n	8007d7c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cea:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2bff      	cmp	r3, #255	@ 0xff
 8007cf4:	d906      	bls.n	8007d04 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	22ff      	movs	r2, #255	@ 0xff
 8007cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007cfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d00:	617b      	str	r3, [r7, #20]
 8007d02:	e010      	b.n	8007d26 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d16:	d003      	beq.n	8007d20 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	e002      	b.n	8007d26 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007d20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d24:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	8a79      	ldrh	r1, [r7, #18]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f001 fccd 	bl	80096d4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b22      	cmp	r3, #34	@ 0x22
 8007d56:	d108      	bne.n	8007d6a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d66:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d68:	e05b      	b.n	8007e22 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d7a:	e052      	b.n	8007e22 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d8a:	d003      	beq.n	8007d94 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fbe9 	bl	8008564 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007d92:	e046      	b.n	8007e22 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007d94:	2140      	movs	r1, #64	@ 0x40
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 fffa 	bl	8008d90 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007d9c:	e041      	b.n	8007e22 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	099b      	lsrs	r3, r3, #6
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d029      	beq.n	8007dfe <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	099b      	lsrs	r3, r3, #6
 8007dae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d023      	beq.n	8007dfe <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d119      	bne.n	8007df4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dce:	d027      	beq.n	8007e20 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007dd8:	d108      	bne.n	8007dec <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007de8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007dea:	e019      	b.n	8007e20 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 fbb9 	bl	8008564 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007df2:	e015      	b.n	8007e20 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007df4:	2140      	movs	r1, #64	@ 0x40
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 ffca 	bl	8008d90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007dfc:	e010      	b.n	8007e20 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00b      	beq.n	8007e22 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d005      	beq.n	8007e22 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 fc3f 	bl	800869c <I2C_ITMasterCplt>
 8007e1e:	e000      	b.n	8007e22 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007e20:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007e40:	4b92      	ldr	r3, [pc, #584]	@ (800808c <I2C_Mem_ISR_DMA+0x258>)
 8007e42:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <I2C_Mem_ISR_DMA+0x1e>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e118      	b.n	8008084 <I2C_Mem_ISR_DMA+0x250>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	091b      	lsrs	r3, r3, #4
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d017      	beq.n	8007e96 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	091b      	lsrs	r3, r3, #4
 8007e6a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d011      	beq.n	8007e96 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2210      	movs	r2, #16
 8007e78:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7e:	f043 0204 	orr.w	r2, r3, #4
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007e86:	2120      	movs	r1, #32
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f001 fc55 	bl	8009738 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f001 f895 	bl	8008fbe <I2C_Flush_TXDR>
 8007e94:	e0f1      	b.n	800807a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	085b      	lsrs	r3, r3, #1
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00f      	beq.n	8007ec2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	085b      	lsrs	r3, r3, #1
 8007ea6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d009      	beq.n	8007ec2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007eb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebe:	651a      	str	r2, [r3, #80]	@ 0x50
 8007ec0:	e0db      	b.n	800807a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	09db      	lsrs	r3, r3, #7
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d060      	beq.n	8007f90 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	099b      	lsrs	r3, r3, #6
 8007ed2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d05a      	beq.n	8007f90 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007eda:	2101      	movs	r1, #1
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f001 fcaf 	bl	8009840 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007ee2:	2110      	movs	r1, #16
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f001 fc27 	bl	8009738 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d048      	beq.n	8007f86 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2bff      	cmp	r3, #255	@ 0xff
 8007efc:	d910      	bls.n	8007f20 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	22ff      	movs	r2, #255	@ 0xff
 8007f02:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f08:	b299      	uxth	r1, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	2300      	movs	r3, #0
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f001 fbdb 	bl	80096d4 <I2C_TransferConfig>
 8007f1e:	e011      	b.n	8007f44 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f2e:	b299      	uxth	r1, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	2300      	movs	r3, #0
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f001 fbc8 	bl	80096d4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b22      	cmp	r3, #34	@ 0x22
 8007f60:	d108      	bne.n	8007f74 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f70:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007f72:	e082      	b.n	800807a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f82:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007f84:	e079      	b.n	800807a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007f86:	2140      	movs	r1, #64	@ 0x40
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 ff01 	bl	8008d90 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007f8e:	e074      	b.n	800807a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	099b      	lsrs	r3, r3, #6
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d05e      	beq.n	800805a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	099b      	lsrs	r3, r3, #6
 8007fa0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d058      	beq.n	800805a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007fa8:	2101      	movs	r1, #1
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f001 fc48 	bl	8009840 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007fb0:	2110      	movs	r1, #16
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f001 fbc0 	bl	8009738 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b22      	cmp	r3, #34	@ 0x22
 8007fc2:	d101      	bne.n	8007fc8 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8007fc4:	4b32      	ldr	r3, [pc, #200]	@ (8008090 <I2C_Mem_ISR_DMA+0x25c>)
 8007fc6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2bff      	cmp	r3, #255	@ 0xff
 8007fd0:	d910      	bls.n	8007ff4 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	22ff      	movs	r2, #255	@ 0xff
 8007fd6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fdc:	b299      	uxth	r1, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f001 fb71 	bl	80096d4 <I2C_TransferConfig>
 8007ff2:	e011      	b.n	8008018 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008002:	b299      	uxth	r1, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008008:	b2da      	uxtb	r2, r3
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f001 fb5e 	bl	80096d4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b22      	cmp	r3, #34	@ 0x22
 8008034:	d108      	bne.n	8008048 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008044:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008046:	e018      	b.n	800807a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008056:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008058:	e00f      	b.n	800807a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d009      	beq.n	800807a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	095b      	lsrs	r3, r3, #5
 800806a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008072:	68b9      	ldr	r1, [r7, #8]
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fb11 	bl	800869c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	80002000 	.word	0x80002000
 8008090:	80002400 	.word	0x80002400

08008094 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <I2C_Slave_ISR_DMA+0x24>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e1cc      	b.n	8008452 <I2C_Slave_ISR_DMA+0x3be>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	095b      	lsrs	r3, r3, #5
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	095b      	lsrs	r3, r3, #5
 80080d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d004      	beq.n	80080e2 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80080d8:	68b9      	ldr	r1, [r7, #8]
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 fba8 	bl	8008830 <I2C_ITSlaveCplt>
 80080e0:	e1b2      	b.n	8008448 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	091b      	lsrs	r3, r3, #4
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 819c 	beq.w	8008428 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	091b      	lsrs	r3, r3, #4
 80080f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8195 	beq.w	8008428 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	0b9b      	lsrs	r3, r3, #14
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	0bdb      	lsrs	r3, r3, #15
 800810e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 8181 	beq.w	800841a <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d07c      	beq.n	800821a <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	0bdb      	lsrs	r3, r3, #15
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d076      	beq.n	800821a <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a75      	ldr	r2, [pc, #468]	@ (8008308 <I2C_Slave_ISR_DMA+0x274>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d059      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a73      	ldr	r2, [pc, #460]	@ (800830c <I2C_Slave_ISR_DMA+0x278>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d053      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a71      	ldr	r2, [pc, #452]	@ (8008310 <I2C_Slave_ISR_DMA+0x27c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d04d      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a6f      	ldr	r2, [pc, #444]	@ (8008314 <I2C_Slave_ISR_DMA+0x280>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d047      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a6d      	ldr	r2, [pc, #436]	@ (8008318 <I2C_Slave_ISR_DMA+0x284>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d041      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a6b      	ldr	r2, [pc, #428]	@ (800831c <I2C_Slave_ISR_DMA+0x288>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d03b      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a69      	ldr	r2, [pc, #420]	@ (8008320 <I2C_Slave_ISR_DMA+0x28c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d035      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a67      	ldr	r2, [pc, #412]	@ (8008324 <I2C_Slave_ISR_DMA+0x290>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d02f      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a65      	ldr	r2, [pc, #404]	@ (8008328 <I2C_Slave_ISR_DMA+0x294>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d029      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a63      	ldr	r2, [pc, #396]	@ (800832c <I2C_Slave_ISR_DMA+0x298>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d023      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a61      	ldr	r2, [pc, #388]	@ (8008330 <I2C_Slave_ISR_DMA+0x29c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d01d      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a5f      	ldr	r2, [pc, #380]	@ (8008334 <I2C_Slave_ISR_DMA+0x2a0>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d017      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a5d      	ldr	r2, [pc, #372]	@ (8008338 <I2C_Slave_ISR_DMA+0x2a4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d011      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a5b      	ldr	r2, [pc, #364]	@ (800833c <I2C_Slave_ISR_DMA+0x2a8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00b      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a59      	ldr	r2, [pc, #356]	@ (8008340 <I2C_Slave_ISR_DMA+0x2ac>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d005      	beq.n	80081ec <I2C_Slave_ISR_DMA+0x158>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a57      	ldr	r2, [pc, #348]	@ (8008344 <I2C_Slave_ISR_DMA+0x2b0>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d109      	bne.n	8008200 <I2C_Slave_ISR_DMA+0x16c>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bf0c      	ite	eq
 80081f8:	2301      	moveq	r3, #1
 80081fa:	2300      	movne	r3, #0
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	e008      	b.n	8008212 <I2C_Slave_ISR_DMA+0x17e>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	bf0c      	ite	eq
 800820c:	2301      	moveq	r3, #1
 800820e:	2300      	movne	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8008216:	2301      	movs	r3, #1
 8008218:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 809f 	beq.w	8008362 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	0b9b      	lsrs	r3, r3, #14
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 8098 	beq.w	8008362 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a33      	ldr	r2, [pc, #204]	@ (8008308 <I2C_Slave_ISR_DMA+0x274>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d059      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a31      	ldr	r2, [pc, #196]	@ (800830c <I2C_Slave_ISR_DMA+0x278>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d053      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a2f      	ldr	r2, [pc, #188]	@ (8008310 <I2C_Slave_ISR_DMA+0x27c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d04d      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a2d      	ldr	r2, [pc, #180]	@ (8008314 <I2C_Slave_ISR_DMA+0x280>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d047      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a2b      	ldr	r2, [pc, #172]	@ (8008318 <I2C_Slave_ISR_DMA+0x284>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d041      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a29      	ldr	r2, [pc, #164]	@ (800831c <I2C_Slave_ISR_DMA+0x288>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d03b      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a27      	ldr	r2, [pc, #156]	@ (8008320 <I2C_Slave_ISR_DMA+0x28c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d035      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a25      	ldr	r2, [pc, #148]	@ (8008324 <I2C_Slave_ISR_DMA+0x290>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d02f      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a23      	ldr	r2, [pc, #140]	@ (8008328 <I2C_Slave_ISR_DMA+0x294>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d029      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a21      	ldr	r2, [pc, #132]	@ (800832c <I2C_Slave_ISR_DMA+0x298>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d023      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a1f      	ldr	r2, [pc, #124]	@ (8008330 <I2C_Slave_ISR_DMA+0x29c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d01d      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008334 <I2C_Slave_ISR_DMA+0x2a0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d017      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a1b      	ldr	r2, [pc, #108]	@ (8008338 <I2C_Slave_ISR_DMA+0x2a4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d011      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a19      	ldr	r2, [pc, #100]	@ (800833c <I2C_Slave_ISR_DMA+0x2a8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d00b      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a17      	ldr	r2, [pc, #92]	@ (8008340 <I2C_Slave_ISR_DMA+0x2ac>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d005      	beq.n	80082f2 <I2C_Slave_ISR_DMA+0x25e>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a15      	ldr	r2, [pc, #84]	@ (8008344 <I2C_Slave_ISR_DMA+0x2b0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d12a      	bne.n	8008348 <I2C_Slave_ISR_DMA+0x2b4>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	bf0c      	ite	eq
 80082fe:	2301      	moveq	r3, #1
 8008300:	2300      	movne	r3, #0
 8008302:	b2db      	uxtb	r3, r3
 8008304:	e029      	b.n	800835a <I2C_Slave_ISR_DMA+0x2c6>
 8008306:	bf00      	nop
 8008308:	40020010 	.word	0x40020010
 800830c:	40020028 	.word	0x40020028
 8008310:	40020040 	.word	0x40020040
 8008314:	40020058 	.word	0x40020058
 8008318:	40020070 	.word	0x40020070
 800831c:	40020088 	.word	0x40020088
 8008320:	400200a0 	.word	0x400200a0
 8008324:	400200b8 	.word	0x400200b8
 8008328:	40020410 	.word	0x40020410
 800832c:	40020428 	.word	0x40020428
 8008330:	40020440 	.word	0x40020440
 8008334:	40020458 	.word	0x40020458
 8008338:	40020470 	.word	0x40020470
 800833c:	40020488 	.word	0x40020488
 8008340:	400204a0 	.word	0x400204a0
 8008344:	400204b8 	.word	0x400204b8
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	bf0c      	ite	eq
 8008354:	2301      	moveq	r3, #1
 8008356:	2300      	movne	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800835e:	2301      	movs	r3, #1
 8008360:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d128      	bne.n	80083ba <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b28      	cmp	r3, #40	@ 0x28
 8008372:	d108      	bne.n	8008386 <I2C_Slave_ISR_DMA+0x2f2>
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800837a:	d104      	bne.n	8008386 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fcb0 	bl	8008ce4 <I2C_ITListenCplt>
 8008384:	e048      	b.n	8008418 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b29      	cmp	r3, #41	@ 0x29
 8008390:	d10e      	bne.n	80083b0 <I2C_Slave_ISR_DMA+0x31c>
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008398:	d00a      	beq.n	80083b0 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2210      	movs	r2, #16
 80083a0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f000 fe0b 	bl	8008fbe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f918 	bl	80085de <I2C_ITSlaveSeqCplt>
 80083ae:	e033      	b.n	8008418 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2210      	movs	r2, #16
 80083b6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80083b8:	e034      	b.n	8008424 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2210      	movs	r2, #16
 80083c0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c6:	f043 0204 	orr.w	r2, r3, #4
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083d4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <I2C_Slave_ISR_DMA+0x350>
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083e2:	d11f      	bne.n	8008424 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	2b21      	cmp	r3, #33	@ 0x21
 80083e8:	d002      	beq.n	80083f0 <I2C_Slave_ISR_DMA+0x35c>
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b29      	cmp	r3, #41	@ 0x29
 80083ee:	d103      	bne.n	80083f8 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2221      	movs	r2, #33	@ 0x21
 80083f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80083f6:	e008      	b.n	800840a <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
 80083fa:	2b22      	cmp	r3, #34	@ 0x22
 80083fc:	d002      	beq.n	8008404 <I2C_Slave_ISR_DMA+0x370>
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	2b2a      	cmp	r3, #42	@ 0x2a
 8008402:	d102      	bne.n	800840a <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2222      	movs	r2, #34	@ 0x22
 8008408:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800840e:	4619      	mov	r1, r3
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 fcbd 	bl	8008d90 <I2C_ITError>
      if (treatdmanack == 1U)
 8008416:	e005      	b.n	8008424 <I2C_Slave_ISR_DMA+0x390>
 8008418:	e004      	b.n	8008424 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2210      	movs	r2, #16
 8008420:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008422:	e011      	b.n	8008448 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8008424:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008426:	e00f      	b.n	8008448 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	08db      	lsrs	r3, r3, #3
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b00      	cmp	r3, #0
 8008432:	d009      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	08db      	lsrs	r3, r3, #3
 8008438:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 f80a 	bl	800845c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3720      	adds	r7, #32
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop

0800845c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008472:	2b28      	cmp	r3, #40	@ 0x28
 8008474:	d16a      	bne.n	800854c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	0c1b      	lsrs	r3, r3, #16
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	0c1b      	lsrs	r3, r3, #16
 800848e:	b29b      	uxth	r3, r3
 8008490:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008494:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	b29b      	uxth	r3, r3
 800849e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084a2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80084b0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d138      	bne.n	800852c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80084ba:	897b      	ldrh	r3, [r7, #10]
 80084bc:	09db      	lsrs	r3, r3, #7
 80084be:	b29a      	uxth	r2, r3
 80084c0:	89bb      	ldrh	r3, [r7, #12]
 80084c2:	4053      	eors	r3, r2
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	f003 0306 	and.w	r3, r3, #6
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d11c      	bne.n	8008508 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80084ce:	897b      	ldrh	r3, [r7, #10]
 80084d0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d13b      	bne.n	800855c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2208      	movs	r2, #8
 80084f0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80084fa:	89ba      	ldrh	r2, [r7, #12]
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7ff f92c 	bl	800775e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008506:	e029      	b.n	800855c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008508:	893b      	ldrh	r3, [r7, #8]
 800850a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800850c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 f995 	bl	8009840 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800851e:	89ba      	ldrh	r2, [r7, #12]
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7ff f91a 	bl	800775e <HAL_I2C_AddrCallback>
}
 800852a:	e017      	b.n	800855c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800852c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f985 	bl	8009840 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800853e:	89ba      	ldrh	r2, [r7, #12]
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff f90a 	bl	800775e <HAL_I2C_AddrCallback>
}
 800854a:	e007      	b.n	800855c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2208      	movs	r2, #8
 8008552:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b21      	cmp	r3, #33	@ 0x21
 800857e:	d115      	bne.n	80085ac <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2211      	movs	r2, #17
 800858c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008594:	2101      	movs	r1, #1
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 f952 	bl	8009840 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff f8b2 	bl	800770e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085aa:	e014      	b.n	80085d6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2212      	movs	r2, #18
 80085b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80085c0:	2102      	movs	r1, #2
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 f93c 	bl	8009840 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff f8a6 	bl	8007722 <HAL_I2C_MasterRxCpltCallback>
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	0b9b      	lsrs	r3, r3, #14
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d008      	beq.n	8008614 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	e00d      	b.n	8008630 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	0bdb      	lsrs	r3, r3, #15
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d007      	beq.n	8008630 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800862e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b29      	cmp	r3, #41	@ 0x29
 800863a:	d112      	bne.n	8008662 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2228      	movs	r2, #40	@ 0x28
 8008640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2221      	movs	r2, #33	@ 0x21
 8008648:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800864a:	2101      	movs	r1, #1
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 f8f7 	bl	8009840 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff f86b 	bl	8007736 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008660:	e017      	b.n	8008692 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b2a      	cmp	r3, #42	@ 0x2a
 800866c:	d111      	bne.n	8008692 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2228      	movs	r2, #40	@ 0x28
 8008672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2222      	movs	r2, #34	@ 0x22
 800867a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800867c:	2102      	movs	r1, #2
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 f8de 	bl	8009840 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff f85c 	bl	800774a <HAL_I2C_SlaveRxCpltCallback>
}
 8008692:	bf00      	nop
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2220      	movs	r2, #32
 80086b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b21      	cmp	r3, #33	@ 0x21
 80086bc:	d107      	bne.n	80086ce <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80086be:	2101      	movs	r1, #1
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 f8bd 	bl	8009840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2211      	movs	r2, #17
 80086ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80086cc:	e00c      	b.n	80086e8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b22      	cmp	r3, #34	@ 0x22
 80086d8:	d106      	bne.n	80086e8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80086da:	2102      	movs	r1, #2
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 f8af 	bl	8009840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2212      	movs	r2, #18
 80086e6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6859      	ldr	r1, [r3, #4]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4b4d      	ldr	r3, [pc, #308]	@ (8008828 <I2C_ITMasterCplt+0x18c>)
 80086f4:	400b      	ands	r3, r1
 80086f6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a4a      	ldr	r2, [pc, #296]	@ (800882c <I2C_ITMasterCplt+0x190>)
 8008702:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	091b      	lsrs	r3, r3, #4
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	d009      	beq.n	8008724 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2210      	movs	r2, #16
 8008716:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800871c:	f043 0204 	orr.w	r2, r3, #4
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b60      	cmp	r3, #96	@ 0x60
 800872e:	d10b      	bne.n	8008748 <I2C_ITMasterCplt+0xac>
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	089b      	lsrs	r3, r3, #2
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008742:	b2db      	uxtb	r3, r3
 8008744:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008746:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fc38 	bl	8008fbe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008752:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b60      	cmp	r3, #96	@ 0x60
 800875e:	d002      	beq.n	8008766 <I2C_ITMasterCplt+0xca>
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d006      	beq.n	8008774 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fb0f 	bl	8008d90 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008772:	e054      	b.n	800881e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b21      	cmp	r3, #33	@ 0x21
 800877e:	d124      	bne.n	80087ca <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2220      	movs	r2, #32
 8008784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b40      	cmp	r3, #64	@ 0x40
 8008798:	d10b      	bne.n	80087b2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fe ffef 	bl	800778e <HAL_I2C_MemTxCpltCallback>
}
 80087b0:	e035      	b.n	800881e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7fe ffa3 	bl	800770e <HAL_I2C_MasterTxCpltCallback>
}
 80087c8:	e029      	b.n	800881e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b22      	cmp	r3, #34	@ 0x22
 80087d4:	d123      	bne.n	800881e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b40      	cmp	r3, #64	@ 0x40
 80087ee:	d10b      	bne.n	8008808 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7fe ffce 	bl	80077a2 <HAL_I2C_MemRxCpltCallback>
}
 8008806:	e00a      	b.n	800881e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7fe ff82 	bl	8007722 <HAL_I2C_MasterRxCpltCallback>
}
 800881e:	bf00      	nop
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	fe00e800 	.word	0xfe00e800
 800882c:	ffff0000 	.word	0xffff0000

08008830 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008852:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2220      	movs	r2, #32
 800885a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	2b21      	cmp	r3, #33	@ 0x21
 8008860:	d002      	beq.n	8008868 <I2C_ITSlaveCplt+0x38>
 8008862:	7afb      	ldrb	r3, [r7, #11]
 8008864:	2b29      	cmp	r3, #41	@ 0x29
 8008866:	d108      	bne.n	800887a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008868:	f248 0101 	movw	r1, #32769	@ 0x8001
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 ffe7 	bl	8009840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2221      	movs	r2, #33	@ 0x21
 8008876:	631a      	str	r2, [r3, #48]	@ 0x30
 8008878:	e019      	b.n	80088ae <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	2b22      	cmp	r3, #34	@ 0x22
 800887e:	d002      	beq.n	8008886 <I2C_ITSlaveCplt+0x56>
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	2b2a      	cmp	r3, #42	@ 0x2a
 8008884:	d108      	bne.n	8008898 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008886:	f248 0102 	movw	r1, #32770	@ 0x8002
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 ffd8 	bl	8009840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2222      	movs	r2, #34	@ 0x22
 8008894:	631a      	str	r2, [r3, #48]	@ 0x30
 8008896:	e00a      	b.n	80088ae <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	2b28      	cmp	r3, #40	@ 0x28
 800889c:	d107      	bne.n	80088ae <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800889e:	f248 0103 	movw	r1, #32771	@ 0x8003
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 ffcc 	bl	8009840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088bc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6859      	ldr	r1, [r3, #4]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	4b80      	ldr	r3, [pc, #512]	@ (8008acc <I2C_ITSlaveCplt+0x29c>)
 80088ca:	400b      	ands	r3, r1
 80088cc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fb75 	bl	8008fbe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	0b9b      	lsrs	r3, r3, #14
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d07a      	beq.n	80089d6 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 8112 	beq.w	8008b1e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a73      	ldr	r2, [pc, #460]	@ (8008ad0 <I2C_ITSlaveCplt+0x2a0>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d059      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a71      	ldr	r2, [pc, #452]	@ (8008ad4 <I2C_ITSlaveCplt+0x2a4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d053      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a6f      	ldr	r2, [pc, #444]	@ (8008ad8 <I2C_ITSlaveCplt+0x2a8>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d04d      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a6d      	ldr	r2, [pc, #436]	@ (8008adc <I2C_ITSlaveCplt+0x2ac>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d047      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a6b      	ldr	r2, [pc, #428]	@ (8008ae0 <I2C_ITSlaveCplt+0x2b0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d041      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a69      	ldr	r2, [pc, #420]	@ (8008ae4 <I2C_ITSlaveCplt+0x2b4>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d03b      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a67      	ldr	r2, [pc, #412]	@ (8008ae8 <I2C_ITSlaveCplt+0x2b8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d035      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a65      	ldr	r2, [pc, #404]	@ (8008aec <I2C_ITSlaveCplt+0x2bc>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d02f      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a63      	ldr	r2, [pc, #396]	@ (8008af0 <I2C_ITSlaveCplt+0x2c0>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d029      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a61      	ldr	r2, [pc, #388]	@ (8008af4 <I2C_ITSlaveCplt+0x2c4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d023      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a5f      	ldr	r2, [pc, #380]	@ (8008af8 <I2C_ITSlaveCplt+0x2c8>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d01d      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a5d      	ldr	r2, [pc, #372]	@ (8008afc <I2C_ITSlaveCplt+0x2cc>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d017      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a5b      	ldr	r2, [pc, #364]	@ (8008b00 <I2C_ITSlaveCplt+0x2d0>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d011      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a59      	ldr	r2, [pc, #356]	@ (8008b04 <I2C_ITSlaveCplt+0x2d4>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d00b      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a57      	ldr	r2, [pc, #348]	@ (8008b08 <I2C_ITSlaveCplt+0x2d8>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d005      	beq.n	80089ba <I2C_ITSlaveCplt+0x18a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a55      	ldr	r2, [pc, #340]	@ (8008b0c <I2C_ITSlaveCplt+0x2dc>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d105      	bne.n	80089c6 <I2C_ITSlaveCplt+0x196>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	e004      	b.n	80089d0 <I2C_ITSlaveCplt+0x1a0>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80089d4:	e0a3      	b.n	8008b1e <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	0bdb      	lsrs	r3, r3, #15
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 809d 	beq.w	8008b1e <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80089f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 8090 	beq.w	8008b1e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a32      	ldr	r2, [pc, #200]	@ (8008ad0 <I2C_ITSlaveCplt+0x2a0>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d059      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a30      	ldr	r2, [pc, #192]	@ (8008ad4 <I2C_ITSlaveCplt+0x2a4>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d053      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8008ad8 <I2C_ITSlaveCplt+0x2a8>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d04d      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a2c      	ldr	r2, [pc, #176]	@ (8008adc <I2C_ITSlaveCplt+0x2ac>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d047      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a2a      	ldr	r2, [pc, #168]	@ (8008ae0 <I2C_ITSlaveCplt+0x2b0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d041      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a28      	ldr	r2, [pc, #160]	@ (8008ae4 <I2C_ITSlaveCplt+0x2b4>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d03b      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a26      	ldr	r2, [pc, #152]	@ (8008ae8 <I2C_ITSlaveCplt+0x2b8>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d035      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a24      	ldr	r2, [pc, #144]	@ (8008aec <I2C_ITSlaveCplt+0x2bc>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d02f      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a22      	ldr	r2, [pc, #136]	@ (8008af0 <I2C_ITSlaveCplt+0x2c0>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d029      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a20      	ldr	r2, [pc, #128]	@ (8008af4 <I2C_ITSlaveCplt+0x2c4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d023      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8008af8 <I2C_ITSlaveCplt+0x2c8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d01d      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a1c      	ldr	r2, [pc, #112]	@ (8008afc <I2C_ITSlaveCplt+0x2cc>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d017      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1a      	ldr	r2, [pc, #104]	@ (8008b00 <I2C_ITSlaveCplt+0x2d0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d011      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a18      	ldr	r2, [pc, #96]	@ (8008b04 <I2C_ITSlaveCplt+0x2d4>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00b      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a16      	ldr	r2, [pc, #88]	@ (8008b08 <I2C_ITSlaveCplt+0x2d8>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d005      	beq.n	8008abe <I2C_ITSlaveCplt+0x28e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a14      	ldr	r2, [pc, #80]	@ (8008b0c <I2C_ITSlaveCplt+0x2dc>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d128      	bne.n	8008b10 <I2C_ITSlaveCplt+0x2e0>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	e027      	b.n	8008b1a <I2C_ITSlaveCplt+0x2ea>
 8008aca:	bf00      	nop
 8008acc:	fe00e800 	.word	0xfe00e800
 8008ad0:	40020010 	.word	0x40020010
 8008ad4:	40020028 	.word	0x40020028
 8008ad8:	40020040 	.word	0x40020040
 8008adc:	40020058 	.word	0x40020058
 8008ae0:	40020070 	.word	0x40020070
 8008ae4:	40020088 	.word	0x40020088
 8008ae8:	400200a0 	.word	0x400200a0
 8008aec:	400200b8 	.word	0x400200b8
 8008af0:	40020410 	.word	0x40020410
 8008af4:	40020428 	.word	0x40020428
 8008af8:	40020440 	.word	0x40020440
 8008afc:	40020458 	.word	0x40020458
 8008b00:	40020470 	.word	0x40020470
 8008b04:	40020488 	.word	0x40020488
 8008b08:	400204a0 	.word	0x400204a0
 8008b0c:	400204b8 	.word	0x400204b8
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	089b      	lsrs	r3, r3, #2
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d020      	beq.n	8008b6c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f023 0304 	bic.w	r3, r3, #4
 8008b30:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3c:	b2d2      	uxtb	r2, r2
 8008b3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00c      	beq.n	8008b6c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b56:	3b01      	subs	r3, #1
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b7a:	f043 0204 	orr.w	r2, r3, #4
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	091b      	lsrs	r3, r3, #4
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d04a      	beq.n	8008c24 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	091b      	lsrs	r3, r3, #4
 8008b92:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d044      	beq.n	8008c24 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d128      	bne.n	8008bf6 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b28      	cmp	r3, #40	@ 0x28
 8008bae:	d108      	bne.n	8008bc2 <I2C_ITSlaveCplt+0x392>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bb6:	d104      	bne.n	8008bc2 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008bb8:	6979      	ldr	r1, [r7, #20]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f892 	bl	8008ce4 <I2C_ITListenCplt>
 8008bc0:	e030      	b.n	8008c24 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b29      	cmp	r3, #41	@ 0x29
 8008bcc:	d10e      	bne.n	8008bec <I2C_ITSlaveCplt+0x3bc>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008bd4:	d00a      	beq.n	8008bec <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2210      	movs	r2, #16
 8008bdc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f9ed 	bl	8008fbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff fcfa 	bl	80085de <I2C_ITSlaveSeqCplt>
 8008bea:	e01b      	b.n	8008c24 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2210      	movs	r2, #16
 8008bf2:	61da      	str	r2, [r3, #28]
 8008bf4:	e016      	b.n	8008c24 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2210      	movs	r2, #16
 8008bfc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c02:	f043 0204 	orr.w	r2, r3, #4
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <I2C_ITSlaveCplt+0x3e8>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c16:	d105      	bne.n	8008c24 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f8b6 	bl	8008d90 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d010      	beq.n	8008c5c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f8a5 	bl	8008d90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b28      	cmp	r3, #40	@ 0x28
 8008c50:	d141      	bne.n	8008cd6 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008c52:	6979      	ldr	r1, [r7, #20]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f845 	bl	8008ce4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008c5a:	e03c      	b.n	8008cd6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008c64:	d014      	beq.n	8008c90 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff fcb9 	bl	80085de <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ce0 <I2C_ITSlaveCplt+0x4b0>)
 8008c70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7fe fd76 	bl	800777a <HAL_I2C_ListenCpltCallback>
}
 8008c8e:	e022      	b.n	8008cd6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b22      	cmp	r3, #34	@ 0x22
 8008c9a:	d10e      	bne.n	8008cba <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7fe fd49 	bl	800774a <HAL_I2C_SlaveRxCpltCallback>
}
 8008cb8:	e00d      	b.n	8008cd6 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7fe fd30 	bl	8007736 <HAL_I2C_SlaveTxCpltCallback>
}
 8008cd6:	bf00      	nop
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	ffff0000 	.word	0xffff0000

08008ce4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a26      	ldr	r2, [pc, #152]	@ (8008d8c <I2C_ITListenCplt+0xa8>)
 8008cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	089b      	lsrs	r3, r3, #2
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d022      	beq.n	8008d62 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d26:	b2d2      	uxtb	r2, r2
 8008d28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d012      	beq.n	8008d62 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d5a:	f043 0204 	orr.w	r2, r3, #4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008d62:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fd6a 	bl	8009840 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2210      	movs	r2, #16
 8008d72:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7fe fcfc 	bl	800777a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	ffff0000 	.word	0xffff0000

08008d90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008da0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a6d      	ldr	r2, [pc, #436]	@ (8008f64 <I2C_ITError+0x1d4>)
 8008dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	2b28      	cmp	r3, #40	@ 0x28
 8008dc6:	d005      	beq.n	8008dd4 <I2C_ITError+0x44>
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	2b29      	cmp	r3, #41	@ 0x29
 8008dcc:	d002      	beq.n	8008dd4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd2:	d10b      	bne.n	8008dec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008dd4:	2103      	movs	r1, #3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fd32 	bl	8009840 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2228      	movs	r2, #40	@ 0x28
 8008de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a60      	ldr	r2, [pc, #384]	@ (8008f68 <I2C_ITError+0x1d8>)
 8008de8:	635a      	str	r2, [r3, #52]	@ 0x34
 8008dea:	e030      	b.n	8008e4e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008dec:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fd25 	bl	8009840 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f8e1 	bl	8008fbe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b60      	cmp	r3, #96	@ 0x60
 8008e06:	d01f      	beq.n	8008e48 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b20      	cmp	r3, #32
 8008e1c:	d114      	bne.n	8008e48 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	f003 0310 	and.w	r3, r3, #16
 8008e28:	2b10      	cmp	r3, #16
 8008e2a:	d109      	bne.n	8008e40 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2210      	movs	r2, #16
 8008e32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e38:	f043 0204 	orr.w	r2, r3, #4
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2220      	movs	r2, #32
 8008e46:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d039      	beq.n	8008ed0 <I2C_ITError+0x140>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b11      	cmp	r3, #17
 8008e60:	d002      	beq.n	8008e68 <I2C_ITError+0xd8>
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2b21      	cmp	r3, #33	@ 0x21
 8008e66:	d133      	bne.n	8008ed0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e76:	d107      	bne.n	8008e88 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e86:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fd fb2f 	bl	80064f0 <HAL_DMA_GetState>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d017      	beq.n	8008ec8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9c:	4a33      	ldr	r2, [pc, #204]	@ (8008f6c <I2C_ITError+0x1dc>)
 8008e9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fc f9af 	bl	8005210 <HAL_DMA_Abort_IT>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d04d      	beq.n	8008f54 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ec6:	e045      	b.n	8008f54 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f851 	bl	8008f70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ece:	e041      	b.n	8008f54 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d039      	beq.n	8008f4c <I2C_ITError+0x1bc>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b12      	cmp	r3, #18
 8008edc:	d002      	beq.n	8008ee4 <I2C_ITError+0x154>
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2b22      	cmp	r3, #34	@ 0x22
 8008ee2:	d133      	bne.n	8008f4c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ef2:	d107      	bne.n	8008f04 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fd faf1 	bl	80064f0 <HAL_DMA_GetState>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d017      	beq.n	8008f44 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f18:	4a14      	ldr	r2, [pc, #80]	@ (8008f6c <I2C_ITError+0x1dc>)
 8008f1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fc f971 	bl	8005210 <HAL_DMA_Abort_IT>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d011      	beq.n	8008f58 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008f3e:	4610      	mov	r0, r2
 8008f40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f42:	e009      	b.n	8008f58 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f813 	bl	8008f70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f4a:	e005      	b.n	8008f58 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f80f 	bl	8008f70 <I2C_TreatErrorCallback>
  }
}
 8008f52:	e002      	b.n	8008f5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f54:	bf00      	nop
 8008f56:	e000      	b.n	8008f5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f58:	bf00      	nop
}
 8008f5a:	bf00      	nop
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	ffff0000 	.word	0xffff0000
 8008f68:	08007a47 	.word	0x08007a47
 8008f6c:	08009311 	.word	0x08009311

08008f70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b60      	cmp	r3, #96	@ 0x60
 8008f82:	d10e      	bne.n	8008fa2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2220      	movs	r2, #32
 8008f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7fe fc15 	bl	80077ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008fa0:	e009      	b.n	8008fb6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7fe fc00 	bl	80077b6 <HAL_I2C_ErrorCallback>
}
 8008fb6:	bf00      	nop
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	f003 0302 	and.w	r3, r3, #2
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d103      	bne.n	8008fdc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d007      	beq.n	8008ffa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	699a      	ldr	r2, [r3, #24]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f042 0201 	orr.w	r2, r2, #1
 8008ff8:	619a      	str	r2, [r3, #24]
  }
}
 8008ffa:	bf00      	nop
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009012:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009022:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d104      	bne.n	8009038 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800902e:	2120      	movs	r1, #32
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fb81 	bl	8009738 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009036:	e02d      	b.n	8009094 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009040:	441a      	add	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800904a:	b29b      	uxth	r3, r3
 800904c:	2bff      	cmp	r3, #255	@ 0xff
 800904e:	d903      	bls.n	8009058 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	22ff      	movs	r2, #255	@ 0xff
 8009054:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009056:	e004      	b.n	8009062 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800905c:	b29a      	uxth	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906a:	4619      	mov	r1, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3328      	adds	r3, #40	@ 0x28
 8009072:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8009078:	f7fb fb42 	bl	8004700 <HAL_DMA_Start_IT>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d004      	beq.n	800908c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009082:	2110      	movs	r1, #16
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7ff fe83 	bl	8008d90 <I2C_ITError>
}
 800908a:	e003      	b.n	8009094 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800908c:	2140      	movs	r1, #64	@ 0x40
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 fb52 	bl	8009738 <I2C_Enable_IRQ>
}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d076      	beq.n	80091a4 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a71      	ldr	r2, [pc, #452]	@ (8009284 <I2C_DMAError+0x1e8>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d059      	beq.n	8009176 <I2C_DMAError+0xda>
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a6f      	ldr	r2, [pc, #444]	@ (8009288 <I2C_DMAError+0x1ec>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d053      	beq.n	8009176 <I2C_DMAError+0xda>
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a6d      	ldr	r2, [pc, #436]	@ (800928c <I2C_DMAError+0x1f0>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d04d      	beq.n	8009176 <I2C_DMAError+0xda>
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a6b      	ldr	r2, [pc, #428]	@ (8009290 <I2C_DMAError+0x1f4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d047      	beq.n	8009176 <I2C_DMAError+0xda>
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a69      	ldr	r2, [pc, #420]	@ (8009294 <I2C_DMAError+0x1f8>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d041      	beq.n	8009176 <I2C_DMAError+0xda>
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a67      	ldr	r2, [pc, #412]	@ (8009298 <I2C_DMAError+0x1fc>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d03b      	beq.n	8009176 <I2C_DMAError+0xda>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a65      	ldr	r2, [pc, #404]	@ (800929c <I2C_DMAError+0x200>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d035      	beq.n	8009176 <I2C_DMAError+0xda>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a63      	ldr	r2, [pc, #396]	@ (80092a0 <I2C_DMAError+0x204>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d02f      	beq.n	8009176 <I2C_DMAError+0xda>
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a61      	ldr	r2, [pc, #388]	@ (80092a4 <I2C_DMAError+0x208>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d029      	beq.n	8009176 <I2C_DMAError+0xda>
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a5f      	ldr	r2, [pc, #380]	@ (80092a8 <I2C_DMAError+0x20c>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d023      	beq.n	8009176 <I2C_DMAError+0xda>
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a5d      	ldr	r2, [pc, #372]	@ (80092ac <I2C_DMAError+0x210>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d01d      	beq.n	8009176 <I2C_DMAError+0xda>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a5b      	ldr	r2, [pc, #364]	@ (80092b0 <I2C_DMAError+0x214>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d017      	beq.n	8009176 <I2C_DMAError+0xda>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a59      	ldr	r2, [pc, #356]	@ (80092b4 <I2C_DMAError+0x218>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d011      	beq.n	8009176 <I2C_DMAError+0xda>
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a57      	ldr	r2, [pc, #348]	@ (80092b8 <I2C_DMAError+0x21c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d00b      	beq.n	8009176 <I2C_DMAError+0xda>
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a55      	ldr	r2, [pc, #340]	@ (80092bc <I2C_DMAError+0x220>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d005      	beq.n	8009176 <I2C_DMAError+0xda>
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a53      	ldr	r2, [pc, #332]	@ (80092c0 <I2C_DMAError+0x224>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d109      	bne.n	800918a <I2C_DMAError+0xee>
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	bf0c      	ite	eq
 8009182:	2301      	moveq	r3, #1
 8009184:	2300      	movne	r3, #0
 8009186:	b2db      	uxtb	r3, r3
 8009188:	e008      	b.n	800919c <I2C_DMAError+0x100>
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	bf0c      	ite	eq
 8009196:	2301      	moveq	r3, #1
 8009198:	2300      	movne	r3, #0
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80091a0:	2301      	movs	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 8098 	beq.w	80092de <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a33      	ldr	r2, [pc, #204]	@ (8009284 <I2C_DMAError+0x1e8>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d059      	beq.n	800926e <I2C_DMAError+0x1d2>
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a31      	ldr	r2, [pc, #196]	@ (8009288 <I2C_DMAError+0x1ec>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d053      	beq.n	800926e <I2C_DMAError+0x1d2>
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a2f      	ldr	r2, [pc, #188]	@ (800928c <I2C_DMAError+0x1f0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d04d      	beq.n	800926e <I2C_DMAError+0x1d2>
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a2d      	ldr	r2, [pc, #180]	@ (8009290 <I2C_DMAError+0x1f4>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d047      	beq.n	800926e <I2C_DMAError+0x1d2>
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a2b      	ldr	r2, [pc, #172]	@ (8009294 <I2C_DMAError+0x1f8>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d041      	beq.n	800926e <I2C_DMAError+0x1d2>
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a29      	ldr	r2, [pc, #164]	@ (8009298 <I2C_DMAError+0x1fc>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d03b      	beq.n	800926e <I2C_DMAError+0x1d2>
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a27      	ldr	r2, [pc, #156]	@ (800929c <I2C_DMAError+0x200>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d035      	beq.n	800926e <I2C_DMAError+0x1d2>
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a25      	ldr	r2, [pc, #148]	@ (80092a0 <I2C_DMAError+0x204>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d02f      	beq.n	800926e <I2C_DMAError+0x1d2>
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a23      	ldr	r2, [pc, #140]	@ (80092a4 <I2C_DMAError+0x208>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d029      	beq.n	800926e <I2C_DMAError+0x1d2>
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a21      	ldr	r2, [pc, #132]	@ (80092a8 <I2C_DMAError+0x20c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d023      	beq.n	800926e <I2C_DMAError+0x1d2>
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a1f      	ldr	r2, [pc, #124]	@ (80092ac <I2C_DMAError+0x210>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d01d      	beq.n	800926e <I2C_DMAError+0x1d2>
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a1d      	ldr	r2, [pc, #116]	@ (80092b0 <I2C_DMAError+0x214>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d017      	beq.n	800926e <I2C_DMAError+0x1d2>
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a1b      	ldr	r2, [pc, #108]	@ (80092b4 <I2C_DMAError+0x218>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d011      	beq.n	800926e <I2C_DMAError+0x1d2>
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a19      	ldr	r2, [pc, #100]	@ (80092b8 <I2C_DMAError+0x21c>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d00b      	beq.n	800926e <I2C_DMAError+0x1d2>
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a17      	ldr	r2, [pc, #92]	@ (80092bc <I2C_DMAError+0x220>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d005      	beq.n	800926e <I2C_DMAError+0x1d2>
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a15      	ldr	r2, [pc, #84]	@ (80092c0 <I2C_DMAError+0x224>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d12a      	bne.n	80092c4 <I2C_DMAError+0x228>
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	bf0c      	ite	eq
 800927a:	2301      	moveq	r3, #1
 800927c:	2300      	movne	r3, #0
 800927e:	b2db      	uxtb	r3, r3
 8009280:	e029      	b.n	80092d6 <I2C_DMAError+0x23a>
 8009282:	bf00      	nop
 8009284:	40020010 	.word	0x40020010
 8009288:	40020028 	.word	0x40020028
 800928c:	40020040 	.word	0x40020040
 8009290:	40020058 	.word	0x40020058
 8009294:	40020070 	.word	0x40020070
 8009298:	40020088 	.word	0x40020088
 800929c:	400200a0 	.word	0x400200a0
 80092a0:	400200b8 	.word	0x400200b8
 80092a4:	40020410 	.word	0x40020410
 80092a8:	40020428 	.word	0x40020428
 80092ac:	40020440 	.word	0x40020440
 80092b0:	40020458 	.word	0x40020458
 80092b4:	40020470 	.word	0x40020470
 80092b8:	40020488 	.word	0x40020488
 80092bc:	400204a0 	.word	0x400204a0
 80092c0:	400204b8 	.word	0x400204b8
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	bf0c      	ite	eq
 80092d0:	2301      	moveq	r3, #1
 80092d2:	2300      	movne	r3, #0
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 80092da:	2301      	movs	r3, #1
 80092dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7fd f914 	bl	800650c <HAL_DMA_GetError>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d00e      	beq.n	8009308 <I2C_DMAError+0x26c>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092fe:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009300:	2110      	movs	r1, #16
 8009302:	68b8      	ldr	r0, [r7, #8]
 8009304:	f7ff fd44 	bl	8008d90 <I2C_ITError>
  }
}
 8009308:	bf00      	nop
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932a:	2200      	movs	r2, #0
 800932c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800933a:	2200      	movs	r2, #0
 800933c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff fe16 	bl	8008f70 <I2C_TreatErrorCallback>
}
 8009344:	bf00      	nop
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	603b      	str	r3, [r7, #0]
 8009358:	4613      	mov	r3, r2
 800935a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800935c:	e03b      	b.n	80093d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 f8d6 	bl	8009514 <I2C_IsErrorOccurred>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e041      	b.n	80093f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d02d      	beq.n	80093d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800937a:	f7f9 f9ef 	bl	800275c <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d302      	bcc.n	8009390 <I2C_WaitOnFlagUntilTimeout+0x44>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d122      	bne.n	80093d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	699a      	ldr	r2, [r3, #24]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	4013      	ands	r3, r2
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	429a      	cmp	r2, r3
 800939e:	bf0c      	ite	eq
 80093a0:	2301      	moveq	r3, #1
 80093a2:	2300      	movne	r3, #0
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d113      	bne.n	80093d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b2:	f043 0220 	orr.w	r2, r3, #32
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2220      	movs	r2, #32
 80093be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e00f      	b.n	80093f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	699a      	ldr	r2, [r3, #24]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4013      	ands	r3, r2
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	bf0c      	ite	eq
 80093e6:	2301      	moveq	r3, #1
 80093e8:	2300      	movne	r3, #0
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	461a      	mov	r2, r3
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d0b4      	beq.n	800935e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	60b9      	str	r1, [r7, #8]
 8009408:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800940a:	e033      	b.n	8009474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 f87f 	bl	8009514 <I2C_IsErrorOccurred>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e031      	b.n	8009484 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009426:	d025      	beq.n	8009474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009428:	f7f9 f998 	bl	800275c <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	429a      	cmp	r2, r3
 8009436:	d302      	bcc.n	800943e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d11a      	bne.n	8009474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f003 0302 	and.w	r3, r3, #2
 8009448:	2b02      	cmp	r3, #2
 800944a:	d013      	beq.n	8009474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009450:	f043 0220 	orr.w	r2, r3, #32
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e007      	b.n	8009484 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	f003 0302 	and.w	r3, r3, #2
 800947e:	2b02      	cmp	r3, #2
 8009480:	d1c4      	bne.n	800940c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009498:	e02f      	b.n	80094fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	68b9      	ldr	r1, [r7, #8]
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 f838 	bl	8009514 <I2C_IsErrorOccurred>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e02d      	b.n	800950a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ae:	f7f9 f955 	bl	800275c <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d302      	bcc.n	80094c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d11a      	bne.n	80094fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b20      	cmp	r3, #32
 80094d0:	d013      	beq.n	80094fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d6:	f043 0220 	orr.w	r2, r3, #32
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e007      	b.n	800950a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b20      	cmp	r3, #32
 8009506:	d1c8      	bne.n	800949a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08a      	sub	sp, #40	@ 0x28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b00      	cmp	r3, #0
 800953e:	d068      	beq.n	8009612 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2210      	movs	r2, #16
 8009546:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009548:	e049      	b.n	80095de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009550:	d045      	beq.n	80095de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009552:	f7f9 f903 	bl	800275c <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	429a      	cmp	r2, r3
 8009560:	d302      	bcc.n	8009568 <I2C_IsErrorOccurred+0x54>
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d13a      	bne.n	80095de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009572:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800957a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800958a:	d121      	bne.n	80095d0 <I2C_IsErrorOccurred+0xbc>
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009592:	d01d      	beq.n	80095d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009594:	7cfb      	ldrb	r3, [r7, #19]
 8009596:	2b20      	cmp	r3, #32
 8009598:	d01a      	beq.n	80095d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80095aa:	f7f9 f8d7 	bl	800275c <HAL_GetTick>
 80095ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095b0:	e00e      	b.n	80095d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80095b2:	f7f9 f8d3 	bl	800275c <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	2b19      	cmp	r3, #25
 80095be:	d907      	bls.n	80095d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	f043 0320 	orr.w	r3, r3, #32
 80095c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80095ce:	e006      	b.n	80095de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b20      	cmp	r3, #32
 80095dc:	d1e9      	bne.n	80095b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	f003 0320 	and.w	r3, r3, #32
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d003      	beq.n	80095f4 <I2C_IsErrorOccurred+0xe0>
 80095ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0aa      	beq.n	800954a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80095f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d103      	bne.n	8009604 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2220      	movs	r2, #32
 8009602:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	f043 0304 	orr.w	r3, r3, #4
 800960a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00b      	beq.n	800963c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	f043 0301 	orr.w	r3, r3, #1
 800962a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00b      	beq.n	800965e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	f043 0308 	orr.w	r3, r3, #8
 800964c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009656:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00b      	beq.n	8009680 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	f043 0302 	orr.w	r3, r3, #2
 800966e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009684:	2b00      	cmp	r3, #0
 8009686:	d01c      	beq.n	80096c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7ff fc98 	bl	8008fbe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6859      	ldr	r1, [r3, #4]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	4b0d      	ldr	r3, [pc, #52]	@ (80096d0 <I2C_IsErrorOccurred+0x1bc>)
 800969a:	400b      	ands	r3, r1
 800969c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	431a      	orrs	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80096c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3728      	adds	r7, #40	@ 0x28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	fe00e800 	.word	0xfe00e800

080096d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b087      	sub	sp, #28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	607b      	str	r3, [r7, #4]
 80096de:	460b      	mov	r3, r1
 80096e0:	817b      	strh	r3, [r7, #10]
 80096e2:	4613      	mov	r3, r2
 80096e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096e6:	897b      	ldrh	r3, [r7, #10]
 80096e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096ec:	7a7b      	ldrb	r3, [r7, #9]
 80096ee:	041b      	lsls	r3, r3, #16
 80096f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096f4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009702:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	0d5b      	lsrs	r3, r3, #21
 800970e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009712:	4b08      	ldr	r3, [pc, #32]	@ (8009734 <I2C_TransferConfig+0x60>)
 8009714:	430b      	orrs	r3, r1
 8009716:	43db      	mvns	r3, r3
 8009718:	ea02 0103 	and.w	r1, r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009726:	bf00      	nop
 8009728:	371c      	adds	r7, #28
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	03ff63ff 	.word	0x03ff63ff

08009738 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800974c:	4a39      	ldr	r2, [pc, #228]	@ (8009834 <I2C_Enable_IRQ+0xfc>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d032      	beq.n	80097b8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009756:	4a38      	ldr	r2, [pc, #224]	@ (8009838 <I2C_Enable_IRQ+0x100>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d02d      	beq.n	80097b8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009760:	4a36      	ldr	r2, [pc, #216]	@ (800983c <I2C_Enable_IRQ+0x104>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d028      	beq.n	80097b8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009766:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800976a:	2b00      	cmp	r3, #0
 800976c:	da03      	bge.n	8009776 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009774:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009776:	887b      	ldrh	r3, [r7, #2]
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009786:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009788:	887b      	ldrh	r3, [r7, #2]
 800978a:	f003 0302 	and.w	r3, r3, #2
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009798:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800979a:	887b      	ldrh	r3, [r7, #2]
 800979c:	2b10      	cmp	r3, #16
 800979e:	d103      	bne.n	80097a8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80097a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80097a8:	887b      	ldrh	r3, [r7, #2]
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	d133      	bne.n	8009816 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f043 0320 	orr.w	r3, r3, #32
 80097b4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80097b6:	e02e      	b.n	8009816 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80097b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	da03      	bge.n	80097c8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80097c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80097c8:	887b      	ldrh	r3, [r7, #2]
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80097d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80097da:	887b      	ldrh	r3, [r7, #2]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80097ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80097ec:	887b      	ldrh	r3, [r7, #2]
 80097ee:	2b10      	cmp	r3, #16
 80097f0:	d103      	bne.n	80097fa <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80097f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80097fa:	887b      	ldrh	r3, [r7, #2]
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	d103      	bne.n	8009808 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009806:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009808:	887b      	ldrh	r3, [r7, #2]
 800980a:	2b40      	cmp	r3, #64	@ 0x40
 800980c:	d103      	bne.n	8009816 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009814:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6819      	ldr	r1, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	430a      	orrs	r2, r1
 8009824:	601a      	str	r2, [r3, #0]
}
 8009826:	bf00      	nop
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	08007c4f 	.word	0x08007c4f
 8009838:	08008095 	.word	0x08008095
 800983c:	08007e35 	.word	0x08007e35

08009840 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009850:	887b      	ldrh	r3, [r7, #2]
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00f      	beq.n	800987a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009860:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009868:	b2db      	uxtb	r3, r3
 800986a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800986e:	2b28      	cmp	r3, #40	@ 0x28
 8009870:	d003      	beq.n	800987a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009878:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800987a:	887b      	ldrh	r3, [r7, #2]
 800987c:	f003 0302 	and.w	r3, r3, #2
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00f      	beq.n	80098a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800988a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009892:	b2db      	uxtb	r3, r3
 8009894:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009898:	2b28      	cmp	r3, #40	@ 0x28
 800989a:	d003      	beq.n	80098a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80098a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80098a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da03      	bge.n	80098b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80098b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80098b4:	887b      	ldrh	r3, [r7, #2]
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d103      	bne.n	80098c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80098c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80098c2:	887b      	ldrh	r3, [r7, #2]
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	d103      	bne.n	80098d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f043 0320 	orr.w	r3, r3, #32
 80098ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80098d0:	887b      	ldrh	r3, [r7, #2]
 80098d2:	2b40      	cmp	r3, #64	@ 0x40
 80098d4:	d103      	bne.n	80098de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	43da      	mvns	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	400a      	ands	r2, r1
 80098ee:	601a      	str	r2, [r3, #0]
}
 80098f0:	bf00      	nop
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b20      	cmp	r3, #32
 8009910:	d138      	bne.n	8009984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800991c:	2302      	movs	r3, #2
 800991e:	e032      	b.n	8009986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2224      	movs	r2, #36	@ 0x24
 800992c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 0201 	bic.w	r2, r2, #1
 800993e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800994e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6819      	ldr	r1, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	430a      	orrs	r2, r1
 800995e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f042 0201 	orr.w	r2, r2, #1
 800996e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2220      	movs	r2, #32
 8009974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	e000      	b.n	8009986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009984:	2302      	movs	r3, #2
  }
}
 8009986:	4618      	mov	r0, r3
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009992:	b480      	push	{r7}
 8009994:	b085      	sub	sp, #20
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	d139      	bne.n	8009a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d101      	bne.n	80099b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80099b2:	2302      	movs	r3, #2
 80099b4:	e033      	b.n	8009a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2224      	movs	r2, #36	@ 0x24
 80099c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f022 0201 	bic.w	r2, r2, #1
 80099d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80099e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	021b      	lsls	r3, r3, #8
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0201 	orr.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e000      	b.n	8009a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009a1c:	2302      	movs	r3, #2
  }
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
	...

08009a2c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e070      	b.n	8009b20 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d106      	bne.n	8009a58 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7f7 ffe2 	bl	8001a1c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0201 	orr.w	r2, r2, #1
 8009a6e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0201 	bic.w	r2, r2, #1
 8009a7e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009a8e:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009aae:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009abe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a19      	ldr	r2, [pc, #100]	@ (8009b28 <HAL_JPEG_Init+0xfc>)
 8009ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a18      	ldr	r2, [pc, #96]	@ (8009b2c <HAL_JPEG_Init+0x100>)
 8009aca:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fccd 	bl	800a478 <JPEG_Set_HuffEnc_Mem>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e018      	b.n	8009b20 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009afc:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	08018d6c 	.word	0x08018d6c
 8009b2c:	08018dac 	.word	0x08018dac

08009b30 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <HAL_JPEG_GetInfo+0x16>
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e083      	b.n	8009c52 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f003 0303 	and.w	r3, r3, #3
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d103      	bne.n	8009b60 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2210      	movs	r2, #16
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	e017      	b.n	8009b90 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	e00c      	b.n	8009b90 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	f003 0303 	and.w	r3, r3, #3
 8009b80:	2b03      	cmp	r3, #3
 8009b82:	d103      	bne.n	8009b8c <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2230      	movs	r2, #48	@ 0x30
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	e001      	b.n	8009b90 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e060      	b.n	8009c52 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	0c1b      	lsrs	r3, r3, #16
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	0c1b      	lsrs	r3, r3, #16
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b10      	cmp	r3, #16
 8009bb2:	d003      	beq.n	8009bbc <HAL_JPEG_GetInfo+0x8c>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b30      	cmp	r3, #48	@ 0x30
 8009bba:	d140      	bne.n	8009c3e <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	091b      	lsrs	r3, r3, #4
 8009bc4:	f003 030f 	and.w	r3, r3, #15
 8009bc8:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	091b      	lsrs	r3, r3, #4
 8009bd2:	f003 030f 	and.w	r3, r3, #15
 8009bd6:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	091b      	lsrs	r3, r3, #4
 8009be0:	f003 030f 	and.w	r3, r3, #15
 8009be4:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d109      	bne.n	8009c00 <HAL_JPEG_GetInfo+0xd0>
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d106      	bne.n	8009c00 <HAL_JPEG_GetInfo+0xd0>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d103      	bne.n	8009c00 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	605a      	str	r2, [r3, #4]
 8009bfe:	e01d      	b.n	8009c3c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d109      	bne.n	8009c1a <HAL_JPEG_GetInfo+0xea>
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d106      	bne.n	8009c1a <HAL_JPEG_GetInfo+0xea>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2200      	movs	r2, #0
 8009c16:	605a      	str	r2, [r3, #4]
 8009c18:	e010      	b.n	8009c3c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d109      	bne.n	8009c34 <HAL_JPEG_GetInfo+0x104>
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d106      	bne.n	8009c34 <HAL_JPEG_GetInfo+0x104>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d103      	bne.n	8009c34 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	605a      	str	r2, [r3, #4]
 8009c32:	e003      	b.n	8009c3c <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2200      	movs	r2, #0
 8009c38:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009c3a:	e003      	b.n	8009c44 <HAL_JPEG_GetInfo+0x114>
 8009c3c:	e002      	b.n	8009c44 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2200      	movs	r2, #0
 8009c42:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 fd09 	bl	800b65c <JPEG_GetQuality>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d005      	beq.n	8009c7a <HAL_JPEG_Decode_DMA+0x20>
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <HAL_JPEG_Decode_DMA+0x20>
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e04c      	b.n	8009d18 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d101      	bne.n	8009c8c <HAL_JPEG_Decode_DMA+0x32>
 8009c88:	2302      	movs	r3, #2
 8009c8a:	e045      	b.n	8009d18 <HAL_JPEG_Decode_DMA+0xbe>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d134      	bne.n	8009d0a <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2204      	movs	r2, #4
 8009ca4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cac:	f023 020f 	bic.w	r2, r3, #15
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cb8:	f043 020e 	orr.w	r2, r3, #14
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	69ba      	ldr	r2, [r7, #24]
 8009cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fe49 	bl	800a97c <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f001 f96a 	bl	800afc4 <JPEG_DMA_StartProcess>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00f      	beq.n	8009d16 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2206      	movs	r2, #6
 8009cfa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e006      	b.n	8009d18 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8009d12:	2302      	movs	r3, #2
 8009d14:	e000      	b.n	8009d18 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d32:	f003 030c 	and.w	r3, r3, #12
 8009d36:	2b0c      	cmp	r3, #12
 8009d38:	d116      	bne.n	8009d68 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d033      	beq.n	8009dc2 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d5e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	655a      	str	r2, [r3, #84]	@ 0x54
 8009d66:	e02c      	b.n	8009dc2 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d6c:	f003 030c 	and.w	r3, r3, #12
 8009d70:	2b08      	cmp	r3, #8
 8009d72:	d126      	bne.n	8009dc2 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d009      	beq.n	8009d92 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f043 0306 	orr.w	r3, r3, #6
 8009d90:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	f003 0302 	and.w	r3, r3, #2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009da0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8009dae:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	43da      	mvns	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	400a      	ands	r2, r1
 8009dc0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8009dda:	bf00      	nop
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b083      	sub	sp, #12
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8009dee:	bf00      	nop
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	3b03      	subs	r3, #3
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d813      	bhi.n	8009e4e <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e2a:	f003 030c 	and.w	r3, r3, #12
 8009e2e:	2b08      	cmp	r3, #8
 8009e30:	d103      	bne.n	8009e3a <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fe16 	bl	800aa64 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8009e38:	e00b      	b.n	8009e52 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e3e:	f003 030c 	and.w	r3, r3, #12
 8009e42:	2b0c      	cmp	r3, #12
 8009e44:	d105      	bne.n	8009e52 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 f956 	bl	800b0f8 <JPEG_DMA_ContinueProcess>
      break;
 8009e4c:	e001      	b.n	8009e52 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8009e4e:	bf00      	nop
 8009e50:	e000      	b.n	8009e54 <HAL_JPEG_IRQHandler+0x44>
      break;
 8009e52:	bf00      	nop
  }
}
 8009e54:	bf00      	nop
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b08b      	sub	sp, #44	@ 0x2c
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
 8009e68:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	e020      	b.n	8009eb6 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	4413      	add	r3, r2
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8009e7e:	6a3a      	ldr	r2, [r7, #32]
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e82:	4413      	add	r3, r2
 8009e84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e88:	d90f      	bls.n	8009eaa <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e055      	b.n	8009f3a <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	68b9      	ldr	r1, [r7, #8]
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	440b      	add	r3, r1
 8009e98:	3201      	adds	r2, #1
 8009e9a:	b2d2      	uxtb	r2, r2
 8009e9c:	701a      	strb	r2, [r3, #0]
      p++;
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	623b      	str	r3, [r7, #32]
      i--;
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1ee      	bne.n	8009e8e <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	61fb      	str	r3, [r7, #28]
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	2b0f      	cmp	r3, #15
 8009eba:	d9db      	bls.n	8009e74 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	6a3a      	ldr	r2, [r7, #32]
 8009eca:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	617b      	str	r3, [r7, #20]
  p = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8009eda:	e027      	b.n	8009f2c <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	601a      	str	r2, [r3, #0]
      p++;
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	3301      	adds	r3, #1
 8009eec:	623b      	str	r3, [r7, #32]
      code++;
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	4413      	add	r3, r2
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	461a      	mov	r2, r3
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d0eb      	beq.n	8009edc <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	2b1f      	cmp	r3, #31
 8009f08:	d901      	bls.n	8009f0e <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e015      	b.n	8009f3a <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009f0e:	2201      	movs	r2, #1
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	fa02 f303 	lsl.w	r3, r2, r3
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d301      	bcc.n	8009f20 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e00c      	b.n	8009f3a <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	61bb      	str	r3, [r7, #24]
    si++;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	4413      	add	r3, r2
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1dd      	bne.n	8009ef4 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	372c      	adds	r7, #44	@ 0x2c
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009f52:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009f56:	6018      	str	r0, [r3, #0]
 8009f58:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009f5c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009f60:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009f62:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009f66:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009f6a:	6818      	ldr	r0, [r3, #0]
 8009f6c:	f107 0308 	add.w	r3, r7, #8
 8009f70:	f107 020c 	add.w	r2, r7, #12
 8009f74:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8009f78:	f7ff ff70 	bl	8009e5c <JPEG_Bits_To_SizeCodes>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8009f82:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009f8a:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009f8e:	e075      	b.n	800a07c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8009f90:	2300      	movs	r3, #0
 8009f92:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8009f96:	e067      	b.n	800a068 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8009f98:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009f9c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009fa6:	4413      	add	r3, r2
 8009fa8:	3310      	adds	r3, #16
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8009fb0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d103      	bne.n	8009fc0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8009fb8:	23a0      	movs	r3, #160	@ 0xa0
 8009fba:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009fbe:	e021      	b.n	800a004 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8009fc0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009fc4:	2bf0      	cmp	r3, #240	@ 0xf0
 8009fc6:	d103      	bne.n	8009fd0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8009fc8:	23a1      	movs	r3, #161	@ 0xa1
 8009fca:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009fce:	e019      	b.n	800a004 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8009fd0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009fd4:	091b      	lsrs	r3, r3, #4
 8009fd6:	f003 030f 	and.w	r3, r3, #15
 8009fda:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8009fde:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009fe2:	f003 030f 	and.w	r3, r3, #15
 8009fe6:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8009fea:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8009fee:	4613      	mov	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009ffc:	4413      	add	r3, r2
 8009ffe:	3b01      	subs	r3, #1
 800a000:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a004:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a008:	2ba1      	cmp	r3, #161	@ 0xa1
 800a00a:	d901      	bls.n	800a010 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a00c:	2301      	movs	r3, #1
 800a00e:	e035      	b.n	800a07c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a010:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a014:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a018:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800a01c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a020:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a024:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a028:	6819      	ldr	r1, [r3, #0]
 800a02a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a02e:	3328      	adds	r3, #40	@ 0x28
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a036:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a03a:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800a03e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a042:	4413      	add	r3, r2
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	3b01      	subs	r3, #1
 800a048:	b2d9      	uxtb	r1, r3
 800a04a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a04e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a058:	4413      	add	r3, r2
 800a05a:	460a      	mov	r2, r1
 800a05c:	701a      	strb	r2, [r3, #0]
      k++;
 800a05e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a062:	3301      	adds	r3, #1
 800a064:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800a068:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a06c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800a076:	429a      	cmp	r2, r3
 800a078:	d38e      	bcc.n	8009f98 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a092:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a096:	6018      	str	r0, [r3, #0]
 800a098:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a09c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a0a0:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a0a2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a0a6:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800a0b0:	f107 0208 	add.w	r2, r7, #8
 800a0b4:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800a0b8:	f7ff fed0 	bl	8009e5c <JPEG_Bits_To_SizeCodes>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800a0c2:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800a0ca:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800a0ce:	e048      	b.n	800a162 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800a0d6:	e03d      	b.n	800a154 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800a0d8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a0dc:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a0e6:	4413      	add	r3, r2
 800a0e8:	3310      	adds	r3, #16
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a0f0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a0f4:	2b0b      	cmp	r3, #11
 800a0f6:	d901      	bls.n	800a0fc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e032      	b.n	800a162 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a0fc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a100:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800a104:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800a108:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a10c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a110:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a114:	6819      	ldr	r1, [r3, #0]
 800a116:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a11a:	3302      	adds	r3, #2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	440b      	add	r3, r1
 800a120:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a122:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a126:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800a12a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a12e:	4413      	add	r3, r2
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	3b01      	subs	r3, #1
 800a134:	b2d9      	uxtb	r1, r3
 800a136:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a13a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a144:	4413      	add	r3, r2
 800a146:	460a      	mov	r2, r1
 800a148:	701a      	strb	r2, [r3, #0]
      k++;
 800a14a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a14e:	3301      	adds	r3, #1
 800a150:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800a154:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800a158:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d3bb      	bcc.n	800a0d8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b09a      	sub	sp, #104	@ 0x68
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	429a      	cmp	r2, r3
 800a184:	d106      	bne.n	800a194 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800a18e:	3318      	adds	r3, #24
 800a190:	663b      	str	r3, [r7, #96]	@ 0x60
 800a192:	e00f      	b.n	800a1b4 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d106      	bne.n	800a1b0 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800a1aa:	3318      	adds	r3, #24
 800a1ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1ae:	e001      	b.n	800a1b4 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e059      	b.n	800a268 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d055      	beq.n	800a266 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a1ba:	f107 0314 	add.w	r3, r7, #20
 800a1be:	4619      	mov	r1, r3
 800a1c0:	68b8      	ldr	r0, [r7, #8]
 800a1c2:	f7ff ff60 	bl	800a086 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800a1cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800a1d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1d8:	e046      	b.n	800a268 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800a1da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800a1de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1e0:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a1e4:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a1e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800a1ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1ee:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a1f2:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800a1f4:	230c      	movs	r3, #12
 800a1f6:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800a1f8:	e032      	b.n	800a260 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800a1fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 800a200:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a202:	3b04      	subs	r3, #4
 800a204:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a206:	f107 0214 	add.w	r2, r7, #20
 800a20a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a20c:	4413      	add	r3, r2
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	021b      	lsls	r3, r3, #8
 800a212:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a218:	3302      	adds	r3, #2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	3368      	adds	r3, #104	@ 0x68
 800a21e:	443b      	add	r3, r7
 800a220:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a224:	b2db      	uxtb	r3, r3
 800a226:	4313      	orrs	r3, r2
 800a228:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800a22a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a22c:	3b01      	subs	r3, #1
 800a22e:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a230:	f107 0214 	add.w	r2, r7, #20
 800a234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a236:	4413      	add	r3, r2
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	021b      	lsls	r3, r3, #8
 800a23c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a242:	3302      	adds	r3, #2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	3368      	adds	r3, #104	@ 0x68
 800a248:	443b      	add	r3, r7
 800a24a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	4313      	orrs	r3, r2
 800a252:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a256:	041a      	lsls	r2, r3, #16
 800a258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a25a:	431a      	orrs	r2, r3
 800a25c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a25e:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a260:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a262:	2b01      	cmp	r3, #1
 800a264:	d8c9      	bhi.n	800a1fa <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3768      	adds	r7, #104	@ 0x68
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800a276:	af00      	add	r7, sp, #0
 800a278:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a27c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a280:	6018      	str	r0, [r3, #0]
 800a282:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a286:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a28a:	6019      	str	r1, [r3, #0]
 800a28c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a290:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800a294:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a296:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a29a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2a6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800a2aa:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800a2ae:	6812      	ldr	r2, [r2, #0]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d10c      	bne.n	800a2ce <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a2b4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a2b8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2c4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a2c8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800a2cc:	e01d      	b.n	800a30a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a2ce:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a2d2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a2de:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800a2e2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800a2e6:	6812      	ldr	r2, [r2, #0]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d10c      	bne.n	800a306 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a2ec:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a2f0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a2fc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a300:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800a304:	e001      	b.n	800a30a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e0a8      	b.n	800a45c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800a30a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a30e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 80a0 	beq.w	800a45a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800a31a:	f107 0214 	add.w	r2, r7, #20
 800a31e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a322:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a326:	4611      	mov	r1, r2
 800a328:	6818      	ldr	r0, [r3, #0]
 800a32a:	f7ff fe0c 	bl	8009f46 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800a32e:	4603      	mov	r3, r0
 800a330:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800a334:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800a33c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800a340:	e08c      	b.n	800a45c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800a342:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a346:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800a34a:	2300      	movs	r3, #0
 800a34c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800a350:	e00e      	b.n	800a370 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800a352:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a356:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a35a:	601a      	str	r2, [r3, #0]
      addressDef++;
 800a35c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a360:	3304      	adds	r3, #4
 800a362:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800a366:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a36a:	3301      	adds	r3, #1
 800a36c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800a370:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a374:	2b02      	cmp	r3, #2
 800a376:	d9ec      	bls.n	800a352 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800a378:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a37c:	4a3a      	ldr	r2, [pc, #232]	@ (800a468 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800a37e:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a380:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a384:	3304      	adds	r3, #4
 800a386:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800a38a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a38e:	4a37      	ldr	r2, [pc, #220]	@ (800a46c <JPEG_Set_HuffAC_Mem+0x1fc>)
 800a390:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a392:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a396:	3304      	adds	r3, #4
 800a398:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800a39c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3a0:	4a33      	ldr	r2, [pc, #204]	@ (800a470 <JPEG_Set_HuffAC_Mem+0x200>)
 800a3a2:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a3a4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800a3ae:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3b2:	4a30      	ldr	r2, [pc, #192]	@ (800a474 <JPEG_Set_HuffAC_Mem+0x204>)
 800a3b4:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800a3b6:	23a2      	movs	r3, #162	@ 0xa2
 800a3b8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800a3bc:	e049      	b.n	800a452 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800a3be:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800a3c8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a3cc:	3b04      	subs	r3, #4
 800a3ce:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a3d2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a3d6:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a3da:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a3de:	4413      	add	r3, r2
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	021b      	lsls	r3, r3, #8
 800a3e4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a3e8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a3ec:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a3f0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a3f4:	3328      	adds	r3, #40	@ 0x28
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	440b      	add	r3, r1
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	4313      	orrs	r3, r2
 800a400:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800a404:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a408:	3b01      	subs	r3, #1
 800a40a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a40e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a412:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a416:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a41a:	4413      	add	r3, r2
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	021b      	lsls	r3, r3, #8
 800a420:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a424:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a428:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a42c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a430:	3328      	adds	r3, #40	@ 0x28
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	440b      	add	r3, r1
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	4313      	orrs	r3, r2
 800a43c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a440:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800a444:	041a      	lsls	r2, r3, #16
 800a446:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800a44a:	431a      	orrs	r2, r3
 800a44c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a450:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a452:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a456:	2b01      	cmp	r3, #1
 800a458:	d8b1      	bhi.n	800a3be <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	0fd10fd0 	.word	0x0fd10fd0
 800a46c:	0fd30fd2 	.word	0x0fd30fd2
 800a470:	0fd50fd4 	.word	0x0fd50fd4
 800a474:	0fd70fd6 	.word	0x0fd70fd6

0800a478 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f84d 	bl	800a520 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a48e:	461a      	mov	r2, r3
 800a490:	491f      	ldr	r1, [pc, #124]	@ (800a510 <JPEG_Set_HuffEnc_Mem+0x98>)
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff feec 	bl	800a270 <JPEG_Set_HuffAC_Mem>
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
 800a4a4:	e030      	b.n	800a508 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	4918      	ldr	r1, [pc, #96]	@ (800a514 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff fedc 	bl	800a270 <JPEG_Set_HuffAC_Mem>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	e020      	b.n	800a508 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	4911      	ldr	r1, [pc, #68]	@ (800a518 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff fe4a 	bl	800a16c <JPEG_Set_HuffDC_Mem>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	e010      	b.n	800a508 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	490a      	ldr	r1, [pc, #40]	@ (800a51c <JPEG_Set_HuffEnc_Mem+0xa4>)
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7ff fe3a 	bl	800a16c <JPEG_Set_HuffDC_Mem>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800a502:	7bfb      	ldrb	r3, [r7, #15]
 800a504:	e000      	b.n	800a508 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	08018bc4 	.word	0x08018bc4
 800a514:	08018c78 	.word	0x08018c78
 800a518:	08018b8c 	.word	0x08018b8c
 800a51c:	08018ba8 	.word	0x08018ba8

0800a520 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800a520:	b480      	push	{r7}
 800a522:	b08b      	sub	sp, #44	@ 0x2c
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800a528:	4b80      	ldr	r3, [pc, #512]	@ (800a72c <JPEG_Set_Huff_DHTMem+0x20c>)
 800a52a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800a52c:	4b80      	ldr	r3, [pc, #512]	@ (800a730 <JPEG_Set_Huff_DHTMem+0x210>)
 800a52e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800a530:	4b80      	ldr	r3, [pc, #512]	@ (800a734 <JPEG_Set_Huff_DHTMem+0x214>)
 800a532:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800a534:	4b80      	ldr	r3, [pc, #512]	@ (800a738 <JPEG_Set_Huff_DHTMem+0x218>)
 800a536:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a540:	330c      	adds	r3, #12
 800a542:	623b      	str	r3, [r7, #32]
  index = 16;
 800a544:	2310      	movs	r3, #16
 800a546:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a548:	e01d      	b.n	800a586 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	3b01      	subs	r3, #1
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	5cd3      	ldrb	r3, [r2, r3]
 800a552:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a556:	3b02      	subs	r3, #2
 800a558:	6979      	ldr	r1, [r7, #20]
 800a55a:	5ccb      	ldrb	r3, [r1, r3]
 800a55c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a55e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a562:	3b03      	subs	r3, #3
 800a564:	6979      	ldr	r1, [r7, #20]
 800a566:	5ccb      	ldrb	r3, [r1, r3]
 800a568:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a56a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a56c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a56e:	3a04      	subs	r2, #4
 800a570:	6979      	ldr	r1, [r7, #20]
 800a572:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a574:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	601a      	str	r2, [r3, #0]
    address--;
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	3b04      	subs	r3, #4
 800a57e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a582:	3b04      	subs	r3, #4
 800a584:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d8de      	bhi.n	800a54a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a594:	3318      	adds	r3, #24
 800a596:	623b      	str	r3, [r7, #32]
  index = 12;
 800a598:	230c      	movs	r3, #12
 800a59a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a59c:	e021      	b.n	800a5e2 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	7c1b      	ldrb	r3, [r3, #16]
 800a5a8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ac:	3b02      	subs	r3, #2
 800a5ae:	6979      	ldr	r1, [r7, #20]
 800a5b0:	440b      	add	r3, r1
 800a5b2:	7c1b      	ldrb	r3, [r3, #16]
 800a5b4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a5b6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ba:	3b03      	subs	r3, #3
 800a5bc:	6979      	ldr	r1, [r7, #20]
 800a5be:	440b      	add	r3, r1
 800a5c0:	7c1b      	ldrb	r3, [r3, #16]
 800a5c2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a5c4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800a5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5c8:	3a04      	subs	r2, #4
 800a5ca:	6979      	ldr	r1, [r7, #20]
 800a5cc:	440a      	add	r2, r1
 800a5ce:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a5d0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	601a      	str	r2, [r3, #0]
    address--;
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	3b04      	subs	r3, #4
 800a5da:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5de:	3b04      	subs	r3, #4
 800a5e0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d8da      	bhi.n	800a59e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a5f0:	3328      	adds	r3, #40	@ 0x28
 800a5f2:	623b      	str	r3, [r7, #32]
  index = 16;
 800a5f4:	2310      	movs	r3, #16
 800a5f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a5f8:	e01d      	b.n	800a636 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	69fa      	ldr	r2, [r7, #28]
 800a600:	5cd3      	ldrb	r3, [r2, r3]
 800a602:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a606:	3b02      	subs	r3, #2
 800a608:	69f9      	ldr	r1, [r7, #28]
 800a60a:	5ccb      	ldrb	r3, [r1, r3]
 800a60c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a60e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a612:	3b03      	subs	r3, #3
 800a614:	69f9      	ldr	r1, [r7, #28]
 800a616:	5ccb      	ldrb	r3, [r1, r3]
 800a618:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a61a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a61c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a61e:	3a04      	subs	r2, #4
 800a620:	69f9      	ldr	r1, [r7, #28]
 800a622:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a624:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	601a      	str	r2, [r3, #0]
    address--;
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	3b04      	subs	r3, #4
 800a62e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a632:	3b04      	subs	r3, #4
 800a634:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d8de      	bhi.n	800a5fa <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a644:	33cc      	adds	r3, #204	@ 0xcc
 800a646:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	4b3b      	ldr	r3, [pc, #236]	@ (800a73c <JPEG_Set_Huff_DHTMem+0x21c>)
 800a64e:	4013      	ands	r3, r2
 800a650:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800a658:	021a      	lsls	r2, r3, #8
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a66e:	6a3b      	ldr	r3, [r7, #32]
 800a670:	3b04      	subs	r3, #4
 800a672:	623b      	str	r3, [r7, #32]
  index = 160;
 800a674:	23a0      	movs	r3, #160	@ 0xa0
 800a676:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a678:	e021      	b.n	800a6be <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67c:	3b01      	subs	r3, #1
 800a67e:	69fa      	ldr	r2, [r7, #28]
 800a680:	4413      	add	r3, r2
 800a682:	7c1b      	ldrb	r3, [r3, #16]
 800a684:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a688:	3b02      	subs	r3, #2
 800a68a:	69f9      	ldr	r1, [r7, #28]
 800a68c:	440b      	add	r3, r1
 800a68e:	7c1b      	ldrb	r3, [r3, #16]
 800a690:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a692:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a696:	3b03      	subs	r3, #3
 800a698:	69f9      	ldr	r1, [r7, #28]
 800a69a:	440b      	add	r3, r1
 800a69c:	7c1b      	ldrb	r3, [r3, #16]
 800a69e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a6a0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a6a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6a4:	3a04      	subs	r2, #4
 800a6a6:	69f9      	ldr	r1, [r7, #28]
 800a6a8:	440a      	add	r2, r1
 800a6aa:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a6ac:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	601a      	str	r2, [r3, #0]
    address--;
 800a6b2:	6a3b      	ldr	r3, [r7, #32]
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ba:	3b04      	subs	r3, #4
 800a6bc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	d8da      	bhi.n	800a67a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a6cc:	33cc      	adds	r3, #204	@ 0xcc
 800a6ce:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a6d0:	6a3b      	ldr	r3, [r7, #32]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	785b      	ldrb	r3, [r3, #1]
 800a6dc:	061a      	lsls	r2, r3, #24
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	041b      	lsls	r3, r3, #16
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a6fa:	33dc      	adds	r3, #220	@ 0xdc
 800a6fc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	4b0e      	ldr	r3, [pc, #56]	@ (800a73c <JPEG_Set_Huff_DHTMem+0x21c>)
 800a704:	4013      	ands	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	7bdb      	ldrb	r3, [r3, #15]
 800a70c:	021a      	lsls	r2, r3, #8
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	4313      	orrs	r3, r2
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	7b92      	ldrb	r2, [r2, #14]
 800a716:	4313      	orrs	r3, r2
 800a718:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800a720:	6a3b      	ldr	r3, [r7, #32]
 800a722:	3b04      	subs	r3, #4
 800a724:	623b      	str	r3, [r7, #32]
  index = 12;
 800a726:	230c      	movs	r3, #12
 800a728:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a72a:	e027      	b.n	800a77c <JPEG_Set_Huff_DHTMem+0x25c>
 800a72c:	08018bc4 	.word	0x08018bc4
 800a730:	08018c78 	.word	0x08018c78
 800a734:	08018b8c 	.word	0x08018b8c
 800a738:	08018ba8 	.word	0x08018ba8
 800a73c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a742:	3301      	adds	r3, #1
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	5cd3      	ldrb	r3, [r2, r3]
 800a748:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a74a:	6939      	ldr	r1, [r7, #16]
 800a74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74e:	440b      	add	r3, r1
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a754:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a758:	3b01      	subs	r3, #1
 800a75a:	6939      	ldr	r1, [r7, #16]
 800a75c:	5ccb      	ldrb	r3, [r1, r3]
 800a75e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a760:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800a762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a764:	3a02      	subs	r2, #2
 800a766:	6939      	ldr	r1, [r7, #16]
 800a768:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a76a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a76c:	6a3b      	ldr	r3, [r7, #32]
 800a76e:	601a      	str	r2, [r3, #0]
    address--;
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	3b04      	subs	r3, #4
 800a774:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a778:	3b04      	subs	r3, #4
 800a77a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d8de      	bhi.n	800a740 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a78a:	33dc      	adds	r3, #220	@ 0xdc
 800a78c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	7c5b      	ldrb	r3, [r3, #17]
 800a79a:	061a      	lsls	r2, r3, #24
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	431a      	orrs	r2, r3
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	7c1b      	ldrb	r3, [r3, #16]
 800a7a4:	041b      	lsls	r3, r3, #16
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a7b8:	33e8      	adds	r3, #232	@ 0xe8
 800a7ba:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800a7bc:	6a3b      	ldr	r3, [r7, #32]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	4b6d      	ldr	r3, [pc, #436]	@ (800a978 <JPEG_Set_Huff_DHTMem+0x458>)
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	7edb      	ldrb	r3, [r3, #27]
 800a7ca:	021a      	lsls	r2, r3, #8
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	7e92      	ldrb	r2, [r2, #26]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800a7de:	6a3b      	ldr	r3, [r7, #32]
 800a7e0:	3b04      	subs	r3, #4
 800a7e2:	623b      	str	r3, [r7, #32]
  index = 8;
 800a7e4:	2308      	movs	r3, #8
 800a7e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a7e8:	e021      	b.n	800a82e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	7c1b      	ldrb	r3, [r3, #16]
 800a7f4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a7f6:	6939      	ldr	r1, [r7, #16]
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fa:	440b      	add	r3, r1
 800a7fc:	3310      	adds	r3, #16
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a802:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a806:	3b01      	subs	r3, #1
 800a808:	6939      	ldr	r1, [r7, #16]
 800a80a:	440b      	add	r3, r1
 800a80c:	7c1b      	ldrb	r3, [r3, #16]
 800a80e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a810:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800a812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a814:	3a02      	subs	r2, #2
 800a816:	6939      	ldr	r1, [r7, #16]
 800a818:	440a      	add	r2, r1
 800a81a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a81c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	601a      	str	r2, [r3, #0]
    address--;
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	3b04      	subs	r3, #4
 800a826:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	3b04      	subs	r3, #4
 800a82c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a830:	2b03      	cmp	r3, #3
 800a832:	d8da      	bhi.n	800a7ea <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a83c:	33e8      	adds	r3, #232	@ 0xe8
 800a83e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	b29b      	uxth	r3, r3
 800a846:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	785b      	ldrb	r3, [r3, #1]
 800a84c:	061a      	lsls	r2, r3, #24
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	431a      	orrs	r2, r3
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	041b      	lsls	r3, r3, #16
 800a858:	4313      	orrs	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a86a:	33f8      	adds	r3, #248	@ 0xf8
 800a86c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	4b41      	ldr	r3, [pc, #260]	@ (800a978 <JPEG_Set_Huff_DHTMem+0x458>)
 800a874:	4013      	ands	r3, r2
 800a876:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	7bdb      	ldrb	r3, [r3, #15]
 800a87c:	021a      	lsls	r2, r3, #8
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	4313      	orrs	r3, r2
 800a882:	69ba      	ldr	r2, [r7, #24]
 800a884:	7b92      	ldrb	r2, [r2, #14]
 800a886:	4313      	orrs	r3, r2
 800a888:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	3b04      	subs	r3, #4
 800a894:	623b      	str	r3, [r7, #32]
  index = 12;
 800a896:	230c      	movs	r3, #12
 800a898:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a89a:	e01d      	b.n	800a8d8 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89e:	3301      	adds	r3, #1
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	5cd3      	ldrb	r3, [r2, r3]
 800a8a4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a8a6:	69b9      	ldr	r1, [r7, #24]
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8aa:	440b      	add	r3, r1
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a8b0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	69b9      	ldr	r1, [r7, #24]
 800a8b8:	5ccb      	ldrb	r3, [r1, r3]
 800a8ba:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a8bc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800a8be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8c0:	3a02      	subs	r2, #2
 800a8c2:	69b9      	ldr	r1, [r7, #24]
 800a8c4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a8c6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	601a      	str	r2, [r3, #0]
    address--;
 800a8cc:	6a3b      	ldr	r3, [r7, #32]
 800a8ce:	3b04      	subs	r3, #4
 800a8d0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d4:	3b04      	subs	r3, #4
 800a8d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d8de      	bhi.n	800a89c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a8e6:	33f8      	adds	r3, #248	@ 0xf8
 800a8e8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	7c5b      	ldrb	r3, [r3, #17]
 800a8f6:	061a      	lsls	r2, r3, #24
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	431a      	orrs	r2, r3
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	7c1b      	ldrb	r3, [r3, #16]
 800a900:	041b      	lsls	r3, r3, #16
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a914:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800a918:	623b      	str	r3, [r7, #32]
  index = 160;
 800a91a:	23a0      	movs	r3, #160	@ 0xa0
 800a91c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a91e:	e021      	b.n	800a964 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a922:	3301      	adds	r3, #1
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	4413      	add	r3, r2
 800a928:	7c1b      	ldrb	r3, [r3, #16]
 800a92a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a92c:	69b9      	ldr	r1, [r7, #24]
 800a92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a930:	440b      	add	r3, r1
 800a932:	3310      	adds	r3, #16
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a938:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	3b01      	subs	r3, #1
 800a93e:	69b9      	ldr	r1, [r7, #24]
 800a940:	440b      	add	r3, r1
 800a942:	7c1b      	ldrb	r3, [r3, #16]
 800a944:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a946:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a94a:	3a02      	subs	r2, #2
 800a94c:	69b9      	ldr	r1, [r7, #24]
 800a94e:	440a      	add	r2, r1
 800a950:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a952:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	601a      	str	r2, [r3, #0]
    address--;
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	3b04      	subs	r3, #4
 800a95c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	3b04      	subs	r3, #4
 800a962:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	2b03      	cmp	r3, #3
 800a968:	d8da      	bhi.n	800a920 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800a96a:	bf00      	nop
 800a96c:	bf00      	nop
 800a96e:	372c      	adds	r7, #44	@ 0x2c
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	ffff0000 	.word	0xffff0000

0800a97c <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a988:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a994:	f003 0303 	and.w	r3, r3, #3
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d108      	bne.n	800a9ae <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f042 0208 	orr.w	r2, r2, #8
 800a9aa:	605a      	str	r2, [r3, #4]
 800a9ac:	e007      	b.n	800a9be <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	685a      	ldr	r2, [r3, #4]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f022 0208 	bic.w	r2, r2, #8
 800a9bc:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f022 0201 	bic.w	r2, r2, #1
 800a9cc:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a9dc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a9ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a9fc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f042 0201 	orr.w	r2, r2, #1
 800aa1c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa22:	f003 030c 	and.w	r3, r3, #12
 800aa26:	2b08      	cmp	r3, #8
 800aa28:	d108      	bne.n	800aa3c <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800aa38:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800aa3a:	e00d      	b.n	800aa58 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa40:	f003 030c 	and.w	r3, r3, #12
 800aa44:	2b0c      	cmp	r3, #12
 800aa46:	d107      	bne.n	800aa58 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa70:	f003 0303 	and.w	r3, r3, #3
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d125      	bne.n	800aac4 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d01e      	beq.n	800aac4 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3304      	adds	r3, #4
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7ff f84f 	bl	8009b30 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff f996 	bl	8009dd0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aab2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aac2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d116      	bne.n	800aafe <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aad6:	f003 0302 	and.w	r3, r3, #2
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d004      	beq.n	800aae8 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800aade:	2108      	movs	r1, #8
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f988 	bl	800adf6 <JPEG_ReadInputData>
 800aae6:	e00a      	b.n	800aafe <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaee:	f003 0304 	and.w	r3, r3, #4
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d003      	beq.n	800aafe <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f97c 	bl	800adf6 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d116      	bne.n	800ab38 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab10:	f003 0308 	and.w	r3, r3, #8
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d004      	beq.n	800ab22 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ab18:	2108      	movs	r1, #8
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f864 	bl	800abe8 <JPEG_StoreOutputData>
 800ab20:	e00a      	b.n	800ab38 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab28:	f003 0310 	and.w	r3, r3, #16
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800ab30:	2101      	movs	r1, #1
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f858 	bl	800abe8 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab42:	2b20      	cmp	r3, #32
 800ab44:	d14b      	bne.n	800abde <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f022 0201 	bic.w	r2, r2, #1
 800ab54:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab5a:	f003 030c 	and.w	r3, r3, #12
 800ab5e:	2b08      	cmp	r3, #8
 800ab60:	d107      	bne.n	800ab72 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ab70:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ab80:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00a      	beq.n	800aba0 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69d9      	ldr	r1, [r3, #28]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab92:	461a      	mov	r2, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7f6 fc29 	bl	80013ec <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aba4:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abaa:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f003 0303 	and.w	r3, r3, #3
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d103      	bne.n	800abd4 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7f6 fbdf 	bl	8001390 <HAL_JPEG_DecodeCpltCallback>
 800abd2:	e002      	b.n	800abda <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff f906 	bl	8009de6 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800abda:	2301      	movs	r3, #1
 800abdc:	e000      	b.n	800abe0 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	440b      	add	r3, r1
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d34b      	bcc.n	800ac9c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800ac04:	2300      	movs	r3, #0
 800ac06:	617b      	str	r3, [r7, #20]
 800ac08:	e031      	b.n	800ac6e <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac10:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69da      	ldr	r2, [r3, #28]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac1a:	4413      	add	r3, r2
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	b2d2      	uxtb	r2, r2
 800ac20:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	0a19      	lsrs	r1, r3, #8
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	69da      	ldr	r2, [r3, #28]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac2e:	3301      	adds	r3, #1
 800ac30:	4413      	add	r3, r2
 800ac32:	b2ca      	uxtb	r2, r1
 800ac34:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	0c19      	lsrs	r1, r3, #16
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	69da      	ldr	r2, [r3, #28]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac42:	3302      	adds	r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	b2ca      	uxtb	r2, r1
 800ac48:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	0e19      	lsrs	r1, r3, #24
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	69da      	ldr	r2, [r3, #28]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac56:	3303      	adds	r3, #3
 800ac58:	4413      	add	r3, r2
 800ac5a:	b2ca      	uxtb	r2, r1
 800ac5c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac62:	1d1a      	adds	r2, r3, #4
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	617b      	str	r3, [r7, #20]
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d3c9      	bcc.n	800ac0a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	f040 80b5 	bne.w	800adee <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	69d9      	ldr	r1, [r3, #28]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7f6 fbac 	bl	80013ec <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800ac9a:	e0a8      	b.n	800adee <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca4:	429a      	cmp	r2, r3
 800aca6:	f240 80a2 	bls.w	800adee <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	089b      	lsrs	r3, r3, #2
 800acb6:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800acb8:	2300      	movs	r3, #0
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	e031      	b.n	800ad22 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc4:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	69da      	ldr	r2, [r3, #28]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acce:	4413      	add	r3, r2
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	b2d2      	uxtb	r2, r2
 800acd4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	0a19      	lsrs	r1, r3, #8
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	69da      	ldr	r2, [r3, #28]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace2:	3301      	adds	r3, #1
 800ace4:	4413      	add	r3, r2
 800ace6:	b2ca      	uxtb	r2, r1
 800ace8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	0c19      	lsrs	r1, r3, #16
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	69da      	ldr	r2, [r3, #28]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf6:	3302      	adds	r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	b2ca      	uxtb	r2, r1
 800acfc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	0e19      	lsrs	r1, r3, #24
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	69da      	ldr	r2, [r3, #28]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad0a:	3303      	adds	r3, #3
 800ad0c:	4413      	add	r3, r2
 800ad0e:	b2ca      	uxtb	r2, r1
 800ad10:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad16:	1d1a      	adds	r2, r3, #4
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	617b      	str	r3, [r7, #20]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d3c9      	bcc.n	800acbe <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d10b      	bne.n	800ad4e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	69d9      	ldr	r1, [r3, #28]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3e:	461a      	mov	r2, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7f6 fb53 	bl	80013ec <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ad4c:	e04f      	b.n	800adee <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad56:	1ad3      	subs	r3, r2, r3
 800ad58:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad60:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800ad62:	2300      	movs	r3, #0
 800ad64:	617b      	str	r3, [r7, #20]
 800ad66:	e015      	b.n	800ad94 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	f003 0303 	and.w	r3, r3, #3
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	fa22 f103 	lsr.w	r1, r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69da      	ldr	r2, [r3, #28]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7e:	4413      	add	r3, r2
 800ad80:	b2ca      	uxtb	r2, r1
 800ad82:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad88:	1c5a      	adds	r2, r3, #1
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	3301      	adds	r3, #1
 800ad92:	617b      	str	r3, [r7, #20]
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d3e5      	bcc.n	800ad68 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	69d9      	ldr	r1, [r3, #28]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada4:	461a      	mov	r2, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7f6 fb20 	bl	80013ec <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f1c3 0304 	rsb	r3, r3, #4
 800adb8:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	617b      	str	r3, [r7, #20]
 800adbe:	e013      	b.n	800ade8 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	fa22 f103 	lsr.w	r1, r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	69da      	ldr	r2, [r3, #28]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add2:	4413      	add	r3, r2
 800add4:	b2ca      	uxtb	r2, r1
 800add6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	3301      	adds	r3, #1
 800ade6:	617b      	str	r3, [r7, #20]
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	2b03      	cmp	r3, #3
 800adec:	d9e8      	bls.n	800adc0 <JPEG_StoreOutputData+0x1d8>
}
 800adee:	bf00      	nop
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b088      	sub	sp, #32
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <JPEG_ReadInputData+0x1c>
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d104      	bne.n	800ae1c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800ae12:	2101      	movs	r1, #1
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7fe ff83 	bl	8009d20 <HAL_JPEG_Pause>
 800ae1a:	e028      	b.n	800ae6e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d906      	bls.n	800ae36 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a1b      	ldr	r3, [r3, #32]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	61fb      	str	r3, [r7, #28]
 800ae34:	e01b      	b.n	800ae6e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d115      	bne.n	800ae6e <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7fe ffd6 	bl	8009dfa <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae52:	2b04      	cmp	r3, #4
 800ae54:	d905      	bls.n	800ae62 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5a:	f023 0203 	bic.w	r2, r3, #3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6c:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f040 809f 	bne.w	800afba <JPEG_ReadInputData+0x1c4>
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f000 809b 	beq.w	800afba <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	089b      	lsrs	r3, r3, #2
 800ae88:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d335      	bcc.n	800aefe <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800ae92:	2300      	movs	r3, #0
 800ae94:	61bb      	str	r3, [r7, #24]
 800ae96:	e02d      	b.n	800aef4 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	699a      	ldr	r2, [r3, #24]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	4413      	add	r3, r2
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	699a      	ldr	r2, [r3, #24]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	4413      	add	r3, r2
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aeb8:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6999      	ldr	r1, [r3, #24]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	3302      	adds	r3, #2
 800aec4:	440b      	add	r3, r1
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800aeca:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	699a      	ldr	r2, [r3, #24]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3303      	adds	r3, #3
 800aed6:	4413      	add	r3, r2
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800aee0:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aee2:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	1d1a      	adds	r2, r3, #4
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	3301      	adds	r3, #1
 800aef2:	61bb      	str	r3, [r7, #24]
 800aef4:	69ba      	ldr	r2, [r7, #24]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d3cd      	bcc.n	800ae98 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800aefc:	e05d      	b.n	800afba <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d035      	beq.n	800af70 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800af04:	2300      	movs	r3, #0
 800af06:	61bb      	str	r3, [r7, #24]
 800af08:	e02d      	b.n	800af66 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	699a      	ldr	r2, [r3, #24]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	4413      	add	r3, r2
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	699a      	ldr	r2, [r3, #24]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	3301      	adds	r3, #1
 800af24:	4413      	add	r3, r2
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af2a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6999      	ldr	r1, [r3, #24]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	3302      	adds	r3, #2
 800af36:	440b      	add	r3, r1
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800af3c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	699a      	ldr	r2, [r3, #24]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3303      	adds	r3, #3
 800af48:	4413      	add	r3, r2
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800af52:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af54:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	1d1a      	adds	r2, r3, #4
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	3301      	adds	r3, #1
 800af64:	61bb      	str	r3, [r7, #24]
 800af66:	69ba      	ldr	r2, [r7, #24]
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d3cd      	bcc.n	800af0a <JPEG_ReadInputData+0x114>
}
 800af6e:	e024      	b.n	800afba <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800af74:	2300      	movs	r3, #0
 800af76:	61bb      	str	r3, [r7, #24]
 800af78:	e017      	b.n	800afaa <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	699a      	ldr	r2, [r3, #24]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	4413      	add	r3, r2
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	00db      	lsls	r3, r3, #3
 800af90:	fa02 f303 	lsl.w	r3, r2, r3
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	4313      	orrs	r3, r2
 800af98:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	3301      	adds	r3, #1
 800afa8:	61bb      	str	r3, [r7, #24]
 800afaa:	69ba      	ldr	r2, [r7, #24]
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d3e3      	bcc.n	800af7a <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800afba:	bf00      	nop
 800afbc:	3720      	adds	r7, #32
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
	...

0800afc4 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800afc4:	b590      	push	{r4, r7, lr}
 800afc6:	b087      	sub	sp, #28
 800afc8:	af02      	add	r7, sp, #8
 800afca:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd2:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afda:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d804      	bhi.n	800aff0 <JPEG_DMA_StartProcess+0x2c>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	429a      	cmp	r2, r3
 800afee:	d901      	bls.n	800aff4 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e074      	b.n	800b0de <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff8:	4a3b      	ldr	r2, [pc, #236]	@ (800b0e8 <JPEG_DMA_StartProcess+0x124>)
 800affa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b000:	4a3a      	ldr	r2, [pc, #232]	@ (800b0ec <JPEG_DMA_StartProcess+0x128>)
 800b002:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b008:	4a39      	ldr	r2, [pc, #228]	@ (800b0f0 <JPEG_DMA_StartProcess+0x12c>)
 800b00a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b010:	4a36      	ldr	r2, [pc, #216]	@ (800b0ec <JPEG_DMA_StartProcess+0x128>)
 800b012:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b018:	4a36      	ldr	r2, [pc, #216]	@ (800b0f4 <JPEG_DMA_StartProcess+0x130>)
 800b01a:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d002      	beq.n	800b028 <JPEG_DMA_StartProcess+0x64>
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d107      	bne.n	800b038 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b02c:	f043 0204 	orr.w	r2, r3, #4
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e052      	b.n	800b0de <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b040:	68f9      	ldr	r1, [r7, #12]
 800b042:	fbb3 f1f1 	udiv	r1, r3, r1
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	fb00 f101 	mul.w	r1, r0, r1
 800b04c:	1a5b      	subs	r3, r3, r1
 800b04e:	1ad2      	subs	r2, r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	fbb3 f1f1 	udiv	r1, r3, r1
 800b062:	68b8      	ldr	r0, [r7, #8]
 800b064:	fb00 f101 	mul.w	r1, r0, r1
 800b068:	1a5b      	subs	r3, r3, r1
 800b06a:	1ad2      	subs	r2, r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3344      	adds	r3, #68	@ 0x44
 800b07a:	4619      	mov	r1, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	69db      	ldr	r3, [r3, #28]
 800b080:	461c      	mov	r4, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b086:	2201      	movs	r2, #1
 800b088:	9200      	str	r2, [sp, #0]
 800b08a:	4622      	mov	r2, r4
 800b08c:	f000 fbe2 	bl	800b854 <HAL_MDMA_Start_IT>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d007      	beq.n	800b0a6 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b09a:	f043 0204 	orr.w	r2, r3, #4
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e01b      	b.n	800b0de <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3340      	adds	r3, #64	@ 0x40
 800b0b6:	461c      	mov	r4, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0bc:	2201      	movs	r2, #1
 800b0be:	9200      	str	r2, [sp, #0]
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	f000 fbc7 	bl	800b854 <HAL_MDMA_Start_IT>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d007      	beq.n	800b0dc <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0d0:	f043 0204 	orr.w	r2, r3, #4
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e000      	b.n	800b0de <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3714      	adds	r7, #20
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd90      	pop	{r4, r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	0800b3f7 	.word	0x0800b3f7
 800b0ec:	0800b5e5 	.word	0x0800b5e5
 800b0f0:	0800b523 	.word	0x0800b523
 800b0f4:	0800b635 	.word	0x0800b635

0800b0f8 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b104:	f003 0303 	and.w	r3, r3, #3
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d125      	bne.n	800b158 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b116:	2b00      	cmp	r3, #0
 800b118:	d01e      	beq.n	800b158 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3304      	adds	r3, #4
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7fe fd05 	bl	8009b30 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3304      	adds	r3, #4
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7fe fe4c 	bl	8009dd0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b146:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b156:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b15e:	f003 0320 	and.w	r3, r3, #32
 800b162:	2b00      	cmp	r3, #0
 800b164:	d039      	beq.n	800b1da <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b16a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f022 0201 	bic.w	r2, r2, #1
 800b180:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b190:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b1a0:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d104      	bne.n	800b1ba <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f000 fbce 	bl	800b956 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d105      	bne.n	800b1d4 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fbc2 	bl	800b956 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800b1d2:	e002      	b.n	800b1da <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f804 	bl	800b1e2 <JPEG_DMA_EndProcess>
}
 800b1da:	bf00      	nop
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b1fa:	1ad2      	subs	r2, r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b208:	429a      	cmp	r2, r3
 800b20a:	d10a      	bne.n	800b222 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	69d9      	ldr	r1, [r3, #28]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b214:	461a      	mov	r2, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7f6 f8e8 	bl	80013ec <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b228:	f003 0310 	and.w	r3, r3, #16
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d134      	bne.n	800b29a <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00a      	beq.n	800b24e <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	69d9      	ldr	r1, [r3, #28]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b240:	461a      	mov	r2, r3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7f6 f8d2 	bl	80013ec <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f022 0201 	bic.w	r2, r2, #1
 800b25c:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b262:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b268:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f003 0303 	and.w	r3, r3, #3
 800b286:	2b02      	cmp	r3, #2
 800b288:	d103      	bne.n	800b292 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7f6 f880 	bl	8001390 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800b290:	e00c      	b.n	800b2ac <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7fe fda7 	bl	8009de6 <HAL_JPEG_EncodeCpltCallback>
}
 800b298:	e008      	b.n	800b2ac <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b29e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d102      	bne.n	800b2ac <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f804 	bl	800b2b4 <JPEG_DMA_PollResidualData>
}
 800b2ac:	bf00      	nop
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b2bc:	2310      	movs	r3, #16
 800b2be:	617b      	str	r3, [r7, #20]
 800b2c0:	e04f      	b.n	800b362 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d146      	bne.n	800b35c <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2d4:	f003 0310 	and.w	r3, r3, #16
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d03f      	beq.n	800b35c <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2e2:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	69da      	ldr	r2, [r3, #28]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ec:	4413      	add	r3, r2
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	b2d2      	uxtb	r2, r2
 800b2f2:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	0a19      	lsrs	r1, r3, #8
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	69da      	ldr	r2, [r3, #28]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b300:	3301      	adds	r3, #1
 800b302:	4413      	add	r3, r2
 800b304:	b2ca      	uxtb	r2, r1
 800b306:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	0c19      	lsrs	r1, r3, #16
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	69da      	ldr	r2, [r3, #28]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b314:	3302      	adds	r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	b2ca      	uxtb	r2, r1
 800b31a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	0e19      	lsrs	r1, r3, #24
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	69da      	ldr	r2, [r3, #28]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b328:	3303      	adds	r3, #3
 800b32a:	4413      	add	r3, r2
 800b32c:	b2ca      	uxtb	r2, r1
 800b32e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b334:	1d1a      	adds	r2, r3, #4
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b342:	429a      	cmp	r2, r3
 800b344:	d10a      	bne.n	800b35c <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	69d9      	ldr	r1, [r3, #28]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b34e:	461a      	mov	r2, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7f6 f84b 	bl	80013ec <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	3b01      	subs	r3, #1
 800b360:	617b      	str	r3, [r7, #20]
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1ac      	bne.n	800b2c2 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b36c:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b374:	f003 0310 	and.w	r3, r3, #16
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d004      	beq.n	800b386 <JPEG_DMA_PollResidualData+0xd2>
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d133      	bne.n	800b3ee <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f022 0201 	bic.w	r2, r2, #1
 800b394:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00a      	beq.n	800b3b4 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	69d9      	ldr	r1, [r3, #28]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7f6 f81f 	bl	80013ec <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3b8:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3be:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	f003 0303 	and.w	r3, r3, #3
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d103      	bne.n	800b3e8 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7f5 ffd5 	bl	8001390 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800b3e6:	e002      	b.n	800b3ee <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7fe fcfc 	bl	8009de6 <HAL_JPEG_EncodeCpltCallback>
}
 800b3ee:	bf00      	nop
 800b3f0:	3718      	adds	r7, #24
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b3f6:	b590      	push	{r4, r7, lr}
 800b3f8:	b087      	sub	sp, #28
 800b3fa:	af02      	add	r7, sp, #8
 800b3fc:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b402:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b412:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b418:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b41c:	4013      	ands	r3, r2
 800b41e:	2b0c      	cmp	r3, #12
 800b420:	d17c      	bne.n	800b51c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b428:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b438:	1ad2      	subs	r2, r2, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	4619      	mov	r1, r3
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f7fe fcd8 	bl	8009dfa <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	429a      	cmp	r2, r3
 800b452:	d81f      	bhi.n	800b494 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10d      	bne.n	800b476 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b45e:	f043 0204 	orr.w	r2, r3, #4
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2206      	movs	r2, #6
 800b46a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f7f5 ff9e 	bl	80013b0 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b474:	e052      	b.n	800b51c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b47e:	68b9      	ldr	r1, [r7, #8]
 800b480:	fbb3 f1f1 	udiv	r1, r3, r1
 800b484:	68b8      	ldr	r0, [r7, #8]
 800b486:	fb00 f101 	mul.w	r1, r0, r1
 800b48a:	1a5b      	subs	r3, r3, r1
 800b48c:	1ad2      	subs	r2, r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	629a      	str	r2, [r3, #40]	@ 0x28
 800b492:	e010      	b.n	800b4b6 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00c      	beq.n	800b4b6 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a0:	f003 0303 	and.w	r3, r3, #3
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d006      	beq.n	800b4b6 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ac:	089b      	lsrs	r3, r3, #2
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	009a      	lsls	r2, r3, #2
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d124      	bne.n	800b50c <JPEG_MDMAInCpltCallback+0x116>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d020      	beq.n	800b50c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	3340      	adds	r3, #64	@ 0x40
 800b4da:	461c      	mov	r4, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	9200      	str	r2, [sp, #0]
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	f000 f9b5 	bl	800b854 <HAL_MDMA_Start_IT>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00d      	beq.n	800b50c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4f4:	f043 0204 	orr.w	r2, r3, #4
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2206      	movs	r2, #6
 800b500:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f7f5 ff53 	bl	80013b0 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b50a:	e007      	b.n	800b51c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b51a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800b51c:	3714      	adds	r7, #20
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd90      	pop	{r4, r7, pc}

0800b522 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b522:	b590      	push	{r4, r7, lr}
 800b524:	b087      	sub	sp, #28
 800b526:	af02      	add	r7, sp, #8
 800b528:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b52e:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b53e:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b544:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b548:	4013      	ands	r3, r2
 800b54a:	2b0c      	cmp	r3, #12
 800b54c:	d147      	bne.n	800b5de <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b554:	f003 0320 	and.w	r3, r3, #32
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d138      	bne.n	800b5ce <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	695b      	ldr	r3, [r3, #20]
 800b566:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b56a:	1ad2      	subs	r2, r2, r3
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	69d9      	ldr	r1, [r3, #28]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b578:	461a      	mov	r2, r3
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f7f5 ff36 	bl	80013ec <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d120      	bne.n	800b5ce <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	3344      	adds	r3, #68	@ 0x44
 800b596:	4619      	mov	r1, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	69db      	ldr	r3, [r3, #28]
 800b59c:	461c      	mov	r4, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	9200      	str	r2, [sp, #0]
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	f000 f954 	bl	800b854 <HAL_MDMA_Start_IT>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00d      	beq.n	800b5ce <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5b6:	f043 0204 	orr.w	r2, r3, #4
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2206      	movs	r2, #6
 800b5c2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f7f5 fef2 	bl	80013b0 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800b5cc:	e007      	b.n	800b5de <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b5dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd90      	pop	{r4, r7, pc}

0800b5e4 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f0:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f022 0201 	bic.w	r2, r2, #1
 800b600:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b610:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b61e:	f043 0204 	orr.w	r2, r3, #4
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f7f5 fec2 	bl	80013b0 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800b62c:	bf00      	nop
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b640:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b646:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f7ff fdc7 	bl	800b1e2 <JPEG_DMA_EndProcess>
  }
}
 800b654:	bf00      	nop
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b08b      	sub	sp, #44	@ 0x2c
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3350      	adds	r3, #80	@ 0x50
 800b66e:	61bb      	str	r3, [r7, #24]

  i = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b674:	e042      	b.n	800b6fc <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800b67c:	2300      	movs	r3, #0
 800b67e:	61fb      	str	r3, [r7, #28]
 800b680:	e033      	b.n	800b6ea <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	00db      	lsls	r3, r3, #3
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	fa22 f303 	lsr.w	r3, r2, r3
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d103      	bne.n	800b69e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800b696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b698:	3364      	adds	r3, #100	@ 0x64
 800b69a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b69c:	e022      	b.n	800b6e4 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	2264      	movs	r2, #100	@ 0x64
 800b6a2:	fb02 f303 	mul.w	r3, r2, r3
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b6aa:	6a38      	ldr	r0, [r7, #32]
 800b6ac:	69f9      	ldr	r1, [r7, #28]
 800b6ae:	4401      	add	r1, r0
 800b6b0:	4818      	ldr	r0, [pc, #96]	@ (800b714 <JPEG_GetQuality+0xb8>)
 800b6b2:	5c41      	ldrb	r1, [r0, r1]
 800b6b4:	440a      	add	r2, r1
 800b6b6:	7812      	ldrb	r2, [r2, #0]
 800b6b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b64      	cmp	r3, #100	@ 0x64
 800b6c2:	d807      	bhi.n	800b6d4 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800b6ca:	085b      	lsrs	r3, r3, #1
 800b6cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ce:	4413      	add	r3, r2
 800b6d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6d2:	e007      	b.n	800b6e4 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800b6d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6e0:	4413      	add	r3, r2
 800b6e2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	61fb      	str	r3, [r7, #28]
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d9c8      	bls.n	800b682 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800b6f0:	6a3b      	ldr	r3, [r7, #32]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	2b3c      	cmp	r3, #60	@ 0x3c
 800b700:	d9b9      	bls.n	800b676 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800b702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b704:	099b      	lsrs	r3, r3, #6
}
 800b706:	4618      	mov	r0, r3
 800b708:	372c      	adds	r7, #44	@ 0x2c
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	08018d2c 	.word	0x08018d2c

0800b718 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b720:	f7f7 f81c 	bl	800275c <HAL_GetTick>
 800b724:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e03b      	b.n	800b7a8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2202      	movs	r2, #2
 800b73c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68da      	ldr	r2, [r3, #12]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f022 0201 	bic.w	r2, r2, #1
 800b74e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b750:	e00f      	b.n	800b772 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b752:	f7f7 f803 	bl	800275c <HAL_GetTick>
 800b756:	4602      	mov	r2, r0
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	2b05      	cmp	r3, #5
 800b75e:	d908      	bls.n	800b772 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2240      	movs	r2, #64	@ 0x40
 800b764:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2203      	movs	r2, #3
 800b76a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e01a      	b.n	800b7a8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	f003 0301 	and.w	r3, r3, #1
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1e8      	bne.n	800b752 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fad3 	bl	800bd2c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e03e      	b.n	800b848 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d101      	bne.n	800b7d8 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	e037      	b.n	800b848 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d126      	bne.n	800b83a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d11c      	bne.n	800b834 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d108      	bne.n	800b822 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	691a      	ldr	r2, [r3, #16]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b81e:	611a      	str	r2, [r3, #16]
 800b820:	e00d      	b.n	800b83e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	691a      	ldr	r2, [r3, #16]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b830:	611a      	str	r2, [r3, #16]
 800b832:	e004      	b.n	800b83e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	75fb      	strb	r3, [r7, #23]
 800b838:	e001      	b.n	800b83e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b846:	7dfb      	ldrb	r3, [r7, #23]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	371c      	adds	r7, #28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af02      	add	r7, sp, #8
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
 800b860:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e070      	b.n	800b94e <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b872:	2b01      	cmp	r3, #1
 800b874:	d101      	bne.n	800b87a <HAL_MDMA_Start_IT+0x26>
 800b876:	2302      	movs	r3, #2
 800b878:	e069      	b.n	800b94e <HAL_MDMA_Start_IT+0xfa>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d158      	bne.n	800b940 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2202      	movs	r2, #2
 800b892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68da      	ldr	r2, [r3, #12]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f022 0201 	bic.w	r2, r2, #1
 800b8aa:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	68b9      	ldr	r1, [r7, #8]
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f000 f9c8 	bl	800bc4c <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68da      	ldr	r2, [r3, #12]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f042 0206 	orr.w	r2, r2, #6
 800b8ca:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d007      	beq.n	800b8e4 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68da      	ldr	r2, [r3, #12]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f042 0210 	orr.w	r2, r2, #16
 800b8e2:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d007      	beq.n	800b8fc <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68da      	ldr	r2, [r3, #12]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f042 0208 	orr.w	r2, r2, #8
 800b8fa:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b900:	2b00      	cmp	r3, #0
 800b902:	d007      	beq.n	800b914 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68da      	ldr	r2, [r3, #12]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f042 0220 	orr.w	r2, r2, #32
 800b912:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68da      	ldr	r2, [r3, #12]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f042 0201 	orr.w	r2, r2, #1
 800b922:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b92c:	d10e      	bne.n	800b94c <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68da      	ldr	r2, [r3, #12]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b93c:	60da      	str	r2, [r3, #12]
 800b93e:	e005      	b.n	800b94c <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800b948:	2302      	movs	r3, #2
 800b94a:	e000      	b.n	800b94e <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800b956:	b480      	push	{r7}
 800b958:	b083      	sub	sp, #12
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	e017      	b.n	800b998 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b02      	cmp	r3, #2
 800b972:	d004      	beq.n	800b97e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2280      	movs	r2, #128	@ 0x80
 800b978:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e00c      	b.n	800b998 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2204      	movs	r2, #4
 800b982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68da      	ldr	r2, [r3, #12]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f022 0201 	bic.w	r2, r2, #1
 800b994:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b9b0:	4b91      	ldr	r3, [pc, #580]	@ (800bbf8 <HAL_MDMA_IRQHandler+0x254>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a91      	ldr	r2, [pc, #580]	@ (800bbfc <HAL_MDMA_IRQHandler+0x258>)
 800b9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ba:	0a9b      	lsrs	r3, r3, #10
 800b9bc:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	4b8e      	ldr	r3, [pc, #568]	@ (800bc00 <HAL_MDMA_IRQHandler+0x25c>)
 800b9c6:	4413      	add	r3, r2
 800b9c8:	099b      	lsrs	r3, r3, #6
 800b9ca:	f003 031f 	and.w	r3, r3, #31
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9d4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b9d6:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	4013      	ands	r3, r2
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 812d 	beq.w	800bc40 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d054      	beq.n	800ba9e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d04d      	beq.n	800ba9e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68da      	ldr	r2, [r3, #12]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f022 0202 	bic.w	r2, r2, #2
 800ba10:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d106      	bne.n	800ba32 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba28:	f043 0201 	orr.w	r2, r3, #1
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	669a      	str	r2, [r3, #104]	@ 0x68
 800ba30:	e005      	b.n	800ba3e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba36:	f043 0202 	orr.w	r2, r3, #2
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d005      	beq.n	800ba54 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba4c:	f043 0204 	orr.w	r2, r3, #4
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d005      	beq.n	800ba6a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba62:	f043 0208 	orr.w	r2, r3, #8
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d005      	beq.n	800ba80 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba78:	f043 0210 	orr.w	r2, r3, #16
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d005      	beq.n	800ba96 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba8e:	f043 0220 	orr.w	r2, r3, #32
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 0310 	and.w	r3, r3, #16
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d012      	beq.n	800bad2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	f003 0320 	and.w	r3, r3, #32
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00b      	beq.n	800bad2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2210      	movs	r2, #16
 800bac0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0308 	and.w	r3, r3, #8
 800badc:	2b00      	cmp	r3, #0
 800bade:	d012      	beq.n	800bb06 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	f003 0310 	and.w	r3, r3, #16
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00b      	beq.n	800bb06 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2208      	movs	r2, #8
 800baf4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d003      	beq.n	800bb06 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f003 0304 	and.w	r3, r3, #4
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d012      	beq.n	800bb3a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	f003 0308 	and.w	r3, r3, #8
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00b      	beq.n	800bb3a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2204      	movs	r2, #4
 800bb28:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 0302 	and.w	r3, r3, #2
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d039      	beq.n	800bbbc <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	f003 0304 	and.w	r3, r3, #4
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d032      	beq.n	800bbbc <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68da      	ldr	r2, [r3, #12]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800bb64:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b04      	cmp	r3, #4
 800bb70:	d110      	bne.n	800bb94 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d05c      	beq.n	800bc44 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	4798      	blx	r3
        }
        return;
 800bb92:	e057      	b.n	800bc44 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2202      	movs	r2, #2
 800bb9a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d003      	beq.n	800bbbc <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d040      	beq.n	800bc46 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2204      	movs	r2, #4
 800bbc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68da      	ldr	r2, [r3, #12]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f022 0201 	bic.w	r2, r2, #1
 800bbda:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	60bb      	str	r3, [r7, #8]
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d30d      	bcc.n	800bc04 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1f2      	bne.n	800bbdc <HAL_MDMA_IRQHandler+0x238>
 800bbf6:	e006      	b.n	800bc06 <HAL_MDMA_IRQHandler+0x262>
 800bbf8:	24000004 	.word	0x24000004
 800bbfc:	1b4e81b5 	.word	0x1b4e81b5
 800bc00:	adffffc0 	.word	0xadffffc0
        break;
 800bc04:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	f003 0301 	and.w	r3, r3, #1
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d004      	beq.n	800bc26 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2203      	movs	r2, #3
 800bc20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800bc24:	e003      	b.n	800bc2e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d007      	beq.n	800bc46 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	4798      	blx	r3
 800bc3e:	e002      	b.n	800bc46 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800bc40:	bf00      	nop
 800bc42:	e000      	b.n	800bc46 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800bc44:	bf00      	nop
    }
  }
}
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b087      	sub	sp, #28
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	695a      	ldr	r2, [r3, #20]
 800bc60:	4b31      	ldr	r3, [pc, #196]	@ (800bd28 <MDMA_SetConfig+0xdc>)
 800bc62:	4013      	ands	r3, r2
 800bc64:	683a      	ldr	r2, [r7, #0]
 800bc66:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	6812      	ldr	r2, [r2, #0]
 800bc6e:	430b      	orrs	r3, r1
 800bc70:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800bc7c:	6a3b      	ldr	r3, [r7, #32]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	051a      	lsls	r2, r3, #20
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	430a      	orrs	r2, r1
 800bc88:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	221f      	movs	r2, #31
 800bc90:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bca8:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcb0:	d002      	beq.n	800bcb8 <MDMA_SetConfig+0x6c>
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d108      	bne.n	800bcca <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800bcc6:	629a      	str	r2, [r3, #40]	@ 0x28
 800bcc8:	e007      	b.n	800bcda <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bcd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bce0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bce8:	d002      	beq.n	800bcf0 <MDMA_SetConfig+0xa4>
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d108      	bne.n	800bd02 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bcfe:	629a      	str	r2, [r3, #40]	@ 0x28
 800bd00:	e007      	b.n	800bd12 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bd10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800bd1c:	bf00      	nop
 800bd1e:	371c      	adds	r7, #28
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	fffe0000 	.word	0xfffe0000

0800bd2c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68d9      	ldr	r1, [r3, #12]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	691a      	ldr	r2, [r3, #16]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	430a      	orrs	r2, r1
 800bd42:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	695a      	ldr	r2, [r3, #20]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bd52:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a1b      	ldr	r3, [r3, #32]
 800bd58:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bd5e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd64:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bd6a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd70:	3b01      	subs	r3, #1
 800bd72:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800bd74:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bd80:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bd82:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd8c:	d107      	bne.n	800bd9e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	691a      	ldr	r2, [r3, #16]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800bd9c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2200      	movs	r2, #0
 800bda4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	da11      	bge.n	800bdd2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	695a      	ldr	r2, [r3, #20]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bdbc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdc2:	425b      	negs	r3, r3
 800bdc4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	b292      	uxth	r2, r2
 800bdce:	621a      	str	r2, [r3, #32]
 800bdd0:	e006      	b.n	800bde0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	b292      	uxth	r2, r2
 800bdde:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	da15      	bge.n	800be14 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	695a      	ldr	r2, [r3, #20]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800bdf6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdfc:	425b      	negs	r3, r3
 800bdfe:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6a19      	ldr	r1, [r3, #32]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	041a      	lsls	r2, r3, #16
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	430a      	orrs	r2, r1
 800be10:	621a      	str	r2, [r3, #32]
 800be12:	e009      	b.n	800be28 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6a19      	ldr	r1, [r3, #32]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1e:	041a      	lsls	r2, r3, #16
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	430a      	orrs	r2, r1
 800be26:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be30:	d006      	beq.n	800be40 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	b2d2      	uxtb	r2, r2
 800be3c:	629a      	str	r2, [r3, #40]	@ 0x28
 800be3e:	e003      	b.n	800be48 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2200      	movs	r2, #0
 800be46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2200      	movs	r2, #0
 800be4e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800be50:	bf00      	nop
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af02      	add	r7, sp, #8
 800be62:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	e0fe      	b.n	800c06c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d106      	bne.n	800be88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f00b fcc8 	bl	8017818 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2203      	movs	r2, #3
 800be8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4618      	mov	r0, r3
 800be96:	f008 f86e 	bl	8013f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6818      	ldr	r0, [r3, #0]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	7c1a      	ldrb	r2, [r3, #16]
 800bea2:	f88d 2000 	strb.w	r2, [sp]
 800bea6:	3304      	adds	r3, #4
 800bea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800beaa:	f007 ff3f 	bl	8013d2c <USB_CoreInit>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d005      	beq.n	800bec0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2202      	movs	r2, #2
 800beb8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	e0d5      	b.n	800c06c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2100      	movs	r1, #0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f008 f866 	bl	8013f98 <USB_SetCurrentMode>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d005      	beq.n	800bede <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2202      	movs	r2, #2
 800bed6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e0c6      	b.n	800c06c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bede:	2300      	movs	r3, #0
 800bee0:	73fb      	strb	r3, [r7, #15]
 800bee2:	e04a      	b.n	800bf7a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bee4:	7bfa      	ldrb	r2, [r7, #15]
 800bee6:	6879      	ldr	r1, [r7, #4]
 800bee8:	4613      	mov	r3, r2
 800beea:	00db      	lsls	r3, r3, #3
 800beec:	4413      	add	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	440b      	add	r3, r1
 800bef2:	3315      	adds	r3, #21
 800bef4:	2201      	movs	r2, #1
 800bef6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bef8:	7bfa      	ldrb	r2, [r7, #15]
 800befa:	6879      	ldr	r1, [r7, #4]
 800befc:	4613      	mov	r3, r2
 800befe:	00db      	lsls	r3, r3, #3
 800bf00:	4413      	add	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	440b      	add	r3, r1
 800bf06:	3314      	adds	r3, #20
 800bf08:	7bfa      	ldrb	r2, [r7, #15]
 800bf0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bf0c:	7bfa      	ldrb	r2, [r7, #15]
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
 800bf10:	b298      	uxth	r0, r3
 800bf12:	6879      	ldr	r1, [r7, #4]
 800bf14:	4613      	mov	r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	4413      	add	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	440b      	add	r3, r1
 800bf1e:	332e      	adds	r3, #46	@ 0x2e
 800bf20:	4602      	mov	r2, r0
 800bf22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bf24:	7bfa      	ldrb	r2, [r7, #15]
 800bf26:	6879      	ldr	r1, [r7, #4]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	00db      	lsls	r3, r3, #3
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	440b      	add	r3, r1
 800bf32:	3318      	adds	r3, #24
 800bf34:	2200      	movs	r2, #0
 800bf36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bf38:	7bfa      	ldrb	r2, [r7, #15]
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	440b      	add	r3, r1
 800bf46:	331c      	adds	r3, #28
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bf4c:	7bfa      	ldrb	r2, [r7, #15]
 800bf4e:	6879      	ldr	r1, [r7, #4]
 800bf50:	4613      	mov	r3, r2
 800bf52:	00db      	lsls	r3, r3, #3
 800bf54:	4413      	add	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	440b      	add	r3, r1
 800bf5a:	3320      	adds	r3, #32
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bf60:	7bfa      	ldrb	r2, [r7, #15]
 800bf62:	6879      	ldr	r1, [r7, #4]
 800bf64:	4613      	mov	r3, r2
 800bf66:	00db      	lsls	r3, r3, #3
 800bf68:	4413      	add	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	440b      	add	r3, r1
 800bf6e:	3324      	adds	r3, #36	@ 0x24
 800bf70:	2200      	movs	r2, #0
 800bf72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	3301      	adds	r3, #1
 800bf78:	73fb      	strb	r3, [r7, #15]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	791b      	ldrb	r3, [r3, #4]
 800bf7e:	7bfa      	ldrb	r2, [r7, #15]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d3af      	bcc.n	800bee4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf84:	2300      	movs	r3, #0
 800bf86:	73fb      	strb	r3, [r7, #15]
 800bf88:	e044      	b.n	800c014 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bf8a:	7bfa      	ldrb	r2, [r7, #15]
 800bf8c:	6879      	ldr	r1, [r7, #4]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	00db      	lsls	r3, r3, #3
 800bf92:	4413      	add	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	440b      	add	r3, r1
 800bf98:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bfa0:	7bfa      	ldrb	r2, [r7, #15]
 800bfa2:	6879      	ldr	r1, [r7, #4]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	4413      	add	r3, r2
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	440b      	add	r3, r1
 800bfae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800bfb2:	7bfa      	ldrb	r2, [r7, #15]
 800bfb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bfb6:	7bfa      	ldrb	r2, [r7, #15]
 800bfb8:	6879      	ldr	r1, [r7, #4]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	00db      	lsls	r3, r3, #3
 800bfbe:	4413      	add	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	440b      	add	r3, r1
 800bfc4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bfc8:	2200      	movs	r2, #0
 800bfca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bfcc:	7bfa      	ldrb	r2, [r7, #15]
 800bfce:	6879      	ldr	r1, [r7, #4]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	00db      	lsls	r3, r3, #3
 800bfd4:	4413      	add	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	440b      	add	r3, r1
 800bfda:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800bfde:	2200      	movs	r2, #0
 800bfe0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bfe2:	7bfa      	ldrb	r2, [r7, #15]
 800bfe4:	6879      	ldr	r1, [r7, #4]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	00db      	lsls	r3, r3, #3
 800bfea:	4413      	add	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	440b      	add	r3, r1
 800bff0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bff4:	2200      	movs	r2, #0
 800bff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bff8:	7bfa      	ldrb	r2, [r7, #15]
 800bffa:	6879      	ldr	r1, [r7, #4]
 800bffc:	4613      	mov	r3, r2
 800bffe:	00db      	lsls	r3, r3, #3
 800c000:	4413      	add	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	440b      	add	r3, r1
 800c006:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c00a:	2200      	movs	r2, #0
 800c00c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	3301      	adds	r3, #1
 800c012:	73fb      	strb	r3, [r7, #15]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	791b      	ldrb	r3, [r3, #4]
 800c018:	7bfa      	ldrb	r2, [r7, #15]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d3b5      	bcc.n	800bf8a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	7c1a      	ldrb	r2, [r3, #16]
 800c026:	f88d 2000 	strb.w	r2, [sp]
 800c02a:	3304      	adds	r3, #4
 800c02c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c02e:	f007 ffff 	bl	8014030 <USB_DevInit>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d005      	beq.n	800c044 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2202      	movs	r2, #2
 800c03c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	e013      	b.n	800c06c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2201      	movs	r2, #1
 800c04e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	7b1b      	ldrb	r3, [r3, #12]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d102      	bne.n	800c060 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f001 f96e 	bl	800d33c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4618      	mov	r0, r3
 800c066:	f009 f842 	bl	80150ee <USB_DevDisconnect>

  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d101      	bne.n	800c090 <HAL_PCD_Start+0x1c>
 800c08c:	2302      	movs	r3, #2
 800c08e:	e022      	b.n	800c0d6 <HAL_PCD_Start+0x62>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d009      	beq.n	800c0b8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d105      	bne.n	800c0b8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f007 ff49 	bl	8013f54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f008 fff0 	bl	80150ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c0de:	b590      	push	{r4, r7, lr}
 800c0e0:	b08d      	sub	sp, #52	@ 0x34
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ec:	6a3b      	ldr	r3, [r7, #32]
 800c0ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f009 f8ae 	bl	8015256 <USB_GetMode>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f040 84b9 	bne.w	800ca74 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4618      	mov	r0, r3
 800c108:	f009 f812 	bl	8015130 <USB_ReadInterrupts>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f000 84af 	beq.w	800ca72 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	0a1b      	lsrs	r3, r3, #8
 800c11e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f008 ffff 	bl	8015130 <USB_ReadInterrupts>
 800c132:	4603      	mov	r3, r0
 800c134:	f003 0302 	and.w	r3, r3, #2
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d107      	bne.n	800c14c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	695a      	ldr	r2, [r3, #20]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f002 0202 	and.w	r2, r2, #2
 800c14a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4618      	mov	r0, r3
 800c152:	f008 ffed 	bl	8015130 <USB_ReadInterrupts>
 800c156:	4603      	mov	r3, r0
 800c158:	f003 0310 	and.w	r3, r3, #16
 800c15c:	2b10      	cmp	r3, #16
 800c15e:	d161      	bne.n	800c224 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	699a      	ldr	r2, [r3, #24]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f022 0210 	bic.w	r2, r2, #16
 800c16e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	6a1b      	ldr	r3, [r3, #32]
 800c174:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	f003 020f 	and.w	r2, r3, #15
 800c17c:	4613      	mov	r3, r2
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	4413      	add	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	4413      	add	r3, r2
 800c18c:	3304      	adds	r3, #4
 800c18e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c196:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c19a:	d124      	bne.n	800c1e6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c19c:	69ba      	ldr	r2, [r7, #24]
 800c19e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c1a2:	4013      	ands	r3, r2
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d035      	beq.n	800c214 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	091b      	lsrs	r3, r3, #4
 800c1b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c1b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	6a38      	ldr	r0, [r7, #32]
 800c1bc:	f008 fe24 	bl	8014e08 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	68da      	ldr	r2, [r3, #12]
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	091b      	lsrs	r3, r3, #4
 800c1c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1cc:	441a      	add	r2, r3
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	695a      	ldr	r2, [r3, #20]
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	091b      	lsrs	r3, r3, #4
 800c1da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1de:	441a      	add	r2, r3
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	615a      	str	r2, [r3, #20]
 800c1e4:	e016      	b.n	800c214 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c1ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c1f0:	d110      	bne.n	800c214 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c1f8:	2208      	movs	r2, #8
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6a38      	ldr	r0, [r7, #32]
 800c1fe:	f008 fe03 	bl	8014e08 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	695a      	ldr	r2, [r3, #20]
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	091b      	lsrs	r3, r3, #4
 800c20a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c20e:	441a      	add	r2, r3
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	699a      	ldr	r2, [r3, #24]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f042 0210 	orr.w	r2, r2, #16
 800c222:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4618      	mov	r0, r3
 800c22a:	f008 ff81 	bl	8015130 <USB_ReadInterrupts>
 800c22e:	4603      	mov	r3, r0
 800c230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c234:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c238:	f040 80a7 	bne.w	800c38a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c23c:	2300      	movs	r3, #0
 800c23e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4618      	mov	r0, r3
 800c246:	f008 ff86 	bl	8015156 <USB_ReadDevAllOutEpInterrupt>
 800c24a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c24c:	e099      	b.n	800c382 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c250:	f003 0301 	and.w	r3, r3, #1
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 808e 	beq.w	800c376 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c260:	b2d2      	uxtb	r2, r2
 800c262:	4611      	mov	r1, r2
 800c264:	4618      	mov	r0, r3
 800c266:	f008 ffaa 	bl	80151be <USB_ReadDevOutEPInterrupt>
 800c26a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	f003 0301 	and.w	r3, r3, #1
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00c      	beq.n	800c290 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c278:	015a      	lsls	r2, r3, #5
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	4413      	add	r3, r2
 800c27e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c282:	461a      	mov	r2, r3
 800c284:	2301      	movs	r3, #1
 800c286:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c288:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fed0 	bl	800d030 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	f003 0308 	and.w	r3, r3, #8
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00c      	beq.n	800c2b4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29c:	015a      	lsls	r2, r3, #5
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	2308      	movs	r3, #8
 800c2aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c2ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 ffa6 	bl	800d200 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	f003 0310 	and.w	r3, r3, #16
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d008      	beq.n	800c2d0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c0:	015a      	lsls	r2, r3, #5
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	2310      	movs	r3, #16
 800c2ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	f003 0302 	and.w	r3, r3, #2
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d030      	beq.n	800c33c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	695b      	ldr	r3, [r3, #20]
 800c2de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2e2:	2b80      	cmp	r3, #128	@ 0x80
 800c2e4:	d109      	bne.n	800c2fa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	69fa      	ldr	r2, [r7, #28]
 800c2f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c2f8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c2fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	4413      	add	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	4413      	add	r3, r2
 800c30c:	3304      	adds	r3, #4
 800c30e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	78db      	ldrb	r3, [r3, #3]
 800c314:	2b01      	cmp	r3, #1
 800c316:	d108      	bne.n	800c32a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	2200      	movs	r2, #0
 800c31c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c320:	b2db      	uxtb	r3, r3
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f00b fb9d 	bl	8017a64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32c:	015a      	lsls	r2, r3, #5
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	4413      	add	r3, r2
 800c332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c336:	461a      	mov	r2, r3
 800c338:	2302      	movs	r3, #2
 800c33a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	f003 0320 	and.w	r3, r3, #32
 800c342:	2b00      	cmp	r3, #0
 800c344:	d008      	beq.n	800c358 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c348:	015a      	lsls	r2, r3, #5
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	4413      	add	r3, r2
 800c34e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c352:	461a      	mov	r2, r3
 800c354:	2320      	movs	r3, #32
 800c356:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d009      	beq.n	800c376 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c364:	015a      	lsls	r2, r3, #5
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	4413      	add	r3, r2
 800c36a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c36e:	461a      	mov	r2, r3
 800c370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c374:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c378:	3301      	adds	r3, #1
 800c37a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37e:	085b      	lsrs	r3, r3, #1
 800c380:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c384:	2b00      	cmp	r3, #0
 800c386:	f47f af62 	bne.w	800c24e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4618      	mov	r0, r3
 800c390:	f008 fece 	bl	8015130 <USB_ReadInterrupts>
 800c394:	4603      	mov	r3, r0
 800c396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c39a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c39e:	f040 80db 	bne.w	800c558 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f008 feef 	bl	801518a <USB_ReadDevAllInEpInterrupt>
 800c3ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c3b2:	e0cd      	b.n	800c550 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f000 80c2 	beq.w	800c544 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3c6:	b2d2      	uxtb	r2, r2
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f008 ff15 	bl	80151fa <USB_ReadDevInEPInterrupt>
 800c3d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d057      	beq.n	800c48c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	f003 030f 	and.w	r3, r3, #15
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	43db      	mvns	r3, r3
 800c3f6:	69f9      	ldr	r1, [r7, #28]
 800c3f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c402:	015a      	lsls	r2, r3, #5
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	4413      	add	r3, r2
 800c408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c40c:	461a      	mov	r2, r3
 800c40e:	2301      	movs	r3, #1
 800c410:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	799b      	ldrb	r3, [r3, #6]
 800c416:	2b01      	cmp	r3, #1
 800c418:	d132      	bne.n	800c480 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c41a:	6879      	ldr	r1, [r7, #4]
 800c41c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c41e:	4613      	mov	r3, r2
 800c420:	00db      	lsls	r3, r3, #3
 800c422:	4413      	add	r3, r2
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	440b      	add	r3, r1
 800c428:	3320      	adds	r3, #32
 800c42a:	6819      	ldr	r1, [r3, #0]
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c430:	4613      	mov	r3, r2
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	4413      	add	r3, r2
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	4403      	add	r3, r0
 800c43a:	331c      	adds	r3, #28
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4419      	add	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c444:	4613      	mov	r3, r2
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	4413      	add	r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	4403      	add	r3, r0
 800c44e:	3320      	adds	r3, #32
 800c450:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	d113      	bne.n	800c480 <HAL_PCD_IRQHandler+0x3a2>
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c45c:	4613      	mov	r3, r2
 800c45e:	00db      	lsls	r3, r3, #3
 800c460:	4413      	add	r3, r2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	440b      	add	r3, r1
 800c466:	3324      	adds	r3, #36	@ 0x24
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d108      	bne.n	800c480 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6818      	ldr	r0, [r3, #0]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c478:	461a      	mov	r2, r3
 800c47a:	2101      	movs	r1, #1
 800c47c:	f008 ff1e 	bl	80152bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c482:	b2db      	uxtb	r3, r3
 800c484:	4619      	mov	r1, r3
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f00b fa67 	bl	801795a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	f003 0308 	and.w	r3, r3, #8
 800c492:	2b00      	cmp	r3, #0
 800c494:	d008      	beq.n	800c4a8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	015a      	lsls	r2, r3, #5
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	4413      	add	r3, r2
 800c49e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	2308      	movs	r3, #8
 800c4a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	f003 0310 	and.w	r3, r3, #16
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d008      	beq.n	800c4c4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b4:	015a      	lsls	r2, r3, #5
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4be:	461a      	mov	r2, r3
 800c4c0:	2310      	movs	r3, #16
 800c4c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d008      	beq.n	800c4e0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d0:	015a      	lsls	r2, r3, #5
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4da:	461a      	mov	r2, r3
 800c4dc:	2340      	movs	r3, #64	@ 0x40
 800c4de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d023      	beq.n	800c532 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c4ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c4ec:	6a38      	ldr	r0, [r7, #32]
 800c4ee:	f007 fefd 	bl	80142ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c4f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	4413      	add	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	3310      	adds	r3, #16
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	4413      	add	r3, r2
 800c502:	3304      	adds	r3, #4
 800c504:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	78db      	ldrb	r3, [r3, #3]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d108      	bne.n	800c520 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2200      	movs	r2, #0
 800c512:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c516:	b2db      	uxtb	r3, r3
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f00b fab4 	bl	8017a88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c522:	015a      	lsls	r2, r3, #5
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	4413      	add	r3, r2
 800c528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c52c:	461a      	mov	r2, r3
 800c52e:	2302      	movs	r3, #2
 800c530:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d003      	beq.n	800c544 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c53c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fcea 	bl	800cf18 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c546:	3301      	adds	r3, #1
 800c548:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54c:	085b      	lsrs	r3, r3, #1
 800c54e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c552:	2b00      	cmp	r3, #0
 800c554:	f47f af2e 	bne.w	800c3b4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f008 fde7 	bl	8015130 <USB_ReadInterrupts>
 800c562:	4603      	mov	r3, r0
 800c564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c56c:	d122      	bne.n	800c5b4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	69fa      	ldr	r2, [r7, #28]
 800c578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c57c:	f023 0301 	bic.w	r3, r3, #1
 800c580:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d108      	bne.n	800c59e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c594:	2100      	movs	r1, #0
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fef4 	bl	800d384 <HAL_PCDEx_LPM_Callback>
 800c59c:	e002      	b.n	800c5a4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f00b fa52 	bl	8017a48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	695a      	ldr	r2, [r3, #20]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c5b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f008 fdb9 	bl	8015130 <USB_ReadInterrupts>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c5c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c5c8:	d112      	bne.n	800c5f0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	f003 0301 	and.w	r3, r3, #1
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d102      	bne.n	800c5e0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f00b fa0e 	bl	80179fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	695a      	ldr	r2, [r3, #20]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c5ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f008 fd9b 	bl	8015130 <USB_ReadInterrupts>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c600:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c604:	d121      	bne.n	800c64a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	695a      	ldr	r2, [r3, #20]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c614:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d111      	bne.n	800c644 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c62e:	089b      	lsrs	r3, r3, #2
 800c630:	f003 020f 	and.w	r2, r3, #15
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c63a:	2101      	movs	r1, #1
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 fea1 	bl	800d384 <HAL_PCDEx_LPM_Callback>
 800c642:	e002      	b.n	800c64a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f00b f9d9 	bl	80179fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4618      	mov	r0, r3
 800c650:	f008 fd6e 	bl	8015130 <USB_ReadInterrupts>
 800c654:	4603      	mov	r3, r0
 800c656:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c65a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c65e:	f040 80b7 	bne.w	800c7d0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	69fa      	ldr	r2, [r7, #28]
 800c66c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c670:	f023 0301 	bic.w	r3, r3, #1
 800c674:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2110      	movs	r1, #16
 800c67c:	4618      	mov	r0, r3
 800c67e:	f007 fe35 	bl	80142ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c682:	2300      	movs	r3, #0
 800c684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c686:	e046      	b.n	800c716 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c694:	461a      	mov	r2, r3
 800c696:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c69a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69e:	015a      	lsls	r2, r3, #5
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6ac:	0151      	lsls	r1, r2, #5
 800c6ae:	69fa      	ldr	r2, [r7, #28]
 800c6b0:	440a      	add	r2, r1
 800c6b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6be:	015a      	lsls	r2, r3, #5
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c6ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d2:	015a      	lsls	r2, r3, #5
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6e0:	0151      	lsls	r1, r2, #5
 800c6e2:	69fa      	ldr	r2, [r7, #28]
 800c6e4:	440a      	add	r2, r1
 800c6e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c6ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f2:	015a      	lsls	r2, r3, #5
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c700:	0151      	lsls	r1, r2, #5
 800c702:	69fa      	ldr	r2, [r7, #28]
 800c704:	440a      	add	r2, r1
 800c706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c70a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c70e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c712:	3301      	adds	r3, #1
 800c714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	791b      	ldrb	r3, [r3, #4]
 800c71a:	461a      	mov	r2, r3
 800c71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71e:	4293      	cmp	r3, r2
 800c720:	d3b2      	bcc.n	800c688 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c728:	69db      	ldr	r3, [r3, #28]
 800c72a:	69fa      	ldr	r2, [r7, #28]
 800c72c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c730:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c734:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	7bdb      	ldrb	r3, [r3, #15]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d016      	beq.n	800c76c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c748:	69fa      	ldr	r2, [r7, #28]
 800c74a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c74e:	f043 030b 	orr.w	r3, r3, #11
 800c752:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c75e:	69fa      	ldr	r2, [r7, #28]
 800c760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c764:	f043 030b 	orr.w	r3, r3, #11
 800c768:	6453      	str	r3, [r2, #68]	@ 0x44
 800c76a:	e015      	b.n	800c798 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c772:	695a      	ldr	r2, [r3, #20]
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c77a:	4619      	mov	r1, r3
 800c77c:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c780:	4313      	orrs	r3, r2
 800c782:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	69fa      	ldr	r2, [r7, #28]
 800c78e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c792:	f043 030b 	orr.w	r3, r3, #11
 800c796:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	69fa      	ldr	r2, [r7, #28]
 800c7a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c7aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6818      	ldr	r0, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	f008 fd7e 	bl	80152bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	695a      	ldr	r2, [r3, #20]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c7ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f008 fcab 	bl	8015130 <USB_ReadInterrupts>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7e4:	d123      	bne.n	800c82e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f008 fd42 	bl	8015274 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f007 fdf2 	bl	80143de <USB_GetDevSpeed>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681c      	ldr	r4, [r3, #0]
 800c806:	f001 fd9d 	bl	800e344 <HAL_RCC_GetHCLKFreq>
 800c80a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c810:	461a      	mov	r2, r3
 800c812:	4620      	mov	r0, r4
 800c814:	f007 fafc 	bl	8013e10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f00b f8c6 	bl	80179aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	695a      	ldr	r2, [r3, #20]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c82c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4618      	mov	r0, r3
 800c834:	f008 fc7c 	bl	8015130 <USB_ReadInterrupts>
 800c838:	4603      	mov	r3, r0
 800c83a:	f003 0308 	and.w	r3, r3, #8
 800c83e:	2b08      	cmp	r3, #8
 800c840:	d10a      	bne.n	800c858 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f00b f8a3 	bl	801798e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	695a      	ldr	r2, [r3, #20]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f002 0208 	and.w	r2, r2, #8
 800c856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f008 fc67 	bl	8015130 <USB_ReadInterrupts>
 800c862:	4603      	mov	r3, r0
 800c864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c868:	2b80      	cmp	r3, #128	@ 0x80
 800c86a:	d123      	bne.n	800c8b4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	699b      	ldr	r3, [r3, #24]
 800c870:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c878:	2301      	movs	r3, #1
 800c87a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c87c:	e014      	b.n	800c8a8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c87e:	6879      	ldr	r1, [r7, #4]
 800c880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c882:	4613      	mov	r3, r2
 800c884:	00db      	lsls	r3, r3, #3
 800c886:	4413      	add	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	440b      	add	r3, r1
 800c88c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d105      	bne.n	800c8a2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fb0a 	bl	800ceb6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	791b      	ldrb	r3, [r3, #4]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d3e4      	bcc.n	800c87e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f008 fc39 	bl	8015130 <USB_ReadInterrupts>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c8c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8c8:	d13c      	bne.n	800c944 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8ce:	e02b      	b.n	800c928 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d2:	015a      	lsls	r2, r3, #5
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c8e0:	6879      	ldr	r1, [r7, #4]
 800c8e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	00db      	lsls	r3, r3, #3
 800c8e8:	4413      	add	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	440b      	add	r3, r1
 800c8ee:	3318      	adds	r3, #24
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d115      	bne.n	800c922 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c8f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	da12      	bge.n	800c922 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c8fc:	6879      	ldr	r1, [r7, #4]
 800c8fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c900:	4613      	mov	r3, r2
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	4413      	add	r3, r2
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	440b      	add	r3, r1
 800c90a:	3317      	adds	r3, #23
 800c90c:	2201      	movs	r2, #1
 800c90e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c912:	b2db      	uxtb	r3, r3
 800c914:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	4619      	mov	r1, r3
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 faca 	bl	800ceb6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c924:	3301      	adds	r3, #1
 800c926:	627b      	str	r3, [r7, #36]	@ 0x24
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	791b      	ldrb	r3, [r3, #4]
 800c92c:	461a      	mov	r2, r3
 800c92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c930:	4293      	cmp	r3, r2
 800c932:	d3cd      	bcc.n	800c8d0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	695a      	ldr	r2, [r3, #20]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4618      	mov	r0, r3
 800c94a:	f008 fbf1 	bl	8015130 <USB_ReadInterrupts>
 800c94e:	4603      	mov	r3, r0
 800c950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c954:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c958:	d156      	bne.n	800ca08 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c95a:	2301      	movs	r3, #1
 800c95c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c95e:	e045      	b.n	800c9ec <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c962:	015a      	lsls	r2, r3, #5
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	4413      	add	r3, r2
 800c968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c970:	6879      	ldr	r1, [r7, #4]
 800c972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c974:	4613      	mov	r3, r2
 800c976:	00db      	lsls	r3, r3, #3
 800c978:	4413      	add	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	440b      	add	r3, r1
 800c97e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d12e      	bne.n	800c9e6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c988:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	da2b      	bge.n	800c9e6 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	0c1a      	lsrs	r2, r3, #16
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c998:	4053      	eors	r3, r2
 800c99a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d121      	bne.n	800c9e6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c9a2:	6879      	ldr	r1, [r7, #4]
 800c9a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	00db      	lsls	r3, r3, #3
 800c9aa:	4413      	add	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	440b      	add	r3, r1
 800c9b0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c9b8:	6a3b      	ldr	r3, [r7, #32]
 800c9ba:	699b      	ldr	r3, [r3, #24]
 800c9bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c9c4:	6a3b      	ldr	r3, [r7, #32]
 800c9c6:	695b      	ldr	r3, [r3, #20]
 800c9c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d10a      	bne.n	800c9e6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	69fa      	ldr	r2, [r7, #28]
 800c9da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c9e2:	6053      	str	r3, [r2, #4]
            break;
 800c9e4:	e008      	b.n	800c9f8 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	791b      	ldrb	r3, [r3, #4]
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d3b3      	bcc.n	800c960 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	695a      	ldr	r2, [r3, #20]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800ca06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f008 fb8f 	bl	8015130 <USB_ReadInterrupts>
 800ca12:	4603      	mov	r3, r0
 800ca14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ca18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca1c:	d10a      	bne.n	800ca34 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f00b f844 	bl	8017aac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	695a      	ldr	r2, [r3, #20]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ca32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f008 fb79 	bl	8015130 <USB_ReadInterrupts>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	f003 0304 	and.w	r3, r3, #4
 800ca44:	2b04      	cmp	r3, #4
 800ca46:	d115      	bne.n	800ca74 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	f003 0304 	and.w	r3, r3, #4
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f00b f834 	bl	8017ac8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6859      	ldr	r1, [r3, #4]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	69ba      	ldr	r2, [r7, #24]
 800ca6c:	430a      	orrs	r2, r1
 800ca6e:	605a      	str	r2, [r3, #4]
 800ca70:	e000      	b.n	800ca74 <HAL_PCD_IRQHandler+0x996>
      return;
 800ca72:	bf00      	nop
    }
  }
}
 800ca74:	3734      	adds	r7, #52	@ 0x34
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd90      	pop	{r4, r7, pc}

0800ca7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	460b      	mov	r3, r1
 800ca84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d101      	bne.n	800ca94 <HAL_PCD_SetAddress+0x1a>
 800ca90:	2302      	movs	r3, #2
 800ca92:	e012      	b.n	800caba <HAL_PCD_SetAddress+0x40>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	78fa      	ldrb	r2, [r7, #3]
 800caa0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	78fa      	ldrb	r2, [r7, #3]
 800caa8:	4611      	mov	r1, r2
 800caaa:	4618      	mov	r0, r3
 800caac:	f008 fad8 	bl	8015060 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b084      	sub	sp, #16
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	4608      	mov	r0, r1
 800cacc:	4611      	mov	r1, r2
 800cace:	461a      	mov	r2, r3
 800cad0:	4603      	mov	r3, r0
 800cad2:	70fb      	strb	r3, [r7, #3]
 800cad4:	460b      	mov	r3, r1
 800cad6:	803b      	strh	r3, [r7, #0]
 800cad8:	4613      	mov	r3, r2
 800cada:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	da0f      	bge.n	800cb08 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cae8:	78fb      	ldrb	r3, [r7, #3]
 800caea:	f003 020f 	and.w	r2, r3, #15
 800caee:	4613      	mov	r3, r2
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	4413      	add	r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	3310      	adds	r3, #16
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	4413      	add	r3, r2
 800cafc:	3304      	adds	r3, #4
 800cafe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2201      	movs	r2, #1
 800cb04:	705a      	strb	r2, [r3, #1]
 800cb06:	e00f      	b.n	800cb28 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb08:	78fb      	ldrb	r3, [r7, #3]
 800cb0a:	f003 020f 	and.w	r2, r3, #15
 800cb0e:	4613      	mov	r3, r2
 800cb10:	00db      	lsls	r3, r3, #3
 800cb12:	4413      	add	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	3304      	adds	r3, #4
 800cb20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2200      	movs	r2, #0
 800cb26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cb28:	78fb      	ldrb	r3, [r7, #3]
 800cb2a:	f003 030f 	and.w	r3, r3, #15
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800cb34:	883b      	ldrh	r3, [r7, #0]
 800cb36:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	78ba      	ldrb	r2, [r7, #2]
 800cb42:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	785b      	ldrb	r3, [r3, #1]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d004      	beq.n	800cb56 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	461a      	mov	r2, r3
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cb56:	78bb      	ldrb	r3, [r7, #2]
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d102      	bne.n	800cb62 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d101      	bne.n	800cb70 <HAL_PCD_EP_Open+0xae>
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	e00e      	b.n	800cb8e <HAL_PCD_EP_Open+0xcc>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2201      	movs	r2, #1
 800cb74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68f9      	ldr	r1, [r7, #12]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f007 fc52 	bl	8014428 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800cb8c:	7afb      	ldrb	r3, [r7, #11]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b084      	sub	sp, #16
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	da0f      	bge.n	800cbca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cbaa:	78fb      	ldrb	r3, [r7, #3]
 800cbac:	f003 020f 	and.w	r2, r3, #15
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	4413      	add	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	3310      	adds	r3, #16
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	705a      	strb	r2, [r3, #1]
 800cbc8:	e00f      	b.n	800cbea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cbca:	78fb      	ldrb	r3, [r7, #3]
 800cbcc:	f003 020f 	and.w	r2, r3, #15
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	00db      	lsls	r3, r3, #3
 800cbd4:	4413      	add	r3, r2
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	4413      	add	r3, r2
 800cbe0:	3304      	adds	r3, #4
 800cbe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800cbea:	78fb      	ldrb	r3, [r7, #3]
 800cbec:	f003 030f 	and.w	r3, r3, #15
 800cbf0:	b2da      	uxtb	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d101      	bne.n	800cc04 <HAL_PCD_EP_Close+0x6e>
 800cc00:	2302      	movs	r3, #2
 800cc02:	e00e      	b.n	800cc22 <HAL_PCD_EP_Close+0x8c>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68f9      	ldr	r1, [r7, #12]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f007 fc90 	bl	8014538 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b086      	sub	sp, #24
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	60f8      	str	r0, [r7, #12]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	603b      	str	r3, [r7, #0]
 800cc36:	460b      	mov	r3, r1
 800cc38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc3a:	7afb      	ldrb	r3, [r7, #11]
 800cc3c:	f003 020f 	and.w	r2, r3, #15
 800cc40:	4613      	mov	r3, r2
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	4413      	add	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	4413      	add	r3, r2
 800cc50:	3304      	adds	r3, #4
 800cc52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	683a      	ldr	r2, [r7, #0]
 800cc5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	2200      	movs	r2, #0
 800cc64:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc6c:	7afb      	ldrb	r3, [r7, #11]
 800cc6e:	f003 030f 	and.w	r3, r3, #15
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	799b      	ldrb	r3, [r3, #6]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d102      	bne.n	800cc86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6818      	ldr	r0, [r3, #0]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	799b      	ldrb	r3, [r3, #6]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	6979      	ldr	r1, [r7, #20]
 800cc92:	f007 fd2d 	bl	80146f0 <USB_EPStartXfer>

  return HAL_OK;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3718      	adds	r7, #24
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ccac:	78fb      	ldrb	r3, [r7, #3]
 800ccae:	f003 020f 	and.w	r2, r3, #15
 800ccb2:	6879      	ldr	r1, [r7, #4]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	4413      	add	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	440b      	add	r3, r1
 800ccbe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ccc2:	681b      	ldr	r3, [r3, #0]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	607a      	str	r2, [r7, #4]
 800ccda:	603b      	str	r3, [r7, #0]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cce0:	7afb      	ldrb	r3, [r7, #11]
 800cce2:	f003 020f 	and.w	r2, r3, #15
 800cce6:	4613      	mov	r3, r2
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	4413      	add	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	3310      	adds	r3, #16
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	2200      	movs	r2, #0
 800cd08:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cd10:	7afb      	ldrb	r3, [r7, #11]
 800cd12:	f003 030f 	and.w	r3, r3, #15
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	799b      	ldrb	r3, [r3, #6]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d102      	bne.n	800cd2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6818      	ldr	r0, [r3, #0]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	799b      	ldrb	r3, [r3, #6]
 800cd32:	461a      	mov	r2, r3
 800cd34:	6979      	ldr	r1, [r7, #20]
 800cd36:	f007 fcdb 	bl	80146f0 <USB_EPStartXfer>

  return HAL_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3718      	adds	r7, #24
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cd50:	78fb      	ldrb	r3, [r7, #3]
 800cd52:	f003 030f 	and.w	r3, r3, #15
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	7912      	ldrb	r2, [r2, #4]
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d901      	bls.n	800cd62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e04f      	b.n	800ce02 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cd62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	da0f      	bge.n	800cd8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd6a:	78fb      	ldrb	r3, [r7, #3]
 800cd6c:	f003 020f 	and.w	r2, r3, #15
 800cd70:	4613      	mov	r3, r2
 800cd72:	00db      	lsls	r3, r3, #3
 800cd74:	4413      	add	r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	3310      	adds	r3, #16
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	3304      	adds	r3, #4
 800cd80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2201      	movs	r2, #1
 800cd86:	705a      	strb	r2, [r3, #1]
 800cd88:	e00d      	b.n	800cda6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cd8a:	78fa      	ldrb	r2, [r7, #3]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	4413      	add	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2200      	movs	r2, #0
 800cda4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cdac:	78fb      	ldrb	r3, [r7, #3]
 800cdae:	f003 030f 	and.w	r3, r3, #15
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d101      	bne.n	800cdc6 <HAL_PCD_EP_SetStall+0x82>
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	e01d      	b.n	800ce02 <HAL_PCD_EP_SetStall+0xbe>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68f9      	ldr	r1, [r7, #12]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f008 f86f 	bl	8014eb8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cdda:	78fb      	ldrb	r3, [r7, #3]
 800cddc:	f003 030f 	and.w	r3, r3, #15
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d109      	bne.n	800cdf8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6818      	ldr	r0, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	7999      	ldrb	r1, [r3, #6]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	f008 fa62 	bl	80152bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b084      	sub	sp, #16
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
 800ce12:	460b      	mov	r3, r1
 800ce14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ce16:	78fb      	ldrb	r3, [r7, #3]
 800ce18:	f003 030f 	and.w	r3, r3, #15
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	7912      	ldrb	r2, [r2, #4]
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d901      	bls.n	800ce28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	e042      	b.n	800ceae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ce28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	da0f      	bge.n	800ce50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce30:	78fb      	ldrb	r3, [r7, #3]
 800ce32:	f003 020f 	and.w	r2, r3, #15
 800ce36:	4613      	mov	r3, r2
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	4413      	add	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	3310      	adds	r3, #16
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	4413      	add	r3, r2
 800ce44:	3304      	adds	r3, #4
 800ce46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	705a      	strb	r2, [r3, #1]
 800ce4e:	e00f      	b.n	800ce70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce50:	78fb      	ldrb	r3, [r7, #3]
 800ce52:	f003 020f 	and.w	r2, r3, #15
 800ce56:	4613      	mov	r3, r2
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	4413      	add	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	4413      	add	r3, r2
 800ce66:	3304      	adds	r3, #4
 800ce68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2200      	movs	r2, #0
 800ce74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce76:	78fb      	ldrb	r3, [r7, #3]
 800ce78:	f003 030f 	and.w	r3, r3, #15
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d101      	bne.n	800ce90 <HAL_PCD_EP_ClrStall+0x86>
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	e00e      	b.n	800ceae <HAL_PCD_EP_ClrStall+0xa4>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	68f9      	ldr	r1, [r7, #12]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f008 f878 	bl	8014f94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b084      	sub	sp, #16
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	460b      	mov	r3, r1
 800cec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800cec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	da0c      	bge.n	800cee4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ceca:	78fb      	ldrb	r3, [r7, #3]
 800cecc:	f003 020f 	and.w	r2, r3, #15
 800ced0:	4613      	mov	r3, r2
 800ced2:	00db      	lsls	r3, r3, #3
 800ced4:	4413      	add	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	3310      	adds	r3, #16
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	4413      	add	r3, r2
 800cede:	3304      	adds	r3, #4
 800cee0:	60fb      	str	r3, [r7, #12]
 800cee2:	e00c      	b.n	800cefe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cee4:	78fb      	ldrb	r3, [r7, #3]
 800cee6:	f003 020f 	and.w	r2, r3, #15
 800ceea:	4613      	mov	r3, r2
 800ceec:	00db      	lsls	r3, r3, #3
 800ceee:	4413      	add	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	4413      	add	r3, r2
 800cefa:	3304      	adds	r3, #4
 800cefc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	68f9      	ldr	r1, [r7, #12]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f007 fe97 	bl	8014c38 <USB_EPStopXfer>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800cf0e:	7afb      	ldrb	r3, [r7, #11]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3710      	adds	r7, #16
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08a      	sub	sp, #40	@ 0x28
 800cf1c:	af02      	add	r7, sp, #8
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cf2c:	683a      	ldr	r2, [r7, #0]
 800cf2e:	4613      	mov	r3, r2
 800cf30:	00db      	lsls	r3, r3, #3
 800cf32:	4413      	add	r3, r2
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	3310      	adds	r3, #16
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	695a      	ldr	r2, [r3, #20]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d901      	bls.n	800cf50 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e06b      	b.n	800d028 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	691a      	ldr	r2, [r3, #16]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	1ad3      	subs	r3, r2, r3
 800cf5a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	69fa      	ldr	r2, [r7, #28]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d902      	bls.n	800cf6c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	3303      	adds	r3, #3
 800cf70:	089b      	lsrs	r3, r3, #2
 800cf72:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf74:	e02a      	b.n	800cfcc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	691a      	ldr	r2, [r3, #16]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	695b      	ldr	r3, [r3, #20]
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	69fa      	ldr	r2, [r7, #28]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d902      	bls.n	800cf92 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	3303      	adds	r3, #3
 800cf96:	089b      	lsrs	r3, r3, #2
 800cf98:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	68d9      	ldr	r1, [r3, #12]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	4603      	mov	r3, r0
 800cfae:	6978      	ldr	r0, [r7, #20]
 800cfb0:	f007 feec 	bl	8014d8c <USB_WritePacket>

    ep->xfer_buff  += len;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	68da      	ldr	r2, [r3, #12]
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	441a      	add	r2, r3
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	695a      	ldr	r2, [r3, #20]
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	441a      	add	r2, r3
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	015a      	lsls	r2, r3, #5
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cfdc:	69ba      	ldr	r2, [r7, #24]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d809      	bhi.n	800cff6 <PCD_WriteEmptyTxFifo+0xde>
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	695a      	ldr	r2, [r3, #20]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d203      	bcs.n	800cff6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1bf      	bne.n	800cf76 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	691a      	ldr	r2, [r3, #16]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	695b      	ldr	r3, [r3, #20]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d811      	bhi.n	800d026 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	f003 030f 	and.w	r3, r3, #15
 800d008:	2201      	movs	r2, #1
 800d00a:	fa02 f303 	lsl.w	r3, r2, r3
 800d00e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	43db      	mvns	r3, r3
 800d01c:	6939      	ldr	r1, [r7, #16]
 800d01e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d022:	4013      	ands	r3, r2
 800d024:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3720      	adds	r7, #32
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b088      	sub	sp, #32
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	333c      	adds	r3, #60	@ 0x3c
 800d048:	3304      	adds	r3, #4
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	015a      	lsls	r2, r3, #5
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	4413      	add	r3, r2
 800d056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	799b      	ldrb	r3, [r3, #6]
 800d062:	2b01      	cmp	r3, #1
 800d064:	d17b      	bne.n	800d15e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	f003 0308 	and.w	r3, r3, #8
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d015      	beq.n	800d09c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	4a61      	ldr	r2, [pc, #388]	@ (800d1f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d074:	4293      	cmp	r3, r2
 800d076:	f240 80b9 	bls.w	800d1ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d080:	2b00      	cmp	r3, #0
 800d082:	f000 80b3 	beq.w	800d1ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	015a      	lsls	r2, r3, #5
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	4413      	add	r3, r2
 800d08e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d092:	461a      	mov	r2, r3
 800d094:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d098:	6093      	str	r3, [r2, #8]
 800d09a:	e0a7      	b.n	800d1ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	f003 0320 	and.w	r3, r3, #32
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d009      	beq.n	800d0ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	015a      	lsls	r2, r3, #5
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	2320      	movs	r3, #32
 800d0b6:	6093      	str	r3, [r2, #8]
 800d0b8:	e098      	b.n	800d1ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f040 8093 	bne.w	800d1ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	4a4b      	ldr	r2, [pc, #300]	@ (800d1f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d90f      	bls.n	800d0ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00a      	beq.n	800d0ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	015a      	lsls	r2, r3, #5
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	4413      	add	r3, r2
 800d0e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0ea:	6093      	str	r3, [r2, #8]
 800d0ec:	e07e      	b.n	800d1ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	00db      	lsls	r3, r3, #3
 800d0f4:	4413      	add	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	4413      	add	r3, r2
 800d100:	3304      	adds	r3, #4
 800d102:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6a1a      	ldr	r2, [r3, #32]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	0159      	lsls	r1, r3, #5
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	440b      	add	r3, r1
 800d110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d11a:	1ad2      	subs	r2, r2, r3
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d114      	bne.n	800d150 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d109      	bne.n	800d142 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6818      	ldr	r0, [r3, #0]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d138:	461a      	mov	r2, r3
 800d13a:	2101      	movs	r1, #1
 800d13c:	f008 f8be 	bl	80152bc <USB_EP0_OutStart>
 800d140:	e006      	b.n	800d150 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	68da      	ldr	r2, [r3, #12]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	695b      	ldr	r3, [r3, #20]
 800d14a:	441a      	add	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	b2db      	uxtb	r3, r3
 800d154:	4619      	mov	r1, r3
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f00a fbe4 	bl	8017924 <HAL_PCD_DataOutStageCallback>
 800d15c:	e046      	b.n	800d1ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	4a26      	ldr	r2, [pc, #152]	@ (800d1fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d124      	bne.n	800d1b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00a      	beq.n	800d186 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	015a      	lsls	r2, r3, #5
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	4413      	add	r3, r2
 800d178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d17c:	461a      	mov	r2, r3
 800d17e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d182:	6093      	str	r3, [r2, #8]
 800d184:	e032      	b.n	800d1ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	f003 0320 	and.w	r3, r3, #32
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d008      	beq.n	800d1a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	015a      	lsls	r2, r3, #5
 800d194:	69bb      	ldr	r3, [r7, #24]
 800d196:	4413      	add	r3, r2
 800d198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d19c:	461a      	mov	r2, r3
 800d19e:	2320      	movs	r3, #32
 800d1a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f00a fbbb 	bl	8017924 <HAL_PCD_DataOutStageCallback>
 800d1ae:	e01d      	b.n	800d1ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d114      	bne.n	800d1e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800d1b6:	6879      	ldr	r1, [r7, #4]
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	4413      	add	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	440b      	add	r3, r1
 800d1c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d108      	bne.n	800d1e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6818      	ldr	r0, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d1d8:	461a      	mov	r2, r3
 800d1da:	2100      	movs	r1, #0
 800d1dc:	f008 f86e 	bl	80152bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f00a fb9c 	bl	8017924 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3720      	adds	r7, #32
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	4f54300a 	.word	0x4f54300a
 800d1fc:	4f54310a 	.word	0x4f54310a

0800d200 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b086      	sub	sp, #24
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	333c      	adds	r3, #60	@ 0x3c
 800d218:	3304      	adds	r3, #4
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	015a      	lsls	r2, r3, #5
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	4413      	add	r3, r2
 800d226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	4a15      	ldr	r2, [pc, #84]	@ (800d288 <PCD_EP_OutSetupPacket_int+0x88>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d90e      	bls.n	800d254 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d009      	beq.n	800d254 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	015a      	lsls	r2, r3, #5
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	4413      	add	r3, r2
 800d248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d24c:	461a      	mov	r2, r3
 800d24e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d252:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f00a fb53 	bl	8017900 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	4a0a      	ldr	r2, [pc, #40]	@ (800d288 <PCD_EP_OutSetupPacket_int+0x88>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d90c      	bls.n	800d27c <PCD_EP_OutSetupPacket_int+0x7c>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	799b      	ldrb	r3, [r3, #6]
 800d266:	2b01      	cmp	r3, #1
 800d268:	d108      	bne.n	800d27c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6818      	ldr	r0, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d274:	461a      	mov	r2, r3
 800d276:	2101      	movs	r1, #1
 800d278:	f008 f820 	bl	80152bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3718      	adds	r7, #24
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	4f54300a 	.word	0x4f54300a

0800d28c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
 800d298:	4613      	mov	r3, r2
 800d29a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d2a4:	78fb      	ldrb	r3, [r7, #3]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d107      	bne.n	800d2ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d2aa:	883b      	ldrh	r3, [r7, #0]
 800d2ac:	0419      	lsls	r1, r3, #16
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	430a      	orrs	r2, r1
 800d2b6:	629a      	str	r2, [r3, #40]	@ 0x28
 800d2b8:	e028      	b.n	800d30c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2c0:	0c1b      	lsrs	r3, r3, #16
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	73fb      	strb	r3, [r7, #15]
 800d2cc:	e00d      	b.n	800d2ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
 800d2d4:	3340      	adds	r3, #64	@ 0x40
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	4413      	add	r3, r2
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	0c1b      	lsrs	r3, r3, #16
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	73fb      	strb	r3, [r7, #15]
 800d2ea:	7bfa      	ldrb	r2, [r7, #15]
 800d2ec:	78fb      	ldrb	r3, [r7, #3]
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d3ec      	bcc.n	800d2ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d2f4:	883b      	ldrh	r3, [r7, #0]
 800d2f6:	0418      	lsls	r0, r3, #16
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6819      	ldr	r1, [r3, #0]
 800d2fc:	78fb      	ldrb	r3, [r7, #3]
 800d2fe:	3b01      	subs	r3, #1
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	4302      	orrs	r2, r0
 800d304:	3340      	adds	r3, #64	@ 0x40
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	440b      	add	r3, r1
 800d30a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d30c:	2300      	movs	r3, #0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3714      	adds	r7, #20
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	460b      	mov	r3, r1
 800d324:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	887a      	ldrh	r2, [r7, #2]
 800d32c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2201      	movs	r2, #1
 800d34e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2200      	movs	r2, #0
 800d356:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d36a:	4b05      	ldr	r3, [pc, #20]	@ (800d380 <HAL_PCDEx_ActivateLPM+0x44>)
 800d36c:	4313      	orrs	r3, r2
 800d36e:	68fa      	ldr	r2, [r7, #12]
 800d370:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr
 800d380:	10000003 	.word	0x10000003

0800d384 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	460b      	mov	r3, r1
 800d38e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d3a4:	4b19      	ldr	r3, [pc, #100]	@ (800d40c <HAL_PWREx_ConfigSupply+0x70>)
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	f003 0304 	and.w	r3, r3, #4
 800d3ac:	2b04      	cmp	r3, #4
 800d3ae:	d00a      	beq.n	800d3c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d3b0:	4b16      	ldr	r3, [pc, #88]	@ (800d40c <HAL_PWREx_ConfigSupply+0x70>)
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	f003 0307 	and.w	r3, r3, #7
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d001      	beq.n	800d3c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e01f      	b.n	800d402 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e01d      	b.n	800d402 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d3c6:	4b11      	ldr	r3, [pc, #68]	@ (800d40c <HAL_PWREx_ConfigSupply+0x70>)
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	f023 0207 	bic.w	r2, r3, #7
 800d3ce:	490f      	ldr	r1, [pc, #60]	@ (800d40c <HAL_PWREx_ConfigSupply+0x70>)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d3d6:	f7f5 f9c1 	bl	800275c <HAL_GetTick>
 800d3da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d3dc:	e009      	b.n	800d3f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d3de:	f7f5 f9bd 	bl	800275c <HAL_GetTick>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	1ad3      	subs	r3, r2, r3
 800d3e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d3ec:	d901      	bls.n	800d3f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e007      	b.n	800d402 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d3f2:	4b06      	ldr	r3, [pc, #24]	@ (800d40c <HAL_PWREx_ConfigSupply+0x70>)
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d3fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d3fe:	d1ee      	bne.n	800d3de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3710      	adds	r7, #16
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	58024800 	.word	0x58024800

0800d410 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d410:	b480      	push	{r7}
 800d412:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d414:	4b05      	ldr	r3, [pc, #20]	@ (800d42c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	4a04      	ldr	r2, [pc, #16]	@ (800d42c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d41a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d41e:	60d3      	str	r3, [r2, #12]
}
 800d420:	bf00      	nop
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	58024800 	.word	0x58024800

0800d430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b08c      	sub	sp, #48	@ 0x30
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d102      	bne.n	800d444 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d43e:	2301      	movs	r3, #1
 800d440:	f000 bc48 	b.w	800dcd4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f003 0301 	and.w	r3, r3, #1
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 8088 	beq.w	800d562 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d452:	4b99      	ldr	r3, [pc, #612]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d45a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d45c:	4b96      	ldr	r3, [pc, #600]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d460:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d464:	2b10      	cmp	r3, #16
 800d466:	d007      	beq.n	800d478 <HAL_RCC_OscConfig+0x48>
 800d468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46a:	2b18      	cmp	r3, #24
 800d46c:	d111      	bne.n	800d492 <HAL_RCC_OscConfig+0x62>
 800d46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d470:	f003 0303 	and.w	r3, r3, #3
 800d474:	2b02      	cmp	r3, #2
 800d476:	d10c      	bne.n	800d492 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d478:	4b8f      	ldr	r3, [pc, #572]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d06d      	beq.n	800d560 <HAL_RCC_OscConfig+0x130>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d169      	bne.n	800d560 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	f000 bc21 	b.w	800dcd4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d49a:	d106      	bne.n	800d4aa <HAL_RCC_OscConfig+0x7a>
 800d49c:	4b86      	ldr	r3, [pc, #536]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a85      	ldr	r2, [pc, #532]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	e02e      	b.n	800d508 <HAL_RCC_OscConfig+0xd8>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10c      	bne.n	800d4cc <HAL_RCC_OscConfig+0x9c>
 800d4b2:	4b81      	ldr	r3, [pc, #516]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a80      	ldr	r2, [pc, #512]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	4b7e      	ldr	r3, [pc, #504]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a7d      	ldr	r2, [pc, #500]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d4c8:	6013      	str	r3, [r2, #0]
 800d4ca:	e01d      	b.n	800d508 <HAL_RCC_OscConfig+0xd8>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d4d4:	d10c      	bne.n	800d4f0 <HAL_RCC_OscConfig+0xc0>
 800d4d6:	4b78      	ldr	r3, [pc, #480]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a77      	ldr	r2, [pc, #476]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d4e0:	6013      	str	r3, [r2, #0]
 800d4e2:	4b75      	ldr	r3, [pc, #468]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4a74      	ldr	r2, [pc, #464]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d4ec:	6013      	str	r3, [r2, #0]
 800d4ee:	e00b      	b.n	800d508 <HAL_RCC_OscConfig+0xd8>
 800d4f0:	4b71      	ldr	r3, [pc, #452]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a70      	ldr	r2, [pc, #448]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d4fa:	6013      	str	r3, [r2, #0]
 800d4fc:	4b6e      	ldr	r3, [pc, #440]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a6d      	ldr	r2, [pc, #436]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d013      	beq.n	800d538 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d510:	f7f5 f924 	bl	800275c <HAL_GetTick>
 800d514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d516:	e008      	b.n	800d52a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d518:	f7f5 f920 	bl	800275c <HAL_GetTick>
 800d51c:	4602      	mov	r2, r0
 800d51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d520:	1ad3      	subs	r3, r2, r3
 800d522:	2b64      	cmp	r3, #100	@ 0x64
 800d524:	d901      	bls.n	800d52a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d526:	2303      	movs	r3, #3
 800d528:	e3d4      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d52a:	4b63      	ldr	r3, [pc, #396]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d532:	2b00      	cmp	r3, #0
 800d534:	d0f0      	beq.n	800d518 <HAL_RCC_OscConfig+0xe8>
 800d536:	e014      	b.n	800d562 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d538:	f7f5 f910 	bl	800275c <HAL_GetTick>
 800d53c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d53e:	e008      	b.n	800d552 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d540:	f7f5 f90c 	bl	800275c <HAL_GetTick>
 800d544:	4602      	mov	r2, r0
 800d546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d548:	1ad3      	subs	r3, r2, r3
 800d54a:	2b64      	cmp	r3, #100	@ 0x64
 800d54c:	d901      	bls.n	800d552 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d54e:	2303      	movs	r3, #3
 800d550:	e3c0      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d552:	4b59      	ldr	r3, [pc, #356]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1f0      	bne.n	800d540 <HAL_RCC_OscConfig+0x110>
 800d55e:	e000      	b.n	800d562 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f003 0302 	and.w	r3, r3, #2
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f000 80ca 	beq.w	800d704 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d570:	4b51      	ldr	r3, [pc, #324]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d572:	691b      	ldr	r3, [r3, #16]
 800d574:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d578:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d57a:	4b4f      	ldr	r3, [pc, #316]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d57e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d580:	6a3b      	ldr	r3, [r7, #32]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d007      	beq.n	800d596 <HAL_RCC_OscConfig+0x166>
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	2b18      	cmp	r3, #24
 800d58a:	d156      	bne.n	800d63a <HAL_RCC_OscConfig+0x20a>
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	f003 0303 	and.w	r3, r3, #3
 800d592:	2b00      	cmp	r3, #0
 800d594:	d151      	bne.n	800d63a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d596:	4b48      	ldr	r3, [pc, #288]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f003 0304 	and.w	r3, r3, #4
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d005      	beq.n	800d5ae <HAL_RCC_OscConfig+0x17e>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e392      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d5ae:	4b42      	ldr	r3, [pc, #264]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f023 0219 	bic.w	r2, r3, #25
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	493f      	ldr	r1, [pc, #252]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5c0:	f7f5 f8cc 	bl	800275c <HAL_GetTick>
 800d5c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d5c6:	e008      	b.n	800d5da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d5c8:	f7f5 f8c8 	bl	800275c <HAL_GetTick>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d901      	bls.n	800d5da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	e37c      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d5da:	4b37      	ldr	r3, [pc, #220]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f003 0304 	and.w	r3, r3, #4
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0f0      	beq.n	800d5c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d5e6:	f7f5 f8e9 	bl	80027bc <HAL_GetREVID>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d817      	bhi.n	800d624 <HAL_RCC_OscConfig+0x1f4>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	2b40      	cmp	r3, #64	@ 0x40
 800d5fa:	d108      	bne.n	800d60e <HAL_RCC_OscConfig+0x1de>
 800d5fc:	4b2e      	ldr	r3, [pc, #184]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d604:	4a2c      	ldr	r2, [pc, #176]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d60a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d60c:	e07a      	b.n	800d704 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d60e:	4b2a      	ldr	r3, [pc, #168]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	691b      	ldr	r3, [r3, #16]
 800d61a:	031b      	lsls	r3, r3, #12
 800d61c:	4926      	ldr	r1, [pc, #152]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d61e:	4313      	orrs	r3, r2
 800d620:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d622:	e06f      	b.n	800d704 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d624:	4b24      	ldr	r3, [pc, #144]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	061b      	lsls	r3, r3, #24
 800d632:	4921      	ldr	r1, [pc, #132]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d634:	4313      	orrs	r3, r2
 800d636:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d638:	e064      	b.n	800d704 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d047      	beq.n	800d6d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d642:	4b1d      	ldr	r3, [pc, #116]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f023 0219 	bic.w	r2, r3, #25
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	491a      	ldr	r1, [pc, #104]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d650:	4313      	orrs	r3, r2
 800d652:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d654:	f7f5 f882 	bl	800275c <HAL_GetTick>
 800d658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d65a:	e008      	b.n	800d66e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d65c:	f7f5 f87e 	bl	800275c <HAL_GetTick>
 800d660:	4602      	mov	r2, r0
 800d662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	2b02      	cmp	r3, #2
 800d668:	d901      	bls.n	800d66e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d66a:	2303      	movs	r3, #3
 800d66c:	e332      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d66e:	4b12      	ldr	r3, [pc, #72]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 0304 	and.w	r3, r3, #4
 800d676:	2b00      	cmp	r3, #0
 800d678:	d0f0      	beq.n	800d65c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d67a:	f7f5 f89f 	bl	80027bc <HAL_GetREVID>
 800d67e:	4603      	mov	r3, r0
 800d680:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d684:	4293      	cmp	r3, r2
 800d686:	d819      	bhi.n	800d6bc <HAL_RCC_OscConfig+0x28c>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	691b      	ldr	r3, [r3, #16]
 800d68c:	2b40      	cmp	r3, #64	@ 0x40
 800d68e:	d108      	bne.n	800d6a2 <HAL_RCC_OscConfig+0x272>
 800d690:	4b09      	ldr	r3, [pc, #36]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d698:	4a07      	ldr	r2, [pc, #28]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d69a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d69e:	6053      	str	r3, [r2, #4]
 800d6a0:	e030      	b.n	800d704 <HAL_RCC_OscConfig+0x2d4>
 800d6a2:	4b05      	ldr	r3, [pc, #20]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	031b      	lsls	r3, r3, #12
 800d6b0:	4901      	ldr	r1, [pc, #4]	@ (800d6b8 <HAL_RCC_OscConfig+0x288>)
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	604b      	str	r3, [r1, #4]
 800d6b6:	e025      	b.n	800d704 <HAL_RCC_OscConfig+0x2d4>
 800d6b8:	58024400 	.word	0x58024400
 800d6bc:	4b9a      	ldr	r3, [pc, #616]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	691b      	ldr	r3, [r3, #16]
 800d6c8:	061b      	lsls	r3, r3, #24
 800d6ca:	4997      	ldr	r1, [pc, #604]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	604b      	str	r3, [r1, #4]
 800d6d0:	e018      	b.n	800d704 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d6d2:	4b95      	ldr	r3, [pc, #596]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a94      	ldr	r2, [pc, #592]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d6d8:	f023 0301 	bic.w	r3, r3, #1
 800d6dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6de:	f7f5 f83d 	bl	800275c <HAL_GetTick>
 800d6e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d6e4:	e008      	b.n	800d6f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d6e6:	f7f5 f839 	bl	800275c <HAL_GetTick>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	d901      	bls.n	800d6f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	e2ed      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d6f8:	4b8b      	ldr	r3, [pc, #556]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f003 0304 	and.w	r3, r3, #4
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1f0      	bne.n	800d6e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f003 0310 	and.w	r3, r3, #16
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f000 80a9 	beq.w	800d864 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d712:	4b85      	ldr	r3, [pc, #532]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d71a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d71c:	4b82      	ldr	r3, [pc, #520]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d71e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d720:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	2b08      	cmp	r3, #8
 800d726:	d007      	beq.n	800d738 <HAL_RCC_OscConfig+0x308>
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	2b18      	cmp	r3, #24
 800d72c:	d13a      	bne.n	800d7a4 <HAL_RCC_OscConfig+0x374>
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	f003 0303 	and.w	r3, r3, #3
 800d734:	2b01      	cmp	r3, #1
 800d736:	d135      	bne.n	800d7a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d738:	4b7b      	ldr	r3, [pc, #492]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d740:	2b00      	cmp	r3, #0
 800d742:	d005      	beq.n	800d750 <HAL_RCC_OscConfig+0x320>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	69db      	ldr	r3, [r3, #28]
 800d748:	2b80      	cmp	r3, #128	@ 0x80
 800d74a:	d001      	beq.n	800d750 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e2c1      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d750:	f7f5 f834 	bl	80027bc <HAL_GetREVID>
 800d754:	4603      	mov	r3, r0
 800d756:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d817      	bhi.n	800d78e <HAL_RCC_OscConfig+0x35e>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6a1b      	ldr	r3, [r3, #32]
 800d762:	2b20      	cmp	r3, #32
 800d764:	d108      	bne.n	800d778 <HAL_RCC_OscConfig+0x348>
 800d766:	4b70      	ldr	r3, [pc, #448]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d76e:	4a6e      	ldr	r2, [pc, #440]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d770:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d774:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d776:	e075      	b.n	800d864 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d778:	4b6b      	ldr	r3, [pc, #428]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6a1b      	ldr	r3, [r3, #32]
 800d784:	069b      	lsls	r3, r3, #26
 800d786:	4968      	ldr	r1, [pc, #416]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d788:	4313      	orrs	r3, r2
 800d78a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d78c:	e06a      	b.n	800d864 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d78e:	4b66      	ldr	r3, [pc, #408]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a1b      	ldr	r3, [r3, #32]
 800d79a:	061b      	lsls	r3, r3, #24
 800d79c:	4962      	ldr	r1, [pc, #392]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d7a2:	e05f      	b.n	800d864 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	69db      	ldr	r3, [r3, #28]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d042      	beq.n	800d832 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d7ac:	4b5e      	ldr	r3, [pc, #376]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a5d      	ldr	r2, [pc, #372]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7b8:	f7f4 ffd0 	bl	800275c <HAL_GetTick>
 800d7bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d7be:	e008      	b.n	800d7d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d7c0:	f7f4 ffcc 	bl	800275c <HAL_GetTick>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d901      	bls.n	800d7d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	e280      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d7d2:	4b55      	ldr	r3, [pc, #340]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d0f0      	beq.n	800d7c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d7de:	f7f4 ffed 	bl	80027bc <HAL_GetREVID>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d817      	bhi.n	800d81c <HAL_RCC_OscConfig+0x3ec>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a1b      	ldr	r3, [r3, #32]
 800d7f0:	2b20      	cmp	r3, #32
 800d7f2:	d108      	bne.n	800d806 <HAL_RCC_OscConfig+0x3d6>
 800d7f4:	4b4c      	ldr	r3, [pc, #304]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d7fc:	4a4a      	ldr	r2, [pc, #296]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d7fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d802:	6053      	str	r3, [r2, #4]
 800d804:	e02e      	b.n	800d864 <HAL_RCC_OscConfig+0x434>
 800d806:	4b48      	ldr	r3, [pc, #288]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a1b      	ldr	r3, [r3, #32]
 800d812:	069b      	lsls	r3, r3, #26
 800d814:	4944      	ldr	r1, [pc, #272]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d816:	4313      	orrs	r3, r2
 800d818:	604b      	str	r3, [r1, #4]
 800d81a:	e023      	b.n	800d864 <HAL_RCC_OscConfig+0x434>
 800d81c:	4b42      	ldr	r3, [pc, #264]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a1b      	ldr	r3, [r3, #32]
 800d828:	061b      	lsls	r3, r3, #24
 800d82a:	493f      	ldr	r1, [pc, #252]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d82c:	4313      	orrs	r3, r2
 800d82e:	60cb      	str	r3, [r1, #12]
 800d830:	e018      	b.n	800d864 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d832:	4b3d      	ldr	r3, [pc, #244]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a3c      	ldr	r2, [pc, #240]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d838:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d83c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d83e:	f7f4 ff8d 	bl	800275c <HAL_GetTick>
 800d842:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d844:	e008      	b.n	800d858 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d846:	f7f4 ff89 	bl	800275c <HAL_GetTick>
 800d84a:	4602      	mov	r2, r0
 800d84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84e:	1ad3      	subs	r3, r2, r3
 800d850:	2b02      	cmp	r3, #2
 800d852:	d901      	bls.n	800d858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d854:	2303      	movs	r3, #3
 800d856:	e23d      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d858:	4b33      	ldr	r3, [pc, #204]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d860:	2b00      	cmp	r3, #0
 800d862:	d1f0      	bne.n	800d846 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f003 0308 	and.w	r3, r3, #8
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d036      	beq.n	800d8de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d019      	beq.n	800d8ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d878:	4b2b      	ldr	r3, [pc, #172]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d87a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d87c:	4a2a      	ldr	r2, [pc, #168]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d87e:	f043 0301 	orr.w	r3, r3, #1
 800d882:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d884:	f7f4 ff6a 	bl	800275c <HAL_GetTick>
 800d888:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d88a:	e008      	b.n	800d89e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d88c:	f7f4 ff66 	bl	800275c <HAL_GetTick>
 800d890:	4602      	mov	r2, r0
 800d892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	2b02      	cmp	r3, #2
 800d898:	d901      	bls.n	800d89e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d89a:	2303      	movs	r3, #3
 800d89c:	e21a      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d89e:	4b22      	ldr	r3, [pc, #136]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d8a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8a2:	f003 0302 	and.w	r3, r3, #2
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d0f0      	beq.n	800d88c <HAL_RCC_OscConfig+0x45c>
 800d8aa:	e018      	b.n	800d8de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d8ac:	4b1e      	ldr	r3, [pc, #120]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d8ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d8b2:	f023 0301 	bic.w	r3, r3, #1
 800d8b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8b8:	f7f4 ff50 	bl	800275c <HAL_GetTick>
 800d8bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d8be:	e008      	b.n	800d8d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8c0:	f7f4 ff4c 	bl	800275c <HAL_GetTick>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d901      	bls.n	800d8d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	e200      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d8d2:	4b15      	ldr	r3, [pc, #84]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d8d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8d6:	f003 0302 	and.w	r3, r3, #2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1f0      	bne.n	800d8c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f003 0320 	and.w	r3, r3, #32
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d039      	beq.n	800d95e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	699b      	ldr	r3, [r3, #24]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d01c      	beq.n	800d92c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a0c      	ldr	r2, [pc, #48]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d8f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d8fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d8fe:	f7f4 ff2d 	bl	800275c <HAL_GetTick>
 800d902:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d904:	e008      	b.n	800d918 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d906:	f7f4 ff29 	bl	800275c <HAL_GetTick>
 800d90a:	4602      	mov	r2, r0
 800d90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	2b02      	cmp	r3, #2
 800d912:	d901      	bls.n	800d918 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d914:	2303      	movs	r3, #3
 800d916:	e1dd      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d918:	4b03      	ldr	r3, [pc, #12]	@ (800d928 <HAL_RCC_OscConfig+0x4f8>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d920:	2b00      	cmp	r3, #0
 800d922:	d0f0      	beq.n	800d906 <HAL_RCC_OscConfig+0x4d6>
 800d924:	e01b      	b.n	800d95e <HAL_RCC_OscConfig+0x52e>
 800d926:	bf00      	nop
 800d928:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d92c:	4b9b      	ldr	r3, [pc, #620]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a9a      	ldr	r2, [pc, #616]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d936:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d938:	f7f4 ff10 	bl	800275c <HAL_GetTick>
 800d93c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d93e:	e008      	b.n	800d952 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d940:	f7f4 ff0c 	bl	800275c <HAL_GetTick>
 800d944:	4602      	mov	r2, r0
 800d946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d901      	bls.n	800d952 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d94e:	2303      	movs	r3, #3
 800d950:	e1c0      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d952:	4b92      	ldr	r3, [pc, #584]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1f0      	bne.n	800d940 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f003 0304 	and.w	r3, r3, #4
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 8081 	beq.w	800da6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d96c:	4b8c      	ldr	r3, [pc, #560]	@ (800dba0 <HAL_RCC_OscConfig+0x770>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a8b      	ldr	r2, [pc, #556]	@ (800dba0 <HAL_RCC_OscConfig+0x770>)
 800d972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d976:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d978:	f7f4 fef0 	bl	800275c <HAL_GetTick>
 800d97c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d97e:	e008      	b.n	800d992 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d980:	f7f4 feec 	bl	800275c <HAL_GetTick>
 800d984:	4602      	mov	r2, r0
 800d986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	2b64      	cmp	r3, #100	@ 0x64
 800d98c:	d901      	bls.n	800d992 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d98e:	2303      	movs	r3, #3
 800d990:	e1a0      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d992:	4b83      	ldr	r3, [pc, #524]	@ (800dba0 <HAL_RCC_OscConfig+0x770>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0f0      	beq.n	800d980 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d106      	bne.n	800d9b4 <HAL_RCC_OscConfig+0x584>
 800d9a6:	4b7d      	ldr	r3, [pc, #500]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9aa:	4a7c      	ldr	r2, [pc, #496]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9ac:	f043 0301 	orr.w	r3, r3, #1
 800d9b0:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9b2:	e02d      	b.n	800da10 <HAL_RCC_OscConfig+0x5e0>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10c      	bne.n	800d9d6 <HAL_RCC_OscConfig+0x5a6>
 800d9bc:	4b77      	ldr	r3, [pc, #476]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9c0:	4a76      	ldr	r2, [pc, #472]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9c2:	f023 0301 	bic.w	r3, r3, #1
 800d9c6:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9c8:	4b74      	ldr	r3, [pc, #464]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9cc:	4a73      	ldr	r2, [pc, #460]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9ce:	f023 0304 	bic.w	r3, r3, #4
 800d9d2:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9d4:	e01c      	b.n	800da10 <HAL_RCC_OscConfig+0x5e0>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	2b05      	cmp	r3, #5
 800d9dc:	d10c      	bne.n	800d9f8 <HAL_RCC_OscConfig+0x5c8>
 800d9de:	4b6f      	ldr	r3, [pc, #444]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9e2:	4a6e      	ldr	r2, [pc, #440]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9e4:	f043 0304 	orr.w	r3, r3, #4
 800d9e8:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9ea:	4b6c      	ldr	r3, [pc, #432]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9ee:	4a6b      	ldr	r2, [pc, #428]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9f0:	f043 0301 	orr.w	r3, r3, #1
 800d9f4:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9f6:	e00b      	b.n	800da10 <HAL_RCC_OscConfig+0x5e0>
 800d9f8:	4b68      	ldr	r3, [pc, #416]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9fc:	4a67      	ldr	r2, [pc, #412]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800d9fe:	f023 0301 	bic.w	r3, r3, #1
 800da02:	6713      	str	r3, [r2, #112]	@ 0x70
 800da04:	4b65      	ldr	r3, [pc, #404]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800da06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da08:	4a64      	ldr	r2, [pc, #400]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800da0a:	f023 0304 	bic.w	r3, r3, #4
 800da0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d015      	beq.n	800da44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da18:	f7f4 fea0 	bl	800275c <HAL_GetTick>
 800da1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da1e:	e00a      	b.n	800da36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da20:	f7f4 fe9c 	bl	800275c <HAL_GetTick>
 800da24:	4602      	mov	r2, r0
 800da26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da28:	1ad3      	subs	r3, r2, r3
 800da2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da2e:	4293      	cmp	r3, r2
 800da30:	d901      	bls.n	800da36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800da32:	2303      	movs	r3, #3
 800da34:	e14e      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da36:	4b59      	ldr	r3, [pc, #356]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800da38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da3a:	f003 0302 	and.w	r3, r3, #2
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d0ee      	beq.n	800da20 <HAL_RCC_OscConfig+0x5f0>
 800da42:	e014      	b.n	800da6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da44:	f7f4 fe8a 	bl	800275c <HAL_GetTick>
 800da48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800da4a:	e00a      	b.n	800da62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da4c:	f7f4 fe86 	bl	800275c <HAL_GetTick>
 800da50:	4602      	mov	r2, r0
 800da52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d901      	bls.n	800da62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800da5e:	2303      	movs	r3, #3
 800da60:	e138      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800da62:	4b4e      	ldr	r3, [pc, #312]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800da64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da66:	f003 0302 	and.w	r3, r3, #2
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1ee      	bne.n	800da4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da72:	2b00      	cmp	r3, #0
 800da74:	f000 812d 	beq.w	800dcd2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800da78:	4b48      	ldr	r3, [pc, #288]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800da7a:	691b      	ldr	r3, [r3, #16]
 800da7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800da80:	2b18      	cmp	r3, #24
 800da82:	f000 80bd 	beq.w	800dc00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	f040 809e 	bne.w	800dbcc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da90:	4b42      	ldr	r3, [pc, #264]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a41      	ldr	r2, [pc, #260]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800da96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800da9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da9c:	f7f4 fe5e 	bl	800275c <HAL_GetTick>
 800daa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800daa2:	e008      	b.n	800dab6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800daa4:	f7f4 fe5a 	bl	800275c <HAL_GetTick>
 800daa8:	4602      	mov	r2, r0
 800daaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d901      	bls.n	800dab6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800dab2:	2303      	movs	r3, #3
 800dab4:	e10e      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dab6:	4b39      	ldr	r3, [pc, #228]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1f0      	bne.n	800daa4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dac2:	4b36      	ldr	r3, [pc, #216]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800dac4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dac6:	4b37      	ldr	r3, [pc, #220]	@ (800dba4 <HAL_RCC_OscConfig+0x774>)
 800dac8:	4013      	ands	r3, r2
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dad2:	0112      	lsls	r2, r2, #4
 800dad4:	430a      	orrs	r2, r1
 800dad6:	4931      	ldr	r1, [pc, #196]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800dad8:	4313      	orrs	r3, r2
 800dada:	628b      	str	r3, [r1, #40]	@ 0x28
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dae0:	3b01      	subs	r3, #1
 800dae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daea:	3b01      	subs	r3, #1
 800daec:	025b      	lsls	r3, r3, #9
 800daee:	b29b      	uxth	r3, r3
 800daf0:	431a      	orrs	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daf6:	3b01      	subs	r3, #1
 800daf8:	041b      	lsls	r3, r3, #16
 800dafa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dafe:	431a      	orrs	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db04:	3b01      	subs	r3, #1
 800db06:	061b      	lsls	r3, r3, #24
 800db08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800db0c:	4923      	ldr	r1, [pc, #140]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db0e:	4313      	orrs	r3, r2
 800db10:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800db12:	4b22      	ldr	r3, [pc, #136]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db16:	4a21      	ldr	r2, [pc, #132]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db18:	f023 0301 	bic.w	r3, r3, #1
 800db1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800db1e:	4b1f      	ldr	r3, [pc, #124]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db22:	4b21      	ldr	r3, [pc, #132]	@ (800dba8 <HAL_RCC_OscConfig+0x778>)
 800db24:	4013      	ands	r3, r2
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800db2a:	00d2      	lsls	r2, r2, #3
 800db2c:	491b      	ldr	r1, [pc, #108]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db2e:	4313      	orrs	r3, r2
 800db30:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800db32:	4b1a      	ldr	r3, [pc, #104]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db36:	f023 020c 	bic.w	r2, r3, #12
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db3e:	4917      	ldr	r1, [pc, #92]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db40:	4313      	orrs	r3, r2
 800db42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800db44:	4b15      	ldr	r3, [pc, #84]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db48:	f023 0202 	bic.w	r2, r3, #2
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db50:	4912      	ldr	r1, [pc, #72]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db52:	4313      	orrs	r3, r2
 800db54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800db56:	4b11      	ldr	r3, [pc, #68]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db5a:	4a10      	ldr	r2, [pc, #64]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db62:	4b0e      	ldr	r3, [pc, #56]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db66:	4a0d      	ldr	r2, [pc, #52]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800db6e:	4b0b      	ldr	r3, [pc, #44]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db72:	4a0a      	ldr	r2, [pc, #40]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800db78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800db7a:	4b08      	ldr	r3, [pc, #32]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7e:	4a07      	ldr	r2, [pc, #28]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db80:	f043 0301 	orr.w	r3, r3, #1
 800db84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db86:	4b05      	ldr	r3, [pc, #20]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a04      	ldr	r2, [pc, #16]	@ (800db9c <HAL_RCC_OscConfig+0x76c>)
 800db8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800db90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db92:	f7f4 fde3 	bl	800275c <HAL_GetTick>
 800db96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db98:	e011      	b.n	800dbbe <HAL_RCC_OscConfig+0x78e>
 800db9a:	bf00      	nop
 800db9c:	58024400 	.word	0x58024400
 800dba0:	58024800 	.word	0x58024800
 800dba4:	fffffc0c 	.word	0xfffffc0c
 800dba8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbac:	f7f4 fdd6 	bl	800275c <HAL_GetTick>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb4:	1ad3      	subs	r3, r2, r3
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	d901      	bls.n	800dbbe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800dbba:	2303      	movs	r3, #3
 800dbbc:	e08a      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dbbe:	4b47      	ldr	r3, [pc, #284]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d0f0      	beq.n	800dbac <HAL_RCC_OscConfig+0x77c>
 800dbca:	e082      	b.n	800dcd2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbcc:	4b43      	ldr	r3, [pc, #268]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a42      	ldr	r2, [pc, #264]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dbd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dbd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbd8:	f7f4 fdc0 	bl	800275c <HAL_GetTick>
 800dbdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dbde:	e008      	b.n	800dbf2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbe0:	f7f4 fdbc 	bl	800275c <HAL_GetTick>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d901      	bls.n	800dbf2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800dbee:	2303      	movs	r3, #3
 800dbf0:	e070      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dbf2:	4b3a      	ldr	r3, [pc, #232]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1f0      	bne.n	800dbe0 <HAL_RCC_OscConfig+0x7b0>
 800dbfe:	e068      	b.n	800dcd2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800dc00:	4b36      	ldr	r3, [pc, #216]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dc02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dc06:	4b35      	ldr	r3, [pc, #212]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dc08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d031      	beq.n	800dc78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	f003 0203 	and.w	r2, r3, #3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d12a      	bne.n	800dc78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	091b      	lsrs	r3, r3, #4
 800dc26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d122      	bne.n	800dc78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d11a      	bne.n	800dc78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	0a5b      	lsrs	r3, r3, #9
 800dc46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d111      	bne.n	800dc78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	0c1b      	lsrs	r3, r3, #16
 800dc58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d108      	bne.n	800dc78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	0e1b      	lsrs	r3, r3, #24
 800dc6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d001      	beq.n	800dc7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e02b      	b.n	800dcd4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800dc7c:	4b17      	ldr	r3, [pc, #92]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dc7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc80:	08db      	lsrs	r3, r3, #3
 800dc82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dc8c:	693a      	ldr	r2, [r7, #16]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d01f      	beq.n	800dcd2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800dc92:	4b12      	ldr	r3, [pc, #72]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dc94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc96:	4a11      	ldr	r2, [pc, #68]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dc98:	f023 0301 	bic.w	r3, r3, #1
 800dc9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dc9e:	f7f4 fd5d 	bl	800275c <HAL_GetTick>
 800dca2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800dca4:	bf00      	nop
 800dca6:	f7f4 fd59 	bl	800275c <HAL_GetTick>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d0f9      	beq.n	800dca6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dcb2:	4b0a      	ldr	r3, [pc, #40]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dcb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dcb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dce0 <HAL_RCC_OscConfig+0x8b0>)
 800dcb8:	4013      	ands	r3, r2
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800dcbe:	00d2      	lsls	r2, r2, #3
 800dcc0:	4906      	ldr	r1, [pc, #24]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800dcc6:	4b05      	ldr	r3, [pc, #20]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dcc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcca:	4a04      	ldr	r2, [pc, #16]	@ (800dcdc <HAL_RCC_OscConfig+0x8ac>)
 800dccc:	f043 0301 	orr.w	r3, r3, #1
 800dcd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3730      	adds	r7, #48	@ 0x30
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	58024400 	.word	0x58024400
 800dce0:	ffff0007 	.word	0xffff0007

0800dce4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d101      	bne.n	800dcf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	e19c      	b.n	800e032 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dcf8:	4b8a      	ldr	r3, [pc, #552]	@ (800df24 <HAL_RCC_ClockConfig+0x240>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f003 030f 	and.w	r3, r3, #15
 800dd00:	683a      	ldr	r2, [r7, #0]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d910      	bls.n	800dd28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd06:	4b87      	ldr	r3, [pc, #540]	@ (800df24 <HAL_RCC_ClockConfig+0x240>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f023 020f 	bic.w	r2, r3, #15
 800dd0e:	4985      	ldr	r1, [pc, #532]	@ (800df24 <HAL_RCC_ClockConfig+0x240>)
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	4313      	orrs	r3, r2
 800dd14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd16:	4b83      	ldr	r3, [pc, #524]	@ (800df24 <HAL_RCC_ClockConfig+0x240>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f003 030f 	and.w	r3, r3, #15
 800dd1e:	683a      	ldr	r2, [r7, #0]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d001      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800dd24:	2301      	movs	r3, #1
 800dd26:	e184      	b.n	800e032 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f003 0304 	and.w	r3, r3, #4
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d010      	beq.n	800dd56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	691a      	ldr	r2, [r3, #16]
 800dd38:	4b7b      	ldr	r3, [pc, #492]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800dd3a:	699b      	ldr	r3, [r3, #24]
 800dd3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d908      	bls.n	800dd56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dd44:	4b78      	ldr	r3, [pc, #480]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800dd46:	699b      	ldr	r3, [r3, #24]
 800dd48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	4975      	ldr	r1, [pc, #468]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800dd52:	4313      	orrs	r3, r2
 800dd54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f003 0308 	and.w	r3, r3, #8
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d010      	beq.n	800dd84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	695a      	ldr	r2, [r3, #20]
 800dd66:	4b70      	ldr	r3, [pc, #448]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800dd68:	69db      	ldr	r3, [r3, #28]
 800dd6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d908      	bls.n	800dd84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dd72:	4b6d      	ldr	r3, [pc, #436]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800dd74:	69db      	ldr	r3, [r3, #28]
 800dd76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	695b      	ldr	r3, [r3, #20]
 800dd7e:	496a      	ldr	r1, [pc, #424]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800dd80:	4313      	orrs	r3, r2
 800dd82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f003 0310 	and.w	r3, r3, #16
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d010      	beq.n	800ddb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	699a      	ldr	r2, [r3, #24]
 800dd94:	4b64      	ldr	r3, [pc, #400]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800dd96:	69db      	ldr	r3, [r3, #28]
 800dd98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d908      	bls.n	800ddb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dda0:	4b61      	ldr	r3, [pc, #388]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800dda2:	69db      	ldr	r3, [r3, #28]
 800dda4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	495e      	ldr	r1, [pc, #376]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f003 0320 	and.w	r3, r3, #32
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d010      	beq.n	800dde0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	69da      	ldr	r2, [r3, #28]
 800ddc2:	4b59      	ldr	r3, [pc, #356]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800ddc4:	6a1b      	ldr	r3, [r3, #32]
 800ddc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d908      	bls.n	800dde0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ddce:	4b56      	ldr	r3, [pc, #344]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	69db      	ldr	r3, [r3, #28]
 800ddda:	4953      	ldr	r1, [pc, #332]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800dddc:	4313      	orrs	r3, r2
 800ddde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f003 0302 	and.w	r3, r3, #2
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d010      	beq.n	800de0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	68da      	ldr	r2, [r3, #12]
 800ddf0:	4b4d      	ldr	r3, [pc, #308]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800ddf2:	699b      	ldr	r3, [r3, #24]
 800ddf4:	f003 030f 	and.w	r3, r3, #15
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d908      	bls.n	800de0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ddfc:	4b4a      	ldr	r3, [pc, #296]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800ddfe:	699b      	ldr	r3, [r3, #24]
 800de00:	f023 020f 	bic.w	r2, r3, #15
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	4947      	ldr	r1, [pc, #284]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800de0a:	4313      	orrs	r3, r2
 800de0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f003 0301 	and.w	r3, r3, #1
 800de16:	2b00      	cmp	r3, #0
 800de18:	d055      	beq.n	800dec6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800de1a:	4b43      	ldr	r3, [pc, #268]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800de1c:	699b      	ldr	r3, [r3, #24]
 800de1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	4940      	ldr	r1, [pc, #256]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800de28:	4313      	orrs	r3, r2
 800de2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	2b02      	cmp	r3, #2
 800de32:	d107      	bne.n	800de44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800de34:	4b3c      	ldr	r3, [pc, #240]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d121      	bne.n	800de84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800de40:	2301      	movs	r3, #1
 800de42:	e0f6      	b.n	800e032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	2b03      	cmp	r3, #3
 800de4a:	d107      	bne.n	800de5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800de4c:	4b36      	ldr	r3, [pc, #216]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de54:	2b00      	cmp	r3, #0
 800de56:	d115      	bne.n	800de84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800de58:	2301      	movs	r3, #1
 800de5a:	e0ea      	b.n	800e032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d107      	bne.n	800de74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800de64:	4b30      	ldr	r3, [pc, #192]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d109      	bne.n	800de84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800de70:	2301      	movs	r3, #1
 800de72:	e0de      	b.n	800e032 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800de74:	4b2c      	ldr	r3, [pc, #176]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f003 0304 	and.w	r3, r3, #4
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d101      	bne.n	800de84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800de80:	2301      	movs	r3, #1
 800de82:	e0d6      	b.n	800e032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800de84:	4b28      	ldr	r3, [pc, #160]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800de86:	691b      	ldr	r3, [r3, #16]
 800de88:	f023 0207 	bic.w	r2, r3, #7
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	4925      	ldr	r1, [pc, #148]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800de92:	4313      	orrs	r3, r2
 800de94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de96:	f7f4 fc61 	bl	800275c <HAL_GetTick>
 800de9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de9c:	e00a      	b.n	800deb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de9e:	f7f4 fc5d 	bl	800275c <HAL_GetTick>
 800dea2:	4602      	mov	r2, r0
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	1ad3      	subs	r3, r2, r3
 800dea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800deac:	4293      	cmp	r3, r2
 800deae:	d901      	bls.n	800deb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800deb0:	2303      	movs	r3, #3
 800deb2:	e0be      	b.n	800e032 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800deb4:	4b1c      	ldr	r3, [pc, #112]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	00db      	lsls	r3, r3, #3
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d1eb      	bne.n	800de9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f003 0302 	and.w	r3, r3, #2
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d010      	beq.n	800def4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	68da      	ldr	r2, [r3, #12]
 800ded6:	4b14      	ldr	r3, [pc, #80]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800ded8:	699b      	ldr	r3, [r3, #24]
 800deda:	f003 030f 	and.w	r3, r3, #15
 800dede:	429a      	cmp	r2, r3
 800dee0:	d208      	bcs.n	800def4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dee2:	4b11      	ldr	r3, [pc, #68]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800dee4:	699b      	ldr	r3, [r3, #24]
 800dee6:	f023 020f 	bic.w	r2, r3, #15
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	490e      	ldr	r1, [pc, #56]	@ (800df28 <HAL_RCC_ClockConfig+0x244>)
 800def0:	4313      	orrs	r3, r2
 800def2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800def4:	4b0b      	ldr	r3, [pc, #44]	@ (800df24 <HAL_RCC_ClockConfig+0x240>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f003 030f 	and.w	r3, r3, #15
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	429a      	cmp	r2, r3
 800df00:	d214      	bcs.n	800df2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df02:	4b08      	ldr	r3, [pc, #32]	@ (800df24 <HAL_RCC_ClockConfig+0x240>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f023 020f 	bic.w	r2, r3, #15
 800df0a:	4906      	ldr	r1, [pc, #24]	@ (800df24 <HAL_RCC_ClockConfig+0x240>)
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	4313      	orrs	r3, r2
 800df10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df12:	4b04      	ldr	r3, [pc, #16]	@ (800df24 <HAL_RCC_ClockConfig+0x240>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f003 030f 	and.w	r3, r3, #15
 800df1a:	683a      	ldr	r2, [r7, #0]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d005      	beq.n	800df2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800df20:	2301      	movs	r3, #1
 800df22:	e086      	b.n	800e032 <HAL_RCC_ClockConfig+0x34e>
 800df24:	52002000 	.word	0x52002000
 800df28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f003 0304 	and.w	r3, r3, #4
 800df34:	2b00      	cmp	r3, #0
 800df36:	d010      	beq.n	800df5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	691a      	ldr	r2, [r3, #16]
 800df3c:	4b3f      	ldr	r3, [pc, #252]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800df3e:	699b      	ldr	r3, [r3, #24]
 800df40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800df44:	429a      	cmp	r2, r3
 800df46:	d208      	bcs.n	800df5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800df48:	4b3c      	ldr	r3, [pc, #240]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800df4a:	699b      	ldr	r3, [r3, #24]
 800df4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	691b      	ldr	r3, [r3, #16]
 800df54:	4939      	ldr	r1, [pc, #228]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800df56:	4313      	orrs	r3, r2
 800df58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f003 0308 	and.w	r3, r3, #8
 800df62:	2b00      	cmp	r3, #0
 800df64:	d010      	beq.n	800df88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	695a      	ldr	r2, [r3, #20]
 800df6a:	4b34      	ldr	r3, [pc, #208]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800df6c:	69db      	ldr	r3, [r3, #28]
 800df6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800df72:	429a      	cmp	r2, r3
 800df74:	d208      	bcs.n	800df88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800df76:	4b31      	ldr	r3, [pc, #196]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800df78:	69db      	ldr	r3, [r3, #28]
 800df7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	695b      	ldr	r3, [r3, #20]
 800df82:	492e      	ldr	r1, [pc, #184]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800df84:	4313      	orrs	r3, r2
 800df86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f003 0310 	and.w	r3, r3, #16
 800df90:	2b00      	cmp	r3, #0
 800df92:	d010      	beq.n	800dfb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	699a      	ldr	r2, [r3, #24]
 800df98:	4b28      	ldr	r3, [pc, #160]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800df9a:	69db      	ldr	r3, [r3, #28]
 800df9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d208      	bcs.n	800dfb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dfa4:	4b25      	ldr	r3, [pc, #148]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800dfa6:	69db      	ldr	r3, [r3, #28]
 800dfa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	699b      	ldr	r3, [r3, #24]
 800dfb0:	4922      	ldr	r1, [pc, #136]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f003 0320 	and.w	r3, r3, #32
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d010      	beq.n	800dfe4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	69da      	ldr	r2, [r3, #28]
 800dfc6:	4b1d      	ldr	r3, [pc, #116]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800dfc8:	6a1b      	ldr	r3, [r3, #32]
 800dfca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d208      	bcs.n	800dfe4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dfd2:	4b1a      	ldr	r3, [pc, #104]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800dfd4:	6a1b      	ldr	r3, [r3, #32]
 800dfd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	69db      	ldr	r3, [r3, #28]
 800dfde:	4917      	ldr	r1, [pc, #92]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dfe4:	f000 f834 	bl	800e050 <HAL_RCC_GetSysClockFreq>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	4b14      	ldr	r3, [pc, #80]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800dfec:	699b      	ldr	r3, [r3, #24]
 800dfee:	0a1b      	lsrs	r3, r3, #8
 800dff0:	f003 030f 	and.w	r3, r3, #15
 800dff4:	4912      	ldr	r1, [pc, #72]	@ (800e040 <HAL_RCC_ClockConfig+0x35c>)
 800dff6:	5ccb      	ldrb	r3, [r1, r3]
 800dff8:	f003 031f 	and.w	r3, r3, #31
 800dffc:	fa22 f303 	lsr.w	r3, r2, r3
 800e000:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e002:	4b0e      	ldr	r3, [pc, #56]	@ (800e03c <HAL_RCC_ClockConfig+0x358>)
 800e004:	699b      	ldr	r3, [r3, #24]
 800e006:	f003 030f 	and.w	r3, r3, #15
 800e00a:	4a0d      	ldr	r2, [pc, #52]	@ (800e040 <HAL_RCC_ClockConfig+0x35c>)
 800e00c:	5cd3      	ldrb	r3, [r2, r3]
 800e00e:	f003 031f 	and.w	r3, r3, #31
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	fa22 f303 	lsr.w	r3, r2, r3
 800e018:	4a0a      	ldr	r2, [pc, #40]	@ (800e044 <HAL_RCC_ClockConfig+0x360>)
 800e01a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e01c:	4a0a      	ldr	r2, [pc, #40]	@ (800e048 <HAL_RCC_ClockConfig+0x364>)
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e022:	4b0a      	ldr	r3, [pc, #40]	@ (800e04c <HAL_RCC_ClockConfig+0x368>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4618      	mov	r0, r3
 800e028:	f7f4 fb4e 	bl	80026c8 <HAL_InitTick>
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e030:	7bfb      	ldrb	r3, [r7, #15]
}
 800e032:	4618      	mov	r0, r3
 800e034:	3718      	adds	r7, #24
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	58024400 	.word	0x58024400
 800e040:	080188bc 	.word	0x080188bc
 800e044:	24000008 	.word	0x24000008
 800e048:	24000004 	.word	0x24000004
 800e04c:	2400000c 	.word	0x2400000c

0800e050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e050:	b480      	push	{r7}
 800e052:	b089      	sub	sp, #36	@ 0x24
 800e054:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e056:	4bb3      	ldr	r3, [pc, #716]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e058:	691b      	ldr	r3, [r3, #16]
 800e05a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e05e:	2b18      	cmp	r3, #24
 800e060:	f200 8155 	bhi.w	800e30e <HAL_RCC_GetSysClockFreq+0x2be>
 800e064:	a201      	add	r2, pc, #4	@ (adr r2, 800e06c <HAL_RCC_GetSysClockFreq+0x1c>)
 800e066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e06a:	bf00      	nop
 800e06c:	0800e0d1 	.word	0x0800e0d1
 800e070:	0800e30f 	.word	0x0800e30f
 800e074:	0800e30f 	.word	0x0800e30f
 800e078:	0800e30f 	.word	0x0800e30f
 800e07c:	0800e30f 	.word	0x0800e30f
 800e080:	0800e30f 	.word	0x0800e30f
 800e084:	0800e30f 	.word	0x0800e30f
 800e088:	0800e30f 	.word	0x0800e30f
 800e08c:	0800e0f7 	.word	0x0800e0f7
 800e090:	0800e30f 	.word	0x0800e30f
 800e094:	0800e30f 	.word	0x0800e30f
 800e098:	0800e30f 	.word	0x0800e30f
 800e09c:	0800e30f 	.word	0x0800e30f
 800e0a0:	0800e30f 	.word	0x0800e30f
 800e0a4:	0800e30f 	.word	0x0800e30f
 800e0a8:	0800e30f 	.word	0x0800e30f
 800e0ac:	0800e0fd 	.word	0x0800e0fd
 800e0b0:	0800e30f 	.word	0x0800e30f
 800e0b4:	0800e30f 	.word	0x0800e30f
 800e0b8:	0800e30f 	.word	0x0800e30f
 800e0bc:	0800e30f 	.word	0x0800e30f
 800e0c0:	0800e30f 	.word	0x0800e30f
 800e0c4:	0800e30f 	.word	0x0800e30f
 800e0c8:	0800e30f 	.word	0x0800e30f
 800e0cc:	0800e103 	.word	0x0800e103
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0d0:	4b94      	ldr	r3, [pc, #592]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f003 0320 	and.w	r3, r3, #32
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d009      	beq.n	800e0f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e0dc:	4b91      	ldr	r3, [pc, #580]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	08db      	lsrs	r3, r3, #3
 800e0e2:	f003 0303 	and.w	r3, r3, #3
 800e0e6:	4a90      	ldr	r2, [pc, #576]	@ (800e328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e0ee:	e111      	b.n	800e314 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e0f0:	4b8d      	ldr	r3, [pc, #564]	@ (800e328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e0f2:	61bb      	str	r3, [r7, #24]
      break;
 800e0f4:	e10e      	b.n	800e314 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e0f6:	4b8d      	ldr	r3, [pc, #564]	@ (800e32c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e0f8:	61bb      	str	r3, [r7, #24]
      break;
 800e0fa:	e10b      	b.n	800e314 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e0fc:	4b8c      	ldr	r3, [pc, #560]	@ (800e330 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e0fe:	61bb      	str	r3, [r7, #24]
      break;
 800e100:	e108      	b.n	800e314 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e102:	4b88      	ldr	r3, [pc, #544]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e106:	f003 0303 	and.w	r3, r3, #3
 800e10a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e10c:	4b85      	ldr	r3, [pc, #532]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e110:	091b      	lsrs	r3, r3, #4
 800e112:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e116:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e118:	4b82      	ldr	r3, [pc, #520]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e11c:	f003 0301 	and.w	r3, r3, #1
 800e120:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e122:	4b80      	ldr	r3, [pc, #512]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e126:	08db      	lsrs	r3, r3, #3
 800e128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	fb02 f303 	mul.w	r3, r2, r3
 800e132:	ee07 3a90 	vmov	s15, r3
 800e136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e13a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	2b00      	cmp	r3, #0
 800e142:	f000 80e1 	beq.w	800e308 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	2b02      	cmp	r3, #2
 800e14a:	f000 8083 	beq.w	800e254 <HAL_RCC_GetSysClockFreq+0x204>
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	2b02      	cmp	r3, #2
 800e152:	f200 80a1 	bhi.w	800e298 <HAL_RCC_GetSysClockFreq+0x248>
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d003      	beq.n	800e164 <HAL_RCC_GetSysClockFreq+0x114>
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d056      	beq.n	800e210 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e162:	e099      	b.n	800e298 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e164:	4b6f      	ldr	r3, [pc, #444]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f003 0320 	and.w	r3, r3, #32
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d02d      	beq.n	800e1cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e170:	4b6c      	ldr	r3, [pc, #432]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	08db      	lsrs	r3, r3, #3
 800e176:	f003 0303 	and.w	r3, r3, #3
 800e17a:	4a6b      	ldr	r2, [pc, #428]	@ (800e328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e17c:	fa22 f303 	lsr.w	r3, r2, r3
 800e180:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	ee07 3a90 	vmov	s15, r3
 800e188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	ee07 3a90 	vmov	s15, r3
 800e192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e19a:	4b62      	ldr	r3, [pc, #392]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e19c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1a2:	ee07 3a90 	vmov	s15, r3
 800e1a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800e1ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e1b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e1be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e1ca:	e087      	b.n	800e2dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	ee07 3a90 	vmov	s15, r3
 800e1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e338 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1de:	4b51      	ldr	r3, [pc, #324]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1e6:	ee07 3a90 	vmov	s15, r3
 800e1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800e1f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e20a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e20e:	e065      	b.n	800e2dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	ee07 3a90 	vmov	s15, r3
 800e216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e21a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e33c <HAL_RCC_GetSysClockFreq+0x2ec>
 800e21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e222:	4b40      	ldr	r3, [pc, #256]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e22a:	ee07 3a90 	vmov	s15, r3
 800e22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e232:	ed97 6a02 	vldr	s12, [r7, #8]
 800e236:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e24e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e252:	e043      	b.n	800e2dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	ee07 3a90 	vmov	s15, r3
 800e25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e25e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e340 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e266:	4b2f      	ldr	r3, [pc, #188]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e26e:	ee07 3a90 	vmov	s15, r3
 800e272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e276:	ed97 6a02 	vldr	s12, [r7, #8]
 800e27a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e296:	e021      	b.n	800e2dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	ee07 3a90 	vmov	s15, r3
 800e29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e33c <HAL_RCC_GetSysClockFreq+0x2ec>
 800e2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2aa:	4b1e      	ldr	r3, [pc, #120]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2b2:	ee07 3a90 	vmov	s15, r3
 800e2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800e2be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e2da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e2dc:	4b11      	ldr	r3, [pc, #68]	@ (800e324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e2de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2e0:	0a5b      	lsrs	r3, r3, #9
 800e2e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	ee07 3a90 	vmov	s15, r3
 800e2f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e2f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e2f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e300:	ee17 3a90 	vmov	r3, s15
 800e304:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e306:	e005      	b.n	800e314 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e308:	2300      	movs	r3, #0
 800e30a:	61bb      	str	r3, [r7, #24]
      break;
 800e30c:	e002      	b.n	800e314 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e30e:	4b07      	ldr	r3, [pc, #28]	@ (800e32c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e310:	61bb      	str	r3, [r7, #24]
      break;
 800e312:	bf00      	nop
  }

  return sysclockfreq;
 800e314:	69bb      	ldr	r3, [r7, #24]
}
 800e316:	4618      	mov	r0, r3
 800e318:	3724      	adds	r7, #36	@ 0x24
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	58024400 	.word	0x58024400
 800e328:	03d09000 	.word	0x03d09000
 800e32c:	003d0900 	.word	0x003d0900
 800e330:	017d7840 	.word	0x017d7840
 800e334:	46000000 	.word	0x46000000
 800e338:	4c742400 	.word	0x4c742400
 800e33c:	4a742400 	.word	0x4a742400
 800e340:	4bbebc20 	.word	0x4bbebc20

0800e344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e34a:	f7ff fe81 	bl	800e050 <HAL_RCC_GetSysClockFreq>
 800e34e:	4602      	mov	r2, r0
 800e350:	4b10      	ldr	r3, [pc, #64]	@ (800e394 <HAL_RCC_GetHCLKFreq+0x50>)
 800e352:	699b      	ldr	r3, [r3, #24]
 800e354:	0a1b      	lsrs	r3, r3, #8
 800e356:	f003 030f 	and.w	r3, r3, #15
 800e35a:	490f      	ldr	r1, [pc, #60]	@ (800e398 <HAL_RCC_GetHCLKFreq+0x54>)
 800e35c:	5ccb      	ldrb	r3, [r1, r3]
 800e35e:	f003 031f 	and.w	r3, r3, #31
 800e362:	fa22 f303 	lsr.w	r3, r2, r3
 800e366:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e368:	4b0a      	ldr	r3, [pc, #40]	@ (800e394 <HAL_RCC_GetHCLKFreq+0x50>)
 800e36a:	699b      	ldr	r3, [r3, #24]
 800e36c:	f003 030f 	and.w	r3, r3, #15
 800e370:	4a09      	ldr	r2, [pc, #36]	@ (800e398 <HAL_RCC_GetHCLKFreq+0x54>)
 800e372:	5cd3      	ldrb	r3, [r2, r3]
 800e374:	f003 031f 	and.w	r3, r3, #31
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	fa22 f303 	lsr.w	r3, r2, r3
 800e37e:	4a07      	ldr	r2, [pc, #28]	@ (800e39c <HAL_RCC_GetHCLKFreq+0x58>)
 800e380:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e382:	4a07      	ldr	r2, [pc, #28]	@ (800e3a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e388:	4b04      	ldr	r3, [pc, #16]	@ (800e39c <HAL_RCC_GetHCLKFreq+0x58>)
 800e38a:	681b      	ldr	r3, [r3, #0]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	58024400 	.word	0x58024400
 800e398:	080188bc 	.word	0x080188bc
 800e39c:	24000008 	.word	0x24000008
 800e3a0:	24000004 	.word	0x24000004

0800e3a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e3a8:	f7ff ffcc 	bl	800e344 <HAL_RCC_GetHCLKFreq>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	4b06      	ldr	r3, [pc, #24]	@ (800e3c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e3b0:	69db      	ldr	r3, [r3, #28]
 800e3b2:	091b      	lsrs	r3, r3, #4
 800e3b4:	f003 0307 	and.w	r3, r3, #7
 800e3b8:	4904      	ldr	r1, [pc, #16]	@ (800e3cc <HAL_RCC_GetPCLK1Freq+0x28>)
 800e3ba:	5ccb      	ldrb	r3, [r1, r3]
 800e3bc:	f003 031f 	and.w	r3, r3, #31
 800e3c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	58024400 	.word	0x58024400
 800e3cc:	080188bc 	.word	0x080188bc

0800e3d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e3d4:	f7ff ffb6 	bl	800e344 <HAL_RCC_GetHCLKFreq>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	4b06      	ldr	r3, [pc, #24]	@ (800e3f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e3dc:	69db      	ldr	r3, [r3, #28]
 800e3de:	0a1b      	lsrs	r3, r3, #8
 800e3e0:	f003 0307 	and.w	r3, r3, #7
 800e3e4:	4904      	ldr	r1, [pc, #16]	@ (800e3f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e3e6:	5ccb      	ldrb	r3, [r1, r3]
 800e3e8:	f003 031f 	and.w	r3, r3, #31
 800e3ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	58024400 	.word	0x58024400
 800e3f8:	080188bc 	.word	0x080188bc

0800e3fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e3fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e400:	b0ca      	sub	sp, #296	@ 0x128
 800e402:	af00      	add	r7, sp, #0
 800e404:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e408:	2300      	movs	r3, #0
 800e40a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e40e:	2300      	movs	r3, #0
 800e410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e420:	2500      	movs	r5, #0
 800e422:	ea54 0305 	orrs.w	r3, r4, r5
 800e426:	d049      	beq.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e42c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e42e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e432:	d02f      	beq.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e434:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e438:	d828      	bhi.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e43a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e43e:	d01a      	beq.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e440:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e444:	d822      	bhi.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e446:	2b00      	cmp	r3, #0
 800e448:	d003      	beq.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e44a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e44e:	d007      	beq.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e450:	e01c      	b.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e452:	4bb8      	ldr	r3, [pc, #736]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e456:	4ab7      	ldr	r2, [pc, #732]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e45c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e45e:	e01a      	b.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e464:	3308      	adds	r3, #8
 800e466:	2102      	movs	r1, #2
 800e468:	4618      	mov	r0, r3
 800e46a:	f002 fb61 	bl	8010b30 <RCCEx_PLL2_Config>
 800e46e:	4603      	mov	r3, r0
 800e470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e474:	e00f      	b.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e47a:	3328      	adds	r3, #40	@ 0x28
 800e47c:	2102      	movs	r1, #2
 800e47e:	4618      	mov	r0, r3
 800e480:	f002 fc08 	bl	8010c94 <RCCEx_PLL3_Config>
 800e484:	4603      	mov	r3, r0
 800e486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e48a:	e004      	b.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e48c:	2301      	movs	r3, #1
 800e48e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e492:	e000      	b.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e494:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d10a      	bne.n	800e4b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e49e:	4ba5      	ldr	r3, [pc, #660]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e4a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4ac:	4aa1      	ldr	r2, [pc, #644]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e4ae:	430b      	orrs	r3, r1
 800e4b0:	6513      	str	r3, [r2, #80]	@ 0x50
 800e4b2:	e003      	b.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e4c8:	f04f 0900 	mov.w	r9, #0
 800e4cc:	ea58 0309 	orrs.w	r3, r8, r9
 800e4d0:	d047      	beq.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4d8:	2b04      	cmp	r3, #4
 800e4da:	d82a      	bhi.n	800e532 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e4dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e4e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e2:	bf00      	nop
 800e4e4:	0800e4f9 	.word	0x0800e4f9
 800e4e8:	0800e507 	.word	0x0800e507
 800e4ec:	0800e51d 	.word	0x0800e51d
 800e4f0:	0800e53b 	.word	0x0800e53b
 800e4f4:	0800e53b 	.word	0x0800e53b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4f8:	4b8e      	ldr	r3, [pc, #568]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fc:	4a8d      	ldr	r2, [pc, #564]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e4fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e504:	e01a      	b.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e50a:	3308      	adds	r3, #8
 800e50c:	2100      	movs	r1, #0
 800e50e:	4618      	mov	r0, r3
 800e510:	f002 fb0e 	bl	8010b30 <RCCEx_PLL2_Config>
 800e514:	4603      	mov	r3, r0
 800e516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e51a:	e00f      	b.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e520:	3328      	adds	r3, #40	@ 0x28
 800e522:	2100      	movs	r1, #0
 800e524:	4618      	mov	r0, r3
 800e526:	f002 fbb5 	bl	8010c94 <RCCEx_PLL3_Config>
 800e52a:	4603      	mov	r3, r0
 800e52c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e530:	e004      	b.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e532:	2301      	movs	r3, #1
 800e534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e538:	e000      	b.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e53a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e53c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e540:	2b00      	cmp	r3, #0
 800e542:	d10a      	bne.n	800e55a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e544:	4b7b      	ldr	r3, [pc, #492]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e548:	f023 0107 	bic.w	r1, r3, #7
 800e54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e552:	4a78      	ldr	r2, [pc, #480]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e554:	430b      	orrs	r3, r1
 800e556:	6513      	str	r3, [r2, #80]	@ 0x50
 800e558:	e003      	b.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e55a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e55e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800e56e:	f04f 0b00 	mov.w	fp, #0
 800e572:	ea5a 030b 	orrs.w	r3, sl, fp
 800e576:	d04c      	beq.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e57c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e57e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e582:	d030      	beq.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e588:	d829      	bhi.n	800e5de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e58a:	2bc0      	cmp	r3, #192	@ 0xc0
 800e58c:	d02d      	beq.n	800e5ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e58e:	2bc0      	cmp	r3, #192	@ 0xc0
 800e590:	d825      	bhi.n	800e5de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e592:	2b80      	cmp	r3, #128	@ 0x80
 800e594:	d018      	beq.n	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e596:	2b80      	cmp	r3, #128	@ 0x80
 800e598:	d821      	bhi.n	800e5de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d002      	beq.n	800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e59e:	2b40      	cmp	r3, #64	@ 0x40
 800e5a0:	d007      	beq.n	800e5b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e5a2:	e01c      	b.n	800e5de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5a4:	4b63      	ldr	r3, [pc, #396]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5a8:	4a62      	ldr	r2, [pc, #392]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e5aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e5b0:	e01c      	b.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5b6:	3308      	adds	r3, #8
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f002 fab8 	bl	8010b30 <RCCEx_PLL2_Config>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e5c6:	e011      	b.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5cc:	3328      	adds	r3, #40	@ 0x28
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f002 fb5f 	bl	8010c94 <RCCEx_PLL3_Config>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e5dc:	e006      	b.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e5e4:	e002      	b.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e5e6:	bf00      	nop
 800e5e8:	e000      	b.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e5ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10a      	bne.n	800e60a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e5f4:	4b4f      	ldr	r3, [pc, #316]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e5f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800e5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e602:	4a4c      	ldr	r2, [pc, #304]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e604:	430b      	orrs	r3, r1
 800e606:	6513      	str	r3, [r2, #80]	@ 0x50
 800e608:	e003      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e60a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e60e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800e61e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800e622:	2300      	movs	r3, #0
 800e624:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800e628:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800e62c:	460b      	mov	r3, r1
 800e62e:	4313      	orrs	r3, r2
 800e630:	d053      	beq.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e63a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e63e:	d035      	beq.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e640:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e644:	d82e      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e646:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e64a:	d031      	beq.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e64c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e650:	d828      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e656:	d01a      	beq.n	800e68e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e65c:	d822      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d003      	beq.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e662:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e666:	d007      	beq.n	800e678 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e668:	e01c      	b.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e66a:	4b32      	ldr	r3, [pc, #200]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e66e:	4a31      	ldr	r2, [pc, #196]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e674:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e676:	e01c      	b.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e67c:	3308      	adds	r3, #8
 800e67e:	2100      	movs	r1, #0
 800e680:	4618      	mov	r0, r3
 800e682:	f002 fa55 	bl	8010b30 <RCCEx_PLL2_Config>
 800e686:	4603      	mov	r3, r0
 800e688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e68c:	e011      	b.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e692:	3328      	adds	r3, #40	@ 0x28
 800e694:	2100      	movs	r1, #0
 800e696:	4618      	mov	r0, r3
 800e698:	f002 fafc 	bl	8010c94 <RCCEx_PLL3_Config>
 800e69c:	4603      	mov	r3, r0
 800e69e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e6a2:	e006      	b.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e6aa:	e002      	b.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e6ac:	bf00      	nop
 800e6ae:	e000      	b.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e6b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10b      	bne.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e6ba:	4b1e      	ldr	r3, [pc, #120]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e6bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e6ca:	4a1a      	ldr	r2, [pc, #104]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e6cc:	430b      	orrs	r3, r1
 800e6ce:	6593      	str	r3, [r2, #88]	@ 0x58
 800e6d0:	e003      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e6e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e6f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	d056      	beq.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e6fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e702:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e706:	d038      	beq.n	800e77a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e708:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e70c:	d831      	bhi.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e70e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e712:	d034      	beq.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e714:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e718:	d82b      	bhi.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e71a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e71e:	d01d      	beq.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e720:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e724:	d825      	bhi.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e726:	2b00      	cmp	r3, #0
 800e728:	d006      	beq.n	800e738 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e72a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e72e:	d00a      	beq.n	800e746 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e730:	e01f      	b.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e732:	bf00      	nop
 800e734:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e738:	4ba2      	ldr	r3, [pc, #648]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e73c:	4aa1      	ldr	r2, [pc, #644]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e73e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e744:	e01c      	b.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e74a:	3308      	adds	r3, #8
 800e74c:	2100      	movs	r1, #0
 800e74e:	4618      	mov	r0, r3
 800e750:	f002 f9ee 	bl	8010b30 <RCCEx_PLL2_Config>
 800e754:	4603      	mov	r3, r0
 800e756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e75a:	e011      	b.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e760:	3328      	adds	r3, #40	@ 0x28
 800e762:	2100      	movs	r1, #0
 800e764:	4618      	mov	r0, r3
 800e766:	f002 fa95 	bl	8010c94 <RCCEx_PLL3_Config>
 800e76a:	4603      	mov	r3, r0
 800e76c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e770:	e006      	b.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e772:	2301      	movs	r3, #1
 800e774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e778:	e002      	b.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e77a:	bf00      	nop
 800e77c:	e000      	b.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e77e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e784:	2b00      	cmp	r3, #0
 800e786:	d10b      	bne.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e788:	4b8e      	ldr	r3, [pc, #568]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e78a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e78c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e794:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e798:	4a8a      	ldr	r2, [pc, #552]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e79a:	430b      	orrs	r3, r1
 800e79c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e79e:	e003      	b.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e7b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e7be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	d03a      	beq.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800e7c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7ce:	2b30      	cmp	r3, #48	@ 0x30
 800e7d0:	d01f      	beq.n	800e812 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e7d2:	2b30      	cmp	r3, #48	@ 0x30
 800e7d4:	d819      	bhi.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e7d6:	2b20      	cmp	r3, #32
 800e7d8:	d00c      	beq.n	800e7f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e7da:	2b20      	cmp	r3, #32
 800e7dc:	d815      	bhi.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d019      	beq.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e7e2:	2b10      	cmp	r3, #16
 800e7e4:	d111      	bne.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7e6:	4b77      	ldr	r3, [pc, #476]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ea:	4a76      	ldr	r2, [pc, #472]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e7ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e7f2:	e011      	b.n	800e818 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7f8:	3308      	adds	r3, #8
 800e7fa:	2102      	movs	r1, #2
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f002 f997 	bl	8010b30 <RCCEx_PLL2_Config>
 800e802:	4603      	mov	r3, r0
 800e804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e808:	e006      	b.n	800e818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e810:	e002      	b.n	800e818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e812:	bf00      	nop
 800e814:	e000      	b.n	800e818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e816:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10a      	bne.n	800e836 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e820:	4b68      	ldr	r3, [pc, #416]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e824:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e82c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e82e:	4a65      	ldr	r2, [pc, #404]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e830:	430b      	orrs	r3, r1
 800e832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e834:	e003      	b.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e83a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e84a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e84e:	2300      	movs	r3, #0
 800e850:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e854:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e858:	460b      	mov	r3, r1
 800e85a:	4313      	orrs	r3, r2
 800e85c:	d051      	beq.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e868:	d035      	beq.n	800e8d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800e86a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e86e:	d82e      	bhi.n	800e8ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e870:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e874:	d031      	beq.n	800e8da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e876:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e87a:	d828      	bhi.n	800e8ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e87c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e880:	d01a      	beq.n	800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e886:	d822      	bhi.n	800e8ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d003      	beq.n	800e894 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e88c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e890:	d007      	beq.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800e892:	e01c      	b.n	800e8ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e894:	4b4b      	ldr	r3, [pc, #300]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e898:	4a4a      	ldr	r2, [pc, #296]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e89a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e89e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e8a0:	e01c      	b.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8a6:	3308      	adds	r3, #8
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f002 f940 	bl	8010b30 <RCCEx_PLL2_Config>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e8b6:	e011      	b.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8bc:	3328      	adds	r3, #40	@ 0x28
 800e8be:	2100      	movs	r1, #0
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f002 f9e7 	bl	8010c94 <RCCEx_PLL3_Config>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e8cc:	e006      	b.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e8d4:	e002      	b.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e8d6:	bf00      	nop
 800e8d8:	e000      	b.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e8da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d10a      	bne.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e8e4:	4b37      	ldr	r3, [pc, #220]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e8e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8f2:	4a34      	ldr	r2, [pc, #208]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e8f4:	430b      	orrs	r3, r1
 800e8f6:	6513      	str	r3, [r2, #80]	@ 0x50
 800e8f8:	e003      	b.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e90e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e912:	2300      	movs	r3, #0
 800e914:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e918:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e91c:	460b      	mov	r3, r1
 800e91e:	4313      	orrs	r3, r2
 800e920:	d056      	beq.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e92c:	d033      	beq.n	800e996 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e92e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e932:	d82c      	bhi.n	800e98e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e934:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e938:	d02f      	beq.n	800e99a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e93a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e93e:	d826      	bhi.n	800e98e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e940:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e944:	d02b      	beq.n	800e99e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e946:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e94a:	d820      	bhi.n	800e98e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e94c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e950:	d012      	beq.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e956:	d81a      	bhi.n	800e98e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d022      	beq.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e95c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e960:	d115      	bne.n	800e98e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e966:	3308      	adds	r3, #8
 800e968:	2101      	movs	r1, #1
 800e96a:	4618      	mov	r0, r3
 800e96c:	f002 f8e0 	bl	8010b30 <RCCEx_PLL2_Config>
 800e970:	4603      	mov	r3, r0
 800e972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e976:	e015      	b.n	800e9a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e97c:	3328      	adds	r3, #40	@ 0x28
 800e97e:	2101      	movs	r1, #1
 800e980:	4618      	mov	r0, r3
 800e982:	f002 f987 	bl	8010c94 <RCCEx_PLL3_Config>
 800e986:	4603      	mov	r3, r0
 800e988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e98c:	e00a      	b.n	800e9a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e98e:	2301      	movs	r3, #1
 800e990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e994:	e006      	b.n	800e9a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e996:	bf00      	nop
 800e998:	e004      	b.n	800e9a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e99a:	bf00      	nop
 800e99c:	e002      	b.n	800e9a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e99e:	bf00      	nop
 800e9a0:	e000      	b.n	800e9a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e9a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d10d      	bne.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e9ac:	4b05      	ldr	r3, [pc, #20]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e9ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9ba:	4a02      	ldr	r2, [pc, #8]	@ (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e9bc:	430b      	orrs	r3, r1
 800e9be:	6513      	str	r3, [r2, #80]	@ 0x50
 800e9c0:	e006      	b.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e9c2:	bf00      	nop
 800e9c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e9dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e9e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	d055      	beq.n	800ea9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e9f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e9fc:	d033      	beq.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e9fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ea02:	d82c      	bhi.n	800ea5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea08:	d02f      	beq.n	800ea6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ea0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea0e:	d826      	bhi.n	800ea5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ea14:	d02b      	beq.n	800ea6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ea16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ea1a:	d820      	bhi.n	800ea5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea20:	d012      	beq.n	800ea48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ea22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea26:	d81a      	bhi.n	800ea5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d022      	beq.n	800ea72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ea2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea30:	d115      	bne.n	800ea5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea36:	3308      	adds	r3, #8
 800ea38:	2101      	movs	r1, #1
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f002 f878 	bl	8010b30 <RCCEx_PLL2_Config>
 800ea40:	4603      	mov	r3, r0
 800ea42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ea46:	e015      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea4c:	3328      	adds	r3, #40	@ 0x28
 800ea4e:	2101      	movs	r1, #1
 800ea50:	4618      	mov	r0, r3
 800ea52:	f002 f91f 	bl	8010c94 <RCCEx_PLL3_Config>
 800ea56:	4603      	mov	r3, r0
 800ea58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ea5c:	e00a      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ea64:	e006      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ea66:	bf00      	nop
 800ea68:	e004      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ea6a:	bf00      	nop
 800ea6c:	e002      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ea6e:	bf00      	nop
 800ea70:	e000      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ea72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10b      	bne.n	800ea94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ea7c:	4ba3      	ldr	r3, [pc, #652]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea80:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ea84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ea8c:	4a9f      	ldr	r2, [pc, #636]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea8e:	430b      	orrs	r3, r1
 800ea90:	6593      	str	r3, [r2, #88]	@ 0x58
 800ea92:	e003      	b.n	800ea9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ea9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800eaa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800eaac:	2300      	movs	r3, #0
 800eaae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800eab2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800eab6:	460b      	mov	r3, r1
 800eab8:	4313      	orrs	r3, r2
 800eaba:	d037      	beq.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800eabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eac6:	d00e      	beq.n	800eae6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800eac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eacc:	d816      	bhi.n	800eafc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d018      	beq.n	800eb04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ead2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ead6:	d111      	bne.n	800eafc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ead8:	4b8c      	ldr	r3, [pc, #560]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eadc:	4a8b      	ldr	r2, [pc, #556]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800eae4:	e00f      	b.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaea:	3308      	adds	r3, #8
 800eaec:	2101      	movs	r1, #1
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f002 f81e 	bl	8010b30 <RCCEx_PLL2_Config>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800eafa:	e004      	b.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eafc:	2301      	movs	r3, #1
 800eafe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eb02:	e000      	b.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800eb04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d10a      	bne.n	800eb24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800eb0e:	4b7f      	ldr	r3, [pc, #508]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800eb16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb1c:	4a7b      	ldr	r2, [pc, #492]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb1e:	430b      	orrs	r3, r1
 800eb20:	6513      	str	r3, [r2, #80]	@ 0x50
 800eb22:	e003      	b.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800eb2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800eb38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eb42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800eb46:	460b      	mov	r3, r1
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	d039      	beq.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800eb4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb52:	2b03      	cmp	r3, #3
 800eb54:	d81c      	bhi.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800eb56:	a201      	add	r2, pc, #4	@ (adr r2, 800eb5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800eb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb5c:	0800eb99 	.word	0x0800eb99
 800eb60:	0800eb6d 	.word	0x0800eb6d
 800eb64:	0800eb7b 	.word	0x0800eb7b
 800eb68:	0800eb99 	.word	0x0800eb99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb6c:	4b67      	ldr	r3, [pc, #412]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb70:	4a66      	ldr	r2, [pc, #408]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800eb78:	e00f      	b.n	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb7e:	3308      	adds	r3, #8
 800eb80:	2102      	movs	r1, #2
 800eb82:	4618      	mov	r0, r3
 800eb84:	f001 ffd4 	bl	8010b30 <RCCEx_PLL2_Config>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800eb8e:	e004      	b.n	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800eb90:	2301      	movs	r3, #1
 800eb92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eb96:	e000      	b.n	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800eb98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d10a      	bne.n	800ebb8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800eba2:	4b5a      	ldr	r3, [pc, #360]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eba6:	f023 0103 	bic.w	r1, r3, #3
 800ebaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ebb0:	4a56      	ldr	r2, [pc, #344]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ebb2:	430b      	orrs	r3, r1
 800ebb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ebb6:	e003      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ebc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ebcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ebd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	f000 809f 	beq.w	800ed20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ebe2:	4b4b      	ldr	r3, [pc, #300]	@ (800ed10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4a4a      	ldr	r2, [pc, #296]	@ (800ed10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ebe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ebec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ebee:	f7f3 fdb5 	bl	800275c <HAL_GetTick>
 800ebf2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ebf6:	e00b      	b.n	800ec10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebf8:	f7f3 fdb0 	bl	800275c <HAL_GetTick>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	2b64      	cmp	r3, #100	@ 0x64
 800ec06:	d903      	bls.n	800ec10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ec08:	2303      	movs	r3, #3
 800ec0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ec0e:	e005      	b.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ec10:	4b3f      	ldr	r3, [pc, #252]	@ (800ed10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d0ed      	beq.n	800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ec1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d179      	bne.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ec24:	4b39      	ldr	r3, [pc, #228]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ec28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ec30:	4053      	eors	r3, r2
 800ec32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d015      	beq.n	800ec66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ec3a:	4b34      	ldr	r3, [pc, #208]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ec46:	4b31      	ldr	r3, [pc, #196]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec4a:	4a30      	ldr	r2, [pc, #192]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ec50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ec52:	4b2e      	ldr	r3, [pc, #184]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec56:	4a2d      	ldr	r2, [pc, #180]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ec5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ec5e:	4a2b      	ldr	r2, [pc, #172]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ec64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ec66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ec6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec72:	d118      	bne.n	800eca6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec74:	f7f3 fd72 	bl	800275c <HAL_GetTick>
 800ec78:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec7c:	e00d      	b.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec7e:	f7f3 fd6d 	bl	800275c <HAL_GetTick>
 800ec82:	4602      	mov	r2, r0
 800ec84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ec88:	1ad2      	subs	r2, r2, r3
 800ec8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d903      	bls.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ec92:	2303      	movs	r3, #3
 800ec94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800ec98:	e005      	b.n	800eca6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec9a:	4b1c      	ldr	r3, [pc, #112]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec9e:	f003 0302 	and.w	r3, r3, #2
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d0eb      	beq.n	800ec7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800eca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d129      	bne.n	800ed02 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ecae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ecb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ecba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ecbe:	d10e      	bne.n	800ecde <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ecc0:	4b12      	ldr	r3, [pc, #72]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ecc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eccc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ecd0:	091a      	lsrs	r2, r3, #4
 800ecd2:	4b10      	ldr	r3, [pc, #64]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ecd4:	4013      	ands	r3, r2
 800ecd6:	4a0d      	ldr	r2, [pc, #52]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ecd8:	430b      	orrs	r3, r1
 800ecda:	6113      	str	r3, [r2, #16]
 800ecdc:	e005      	b.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ecde:	4b0b      	ldr	r3, [pc, #44]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ece0:	691b      	ldr	r3, [r3, #16]
 800ece2:	4a0a      	ldr	r2, [pc, #40]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ece4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ece8:	6113      	str	r3, [r2, #16]
 800ecea:	4b08      	ldr	r3, [pc, #32]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ecec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ecee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ecf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ecfa:	4a04      	ldr	r2, [pc, #16]	@ (800ed0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ecfc:	430b      	orrs	r3, r1
 800ecfe:	6713      	str	r3, [r2, #112]	@ 0x70
 800ed00:	e00e      	b.n	800ed20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ed02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ed0a:	e009      	b.n	800ed20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ed0c:	58024400 	.word	0x58024400
 800ed10:	58024800 	.word	0x58024800
 800ed14:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ed20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	f002 0301 	and.w	r3, r2, #1
 800ed2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ed30:	2300      	movs	r3, #0
 800ed32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ed36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	f000 8089 	beq.w	800ee54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ed42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed48:	2b28      	cmp	r3, #40	@ 0x28
 800ed4a:	d86b      	bhi.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ed4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ed54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ed4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed52:	bf00      	nop
 800ed54:	0800ee2d 	.word	0x0800ee2d
 800ed58:	0800ee25 	.word	0x0800ee25
 800ed5c:	0800ee25 	.word	0x0800ee25
 800ed60:	0800ee25 	.word	0x0800ee25
 800ed64:	0800ee25 	.word	0x0800ee25
 800ed68:	0800ee25 	.word	0x0800ee25
 800ed6c:	0800ee25 	.word	0x0800ee25
 800ed70:	0800ee25 	.word	0x0800ee25
 800ed74:	0800edf9 	.word	0x0800edf9
 800ed78:	0800ee25 	.word	0x0800ee25
 800ed7c:	0800ee25 	.word	0x0800ee25
 800ed80:	0800ee25 	.word	0x0800ee25
 800ed84:	0800ee25 	.word	0x0800ee25
 800ed88:	0800ee25 	.word	0x0800ee25
 800ed8c:	0800ee25 	.word	0x0800ee25
 800ed90:	0800ee25 	.word	0x0800ee25
 800ed94:	0800ee0f 	.word	0x0800ee0f
 800ed98:	0800ee25 	.word	0x0800ee25
 800ed9c:	0800ee25 	.word	0x0800ee25
 800eda0:	0800ee25 	.word	0x0800ee25
 800eda4:	0800ee25 	.word	0x0800ee25
 800eda8:	0800ee25 	.word	0x0800ee25
 800edac:	0800ee25 	.word	0x0800ee25
 800edb0:	0800ee25 	.word	0x0800ee25
 800edb4:	0800ee2d 	.word	0x0800ee2d
 800edb8:	0800ee25 	.word	0x0800ee25
 800edbc:	0800ee25 	.word	0x0800ee25
 800edc0:	0800ee25 	.word	0x0800ee25
 800edc4:	0800ee25 	.word	0x0800ee25
 800edc8:	0800ee25 	.word	0x0800ee25
 800edcc:	0800ee25 	.word	0x0800ee25
 800edd0:	0800ee25 	.word	0x0800ee25
 800edd4:	0800ee2d 	.word	0x0800ee2d
 800edd8:	0800ee25 	.word	0x0800ee25
 800eddc:	0800ee25 	.word	0x0800ee25
 800ede0:	0800ee25 	.word	0x0800ee25
 800ede4:	0800ee25 	.word	0x0800ee25
 800ede8:	0800ee25 	.word	0x0800ee25
 800edec:	0800ee25 	.word	0x0800ee25
 800edf0:	0800ee25 	.word	0x0800ee25
 800edf4:	0800ee2d 	.word	0x0800ee2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800edf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edfc:	3308      	adds	r3, #8
 800edfe:	2101      	movs	r1, #1
 800ee00:	4618      	mov	r0, r3
 800ee02:	f001 fe95 	bl	8010b30 <RCCEx_PLL2_Config>
 800ee06:	4603      	mov	r3, r0
 800ee08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ee0c:	e00f      	b.n	800ee2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee12:	3328      	adds	r3, #40	@ 0x28
 800ee14:	2101      	movs	r1, #1
 800ee16:	4618      	mov	r0, r3
 800ee18:	f001 ff3c 	bl	8010c94 <RCCEx_PLL3_Config>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ee22:	e004      	b.n	800ee2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee24:	2301      	movs	r3, #1
 800ee26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ee2a:	e000      	b.n	800ee2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ee2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d10a      	bne.n	800ee4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ee36:	4bbf      	ldr	r3, [pc, #764]	@ (800f134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ee3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee44:	4abb      	ldr	r2, [pc, #748]	@ (800f134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee46:	430b      	orrs	r3, r1
 800ee48:	6553      	str	r3, [r2, #84]	@ 0x54
 800ee4a:	e003      	b.n	800ee54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ee54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5c:	f002 0302 	and.w	r3, r2, #2
 800ee60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ee64:	2300      	movs	r3, #0
 800ee66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ee6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ee6e:	460b      	mov	r3, r1
 800ee70:	4313      	orrs	r3, r2
 800ee72:	d041      	beq.n	800eef8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ee74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ee7a:	2b05      	cmp	r3, #5
 800ee7c:	d824      	bhi.n	800eec8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ee7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ee80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee84:	0800eed1 	.word	0x0800eed1
 800ee88:	0800ee9d 	.word	0x0800ee9d
 800ee8c:	0800eeb3 	.word	0x0800eeb3
 800ee90:	0800eed1 	.word	0x0800eed1
 800ee94:	0800eed1 	.word	0x0800eed1
 800ee98:	0800eed1 	.word	0x0800eed1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eea0:	3308      	adds	r3, #8
 800eea2:	2101      	movs	r1, #1
 800eea4:	4618      	mov	r0, r3
 800eea6:	f001 fe43 	bl	8010b30 <RCCEx_PLL2_Config>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eeb0:	e00f      	b.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eeb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eeb6:	3328      	adds	r3, #40	@ 0x28
 800eeb8:	2101      	movs	r1, #1
 800eeba:	4618      	mov	r0, r3
 800eebc:	f001 feea 	bl	8010c94 <RCCEx_PLL3_Config>
 800eec0:	4603      	mov	r3, r0
 800eec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eec6:	e004      	b.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eec8:	2301      	movs	r3, #1
 800eeca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eece:	e000      	b.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800eed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d10a      	bne.n	800eef0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800eeda:	4b96      	ldr	r3, [pc, #600]	@ (800f134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eedc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eede:	f023 0107 	bic.w	r1, r3, #7
 800eee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eee6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eee8:	4a92      	ldr	r2, [pc, #584]	@ (800f134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eeea:	430b      	orrs	r3, r1
 800eeec:	6553      	str	r3, [r2, #84]	@ 0x54
 800eeee:	e003      	b.n	800eef8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800eef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef00:	f002 0304 	and.w	r3, r2, #4
 800ef04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ef08:	2300      	movs	r3, #0
 800ef0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ef12:	460b      	mov	r3, r1
 800ef14:	4313      	orrs	r3, r2
 800ef16:	d044      	beq.n	800efa2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ef18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef20:	2b05      	cmp	r3, #5
 800ef22:	d825      	bhi.n	800ef70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ef24:	a201      	add	r2, pc, #4	@ (adr r2, 800ef2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ef26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef2a:	bf00      	nop
 800ef2c:	0800ef79 	.word	0x0800ef79
 800ef30:	0800ef45 	.word	0x0800ef45
 800ef34:	0800ef5b 	.word	0x0800ef5b
 800ef38:	0800ef79 	.word	0x0800ef79
 800ef3c:	0800ef79 	.word	0x0800ef79
 800ef40:	0800ef79 	.word	0x0800ef79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef48:	3308      	adds	r3, #8
 800ef4a:	2101      	movs	r1, #1
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f001 fdef 	bl	8010b30 <RCCEx_PLL2_Config>
 800ef52:	4603      	mov	r3, r0
 800ef54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ef58:	e00f      	b.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef5e:	3328      	adds	r3, #40	@ 0x28
 800ef60:	2101      	movs	r1, #1
 800ef62:	4618      	mov	r0, r3
 800ef64:	f001 fe96 	bl	8010c94 <RCCEx_PLL3_Config>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ef6e:	e004      	b.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef70:	2301      	movs	r3, #1
 800ef72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ef76:	e000      	b.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ef78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d10b      	bne.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ef82:	4b6c      	ldr	r3, [pc, #432]	@ (800f134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ef84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef86:	f023 0107 	bic.w	r1, r3, #7
 800ef8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef92:	4a68      	ldr	r2, [pc, #416]	@ (800f134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ef94:	430b      	orrs	r3, r1
 800ef96:	6593      	str	r3, [r2, #88]	@ 0x58
 800ef98:	e003      	b.n	800efa2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800efa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efaa:	f002 0320 	and.w	r3, r2, #32
 800efae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800efb2:	2300      	movs	r3, #0
 800efb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800efb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800efbc:	460b      	mov	r3, r1
 800efbe:	4313      	orrs	r3, r2
 800efc0:	d055      	beq.n	800f06e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800efc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800efce:	d033      	beq.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800efd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800efd4:	d82c      	bhi.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800efd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efda:	d02f      	beq.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800efdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efe0:	d826      	bhi.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800efe2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800efe6:	d02b      	beq.n	800f040 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800efe8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800efec:	d820      	bhi.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800efee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eff2:	d012      	beq.n	800f01a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800eff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eff8:	d81a      	bhi.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800effa:	2b00      	cmp	r3, #0
 800effc:	d022      	beq.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800effe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f002:	d115      	bne.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f008:	3308      	adds	r3, #8
 800f00a:	2100      	movs	r1, #0
 800f00c:	4618      	mov	r0, r3
 800f00e:	f001 fd8f 	bl	8010b30 <RCCEx_PLL2_Config>
 800f012:	4603      	mov	r3, r0
 800f014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f018:	e015      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f01e:	3328      	adds	r3, #40	@ 0x28
 800f020:	2102      	movs	r1, #2
 800f022:	4618      	mov	r0, r3
 800f024:	f001 fe36 	bl	8010c94 <RCCEx_PLL3_Config>
 800f028:	4603      	mov	r3, r0
 800f02a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f02e:	e00a      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f030:	2301      	movs	r3, #1
 800f032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f036:	e006      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f038:	bf00      	nop
 800f03a:	e004      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f03c:	bf00      	nop
 800f03e:	e002      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f040:	bf00      	nop
 800f042:	e000      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f044:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10b      	bne.n	800f066 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f04e:	4b39      	ldr	r3, [pc, #228]	@ (800f134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f052:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f05e:	4a35      	ldr	r2, [pc, #212]	@ (800f134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f060:	430b      	orrs	r3, r1
 800f062:	6553      	str	r3, [r2, #84]	@ 0x54
 800f064:	e003      	b.n	800f06e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f06a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f076:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800f07a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f07e:	2300      	movs	r3, #0
 800f080:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f084:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800f088:	460b      	mov	r3, r1
 800f08a:	4313      	orrs	r3, r2
 800f08c:	d058      	beq.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f092:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f096:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f09a:	d033      	beq.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f09c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f0a0:	d82c      	bhi.n	800f0fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0a6:	d02f      	beq.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f0a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0ac:	d826      	bhi.n	800f0fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f0b2:	d02b      	beq.n	800f10c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f0b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f0b8:	d820      	bhi.n	800f0fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0be:	d012      	beq.n	800f0e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f0c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0c4:	d81a      	bhi.n	800f0fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d022      	beq.n	800f110 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f0ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0ce:	d115      	bne.n	800f0fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0d4:	3308      	adds	r3, #8
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f001 fd29 	bl	8010b30 <RCCEx_PLL2_Config>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f0e4:	e015      	b.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0ea:	3328      	adds	r3, #40	@ 0x28
 800f0ec:	2102      	movs	r1, #2
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f001 fdd0 	bl	8010c94 <RCCEx_PLL3_Config>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f0fa:	e00a      	b.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f102:	e006      	b.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f104:	bf00      	nop
 800f106:	e004      	b.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f108:	bf00      	nop
 800f10a:	e002      	b.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f10c:	bf00      	nop
 800f10e:	e000      	b.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f110:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10e      	bne.n	800f138 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f11a:	4b06      	ldr	r3, [pc, #24]	@ (800f134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f11c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f11e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800f122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f12a:	4a02      	ldr	r2, [pc, #8]	@ (800f134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f12c:	430b      	orrs	r3, r1
 800f12e:	6593      	str	r3, [r2, #88]	@ 0x58
 800f130:	e006      	b.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f132:	bf00      	nop
 800f134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f13c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f148:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800f14c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f150:	2300      	movs	r3, #0
 800f152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f156:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800f15a:	460b      	mov	r3, r1
 800f15c:	4313      	orrs	r3, r2
 800f15e:	d055      	beq.n	800f20c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f168:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f16c:	d033      	beq.n	800f1d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f16e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f172:	d82c      	bhi.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f178:	d02f      	beq.n	800f1da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f17a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f17e:	d826      	bhi.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f180:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f184:	d02b      	beq.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f186:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f18a:	d820      	bhi.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f18c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f190:	d012      	beq.n	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f196:	d81a      	bhi.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d022      	beq.n	800f1e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f19c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f1a0:	d115      	bne.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1a6:	3308      	adds	r3, #8
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f001 fcc0 	bl	8010b30 <RCCEx_PLL2_Config>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f1b6:	e015      	b.n	800f1e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f1b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1bc:	3328      	adds	r3, #40	@ 0x28
 800f1be:	2102      	movs	r1, #2
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f001 fd67 	bl	8010c94 <RCCEx_PLL3_Config>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f1cc:	e00a      	b.n	800f1e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f1d4:	e006      	b.n	800f1e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f1d6:	bf00      	nop
 800f1d8:	e004      	b.n	800f1e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f1da:	bf00      	nop
 800f1dc:	e002      	b.n	800f1e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f1de:	bf00      	nop
 800f1e0:	e000      	b.n	800f1e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f1e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d10b      	bne.n	800f204 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f1ec:	4ba1      	ldr	r3, [pc, #644]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f1ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800f1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f1fc:	4a9d      	ldr	r2, [pc, #628]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f1fe:	430b      	orrs	r3, r1
 800f200:	6593      	str	r3, [r2, #88]	@ 0x58
 800f202:	e003      	b.n	800f20c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f214:	f002 0308 	and.w	r3, r2, #8
 800f218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f21c:	2300      	movs	r3, #0
 800f21e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f222:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800f226:	460b      	mov	r3, r1
 800f228:	4313      	orrs	r3, r2
 800f22a:	d01e      	beq.n	800f26a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f238:	d10c      	bne.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f23e:	3328      	adds	r3, #40	@ 0x28
 800f240:	2102      	movs	r1, #2
 800f242:	4618      	mov	r0, r3
 800f244:	f001 fd26 	bl	8010c94 <RCCEx_PLL3_Config>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d002      	beq.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f24e:	2301      	movs	r3, #1
 800f250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f254:	4b87      	ldr	r3, [pc, #540]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f258:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f264:	4a83      	ldr	r2, [pc, #524]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f266:	430b      	orrs	r3, r1
 800f268:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f272:	f002 0310 	and.w	r3, r2, #16
 800f276:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f27a:	2300      	movs	r3, #0
 800f27c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f280:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800f284:	460b      	mov	r3, r1
 800f286:	4313      	orrs	r3, r2
 800f288:	d01e      	beq.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f28e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f296:	d10c      	bne.n	800f2b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f29c:	3328      	adds	r3, #40	@ 0x28
 800f29e:	2102      	movs	r1, #2
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f001 fcf7 	bl	8010c94 <RCCEx_PLL3_Config>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d002      	beq.n	800f2b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f2b2:	4b70      	ldr	r3, [pc, #448]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f2b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f2c2:	4a6c      	ldr	r2, [pc, #432]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f2c4:	430b      	orrs	r3, r1
 800f2c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f2d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f2d8:	2300      	movs	r3, #0
 800f2da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f2de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	d03e      	beq.n	800f366 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f2f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2f4:	d022      	beq.n	800f33c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f2f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2fa:	d81b      	bhi.n	800f334 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d003      	beq.n	800f308 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f304:	d00b      	beq.n	800f31e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f306:	e015      	b.n	800f334 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f30c:	3308      	adds	r3, #8
 800f30e:	2100      	movs	r1, #0
 800f310:	4618      	mov	r0, r3
 800f312:	f001 fc0d 	bl	8010b30 <RCCEx_PLL2_Config>
 800f316:	4603      	mov	r3, r0
 800f318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f31c:	e00f      	b.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f322:	3328      	adds	r3, #40	@ 0x28
 800f324:	2102      	movs	r1, #2
 800f326:	4618      	mov	r0, r3
 800f328:	f001 fcb4 	bl	8010c94 <RCCEx_PLL3_Config>
 800f32c:	4603      	mov	r3, r0
 800f32e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f332:	e004      	b.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f334:	2301      	movs	r3, #1
 800f336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f33a:	e000      	b.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f33e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f342:	2b00      	cmp	r3, #0
 800f344:	d10b      	bne.n	800f35e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f346:	4b4b      	ldr	r3, [pc, #300]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f34a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f352:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f356:	4a47      	ldr	r2, [pc, #284]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f358:	430b      	orrs	r3, r1
 800f35a:	6593      	str	r3, [r2, #88]	@ 0x58
 800f35c:	e003      	b.n	800f366 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f35e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f372:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f374:	2300      	movs	r3, #0
 800f376:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f378:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f37c:	460b      	mov	r3, r1
 800f37e:	4313      	orrs	r3, r2
 800f380:	d03b      	beq.n	800f3fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f38a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f38e:	d01f      	beq.n	800f3d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f390:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f394:	d818      	bhi.n	800f3c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f39a:	d003      	beq.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f39c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f3a0:	d007      	beq.n	800f3b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f3a2:	e011      	b.n	800f3c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3a4:	4b33      	ldr	r3, [pc, #204]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3a8:	4a32      	ldr	r2, [pc, #200]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f3aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f3ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f3b0:	e00f      	b.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3b6:	3328      	adds	r3, #40	@ 0x28
 800f3b8:	2101      	movs	r1, #1
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f001 fc6a 	bl	8010c94 <RCCEx_PLL3_Config>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f3c6:	e004      	b.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f3ce:	e000      	b.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f3d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d10b      	bne.n	800f3f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f3da:	4b26      	ldr	r3, [pc, #152]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3ea:	4a22      	ldr	r2, [pc, #136]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f3ec:	430b      	orrs	r3, r1
 800f3ee:	6553      	str	r3, [r2, #84]	@ 0x54
 800f3f0:	e003      	b.n	800f3fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f3f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f402:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f406:	673b      	str	r3, [r7, #112]	@ 0x70
 800f408:	2300      	movs	r3, #0
 800f40a:	677b      	str	r3, [r7, #116]	@ 0x74
 800f40c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f410:	460b      	mov	r3, r1
 800f412:	4313      	orrs	r3, r2
 800f414:	d034      	beq.n	800f480 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f41a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d003      	beq.n	800f428 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f424:	d007      	beq.n	800f436 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f426:	e011      	b.n	800f44c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f428:	4b12      	ldr	r3, [pc, #72]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f42c:	4a11      	ldr	r2, [pc, #68]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f42e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f434:	e00e      	b.n	800f454 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f43a:	3308      	adds	r3, #8
 800f43c:	2102      	movs	r1, #2
 800f43e:	4618      	mov	r0, r3
 800f440:	f001 fb76 	bl	8010b30 <RCCEx_PLL2_Config>
 800f444:	4603      	mov	r3, r0
 800f446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f44a:	e003      	b.n	800f454 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f44c:	2301      	movs	r3, #1
 800f44e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f452:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10d      	bne.n	800f478 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f45c:	4b05      	ldr	r3, [pc, #20]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f45e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f460:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f46a:	4a02      	ldr	r2, [pc, #8]	@ (800f474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f46c:	430b      	orrs	r3, r1
 800f46e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f470:	e006      	b.n	800f480 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f472:	bf00      	nop
 800f474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f47c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f488:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f48c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f48e:	2300      	movs	r3, #0
 800f490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f492:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f496:	460b      	mov	r3, r1
 800f498:	4313      	orrs	r3, r2
 800f49a:	d00c      	beq.n	800f4b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4a0:	3328      	adds	r3, #40	@ 0x28
 800f4a2:	2102      	movs	r1, #2
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f001 fbf5 	bl	8010c94 <RCCEx_PLL3_Config>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d002      	beq.n	800f4b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f4c2:	663b      	str	r3, [r7, #96]	@ 0x60
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	667b      	str	r3, [r7, #100]	@ 0x64
 800f4c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	d038      	beq.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f4de:	d018      	beq.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f4e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f4e4:	d811      	bhi.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f4e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4ea:	d014      	beq.n	800f516 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f4ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4f0:	d80b      	bhi.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d011      	beq.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f4f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4fa:	d106      	bne.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4fc:	4bc3      	ldr	r3, [pc, #780]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f500:	4ac2      	ldr	r2, [pc, #776]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f508:	e008      	b.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f50a:	2301      	movs	r3, #1
 800f50c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f510:	e004      	b.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f512:	bf00      	nop
 800f514:	e002      	b.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f516:	bf00      	nop
 800f518:	e000      	b.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f51a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f51c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f520:	2b00      	cmp	r3, #0
 800f522:	d10b      	bne.n	800f53c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f524:	4bb9      	ldr	r3, [pc, #740]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f528:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f534:	4ab5      	ldr	r2, [pc, #724]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f536:	430b      	orrs	r3, r1
 800f538:	6553      	str	r3, [r2, #84]	@ 0x54
 800f53a:	e003      	b.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f53c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f550:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f552:	2300      	movs	r3, #0
 800f554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f556:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f55a:	460b      	mov	r3, r1
 800f55c:	4313      	orrs	r3, r2
 800f55e:	d009      	beq.n	800f574 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f560:	4baa      	ldr	r3, [pc, #680]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f564:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f56c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f56e:	4aa7      	ldr	r2, [pc, #668]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f570:	430b      	orrs	r3, r1
 800f572:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800f580:	653b      	str	r3, [r7, #80]	@ 0x50
 800f582:	2300      	movs	r3, #0
 800f584:	657b      	str	r3, [r7, #84]	@ 0x54
 800f586:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f58a:	460b      	mov	r3, r1
 800f58c:	4313      	orrs	r3, r2
 800f58e:	d00a      	beq.n	800f5a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f590:	4b9e      	ldr	r3, [pc, #632]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f592:	691b      	ldr	r3, [r3, #16]
 800f594:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800f598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f59c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f5a0:	4a9a      	ldr	r2, [pc, #616]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5a2:	430b      	orrs	r3, r1
 800f5a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f5b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f5b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f5bc:	460b      	mov	r3, r1
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	d009      	beq.n	800f5d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f5c2:	4b92      	ldr	r3, [pc, #584]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5d0:	4a8e      	ldr	r2, [pc, #568]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5d2:	430b      	orrs	r3, r1
 800f5d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f5e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800f5e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	d00e      	beq.n	800f610 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f5f2:	4b86      	ldr	r3, [pc, #536]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5f4:	691b      	ldr	r3, [r3, #16]
 800f5f6:	4a85      	ldr	r2, [pc, #532]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f5fc:	6113      	str	r3, [r2, #16]
 800f5fe:	4b83      	ldr	r3, [pc, #524]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f600:	6919      	ldr	r1, [r3, #16]
 800f602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f606:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f60a:	4a80      	ldr	r2, [pc, #512]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f60c:	430b      	orrs	r3, r1
 800f60e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f618:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f61c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f61e:	2300      	movs	r3, #0
 800f620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f622:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f626:	460b      	mov	r3, r1
 800f628:	4313      	orrs	r3, r2
 800f62a:	d009      	beq.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f62c:	4b77      	ldr	r3, [pc, #476]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f62e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f630:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f63a:	4a74      	ldr	r2, [pc, #464]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f63c:	430b      	orrs	r3, r1
 800f63e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f648:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f64c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f64e:	2300      	movs	r3, #0
 800f650:	637b      	str	r3, [r7, #52]	@ 0x34
 800f652:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f656:	460b      	mov	r3, r1
 800f658:	4313      	orrs	r3, r2
 800f65a:	d00a      	beq.n	800f672 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f65c:	4b6b      	ldr	r3, [pc, #428]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f65e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f660:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f66c:	4a67      	ldr	r2, [pc, #412]	@ (800f80c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f66e:	430b      	orrs	r3, r1
 800f670:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67a:	2100      	movs	r1, #0
 800f67c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f67e:	f003 0301 	and.w	r3, r3, #1
 800f682:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f684:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f688:	460b      	mov	r3, r1
 800f68a:	4313      	orrs	r3, r2
 800f68c:	d011      	beq.n	800f6b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f692:	3308      	adds	r3, #8
 800f694:	2100      	movs	r1, #0
 800f696:	4618      	mov	r0, r3
 800f698:	f001 fa4a 	bl	8010b30 <RCCEx_PLL2_Config>
 800f69c:	4603      	mov	r3, r0
 800f69e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f6a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d003      	beq.n	800f6b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	6239      	str	r1, [r7, #32]
 800f6be:	f003 0302 	and.w	r3, r3, #2
 800f6c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f6c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	d011      	beq.n	800f6f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6d2:	3308      	adds	r3, #8
 800f6d4:	2101      	movs	r1, #1
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f001 fa2a 	bl	8010b30 <RCCEx_PLL2_Config>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d003      	beq.n	800f6f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	61b9      	str	r1, [r7, #24]
 800f6fe:	f003 0304 	and.w	r3, r3, #4
 800f702:	61fb      	str	r3, [r7, #28]
 800f704:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f708:	460b      	mov	r3, r1
 800f70a:	4313      	orrs	r3, r2
 800f70c:	d011      	beq.n	800f732 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f712:	3308      	adds	r3, #8
 800f714:	2102      	movs	r1, #2
 800f716:	4618      	mov	r0, r3
 800f718:	f001 fa0a 	bl	8010b30 <RCCEx_PLL2_Config>
 800f71c:	4603      	mov	r3, r0
 800f71e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f726:	2b00      	cmp	r3, #0
 800f728:	d003      	beq.n	800f732 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f72a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f72e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73a:	2100      	movs	r1, #0
 800f73c:	6139      	str	r1, [r7, #16]
 800f73e:	f003 0308 	and.w	r3, r3, #8
 800f742:	617b      	str	r3, [r7, #20]
 800f744:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f748:	460b      	mov	r3, r1
 800f74a:	4313      	orrs	r3, r2
 800f74c:	d011      	beq.n	800f772 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f752:	3328      	adds	r3, #40	@ 0x28
 800f754:	2100      	movs	r1, #0
 800f756:	4618      	mov	r0, r3
 800f758:	f001 fa9c 	bl	8010c94 <RCCEx_PLL3_Config>
 800f75c:	4603      	mov	r3, r0
 800f75e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800f762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f766:	2b00      	cmp	r3, #0
 800f768:	d003      	beq.n	800f772 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f76a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f76e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77a:	2100      	movs	r1, #0
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	f003 0310 	and.w	r3, r3, #16
 800f782:	60fb      	str	r3, [r7, #12]
 800f784:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f788:	460b      	mov	r3, r1
 800f78a:	4313      	orrs	r3, r2
 800f78c:	d011      	beq.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f792:	3328      	adds	r3, #40	@ 0x28
 800f794:	2101      	movs	r1, #1
 800f796:	4618      	mov	r0, r3
 800f798:	f001 fa7c 	bl	8010c94 <RCCEx_PLL3_Config>
 800f79c:	4603      	mov	r3, r0
 800f79e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f7a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d003      	beq.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	6039      	str	r1, [r7, #0]
 800f7be:	f003 0320 	and.w	r3, r3, #32
 800f7c2:	607b      	str	r3, [r7, #4]
 800f7c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	4313      	orrs	r3, r2
 800f7cc:	d011      	beq.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7d2:	3328      	adds	r3, #40	@ 0x28
 800f7d4:	2102      	movs	r1, #2
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f001 fa5c 	bl	8010c94 <RCCEx_PLL3_Config>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f7e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d003      	beq.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800f7f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d101      	bne.n	800f7fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	e000      	b.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800f7fe:	2301      	movs	r3, #1
}
 800f800:	4618      	mov	r0, r3
 800f802:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800f806:	46bd      	mov	sp, r7
 800f808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f80c:	58024400 	.word	0x58024400

0800f810 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b090      	sub	sp, #64	@ 0x40
 800f814:	af00      	add	r7, sp, #0
 800f816:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f81a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f81e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f822:	430b      	orrs	r3, r1
 800f824:	f040 8094 	bne.w	800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f828:	4b9e      	ldr	r3, [pc, #632]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f82a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f82c:	f003 0307 	and.w	r3, r3, #7
 800f830:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f834:	2b04      	cmp	r3, #4
 800f836:	f200 8087 	bhi.w	800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f83a:	a201      	add	r2, pc, #4	@ (adr r2, 800f840 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f840:	0800f855 	.word	0x0800f855
 800f844:	0800f87d 	.word	0x0800f87d
 800f848:	0800f8a5 	.word	0x0800f8a5
 800f84c:	0800f941 	.word	0x0800f941
 800f850:	0800f8cd 	.word	0x0800f8cd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f854:	4b93      	ldr	r3, [pc, #588]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f85c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f860:	d108      	bne.n	800f874 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f866:	4618      	mov	r0, r3
 800f868:	f001 f810 	bl	801088c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f870:	f000 bd45 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f874:	2300      	movs	r3, #0
 800f876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f878:	f000 bd41 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f87c:	4b89      	ldr	r3, [pc, #548]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f888:	d108      	bne.n	800f89c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f88a:	f107 0318 	add.w	r3, r7, #24
 800f88e:	4618      	mov	r0, r3
 800f890:	f000 fd54 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f898:	f000 bd31 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8a0:	f000 bd2d 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f8a4:	4b7f      	ldr	r3, [pc, #508]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f8ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8b0:	d108      	bne.n	800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8b2:	f107 030c 	add.w	r3, r7, #12
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f000 fe94 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8c0:	f000 bd1d 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8c8:	f000 bd19 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f8cc:	4b75      	ldr	r3, [pc, #468]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f8d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f8d6:	4b73      	ldr	r3, [pc, #460]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f003 0304 	and.w	r3, r3, #4
 800f8de:	2b04      	cmp	r3, #4
 800f8e0:	d10c      	bne.n	800f8fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d109      	bne.n	800f8fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8e8:	4b6e      	ldr	r3, [pc, #440]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	08db      	lsrs	r3, r3, #3
 800f8ee:	f003 0303 	and.w	r3, r3, #3
 800f8f2:	4a6d      	ldr	r2, [pc, #436]	@ (800faa8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f8f4:	fa22 f303 	lsr.w	r3, r2, r3
 800f8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8fa:	e01f      	b.n	800f93c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f8fc:	4b69      	ldr	r3, [pc, #420]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f908:	d106      	bne.n	800f918 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f90c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f910:	d102      	bne.n	800f918 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f912:	4b66      	ldr	r3, [pc, #408]	@ (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f916:	e011      	b.n	800f93c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f918:	4b62      	ldr	r3, [pc, #392]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f924:	d106      	bne.n	800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f92c:	d102      	bne.n	800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f92e:	4b60      	ldr	r3, [pc, #384]	@ (800fab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f932:	e003      	b.n	800f93c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f934:	2300      	movs	r3, #0
 800f936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f938:	f000 bce1 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f93c:	f000 bcdf 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f940:	4b5c      	ldr	r3, [pc, #368]	@ (800fab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f944:	f000 bcdb 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f948:	2300      	movs	r3, #0
 800f94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f94c:	f000 bcd7 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f950:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f954:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800f958:	430b      	orrs	r3, r1
 800f95a:	f040 80ad 	bne.w	800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f95e:	4b51      	ldr	r3, [pc, #324]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f962:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800f966:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f96a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f96e:	d056      	beq.n	800fa1e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f976:	f200 8090 	bhi.w	800fa9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f97c:	2bc0      	cmp	r3, #192	@ 0xc0
 800f97e:	f000 8088 	beq.w	800fa92 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f984:	2bc0      	cmp	r3, #192	@ 0xc0
 800f986:	f200 8088 	bhi.w	800fa9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f98c:	2b80      	cmp	r3, #128	@ 0x80
 800f98e:	d032      	beq.n	800f9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f992:	2b80      	cmp	r3, #128	@ 0x80
 800f994:	f200 8081 	bhi.w	800fa9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d003      	beq.n	800f9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9a0:	2b40      	cmp	r3, #64	@ 0x40
 800f9a2:	d014      	beq.n	800f9ce <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f9a4:	e079      	b.n	800fa9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f9a6:	4b3f      	ldr	r3, [pc, #252]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f9ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f9b2:	d108      	bne.n	800f9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f9b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f000 ff67 	bl	801088c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9c2:	f000 bc9c 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9ca:	f000 bc98 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f9ce:	4b35      	ldr	r3, [pc, #212]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f9d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f9da:	d108      	bne.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9dc:	f107 0318 	add.w	r3, r7, #24
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f000 fcab 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f9e6:	69bb      	ldr	r3, [r7, #24]
 800f9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9ea:	f000 bc88 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9f2:	f000 bc84 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f9f6:	4b2b      	ldr	r3, [pc, #172]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f9fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa02:	d108      	bne.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa04:	f107 030c 	add.w	r3, r7, #12
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f000 fdeb 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa12:	f000 bc74 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa16:	2300      	movs	r3, #0
 800fa18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa1a:	f000 bc70 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fa1e:	4b21      	ldr	r3, [pc, #132]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fa26:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fa28:	4b1e      	ldr	r3, [pc, #120]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f003 0304 	and.w	r3, r3, #4
 800fa30:	2b04      	cmp	r3, #4
 800fa32:	d10c      	bne.n	800fa4e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800fa34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d109      	bne.n	800fa4e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fa3a:	4b1a      	ldr	r3, [pc, #104]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	08db      	lsrs	r3, r3, #3
 800fa40:	f003 0303 	and.w	r3, r3, #3
 800fa44:	4a18      	ldr	r2, [pc, #96]	@ (800faa8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fa46:	fa22 f303 	lsr.w	r3, r2, r3
 800fa4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fa4c:	e01f      	b.n	800fa8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fa4e:	4b15      	ldr	r3, [pc, #84]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa5a:	d106      	bne.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800fa5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa62:	d102      	bne.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fa64:	4b11      	ldr	r3, [pc, #68]	@ (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fa66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fa68:	e011      	b.n	800fa8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fa6a:	4b0e      	ldr	r3, [pc, #56]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa76:	d106      	bne.n	800fa86 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800fa78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa7e:	d102      	bne.n	800fa86 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fa80:	4b0b      	ldr	r3, [pc, #44]	@ (800fab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fa84:	e003      	b.n	800fa8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fa86:	2300      	movs	r3, #0
 800fa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fa8a:	f000 bc38 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fa8e:	f000 bc36 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fa92:	4b08      	ldr	r3, [pc, #32]	@ (800fab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fa94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa96:	f000 bc32 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa9e:	f000 bc2e 	b.w	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800faa2:	bf00      	nop
 800faa4:	58024400 	.word	0x58024400
 800faa8:	03d09000 	.word	0x03d09000
 800faac:	003d0900 	.word	0x003d0900
 800fab0:	017d7840 	.word	0x017d7840
 800fab4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800fab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fabc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800fac0:	430b      	orrs	r3, r1
 800fac2:	f040 809c 	bne.w	800fbfe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800fac6:	4b9e      	ldr	r3, [pc, #632]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800faca:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800face:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fad2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fad6:	d054      	beq.n	800fb82 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800fad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fada:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fade:	f200 808b 	bhi.w	800fbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fae4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800fae8:	f000 8083 	beq.w	800fbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800faec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800faf2:	f200 8081 	bhi.w	800fbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800faf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fafc:	d02f      	beq.n	800fb5e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800fafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fb04:	d878      	bhi.n	800fbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d004      	beq.n	800fb16 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800fb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fb12:	d012      	beq.n	800fb3a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800fb14:	e070      	b.n	800fbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fb16:	4b8a      	ldr	r3, [pc, #552]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fb22:	d107      	bne.n	800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 feaf 	bl	801088c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb32:	e3e4      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb34:	2300      	movs	r3, #0
 800fb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb38:	e3e1      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fb3a:	4b81      	ldr	r3, [pc, #516]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fb46:	d107      	bne.n	800fb58 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb48:	f107 0318 	add.w	r3, r7, #24
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f000 fbf5 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb56:	e3d2      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb5c:	e3cf      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fb5e:	4b78      	ldr	r3, [pc, #480]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fb66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb6a:	d107      	bne.n	800fb7c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb6c:	f107 030c 	add.w	r3, r7, #12
 800fb70:	4618      	mov	r0, r3
 800fb72:	f000 fd37 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb7a:	e3c0      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb80:	e3bd      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fb82:	4b6f      	ldr	r3, [pc, #444]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fb8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fb8c:	4b6c      	ldr	r3, [pc, #432]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f003 0304 	and.w	r3, r3, #4
 800fb94:	2b04      	cmp	r3, #4
 800fb96:	d10c      	bne.n	800fbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800fb98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d109      	bne.n	800fbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb9e:	4b68      	ldr	r3, [pc, #416]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	08db      	lsrs	r3, r3, #3
 800fba4:	f003 0303 	and.w	r3, r3, #3
 800fba8:	4a66      	ldr	r2, [pc, #408]	@ (800fd44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800fbaa:	fa22 f303 	lsr.w	r3, r2, r3
 800fbae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fbb0:	e01e      	b.n	800fbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fbb2:	4b63      	ldr	r3, [pc, #396]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbbe:	d106      	bne.n	800fbce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800fbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fbc6:	d102      	bne.n	800fbce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fbc8:	4b5f      	ldr	r3, [pc, #380]	@ (800fd48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800fbca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fbcc:	e010      	b.n	800fbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fbce:	4b5c      	ldr	r3, [pc, #368]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fbd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fbda:	d106      	bne.n	800fbea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800fbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fbe2:	d102      	bne.n	800fbea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fbe4:	4b59      	ldr	r3, [pc, #356]	@ (800fd4c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800fbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fbe8:	e002      	b.n	800fbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fbea:	2300      	movs	r3, #0
 800fbec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fbee:	e386      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fbf0:	e385      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fbf2:	4b57      	ldr	r3, [pc, #348]	@ (800fd50 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800fbf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbf6:	e382      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbfc:	e37f      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800fbfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc02:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800fc06:	430b      	orrs	r3, r1
 800fc08:	f040 80a7 	bne.w	800fd5a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800fc0c:	4b4c      	ldr	r3, [pc, #304]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fc0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc10:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800fc14:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc1c:	d055      	beq.n	800fcca <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc24:	f200 8096 	bhi.w	800fd54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800fc2e:	f000 8084 	beq.w	800fd3a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800fc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800fc38:	f200 808c 	bhi.w	800fd54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc42:	d030      	beq.n	800fca6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800fc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc4a:	f200 8083 	bhi.w	800fd54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d004      	beq.n	800fc5e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800fc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc5a:	d012      	beq.n	800fc82 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800fc5c:	e07a      	b.n	800fd54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fc5e:	4b38      	ldr	r3, [pc, #224]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fc66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc6a:	d107      	bne.n	800fc7c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc70:	4618      	mov	r0, r3
 800fc72:	f000 fe0b 	bl	801088c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc7a:	e340      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc80:	e33d      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc82:	4b2f      	ldr	r3, [pc, #188]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fc8e:	d107      	bne.n	800fca0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc90:	f107 0318 	add.w	r3, r7, #24
 800fc94:	4618      	mov	r0, r3
 800fc96:	f000 fb51 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc9e:	e32e      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fca0:	2300      	movs	r3, #0
 800fca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fca4:	e32b      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fca6:	4b26      	ldr	r3, [pc, #152]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fcae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcb2:	d107      	bne.n	800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcb4:	f107 030c 	add.w	r3, r7, #12
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f000 fc93 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcc2:	e31c      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcc8:	e319      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fcca:	4b1d      	ldr	r3, [pc, #116]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fcce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fcd2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fcd4:	4b1a      	ldr	r3, [pc, #104]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f003 0304 	and.w	r3, r3, #4
 800fcdc:	2b04      	cmp	r3, #4
 800fcde:	d10c      	bne.n	800fcfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800fce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d109      	bne.n	800fcfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fce6:	4b16      	ldr	r3, [pc, #88]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	08db      	lsrs	r3, r3, #3
 800fcec:	f003 0303 	and.w	r3, r3, #3
 800fcf0:	4a14      	ldr	r2, [pc, #80]	@ (800fd44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800fcf2:	fa22 f303 	lsr.w	r3, r2, r3
 800fcf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fcf8:	e01e      	b.n	800fd38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fcfa:	4b11      	ldr	r3, [pc, #68]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd06:	d106      	bne.n	800fd16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800fd08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd0e:	d102      	bne.n	800fd16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fd10:	4b0d      	ldr	r3, [pc, #52]	@ (800fd48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800fd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd14:	e010      	b.n	800fd38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fd16:	4b0a      	ldr	r3, [pc, #40]	@ (800fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fd22:	d106      	bne.n	800fd32 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800fd24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd2a:	d102      	bne.n	800fd32 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fd2c:	4b07      	ldr	r3, [pc, #28]	@ (800fd4c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800fd2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd30:	e002      	b.n	800fd38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fd32:	2300      	movs	r3, #0
 800fd34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fd36:	e2e2      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fd38:	e2e1      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fd3a:	4b05      	ldr	r3, [pc, #20]	@ (800fd50 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800fd3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd3e:	e2de      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fd40:	58024400 	.word	0x58024400
 800fd44:	03d09000 	.word	0x03d09000
 800fd48:	003d0900 	.word	0x003d0900
 800fd4c:	017d7840 	.word	0x017d7840
 800fd50:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800fd54:	2300      	movs	r3, #0
 800fd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd58:	e2d1      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800fd5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd5e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800fd62:	430b      	orrs	r3, r1
 800fd64:	f040 809c 	bne.w	800fea0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800fd68:	4b93      	ldr	r3, [pc, #588]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fd6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd6c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800fd70:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd78:	d054      	beq.n	800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800fd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd80:	f200 808b 	bhi.w	800fe9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800fd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fd8a:	f000 8083 	beq.w	800fe94 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800fd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fd94:	f200 8081 	bhi.w	800fe9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800fd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd9e:	d02f      	beq.n	800fe00 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800fda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fda2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fda6:	d878      	bhi.n	800fe9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800fda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d004      	beq.n	800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800fdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fdb4:	d012      	beq.n	800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800fdb6:	e070      	b.n	800fe9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fdb8:	4b7f      	ldr	r3, [pc, #508]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fdc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fdc4:	d107      	bne.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fdc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f000 fd5e 	bl	801088c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fdd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdd4:	e293      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdda:	e290      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fddc:	4b76      	ldr	r3, [pc, #472]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fde4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fde8:	d107      	bne.n	800fdfa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdea:	f107 0318 	add.w	r3, r7, #24
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f000 faa4 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fdf4:	69bb      	ldr	r3, [r7, #24]
 800fdf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdf8:	e281      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdfe:	e27e      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fe00:	4b6d      	ldr	r3, [pc, #436]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fe08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fe0c:	d107      	bne.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe0e:	f107 030c 	add.w	r3, r7, #12
 800fe12:	4618      	mov	r0, r3
 800fe14:	f000 fbe6 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe1c:	e26f      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe22:	e26c      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fe24:	4b64      	ldr	r3, [pc, #400]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fe2c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fe2e:	4b62      	ldr	r3, [pc, #392]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f003 0304 	and.w	r3, r3, #4
 800fe36:	2b04      	cmp	r3, #4
 800fe38:	d10c      	bne.n	800fe54 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800fe3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d109      	bne.n	800fe54 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe40:	4b5d      	ldr	r3, [pc, #372]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	08db      	lsrs	r3, r3, #3
 800fe46:	f003 0303 	and.w	r3, r3, #3
 800fe4a:	4a5c      	ldr	r2, [pc, #368]	@ (800ffbc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800fe4c:	fa22 f303 	lsr.w	r3, r2, r3
 800fe50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe52:	e01e      	b.n	800fe92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fe54:	4b58      	ldr	r3, [pc, #352]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe60:	d106      	bne.n	800fe70 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800fe62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe68:	d102      	bne.n	800fe70 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fe6a:	4b55      	ldr	r3, [pc, #340]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800fe6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe6e:	e010      	b.n	800fe92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fe70:	4b51      	ldr	r3, [pc, #324]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fe78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe7c:	d106      	bne.n	800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800fe7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fe84:	d102      	bne.n	800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fe86:	4b4f      	ldr	r3, [pc, #316]	@ (800ffc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800fe88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe8a:	e002      	b.n	800fe92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fe90:	e235      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fe92:	e234      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fe94:	4b4c      	ldr	r3, [pc, #304]	@ (800ffc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800fe96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe98:	e231      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe9e:	e22e      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800fea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fea4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800fea8:	430b      	orrs	r3, r1
 800feaa:	f040 808f 	bne.w	800ffcc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800feae:	4b42      	ldr	r3, [pc, #264]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800feb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800feb2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800feb6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800feb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800febe:	d06b      	beq.n	800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800fec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fec2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fec6:	d874      	bhi.n	800ffb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fece:	d056      	beq.n	800ff7e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800fed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fed2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fed6:	d86c      	bhi.n	800ffb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fede:	d03b      	beq.n	800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800fee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fee2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fee6:	d864      	bhi.n	800ffb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800feee:	d021      	beq.n	800ff34 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800fef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fef6:	d85c      	bhi.n	800ffb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d004      	beq.n	800ff08 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800fefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff04:	d004      	beq.n	800ff10 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ff06:	e054      	b.n	800ffb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ff08:	f7fe fa4c 	bl	800e3a4 <HAL_RCC_GetPCLK1Freq>
 800ff0c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff0e:	e1f6      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ff10:	4b29      	ldr	r3, [pc, #164]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ff1c:	d107      	bne.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff1e:	f107 0318 	add.w	r3, r7, #24
 800ff22:	4618      	mov	r0, r3
 800ff24:	f000 fa0a 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff2c:	e1e7      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff32:	e1e4      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff34:	4b20      	ldr	r3, [pc, #128]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ff3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff40:	d107      	bne.n	800ff52 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff42:	f107 030c 	add.w	r3, r7, #12
 800ff46:	4618      	mov	r0, r3
 800ff48:	f000 fb4c 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff50:	e1d5      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff52:	2300      	movs	r3, #0
 800ff54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff56:	e1d2      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ff58:	4b17      	ldr	r3, [pc, #92]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f003 0304 	and.w	r3, r3, #4
 800ff60:	2b04      	cmp	r3, #4
 800ff62:	d109      	bne.n	800ff78 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff64:	4b14      	ldr	r3, [pc, #80]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	08db      	lsrs	r3, r3, #3
 800ff6a:	f003 0303 	and.w	r3, r3, #3
 800ff6e:	4a13      	ldr	r2, [pc, #76]	@ (800ffbc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ff70:	fa22 f303 	lsr.w	r3, r2, r3
 800ff74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff76:	e1c2      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff7c:	e1bf      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ff7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff8a:	d102      	bne.n	800ff92 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ff8c:	4b0c      	ldr	r3, [pc, #48]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ff8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff90:	e1b5      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff92:	2300      	movs	r3, #0
 800ff94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff96:	e1b2      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ff98:	4b07      	ldr	r3, [pc, #28]	@ (800ffb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ffa4:	d102      	bne.n	800ffac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ffa6:	4b07      	ldr	r3, [pc, #28]	@ (800ffc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ffa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffaa:	e1a8      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffac:	2300      	movs	r3, #0
 800ffae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffb0:	e1a5      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffb6:	e1a2      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ffb8:	58024400 	.word	0x58024400
 800ffbc:	03d09000 	.word	0x03d09000
 800ffc0:	003d0900 	.word	0x003d0900
 800ffc4:	017d7840 	.word	0x017d7840
 800ffc8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ffcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffd0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ffd4:	430b      	orrs	r3, r1
 800ffd6:	d173      	bne.n	80100c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ffd8:	4b9c      	ldr	r3, [pc, #624]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ffda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ffe0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ffe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ffe8:	d02f      	beq.n	801004a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ffea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fff0:	d863      	bhi.n	80100ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800fff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d004      	beq.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800fff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fffe:	d012      	beq.n	8010026 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010000:	e05b      	b.n	80100ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010002:	4b92      	ldr	r3, [pc, #584]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801000a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801000e:	d107      	bne.n	8010020 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010010:	f107 0318 	add.w	r3, r7, #24
 8010014:	4618      	mov	r0, r3
 8010016:	f000 f991 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801001e:	e16e      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010020:	2300      	movs	r3, #0
 8010022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010024:	e16b      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010026:	4b89      	ldr	r3, [pc, #548]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801002e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010032:	d107      	bne.n	8010044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010034:	f107 030c 	add.w	r3, r7, #12
 8010038:	4618      	mov	r0, r3
 801003a:	f000 fad3 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010042:	e15c      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010044:	2300      	movs	r3, #0
 8010046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010048:	e159      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801004a:	4b80      	ldr	r3, [pc, #512]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801004c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801004e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010052:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010054:	4b7d      	ldr	r3, [pc, #500]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f003 0304 	and.w	r3, r3, #4
 801005c:	2b04      	cmp	r3, #4
 801005e:	d10c      	bne.n	801007a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010062:	2b00      	cmp	r3, #0
 8010064:	d109      	bne.n	801007a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010066:	4b79      	ldr	r3, [pc, #484]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	08db      	lsrs	r3, r3, #3
 801006c:	f003 0303 	and.w	r3, r3, #3
 8010070:	4a77      	ldr	r2, [pc, #476]	@ (8010250 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010072:	fa22 f303 	lsr.w	r3, r2, r3
 8010076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010078:	e01e      	b.n	80100b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801007a:	4b74      	ldr	r3, [pc, #464]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010086:	d106      	bne.n	8010096 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801008a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801008e:	d102      	bne.n	8010096 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010090:	4b70      	ldr	r3, [pc, #448]	@ (8010254 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010094:	e010      	b.n	80100b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010096:	4b6d      	ldr	r3, [pc, #436]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801009e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80100a2:	d106      	bne.n	80100b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80100a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80100aa:	d102      	bne.n	80100b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80100ac:	4b6a      	ldr	r3, [pc, #424]	@ (8010258 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80100ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100b0:	e002      	b.n	80100b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80100b2:	2300      	movs	r3, #0
 80100b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80100b6:	e122      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80100b8:	e121      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80100ba:	2300      	movs	r3, #0
 80100bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100be:	e11e      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80100c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100c4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80100c8:	430b      	orrs	r3, r1
 80100ca:	d133      	bne.n	8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80100cc:	4b5f      	ldr	r3, [pc, #380]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80100ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80100d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80100d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80100d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d004      	beq.n	80100e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80100dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100e2:	d012      	beq.n	801010a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80100e4:	e023      	b.n	801012e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80100e6:	4b59      	ldr	r3, [pc, #356]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80100ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80100f2:	d107      	bne.n	8010104 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80100f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100f8:	4618      	mov	r0, r3
 80100fa:	f000 fbc7 	bl	801088c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80100fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010102:	e0fc      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010104:	2300      	movs	r3, #0
 8010106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010108:	e0f9      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801010a:	4b50      	ldr	r3, [pc, #320]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010112:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010116:	d107      	bne.n	8010128 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010118:	f107 0318 	add.w	r3, r7, #24
 801011c:	4618      	mov	r0, r3
 801011e:	f000 f90d 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010122:	6a3b      	ldr	r3, [r7, #32]
 8010124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010126:	e0ea      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010128:	2300      	movs	r3, #0
 801012a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801012c:	e0e7      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801012e:	2300      	movs	r3, #0
 8010130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010132:	e0e4      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010138:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801013c:	430b      	orrs	r3, r1
 801013e:	f040 808d 	bne.w	801025c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010142:	4b42      	ldr	r3, [pc, #264]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010146:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801014a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801014c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010152:	d06b      	beq.n	801022c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801015a:	d874      	bhi.n	8010246 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801015c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801015e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010162:	d056      	beq.n	8010212 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801016a:	d86c      	bhi.n	8010246 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801016c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801016e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010172:	d03b      	beq.n	80101ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801017a:	d864      	bhi.n	8010246 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801017c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801017e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010182:	d021      	beq.n	80101c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801018a:	d85c      	bhi.n	8010246 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801018c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801018e:	2b00      	cmp	r3, #0
 8010190:	d004      	beq.n	801019c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010198:	d004      	beq.n	80101a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801019a:	e054      	b.n	8010246 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801019c:	f000 f8b8 	bl	8010310 <HAL_RCCEx_GetD3PCLK1Freq>
 80101a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80101a2:	e0ac      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80101a4:	4b29      	ldr	r3, [pc, #164]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80101ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80101b0:	d107      	bne.n	80101c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101b2:	f107 0318 	add.w	r3, r7, #24
 80101b6:	4618      	mov	r0, r3
 80101b8:	f000 f8c0 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101c0:	e09d      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101c6:	e09a      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80101c8:	4b20      	ldr	r3, [pc, #128]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80101d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80101d4:	d107      	bne.n	80101e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101d6:	f107 030c 	add.w	r3, r7, #12
 80101da:	4618      	mov	r0, r3
 80101dc:	f000 fa02 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101e4:	e08b      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101e6:	2300      	movs	r3, #0
 80101e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101ea:	e088      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80101ec:	4b17      	ldr	r3, [pc, #92]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f003 0304 	and.w	r3, r3, #4
 80101f4:	2b04      	cmp	r3, #4
 80101f6:	d109      	bne.n	801020c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80101f8:	4b14      	ldr	r3, [pc, #80]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	08db      	lsrs	r3, r3, #3
 80101fe:	f003 0303 	and.w	r3, r3, #3
 8010202:	4a13      	ldr	r2, [pc, #76]	@ (8010250 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010204:	fa22 f303 	lsr.w	r3, r2, r3
 8010208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801020a:	e078      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801020c:	2300      	movs	r3, #0
 801020e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010210:	e075      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010212:	4b0e      	ldr	r3, [pc, #56]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801021a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801021e:	d102      	bne.n	8010226 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010220:	4b0c      	ldr	r3, [pc, #48]	@ (8010254 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010224:	e06b      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010226:	2300      	movs	r3, #0
 8010228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801022a:	e068      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801022c:	4b07      	ldr	r3, [pc, #28]	@ (801024c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010238:	d102      	bne.n	8010240 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801023a:	4b07      	ldr	r3, [pc, #28]	@ (8010258 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801023c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801023e:	e05e      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010240:	2300      	movs	r3, #0
 8010242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010244:	e05b      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010246:	2300      	movs	r3, #0
 8010248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801024a:	e058      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801024c:	58024400 	.word	0x58024400
 8010250:	03d09000 	.word	0x03d09000
 8010254:	003d0900 	.word	0x003d0900
 8010258:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801025c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010260:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8010264:	430b      	orrs	r3, r1
 8010266:	d148      	bne.n	80102fa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010268:	4b27      	ldr	r3, [pc, #156]	@ (8010308 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801026a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801026c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010270:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010278:	d02a      	beq.n	80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801027a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010280:	d838      	bhi.n	80102f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010284:	2b00      	cmp	r3, #0
 8010286:	d004      	beq.n	8010292 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801028a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801028e:	d00d      	beq.n	80102ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010290:	e030      	b.n	80102f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010292:	4b1d      	ldr	r3, [pc, #116]	@ (8010308 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801029a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801029e:	d102      	bne.n	80102a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80102a0:	4b1a      	ldr	r3, [pc, #104]	@ (801030c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80102a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102a4:	e02b      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102a6:	2300      	movs	r3, #0
 80102a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102aa:	e028      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80102ac:	4b16      	ldr	r3, [pc, #88]	@ (8010308 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80102b8:	d107      	bne.n	80102ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80102be:	4618      	mov	r0, r3
 80102c0:	f000 fae4 	bl	801088c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80102c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102c8:	e019      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102ca:	2300      	movs	r3, #0
 80102cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102ce:	e016      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80102d0:	4b0d      	ldr	r3, [pc, #52]	@ (8010308 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80102d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80102dc:	d107      	bne.n	80102ee <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102de:	f107 0318 	add.w	r3, r7, #24
 80102e2:	4618      	mov	r0, r3
 80102e4:	f000 f82a 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102ec:	e007      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102ee:	2300      	movs	r3, #0
 80102f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102f2:	e004      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80102f4:	2300      	movs	r3, #0
 80102f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102f8:	e001      	b.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80102fa:	2300      	movs	r3, #0
 80102fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80102fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010300:	4618      	mov	r0, r3
 8010302:	3740      	adds	r7, #64	@ 0x40
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	58024400 	.word	0x58024400
 801030c:	017d7840 	.word	0x017d7840

08010310 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010314:	f7fe f816 	bl	800e344 <HAL_RCC_GetHCLKFreq>
 8010318:	4602      	mov	r2, r0
 801031a:	4b06      	ldr	r3, [pc, #24]	@ (8010334 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801031c:	6a1b      	ldr	r3, [r3, #32]
 801031e:	091b      	lsrs	r3, r3, #4
 8010320:	f003 0307 	and.w	r3, r3, #7
 8010324:	4904      	ldr	r1, [pc, #16]	@ (8010338 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010326:	5ccb      	ldrb	r3, [r1, r3]
 8010328:	f003 031f 	and.w	r3, r3, #31
 801032c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010330:	4618      	mov	r0, r3
 8010332:	bd80      	pop	{r7, pc}
 8010334:	58024400 	.word	0x58024400
 8010338:	080188bc 	.word	0x080188bc

0801033c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801033c:	b480      	push	{r7}
 801033e:	b089      	sub	sp, #36	@ 0x24
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010344:	4ba1      	ldr	r3, [pc, #644]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010348:	f003 0303 	and.w	r3, r3, #3
 801034c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801034e:	4b9f      	ldr	r3, [pc, #636]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010352:	0b1b      	lsrs	r3, r3, #12
 8010354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010358:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801035a:	4b9c      	ldr	r3, [pc, #624]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801035c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801035e:	091b      	lsrs	r3, r3, #4
 8010360:	f003 0301 	and.w	r3, r3, #1
 8010364:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010366:	4b99      	ldr	r3, [pc, #612]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801036a:	08db      	lsrs	r3, r3, #3
 801036c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010370:	693a      	ldr	r2, [r7, #16]
 8010372:	fb02 f303 	mul.w	r3, r2, r3
 8010376:	ee07 3a90 	vmov	s15, r3
 801037a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801037e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	2b00      	cmp	r3, #0
 8010386:	f000 8111 	beq.w	80105ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	2b02      	cmp	r3, #2
 801038e:	f000 8083 	beq.w	8010498 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	2b02      	cmp	r3, #2
 8010396:	f200 80a1 	bhi.w	80104dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801039a:	69bb      	ldr	r3, [r7, #24]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d003      	beq.n	80103a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d056      	beq.n	8010454 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80103a6:	e099      	b.n	80104dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103a8:	4b88      	ldr	r3, [pc, #544]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f003 0320 	and.w	r3, r3, #32
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d02d      	beq.n	8010410 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103b4:	4b85      	ldr	r3, [pc, #532]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	08db      	lsrs	r3, r3, #3
 80103ba:	f003 0303 	and.w	r3, r3, #3
 80103be:	4a84      	ldr	r2, [pc, #528]	@ (80105d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80103c0:	fa22 f303 	lsr.w	r3, r2, r3
 80103c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	ee07 3a90 	vmov	s15, r3
 80103cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	ee07 3a90 	vmov	s15, r3
 80103d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103de:	4b7b      	ldr	r3, [pc, #492]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80103e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103e6:	ee07 3a90 	vmov	s15, r3
 80103ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80103f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80105d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80103f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80103fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80103fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010406:	ee67 7a27 	vmul.f32	s15, s14, s15
 801040a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801040e:	e087      	b.n	8010520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	ee07 3a90 	vmov	s15, r3
 8010416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801041a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80105d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801041e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010422:	4b6a      	ldr	r3, [pc, #424]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801042a:	ee07 3a90 	vmov	s15, r3
 801042e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010432:	ed97 6a03 	vldr	s12, [r7, #12]
 8010436:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80105d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801043a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801043e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801044a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801044e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010452:	e065      	b.n	8010520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	ee07 3a90 	vmov	s15, r3
 801045a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801045e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80105dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010466:	4b59      	ldr	r3, [pc, #356]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801046a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801046e:	ee07 3a90 	vmov	s15, r3
 8010472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010476:	ed97 6a03 	vldr	s12, [r7, #12]
 801047a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80105d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801047e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801048a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801048e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010496:	e043      	b.n	8010520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	ee07 3a90 	vmov	s15, r3
 801049e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80105e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80104a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104aa:	4b48      	ldr	r3, [pc, #288]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80104ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104b2:	ee07 3a90 	vmov	s15, r3
 80104b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80104be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80105d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80104c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80104ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104da:	e021      	b.n	8010520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	ee07 3a90 	vmov	s15, r3
 80104e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80105dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80104ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104ee:	4b37      	ldr	r3, [pc, #220]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80104f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104f6:	ee07 3a90 	vmov	s15, r3
 80104fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8010502:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80105d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801050a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801050e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010516:	ee67 7a27 	vmul.f32	s15, s14, s15
 801051a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801051e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010520:	4b2a      	ldr	r3, [pc, #168]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010524:	0a5b      	lsrs	r3, r3, #9
 8010526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801052a:	ee07 3a90 	vmov	s15, r3
 801052e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010536:	ee37 7a87 	vadd.f32	s14, s15, s14
 801053a:	edd7 6a07 	vldr	s13, [r7, #28]
 801053e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010546:	ee17 2a90 	vmov	r2, s15
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801054e:	4b1f      	ldr	r3, [pc, #124]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010552:	0c1b      	lsrs	r3, r3, #16
 8010554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010558:	ee07 3a90 	vmov	s15, r3
 801055c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010568:	edd7 6a07 	vldr	s13, [r7, #28]
 801056c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010574:	ee17 2a90 	vmov	r2, s15
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801057c:	4b13      	ldr	r3, [pc, #76]	@ (80105cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801057e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010580:	0e1b      	lsrs	r3, r3, #24
 8010582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010586:	ee07 3a90 	vmov	s15, r3
 801058a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801058e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010596:	edd7 6a07 	vldr	s13, [r7, #28]
 801059a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801059e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105a2:	ee17 2a90 	vmov	r2, s15
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80105aa:	e008      	b.n	80105be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2200      	movs	r2, #0
 80105b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	609a      	str	r2, [r3, #8]
}
 80105be:	bf00      	nop
 80105c0:	3724      	adds	r7, #36	@ 0x24
 80105c2:	46bd      	mov	sp, r7
 80105c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c8:	4770      	bx	lr
 80105ca:	bf00      	nop
 80105cc:	58024400 	.word	0x58024400
 80105d0:	03d09000 	.word	0x03d09000
 80105d4:	46000000 	.word	0x46000000
 80105d8:	4c742400 	.word	0x4c742400
 80105dc:	4a742400 	.word	0x4a742400
 80105e0:	4bbebc20 	.word	0x4bbebc20

080105e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b089      	sub	sp, #36	@ 0x24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80105ec:	4ba1      	ldr	r3, [pc, #644]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80105ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105f0:	f003 0303 	and.w	r3, r3, #3
 80105f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80105f6:	4b9f      	ldr	r3, [pc, #636]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80105f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105fa:	0d1b      	lsrs	r3, r3, #20
 80105fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010600:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010602:	4b9c      	ldr	r3, [pc, #624]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010606:	0a1b      	lsrs	r3, r3, #8
 8010608:	f003 0301 	and.w	r3, r3, #1
 801060c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801060e:	4b99      	ldr	r3, [pc, #612]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010612:	08db      	lsrs	r3, r3, #3
 8010614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010618:	693a      	ldr	r2, [r7, #16]
 801061a:	fb02 f303 	mul.w	r3, r2, r3
 801061e:	ee07 3a90 	vmov	s15, r3
 8010622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010626:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	2b00      	cmp	r3, #0
 801062e:	f000 8111 	beq.w	8010854 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	2b02      	cmp	r3, #2
 8010636:	f000 8083 	beq.w	8010740 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	2b02      	cmp	r3, #2
 801063e:	f200 80a1 	bhi.w	8010784 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d003      	beq.n	8010650 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	2b01      	cmp	r3, #1
 801064c:	d056      	beq.n	80106fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801064e:	e099      	b.n	8010784 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010650:	4b88      	ldr	r3, [pc, #544]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f003 0320 	and.w	r3, r3, #32
 8010658:	2b00      	cmp	r3, #0
 801065a:	d02d      	beq.n	80106b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801065c:	4b85      	ldr	r3, [pc, #532]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	08db      	lsrs	r3, r3, #3
 8010662:	f003 0303 	and.w	r3, r3, #3
 8010666:	4a84      	ldr	r2, [pc, #528]	@ (8010878 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010668:	fa22 f303 	lsr.w	r3, r2, r3
 801066c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	ee07 3a90 	vmov	s15, r3
 8010674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	ee07 3a90 	vmov	s15, r3
 801067e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010686:	4b7b      	ldr	r3, [pc, #492]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801068a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801068e:	ee07 3a90 	vmov	s15, r3
 8010692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010696:	ed97 6a03 	vldr	s12, [r7, #12]
 801069a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801087c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801069e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80106a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80106a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80106aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80106ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80106b6:	e087      	b.n	80107c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	ee07 3a90 	vmov	s15, r3
 80106be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80106c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010880 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80106c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80106ca:	4b6a      	ldr	r3, [pc, #424]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80106cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106d2:	ee07 3a90 	vmov	s15, r3
 80106d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80106da:	ed97 6a03 	vldr	s12, [r7, #12]
 80106de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801087c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80106e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80106e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80106ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80106ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80106f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80106fa:	e065      	b.n	80107c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	ee07 3a90 	vmov	s15, r3
 8010702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010706:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801070a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801070e:	4b59      	ldr	r3, [pc, #356]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010716:	ee07 3a90 	vmov	s15, r3
 801071a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801071e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010722:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801087c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801072a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801072e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010736:	ee67 7a27 	vmul.f32	s15, s14, s15
 801073a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801073e:	e043      	b.n	80107c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	ee07 3a90 	vmov	s15, r3
 8010746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801074a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801074e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010752:	4b48      	ldr	r3, [pc, #288]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801075a:	ee07 3a90 	vmov	s15, r3
 801075e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010762:	ed97 6a03 	vldr	s12, [r7, #12]
 8010766:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801087c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801076a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801076e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801077a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801077e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010782:	e021      	b.n	80107c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	ee07 3a90 	vmov	s15, r3
 801078a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801078e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010796:	4b37      	ldr	r3, [pc, #220]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801079a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801079e:	ee07 3a90 	vmov	s15, r3
 80107a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80107a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80107aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801087c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80107ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80107b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80107b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80107ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80107be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80107c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80107c8:	4b2a      	ldr	r3, [pc, #168]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80107ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107cc:	0a5b      	lsrs	r3, r3, #9
 80107ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80107d2:	ee07 3a90 	vmov	s15, r3
 80107d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80107de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80107e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80107e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80107ee:	ee17 2a90 	vmov	r2, s15
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80107f6:	4b1f      	ldr	r3, [pc, #124]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80107f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107fa:	0c1b      	lsrs	r3, r3, #16
 80107fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010800:	ee07 3a90 	vmov	s15, r3
 8010804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010808:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801080c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010810:	edd7 6a07 	vldr	s13, [r7, #28]
 8010814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801081c:	ee17 2a90 	vmov	r2, s15
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010824:	4b13      	ldr	r3, [pc, #76]	@ (8010874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010828:	0e1b      	lsrs	r3, r3, #24
 801082a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801082e:	ee07 3a90 	vmov	s15, r3
 8010832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010836:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801083a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801083e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801084a:	ee17 2a90 	vmov	r2, s15
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010852:	e008      	b.n	8010866 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2200      	movs	r2, #0
 8010858:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2200      	movs	r2, #0
 801085e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	609a      	str	r2, [r3, #8]
}
 8010866:	bf00      	nop
 8010868:	3724      	adds	r7, #36	@ 0x24
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	58024400 	.word	0x58024400
 8010878:	03d09000 	.word	0x03d09000
 801087c:	46000000 	.word	0x46000000
 8010880:	4c742400 	.word	0x4c742400
 8010884:	4a742400 	.word	0x4a742400
 8010888:	4bbebc20 	.word	0x4bbebc20

0801088c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801088c:	b480      	push	{r7}
 801088e:	b089      	sub	sp, #36	@ 0x24
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010894:	4ba0      	ldr	r3, [pc, #640]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010898:	f003 0303 	and.w	r3, r3, #3
 801089c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801089e:	4b9e      	ldr	r3, [pc, #632]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108a2:	091b      	lsrs	r3, r3, #4
 80108a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80108a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80108aa:	4b9b      	ldr	r3, [pc, #620]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108ae:	f003 0301 	and.w	r3, r3, #1
 80108b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80108b4:	4b98      	ldr	r3, [pc, #608]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108b8:	08db      	lsrs	r3, r3, #3
 80108ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80108be:	693a      	ldr	r2, [r7, #16]
 80108c0:	fb02 f303 	mul.w	r3, r2, r3
 80108c4:	ee07 3a90 	vmov	s15, r3
 80108c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	f000 8111 	beq.w	8010afa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80108d8:	69bb      	ldr	r3, [r7, #24]
 80108da:	2b02      	cmp	r3, #2
 80108dc:	f000 8083 	beq.w	80109e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80108e0:	69bb      	ldr	r3, [r7, #24]
 80108e2:	2b02      	cmp	r3, #2
 80108e4:	f200 80a1 	bhi.w	8010a2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d003      	beq.n	80108f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	2b01      	cmp	r3, #1
 80108f2:	d056      	beq.n	80109a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80108f4:	e099      	b.n	8010a2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108f6:	4b88      	ldr	r3, [pc, #544]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f003 0320 	and.w	r3, r3, #32
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d02d      	beq.n	801095e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010902:	4b85      	ldr	r3, [pc, #532]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	08db      	lsrs	r3, r3, #3
 8010908:	f003 0303 	and.w	r3, r3, #3
 801090c:	4a83      	ldr	r2, [pc, #524]	@ (8010b1c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801090e:	fa22 f303 	lsr.w	r3, r2, r3
 8010912:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	ee07 3a90 	vmov	s15, r3
 801091a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	ee07 3a90 	vmov	s15, r3
 8010924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801092c:	4b7a      	ldr	r3, [pc, #488]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801092e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010934:	ee07 3a90 	vmov	s15, r3
 8010938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801093c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010940:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010b20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801094c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010958:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801095c:	e087      	b.n	8010a6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	ee07 3a90 	vmov	s15, r3
 8010964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010968:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010b24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801096c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010970:	4b69      	ldr	r3, [pc, #420]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010978:	ee07 3a90 	vmov	s15, r3
 801097c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010980:	ed97 6a03 	vldr	s12, [r7, #12]
 8010984:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010b20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801098c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010990:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010998:	ee67 7a27 	vmul.f32	s15, s14, s15
 801099c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109a0:	e065      	b.n	8010a6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	ee07 3a90 	vmov	s15, r3
 80109a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109ac:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8010b28 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80109b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109b4:	4b58      	ldr	r3, [pc, #352]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80109b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109bc:	ee07 3a90 	vmov	s15, r3
 80109c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80109c8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010b20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80109cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80109d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109e4:	e043      	b.n	8010a6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	ee07 3a90 	vmov	s15, r3
 80109ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109f0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8010b2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80109f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109f8:	4b47      	ldr	r3, [pc, #284]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80109fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a00:	ee07 3a90 	vmov	s15, r3
 8010a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a08:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a0c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010b20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a28:	e021      	b.n	8010a6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	ee07 3a90 	vmov	s15, r3
 8010a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a34:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010b24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a3c:	4b36      	ldr	r3, [pc, #216]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a44:	ee07 3a90 	vmov	s15, r3
 8010a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a50:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010b20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a6c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a72:	0a5b      	lsrs	r3, r3, #9
 8010a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a78:	ee07 3a90 	vmov	s15, r3
 8010a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a94:	ee17 2a90 	vmov	r2, s15
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aa0:	0c1b      	lsrs	r3, r3, #16
 8010aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010aa6:	ee07 3a90 	vmov	s15, r3
 8010aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010aae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8010aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ac2:	ee17 2a90 	vmov	r2, s15
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010aca:	4b13      	ldr	r3, [pc, #76]	@ (8010b18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ace:	0e1b      	lsrs	r3, r3, #24
 8010ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ad4:	ee07 3a90 	vmov	s15, r3
 8010ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010adc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010af0:	ee17 2a90 	vmov	r2, s15
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010af8:	e008      	b.n	8010b0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2200      	movs	r2, #0
 8010b04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	609a      	str	r2, [r3, #8]
}
 8010b0c:	bf00      	nop
 8010b0e:	3724      	adds	r7, #36	@ 0x24
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr
 8010b18:	58024400 	.word	0x58024400
 8010b1c:	03d09000 	.word	0x03d09000
 8010b20:	46000000 	.word	0x46000000
 8010b24:	4c742400 	.word	0x4c742400
 8010b28:	4a742400 	.word	0x4a742400
 8010b2c:	4bbebc20 	.word	0x4bbebc20

08010b30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b084      	sub	sp, #16
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010b3e:	4b53      	ldr	r3, [pc, #332]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b42:	f003 0303 	and.w	r3, r3, #3
 8010b46:	2b03      	cmp	r3, #3
 8010b48:	d101      	bne.n	8010b4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	e099      	b.n	8010c82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4a4e      	ldr	r2, [pc, #312]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010b54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010b5a:	f7f1 fdff 	bl	800275c <HAL_GetTick>
 8010b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010b60:	e008      	b.n	8010b74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010b62:	f7f1 fdfb 	bl	800275c <HAL_GetTick>
 8010b66:	4602      	mov	r2, r0
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	1ad3      	subs	r3, r2, r3
 8010b6c:	2b02      	cmp	r3, #2
 8010b6e:	d901      	bls.n	8010b74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010b70:	2303      	movs	r3, #3
 8010b72:	e086      	b.n	8010c82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010b74:	4b45      	ldr	r3, [pc, #276]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d1f0      	bne.n	8010b62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010b80:	4b42      	ldr	r3, [pc, #264]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	031b      	lsls	r3, r3, #12
 8010b8e:	493f      	ldr	r1, [pc, #252]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010b90:	4313      	orrs	r3, r2
 8010b92:	628b      	str	r3, [r1, #40]	@ 0x28
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	3b01      	subs	r3, #1
 8010b9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	689b      	ldr	r3, [r3, #8]
 8010ba2:	3b01      	subs	r3, #1
 8010ba4:	025b      	lsls	r3, r3, #9
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	431a      	orrs	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	041b      	lsls	r3, r3, #16
 8010bb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010bb6:	431a      	orrs	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	691b      	ldr	r3, [r3, #16]
 8010bbc:	3b01      	subs	r3, #1
 8010bbe:	061b      	lsls	r3, r3, #24
 8010bc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010bc4:	4931      	ldr	r1, [pc, #196]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010bca:	4b30      	ldr	r3, [pc, #192]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	695b      	ldr	r3, [r3, #20]
 8010bd6:	492d      	ldr	r1, [pc, #180]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010be0:	f023 0220 	bic.w	r2, r3, #32
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	699b      	ldr	r3, [r3, #24]
 8010be8:	4928      	ldr	r1, [pc, #160]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010bea:	4313      	orrs	r3, r2
 8010bec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010bee:	4b27      	ldr	r3, [pc, #156]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bf2:	4a26      	ldr	r2, [pc, #152]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010bf4:	f023 0310 	bic.w	r3, r3, #16
 8010bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010bfa:	4b24      	ldr	r3, [pc, #144]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010bfe:	4b24      	ldr	r3, [pc, #144]	@ (8010c90 <RCCEx_PLL2_Config+0x160>)
 8010c00:	4013      	ands	r3, r2
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	69d2      	ldr	r2, [r2, #28]
 8010c06:	00d2      	lsls	r2, r2, #3
 8010c08:	4920      	ldr	r1, [pc, #128]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c12:	4a1e      	ldr	r2, [pc, #120]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c14:	f043 0310 	orr.w	r3, r3, #16
 8010c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d106      	bne.n	8010c2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010c20:	4b1a      	ldr	r3, [pc, #104]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c24:	4a19      	ldr	r2, [pc, #100]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010c2c:	e00f      	b.n	8010c4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d106      	bne.n	8010c42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010c34:	4b15      	ldr	r3, [pc, #84]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c38:	4a14      	ldr	r2, [pc, #80]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010c40:	e005      	b.n	8010c4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010c42:	4b12      	ldr	r3, [pc, #72]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c46:	4a11      	ldr	r2, [pc, #68]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	4a0e      	ldr	r2, [pc, #56]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c5a:	f7f1 fd7f 	bl	800275c <HAL_GetTick>
 8010c5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010c60:	e008      	b.n	8010c74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010c62:	f7f1 fd7b 	bl	800275c <HAL_GetTick>
 8010c66:	4602      	mov	r2, r0
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	1ad3      	subs	r3, r2, r3
 8010c6c:	2b02      	cmp	r3, #2
 8010c6e:	d901      	bls.n	8010c74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010c70:	2303      	movs	r3, #3
 8010c72:	e006      	b.n	8010c82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010c74:	4b05      	ldr	r3, [pc, #20]	@ (8010c8c <RCCEx_PLL2_Config+0x15c>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d0f0      	beq.n	8010c62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	58024400 	.word	0x58024400
 8010c90:	ffff0007 	.word	0xffff0007

08010c94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010ca2:	4b53      	ldr	r3, [pc, #332]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ca6:	f003 0303 	and.w	r3, r3, #3
 8010caa:	2b03      	cmp	r3, #3
 8010cac:	d101      	bne.n	8010cb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8010cae:	2301      	movs	r3, #1
 8010cb0:	e099      	b.n	8010de6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4a4e      	ldr	r2, [pc, #312]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010cbe:	f7f1 fd4d 	bl	800275c <HAL_GetTick>
 8010cc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010cc4:	e008      	b.n	8010cd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010cc6:	f7f1 fd49 	bl	800275c <HAL_GetTick>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	1ad3      	subs	r3, r2, r3
 8010cd0:	2b02      	cmp	r3, #2
 8010cd2:	d901      	bls.n	8010cd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010cd4:	2303      	movs	r3, #3
 8010cd6:	e086      	b.n	8010de6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010cd8:	4b45      	ldr	r3, [pc, #276]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d1f0      	bne.n	8010cc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010ce4:	4b42      	ldr	r3, [pc, #264]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ce8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	051b      	lsls	r3, r3, #20
 8010cf2:	493f      	ldr	r1, [pc, #252]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	628b      	str	r3, [r1, #40]	@ 0x28
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	3b01      	subs	r3, #1
 8010cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	3b01      	subs	r3, #1
 8010d08:	025b      	lsls	r3, r3, #9
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	431a      	orrs	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	3b01      	subs	r3, #1
 8010d14:	041b      	lsls	r3, r3, #16
 8010d16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010d1a:	431a      	orrs	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	691b      	ldr	r3, [r3, #16]
 8010d20:	3b01      	subs	r3, #1
 8010d22:	061b      	lsls	r3, r3, #24
 8010d24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010d28:	4931      	ldr	r1, [pc, #196]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d2a:	4313      	orrs	r3, r2
 8010d2c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010d2e:	4b30      	ldr	r3, [pc, #192]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	695b      	ldr	r3, [r3, #20]
 8010d3a:	492d      	ldr	r1, [pc, #180]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d3c:	4313      	orrs	r3, r2
 8010d3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010d40:	4b2b      	ldr	r3, [pc, #172]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d44:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	699b      	ldr	r3, [r3, #24]
 8010d4c:	4928      	ldr	r1, [pc, #160]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d4e:	4313      	orrs	r3, r2
 8010d50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010d52:	4b27      	ldr	r3, [pc, #156]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d56:	4a26      	ldr	r2, [pc, #152]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010d5e:	4b24      	ldr	r3, [pc, #144]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d62:	4b24      	ldr	r3, [pc, #144]	@ (8010df4 <RCCEx_PLL3_Config+0x160>)
 8010d64:	4013      	ands	r3, r2
 8010d66:	687a      	ldr	r2, [r7, #4]
 8010d68:	69d2      	ldr	r2, [r2, #28]
 8010d6a:	00d2      	lsls	r2, r2, #3
 8010d6c:	4920      	ldr	r1, [pc, #128]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010d72:	4b1f      	ldr	r3, [pc, #124]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d76:	4a1e      	ldr	r2, [pc, #120]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d106      	bne.n	8010d92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010d84:	4b1a      	ldr	r3, [pc, #104]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d88:	4a19      	ldr	r2, [pc, #100]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010d90:	e00f      	b.n	8010db2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	d106      	bne.n	8010da6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010d98:	4b15      	ldr	r3, [pc, #84]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d9c:	4a14      	ldr	r2, [pc, #80]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010d9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010da2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010da4:	e005      	b.n	8010db2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010da6:	4b12      	ldr	r3, [pc, #72]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010daa:	4a11      	ldr	r2, [pc, #68]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010dac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010db0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010db2:	4b0f      	ldr	r3, [pc, #60]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4a0e      	ldr	r2, [pc, #56]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010dbe:	f7f1 fccd 	bl	800275c <HAL_GetTick>
 8010dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010dc4:	e008      	b.n	8010dd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010dc6:	f7f1 fcc9 	bl	800275c <HAL_GetTick>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	2b02      	cmp	r3, #2
 8010dd2:	d901      	bls.n	8010dd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010dd4:	2303      	movs	r3, #3
 8010dd6:	e006      	b.n	8010de6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010dd8:	4b05      	ldr	r3, [pc, #20]	@ (8010df0 <RCCEx_PLL3_Config+0x15c>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d0f0      	beq.n	8010dc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	58024400 	.word	0x58024400
 8010df4:	ffff0007 	.word	0xffff0007

08010df8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d101      	bne.n	8010e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010e06:	2301      	movs	r3, #1
 8010e08:	e10f      	b.n	801102a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4a87      	ldr	r2, [pc, #540]	@ (8011034 <HAL_SPI_Init+0x23c>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d00f      	beq.n	8010e3a <HAL_SPI_Init+0x42>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	4a86      	ldr	r2, [pc, #536]	@ (8011038 <HAL_SPI_Init+0x240>)
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d00a      	beq.n	8010e3a <HAL_SPI_Init+0x42>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	4a84      	ldr	r2, [pc, #528]	@ (801103c <HAL_SPI_Init+0x244>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d005      	beq.n	8010e3a <HAL_SPI_Init+0x42>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	2b0f      	cmp	r3, #15
 8010e34:	d901      	bls.n	8010e3a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010e36:	2301      	movs	r3, #1
 8010e38:	e0f7      	b.n	801102a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f000 ff6c 	bl	8011d18 <SPI_GetPacketSize>
 8010e40:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4a7b      	ldr	r2, [pc, #492]	@ (8011034 <HAL_SPI_Init+0x23c>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d00c      	beq.n	8010e66 <HAL_SPI_Init+0x6e>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	4a79      	ldr	r2, [pc, #484]	@ (8011038 <HAL_SPI_Init+0x240>)
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d007      	beq.n	8010e66 <HAL_SPI_Init+0x6e>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a78      	ldr	r2, [pc, #480]	@ (801103c <HAL_SPI_Init+0x244>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d002      	beq.n	8010e66 <HAL_SPI_Init+0x6e>
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	2b08      	cmp	r3, #8
 8010e64:	d811      	bhi.n	8010e8a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010e6a:	4a72      	ldr	r2, [pc, #456]	@ (8011034 <HAL_SPI_Init+0x23c>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d009      	beq.n	8010e84 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4a70      	ldr	r2, [pc, #448]	@ (8011038 <HAL_SPI_Init+0x240>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d004      	beq.n	8010e84 <HAL_SPI_Init+0x8c>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	4a6f      	ldr	r2, [pc, #444]	@ (801103c <HAL_SPI_Init+0x244>)
 8010e80:	4293      	cmp	r3, r2
 8010e82:	d104      	bne.n	8010e8e <HAL_SPI_Init+0x96>
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2b10      	cmp	r3, #16
 8010e88:	d901      	bls.n	8010e8e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	e0cd      	b.n	801102a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d106      	bne.n	8010ea8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f7f0 fe78 	bl	8001b98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2202      	movs	r2, #2
 8010eac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f022 0201 	bic.w	r2, r2, #1
 8010ebe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	689b      	ldr	r3, [r3, #8]
 8010ec6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8010eca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	699b      	ldr	r3, [r3, #24]
 8010ed0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010ed4:	d119      	bne.n	8010f0a <HAL_SPI_Init+0x112>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010ede:	d103      	bne.n	8010ee8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d008      	beq.n	8010efa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d10c      	bne.n	8010f0a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ef8:	d107      	bne.n	8010f0a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010f08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d00f      	beq.n	8010f36 <HAL_SPI_Init+0x13e>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	68db      	ldr	r3, [r3, #12]
 8010f1a:	2b06      	cmp	r3, #6
 8010f1c:	d90b      	bls.n	8010f36 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	430a      	orrs	r2, r1
 8010f32:	601a      	str	r2, [r3, #0]
 8010f34:	e007      	b.n	8010f46 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010f44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	69da      	ldr	r2, [r3, #28]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f4e:	431a      	orrs	r2, r3
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	431a      	orrs	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f58:	ea42 0103 	orr.w	r1, r2, r3
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	68da      	ldr	r2, [r3, #12]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	430a      	orrs	r2, r1
 8010f66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f70:	431a      	orrs	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f76:	431a      	orrs	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	699b      	ldr	r3, [r3, #24]
 8010f7c:	431a      	orrs	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	691b      	ldr	r3, [r3, #16]
 8010f82:	431a      	orrs	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	695b      	ldr	r3, [r3, #20]
 8010f88:	431a      	orrs	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6a1b      	ldr	r3, [r3, #32]
 8010f8e:	431a      	orrs	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	431a      	orrs	r2, r3
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010f9a:	431a      	orrs	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	689b      	ldr	r3, [r3, #8]
 8010fa0:	431a      	orrs	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010fa6:	ea42 0103 	orr.w	r1, r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	430a      	orrs	r2, r1
 8010fb4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d113      	bne.n	8010fe6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	689b      	ldr	r3, [r3, #8]
 8010fc4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010fd0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010fe4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f022 0201 	bic.w	r2, r2, #1
 8010ff4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d00a      	beq.n	8011018 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	430a      	orrs	r2, r1
 8011016:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2200      	movs	r2, #0
 801101c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2201      	movs	r2, #1
 8011024:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	4618      	mov	r0, r3
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	40013000 	.word	0x40013000
 8011038:	40003800 	.word	0x40003800
 801103c:	40003c00 	.word	0x40003c00

08011040 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b088      	sub	sp, #32
 8011044:	af02      	add	r7, sp, #8
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	603b      	str	r3, [r7, #0]
 801104c:	4613      	mov	r3, r2
 801104e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	3320      	adds	r3, #32
 8011056:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011058:	f7f1 fb80 	bl	800275c <HAL_GetTick>
 801105c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011064:	b2db      	uxtb	r3, r3
 8011066:	2b01      	cmp	r3, #1
 8011068:	d001      	beq.n	801106e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 801106a:	2302      	movs	r3, #2
 801106c:	e1d1      	b.n	8011412 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d002      	beq.n	801107a <HAL_SPI_Transmit+0x3a>
 8011074:	88fb      	ldrh	r3, [r7, #6]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d101      	bne.n	801107e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 801107a:	2301      	movs	r3, #1
 801107c:	e1c9      	b.n	8011412 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011084:	2b01      	cmp	r3, #1
 8011086:	d101      	bne.n	801108c <HAL_SPI_Transmit+0x4c>
 8011088:	2302      	movs	r3, #2
 801108a:	e1c2      	b.n	8011412 <HAL_SPI_Transmit+0x3d2>
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	2201      	movs	r2, #1
 8011090:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2203      	movs	r2, #3
 8011098:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2200      	movs	r2, #0
 80110a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	68ba      	ldr	r2, [r7, #8]
 80110a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	88fa      	ldrh	r2, [r7, #6]
 80110ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	88fa      	ldrh	r2, [r7, #6]
 80110b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2200      	movs	r2, #0
 80110be:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2200      	movs	r2, #0
 80110c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2200      	movs	r2, #0
 80110cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2200      	movs	r2, #0
 80110d4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2200      	movs	r2, #0
 80110da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	689b      	ldr	r3, [r3, #8]
 80110e0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80110e4:	d108      	bne.n	80110f8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	681a      	ldr	r2, [r3, #0]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80110f4:	601a      	str	r2, [r3, #0]
 80110f6:	e009      	b.n	801110c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	68db      	ldr	r3, [r3, #12]
 80110fe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801110a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	685a      	ldr	r2, [r3, #4]
 8011112:	4b96      	ldr	r3, [pc, #600]	@ (801136c <HAL_SPI_Transmit+0x32c>)
 8011114:	4013      	ands	r3, r2
 8011116:	88f9      	ldrh	r1, [r7, #6]
 8011118:	68fa      	ldr	r2, [r7, #12]
 801111a:	6812      	ldr	r2, [r2, #0]
 801111c:	430b      	orrs	r3, r1
 801111e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f042 0201 	orr.w	r2, r2, #1
 801112e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011138:	d107      	bne.n	801114a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	2b0f      	cmp	r3, #15
 8011150:	d947      	bls.n	80111e2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011152:	e03f      	b.n	80111d4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	695b      	ldr	r3, [r3, #20]
 801115a:	f003 0302 	and.w	r3, r3, #2
 801115e:	2b02      	cmp	r3, #2
 8011160:	d114      	bne.n	801118c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	6812      	ldr	r2, [r2, #0]
 801116c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011172:	1d1a      	adds	r2, r3, #4
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801117e:	b29b      	uxth	r3, r3
 8011180:	3b01      	subs	r3, #1
 8011182:	b29a      	uxth	r2, r3
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801118a:	e023      	b.n	80111d4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801118c:	f7f1 fae6 	bl	800275c <HAL_GetTick>
 8011190:	4602      	mov	r2, r0
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	1ad3      	subs	r3, r2, r3
 8011196:	683a      	ldr	r2, [r7, #0]
 8011198:	429a      	cmp	r2, r3
 801119a:	d803      	bhi.n	80111a4 <HAL_SPI_Transmit+0x164>
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111a2:	d102      	bne.n	80111aa <HAL_SPI_Transmit+0x16a>
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d114      	bne.n	80111d4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80111aa:	68f8      	ldr	r0, [r7, #12]
 80111ac:	f000 fce6 	bl	8011b7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80111b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	2201      	movs	r2, #1
 80111c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2200      	movs	r2, #0
 80111cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80111d0:	2303      	movs	r3, #3
 80111d2:	e11e      	b.n	8011412 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111da:	b29b      	uxth	r3, r3
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d1b9      	bne.n	8011154 <HAL_SPI_Transmit+0x114>
 80111e0:	e0f1      	b.n	80113c6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	2b07      	cmp	r3, #7
 80111e8:	f240 80e6 	bls.w	80113b8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80111ec:	e05d      	b.n	80112aa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	695b      	ldr	r3, [r3, #20]
 80111f4:	f003 0302 	and.w	r3, r3, #2
 80111f8:	2b02      	cmp	r3, #2
 80111fa:	d132      	bne.n	8011262 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011202:	b29b      	uxth	r3, r3
 8011204:	2b01      	cmp	r3, #1
 8011206:	d918      	bls.n	801123a <HAL_SPI_Transmit+0x1fa>
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801120c:	2b00      	cmp	r3, #0
 801120e:	d014      	beq.n	801123a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	6812      	ldr	r2, [r2, #0]
 801121a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011220:	1d1a      	adds	r2, r3, #4
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801122c:	b29b      	uxth	r3, r3
 801122e:	3b02      	subs	r3, #2
 8011230:	b29a      	uxth	r2, r3
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011238:	e037      	b.n	80112aa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801123e:	881a      	ldrh	r2, [r3, #0]
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011248:	1c9a      	adds	r2, r3, #2
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011254:	b29b      	uxth	r3, r3
 8011256:	3b01      	subs	r3, #1
 8011258:	b29a      	uxth	r2, r3
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011260:	e023      	b.n	80112aa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011262:	f7f1 fa7b 	bl	800275c <HAL_GetTick>
 8011266:	4602      	mov	r2, r0
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	1ad3      	subs	r3, r2, r3
 801126c:	683a      	ldr	r2, [r7, #0]
 801126e:	429a      	cmp	r2, r3
 8011270:	d803      	bhi.n	801127a <HAL_SPI_Transmit+0x23a>
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011278:	d102      	bne.n	8011280 <HAL_SPI_Transmit+0x240>
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d114      	bne.n	80112aa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011280:	68f8      	ldr	r0, [r7, #12]
 8011282:	f000 fc7b 	bl	8011b7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801128c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2201      	movs	r2, #1
 801129a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	2200      	movs	r2, #0
 80112a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80112a6:	2303      	movs	r3, #3
 80112a8:	e0b3      	b.n	8011412 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d19b      	bne.n	80111ee <HAL_SPI_Transmit+0x1ae>
 80112b6:	e086      	b.n	80113c6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	695b      	ldr	r3, [r3, #20]
 80112be:	f003 0302 	and.w	r3, r3, #2
 80112c2:	2b02      	cmp	r3, #2
 80112c4:	d154      	bne.n	8011370 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	2b03      	cmp	r3, #3
 80112d0:	d918      	bls.n	8011304 <HAL_SPI_Transmit+0x2c4>
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112d6:	2b40      	cmp	r3, #64	@ 0x40
 80112d8:	d914      	bls.n	8011304 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	6812      	ldr	r2, [r2, #0]
 80112e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80112ea:	1d1a      	adds	r2, r3, #4
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	3b04      	subs	r3, #4
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011302:	e059      	b.n	80113b8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801130a:	b29b      	uxth	r3, r3
 801130c:	2b01      	cmp	r3, #1
 801130e:	d917      	bls.n	8011340 <HAL_SPI_Transmit+0x300>
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011314:	2b00      	cmp	r3, #0
 8011316:	d013      	beq.n	8011340 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801131c:	881a      	ldrh	r2, [r3, #0]
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011326:	1c9a      	adds	r2, r3, #2
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011332:	b29b      	uxth	r3, r3
 8011334:	3b02      	subs	r3, #2
 8011336:	b29a      	uxth	r2, r3
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801133e:	e03b      	b.n	80113b8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	3320      	adds	r3, #32
 801134a:	7812      	ldrb	r2, [r2, #0]
 801134c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011352:	1c5a      	adds	r2, r3, #1
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801135e:	b29b      	uxth	r3, r3
 8011360:	3b01      	subs	r3, #1
 8011362:	b29a      	uxth	r2, r3
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801136a:	e025      	b.n	80113b8 <HAL_SPI_Transmit+0x378>
 801136c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011370:	f7f1 f9f4 	bl	800275c <HAL_GetTick>
 8011374:	4602      	mov	r2, r0
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	1ad3      	subs	r3, r2, r3
 801137a:	683a      	ldr	r2, [r7, #0]
 801137c:	429a      	cmp	r2, r3
 801137e:	d803      	bhi.n	8011388 <HAL_SPI_Transmit+0x348>
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011386:	d102      	bne.n	801138e <HAL_SPI_Transmit+0x34e>
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d114      	bne.n	80113b8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801138e:	68f8      	ldr	r0, [r7, #12]
 8011390:	f000 fbf4 	bl	8011b7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801139a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2201      	movs	r2, #1
 80113a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80113b4:	2303      	movs	r3, #3
 80113b6:	e02c      	b.n	8011412 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80113be:	b29b      	uxth	r3, r3
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f47f af79 	bne.w	80112b8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	9300      	str	r3, [sp, #0]
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	2200      	movs	r2, #0
 80113ce:	2108      	movs	r1, #8
 80113d0:	68f8      	ldr	r0, [r7, #12]
 80113d2:	f000 fc73 	bl	8011cbc <SPI_WaitOnFlagUntilTimeout>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d007      	beq.n	80113ec <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80113e2:	f043 0220 	orr.w	r2, r3, #32
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80113ec:	68f8      	ldr	r0, [r7, #12]
 80113ee:	f000 fbc5 	bl	8011b7c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2201      	movs	r2, #1
 80113f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	2200      	movs	r2, #0
 80113fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011408:	2b00      	cmp	r3, #0
 801140a:	d001      	beq.n	8011410 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 801140c:	2301      	movs	r3, #1
 801140e:	e000      	b.n	8011412 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8011410:	2300      	movs	r3, #0
  }
}
 8011412:	4618      	mov	r0, r3
 8011414:	3718      	adds	r7, #24
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop

0801141c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	60f8      	str	r0, [r7, #12]
 8011424:	60b9      	str	r1, [r7, #8]
 8011426:	4613      	mov	r3, r2
 8011428:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011430:	b2db      	uxtb	r3, r3
 8011432:	2b01      	cmp	r3, #1
 8011434:	d001      	beq.n	801143a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8011436:	2302      	movs	r3, #2
 8011438:	e126      	b.n	8011688 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d002      	beq.n	8011446 <HAL_SPI_Transmit_DMA+0x2a>
 8011440:	88fb      	ldrh	r3, [r7, #6]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d101      	bne.n	801144a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8011446:	2301      	movs	r3, #1
 8011448:	e11e      	b.n	8011688 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011450:	2b01      	cmp	r3, #1
 8011452:	d101      	bne.n	8011458 <HAL_SPI_Transmit_DMA+0x3c>
 8011454:	2302      	movs	r3, #2
 8011456:	e117      	b.n	8011688 <HAL_SPI_Transmit_DMA+0x26c>
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2201      	movs	r2, #1
 801145c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2203      	movs	r2, #3
 8011464:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	2200      	movs	r2, #0
 801146c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	68ba      	ldr	r2, [r7, #8]
 8011474:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	88fa      	ldrh	r2, [r7, #6]
 801147a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	88fa      	ldrh	r2, [r7, #6]
 8011482:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	2200      	movs	r2, #0
 801148a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2200      	movs	r2, #0
 8011490:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	2200      	movs	r2, #0
 8011496:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	2200      	movs	r2, #0
 801149c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	2200      	movs	r2, #0
 80114a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	689b      	ldr	r3, [r3, #8]
 80114ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80114b0:	d108      	bne.n	80114c4 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	681a      	ldr	r2, [r3, #0]
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80114c0:	601a      	str	r2, [r3, #0]
 80114c2:	e009      	b.n	80114d8 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80114d6:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	68db      	ldr	r3, [r3, #12]
 80114dc:	2b0f      	cmp	r3, #15
 80114de:	d905      	bls.n	80114ec <HAL_SPI_Transmit_DMA+0xd0>
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80114e4:	699b      	ldr	r3, [r3, #24]
 80114e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80114ea:	d10f      	bne.n	801150c <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80114f0:	2b07      	cmp	r3, #7
 80114f2:	d911      	bls.n	8011518 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80114f8:	699b      	ldr	r3, [r3, #24]
 80114fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80114fe:	d00b      	beq.n	8011518 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011504:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011506:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801150a:	d005      	beq.n	8011518 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	2200      	movs	r2, #0
 8011510:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8011514:	2301      	movs	r3, #1
 8011516:	e0b7      	b.n	8011688 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	2b07      	cmp	r3, #7
 801151e:	d820      	bhi.n	8011562 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011524:	699b      	ldr	r3, [r3, #24]
 8011526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801152a:	d109      	bne.n	8011540 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011532:	b29b      	uxth	r3, r3
 8011534:	3301      	adds	r3, #1
 8011536:	105b      	asrs	r3, r3, #1
 8011538:	b29a      	uxth	r2, r3
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011544:	699b      	ldr	r3, [r3, #24]
 8011546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801154a:	d11e      	bne.n	801158a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011552:	b29b      	uxth	r3, r3
 8011554:	3303      	adds	r3, #3
 8011556:	109b      	asrs	r3, r3, #2
 8011558:	b29a      	uxth	r2, r3
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011560:	e013      	b.n	801158a <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	68db      	ldr	r3, [r3, #12]
 8011566:	2b0f      	cmp	r3, #15
 8011568:	d80f      	bhi.n	801158a <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801156e:	699b      	ldr	r3, [r3, #24]
 8011570:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011574:	d109      	bne.n	801158a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801157c:	b29b      	uxth	r3, r3
 801157e:	3301      	adds	r3, #1
 8011580:	105b      	asrs	r3, r3, #1
 8011582:	b29a      	uxth	r2, r3
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801158e:	4a40      	ldr	r2, [pc, #256]	@ (8011690 <HAL_SPI_Transmit_DMA+0x274>)
 8011590:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011596:	4a3f      	ldr	r2, [pc, #252]	@ (8011694 <HAL_SPI_Transmit_DMA+0x278>)
 8011598:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801159e:	4a3e      	ldr	r2, [pc, #248]	@ (8011698 <HAL_SPI_Transmit_DMA+0x27c>)
 80115a0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80115a6:	2200      	movs	r2, #0
 80115a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	689a      	ldr	r2, [r3, #8]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80115b8:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80115c2:	4619      	mov	r1, r3
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	3320      	adds	r3, #32
 80115ca:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80115d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80115d4:	f7f3 f894 	bl	8004700 <HAL_DMA_Start_IT>
 80115d8:	4603      	mov	r3, r0
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d011      	beq.n	8011602 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115e4:	f043 0210 	orr.w	r2, r3, #16
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2201      	movs	r2, #1
 80115f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2200      	movs	r2, #0
 80115fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80115fe:	2301      	movs	r3, #1
 8011600:	e042      	b.n	8011688 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011606:	69db      	ldr	r3, [r3, #28]
 8011608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801160c:	d108      	bne.n	8011620 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	6859      	ldr	r1, [r3, #4]
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	4b20      	ldr	r3, [pc, #128]	@ (801169c <HAL_SPI_Transmit_DMA+0x280>)
 801161a:	400b      	ands	r3, r1
 801161c:	6053      	str	r3, [r2, #4]
 801161e:	e009      	b.n	8011634 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	685a      	ldr	r2, [r3, #4]
 8011626:	4b1d      	ldr	r3, [pc, #116]	@ (801169c <HAL_SPI_Transmit_DMA+0x280>)
 8011628:	4013      	ands	r3, r2
 801162a:	88f9      	ldrh	r1, [r7, #6]
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	6812      	ldr	r2, [r2, #0]
 8011630:	430b      	orrs	r3, r1
 8011632:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	689a      	ldr	r2, [r3, #8]
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011642:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	691a      	ldr	r2, [r3, #16]
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8011652:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f042 0201 	orr.w	r2, r2, #1
 8011662:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801166c:	d107      	bne.n	801167e <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801167c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2200      	movs	r2, #0
 8011682:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	08011ae7 	.word	0x08011ae7
 8011694:	08011aa1 	.word	0x08011aa1
 8011698:	08011b03 	.word	0x08011b03
 801169c:	ffff0000 	.word	0xffff0000

080116a0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b08a      	sub	sp, #40	@ 0x28
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	691b      	ldr	r3, [r3, #16]
 80116ae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	695b      	ldr	r3, [r3, #20]
 80116b6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80116b8:	6a3a      	ldr	r2, [r7, #32]
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	4013      	ands	r3, r2
 80116be:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	689b      	ldr	r3, [r3, #8]
 80116c6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80116c8:	2300      	movs	r3, #0
 80116ca:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80116d2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	3330      	adds	r3, #48	@ 0x30
 80116da:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80116dc:	69fb      	ldr	r3, [r7, #28]
 80116de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d010      	beq.n	8011708 <HAL_SPI_IRQHandler+0x68>
 80116e6:	6a3b      	ldr	r3, [r7, #32]
 80116e8:	f003 0308 	and.w	r3, r3, #8
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d00b      	beq.n	8011708 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	699a      	ldr	r2, [r3, #24]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80116fe:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f000 f9c3 	bl	8011a8c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8011706:	e192      	b.n	8011a2e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011708:	69bb      	ldr	r3, [r7, #24]
 801170a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801170e:	2b00      	cmp	r3, #0
 8011710:	d113      	bne.n	801173a <HAL_SPI_IRQHandler+0x9a>
 8011712:	69bb      	ldr	r3, [r7, #24]
 8011714:	f003 0320 	and.w	r3, r3, #32
 8011718:	2b00      	cmp	r3, #0
 801171a:	d10e      	bne.n	801173a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801171c:	69bb      	ldr	r3, [r7, #24]
 801171e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011722:	2b00      	cmp	r3, #0
 8011724:	d009      	beq.n	801173a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	4798      	blx	r3
    handled = 1UL;
 8011736:	2301      	movs	r3, #1
 8011738:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011740:	2b00      	cmp	r3, #0
 8011742:	d10f      	bne.n	8011764 <HAL_SPI_IRQHandler+0xc4>
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	f003 0301 	and.w	r3, r3, #1
 801174a:	2b00      	cmp	r3, #0
 801174c:	d00a      	beq.n	8011764 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011754:	2b00      	cmp	r3, #0
 8011756:	d105      	bne.n	8011764 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	4798      	blx	r3
    handled = 1UL;
 8011760:	2301      	movs	r3, #1
 8011762:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011764:	69bb      	ldr	r3, [r7, #24]
 8011766:	f003 0320 	and.w	r3, r3, #32
 801176a:	2b00      	cmp	r3, #0
 801176c:	d10f      	bne.n	801178e <HAL_SPI_IRQHandler+0xee>
 801176e:	69bb      	ldr	r3, [r7, #24]
 8011770:	f003 0302 	and.w	r3, r3, #2
 8011774:	2b00      	cmp	r3, #0
 8011776:	d00a      	beq.n	801178e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011778:	69bb      	ldr	r3, [r7, #24]
 801177a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801177e:	2b00      	cmp	r3, #0
 8011780:	d105      	bne.n	801178e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	4798      	blx	r3
    handled = 1UL;
 801178a:	2301      	movs	r3, #1
 801178c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011790:	2b00      	cmp	r3, #0
 8011792:	f040 8147 	bne.w	8011a24 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	f003 0308 	and.w	r3, r3, #8
 801179c:	2b00      	cmp	r3, #0
 801179e:	f000 808b 	beq.w	80118b8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	699a      	ldr	r2, [r3, #24]
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	f042 0208 	orr.w	r2, r2, #8
 80117b0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	699a      	ldr	r2, [r3, #24]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f042 0210 	orr.w	r2, r2, #16
 80117c0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	699a      	ldr	r2, [r3, #24]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80117d0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	691a      	ldr	r2, [r3, #16]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f022 0208 	bic.w	r2, r2, #8
 80117e0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	689b      	ldr	r3, [r3, #8]
 80117e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d13d      	bne.n	801186c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80117f0:	e036      	b.n	8011860 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	2b0f      	cmp	r3, #15
 80117f8:	d90b      	bls.n	8011812 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011802:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011804:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801180a:	1d1a      	adds	r2, r3, #4
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	665a      	str	r2, [r3, #100]	@ 0x64
 8011810:	e01d      	b.n	801184e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	2b07      	cmp	r3, #7
 8011818:	d90b      	bls.n	8011832 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801181e:	68fa      	ldr	r2, [r7, #12]
 8011820:	8812      	ldrh	r2, [r2, #0]
 8011822:	b292      	uxth	r2, r2
 8011824:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801182a:	1c9a      	adds	r2, r3, #2
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	665a      	str	r2, [r3, #100]	@ 0x64
 8011830:	e00d      	b.n	801184e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801183e:	7812      	ldrb	r2, [r2, #0]
 8011840:	b2d2      	uxtb	r2, r2
 8011842:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011848:	1c5a      	adds	r2, r3, #1
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011854:	b29b      	uxth	r3, r3
 8011856:	3b01      	subs	r3, #1
 8011858:	b29a      	uxth	r2, r3
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011866:	b29b      	uxth	r3, r3
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1c2      	bne.n	80117f2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 f985 	bl	8011b7c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2201      	movs	r2, #1
 8011876:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011880:	2b00      	cmp	r3, #0
 8011882:	d003      	beq.n	801188c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f000 f8f7 	bl	8011a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801188a:	e0d0      	b.n	8011a2e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801188c:	7cfb      	ldrb	r3, [r7, #19]
 801188e:	2b05      	cmp	r3, #5
 8011890:	d103      	bne.n	801189a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f000 f8dc 	bl	8011a50 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011898:	e0c6      	b.n	8011a28 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801189a:	7cfb      	ldrb	r3, [r7, #19]
 801189c:	2b04      	cmp	r3, #4
 801189e:	d103      	bne.n	80118a8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f000 f8cb 	bl	8011a3c <HAL_SPI_RxCpltCallback>
    return;
 80118a6:	e0bf      	b.n	8011a28 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80118a8:	7cfb      	ldrb	r3, [r7, #19]
 80118aa:	2b03      	cmp	r3, #3
 80118ac:	f040 80bc 	bne.w	8011a28 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f7ef fdbd 	bl	8001430 <HAL_SPI_TxCpltCallback>
    return;
 80118b6:	e0b7      	b.n	8011a28 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80118be:	2b00      	cmp	r3, #0
 80118c0:	f000 80b5 	beq.w	8011a2e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00f      	beq.n	80118ee <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118d4:	f043 0204 	orr.w	r2, r3, #4
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	699a      	ldr	r2, [r3, #24]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80118ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80118ee:	69bb      	ldr	r3, [r7, #24]
 80118f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d00f      	beq.n	8011918 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118fe:	f043 0201 	orr.w	r2, r3, #1
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	699a      	ldr	r2, [r3, #24]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011916:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011918:	69bb      	ldr	r3, [r7, #24]
 801191a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00f      	beq.n	8011942 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011928:	f043 0208 	orr.w	r2, r3, #8
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	699a      	ldr	r2, [r3, #24]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011940:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	f003 0320 	and.w	r3, r3, #32
 8011948:	2b00      	cmp	r3, #0
 801194a:	d00f      	beq.n	801196c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011952:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	699a      	ldr	r2, [r3, #24]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f042 0220 	orr.w	r2, r2, #32
 801196a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011972:	2b00      	cmp	r3, #0
 8011974:	d05a      	beq.n	8011a2c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	681a      	ldr	r2, [r3, #0]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	f022 0201 	bic.w	r2, r2, #1
 8011984:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	6919      	ldr	r1, [r3, #16]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681a      	ldr	r2, [r3, #0]
 8011990:	4b28      	ldr	r3, [pc, #160]	@ (8011a34 <HAL_SPI_IRQHandler+0x394>)
 8011992:	400b      	ands	r3, r1
 8011994:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801199c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80119a0:	d138      	bne.n	8011a14 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	689a      	ldr	r2, [r3, #8]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80119b0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d013      	beq.n	80119e2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119be:	4a1e      	ldr	r2, [pc, #120]	@ (8011a38 <HAL_SPI_IRQHandler+0x398>)
 80119c0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7f3 fc22 	bl	8005210 <HAL_DMA_Abort_IT>
 80119cc:	4603      	mov	r3, r0
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d007      	beq.n	80119e2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80119d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d020      	beq.n	8011a2c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119ee:	4a12      	ldr	r2, [pc, #72]	@ (8011a38 <HAL_SPI_IRQHandler+0x398>)
 80119f0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7f3 fc0a 	bl	8005210 <HAL_DMA_Abort_IT>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d014      	beq.n	8011a2c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011a12:	e00b      	b.n	8011a2c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2201      	movs	r2, #1
 8011a18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f000 f82b 	bl	8011a78 <HAL_SPI_ErrorCallback>
    return;
 8011a22:	e003      	b.n	8011a2c <HAL_SPI_IRQHandler+0x38c>
    return;
 8011a24:	bf00      	nop
 8011a26:	e002      	b.n	8011a2e <HAL_SPI_IRQHandler+0x38e>
    return;
 8011a28:	bf00      	nop
 8011a2a:	e000      	b.n	8011a2e <HAL_SPI_IRQHandler+0x38e>
    return;
 8011a2c:	bf00      	nop
  }
}
 8011a2e:	3728      	adds	r7, #40	@ 0x28
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}
 8011a34:	fffffc94 	.word	0xfffffc94
 8011a38:	08011b49 	.word	0x08011b49

08011a3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b083      	sub	sp, #12
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8011a44:	bf00      	nop
 8011a46:	370c      	adds	r7, #12
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011a50:	b480      	push	{r7}
 8011a52:	b083      	sub	sp, #12
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011a58:	bf00      	nop
 8011a5a:	370c      	adds	r7, #12
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr

08011a64 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011a64:	b480      	push	{r7}
 8011a66:	b083      	sub	sp, #12
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8011a6c:	bf00      	nop
 8011a6e:	370c      	adds	r7, #12
 8011a70:	46bd      	mov	sp, r7
 8011a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a76:	4770      	bx	lr

08011a78 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011a78:	b480      	push	{r7}
 8011a7a:	b083      	sub	sp, #12
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011a80:	bf00      	nop
 8011a82:	370c      	adds	r7, #12
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr

08011a8c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8011a94:	bf00      	nop
 8011a96:	370c      	adds	r7, #12
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9e:	4770      	bx	lr

08011aa0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011aac:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	2b07      	cmp	r3, #7
 8011ab8:	d011      	beq.n	8011ade <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011abe:	69db      	ldr	r3, [r3, #28]
 8011ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011ac4:	d103      	bne.n	8011ace <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8011ac6:	68f8      	ldr	r0, [r7, #12]
 8011ac8:	f7ef fcb2 	bl	8001430 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8011acc:	e007      	b.n	8011ade <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	691a      	ldr	r2, [r3, #16]
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f042 0208 	orr.w	r2, r2, #8
 8011adc:	611a      	str	r2, [r3, #16]
}
 8011ade:	bf00      	nop
 8011ae0:	3710      	adds	r7, #16
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}

08011ae6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011ae6:	b580      	push	{r7, lr}
 8011ae8:	b084      	sub	sp, #16
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011af2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8011af4:	68f8      	ldr	r0, [r7, #12]
 8011af6:	f7ff ffb5 	bl	8011a64 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011afa:	bf00      	nop
 8011afc:	3710      	adds	r7, #16
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b084      	sub	sp, #16
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b0e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f7f4 fcfb 	bl	800650c <HAL_DMA_GetError>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b02      	cmp	r3, #2
 8011b1a:	d011      	beq.n	8011b40 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8011b1c:	68f8      	ldr	r0, [r7, #12]
 8011b1e:	f000 f82d 	bl	8011b7c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011b28:	f043 0210 	orr.w	r2, r3, #16
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2201      	movs	r2, #1
 8011b36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8011b3a:	68f8      	ldr	r0, [r7, #12]
 8011b3c:	f7ff ff9c 	bl	8011a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8011b40:	bf00      	nop
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	2200      	movs	r2, #0
 8011b5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	2200      	movs	r2, #0
 8011b62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	2201      	movs	r2, #1
 8011b6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011b6e:	68f8      	ldr	r0, [r7, #12]
 8011b70:	f7ff ff82 	bl	8011a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011b74:	bf00      	nop
 8011b76:	3710      	adds	r7, #16
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}

08011b7c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	b085      	sub	sp, #20
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	695b      	ldr	r3, [r3, #20]
 8011b8a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	699a      	ldr	r2, [r3, #24]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	f042 0208 	orr.w	r2, r2, #8
 8011b9a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	699a      	ldr	r2, [r3, #24]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f042 0210 	orr.w	r2, r2, #16
 8011baa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	f022 0201 	bic.w	r2, r2, #1
 8011bba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	6919      	ldr	r1, [r3, #16]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681a      	ldr	r2, [r3, #0]
 8011bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8011cb8 <SPI_CloseTransfer+0x13c>)
 8011bc8:	400b      	ands	r3, r1
 8011bca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	689a      	ldr	r2, [r3, #8]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011bda:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	2b04      	cmp	r3, #4
 8011be6:	d014      	beq.n	8011c12 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f003 0320 	and.w	r3, r3, #32
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d00f      	beq.n	8011c12 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011bf8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	699a      	ldr	r2, [r3, #24]
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	f042 0220 	orr.w	r2, r2, #32
 8011c10:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	2b03      	cmp	r3, #3
 8011c1c:	d014      	beq.n	8011c48 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00f      	beq.n	8011c48 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c2e:	f043 0204 	orr.w	r2, r3, #4
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	699a      	ldr	r2, [r3, #24]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011c46:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d00f      	beq.n	8011c72 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c58:	f043 0201 	orr.w	r2, r3, #1
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	699a      	ldr	r2, [r3, #24]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011c70:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d00f      	beq.n	8011c9c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c82:	f043 0208 	orr.w	r2, r3, #8
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	699a      	ldr	r2, [r3, #24]
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011c9a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8011cac:	bf00      	nop
 8011cae:	3714      	adds	r7, #20
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr
 8011cb8:	fffffc90 	.word	0xfffffc90

08011cbc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b084      	sub	sp, #16
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	60f8      	str	r0, [r7, #12]
 8011cc4:	60b9      	str	r1, [r7, #8]
 8011cc6:	603b      	str	r3, [r7, #0]
 8011cc8:	4613      	mov	r3, r2
 8011cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011ccc:	e010      	b.n	8011cf0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011cce:	f7f0 fd45 	bl	800275c <HAL_GetTick>
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	683a      	ldr	r2, [r7, #0]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d803      	bhi.n	8011ce6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ce4:	d102      	bne.n	8011cec <SPI_WaitOnFlagUntilTimeout+0x30>
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d101      	bne.n	8011cf0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011cec:	2303      	movs	r3, #3
 8011cee:	e00f      	b.n	8011d10 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	695a      	ldr	r2, [r3, #20]
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	4013      	ands	r3, r2
 8011cfa:	68ba      	ldr	r2, [r7, #8]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	bf0c      	ite	eq
 8011d00:	2301      	moveq	r3, #1
 8011d02:	2300      	movne	r3, #0
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	461a      	mov	r2, r3
 8011d08:	79fb      	ldrb	r3, [r7, #7]
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d0df      	beq.n	8011cce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011d0e:	2300      	movs	r3, #0
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3710      	adds	r7, #16
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b085      	sub	sp, #20
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d24:	095b      	lsrs	r3, r3, #5
 8011d26:	3301      	adds	r3, #1
 8011d28:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	3307      	adds	r3, #7
 8011d36:	08db      	lsrs	r3, r3, #3
 8011d38:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	68fa      	ldr	r2, [r7, #12]
 8011d3e:	fb02 f303 	mul.w	r3, r2, r3
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3714      	adds	r7, #20
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr

08011d4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b082      	sub	sp, #8
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d101      	bne.n	8011d60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	e042      	b.n	8011de6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d106      	bne.n	8011d78 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f7ef ffa4 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2224      	movs	r2, #36	@ 0x24
 8011d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	f022 0201 	bic.w	r2, r2, #1
 8011d8e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d002      	beq.n	8011d9e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f001 fa6b 	bl	8013274 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 fd00 	bl	80127a4 <UART_SetConfig>
 8011da4:	4603      	mov	r3, r0
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	d101      	bne.n	8011dae <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011daa:	2301      	movs	r3, #1
 8011dac:	e01b      	b.n	8011de6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	685a      	ldr	r2, [r3, #4]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011dbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	689a      	ldr	r2, [r3, #8]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011dcc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	f042 0201 	orr.w	r2, r2, #1
 8011ddc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f001 faea 	bl	80133b8 <UART_CheckIdleState>
 8011de4:	4603      	mov	r3, r0
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3708      	adds	r7, #8
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}

08011dee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011dee:	b580      	push	{r7, lr}
 8011df0:	b08a      	sub	sp, #40	@ 0x28
 8011df2:	af02      	add	r7, sp, #8
 8011df4:	60f8      	str	r0, [r7, #12]
 8011df6:	60b9      	str	r1, [r7, #8]
 8011df8:	603b      	str	r3, [r7, #0]
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e04:	2b20      	cmp	r3, #32
 8011e06:	d17b      	bne.n	8011f00 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d002      	beq.n	8011e14 <HAL_UART_Transmit+0x26>
 8011e0e:	88fb      	ldrh	r3, [r7, #6]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d101      	bne.n	8011e18 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011e14:	2301      	movs	r3, #1
 8011e16:	e074      	b.n	8011f02 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2221      	movs	r2, #33	@ 0x21
 8011e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011e28:	f7f0 fc98 	bl	800275c <HAL_GetTick>
 8011e2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	88fa      	ldrh	r2, [r7, #6]
 8011e32:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	88fa      	ldrh	r2, [r7, #6]
 8011e3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	689b      	ldr	r3, [r3, #8]
 8011e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011e46:	d108      	bne.n	8011e5a <HAL_UART_Transmit+0x6c>
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	691b      	ldr	r3, [r3, #16]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d104      	bne.n	8011e5a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011e50:	2300      	movs	r3, #0
 8011e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	61bb      	str	r3, [r7, #24]
 8011e58:	e003      	b.n	8011e62 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011e62:	e030      	b.n	8011ec6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	9300      	str	r3, [sp, #0]
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	2180      	movs	r1, #128	@ 0x80
 8011e6e:	68f8      	ldr	r0, [r7, #12]
 8011e70:	f001 fb4c 	bl	801350c <UART_WaitOnFlagUntilTimeout>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d005      	beq.n	8011e86 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2220      	movs	r2, #32
 8011e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8011e82:	2303      	movs	r3, #3
 8011e84:	e03d      	b.n	8011f02 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8011e86:	69fb      	ldr	r3, [r7, #28]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d10b      	bne.n	8011ea4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011e8c:	69bb      	ldr	r3, [r7, #24]
 8011e8e:	881b      	ldrh	r3, [r3, #0]
 8011e90:	461a      	mov	r2, r3
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011e9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	3302      	adds	r3, #2
 8011ea0:	61bb      	str	r3, [r7, #24]
 8011ea2:	e007      	b.n	8011eb4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	781a      	ldrb	r2, [r3, #0]
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	3b01      	subs	r3, #1
 8011ebe:	b29a      	uxth	r2, r3
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d1c8      	bne.n	8011e64 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	9300      	str	r3, [sp, #0]
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	2200      	movs	r2, #0
 8011eda:	2140      	movs	r1, #64	@ 0x40
 8011edc:	68f8      	ldr	r0, [r7, #12]
 8011ede:	f001 fb15 	bl	801350c <UART_WaitOnFlagUntilTimeout>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d005      	beq.n	8011ef4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	2220      	movs	r2, #32
 8011eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8011ef0:	2303      	movs	r3, #3
 8011ef2:	e006      	b.n	8011f02 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2220      	movs	r2, #32
 8011ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8011efc:	2300      	movs	r3, #0
 8011efe:	e000      	b.n	8011f02 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011f00:	2302      	movs	r3, #2
  }
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3720      	adds	r7, #32
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
	...

08011f0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08a      	sub	sp, #40	@ 0x28
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	4613      	mov	r3, r2
 8011f18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011f20:	2b20      	cmp	r3, #32
 8011f22:	d137      	bne.n	8011f94 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d002      	beq.n	8011f30 <HAL_UART_Receive_DMA+0x24>
 8011f2a:	88fb      	ldrh	r3, [r7, #6]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d101      	bne.n	8011f34 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8011f30:	2301      	movs	r3, #1
 8011f32:	e030      	b.n	8011f96 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	2200      	movs	r2, #0
 8011f38:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4a18      	ldr	r2, [pc, #96]	@ (8011fa0 <HAL_UART_Receive_DMA+0x94>)
 8011f40:	4293      	cmp	r3, r2
 8011f42:	d01f      	beq.n	8011f84 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d018      	beq.n	8011f84 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	e853 3f00 	ldrex	r3, [r3]
 8011f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	461a      	mov	r2, r3
 8011f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f70:	623b      	str	r3, [r7, #32]
 8011f72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f74:	69f9      	ldr	r1, [r7, #28]
 8011f76:	6a3a      	ldr	r2, [r7, #32]
 8011f78:	e841 2300 	strex	r3, r2, [r1]
 8011f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f7e:	69bb      	ldr	r3, [r7, #24]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d1e6      	bne.n	8011f52 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011f84:	88fb      	ldrh	r3, [r7, #6]
 8011f86:	461a      	mov	r2, r3
 8011f88:	68b9      	ldr	r1, [r7, #8]
 8011f8a:	68f8      	ldr	r0, [r7, #12]
 8011f8c:	f001 fb2c 	bl	80135e8 <UART_Start_Receive_DMA>
 8011f90:	4603      	mov	r3, r0
 8011f92:	e000      	b.n	8011f96 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011f94:	2302      	movs	r3, #2
  }
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3728      	adds	r7, #40	@ 0x28
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	58000c00 	.word	0x58000c00

08011fa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b0ba      	sub	sp, #232	@ 0xe8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	69db      	ldr	r3, [r3, #28]
 8011fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	689b      	ldr	r3, [r3, #8]
 8011fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011fca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8011fce:	f640 030f 	movw	r3, #2063	@ 0x80f
 8011fd2:	4013      	ands	r3, r2
 8011fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8011fd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d11b      	bne.n	8012018 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011fe4:	f003 0320 	and.w	r3, r3, #32
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d015      	beq.n	8012018 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011ff0:	f003 0320 	and.w	r3, r3, #32
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d105      	bne.n	8012004 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012000:	2b00      	cmp	r3, #0
 8012002:	d009      	beq.n	8012018 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012008:	2b00      	cmp	r3, #0
 801200a:	f000 8393 	beq.w	8012734 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	4798      	blx	r3
      }
      return;
 8012016:	e38d      	b.n	8012734 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801201c:	2b00      	cmp	r3, #0
 801201e:	f000 8123 	beq.w	8012268 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012022:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012026:	4b8d      	ldr	r3, [pc, #564]	@ (801225c <HAL_UART_IRQHandler+0x2b8>)
 8012028:	4013      	ands	r3, r2
 801202a:	2b00      	cmp	r3, #0
 801202c:	d106      	bne.n	801203c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801202e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8012032:	4b8b      	ldr	r3, [pc, #556]	@ (8012260 <HAL_UART_IRQHandler+0x2bc>)
 8012034:	4013      	ands	r3, r2
 8012036:	2b00      	cmp	r3, #0
 8012038:	f000 8116 	beq.w	8012268 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801203c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012040:	f003 0301 	and.w	r3, r3, #1
 8012044:	2b00      	cmp	r3, #0
 8012046:	d011      	beq.n	801206c <HAL_UART_IRQHandler+0xc8>
 8012048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012050:	2b00      	cmp	r3, #0
 8012052:	d00b      	beq.n	801206c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2201      	movs	r2, #1
 801205a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012062:	f043 0201 	orr.w	r2, r3, #1
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801206c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012070:	f003 0302 	and.w	r3, r3, #2
 8012074:	2b00      	cmp	r3, #0
 8012076:	d011      	beq.n	801209c <HAL_UART_IRQHandler+0xf8>
 8012078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801207c:	f003 0301 	and.w	r3, r3, #1
 8012080:	2b00      	cmp	r3, #0
 8012082:	d00b      	beq.n	801209c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	2202      	movs	r2, #2
 801208a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012092:	f043 0204 	orr.w	r2, r3, #4
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801209c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80120a0:	f003 0304 	and.w	r3, r3, #4
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d011      	beq.n	80120cc <HAL_UART_IRQHandler+0x128>
 80120a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80120ac:	f003 0301 	and.w	r3, r3, #1
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d00b      	beq.n	80120cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	2204      	movs	r2, #4
 80120ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80120c2:	f043 0202 	orr.w	r2, r3, #2
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80120cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80120d0:	f003 0308 	and.w	r3, r3, #8
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d017      	beq.n	8012108 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80120d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80120dc:	f003 0320 	and.w	r3, r3, #32
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d105      	bne.n	80120f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80120e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80120e8:	4b5c      	ldr	r3, [pc, #368]	@ (801225c <HAL_UART_IRQHandler+0x2b8>)
 80120ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00b      	beq.n	8012108 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2208      	movs	r2, #8
 80120f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80120fe:	f043 0208 	orr.w	r2, r3, #8
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801210c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012110:	2b00      	cmp	r3, #0
 8012112:	d012      	beq.n	801213a <HAL_UART_IRQHandler+0x196>
 8012114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012118:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801211c:	2b00      	cmp	r3, #0
 801211e:	d00c      	beq.n	801213a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012130:	f043 0220 	orr.w	r2, r3, #32
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012140:	2b00      	cmp	r3, #0
 8012142:	f000 82f9 	beq.w	8012738 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801214a:	f003 0320 	and.w	r3, r3, #32
 801214e:	2b00      	cmp	r3, #0
 8012150:	d013      	beq.n	801217a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012156:	f003 0320 	and.w	r3, r3, #32
 801215a:	2b00      	cmp	r3, #0
 801215c:	d105      	bne.n	801216a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801215e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012166:	2b00      	cmp	r3, #0
 8012168:	d007      	beq.n	801217a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801216e:	2b00      	cmp	r3, #0
 8012170:	d003      	beq.n	801217a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012180:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	689b      	ldr	r3, [r3, #8]
 801218a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801218e:	2b40      	cmp	r3, #64	@ 0x40
 8012190:	d005      	beq.n	801219e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012196:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801219a:	2b00      	cmp	r3, #0
 801219c:	d054      	beq.n	8012248 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f001 fb0a 	bl	80137b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	689b      	ldr	r3, [r3, #8]
 80121aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121ae:	2b40      	cmp	r3, #64	@ 0x40
 80121b0:	d146      	bne.n	8012240 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	3308      	adds	r3, #8
 80121b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80121c0:	e853 3f00 	ldrex	r3, [r3]
 80121c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80121c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80121cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80121d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	3308      	adds	r3, #8
 80121da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80121de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80121e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80121ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80121ee:	e841 2300 	strex	r3, r2, [r1]
 80121f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80121f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d1d9      	bne.n	80121b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012204:	2b00      	cmp	r3, #0
 8012206:	d017      	beq.n	8012238 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801220e:	4a15      	ldr	r2, [pc, #84]	@ (8012264 <HAL_UART_IRQHandler+0x2c0>)
 8012210:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012218:	4618      	mov	r0, r3
 801221a:	f7f2 fff9 	bl	8005210 <HAL_DMA_Abort_IT>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d019      	beq.n	8012258 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801222a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801222c:	687a      	ldr	r2, [r7, #4]
 801222e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8012232:	4610      	mov	r0, r2
 8012234:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012236:	e00f      	b.n	8012258 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f000 fa9d 	bl	8012778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801223e:	e00b      	b.n	8012258 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f000 fa99 	bl	8012778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012246:	e007      	b.n	8012258 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f000 fa95 	bl	8012778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2200      	movs	r2, #0
 8012252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8012256:	e26f      	b.n	8012738 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012258:	bf00      	nop
    return;
 801225a:	e26d      	b.n	8012738 <HAL_UART_IRQHandler+0x794>
 801225c:	10000001 	.word	0x10000001
 8012260:	04000120 	.word	0x04000120
 8012264:	08013a6b 	.word	0x08013a6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801226c:	2b01      	cmp	r3, #1
 801226e:	f040 8203 	bne.w	8012678 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012276:	f003 0310 	and.w	r3, r3, #16
 801227a:	2b00      	cmp	r3, #0
 801227c:	f000 81fc 	beq.w	8012678 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012284:	f003 0310 	and.w	r3, r3, #16
 8012288:	2b00      	cmp	r3, #0
 801228a:	f000 81f5 	beq.w	8012678 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	2210      	movs	r2, #16
 8012294:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	689b      	ldr	r3, [r3, #8]
 801229c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80122a0:	2b40      	cmp	r3, #64	@ 0x40
 80122a2:	f040 816d 	bne.w	8012580 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	4aa4      	ldr	r2, [pc, #656]	@ (8012540 <HAL_UART_IRQHandler+0x59c>)
 80122b0:	4293      	cmp	r3, r2
 80122b2:	d068      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	4aa1      	ldr	r2, [pc, #644]	@ (8012544 <HAL_UART_IRQHandler+0x5a0>)
 80122be:	4293      	cmp	r3, r2
 80122c0:	d061      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	4a9f      	ldr	r2, [pc, #636]	@ (8012548 <HAL_UART_IRQHandler+0x5a4>)
 80122cc:	4293      	cmp	r3, r2
 80122ce:	d05a      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	4a9c      	ldr	r2, [pc, #624]	@ (801254c <HAL_UART_IRQHandler+0x5a8>)
 80122da:	4293      	cmp	r3, r2
 80122dc:	d053      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	4a9a      	ldr	r2, [pc, #616]	@ (8012550 <HAL_UART_IRQHandler+0x5ac>)
 80122e8:	4293      	cmp	r3, r2
 80122ea:	d04c      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	4a97      	ldr	r2, [pc, #604]	@ (8012554 <HAL_UART_IRQHandler+0x5b0>)
 80122f6:	4293      	cmp	r3, r2
 80122f8:	d045      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	4a95      	ldr	r2, [pc, #596]	@ (8012558 <HAL_UART_IRQHandler+0x5b4>)
 8012304:	4293      	cmp	r3, r2
 8012306:	d03e      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	4a92      	ldr	r2, [pc, #584]	@ (801255c <HAL_UART_IRQHandler+0x5b8>)
 8012312:	4293      	cmp	r3, r2
 8012314:	d037      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	4a90      	ldr	r2, [pc, #576]	@ (8012560 <HAL_UART_IRQHandler+0x5bc>)
 8012320:	4293      	cmp	r3, r2
 8012322:	d030      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	4a8d      	ldr	r2, [pc, #564]	@ (8012564 <HAL_UART_IRQHandler+0x5c0>)
 801232e:	4293      	cmp	r3, r2
 8012330:	d029      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	4a8b      	ldr	r2, [pc, #556]	@ (8012568 <HAL_UART_IRQHandler+0x5c4>)
 801233c:	4293      	cmp	r3, r2
 801233e:	d022      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	4a88      	ldr	r2, [pc, #544]	@ (801256c <HAL_UART_IRQHandler+0x5c8>)
 801234a:	4293      	cmp	r3, r2
 801234c:	d01b      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	4a86      	ldr	r2, [pc, #536]	@ (8012570 <HAL_UART_IRQHandler+0x5cc>)
 8012358:	4293      	cmp	r3, r2
 801235a:	d014      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	4a83      	ldr	r2, [pc, #524]	@ (8012574 <HAL_UART_IRQHandler+0x5d0>)
 8012366:	4293      	cmp	r3, r2
 8012368:	d00d      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	4a81      	ldr	r2, [pc, #516]	@ (8012578 <HAL_UART_IRQHandler+0x5d4>)
 8012374:	4293      	cmp	r3, r2
 8012376:	d006      	beq.n	8012386 <HAL_UART_IRQHandler+0x3e2>
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4a7e      	ldr	r2, [pc, #504]	@ (801257c <HAL_UART_IRQHandler+0x5d8>)
 8012382:	4293      	cmp	r3, r2
 8012384:	d106      	bne.n	8012394 <HAL_UART_IRQHandler+0x3f0>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	685b      	ldr	r3, [r3, #4]
 8012390:	b29b      	uxth	r3, r3
 8012392:	e005      	b.n	80123a0 <HAL_UART_IRQHandler+0x3fc>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	b29b      	uxth	r3, r3
 80123a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80123a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	f000 80ad 	beq.w	8012508 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80123b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80123b8:	429a      	cmp	r2, r3
 80123ba:	f080 80a5 	bcs.w	8012508 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80123c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123ce:	69db      	ldr	r3, [r3, #28]
 80123d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80123d4:	f000 8087 	beq.w	80124e6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80123e4:	e853 3f00 	ldrex	r3, [r3]
 80123e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80123ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80123f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80123f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	461a      	mov	r2, r3
 80123fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012402:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012406:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801240a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801240e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012412:	e841 2300 	strex	r3, r2, [r1]
 8012416:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801241a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1da      	bne.n	80123d8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	3308      	adds	r3, #8
 8012428:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801242a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801242c:	e853 3f00 	ldrex	r3, [r3]
 8012430:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012432:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012434:	f023 0301 	bic.w	r3, r3, #1
 8012438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	3308      	adds	r3, #8
 8012442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012446:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801244a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801244c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801244e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012452:	e841 2300 	strex	r3, r2, [r1]
 8012456:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801245a:	2b00      	cmp	r3, #0
 801245c:	d1e1      	bne.n	8012422 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	3308      	adds	r3, #8
 8012464:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012468:	e853 3f00 	ldrex	r3, [r3]
 801246c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801246e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	3308      	adds	r3, #8
 801247e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012482:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012484:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012486:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012488:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801248a:	e841 2300 	strex	r3, r2, [r1]
 801248e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012490:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012492:	2b00      	cmp	r3, #0
 8012494:	d1e3      	bne.n	801245e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2220      	movs	r2, #32
 801249a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2200      	movs	r2, #0
 80124a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124ac:	e853 3f00 	ldrex	r3, [r3]
 80124b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80124b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80124b4:	f023 0310 	bic.w	r3, r3, #16
 80124b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	461a      	mov	r2, r3
 80124c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80124c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80124cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80124ce:	e841 2300 	strex	r3, r2, [r1]
 80124d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80124d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d1e4      	bne.n	80124a4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80124e0:	4618      	mov	r0, r3
 80124e2:	f7f2 fb77 	bl	8004bd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2202      	movs	r2, #2
 80124ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	1ad3      	subs	r3, r2, r3
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	4619      	mov	r1, r3
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f000 f943 	bl	801278c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8012506:	e119      	b.n	801273c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801250e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012512:	429a      	cmp	r2, r3
 8012514:	f040 8112 	bne.w	801273c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801251e:	69db      	ldr	r3, [r3, #28]
 8012520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012524:	f040 810a 	bne.w	801273c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2202      	movs	r2, #2
 801252c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012534:	4619      	mov	r1, r3
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f000 f928 	bl	801278c <HAL_UARTEx_RxEventCallback>
      return;
 801253c:	e0fe      	b.n	801273c <HAL_UART_IRQHandler+0x798>
 801253e:	bf00      	nop
 8012540:	40020010 	.word	0x40020010
 8012544:	40020028 	.word	0x40020028
 8012548:	40020040 	.word	0x40020040
 801254c:	40020058 	.word	0x40020058
 8012550:	40020070 	.word	0x40020070
 8012554:	40020088 	.word	0x40020088
 8012558:	400200a0 	.word	0x400200a0
 801255c:	400200b8 	.word	0x400200b8
 8012560:	40020410 	.word	0x40020410
 8012564:	40020428 	.word	0x40020428
 8012568:	40020440 	.word	0x40020440
 801256c:	40020458 	.word	0x40020458
 8012570:	40020470 	.word	0x40020470
 8012574:	40020488 	.word	0x40020488
 8012578:	400204a0 	.word	0x400204a0
 801257c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801258c:	b29b      	uxth	r3, r3
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801259a:	b29b      	uxth	r3, r3
 801259c:	2b00      	cmp	r3, #0
 801259e:	f000 80cf 	beq.w	8012740 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80125a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	f000 80ca 	beq.w	8012740 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125b4:	e853 3f00 	ldrex	r3, [r3]
 80125b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80125ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80125c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	461a      	mov	r2, r3
 80125ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80125ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80125d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80125d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80125d6:	e841 2300 	strex	r3, r2, [r1]
 80125da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80125dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1e4      	bne.n	80125ac <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	3308      	adds	r3, #8
 80125e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ec:	e853 3f00 	ldrex	r3, [r3]
 80125f0:	623b      	str	r3, [r7, #32]
   return(result);
 80125f2:	6a3a      	ldr	r2, [r7, #32]
 80125f4:	4b55      	ldr	r3, [pc, #340]	@ (801274c <HAL_UART_IRQHandler+0x7a8>)
 80125f6:	4013      	ands	r3, r2
 80125f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	3308      	adds	r3, #8
 8012602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012606:	633a      	str	r2, [r7, #48]	@ 0x30
 8012608:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801260a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801260c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801260e:	e841 2300 	strex	r3, r2, [r1]
 8012612:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1e3      	bne.n	80125e2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2220      	movs	r2, #32
 801261e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2200      	movs	r2, #0
 8012626:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2200      	movs	r2, #0
 801262c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	e853 3f00 	ldrex	r3, [r3]
 801263a:	60fb      	str	r3, [r7, #12]
   return(result);
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	f023 0310 	bic.w	r3, r3, #16
 8012642:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	461a      	mov	r2, r3
 801264c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012650:	61fb      	str	r3, [r7, #28]
 8012652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012654:	69b9      	ldr	r1, [r7, #24]
 8012656:	69fa      	ldr	r2, [r7, #28]
 8012658:	e841 2300 	strex	r3, r2, [r1]
 801265c:	617b      	str	r3, [r7, #20]
   return(result);
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d1e4      	bne.n	801262e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2202      	movs	r2, #2
 8012668:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801266a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801266e:	4619      	mov	r1, r3
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f000 f88b 	bl	801278c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012676:	e063      	b.n	8012740 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801267c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00e      	beq.n	80126a2 <HAL_UART_IRQHandler+0x6fe>
 8012684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d008      	beq.n	80126a2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8012698:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f001 fa22 	bl	8013ae4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80126a0:	e051      	b.n	8012746 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80126a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d014      	beq.n	80126d8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80126ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80126b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d105      	bne.n	80126c6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80126ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80126be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d008      	beq.n	80126d8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d03a      	beq.n	8012744 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	4798      	blx	r3
    }
    return;
 80126d6:	e035      	b.n	8012744 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80126d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d009      	beq.n	80126f8 <HAL_UART_IRQHandler+0x754>
 80126e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80126e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d003      	beq.n	80126f8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f001 f9cc 	bl	8013a8e <UART_EndTransmit_IT>
    return;
 80126f6:	e026      	b.n	8012746 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80126f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012700:	2b00      	cmp	r3, #0
 8012702:	d009      	beq.n	8012718 <HAL_UART_IRQHandler+0x774>
 8012704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012708:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801270c:	2b00      	cmp	r3, #0
 801270e:	d003      	beq.n	8012718 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f001 f9fb 	bl	8013b0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012716:	e016      	b.n	8012746 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801271c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012720:	2b00      	cmp	r3, #0
 8012722:	d010      	beq.n	8012746 <HAL_UART_IRQHandler+0x7a2>
 8012724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012728:	2b00      	cmp	r3, #0
 801272a:	da0c      	bge.n	8012746 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f001 f9e3 	bl	8013af8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012732:	e008      	b.n	8012746 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012734:	bf00      	nop
 8012736:	e006      	b.n	8012746 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012738:	bf00      	nop
 801273a:	e004      	b.n	8012746 <HAL_UART_IRQHandler+0x7a2>
      return;
 801273c:	bf00      	nop
 801273e:	e002      	b.n	8012746 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012740:	bf00      	nop
 8012742:	e000      	b.n	8012746 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012744:	bf00      	nop
  }
}
 8012746:	37e8      	adds	r7, #232	@ 0xe8
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}
 801274c:	effffffe 	.word	0xeffffffe

08012750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012758:	bf00      	nop
 801275a:	370c      	adds	r7, #12
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr

08012764 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012764:	b480      	push	{r7}
 8012766:	b083      	sub	sp, #12
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801276c:	bf00      	nop
 801276e:	370c      	adds	r7, #12
 8012770:	46bd      	mov	sp, r7
 8012772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012776:	4770      	bx	lr

08012778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012780:	bf00      	nop
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801278c:	b480      	push	{r7}
 801278e:	b083      	sub	sp, #12
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	460b      	mov	r3, r1
 8012796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012798:	bf00      	nop
 801279a:	370c      	adds	r7, #12
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr

080127a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80127a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80127a8:	b092      	sub	sp, #72	@ 0x48
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80127ae:	2300      	movs	r3, #0
 80127b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	689a      	ldr	r2, [r3, #8]
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	691b      	ldr	r3, [r3, #16]
 80127bc:	431a      	orrs	r2, r3
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	695b      	ldr	r3, [r3, #20]
 80127c2:	431a      	orrs	r2, r3
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	69db      	ldr	r3, [r3, #28]
 80127c8:	4313      	orrs	r3, r2
 80127ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	4bbe      	ldr	r3, [pc, #760]	@ (8012acc <UART_SetConfig+0x328>)
 80127d4:	4013      	ands	r3, r2
 80127d6:	697a      	ldr	r2, [r7, #20]
 80127d8:	6812      	ldr	r2, [r2, #0]
 80127da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80127dc:	430b      	orrs	r3, r1
 80127de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	68da      	ldr	r2, [r3, #12]
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	430a      	orrs	r2, r1
 80127f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	699b      	ldr	r3, [r3, #24]
 80127fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4ab3      	ldr	r2, [pc, #716]	@ (8012ad0 <UART_SetConfig+0x32c>)
 8012802:	4293      	cmp	r3, r2
 8012804:	d004      	beq.n	8012810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	6a1b      	ldr	r3, [r3, #32]
 801280a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801280c:	4313      	orrs	r3, r2
 801280e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	689a      	ldr	r2, [r3, #8]
 8012816:	4baf      	ldr	r3, [pc, #700]	@ (8012ad4 <UART_SetConfig+0x330>)
 8012818:	4013      	ands	r3, r2
 801281a:	697a      	ldr	r2, [r7, #20]
 801281c:	6812      	ldr	r2, [r2, #0]
 801281e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012820:	430b      	orrs	r3, r1
 8012822:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801282a:	f023 010f 	bic.w	r1, r3, #15
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	430a      	orrs	r2, r1
 8012838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4aa6      	ldr	r2, [pc, #664]	@ (8012ad8 <UART_SetConfig+0x334>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d177      	bne.n	8012934 <UART_SetConfig+0x190>
 8012844:	4ba5      	ldr	r3, [pc, #660]	@ (8012adc <UART_SetConfig+0x338>)
 8012846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012848:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801284c:	2b28      	cmp	r3, #40	@ 0x28
 801284e:	d86d      	bhi.n	801292c <UART_SetConfig+0x188>
 8012850:	a201      	add	r2, pc, #4	@ (adr r2, 8012858 <UART_SetConfig+0xb4>)
 8012852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012856:	bf00      	nop
 8012858:	080128fd 	.word	0x080128fd
 801285c:	0801292d 	.word	0x0801292d
 8012860:	0801292d 	.word	0x0801292d
 8012864:	0801292d 	.word	0x0801292d
 8012868:	0801292d 	.word	0x0801292d
 801286c:	0801292d 	.word	0x0801292d
 8012870:	0801292d 	.word	0x0801292d
 8012874:	0801292d 	.word	0x0801292d
 8012878:	08012905 	.word	0x08012905
 801287c:	0801292d 	.word	0x0801292d
 8012880:	0801292d 	.word	0x0801292d
 8012884:	0801292d 	.word	0x0801292d
 8012888:	0801292d 	.word	0x0801292d
 801288c:	0801292d 	.word	0x0801292d
 8012890:	0801292d 	.word	0x0801292d
 8012894:	0801292d 	.word	0x0801292d
 8012898:	0801290d 	.word	0x0801290d
 801289c:	0801292d 	.word	0x0801292d
 80128a0:	0801292d 	.word	0x0801292d
 80128a4:	0801292d 	.word	0x0801292d
 80128a8:	0801292d 	.word	0x0801292d
 80128ac:	0801292d 	.word	0x0801292d
 80128b0:	0801292d 	.word	0x0801292d
 80128b4:	0801292d 	.word	0x0801292d
 80128b8:	08012915 	.word	0x08012915
 80128bc:	0801292d 	.word	0x0801292d
 80128c0:	0801292d 	.word	0x0801292d
 80128c4:	0801292d 	.word	0x0801292d
 80128c8:	0801292d 	.word	0x0801292d
 80128cc:	0801292d 	.word	0x0801292d
 80128d0:	0801292d 	.word	0x0801292d
 80128d4:	0801292d 	.word	0x0801292d
 80128d8:	0801291d 	.word	0x0801291d
 80128dc:	0801292d 	.word	0x0801292d
 80128e0:	0801292d 	.word	0x0801292d
 80128e4:	0801292d 	.word	0x0801292d
 80128e8:	0801292d 	.word	0x0801292d
 80128ec:	0801292d 	.word	0x0801292d
 80128f0:	0801292d 	.word	0x0801292d
 80128f4:	0801292d 	.word	0x0801292d
 80128f8:	08012925 	.word	0x08012925
 80128fc:	2301      	movs	r3, #1
 80128fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012902:	e222      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012904:	2304      	movs	r3, #4
 8012906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801290a:	e21e      	b.n	8012d4a <UART_SetConfig+0x5a6>
 801290c:	2308      	movs	r3, #8
 801290e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012912:	e21a      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012914:	2310      	movs	r3, #16
 8012916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801291a:	e216      	b.n	8012d4a <UART_SetConfig+0x5a6>
 801291c:	2320      	movs	r3, #32
 801291e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012922:	e212      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012924:	2340      	movs	r3, #64	@ 0x40
 8012926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801292a:	e20e      	b.n	8012d4a <UART_SetConfig+0x5a6>
 801292c:	2380      	movs	r3, #128	@ 0x80
 801292e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012932:	e20a      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4a69      	ldr	r2, [pc, #420]	@ (8012ae0 <UART_SetConfig+0x33c>)
 801293a:	4293      	cmp	r3, r2
 801293c:	d130      	bne.n	80129a0 <UART_SetConfig+0x1fc>
 801293e:	4b67      	ldr	r3, [pc, #412]	@ (8012adc <UART_SetConfig+0x338>)
 8012940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012942:	f003 0307 	and.w	r3, r3, #7
 8012946:	2b05      	cmp	r3, #5
 8012948:	d826      	bhi.n	8012998 <UART_SetConfig+0x1f4>
 801294a:	a201      	add	r2, pc, #4	@ (adr r2, 8012950 <UART_SetConfig+0x1ac>)
 801294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012950:	08012969 	.word	0x08012969
 8012954:	08012971 	.word	0x08012971
 8012958:	08012979 	.word	0x08012979
 801295c:	08012981 	.word	0x08012981
 8012960:	08012989 	.word	0x08012989
 8012964:	08012991 	.word	0x08012991
 8012968:	2300      	movs	r3, #0
 801296a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801296e:	e1ec      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012970:	2304      	movs	r3, #4
 8012972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012976:	e1e8      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012978:	2308      	movs	r3, #8
 801297a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801297e:	e1e4      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012980:	2310      	movs	r3, #16
 8012982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012986:	e1e0      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012988:	2320      	movs	r3, #32
 801298a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801298e:	e1dc      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012990:	2340      	movs	r3, #64	@ 0x40
 8012992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012996:	e1d8      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012998:	2380      	movs	r3, #128	@ 0x80
 801299a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801299e:	e1d4      	b.n	8012d4a <UART_SetConfig+0x5a6>
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	4a4f      	ldr	r2, [pc, #316]	@ (8012ae4 <UART_SetConfig+0x340>)
 80129a6:	4293      	cmp	r3, r2
 80129a8:	d130      	bne.n	8012a0c <UART_SetConfig+0x268>
 80129aa:	4b4c      	ldr	r3, [pc, #304]	@ (8012adc <UART_SetConfig+0x338>)
 80129ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129ae:	f003 0307 	and.w	r3, r3, #7
 80129b2:	2b05      	cmp	r3, #5
 80129b4:	d826      	bhi.n	8012a04 <UART_SetConfig+0x260>
 80129b6:	a201      	add	r2, pc, #4	@ (adr r2, 80129bc <UART_SetConfig+0x218>)
 80129b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129bc:	080129d5 	.word	0x080129d5
 80129c0:	080129dd 	.word	0x080129dd
 80129c4:	080129e5 	.word	0x080129e5
 80129c8:	080129ed 	.word	0x080129ed
 80129cc:	080129f5 	.word	0x080129f5
 80129d0:	080129fd 	.word	0x080129fd
 80129d4:	2300      	movs	r3, #0
 80129d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129da:	e1b6      	b.n	8012d4a <UART_SetConfig+0x5a6>
 80129dc:	2304      	movs	r3, #4
 80129de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129e2:	e1b2      	b.n	8012d4a <UART_SetConfig+0x5a6>
 80129e4:	2308      	movs	r3, #8
 80129e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129ea:	e1ae      	b.n	8012d4a <UART_SetConfig+0x5a6>
 80129ec:	2310      	movs	r3, #16
 80129ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129f2:	e1aa      	b.n	8012d4a <UART_SetConfig+0x5a6>
 80129f4:	2320      	movs	r3, #32
 80129f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129fa:	e1a6      	b.n	8012d4a <UART_SetConfig+0x5a6>
 80129fc:	2340      	movs	r3, #64	@ 0x40
 80129fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a02:	e1a2      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012a04:	2380      	movs	r3, #128	@ 0x80
 8012a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a0a:	e19e      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a35      	ldr	r2, [pc, #212]	@ (8012ae8 <UART_SetConfig+0x344>)
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d130      	bne.n	8012a78 <UART_SetConfig+0x2d4>
 8012a16:	4b31      	ldr	r3, [pc, #196]	@ (8012adc <UART_SetConfig+0x338>)
 8012a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a1a:	f003 0307 	and.w	r3, r3, #7
 8012a1e:	2b05      	cmp	r3, #5
 8012a20:	d826      	bhi.n	8012a70 <UART_SetConfig+0x2cc>
 8012a22:	a201      	add	r2, pc, #4	@ (adr r2, 8012a28 <UART_SetConfig+0x284>)
 8012a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a28:	08012a41 	.word	0x08012a41
 8012a2c:	08012a49 	.word	0x08012a49
 8012a30:	08012a51 	.word	0x08012a51
 8012a34:	08012a59 	.word	0x08012a59
 8012a38:	08012a61 	.word	0x08012a61
 8012a3c:	08012a69 	.word	0x08012a69
 8012a40:	2300      	movs	r3, #0
 8012a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a46:	e180      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012a48:	2304      	movs	r3, #4
 8012a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a4e:	e17c      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012a50:	2308      	movs	r3, #8
 8012a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a56:	e178      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012a58:	2310      	movs	r3, #16
 8012a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a5e:	e174      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012a60:	2320      	movs	r3, #32
 8012a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a66:	e170      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012a68:	2340      	movs	r3, #64	@ 0x40
 8012a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a6e:	e16c      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012a70:	2380      	movs	r3, #128	@ 0x80
 8012a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a76:	e168      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8012aec <UART_SetConfig+0x348>)
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d142      	bne.n	8012b08 <UART_SetConfig+0x364>
 8012a82:	4b16      	ldr	r3, [pc, #88]	@ (8012adc <UART_SetConfig+0x338>)
 8012a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a86:	f003 0307 	and.w	r3, r3, #7
 8012a8a:	2b05      	cmp	r3, #5
 8012a8c:	d838      	bhi.n	8012b00 <UART_SetConfig+0x35c>
 8012a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8012a94 <UART_SetConfig+0x2f0>)
 8012a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a94:	08012aad 	.word	0x08012aad
 8012a98:	08012ab5 	.word	0x08012ab5
 8012a9c:	08012abd 	.word	0x08012abd
 8012aa0:	08012ac5 	.word	0x08012ac5
 8012aa4:	08012af1 	.word	0x08012af1
 8012aa8:	08012af9 	.word	0x08012af9
 8012aac:	2300      	movs	r3, #0
 8012aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ab2:	e14a      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012ab4:	2304      	movs	r3, #4
 8012ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012aba:	e146      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012abc:	2308      	movs	r3, #8
 8012abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ac2:	e142      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012ac4:	2310      	movs	r3, #16
 8012ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012aca:	e13e      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012acc:	cfff69f3 	.word	0xcfff69f3
 8012ad0:	58000c00 	.word	0x58000c00
 8012ad4:	11fff4ff 	.word	0x11fff4ff
 8012ad8:	40011000 	.word	0x40011000
 8012adc:	58024400 	.word	0x58024400
 8012ae0:	40004400 	.word	0x40004400
 8012ae4:	40004800 	.word	0x40004800
 8012ae8:	40004c00 	.word	0x40004c00
 8012aec:	40005000 	.word	0x40005000
 8012af0:	2320      	movs	r3, #32
 8012af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012af6:	e128      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012af8:	2340      	movs	r3, #64	@ 0x40
 8012afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012afe:	e124      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012b00:	2380      	movs	r3, #128	@ 0x80
 8012b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b06:	e120      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4acb      	ldr	r2, [pc, #812]	@ (8012e3c <UART_SetConfig+0x698>)
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d176      	bne.n	8012c00 <UART_SetConfig+0x45c>
 8012b12:	4bcb      	ldr	r3, [pc, #812]	@ (8012e40 <UART_SetConfig+0x69c>)
 8012b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012b1a:	2b28      	cmp	r3, #40	@ 0x28
 8012b1c:	d86c      	bhi.n	8012bf8 <UART_SetConfig+0x454>
 8012b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8012b24 <UART_SetConfig+0x380>)
 8012b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b24:	08012bc9 	.word	0x08012bc9
 8012b28:	08012bf9 	.word	0x08012bf9
 8012b2c:	08012bf9 	.word	0x08012bf9
 8012b30:	08012bf9 	.word	0x08012bf9
 8012b34:	08012bf9 	.word	0x08012bf9
 8012b38:	08012bf9 	.word	0x08012bf9
 8012b3c:	08012bf9 	.word	0x08012bf9
 8012b40:	08012bf9 	.word	0x08012bf9
 8012b44:	08012bd1 	.word	0x08012bd1
 8012b48:	08012bf9 	.word	0x08012bf9
 8012b4c:	08012bf9 	.word	0x08012bf9
 8012b50:	08012bf9 	.word	0x08012bf9
 8012b54:	08012bf9 	.word	0x08012bf9
 8012b58:	08012bf9 	.word	0x08012bf9
 8012b5c:	08012bf9 	.word	0x08012bf9
 8012b60:	08012bf9 	.word	0x08012bf9
 8012b64:	08012bd9 	.word	0x08012bd9
 8012b68:	08012bf9 	.word	0x08012bf9
 8012b6c:	08012bf9 	.word	0x08012bf9
 8012b70:	08012bf9 	.word	0x08012bf9
 8012b74:	08012bf9 	.word	0x08012bf9
 8012b78:	08012bf9 	.word	0x08012bf9
 8012b7c:	08012bf9 	.word	0x08012bf9
 8012b80:	08012bf9 	.word	0x08012bf9
 8012b84:	08012be1 	.word	0x08012be1
 8012b88:	08012bf9 	.word	0x08012bf9
 8012b8c:	08012bf9 	.word	0x08012bf9
 8012b90:	08012bf9 	.word	0x08012bf9
 8012b94:	08012bf9 	.word	0x08012bf9
 8012b98:	08012bf9 	.word	0x08012bf9
 8012b9c:	08012bf9 	.word	0x08012bf9
 8012ba0:	08012bf9 	.word	0x08012bf9
 8012ba4:	08012be9 	.word	0x08012be9
 8012ba8:	08012bf9 	.word	0x08012bf9
 8012bac:	08012bf9 	.word	0x08012bf9
 8012bb0:	08012bf9 	.word	0x08012bf9
 8012bb4:	08012bf9 	.word	0x08012bf9
 8012bb8:	08012bf9 	.word	0x08012bf9
 8012bbc:	08012bf9 	.word	0x08012bf9
 8012bc0:	08012bf9 	.word	0x08012bf9
 8012bc4:	08012bf1 	.word	0x08012bf1
 8012bc8:	2301      	movs	r3, #1
 8012bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bce:	e0bc      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012bd0:	2304      	movs	r3, #4
 8012bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bd6:	e0b8      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012bd8:	2308      	movs	r3, #8
 8012bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bde:	e0b4      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012be0:	2310      	movs	r3, #16
 8012be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012be6:	e0b0      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012be8:	2320      	movs	r3, #32
 8012bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bee:	e0ac      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012bf0:	2340      	movs	r3, #64	@ 0x40
 8012bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bf6:	e0a8      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012bf8:	2380      	movs	r3, #128	@ 0x80
 8012bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bfe:	e0a4      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	4a8f      	ldr	r2, [pc, #572]	@ (8012e44 <UART_SetConfig+0x6a0>)
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d130      	bne.n	8012c6c <UART_SetConfig+0x4c8>
 8012c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8012e40 <UART_SetConfig+0x69c>)
 8012c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c0e:	f003 0307 	and.w	r3, r3, #7
 8012c12:	2b05      	cmp	r3, #5
 8012c14:	d826      	bhi.n	8012c64 <UART_SetConfig+0x4c0>
 8012c16:	a201      	add	r2, pc, #4	@ (adr r2, 8012c1c <UART_SetConfig+0x478>)
 8012c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c1c:	08012c35 	.word	0x08012c35
 8012c20:	08012c3d 	.word	0x08012c3d
 8012c24:	08012c45 	.word	0x08012c45
 8012c28:	08012c4d 	.word	0x08012c4d
 8012c2c:	08012c55 	.word	0x08012c55
 8012c30:	08012c5d 	.word	0x08012c5d
 8012c34:	2300      	movs	r3, #0
 8012c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c3a:	e086      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012c3c:	2304      	movs	r3, #4
 8012c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c42:	e082      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012c44:	2308      	movs	r3, #8
 8012c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c4a:	e07e      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012c4c:	2310      	movs	r3, #16
 8012c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c52:	e07a      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012c54:	2320      	movs	r3, #32
 8012c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c5a:	e076      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012c5c:	2340      	movs	r3, #64	@ 0x40
 8012c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c62:	e072      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012c64:	2380      	movs	r3, #128	@ 0x80
 8012c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c6a:	e06e      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	4a75      	ldr	r2, [pc, #468]	@ (8012e48 <UART_SetConfig+0x6a4>)
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d130      	bne.n	8012cd8 <UART_SetConfig+0x534>
 8012c76:	4b72      	ldr	r3, [pc, #456]	@ (8012e40 <UART_SetConfig+0x69c>)
 8012c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c7a:	f003 0307 	and.w	r3, r3, #7
 8012c7e:	2b05      	cmp	r3, #5
 8012c80:	d826      	bhi.n	8012cd0 <UART_SetConfig+0x52c>
 8012c82:	a201      	add	r2, pc, #4	@ (adr r2, 8012c88 <UART_SetConfig+0x4e4>)
 8012c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c88:	08012ca1 	.word	0x08012ca1
 8012c8c:	08012ca9 	.word	0x08012ca9
 8012c90:	08012cb1 	.word	0x08012cb1
 8012c94:	08012cb9 	.word	0x08012cb9
 8012c98:	08012cc1 	.word	0x08012cc1
 8012c9c:	08012cc9 	.word	0x08012cc9
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ca6:	e050      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012ca8:	2304      	movs	r3, #4
 8012caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cae:	e04c      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012cb0:	2308      	movs	r3, #8
 8012cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cb6:	e048      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012cb8:	2310      	movs	r3, #16
 8012cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cbe:	e044      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012cc0:	2320      	movs	r3, #32
 8012cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cc6:	e040      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012cc8:	2340      	movs	r3, #64	@ 0x40
 8012cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cce:	e03c      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012cd0:	2380      	movs	r3, #128	@ 0x80
 8012cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cd6:	e038      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	4a5b      	ldr	r2, [pc, #364]	@ (8012e4c <UART_SetConfig+0x6a8>)
 8012cde:	4293      	cmp	r3, r2
 8012ce0:	d130      	bne.n	8012d44 <UART_SetConfig+0x5a0>
 8012ce2:	4b57      	ldr	r3, [pc, #348]	@ (8012e40 <UART_SetConfig+0x69c>)
 8012ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ce6:	f003 0307 	and.w	r3, r3, #7
 8012cea:	2b05      	cmp	r3, #5
 8012cec:	d826      	bhi.n	8012d3c <UART_SetConfig+0x598>
 8012cee:	a201      	add	r2, pc, #4	@ (adr r2, 8012cf4 <UART_SetConfig+0x550>)
 8012cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cf4:	08012d0d 	.word	0x08012d0d
 8012cf8:	08012d15 	.word	0x08012d15
 8012cfc:	08012d1d 	.word	0x08012d1d
 8012d00:	08012d25 	.word	0x08012d25
 8012d04:	08012d2d 	.word	0x08012d2d
 8012d08:	08012d35 	.word	0x08012d35
 8012d0c:	2302      	movs	r3, #2
 8012d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d12:	e01a      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012d14:	2304      	movs	r3, #4
 8012d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d1a:	e016      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012d1c:	2308      	movs	r3, #8
 8012d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d22:	e012      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012d24:	2310      	movs	r3, #16
 8012d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d2a:	e00e      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012d2c:	2320      	movs	r3, #32
 8012d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d32:	e00a      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012d34:	2340      	movs	r3, #64	@ 0x40
 8012d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d3a:	e006      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012d3c:	2380      	movs	r3, #128	@ 0x80
 8012d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d42:	e002      	b.n	8012d4a <UART_SetConfig+0x5a6>
 8012d44:	2380      	movs	r3, #128	@ 0x80
 8012d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8012e4c <UART_SetConfig+0x6a8>)
 8012d50:	4293      	cmp	r3, r2
 8012d52:	f040 80f8 	bne.w	8012f46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012d56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012d5a:	2b20      	cmp	r3, #32
 8012d5c:	dc46      	bgt.n	8012dec <UART_SetConfig+0x648>
 8012d5e:	2b02      	cmp	r3, #2
 8012d60:	f2c0 8082 	blt.w	8012e68 <UART_SetConfig+0x6c4>
 8012d64:	3b02      	subs	r3, #2
 8012d66:	2b1e      	cmp	r3, #30
 8012d68:	d87e      	bhi.n	8012e68 <UART_SetConfig+0x6c4>
 8012d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8012d70 <UART_SetConfig+0x5cc>)
 8012d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d70:	08012df3 	.word	0x08012df3
 8012d74:	08012e69 	.word	0x08012e69
 8012d78:	08012dfb 	.word	0x08012dfb
 8012d7c:	08012e69 	.word	0x08012e69
 8012d80:	08012e69 	.word	0x08012e69
 8012d84:	08012e69 	.word	0x08012e69
 8012d88:	08012e0b 	.word	0x08012e0b
 8012d8c:	08012e69 	.word	0x08012e69
 8012d90:	08012e69 	.word	0x08012e69
 8012d94:	08012e69 	.word	0x08012e69
 8012d98:	08012e69 	.word	0x08012e69
 8012d9c:	08012e69 	.word	0x08012e69
 8012da0:	08012e69 	.word	0x08012e69
 8012da4:	08012e69 	.word	0x08012e69
 8012da8:	08012e1b 	.word	0x08012e1b
 8012dac:	08012e69 	.word	0x08012e69
 8012db0:	08012e69 	.word	0x08012e69
 8012db4:	08012e69 	.word	0x08012e69
 8012db8:	08012e69 	.word	0x08012e69
 8012dbc:	08012e69 	.word	0x08012e69
 8012dc0:	08012e69 	.word	0x08012e69
 8012dc4:	08012e69 	.word	0x08012e69
 8012dc8:	08012e69 	.word	0x08012e69
 8012dcc:	08012e69 	.word	0x08012e69
 8012dd0:	08012e69 	.word	0x08012e69
 8012dd4:	08012e69 	.word	0x08012e69
 8012dd8:	08012e69 	.word	0x08012e69
 8012ddc:	08012e69 	.word	0x08012e69
 8012de0:	08012e69 	.word	0x08012e69
 8012de4:	08012e69 	.word	0x08012e69
 8012de8:	08012e5b 	.word	0x08012e5b
 8012dec:	2b40      	cmp	r3, #64	@ 0x40
 8012dee:	d037      	beq.n	8012e60 <UART_SetConfig+0x6bc>
 8012df0:	e03a      	b.n	8012e68 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012df2:	f7fd fa8d 	bl	8010310 <HAL_RCCEx_GetD3PCLK1Freq>
 8012df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012df8:	e03c      	b.n	8012e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7fd fa9c 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e08:	e034      	b.n	8012e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e0a:	f107 0318 	add.w	r3, r7, #24
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7fd fbe8 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e18:	e02c      	b.n	8012e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012e1a:	4b09      	ldr	r3, [pc, #36]	@ (8012e40 <UART_SetConfig+0x69c>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	f003 0320 	and.w	r3, r3, #32
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d016      	beq.n	8012e54 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012e26:	4b06      	ldr	r3, [pc, #24]	@ (8012e40 <UART_SetConfig+0x69c>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	08db      	lsrs	r3, r3, #3
 8012e2c:	f003 0303 	and.w	r3, r3, #3
 8012e30:	4a07      	ldr	r2, [pc, #28]	@ (8012e50 <UART_SetConfig+0x6ac>)
 8012e32:	fa22 f303 	lsr.w	r3, r2, r3
 8012e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012e38:	e01c      	b.n	8012e74 <UART_SetConfig+0x6d0>
 8012e3a:	bf00      	nop
 8012e3c:	40011400 	.word	0x40011400
 8012e40:	58024400 	.word	0x58024400
 8012e44:	40007800 	.word	0x40007800
 8012e48:	40007c00 	.word	0x40007c00
 8012e4c:	58000c00 	.word	0x58000c00
 8012e50:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8012e54:	4b9d      	ldr	r3, [pc, #628]	@ (80130cc <UART_SetConfig+0x928>)
 8012e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e58:	e00c      	b.n	8012e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012e5a:	4b9d      	ldr	r3, [pc, #628]	@ (80130d0 <UART_SetConfig+0x92c>)
 8012e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e5e:	e009      	b.n	8012e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e66:	e005      	b.n	8012e74 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012e72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	f000 81de 	beq.w	8013238 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e80:	4a94      	ldr	r2, [pc, #592]	@ (80130d4 <UART_SetConfig+0x930>)
 8012e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012e86:	461a      	mov	r2, r3
 8012e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e8e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	685a      	ldr	r2, [r3, #4]
 8012e94:	4613      	mov	r3, r2
 8012e96:	005b      	lsls	r3, r3, #1
 8012e98:	4413      	add	r3, r2
 8012e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d305      	bcc.n	8012eac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d903      	bls.n	8012eb4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8012eac:	2301      	movs	r3, #1
 8012eae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012eb2:	e1c1      	b.n	8013238 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	60bb      	str	r3, [r7, #8]
 8012eba:	60fa      	str	r2, [r7, #12]
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ec0:	4a84      	ldr	r2, [pc, #528]	@ (80130d4 <UART_SetConfig+0x930>)
 8012ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ec6:	b29b      	uxth	r3, r3
 8012ec8:	2200      	movs	r2, #0
 8012eca:	603b      	str	r3, [r7, #0]
 8012ecc:	607a      	str	r2, [r7, #4]
 8012ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012ed6:	f7ed fa5b 	bl	8000390 <__aeabi_uldivmod>
 8012eda:	4602      	mov	r2, r0
 8012edc:	460b      	mov	r3, r1
 8012ede:	4610      	mov	r0, r2
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	f04f 0200 	mov.w	r2, #0
 8012ee6:	f04f 0300 	mov.w	r3, #0
 8012eea:	020b      	lsls	r3, r1, #8
 8012eec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012ef0:	0202      	lsls	r2, r0, #8
 8012ef2:	6979      	ldr	r1, [r7, #20]
 8012ef4:	6849      	ldr	r1, [r1, #4]
 8012ef6:	0849      	lsrs	r1, r1, #1
 8012ef8:	2000      	movs	r0, #0
 8012efa:	460c      	mov	r4, r1
 8012efc:	4605      	mov	r5, r0
 8012efe:	eb12 0804 	adds.w	r8, r2, r4
 8012f02:	eb43 0905 	adc.w	r9, r3, r5
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	469a      	mov	sl, r3
 8012f0e:	4693      	mov	fp, r2
 8012f10:	4652      	mov	r2, sl
 8012f12:	465b      	mov	r3, fp
 8012f14:	4640      	mov	r0, r8
 8012f16:	4649      	mov	r1, r9
 8012f18:	f7ed fa3a 	bl	8000390 <__aeabi_uldivmod>
 8012f1c:	4602      	mov	r2, r0
 8012f1e:	460b      	mov	r3, r1
 8012f20:	4613      	mov	r3, r2
 8012f22:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012f2a:	d308      	bcc.n	8012f3e <UART_SetConfig+0x79a>
 8012f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012f32:	d204      	bcs.n	8012f3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012f3a:	60da      	str	r2, [r3, #12]
 8012f3c:	e17c      	b.n	8013238 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8012f3e:	2301      	movs	r3, #1
 8012f40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012f44:	e178      	b.n	8013238 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	69db      	ldr	r3, [r3, #28]
 8012f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012f4e:	f040 80c5 	bne.w	80130dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8012f52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012f56:	2b20      	cmp	r3, #32
 8012f58:	dc48      	bgt.n	8012fec <UART_SetConfig+0x848>
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	db7b      	blt.n	8013056 <UART_SetConfig+0x8b2>
 8012f5e:	2b20      	cmp	r3, #32
 8012f60:	d879      	bhi.n	8013056 <UART_SetConfig+0x8b2>
 8012f62:	a201      	add	r2, pc, #4	@ (adr r2, 8012f68 <UART_SetConfig+0x7c4>)
 8012f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f68:	08012ff3 	.word	0x08012ff3
 8012f6c:	08012ffb 	.word	0x08012ffb
 8012f70:	08013057 	.word	0x08013057
 8012f74:	08013057 	.word	0x08013057
 8012f78:	08013003 	.word	0x08013003
 8012f7c:	08013057 	.word	0x08013057
 8012f80:	08013057 	.word	0x08013057
 8012f84:	08013057 	.word	0x08013057
 8012f88:	08013013 	.word	0x08013013
 8012f8c:	08013057 	.word	0x08013057
 8012f90:	08013057 	.word	0x08013057
 8012f94:	08013057 	.word	0x08013057
 8012f98:	08013057 	.word	0x08013057
 8012f9c:	08013057 	.word	0x08013057
 8012fa0:	08013057 	.word	0x08013057
 8012fa4:	08013057 	.word	0x08013057
 8012fa8:	08013023 	.word	0x08013023
 8012fac:	08013057 	.word	0x08013057
 8012fb0:	08013057 	.word	0x08013057
 8012fb4:	08013057 	.word	0x08013057
 8012fb8:	08013057 	.word	0x08013057
 8012fbc:	08013057 	.word	0x08013057
 8012fc0:	08013057 	.word	0x08013057
 8012fc4:	08013057 	.word	0x08013057
 8012fc8:	08013057 	.word	0x08013057
 8012fcc:	08013057 	.word	0x08013057
 8012fd0:	08013057 	.word	0x08013057
 8012fd4:	08013057 	.word	0x08013057
 8012fd8:	08013057 	.word	0x08013057
 8012fdc:	08013057 	.word	0x08013057
 8012fe0:	08013057 	.word	0x08013057
 8012fe4:	08013057 	.word	0x08013057
 8012fe8:	08013049 	.word	0x08013049
 8012fec:	2b40      	cmp	r3, #64	@ 0x40
 8012fee:	d02e      	beq.n	801304e <UART_SetConfig+0x8aa>
 8012ff0:	e031      	b.n	8013056 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012ff2:	f7fb f9d7 	bl	800e3a4 <HAL_RCC_GetPCLK1Freq>
 8012ff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012ff8:	e033      	b.n	8013062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012ffa:	f7fb f9e9 	bl	800e3d0 <HAL_RCC_GetPCLK2Freq>
 8012ffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013000:	e02f      	b.n	8013062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013006:	4618      	mov	r0, r3
 8013008:	f7fd f998 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801300c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801300e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013010:	e027      	b.n	8013062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013012:	f107 0318 	add.w	r3, r7, #24
 8013016:	4618      	mov	r0, r3
 8013018:	f7fd fae4 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013020:	e01f      	b.n	8013062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013022:	4b2d      	ldr	r3, [pc, #180]	@ (80130d8 <UART_SetConfig+0x934>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	f003 0320 	and.w	r3, r3, #32
 801302a:	2b00      	cmp	r3, #0
 801302c:	d009      	beq.n	8013042 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801302e:	4b2a      	ldr	r3, [pc, #168]	@ (80130d8 <UART_SetConfig+0x934>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	08db      	lsrs	r3, r3, #3
 8013034:	f003 0303 	and.w	r3, r3, #3
 8013038:	4a24      	ldr	r2, [pc, #144]	@ (80130cc <UART_SetConfig+0x928>)
 801303a:	fa22 f303 	lsr.w	r3, r2, r3
 801303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013040:	e00f      	b.n	8013062 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013042:	4b22      	ldr	r3, [pc, #136]	@ (80130cc <UART_SetConfig+0x928>)
 8013044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013046:	e00c      	b.n	8013062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013048:	4b21      	ldr	r3, [pc, #132]	@ (80130d0 <UART_SetConfig+0x92c>)
 801304a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801304c:	e009      	b.n	8013062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801304e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013054:	e005      	b.n	8013062 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013056:	2300      	movs	r3, #0
 8013058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801305a:	2301      	movs	r3, #1
 801305c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013064:	2b00      	cmp	r3, #0
 8013066:	f000 80e7 	beq.w	8013238 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801306e:	4a19      	ldr	r2, [pc, #100]	@ (80130d4 <UART_SetConfig+0x930>)
 8013070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013074:	461a      	mov	r2, r3
 8013076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013078:	fbb3 f3f2 	udiv	r3, r3, r2
 801307c:	005a      	lsls	r2, r3, #1
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	685b      	ldr	r3, [r3, #4]
 8013082:	085b      	lsrs	r3, r3, #1
 8013084:	441a      	add	r2, r3
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	685b      	ldr	r3, [r3, #4]
 801308a:	fbb2 f3f3 	udiv	r3, r2, r3
 801308e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013092:	2b0f      	cmp	r3, #15
 8013094:	d916      	bls.n	80130c4 <UART_SetConfig+0x920>
 8013096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801309c:	d212      	bcs.n	80130c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801309e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	f023 030f 	bic.w	r3, r3, #15
 80130a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80130a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130aa:	085b      	lsrs	r3, r3, #1
 80130ac:	b29b      	uxth	r3, r3
 80130ae:	f003 0307 	and.w	r3, r3, #7
 80130b2:	b29a      	uxth	r2, r3
 80130b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80130b6:	4313      	orrs	r3, r2
 80130b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80130c0:	60da      	str	r2, [r3, #12]
 80130c2:	e0b9      	b.n	8013238 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80130c4:	2301      	movs	r3, #1
 80130c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80130ca:	e0b5      	b.n	8013238 <UART_SetConfig+0xa94>
 80130cc:	03d09000 	.word	0x03d09000
 80130d0:	003d0900 	.word	0x003d0900
 80130d4:	08018dec 	.word	0x08018dec
 80130d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80130dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80130e0:	2b20      	cmp	r3, #32
 80130e2:	dc49      	bgt.n	8013178 <UART_SetConfig+0x9d4>
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	db7c      	blt.n	80131e2 <UART_SetConfig+0xa3e>
 80130e8:	2b20      	cmp	r3, #32
 80130ea:	d87a      	bhi.n	80131e2 <UART_SetConfig+0xa3e>
 80130ec:	a201      	add	r2, pc, #4	@ (adr r2, 80130f4 <UART_SetConfig+0x950>)
 80130ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130f2:	bf00      	nop
 80130f4:	0801317f 	.word	0x0801317f
 80130f8:	08013187 	.word	0x08013187
 80130fc:	080131e3 	.word	0x080131e3
 8013100:	080131e3 	.word	0x080131e3
 8013104:	0801318f 	.word	0x0801318f
 8013108:	080131e3 	.word	0x080131e3
 801310c:	080131e3 	.word	0x080131e3
 8013110:	080131e3 	.word	0x080131e3
 8013114:	0801319f 	.word	0x0801319f
 8013118:	080131e3 	.word	0x080131e3
 801311c:	080131e3 	.word	0x080131e3
 8013120:	080131e3 	.word	0x080131e3
 8013124:	080131e3 	.word	0x080131e3
 8013128:	080131e3 	.word	0x080131e3
 801312c:	080131e3 	.word	0x080131e3
 8013130:	080131e3 	.word	0x080131e3
 8013134:	080131af 	.word	0x080131af
 8013138:	080131e3 	.word	0x080131e3
 801313c:	080131e3 	.word	0x080131e3
 8013140:	080131e3 	.word	0x080131e3
 8013144:	080131e3 	.word	0x080131e3
 8013148:	080131e3 	.word	0x080131e3
 801314c:	080131e3 	.word	0x080131e3
 8013150:	080131e3 	.word	0x080131e3
 8013154:	080131e3 	.word	0x080131e3
 8013158:	080131e3 	.word	0x080131e3
 801315c:	080131e3 	.word	0x080131e3
 8013160:	080131e3 	.word	0x080131e3
 8013164:	080131e3 	.word	0x080131e3
 8013168:	080131e3 	.word	0x080131e3
 801316c:	080131e3 	.word	0x080131e3
 8013170:	080131e3 	.word	0x080131e3
 8013174:	080131d5 	.word	0x080131d5
 8013178:	2b40      	cmp	r3, #64	@ 0x40
 801317a:	d02e      	beq.n	80131da <UART_SetConfig+0xa36>
 801317c:	e031      	b.n	80131e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801317e:	f7fb f911 	bl	800e3a4 <HAL_RCC_GetPCLK1Freq>
 8013182:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013184:	e033      	b.n	80131ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013186:	f7fb f923 	bl	800e3d0 <HAL_RCC_GetPCLK2Freq>
 801318a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801318c:	e02f      	b.n	80131ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801318e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013192:	4618      	mov	r0, r3
 8013194:	f7fd f8d2 	bl	801033c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801319a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801319c:	e027      	b.n	80131ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801319e:	f107 0318 	add.w	r3, r7, #24
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7fd fa1e 	bl	80105e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131ac:	e01f      	b.n	80131ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80131ae:	4b2d      	ldr	r3, [pc, #180]	@ (8013264 <UART_SetConfig+0xac0>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	f003 0320 	and.w	r3, r3, #32
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d009      	beq.n	80131ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80131ba:	4b2a      	ldr	r3, [pc, #168]	@ (8013264 <UART_SetConfig+0xac0>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	08db      	lsrs	r3, r3, #3
 80131c0:	f003 0303 	and.w	r3, r3, #3
 80131c4:	4a28      	ldr	r2, [pc, #160]	@ (8013268 <UART_SetConfig+0xac4>)
 80131c6:	fa22 f303 	lsr.w	r3, r2, r3
 80131ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80131cc:	e00f      	b.n	80131ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80131ce:	4b26      	ldr	r3, [pc, #152]	@ (8013268 <UART_SetConfig+0xac4>)
 80131d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131d2:	e00c      	b.n	80131ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80131d4:	4b25      	ldr	r3, [pc, #148]	@ (801326c <UART_SetConfig+0xac8>)
 80131d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131d8:	e009      	b.n	80131ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80131da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80131de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131e0:	e005      	b.n	80131ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80131e2:	2300      	movs	r3, #0
 80131e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80131e6:	2301      	movs	r3, #1
 80131e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80131ec:	bf00      	nop
    }

    if (pclk != 0U)
 80131ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d021      	beq.n	8013238 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131f8:	4a1d      	ldr	r2, [pc, #116]	@ (8013270 <UART_SetConfig+0xacc>)
 80131fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80131fe:	461a      	mov	r2, r3
 8013200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013202:	fbb3 f2f2 	udiv	r2, r3, r2
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	085b      	lsrs	r3, r3, #1
 801320c:	441a      	add	r2, r3
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	fbb2 f3f3 	udiv	r3, r2, r3
 8013216:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801321a:	2b0f      	cmp	r3, #15
 801321c:	d909      	bls.n	8013232 <UART_SetConfig+0xa8e>
 801321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013224:	d205      	bcs.n	8013232 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013228:	b29a      	uxth	r2, r3
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	60da      	str	r2, [r3, #12]
 8013230:	e002      	b.n	8013238 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013232:	2301      	movs	r3, #1
 8013234:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	2201      	movs	r2, #1
 801323c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	2201      	movs	r2, #1
 8013244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	2200      	movs	r2, #0
 801324c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	2200      	movs	r2, #0
 8013252:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013254:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8013258:	4618      	mov	r0, r3
 801325a:	3748      	adds	r7, #72	@ 0x48
 801325c:	46bd      	mov	sp, r7
 801325e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013262:	bf00      	nop
 8013264:	58024400 	.word	0x58024400
 8013268:	03d09000 	.word	0x03d09000
 801326c:	003d0900 	.word	0x003d0900
 8013270:	08018dec 	.word	0x08018dec

08013274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013274:	b480      	push	{r7}
 8013276:	b083      	sub	sp, #12
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013280:	f003 0308 	and.w	r3, r3, #8
 8013284:	2b00      	cmp	r3, #0
 8013286:	d00a      	beq.n	801329e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	685b      	ldr	r3, [r3, #4]
 801328e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	430a      	orrs	r2, r1
 801329c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132a2:	f003 0301 	and.w	r3, r3, #1
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d00a      	beq.n	80132c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	430a      	orrs	r2, r1
 80132be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132c4:	f003 0302 	and.w	r3, r3, #2
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00a      	beq.n	80132e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	430a      	orrs	r2, r1
 80132e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132e6:	f003 0304 	and.w	r3, r3, #4
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d00a      	beq.n	8013304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	685b      	ldr	r3, [r3, #4]
 80132f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	430a      	orrs	r2, r1
 8013302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013308:	f003 0310 	and.w	r3, r3, #16
 801330c:	2b00      	cmp	r3, #0
 801330e:	d00a      	beq.n	8013326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	689b      	ldr	r3, [r3, #8]
 8013316:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	430a      	orrs	r2, r1
 8013324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801332a:	f003 0320 	and.w	r3, r3, #32
 801332e:	2b00      	cmp	r3, #0
 8013330:	d00a      	beq.n	8013348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	689b      	ldr	r3, [r3, #8]
 8013338:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	430a      	orrs	r2, r1
 8013346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801334c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013350:	2b00      	cmp	r3, #0
 8013352:	d01a      	beq.n	801338a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	430a      	orrs	r2, r1
 8013368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801336e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013372:	d10a      	bne.n	801338a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	430a      	orrs	r2, r1
 8013388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801338e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013392:	2b00      	cmp	r3, #0
 8013394:	d00a      	beq.n	80133ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	685b      	ldr	r3, [r3, #4]
 801339c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	430a      	orrs	r2, r1
 80133aa:	605a      	str	r2, [r3, #4]
  }
}
 80133ac:	bf00      	nop
 80133ae:	370c      	adds	r7, #12
 80133b0:	46bd      	mov	sp, r7
 80133b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b6:	4770      	bx	lr

080133b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b098      	sub	sp, #96	@ 0x60
 80133bc:	af02      	add	r7, sp, #8
 80133be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2200      	movs	r2, #0
 80133c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80133c8:	f7ef f9c8 	bl	800275c <HAL_GetTick>
 80133cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	f003 0308 	and.w	r3, r3, #8
 80133d8:	2b08      	cmp	r3, #8
 80133da:	d12f      	bne.n	801343c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80133dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80133e0:	9300      	str	r3, [sp, #0]
 80133e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133e4:	2200      	movs	r2, #0
 80133e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f000 f88e 	bl	801350c <UART_WaitOnFlagUntilTimeout>
 80133f0:	4603      	mov	r3, r0
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d022      	beq.n	801343c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133fe:	e853 3f00 	ldrex	r3, [r3]
 8013402:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801340a:	653b      	str	r3, [r7, #80]	@ 0x50
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	461a      	mov	r2, r3
 8013412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013414:	647b      	str	r3, [r7, #68]	@ 0x44
 8013416:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801341a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801341c:	e841 2300 	strex	r3, r2, [r1]
 8013420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013424:	2b00      	cmp	r3, #0
 8013426:	d1e6      	bne.n	80133f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2220      	movs	r2, #32
 801342c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2200      	movs	r2, #0
 8013434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013438:	2303      	movs	r3, #3
 801343a:	e063      	b.n	8013504 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f003 0304 	and.w	r3, r3, #4
 8013446:	2b04      	cmp	r3, #4
 8013448:	d149      	bne.n	80134de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801344a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013452:	2200      	movs	r2, #0
 8013454:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f000 f857 	bl	801350c <UART_WaitOnFlagUntilTimeout>
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d03c      	beq.n	80134de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801346c:	e853 3f00 	ldrex	r3, [r3]
 8013470:	623b      	str	r3, [r7, #32]
   return(result);
 8013472:	6a3b      	ldr	r3, [r7, #32]
 8013474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	461a      	mov	r2, r3
 8013480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013482:	633b      	str	r3, [r7, #48]	@ 0x30
 8013484:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801348a:	e841 2300 	strex	r3, r2, [r1]
 801348e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013492:	2b00      	cmp	r3, #0
 8013494:	d1e6      	bne.n	8013464 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	3308      	adds	r3, #8
 801349c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	e853 3f00 	ldrex	r3, [r3]
 80134a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	f023 0301 	bic.w	r3, r3, #1
 80134ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	3308      	adds	r3, #8
 80134b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80134b6:	61fa      	str	r2, [r7, #28]
 80134b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134ba:	69b9      	ldr	r1, [r7, #24]
 80134bc:	69fa      	ldr	r2, [r7, #28]
 80134be:	e841 2300 	strex	r3, r2, [r1]
 80134c2:	617b      	str	r3, [r7, #20]
   return(result);
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d1e5      	bne.n	8013496 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2220      	movs	r2, #32
 80134ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2200      	movs	r2, #0
 80134d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80134da:	2303      	movs	r3, #3
 80134dc:	e012      	b.n	8013504 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2220      	movs	r2, #32
 80134e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	2220      	movs	r2, #32
 80134ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2200      	movs	r2, #0
 80134f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2200      	movs	r2, #0
 80134f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2200      	movs	r2, #0
 80134fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013502:	2300      	movs	r3, #0
}
 8013504:	4618      	mov	r0, r3
 8013506:	3758      	adds	r7, #88	@ 0x58
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	60f8      	str	r0, [r7, #12]
 8013514:	60b9      	str	r1, [r7, #8]
 8013516:	603b      	str	r3, [r7, #0]
 8013518:	4613      	mov	r3, r2
 801351a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801351c:	e04f      	b.n	80135be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013524:	d04b      	beq.n	80135be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013526:	f7ef f919 	bl	800275c <HAL_GetTick>
 801352a:	4602      	mov	r2, r0
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	1ad3      	subs	r3, r2, r3
 8013530:	69ba      	ldr	r2, [r7, #24]
 8013532:	429a      	cmp	r2, r3
 8013534:	d302      	bcc.n	801353c <UART_WaitOnFlagUntilTimeout+0x30>
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d101      	bne.n	8013540 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801353c:	2303      	movs	r3, #3
 801353e:	e04e      	b.n	80135de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	f003 0304 	and.w	r3, r3, #4
 801354a:	2b00      	cmp	r3, #0
 801354c:	d037      	beq.n	80135be <UART_WaitOnFlagUntilTimeout+0xb2>
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	2b80      	cmp	r3, #128	@ 0x80
 8013552:	d034      	beq.n	80135be <UART_WaitOnFlagUntilTimeout+0xb2>
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	2b40      	cmp	r3, #64	@ 0x40
 8013558:	d031      	beq.n	80135be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	69db      	ldr	r3, [r3, #28]
 8013560:	f003 0308 	and.w	r3, r3, #8
 8013564:	2b08      	cmp	r3, #8
 8013566:	d110      	bne.n	801358a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	2208      	movs	r2, #8
 801356e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013570:	68f8      	ldr	r0, [r7, #12]
 8013572:	f000 f921 	bl	80137b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	2208      	movs	r2, #8
 801357a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	2200      	movs	r2, #0
 8013582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013586:	2301      	movs	r3, #1
 8013588:	e029      	b.n	80135de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	69db      	ldr	r3, [r3, #28]
 8013590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013598:	d111      	bne.n	80135be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80135a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80135a4:	68f8      	ldr	r0, [r7, #12]
 80135a6:	f000 f907 	bl	80137b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2220      	movs	r2, #32
 80135ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2200      	movs	r2, #0
 80135b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80135ba:	2303      	movs	r3, #3
 80135bc:	e00f      	b.n	80135de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	69da      	ldr	r2, [r3, #28]
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	4013      	ands	r3, r2
 80135c8:	68ba      	ldr	r2, [r7, #8]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	bf0c      	ite	eq
 80135ce:	2301      	moveq	r3, #1
 80135d0:	2300      	movne	r3, #0
 80135d2:	b2db      	uxtb	r3, r3
 80135d4:	461a      	mov	r2, r3
 80135d6:	79fb      	ldrb	r3, [r7, #7]
 80135d8:	429a      	cmp	r2, r3
 80135da:	d0a0      	beq.n	801351e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80135dc:	2300      	movs	r3, #0
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3710      	adds	r7, #16
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
	...

080135e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b096      	sub	sp, #88	@ 0x58
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	60f8      	str	r0, [r7, #12]
 80135f0:	60b9      	str	r1, [r7, #8]
 80135f2:	4613      	mov	r3, r2
 80135f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	68ba      	ldr	r2, [r7, #8]
 80135fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	88fa      	ldrh	r2, [r7, #6]
 8013600:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2200      	movs	r2, #0
 8013608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2222      	movs	r2, #34	@ 0x22
 8013610:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801361a:	2b00      	cmp	r3, #0
 801361c:	d02d      	beq.n	801367a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013624:	4a40      	ldr	r2, [pc, #256]	@ (8013728 <UART_Start_Receive_DMA+0x140>)
 8013626:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801362e:	4a3f      	ldr	r2, [pc, #252]	@ (801372c <UART_Start_Receive_DMA+0x144>)
 8013630:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013638:	4a3d      	ldr	r2, [pc, #244]	@ (8013730 <UART_Start_Receive_DMA+0x148>)
 801363a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013642:	2200      	movs	r2, #0
 8013644:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	3324      	adds	r3, #36	@ 0x24
 8013652:	4619      	mov	r1, r3
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013658:	461a      	mov	r2, r3
 801365a:	88fb      	ldrh	r3, [r7, #6]
 801365c:	f7f1 f850 	bl	8004700 <HAL_DMA_Start_IT>
 8013660:	4603      	mov	r3, r0
 8013662:	2b00      	cmp	r3, #0
 8013664:	d009      	beq.n	801367a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	2210      	movs	r2, #16
 801366a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	2220      	movs	r2, #32
 8013672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8013676:	2301      	movs	r3, #1
 8013678:	e051      	b.n	801371e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	691b      	ldr	r3, [r3, #16]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d018      	beq.n	80136b4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801368a:	e853 3f00 	ldrex	r3, [r3]
 801368e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013696:	657b      	str	r3, [r7, #84]	@ 0x54
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	461a      	mov	r2, r3
 801369e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80136a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80136a8:	e841 2300 	strex	r3, r2, [r1]
 80136ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80136ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d1e6      	bne.n	8013682 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	3308      	adds	r3, #8
 80136ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136be:	e853 3f00 	ldrex	r3, [r3]
 80136c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80136c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c6:	f043 0301 	orr.w	r3, r3, #1
 80136ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	3308      	adds	r3, #8
 80136d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80136d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80136d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80136da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80136dc:	e841 2300 	strex	r3, r2, [r1]
 80136e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80136e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d1e5      	bne.n	80136b4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	3308      	adds	r3, #8
 80136ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	e853 3f00 	ldrex	r3, [r3]
 80136f6:	613b      	str	r3, [r7, #16]
   return(result);
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	3308      	adds	r3, #8
 8013706:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013708:	623a      	str	r2, [r7, #32]
 801370a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801370c:	69f9      	ldr	r1, [r7, #28]
 801370e:	6a3a      	ldr	r2, [r7, #32]
 8013710:	e841 2300 	strex	r3, r2, [r1]
 8013714:	61bb      	str	r3, [r7, #24]
   return(result);
 8013716:	69bb      	ldr	r3, [r7, #24]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d1e5      	bne.n	80136e8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801371c:	2300      	movs	r3, #0
}
 801371e:	4618      	mov	r0, r3
 8013720:	3758      	adds	r7, #88	@ 0x58
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	08013885 	.word	0x08013885
 801372c:	080139ad 	.word	0x080139ad
 8013730:	080139eb 	.word	0x080139eb

08013734 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013734:	b480      	push	{r7}
 8013736:	b08f      	sub	sp, #60	@ 0x3c
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013742:	6a3b      	ldr	r3, [r7, #32]
 8013744:	e853 3f00 	ldrex	r3, [r3]
 8013748:	61fb      	str	r3, [r7, #28]
   return(result);
 801374a:	69fb      	ldr	r3, [r7, #28]
 801374c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013750:	637b      	str	r3, [r7, #52]	@ 0x34
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	461a      	mov	r2, r3
 8013758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801375c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801375e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013762:	e841 2300 	strex	r3, r2, [r1]
 8013766:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801376a:	2b00      	cmp	r3, #0
 801376c:	d1e6      	bne.n	801373c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	3308      	adds	r3, #8
 8013774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	e853 3f00 	ldrex	r3, [r3]
 801377c:	60bb      	str	r3, [r7, #8]
   return(result);
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8013784:	633b      	str	r3, [r7, #48]	@ 0x30
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	3308      	adds	r3, #8
 801378c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801378e:	61ba      	str	r2, [r7, #24]
 8013790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013792:	6979      	ldr	r1, [r7, #20]
 8013794:	69ba      	ldr	r2, [r7, #24]
 8013796:	e841 2300 	strex	r3, r2, [r1]
 801379a:	613b      	str	r3, [r7, #16]
   return(result);
 801379c:	693b      	ldr	r3, [r7, #16]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d1e5      	bne.n	801376e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2220      	movs	r2, #32
 80137a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80137aa:	bf00      	nop
 80137ac:	373c      	adds	r7, #60	@ 0x3c
 80137ae:	46bd      	mov	sp, r7
 80137b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b4:	4770      	bx	lr
	...

080137b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b095      	sub	sp, #84	@ 0x54
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137c8:	e853 3f00 	ldrex	r3, [r3]
 80137cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80137ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80137d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	461a      	mov	r2, r3
 80137dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137de:	643b      	str	r3, [r7, #64]	@ 0x40
 80137e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80137e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80137e6:	e841 2300 	strex	r3, r2, [r1]
 80137ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80137ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d1e6      	bne.n	80137c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	3308      	adds	r3, #8
 80137f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137fa:	6a3b      	ldr	r3, [r7, #32]
 80137fc:	e853 3f00 	ldrex	r3, [r3]
 8013800:	61fb      	str	r3, [r7, #28]
   return(result);
 8013802:	69fa      	ldr	r2, [r7, #28]
 8013804:	4b1e      	ldr	r3, [pc, #120]	@ (8013880 <UART_EndRxTransfer+0xc8>)
 8013806:	4013      	ands	r3, r2
 8013808:	64bb      	str	r3, [r7, #72]	@ 0x48
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	3308      	adds	r3, #8
 8013810:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013814:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801381a:	e841 2300 	strex	r3, r2, [r1]
 801381e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013822:	2b00      	cmp	r3, #0
 8013824:	d1e5      	bne.n	80137f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801382a:	2b01      	cmp	r3, #1
 801382c:	d118      	bne.n	8013860 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	e853 3f00 	ldrex	r3, [r3]
 801383a:	60bb      	str	r3, [r7, #8]
   return(result);
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	f023 0310 	bic.w	r3, r3, #16
 8013842:	647b      	str	r3, [r7, #68]	@ 0x44
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	461a      	mov	r2, r3
 801384a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801384c:	61bb      	str	r3, [r7, #24]
 801384e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013850:	6979      	ldr	r1, [r7, #20]
 8013852:	69ba      	ldr	r2, [r7, #24]
 8013854:	e841 2300 	strex	r3, r2, [r1]
 8013858:	613b      	str	r3, [r7, #16]
   return(result);
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d1e6      	bne.n	801382e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2220      	movs	r2, #32
 8013864:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2200      	movs	r2, #0
 801386c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2200      	movs	r2, #0
 8013872:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013874:	bf00      	nop
 8013876:	3754      	adds	r7, #84	@ 0x54
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr
 8013880:	effffffe 	.word	0xeffffffe

08013884 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b09c      	sub	sp, #112	@ 0x70
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013890:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	69db      	ldr	r3, [r3, #28]
 8013896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801389a:	d071      	beq.n	8013980 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801389c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801389e:	2200      	movs	r2, #0
 80138a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80138a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138ac:	e853 3f00 	ldrex	r3, [r3]
 80138b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80138b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80138b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80138b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80138ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	461a      	mov	r2, r3
 80138c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80138c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80138c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80138c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80138ca:	e841 2300 	strex	r3, r2, [r1]
 80138ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80138d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d1e6      	bne.n	80138a4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80138d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	3308      	adds	r3, #8
 80138dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e0:	e853 3f00 	ldrex	r3, [r3]
 80138e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80138e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138e8:	f023 0301 	bic.w	r3, r3, #1
 80138ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80138ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	3308      	adds	r3, #8
 80138f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80138f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80138f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80138fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80138fe:	e841 2300 	strex	r3, r2, [r1]
 8013902:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013906:	2b00      	cmp	r3, #0
 8013908:	d1e5      	bne.n	80138d6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801390a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	3308      	adds	r3, #8
 8013910:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013914:	e853 3f00 	ldrex	r3, [r3]
 8013918:	623b      	str	r3, [r7, #32]
   return(result);
 801391a:	6a3b      	ldr	r3, [r7, #32]
 801391c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013920:	663b      	str	r3, [r7, #96]	@ 0x60
 8013922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	3308      	adds	r3, #8
 8013928:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801392a:	633a      	str	r2, [r7, #48]	@ 0x30
 801392c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801392e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013932:	e841 2300 	strex	r3, r2, [r1]
 8013936:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801393a:	2b00      	cmp	r3, #0
 801393c:	d1e5      	bne.n	801390a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801393e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013940:	2220      	movs	r2, #32
 8013942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801394a:	2b01      	cmp	r3, #1
 801394c:	d118      	bne.n	8013980 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801394e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	e853 3f00 	ldrex	r3, [r3]
 801395a:	60fb      	str	r3, [r7, #12]
   return(result);
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f023 0310 	bic.w	r3, r3, #16
 8013962:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	461a      	mov	r2, r3
 801396a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801396c:	61fb      	str	r3, [r7, #28]
 801396e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013970:	69b9      	ldr	r1, [r7, #24]
 8013972:	69fa      	ldr	r2, [r7, #28]
 8013974:	e841 2300 	strex	r3, r2, [r1]
 8013978:	617b      	str	r3, [r7, #20]
   return(result);
 801397a:	697b      	ldr	r3, [r7, #20]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d1e6      	bne.n	801394e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013982:	2200      	movs	r2, #0
 8013984:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801398a:	2b01      	cmp	r3, #1
 801398c:	d107      	bne.n	801399e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801398e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013990:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013994:	4619      	mov	r1, r3
 8013996:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013998:	f7fe fef8 	bl	801278c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801399c:	e002      	b.n	80139a4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801399e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80139a0:	f7ed fc70 	bl	8001284 <HAL_UART_RxCpltCallback>
}
 80139a4:	bf00      	nop
 80139a6:	3770      	adds	r7, #112	@ 0x70
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}

080139ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b084      	sub	sp, #16
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	2201      	movs	r2, #1
 80139be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	d109      	bne.n	80139dc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80139ce:	085b      	lsrs	r3, r3, #1
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	4619      	mov	r1, r3
 80139d4:	68f8      	ldr	r0, [r7, #12]
 80139d6:	f7fe fed9 	bl	801278c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80139da:	e002      	b.n	80139e2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80139dc:	68f8      	ldr	r0, [r7, #12]
 80139de:	f7fe fec1 	bl	8012764 <HAL_UART_RxHalfCpltCallback>
}
 80139e2:	bf00      	nop
 80139e4:	3710      	adds	r7, #16
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}

080139ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80139ea:	b580      	push	{r7, lr}
 80139ec:	b086      	sub	sp, #24
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80139fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013a00:	697b      	ldr	r3, [r7, #20]
 8013a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013a06:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	689b      	ldr	r3, [r3, #8]
 8013a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013a12:	2b80      	cmp	r3, #128	@ 0x80
 8013a14:	d109      	bne.n	8013a2a <UART_DMAError+0x40>
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	2b21      	cmp	r3, #33	@ 0x21
 8013a1a:	d106      	bne.n	8013a2a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013a24:	6978      	ldr	r0, [r7, #20]
 8013a26:	f7ff fe85 	bl	8013734 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	689b      	ldr	r3, [r3, #8]
 8013a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a34:	2b40      	cmp	r3, #64	@ 0x40
 8013a36:	d109      	bne.n	8013a4c <UART_DMAError+0x62>
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2b22      	cmp	r3, #34	@ 0x22
 8013a3c:	d106      	bne.n	8013a4c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	2200      	movs	r2, #0
 8013a42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013a46:	6978      	ldr	r0, [r7, #20]
 8013a48:	f7ff feb6 	bl	80137b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013a52:	f043 0210 	orr.w	r2, r3, #16
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013a5c:	6978      	ldr	r0, [r7, #20]
 8013a5e:	f7fe fe8b 	bl	8012778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013a62:	bf00      	nop
 8013a64:	3718      	adds	r7, #24
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013a6a:	b580      	push	{r7, lr}
 8013a6c:	b084      	sub	sp, #16
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013a80:	68f8      	ldr	r0, [r7, #12]
 8013a82:	f7fe fe79 	bl	8012778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013a86:	bf00      	nop
 8013a88:	3710      	adds	r7, #16
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}

08013a8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013a8e:	b580      	push	{r7, lr}
 8013a90:	b088      	sub	sp, #32
 8013a92:	af00      	add	r7, sp, #0
 8013a94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	e853 3f00 	ldrex	r3, [r3]
 8013aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013aaa:	61fb      	str	r3, [r7, #28]
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	69fb      	ldr	r3, [r7, #28]
 8013ab4:	61bb      	str	r3, [r7, #24]
 8013ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ab8:	6979      	ldr	r1, [r7, #20]
 8013aba:	69ba      	ldr	r2, [r7, #24]
 8013abc:	e841 2300 	strex	r3, r2, [r1]
 8013ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d1e6      	bne.n	8013a96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2220      	movs	r2, #32
 8013acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f7fe fe3a 	bl	8012750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013adc:	bf00      	nop
 8013ade:	3720      	adds	r7, #32
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	b083      	sub	sp, #12
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013aec:	bf00      	nop
 8013aee:	370c      	adds	r7, #12
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr

08013af8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013af8:	b480      	push	{r7}
 8013afa:	b083      	sub	sp, #12
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013b00:	bf00      	nop
 8013b02:	370c      	adds	r7, #12
 8013b04:	46bd      	mov	sp, r7
 8013b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0a:	4770      	bx	lr

08013b0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013b0c:	b480      	push	{r7}
 8013b0e:	b083      	sub	sp, #12
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013b14:	bf00      	nop
 8013b16:	370c      	adds	r7, #12
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr

08013b20 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b084      	sub	sp, #16
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013b2e:	2b01      	cmp	r3, #1
 8013b30:	d101      	bne.n	8013b36 <HAL_UARTEx_EnableFifoMode+0x16>
 8013b32:	2302      	movs	r3, #2
 8013b34:	e02b      	b.n	8013b8e <HAL_UARTEx_EnableFifoMode+0x6e>
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2201      	movs	r2, #1
 8013b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	2224      	movs	r2, #36	@ 0x24
 8013b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	681a      	ldr	r2, [r3, #0]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	f022 0201 	bic.w	r2, r2, #1
 8013b5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013b64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8013b6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	68fa      	ldr	r2, [r7, #12]
 8013b74:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f000 f88a 	bl	8013c90 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2220      	movs	r2, #32
 8013b80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2200      	movs	r2, #0
 8013b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013b8c:	2300      	movs	r3, #0
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3710      	adds	r7, #16
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}

08013b96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013b96:	b580      	push	{r7, lr}
 8013b98:	b084      	sub	sp, #16
 8013b9a:	af00      	add	r7, sp, #0
 8013b9c:	6078      	str	r0, [r7, #4]
 8013b9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013ba6:	2b01      	cmp	r3, #1
 8013ba8:	d101      	bne.n	8013bae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013baa:	2302      	movs	r3, #2
 8013bac:	e02d      	b.n	8013c0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	2201      	movs	r2, #1
 8013bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2224      	movs	r2, #36	@ 0x24
 8013bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	f022 0201 	bic.w	r2, r2, #1
 8013bd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	689b      	ldr	r3, [r3, #8]
 8013bdc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	683a      	ldr	r2, [r7, #0]
 8013be6:	430a      	orrs	r2, r1
 8013be8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f000 f850 	bl	8013c90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	68fa      	ldr	r2, [r7, #12]
 8013bf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2220      	movs	r2, #32
 8013bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2200      	movs	r2, #0
 8013c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013c08:	2300      	movs	r3, #0
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	3710      	adds	r7, #16
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}

08013c12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013c12:	b580      	push	{r7, lr}
 8013c14:	b084      	sub	sp, #16
 8013c16:	af00      	add	r7, sp, #0
 8013c18:	6078      	str	r0, [r7, #4]
 8013c1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013c22:	2b01      	cmp	r3, #1
 8013c24:	d101      	bne.n	8013c2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013c26:	2302      	movs	r3, #2
 8013c28:	e02d      	b.n	8013c86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2201      	movs	r2, #1
 8013c2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	2224      	movs	r2, #36	@ 0x24
 8013c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	681a      	ldr	r2, [r3, #0]
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	f022 0201 	bic.w	r2, r2, #1
 8013c50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	689b      	ldr	r3, [r3, #8]
 8013c58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	683a      	ldr	r2, [r7, #0]
 8013c62:	430a      	orrs	r2, r1
 8013c64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 f812 	bl	8013c90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	68fa      	ldr	r2, [r7, #12]
 8013c72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2220      	movs	r2, #32
 8013c78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013c84:	2300      	movs	r3, #0
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3710      	adds	r7, #16
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
	...

08013c90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013c90:	b480      	push	{r7}
 8013c92:	b085      	sub	sp, #20
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d108      	bne.n	8013cb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2201      	movs	r2, #1
 8013ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2201      	movs	r2, #1
 8013cac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013cb0:	e031      	b.n	8013d16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013cb2:	2310      	movs	r3, #16
 8013cb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013cb6:	2310      	movs	r3, #16
 8013cb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	689b      	ldr	r3, [r3, #8]
 8013cc0:	0e5b      	lsrs	r3, r3, #25
 8013cc2:	b2db      	uxtb	r3, r3
 8013cc4:	f003 0307 	and.w	r3, r3, #7
 8013cc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	689b      	ldr	r3, [r3, #8]
 8013cd0:	0f5b      	lsrs	r3, r3, #29
 8013cd2:	b2db      	uxtb	r3, r3
 8013cd4:	f003 0307 	and.w	r3, r3, #7
 8013cd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013cda:	7bbb      	ldrb	r3, [r7, #14]
 8013cdc:	7b3a      	ldrb	r2, [r7, #12]
 8013cde:	4911      	ldr	r1, [pc, #68]	@ (8013d24 <UARTEx_SetNbDataToProcess+0x94>)
 8013ce0:	5c8a      	ldrb	r2, [r1, r2]
 8013ce2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013ce6:	7b3a      	ldrb	r2, [r7, #12]
 8013ce8:	490f      	ldr	r1, [pc, #60]	@ (8013d28 <UARTEx_SetNbDataToProcess+0x98>)
 8013cea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013cec:	fb93 f3f2 	sdiv	r3, r3, r2
 8013cf0:	b29a      	uxth	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013cf8:	7bfb      	ldrb	r3, [r7, #15]
 8013cfa:	7b7a      	ldrb	r2, [r7, #13]
 8013cfc:	4909      	ldr	r1, [pc, #36]	@ (8013d24 <UARTEx_SetNbDataToProcess+0x94>)
 8013cfe:	5c8a      	ldrb	r2, [r1, r2]
 8013d00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013d04:	7b7a      	ldrb	r2, [r7, #13]
 8013d06:	4908      	ldr	r1, [pc, #32]	@ (8013d28 <UARTEx_SetNbDataToProcess+0x98>)
 8013d08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013d0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d0e:	b29a      	uxth	r2, r3
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013d16:	bf00      	nop
 8013d18:	3714      	adds	r7, #20
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	08018e04 	.word	0x08018e04
 8013d28:	08018e0c 	.word	0x08018e0c

08013d2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013d2c:	b084      	sub	sp, #16
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b084      	sub	sp, #16
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
 8013d36:	f107 001c 	add.w	r0, r7, #28
 8013d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013d3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013d42:	2b01      	cmp	r3, #1
 8013d44:	d121      	bne.n	8013d8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	68da      	ldr	r2, [r3, #12]
 8013d56:	4b2c      	ldr	r3, [pc, #176]	@ (8013e08 <USB_CoreInit+0xdc>)
 8013d58:	4013      	ands	r3, r2
 8013d5a:	687a      	ldr	r2, [r7, #4]
 8013d5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	68db      	ldr	r3, [r3, #12]
 8013d62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013d6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013d6e:	2b01      	cmp	r3, #1
 8013d70:	d105      	bne.n	8013d7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	68db      	ldr	r3, [r3, #12]
 8013d76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f001 fafa 	bl	8015378 <USB_CoreReset>
 8013d84:	4603      	mov	r3, r0
 8013d86:	73fb      	strb	r3, [r7, #15]
 8013d88:	e01b      	b.n	8013dc2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f001 faee 	bl	8015378 <USB_CoreReset>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013da0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d106      	bne.n	8013db6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	639a      	str	r2, [r3, #56]	@ 0x38
 8013db4:	e005      	b.n	8013dc2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013dc2:	7fbb      	ldrb	r3, [r7, #30]
 8013dc4:	2b01      	cmp	r3, #1
 8013dc6:	d116      	bne.n	8013df6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8013e0c <USB_CoreInit+0xe0>)
 8013dd8:	4313      	orrs	r3, r2
 8013dda:	687a      	ldr	r2, [r7, #4]
 8013ddc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	689b      	ldr	r3, [r3, #8]
 8013de2:	f043 0206 	orr.w	r2, r3, #6
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	689b      	ldr	r3, [r3, #8]
 8013dee:	f043 0220 	orr.w	r2, r3, #32
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3710      	adds	r7, #16
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013e02:	b004      	add	sp, #16
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	ffbdffbf 	.word	0xffbdffbf
 8013e0c:	03ee0000 	.word	0x03ee0000

08013e10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013e10:	b480      	push	{r7}
 8013e12:	b087      	sub	sp, #28
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	60f8      	str	r0, [r7, #12]
 8013e18:	60b9      	str	r1, [r7, #8]
 8013e1a:	4613      	mov	r3, r2
 8013e1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013e1e:	79fb      	ldrb	r3, [r7, #7]
 8013e20:	2b02      	cmp	r3, #2
 8013e22:	d165      	bne.n	8013ef0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	4a41      	ldr	r2, [pc, #260]	@ (8013f2c <USB_SetTurnaroundTime+0x11c>)
 8013e28:	4293      	cmp	r3, r2
 8013e2a:	d906      	bls.n	8013e3a <USB_SetTurnaroundTime+0x2a>
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	4a40      	ldr	r2, [pc, #256]	@ (8013f30 <USB_SetTurnaroundTime+0x120>)
 8013e30:	4293      	cmp	r3, r2
 8013e32:	d202      	bcs.n	8013e3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013e34:	230f      	movs	r3, #15
 8013e36:	617b      	str	r3, [r7, #20]
 8013e38:	e062      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8013f30 <USB_SetTurnaroundTime+0x120>)
 8013e3e:	4293      	cmp	r3, r2
 8013e40:	d306      	bcc.n	8013e50 <USB_SetTurnaroundTime+0x40>
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	4a3b      	ldr	r2, [pc, #236]	@ (8013f34 <USB_SetTurnaroundTime+0x124>)
 8013e46:	4293      	cmp	r3, r2
 8013e48:	d202      	bcs.n	8013e50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013e4a:	230e      	movs	r3, #14
 8013e4c:	617b      	str	r3, [r7, #20]
 8013e4e:	e057      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013e50:	68bb      	ldr	r3, [r7, #8]
 8013e52:	4a38      	ldr	r2, [pc, #224]	@ (8013f34 <USB_SetTurnaroundTime+0x124>)
 8013e54:	4293      	cmp	r3, r2
 8013e56:	d306      	bcc.n	8013e66 <USB_SetTurnaroundTime+0x56>
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	4a37      	ldr	r2, [pc, #220]	@ (8013f38 <USB_SetTurnaroundTime+0x128>)
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	d202      	bcs.n	8013e66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013e60:	230d      	movs	r3, #13
 8013e62:	617b      	str	r3, [r7, #20]
 8013e64:	e04c      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	4a33      	ldr	r2, [pc, #204]	@ (8013f38 <USB_SetTurnaroundTime+0x128>)
 8013e6a:	4293      	cmp	r3, r2
 8013e6c:	d306      	bcc.n	8013e7c <USB_SetTurnaroundTime+0x6c>
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	4a32      	ldr	r2, [pc, #200]	@ (8013f3c <USB_SetTurnaroundTime+0x12c>)
 8013e72:	4293      	cmp	r3, r2
 8013e74:	d802      	bhi.n	8013e7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013e76:	230c      	movs	r3, #12
 8013e78:	617b      	str	r3, [r7, #20]
 8013e7a:	e041      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013e7c:	68bb      	ldr	r3, [r7, #8]
 8013e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8013f3c <USB_SetTurnaroundTime+0x12c>)
 8013e80:	4293      	cmp	r3, r2
 8013e82:	d906      	bls.n	8013e92 <USB_SetTurnaroundTime+0x82>
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	4a2e      	ldr	r2, [pc, #184]	@ (8013f40 <USB_SetTurnaroundTime+0x130>)
 8013e88:	4293      	cmp	r3, r2
 8013e8a:	d802      	bhi.n	8013e92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013e8c:	230b      	movs	r3, #11
 8013e8e:	617b      	str	r3, [r7, #20]
 8013e90:	e036      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	4a2a      	ldr	r2, [pc, #168]	@ (8013f40 <USB_SetTurnaroundTime+0x130>)
 8013e96:	4293      	cmp	r3, r2
 8013e98:	d906      	bls.n	8013ea8 <USB_SetTurnaroundTime+0x98>
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	4a29      	ldr	r2, [pc, #164]	@ (8013f44 <USB_SetTurnaroundTime+0x134>)
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	d802      	bhi.n	8013ea8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013ea2:	230a      	movs	r3, #10
 8013ea4:	617b      	str	r3, [r7, #20]
 8013ea6:	e02b      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	4a26      	ldr	r2, [pc, #152]	@ (8013f44 <USB_SetTurnaroundTime+0x134>)
 8013eac:	4293      	cmp	r3, r2
 8013eae:	d906      	bls.n	8013ebe <USB_SetTurnaroundTime+0xae>
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	4a25      	ldr	r2, [pc, #148]	@ (8013f48 <USB_SetTurnaroundTime+0x138>)
 8013eb4:	4293      	cmp	r3, r2
 8013eb6:	d202      	bcs.n	8013ebe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013eb8:	2309      	movs	r3, #9
 8013eba:	617b      	str	r3, [r7, #20]
 8013ebc:	e020      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	4a21      	ldr	r2, [pc, #132]	@ (8013f48 <USB_SetTurnaroundTime+0x138>)
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	d306      	bcc.n	8013ed4 <USB_SetTurnaroundTime+0xc4>
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	4a20      	ldr	r2, [pc, #128]	@ (8013f4c <USB_SetTurnaroundTime+0x13c>)
 8013eca:	4293      	cmp	r3, r2
 8013ecc:	d802      	bhi.n	8013ed4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013ece:	2308      	movs	r3, #8
 8013ed0:	617b      	str	r3, [r7, #20]
 8013ed2:	e015      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8013f4c <USB_SetTurnaroundTime+0x13c>)
 8013ed8:	4293      	cmp	r3, r2
 8013eda:	d906      	bls.n	8013eea <USB_SetTurnaroundTime+0xda>
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	4a1c      	ldr	r2, [pc, #112]	@ (8013f50 <USB_SetTurnaroundTime+0x140>)
 8013ee0:	4293      	cmp	r3, r2
 8013ee2:	d202      	bcs.n	8013eea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013ee4:	2307      	movs	r3, #7
 8013ee6:	617b      	str	r3, [r7, #20]
 8013ee8:	e00a      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013eea:	2306      	movs	r3, #6
 8013eec:	617b      	str	r3, [r7, #20]
 8013eee:	e007      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013ef0:	79fb      	ldrb	r3, [r7, #7]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d102      	bne.n	8013efc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013ef6:	2309      	movs	r3, #9
 8013ef8:	617b      	str	r3, [r7, #20]
 8013efa:	e001      	b.n	8013f00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013efc:	2309      	movs	r3, #9
 8013efe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	68da      	ldr	r2, [r3, #12]
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	029b      	lsls	r3, r3, #10
 8013f14:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8013f18:	431a      	orrs	r2, r3
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013f1e:	2300      	movs	r3, #0
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	371c      	adds	r7, #28
 8013f24:	46bd      	mov	sp, r7
 8013f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2a:	4770      	bx	lr
 8013f2c:	00d8acbf 	.word	0x00d8acbf
 8013f30:	00e4e1c0 	.word	0x00e4e1c0
 8013f34:	00f42400 	.word	0x00f42400
 8013f38:	01067380 	.word	0x01067380
 8013f3c:	011a499f 	.word	0x011a499f
 8013f40:	01312cff 	.word	0x01312cff
 8013f44:	014ca43f 	.word	0x014ca43f
 8013f48:	016e3600 	.word	0x016e3600
 8013f4c:	01a6ab1f 	.word	0x01a6ab1f
 8013f50:	01e84800 	.word	0x01e84800

08013f54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b083      	sub	sp, #12
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	f043 0201 	orr.w	r2, r3, #1
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013f68:	2300      	movs	r3, #0
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	370c      	adds	r7, #12
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f74:	4770      	bx	lr

08013f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f76:	b480      	push	{r7}
 8013f78:	b083      	sub	sp, #12
 8013f7a:	af00      	add	r7, sp, #0
 8013f7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	689b      	ldr	r3, [r3, #8]
 8013f82:	f023 0201 	bic.w	r2, r3, #1
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013f8a:	2300      	movs	r3, #0
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	370c      	adds	r7, #12
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr

08013f98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b084      	sub	sp, #16
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	460b      	mov	r3, r1
 8013fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013fb4:	78fb      	ldrb	r3, [r7, #3]
 8013fb6:	2b01      	cmp	r3, #1
 8013fb8:	d115      	bne.n	8013fe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	68db      	ldr	r3, [r3, #12]
 8013fbe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8013fc6:	200a      	movs	r0, #10
 8013fc8:	f7ee fbd4 	bl	8002774 <HAL_Delay>
      ms += 10U;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	330a      	adds	r3, #10
 8013fd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f001 f93f 	bl	8015256 <USB_GetMode>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	d01e      	beq.n	801401c <USB_SetCurrentMode+0x84>
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	2bc7      	cmp	r3, #199	@ 0xc7
 8013fe2:	d9f0      	bls.n	8013fc6 <USB_SetCurrentMode+0x2e>
 8013fe4:	e01a      	b.n	801401c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013fe6:	78fb      	ldrb	r3, [r7, #3]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d115      	bne.n	8014018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	68db      	ldr	r3, [r3, #12]
 8013ff0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8013ff8:	200a      	movs	r0, #10
 8013ffa:	f7ee fbbb 	bl	8002774 <HAL_Delay>
      ms += 10U;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	330a      	adds	r3, #10
 8014002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f001 f926 	bl	8015256 <USB_GetMode>
 801400a:	4603      	mov	r3, r0
 801400c:	2b00      	cmp	r3, #0
 801400e:	d005      	beq.n	801401c <USB_SetCurrentMode+0x84>
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2bc7      	cmp	r3, #199	@ 0xc7
 8014014:	d9f0      	bls.n	8013ff8 <USB_SetCurrentMode+0x60>
 8014016:	e001      	b.n	801401c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014018:	2301      	movs	r3, #1
 801401a:	e005      	b.n	8014028 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	2bc8      	cmp	r3, #200	@ 0xc8
 8014020:	d101      	bne.n	8014026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014022:	2301      	movs	r3, #1
 8014024:	e000      	b.n	8014028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014026:	2300      	movs	r3, #0
}
 8014028:	4618      	mov	r0, r3
 801402a:	3710      	adds	r7, #16
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014030:	b084      	sub	sp, #16
 8014032:	b580      	push	{r7, lr}
 8014034:	b086      	sub	sp, #24
 8014036:	af00      	add	r7, sp, #0
 8014038:	6078      	str	r0, [r7, #4]
 801403a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801403e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014042:	2300      	movs	r3, #0
 8014044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801404a:	2300      	movs	r3, #0
 801404c:	613b      	str	r3, [r7, #16]
 801404e:	e009      	b.n	8014064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014050:	687a      	ldr	r2, [r7, #4]
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	3340      	adds	r3, #64	@ 0x40
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	4413      	add	r3, r2
 801405a:	2200      	movs	r2, #0
 801405c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	3301      	adds	r3, #1
 8014062:	613b      	str	r3, [r7, #16]
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	2b0e      	cmp	r3, #14
 8014068:	d9f2      	bls.n	8014050 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801406a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801406e:	2b00      	cmp	r3, #0
 8014070:	d11c      	bne.n	80140ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014078:	685b      	ldr	r3, [r3, #4]
 801407a:	68fa      	ldr	r2, [r7, #12]
 801407c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014080:	f043 0302 	orr.w	r3, r3, #2
 8014084:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801408a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	601a      	str	r2, [r3, #0]
 80140aa:	e005      	b.n	80140b8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80140be:	461a      	mov	r2, r3
 80140c0:	2300      	movs	r3, #0
 80140c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80140c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80140c8:	2b01      	cmp	r3, #1
 80140ca:	d10d      	bne.n	80140e8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80140cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d104      	bne.n	80140de <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80140d4:	2100      	movs	r1, #0
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f000 f968 	bl	80143ac <USB_SetDevSpeed>
 80140dc:	e008      	b.n	80140f0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80140de:	2101      	movs	r1, #1
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f000 f963 	bl	80143ac <USB_SetDevSpeed>
 80140e6:	e003      	b.n	80140f0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80140e8:	2103      	movs	r1, #3
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f000 f95e 	bl	80143ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80140f0:	2110      	movs	r1, #16
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 f8fa 	bl	80142ec <USB_FlushTxFifo>
 80140f8:	4603      	mov	r3, r0
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d001      	beq.n	8014102 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80140fe:	2301      	movs	r3, #1
 8014100:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 f924 	bl	8014350 <USB_FlushRxFifo>
 8014108:	4603      	mov	r3, r0
 801410a:	2b00      	cmp	r3, #0
 801410c:	d001      	beq.n	8014112 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801410e:	2301      	movs	r3, #1
 8014110:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014118:	461a      	mov	r2, r3
 801411a:	2300      	movs	r3, #0
 801411c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014124:	461a      	mov	r2, r3
 8014126:	2300      	movs	r3, #0
 8014128:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014130:	461a      	mov	r2, r3
 8014132:	2300      	movs	r3, #0
 8014134:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014136:	2300      	movs	r3, #0
 8014138:	613b      	str	r3, [r7, #16]
 801413a:	e043      	b.n	80141c4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	015a      	lsls	r2, r3, #5
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	4413      	add	r3, r2
 8014144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801414e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014152:	d118      	bne.n	8014186 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d10a      	bne.n	8014170 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801415a:	693b      	ldr	r3, [r7, #16]
 801415c:	015a      	lsls	r2, r3, #5
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	4413      	add	r3, r2
 8014162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014166:	461a      	mov	r2, r3
 8014168:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801416c:	6013      	str	r3, [r2, #0]
 801416e:	e013      	b.n	8014198 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	015a      	lsls	r2, r3, #5
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	4413      	add	r3, r2
 8014178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801417c:	461a      	mov	r2, r3
 801417e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014182:	6013      	str	r3, [r2, #0]
 8014184:	e008      	b.n	8014198 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014186:	693b      	ldr	r3, [r7, #16]
 8014188:	015a      	lsls	r2, r3, #5
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	4413      	add	r3, r2
 801418e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014192:	461a      	mov	r2, r3
 8014194:	2300      	movs	r3, #0
 8014196:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	015a      	lsls	r2, r3, #5
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	4413      	add	r3, r2
 80141a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141a4:	461a      	mov	r2, r3
 80141a6:	2300      	movs	r3, #0
 80141a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80141aa:	693b      	ldr	r3, [r7, #16]
 80141ac:	015a      	lsls	r2, r3, #5
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	4413      	add	r3, r2
 80141b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141b6:	461a      	mov	r2, r3
 80141b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80141bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80141be:	693b      	ldr	r3, [r7, #16]
 80141c0:	3301      	adds	r3, #1
 80141c2:	613b      	str	r3, [r7, #16]
 80141c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80141c8:	461a      	mov	r2, r3
 80141ca:	693b      	ldr	r3, [r7, #16]
 80141cc:	4293      	cmp	r3, r2
 80141ce:	d3b5      	bcc.n	801413c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80141d0:	2300      	movs	r3, #0
 80141d2:	613b      	str	r3, [r7, #16]
 80141d4:	e043      	b.n	801425e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80141d6:	693b      	ldr	r3, [r7, #16]
 80141d8:	015a      	lsls	r2, r3, #5
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	4413      	add	r3, r2
 80141de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80141e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80141ec:	d118      	bne.n	8014220 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d10a      	bne.n	801420a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80141f4:	693b      	ldr	r3, [r7, #16]
 80141f6:	015a      	lsls	r2, r3, #5
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	4413      	add	r3, r2
 80141fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014200:	461a      	mov	r2, r3
 8014202:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014206:	6013      	str	r3, [r2, #0]
 8014208:	e013      	b.n	8014232 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801420a:	693b      	ldr	r3, [r7, #16]
 801420c:	015a      	lsls	r2, r3, #5
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	4413      	add	r3, r2
 8014212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014216:	461a      	mov	r2, r3
 8014218:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801421c:	6013      	str	r3, [r2, #0]
 801421e:	e008      	b.n	8014232 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014220:	693b      	ldr	r3, [r7, #16]
 8014222:	015a      	lsls	r2, r3, #5
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	4413      	add	r3, r2
 8014228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801422c:	461a      	mov	r2, r3
 801422e:	2300      	movs	r3, #0
 8014230:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	015a      	lsls	r2, r3, #5
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	4413      	add	r3, r2
 801423a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801423e:	461a      	mov	r2, r3
 8014240:	2300      	movs	r3, #0
 8014242:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014244:	693b      	ldr	r3, [r7, #16]
 8014246:	015a      	lsls	r2, r3, #5
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	4413      	add	r3, r2
 801424c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014250:	461a      	mov	r2, r3
 8014252:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014256:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	3301      	adds	r3, #1
 801425c:	613b      	str	r3, [r7, #16]
 801425e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014262:	461a      	mov	r2, r3
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	4293      	cmp	r3, r2
 8014268:	d3b5      	bcc.n	80141d6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014270:	691b      	ldr	r3, [r3, #16]
 8014272:	68fa      	ldr	r2, [r7, #12]
 8014274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801427c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	2200      	movs	r2, #0
 8014282:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801428a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801428c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014290:	2b00      	cmp	r3, #0
 8014292:	d105      	bne.n	80142a0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	699b      	ldr	r3, [r3, #24]
 8014298:	f043 0210 	orr.w	r2, r3, #16
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	699a      	ldr	r2, [r3, #24]
 80142a4:	4b0f      	ldr	r3, [pc, #60]	@ (80142e4 <USB_DevInit+0x2b4>)
 80142a6:	4313      	orrs	r3, r2
 80142a8:	687a      	ldr	r2, [r7, #4]
 80142aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80142ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d005      	beq.n	80142c0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	699b      	ldr	r3, [r3, #24]
 80142b8:	f043 0208 	orr.w	r2, r3, #8
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80142c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80142c4:	2b01      	cmp	r3, #1
 80142c6:	d105      	bne.n	80142d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	699a      	ldr	r2, [r3, #24]
 80142cc:	4b06      	ldr	r3, [pc, #24]	@ (80142e8 <USB_DevInit+0x2b8>)
 80142ce:	4313      	orrs	r3, r2
 80142d0:	687a      	ldr	r2, [r7, #4]
 80142d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80142d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80142d6:	4618      	mov	r0, r3
 80142d8:	3718      	adds	r7, #24
 80142da:	46bd      	mov	sp, r7
 80142dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80142e0:	b004      	add	sp, #16
 80142e2:	4770      	bx	lr
 80142e4:	803c3800 	.word	0x803c3800
 80142e8:	40000004 	.word	0x40000004

080142ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80142ec:	b480      	push	{r7}
 80142ee:	b085      	sub	sp, #20
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80142f6:	2300      	movs	r3, #0
 80142f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	3301      	adds	r3, #1
 80142fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014306:	d901      	bls.n	801430c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014308:	2303      	movs	r3, #3
 801430a:	e01b      	b.n	8014344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	691b      	ldr	r3, [r3, #16]
 8014310:	2b00      	cmp	r3, #0
 8014312:	daf2      	bge.n	80142fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014314:	2300      	movs	r3, #0
 8014316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	019b      	lsls	r3, r3, #6
 801431c:	f043 0220 	orr.w	r2, r3, #32
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	3301      	adds	r3, #1
 8014328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014330:	d901      	bls.n	8014336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014332:	2303      	movs	r3, #3
 8014334:	e006      	b.n	8014344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	691b      	ldr	r3, [r3, #16]
 801433a:	f003 0320 	and.w	r3, r3, #32
 801433e:	2b20      	cmp	r3, #32
 8014340:	d0f0      	beq.n	8014324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014342:	2300      	movs	r3, #0
}
 8014344:	4618      	mov	r0, r3
 8014346:	3714      	adds	r7, #20
 8014348:	46bd      	mov	sp, r7
 801434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434e:	4770      	bx	lr

08014350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014350:	b480      	push	{r7}
 8014352:	b085      	sub	sp, #20
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014358:	2300      	movs	r3, #0
 801435a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	3301      	adds	r3, #1
 8014360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014368:	d901      	bls.n	801436e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801436a:	2303      	movs	r3, #3
 801436c:	e018      	b.n	80143a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	691b      	ldr	r3, [r3, #16]
 8014372:	2b00      	cmp	r3, #0
 8014374:	daf2      	bge.n	801435c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014376:	2300      	movs	r3, #0
 8014378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2210      	movs	r2, #16
 801437e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	3301      	adds	r3, #1
 8014384:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801438c:	d901      	bls.n	8014392 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801438e:	2303      	movs	r3, #3
 8014390:	e006      	b.n	80143a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	691b      	ldr	r3, [r3, #16]
 8014396:	f003 0310 	and.w	r3, r3, #16
 801439a:	2b10      	cmp	r3, #16
 801439c:	d0f0      	beq.n	8014380 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801439e:	2300      	movs	r3, #0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3714      	adds	r7, #20
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr

080143ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b085      	sub	sp, #20
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	460b      	mov	r3, r1
 80143b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80143c2:	681a      	ldr	r2, [r3, #0]
 80143c4:	78fb      	ldrb	r3, [r7, #3]
 80143c6:	68f9      	ldr	r1, [r7, #12]
 80143c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80143cc:	4313      	orrs	r3, r2
 80143ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80143d0:	2300      	movs	r3, #0
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3714      	adds	r7, #20
 80143d6:	46bd      	mov	sp, r7
 80143d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143dc:	4770      	bx	lr

080143de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80143de:	b480      	push	{r7}
 80143e0:	b087      	sub	sp, #28
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80143ea:	693b      	ldr	r3, [r7, #16]
 80143ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80143f0:	689b      	ldr	r3, [r3, #8]
 80143f2:	f003 0306 	and.w	r3, r3, #6
 80143f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d102      	bne.n	8014404 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80143fe:	2300      	movs	r3, #0
 8014400:	75fb      	strb	r3, [r7, #23]
 8014402:	e00a      	b.n	801441a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2b02      	cmp	r3, #2
 8014408:	d002      	beq.n	8014410 <USB_GetDevSpeed+0x32>
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	2b06      	cmp	r3, #6
 801440e:	d102      	bne.n	8014416 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014410:	2302      	movs	r3, #2
 8014412:	75fb      	strb	r3, [r7, #23]
 8014414:	e001      	b.n	801441a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014416:	230f      	movs	r3, #15
 8014418:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801441a:	7dfb      	ldrb	r3, [r7, #23]
}
 801441c:	4618      	mov	r0, r3
 801441e:	371c      	adds	r7, #28
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr

08014428 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014428:	b480      	push	{r7}
 801442a:	b085      	sub	sp, #20
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	781b      	ldrb	r3, [r3, #0]
 801443a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	785b      	ldrb	r3, [r3, #1]
 8014440:	2b01      	cmp	r3, #1
 8014442:	d139      	bne.n	80144b8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801444a:	69da      	ldr	r2, [r3, #28]
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	781b      	ldrb	r3, [r3, #0]
 8014450:	f003 030f 	and.w	r3, r3, #15
 8014454:	2101      	movs	r1, #1
 8014456:	fa01 f303 	lsl.w	r3, r1, r3
 801445a:	b29b      	uxth	r3, r3
 801445c:	68f9      	ldr	r1, [r7, #12]
 801445e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014462:	4313      	orrs	r3, r2
 8014464:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	015a      	lsls	r2, r3, #5
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	4413      	add	r3, r2
 801446e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014478:	2b00      	cmp	r3, #0
 801447a:	d153      	bne.n	8014524 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	015a      	lsls	r2, r3, #5
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	4413      	add	r3, r2
 8014484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	689b      	ldr	r3, [r3, #8]
 801448e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	791b      	ldrb	r3, [r3, #4]
 8014496:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014498:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	059b      	lsls	r3, r3, #22
 801449e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80144a0:	431a      	orrs	r2, r3
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	0159      	lsls	r1, r3, #5
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	440b      	add	r3, r1
 80144aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144ae:	4619      	mov	r1, r3
 80144b0:	4b20      	ldr	r3, [pc, #128]	@ (8014534 <USB_ActivateEndpoint+0x10c>)
 80144b2:	4313      	orrs	r3, r2
 80144b4:	600b      	str	r3, [r1, #0]
 80144b6:	e035      	b.n	8014524 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144be:	69da      	ldr	r2, [r3, #28]
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	f003 030f 	and.w	r3, r3, #15
 80144c8:	2101      	movs	r1, #1
 80144ca:	fa01 f303 	lsl.w	r3, r1, r3
 80144ce:	041b      	lsls	r3, r3, #16
 80144d0:	68f9      	ldr	r1, [r7, #12]
 80144d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80144d6:	4313      	orrs	r3, r2
 80144d8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	015a      	lsls	r2, r3, #5
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	4413      	add	r3, r2
 80144e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d119      	bne.n	8014524 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	015a      	lsls	r2, r3, #5
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	4413      	add	r3, r2
 80144f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80144fc:	681a      	ldr	r2, [r3, #0]
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	689b      	ldr	r3, [r3, #8]
 8014502:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	791b      	ldrb	r3, [r3, #4]
 801450a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801450c:	430b      	orrs	r3, r1
 801450e:	431a      	orrs	r2, r3
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	0159      	lsls	r1, r3, #5
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	440b      	add	r3, r1
 8014518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801451c:	4619      	mov	r1, r3
 801451e:	4b05      	ldr	r3, [pc, #20]	@ (8014534 <USB_ActivateEndpoint+0x10c>)
 8014520:	4313      	orrs	r3, r2
 8014522:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014524:	2300      	movs	r3, #0
}
 8014526:	4618      	mov	r0, r3
 8014528:	3714      	adds	r7, #20
 801452a:	46bd      	mov	sp, r7
 801452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	10008000 	.word	0x10008000

08014538 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014538:	b480      	push	{r7}
 801453a:	b085      	sub	sp, #20
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	785b      	ldrb	r3, [r3, #1]
 8014550:	2b01      	cmp	r3, #1
 8014552:	d161      	bne.n	8014618 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	015a      	lsls	r2, r3, #5
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	4413      	add	r3, r2
 801455c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801456a:	d11f      	bne.n	80145ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	015a      	lsls	r2, r3, #5
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	4413      	add	r3, r2
 8014574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	68ba      	ldr	r2, [r7, #8]
 801457c:	0151      	lsls	r1, r2, #5
 801457e:	68fa      	ldr	r2, [r7, #12]
 8014580:	440a      	add	r2, r1
 8014582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014586:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801458a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	015a      	lsls	r2, r3, #5
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	4413      	add	r3, r2
 8014594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	68ba      	ldr	r2, [r7, #8]
 801459c:	0151      	lsls	r1, r2, #5
 801459e:	68fa      	ldr	r2, [r7, #12]
 80145a0:	440a      	add	r2, r1
 80145a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80145a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80145aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80145b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	f003 030f 	and.w	r3, r3, #15
 80145bc:	2101      	movs	r1, #1
 80145be:	fa01 f303 	lsl.w	r3, r1, r3
 80145c2:	b29b      	uxth	r3, r3
 80145c4:	43db      	mvns	r3, r3
 80145c6:	68f9      	ldr	r1, [r7, #12]
 80145c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80145cc:	4013      	ands	r3, r2
 80145ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80145d6:	69da      	ldr	r2, [r3, #28]
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	781b      	ldrb	r3, [r3, #0]
 80145dc:	f003 030f 	and.w	r3, r3, #15
 80145e0:	2101      	movs	r1, #1
 80145e2:	fa01 f303 	lsl.w	r3, r1, r3
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	43db      	mvns	r3, r3
 80145ea:	68f9      	ldr	r1, [r7, #12]
 80145ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80145f0:	4013      	ands	r3, r2
 80145f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	015a      	lsls	r2, r3, #5
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	4413      	add	r3, r2
 80145fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014600:	681a      	ldr	r2, [r3, #0]
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	0159      	lsls	r1, r3, #5
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	440b      	add	r3, r1
 801460a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801460e:	4619      	mov	r1, r3
 8014610:	4b35      	ldr	r3, [pc, #212]	@ (80146e8 <USB_DeactivateEndpoint+0x1b0>)
 8014612:	4013      	ands	r3, r2
 8014614:	600b      	str	r3, [r1, #0]
 8014616:	e060      	b.n	80146da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	015a      	lsls	r2, r3, #5
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	4413      	add	r3, r2
 8014620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801462a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801462e:	d11f      	bne.n	8014670 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	015a      	lsls	r2, r3, #5
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	4413      	add	r3, r2
 8014638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	68ba      	ldr	r2, [r7, #8]
 8014640:	0151      	lsls	r1, r2, #5
 8014642:	68fa      	ldr	r2, [r7, #12]
 8014644:	440a      	add	r2, r1
 8014646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801464a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801464e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	015a      	lsls	r2, r3, #5
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	4413      	add	r3, r2
 8014658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	68ba      	ldr	r2, [r7, #8]
 8014660:	0151      	lsls	r1, r2, #5
 8014662:	68fa      	ldr	r2, [r7, #12]
 8014664:	440a      	add	r2, r1
 8014666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801466a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801466e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	f003 030f 	and.w	r3, r3, #15
 8014680:	2101      	movs	r1, #1
 8014682:	fa01 f303 	lsl.w	r3, r1, r3
 8014686:	041b      	lsls	r3, r3, #16
 8014688:	43db      	mvns	r3, r3
 801468a:	68f9      	ldr	r1, [r7, #12]
 801468c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014690:	4013      	ands	r3, r2
 8014692:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801469a:	69da      	ldr	r2, [r3, #28]
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	f003 030f 	and.w	r3, r3, #15
 80146a4:	2101      	movs	r1, #1
 80146a6:	fa01 f303 	lsl.w	r3, r1, r3
 80146aa:	041b      	lsls	r3, r3, #16
 80146ac:	43db      	mvns	r3, r3
 80146ae:	68f9      	ldr	r1, [r7, #12]
 80146b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80146b4:	4013      	ands	r3, r2
 80146b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	015a      	lsls	r2, r3, #5
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	4413      	add	r3, r2
 80146c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146c4:	681a      	ldr	r2, [r3, #0]
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	0159      	lsls	r1, r3, #5
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	440b      	add	r3, r1
 80146ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146d2:	4619      	mov	r1, r3
 80146d4:	4b05      	ldr	r3, [pc, #20]	@ (80146ec <USB_DeactivateEndpoint+0x1b4>)
 80146d6:	4013      	ands	r3, r2
 80146d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80146da:	2300      	movs	r3, #0
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3714      	adds	r7, #20
 80146e0:	46bd      	mov	sp, r7
 80146e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e6:	4770      	bx	lr
 80146e8:	ec337800 	.word	0xec337800
 80146ec:	eff37800 	.word	0xeff37800

080146f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b08a      	sub	sp, #40	@ 0x28
 80146f4:	af02      	add	r7, sp, #8
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	60b9      	str	r1, [r7, #8]
 80146fa:	4613      	mov	r3, r2
 80146fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	781b      	ldrb	r3, [r3, #0]
 8014706:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	785b      	ldrb	r3, [r3, #1]
 801470c:	2b01      	cmp	r3, #1
 801470e:	f040 8185 	bne.w	8014a1c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	691b      	ldr	r3, [r3, #16]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d132      	bne.n	8014780 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	015a      	lsls	r2, r3, #5
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	4413      	add	r3, r2
 8014722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014726:	691a      	ldr	r2, [r3, #16]
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	0159      	lsls	r1, r3, #5
 801472c:	69fb      	ldr	r3, [r7, #28]
 801472e:	440b      	add	r3, r1
 8014730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014734:	4619      	mov	r1, r3
 8014736:	4ba7      	ldr	r3, [pc, #668]	@ (80149d4 <USB_EPStartXfer+0x2e4>)
 8014738:	4013      	ands	r3, r2
 801473a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801473c:	69bb      	ldr	r3, [r7, #24]
 801473e:	015a      	lsls	r2, r3, #5
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	4413      	add	r3, r2
 8014744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014748:	691b      	ldr	r3, [r3, #16]
 801474a:	69ba      	ldr	r2, [r7, #24]
 801474c:	0151      	lsls	r1, r2, #5
 801474e:	69fa      	ldr	r2, [r7, #28]
 8014750:	440a      	add	r2, r1
 8014752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014756:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801475a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801475c:	69bb      	ldr	r3, [r7, #24]
 801475e:	015a      	lsls	r2, r3, #5
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	4413      	add	r3, r2
 8014764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014768:	691a      	ldr	r2, [r3, #16]
 801476a:	69bb      	ldr	r3, [r7, #24]
 801476c:	0159      	lsls	r1, r3, #5
 801476e:	69fb      	ldr	r3, [r7, #28]
 8014770:	440b      	add	r3, r1
 8014772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014776:	4619      	mov	r1, r3
 8014778:	4b97      	ldr	r3, [pc, #604]	@ (80149d8 <USB_EPStartXfer+0x2e8>)
 801477a:	4013      	ands	r3, r2
 801477c:	610b      	str	r3, [r1, #16]
 801477e:	e097      	b.n	80148b0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014780:	69bb      	ldr	r3, [r7, #24]
 8014782:	015a      	lsls	r2, r3, #5
 8014784:	69fb      	ldr	r3, [r7, #28]
 8014786:	4413      	add	r3, r2
 8014788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801478c:	691a      	ldr	r2, [r3, #16]
 801478e:	69bb      	ldr	r3, [r7, #24]
 8014790:	0159      	lsls	r1, r3, #5
 8014792:	69fb      	ldr	r3, [r7, #28]
 8014794:	440b      	add	r3, r1
 8014796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801479a:	4619      	mov	r1, r3
 801479c:	4b8e      	ldr	r3, [pc, #568]	@ (80149d8 <USB_EPStartXfer+0x2e8>)
 801479e:	4013      	ands	r3, r2
 80147a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80147a2:	69bb      	ldr	r3, [r7, #24]
 80147a4:	015a      	lsls	r2, r3, #5
 80147a6:	69fb      	ldr	r3, [r7, #28]
 80147a8:	4413      	add	r3, r2
 80147aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147ae:	691a      	ldr	r2, [r3, #16]
 80147b0:	69bb      	ldr	r3, [r7, #24]
 80147b2:	0159      	lsls	r1, r3, #5
 80147b4:	69fb      	ldr	r3, [r7, #28]
 80147b6:	440b      	add	r3, r1
 80147b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147bc:	4619      	mov	r1, r3
 80147be:	4b85      	ldr	r3, [pc, #532]	@ (80149d4 <USB_EPStartXfer+0x2e4>)
 80147c0:	4013      	ands	r3, r2
 80147c2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80147c4:	69bb      	ldr	r3, [r7, #24]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d11a      	bne.n	8014800 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	691a      	ldr	r2, [r3, #16]
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	689b      	ldr	r3, [r3, #8]
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d903      	bls.n	80147de <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	689a      	ldr	r2, [r3, #8]
 80147da:	68bb      	ldr	r3, [r7, #8]
 80147dc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80147de:	69bb      	ldr	r3, [r7, #24]
 80147e0:	015a      	lsls	r2, r3, #5
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	4413      	add	r3, r2
 80147e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147ea:	691b      	ldr	r3, [r3, #16]
 80147ec:	69ba      	ldr	r2, [r7, #24]
 80147ee:	0151      	lsls	r1, r2, #5
 80147f0:	69fa      	ldr	r2, [r7, #28]
 80147f2:	440a      	add	r2, r1
 80147f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80147f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80147fc:	6113      	str	r3, [r2, #16]
 80147fe:	e044      	b.n	801488a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	691a      	ldr	r2, [r3, #16]
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	689b      	ldr	r3, [r3, #8]
 8014808:	4413      	add	r3, r2
 801480a:	1e5a      	subs	r2, r3, #1
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	689b      	ldr	r3, [r3, #8]
 8014810:	fbb2 f3f3 	udiv	r3, r2, r3
 8014814:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8014816:	69bb      	ldr	r3, [r7, #24]
 8014818:	015a      	lsls	r2, r3, #5
 801481a:	69fb      	ldr	r3, [r7, #28]
 801481c:	4413      	add	r3, r2
 801481e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014822:	691a      	ldr	r2, [r3, #16]
 8014824:	8afb      	ldrh	r3, [r7, #22]
 8014826:	04d9      	lsls	r1, r3, #19
 8014828:	4b6c      	ldr	r3, [pc, #432]	@ (80149dc <USB_EPStartXfer+0x2ec>)
 801482a:	400b      	ands	r3, r1
 801482c:	69b9      	ldr	r1, [r7, #24]
 801482e:	0148      	lsls	r0, r1, #5
 8014830:	69f9      	ldr	r1, [r7, #28]
 8014832:	4401      	add	r1, r0
 8014834:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014838:	4313      	orrs	r3, r2
 801483a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	791b      	ldrb	r3, [r3, #4]
 8014840:	2b01      	cmp	r3, #1
 8014842:	d122      	bne.n	801488a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014844:	69bb      	ldr	r3, [r7, #24]
 8014846:	015a      	lsls	r2, r3, #5
 8014848:	69fb      	ldr	r3, [r7, #28]
 801484a:	4413      	add	r3, r2
 801484c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014850:	691b      	ldr	r3, [r3, #16]
 8014852:	69ba      	ldr	r2, [r7, #24]
 8014854:	0151      	lsls	r1, r2, #5
 8014856:	69fa      	ldr	r2, [r7, #28]
 8014858:	440a      	add	r2, r1
 801485a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801485e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014862:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014864:	69bb      	ldr	r3, [r7, #24]
 8014866:	015a      	lsls	r2, r3, #5
 8014868:	69fb      	ldr	r3, [r7, #28]
 801486a:	4413      	add	r3, r2
 801486c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014870:	691a      	ldr	r2, [r3, #16]
 8014872:	8afb      	ldrh	r3, [r7, #22]
 8014874:	075b      	lsls	r3, r3, #29
 8014876:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801487a:	69b9      	ldr	r1, [r7, #24]
 801487c:	0148      	lsls	r0, r1, #5
 801487e:	69f9      	ldr	r1, [r7, #28]
 8014880:	4401      	add	r1, r0
 8014882:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014886:	4313      	orrs	r3, r2
 8014888:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801488a:	69bb      	ldr	r3, [r7, #24]
 801488c:	015a      	lsls	r2, r3, #5
 801488e:	69fb      	ldr	r3, [r7, #28]
 8014890:	4413      	add	r3, r2
 8014892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014896:	691a      	ldr	r2, [r3, #16]
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	691b      	ldr	r3, [r3, #16]
 801489c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80148a0:	69b9      	ldr	r1, [r7, #24]
 80148a2:	0148      	lsls	r0, r1, #5
 80148a4:	69f9      	ldr	r1, [r7, #28]
 80148a6:	4401      	add	r1, r0
 80148a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80148ac:	4313      	orrs	r3, r2
 80148ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80148b0:	79fb      	ldrb	r3, [r7, #7]
 80148b2:	2b01      	cmp	r3, #1
 80148b4:	d14b      	bne.n	801494e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	69db      	ldr	r3, [r3, #28]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d009      	beq.n	80148d2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	015a      	lsls	r2, r3, #5
 80148c2:	69fb      	ldr	r3, [r7, #28]
 80148c4:	4413      	add	r3, r2
 80148c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148ca:	461a      	mov	r2, r3
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	69db      	ldr	r3, [r3, #28]
 80148d0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	791b      	ldrb	r3, [r3, #4]
 80148d6:	2b01      	cmp	r3, #1
 80148d8:	d128      	bne.n	801492c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148e0:	689b      	ldr	r3, [r3, #8]
 80148e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d110      	bne.n	801490c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80148ea:	69bb      	ldr	r3, [r7, #24]
 80148ec:	015a      	lsls	r2, r3, #5
 80148ee:	69fb      	ldr	r3, [r7, #28]
 80148f0:	4413      	add	r3, r2
 80148f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	69ba      	ldr	r2, [r7, #24]
 80148fa:	0151      	lsls	r1, r2, #5
 80148fc:	69fa      	ldr	r2, [r7, #28]
 80148fe:	440a      	add	r2, r1
 8014900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014904:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014908:	6013      	str	r3, [r2, #0]
 801490a:	e00f      	b.n	801492c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801490c:	69bb      	ldr	r3, [r7, #24]
 801490e:	015a      	lsls	r2, r3, #5
 8014910:	69fb      	ldr	r3, [r7, #28]
 8014912:	4413      	add	r3, r2
 8014914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	69ba      	ldr	r2, [r7, #24]
 801491c:	0151      	lsls	r1, r2, #5
 801491e:	69fa      	ldr	r2, [r7, #28]
 8014920:	440a      	add	r2, r1
 8014922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801492a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801492c:	69bb      	ldr	r3, [r7, #24]
 801492e:	015a      	lsls	r2, r3, #5
 8014930:	69fb      	ldr	r3, [r7, #28]
 8014932:	4413      	add	r3, r2
 8014934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	69ba      	ldr	r2, [r7, #24]
 801493c:	0151      	lsls	r1, r2, #5
 801493e:	69fa      	ldr	r2, [r7, #28]
 8014940:	440a      	add	r2, r1
 8014942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014946:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801494a:	6013      	str	r3, [r2, #0]
 801494c:	e169      	b.n	8014c22 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801494e:	69bb      	ldr	r3, [r7, #24]
 8014950:	015a      	lsls	r2, r3, #5
 8014952:	69fb      	ldr	r3, [r7, #28]
 8014954:	4413      	add	r3, r2
 8014956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	69ba      	ldr	r2, [r7, #24]
 801495e:	0151      	lsls	r1, r2, #5
 8014960:	69fa      	ldr	r2, [r7, #28]
 8014962:	440a      	add	r2, r1
 8014964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014968:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801496c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	791b      	ldrb	r3, [r3, #4]
 8014972:	2b01      	cmp	r3, #1
 8014974:	d015      	beq.n	80149a2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	691b      	ldr	r3, [r3, #16]
 801497a:	2b00      	cmp	r3, #0
 801497c:	f000 8151 	beq.w	8014c22 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014980:	69fb      	ldr	r3, [r7, #28]
 8014982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	f003 030f 	and.w	r3, r3, #15
 8014990:	2101      	movs	r1, #1
 8014992:	fa01 f303 	lsl.w	r3, r1, r3
 8014996:	69f9      	ldr	r1, [r7, #28]
 8014998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801499c:	4313      	orrs	r3, r2
 801499e:	634b      	str	r3, [r1, #52]	@ 0x34
 80149a0:	e13f      	b.n	8014c22 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80149a2:	69fb      	ldr	r3, [r7, #28]
 80149a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149a8:	689b      	ldr	r3, [r3, #8]
 80149aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d116      	bne.n	80149e0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80149b2:	69bb      	ldr	r3, [r7, #24]
 80149b4:	015a      	lsls	r2, r3, #5
 80149b6:	69fb      	ldr	r3, [r7, #28]
 80149b8:	4413      	add	r3, r2
 80149ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	69ba      	ldr	r2, [r7, #24]
 80149c2:	0151      	lsls	r1, r2, #5
 80149c4:	69fa      	ldr	r2, [r7, #28]
 80149c6:	440a      	add	r2, r1
 80149c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80149cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80149d0:	6013      	str	r3, [r2, #0]
 80149d2:	e015      	b.n	8014a00 <USB_EPStartXfer+0x310>
 80149d4:	e007ffff 	.word	0xe007ffff
 80149d8:	fff80000 	.word	0xfff80000
 80149dc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80149e0:	69bb      	ldr	r3, [r7, #24]
 80149e2:	015a      	lsls	r2, r3, #5
 80149e4:	69fb      	ldr	r3, [r7, #28]
 80149e6:	4413      	add	r3, r2
 80149e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	69ba      	ldr	r2, [r7, #24]
 80149f0:	0151      	lsls	r1, r2, #5
 80149f2:	69fa      	ldr	r2, [r7, #28]
 80149f4:	440a      	add	r2, r1
 80149f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80149fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80149fe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	68d9      	ldr	r1, [r3, #12]
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	781a      	ldrb	r2, [r3, #0]
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	691b      	ldr	r3, [r3, #16]
 8014a0c:	b298      	uxth	r0, r3
 8014a0e:	79fb      	ldrb	r3, [r7, #7]
 8014a10:	9300      	str	r3, [sp, #0]
 8014a12:	4603      	mov	r3, r0
 8014a14:	68f8      	ldr	r0, [r7, #12]
 8014a16:	f000 f9b9 	bl	8014d8c <USB_WritePacket>
 8014a1a:	e102      	b.n	8014c22 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014a1c:	69bb      	ldr	r3, [r7, #24]
 8014a1e:	015a      	lsls	r2, r3, #5
 8014a20:	69fb      	ldr	r3, [r7, #28]
 8014a22:	4413      	add	r3, r2
 8014a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a28:	691a      	ldr	r2, [r3, #16]
 8014a2a:	69bb      	ldr	r3, [r7, #24]
 8014a2c:	0159      	lsls	r1, r3, #5
 8014a2e:	69fb      	ldr	r3, [r7, #28]
 8014a30:	440b      	add	r3, r1
 8014a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a36:	4619      	mov	r1, r3
 8014a38:	4b7c      	ldr	r3, [pc, #496]	@ (8014c2c <USB_EPStartXfer+0x53c>)
 8014a3a:	4013      	ands	r3, r2
 8014a3c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014a3e:	69bb      	ldr	r3, [r7, #24]
 8014a40:	015a      	lsls	r2, r3, #5
 8014a42:	69fb      	ldr	r3, [r7, #28]
 8014a44:	4413      	add	r3, r2
 8014a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a4a:	691a      	ldr	r2, [r3, #16]
 8014a4c:	69bb      	ldr	r3, [r7, #24]
 8014a4e:	0159      	lsls	r1, r3, #5
 8014a50:	69fb      	ldr	r3, [r7, #28]
 8014a52:	440b      	add	r3, r1
 8014a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a58:	4619      	mov	r1, r3
 8014a5a:	4b75      	ldr	r3, [pc, #468]	@ (8014c30 <USB_EPStartXfer+0x540>)
 8014a5c:	4013      	ands	r3, r2
 8014a5e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014a60:	69bb      	ldr	r3, [r7, #24]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d12f      	bne.n	8014ac6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	691b      	ldr	r3, [r3, #16]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d003      	beq.n	8014a76 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	689a      	ldr	r2, [r3, #8]
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014a76:	68bb      	ldr	r3, [r7, #8]
 8014a78:	689a      	ldr	r2, [r3, #8]
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014a7e:	69bb      	ldr	r3, [r7, #24]
 8014a80:	015a      	lsls	r2, r3, #5
 8014a82:	69fb      	ldr	r3, [r7, #28]
 8014a84:	4413      	add	r3, r2
 8014a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a8a:	691a      	ldr	r2, [r3, #16]
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	6a1b      	ldr	r3, [r3, #32]
 8014a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014a94:	69b9      	ldr	r1, [r7, #24]
 8014a96:	0148      	lsls	r0, r1, #5
 8014a98:	69f9      	ldr	r1, [r7, #28]
 8014a9a:	4401      	add	r1, r0
 8014a9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014aa0:	4313      	orrs	r3, r2
 8014aa2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	015a      	lsls	r2, r3, #5
 8014aa8:	69fb      	ldr	r3, [r7, #28]
 8014aaa:	4413      	add	r3, r2
 8014aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ab0:	691b      	ldr	r3, [r3, #16]
 8014ab2:	69ba      	ldr	r2, [r7, #24]
 8014ab4:	0151      	lsls	r1, r2, #5
 8014ab6:	69fa      	ldr	r2, [r7, #28]
 8014ab8:	440a      	add	r2, r1
 8014aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014abe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014ac2:	6113      	str	r3, [r2, #16]
 8014ac4:	e05f      	b.n	8014b86 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	691b      	ldr	r3, [r3, #16]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d123      	bne.n	8014b16 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014ace:	69bb      	ldr	r3, [r7, #24]
 8014ad0:	015a      	lsls	r2, r3, #5
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ada:	691a      	ldr	r2, [r3, #16]
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	689b      	ldr	r3, [r3, #8]
 8014ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ae4:	69b9      	ldr	r1, [r7, #24]
 8014ae6:	0148      	lsls	r0, r1, #5
 8014ae8:	69f9      	ldr	r1, [r7, #28]
 8014aea:	4401      	add	r1, r0
 8014aec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014af0:	4313      	orrs	r3, r2
 8014af2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014af4:	69bb      	ldr	r3, [r7, #24]
 8014af6:	015a      	lsls	r2, r3, #5
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	4413      	add	r3, r2
 8014afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b00:	691b      	ldr	r3, [r3, #16]
 8014b02:	69ba      	ldr	r2, [r7, #24]
 8014b04:	0151      	lsls	r1, r2, #5
 8014b06:	69fa      	ldr	r2, [r7, #28]
 8014b08:	440a      	add	r2, r1
 8014b0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b12:	6113      	str	r3, [r2, #16]
 8014b14:	e037      	b.n	8014b86 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	691a      	ldr	r2, [r3, #16]
 8014b1a:	68bb      	ldr	r3, [r7, #8]
 8014b1c:	689b      	ldr	r3, [r3, #8]
 8014b1e:	4413      	add	r3, r2
 8014b20:	1e5a      	subs	r2, r3, #1
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	689b      	ldr	r3, [r3, #8]
 8014b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b2a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	689b      	ldr	r3, [r3, #8]
 8014b30:	8afa      	ldrh	r2, [r7, #22]
 8014b32:	fb03 f202 	mul.w	r2, r3, r2
 8014b36:	68bb      	ldr	r3, [r7, #8]
 8014b38:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	015a      	lsls	r2, r3, #5
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	4413      	add	r3, r2
 8014b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b46:	691a      	ldr	r2, [r3, #16]
 8014b48:	8afb      	ldrh	r3, [r7, #22]
 8014b4a:	04d9      	lsls	r1, r3, #19
 8014b4c:	4b39      	ldr	r3, [pc, #228]	@ (8014c34 <USB_EPStartXfer+0x544>)
 8014b4e:	400b      	ands	r3, r1
 8014b50:	69b9      	ldr	r1, [r7, #24]
 8014b52:	0148      	lsls	r0, r1, #5
 8014b54:	69f9      	ldr	r1, [r7, #28]
 8014b56:	4401      	add	r1, r0
 8014b58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014b5c:	4313      	orrs	r3, r2
 8014b5e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014b60:	69bb      	ldr	r3, [r7, #24]
 8014b62:	015a      	lsls	r2, r3, #5
 8014b64:	69fb      	ldr	r3, [r7, #28]
 8014b66:	4413      	add	r3, r2
 8014b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b6c:	691a      	ldr	r2, [r3, #16]
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	6a1b      	ldr	r3, [r3, #32]
 8014b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014b76:	69b9      	ldr	r1, [r7, #24]
 8014b78:	0148      	lsls	r0, r1, #5
 8014b7a:	69f9      	ldr	r1, [r7, #28]
 8014b7c:	4401      	add	r1, r0
 8014b7e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014b82:	4313      	orrs	r3, r2
 8014b84:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014b86:	79fb      	ldrb	r3, [r7, #7]
 8014b88:	2b01      	cmp	r3, #1
 8014b8a:	d10d      	bne.n	8014ba8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	68db      	ldr	r3, [r3, #12]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d009      	beq.n	8014ba8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014b94:	68bb      	ldr	r3, [r7, #8]
 8014b96:	68d9      	ldr	r1, [r3, #12]
 8014b98:	69bb      	ldr	r3, [r7, #24]
 8014b9a:	015a      	lsls	r2, r3, #5
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	4413      	add	r3, r2
 8014ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ba4:	460a      	mov	r2, r1
 8014ba6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	791b      	ldrb	r3, [r3, #4]
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d128      	bne.n	8014c02 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014bb0:	69fb      	ldr	r3, [r7, #28]
 8014bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014bb6:	689b      	ldr	r3, [r3, #8]
 8014bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d110      	bne.n	8014be2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014bc0:	69bb      	ldr	r3, [r7, #24]
 8014bc2:	015a      	lsls	r2, r3, #5
 8014bc4:	69fb      	ldr	r3, [r7, #28]
 8014bc6:	4413      	add	r3, r2
 8014bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	69ba      	ldr	r2, [r7, #24]
 8014bd0:	0151      	lsls	r1, r2, #5
 8014bd2:	69fa      	ldr	r2, [r7, #28]
 8014bd4:	440a      	add	r2, r1
 8014bd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014bda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014bde:	6013      	str	r3, [r2, #0]
 8014be0:	e00f      	b.n	8014c02 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014be2:	69bb      	ldr	r3, [r7, #24]
 8014be4:	015a      	lsls	r2, r3, #5
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	4413      	add	r3, r2
 8014bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	69ba      	ldr	r2, [r7, #24]
 8014bf2:	0151      	lsls	r1, r2, #5
 8014bf4:	69fa      	ldr	r2, [r7, #28]
 8014bf6:	440a      	add	r2, r1
 8014bf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014c00:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014c02:	69bb      	ldr	r3, [r7, #24]
 8014c04:	015a      	lsls	r2, r3, #5
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	4413      	add	r3, r2
 8014c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	69ba      	ldr	r2, [r7, #24]
 8014c12:	0151      	lsls	r1, r2, #5
 8014c14:	69fa      	ldr	r2, [r7, #28]
 8014c16:	440a      	add	r2, r1
 8014c18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014c1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014c20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014c22:	2300      	movs	r3, #0
}
 8014c24:	4618      	mov	r0, r3
 8014c26:	3720      	adds	r7, #32
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	fff80000 	.word	0xfff80000
 8014c30:	e007ffff 	.word	0xe007ffff
 8014c34:	1ff80000 	.word	0x1ff80000

08014c38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b087      	sub	sp, #28
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014c42:	2300      	movs	r3, #0
 8014c44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014c46:	2300      	movs	r3, #0
 8014c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	785b      	ldrb	r3, [r3, #1]
 8014c52:	2b01      	cmp	r3, #1
 8014c54:	d14a      	bne.n	8014cec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	015a      	lsls	r2, r3, #5
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	4413      	add	r3, r2
 8014c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014c6e:	f040 8086 	bne.w	8014d7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	781b      	ldrb	r3, [r3, #0]
 8014c76:	015a      	lsls	r2, r3, #5
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	4413      	add	r3, r2
 8014c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	683a      	ldr	r2, [r7, #0]
 8014c84:	7812      	ldrb	r2, [r2, #0]
 8014c86:	0151      	lsls	r1, r2, #5
 8014c88:	693a      	ldr	r2, [r7, #16]
 8014c8a:	440a      	add	r2, r1
 8014c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014c94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	781b      	ldrb	r3, [r3, #0]
 8014c9a:	015a      	lsls	r2, r3, #5
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	4413      	add	r3, r2
 8014ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	683a      	ldr	r2, [r7, #0]
 8014ca8:	7812      	ldrb	r2, [r2, #0]
 8014caa:	0151      	lsls	r1, r2, #5
 8014cac:	693a      	ldr	r2, [r7, #16]
 8014cae:	440a      	add	r2, r1
 8014cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014cb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014cc6:	4293      	cmp	r3, r2
 8014cc8:	d902      	bls.n	8014cd0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014cca:	2301      	movs	r3, #1
 8014ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8014cce:	e056      	b.n	8014d7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014cd0:	683b      	ldr	r3, [r7, #0]
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	015a      	lsls	r2, r3, #5
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	4413      	add	r3, r2
 8014cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014ce8:	d0e7      	beq.n	8014cba <USB_EPStopXfer+0x82>
 8014cea:	e048      	b.n	8014d7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	781b      	ldrb	r3, [r3, #0]
 8014cf0:	015a      	lsls	r2, r3, #5
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	4413      	add	r3, r2
 8014cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014d00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014d04:	d13b      	bne.n	8014d7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014d06:	683b      	ldr	r3, [r7, #0]
 8014d08:	781b      	ldrb	r3, [r3, #0]
 8014d0a:	015a      	lsls	r2, r3, #5
 8014d0c:	693b      	ldr	r3, [r7, #16]
 8014d0e:	4413      	add	r3, r2
 8014d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	683a      	ldr	r2, [r7, #0]
 8014d18:	7812      	ldrb	r2, [r2, #0]
 8014d1a:	0151      	lsls	r1, r2, #5
 8014d1c:	693a      	ldr	r2, [r7, #16]
 8014d1e:	440a      	add	r2, r1
 8014d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014d28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	781b      	ldrb	r3, [r3, #0]
 8014d2e:	015a      	lsls	r2, r3, #5
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	4413      	add	r3, r2
 8014d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	683a      	ldr	r2, [r7, #0]
 8014d3c:	7812      	ldrb	r2, [r2, #0]
 8014d3e:	0151      	lsls	r1, r2, #5
 8014d40:	693a      	ldr	r2, [r7, #16]
 8014d42:	440a      	add	r2, r1
 8014d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014d4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	3301      	adds	r3, #1
 8014d52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014d5a:	4293      	cmp	r3, r2
 8014d5c:	d902      	bls.n	8014d64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014d5e:	2301      	movs	r3, #1
 8014d60:	75fb      	strb	r3, [r7, #23]
          break;
 8014d62:	e00c      	b.n	8014d7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	781b      	ldrb	r3, [r3, #0]
 8014d68:	015a      	lsls	r2, r3, #5
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	4413      	add	r3, r2
 8014d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014d78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014d7c:	d0e7      	beq.n	8014d4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	371c      	adds	r7, #28
 8014d84:	46bd      	mov	sp, r7
 8014d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8a:	4770      	bx	lr

08014d8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014d8c:	b480      	push	{r7}
 8014d8e:	b089      	sub	sp, #36	@ 0x24
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	4611      	mov	r1, r2
 8014d98:	461a      	mov	r2, r3
 8014d9a:	460b      	mov	r3, r1
 8014d9c:	71fb      	strb	r3, [r7, #7]
 8014d9e:	4613      	mov	r3, r2
 8014da0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014daa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d123      	bne.n	8014dfa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014db2:	88bb      	ldrh	r3, [r7, #4]
 8014db4:	3303      	adds	r3, #3
 8014db6:	089b      	lsrs	r3, r3, #2
 8014db8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014dba:	2300      	movs	r3, #0
 8014dbc:	61bb      	str	r3, [r7, #24]
 8014dbe:	e018      	b.n	8014df2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014dc0:	79fb      	ldrb	r3, [r7, #7]
 8014dc2:	031a      	lsls	r2, r3, #12
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	4413      	add	r3, r2
 8014dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014dcc:	461a      	mov	r2, r3
 8014dce:	69fb      	ldr	r3, [r7, #28]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014dd4:	69fb      	ldr	r3, [r7, #28]
 8014dd6:	3301      	adds	r3, #1
 8014dd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014dda:	69fb      	ldr	r3, [r7, #28]
 8014ddc:	3301      	adds	r3, #1
 8014dde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014de0:	69fb      	ldr	r3, [r7, #28]
 8014de2:	3301      	adds	r3, #1
 8014de4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014de6:	69fb      	ldr	r3, [r7, #28]
 8014de8:	3301      	adds	r3, #1
 8014dea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	3301      	adds	r3, #1
 8014df0:	61bb      	str	r3, [r7, #24]
 8014df2:	69ba      	ldr	r2, [r7, #24]
 8014df4:	693b      	ldr	r3, [r7, #16]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d3e2      	bcc.n	8014dc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014dfa:	2300      	movs	r3, #0
}
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	3724      	adds	r7, #36	@ 0x24
 8014e00:	46bd      	mov	sp, r7
 8014e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e06:	4770      	bx	lr

08014e08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b08b      	sub	sp, #44	@ 0x2c
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	60b9      	str	r1, [r7, #8]
 8014e12:	4613      	mov	r3, r2
 8014e14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014e1e:	88fb      	ldrh	r3, [r7, #6]
 8014e20:	089b      	lsrs	r3, r3, #2
 8014e22:	b29b      	uxth	r3, r3
 8014e24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014e26:	88fb      	ldrh	r3, [r7, #6]
 8014e28:	f003 0303 	and.w	r3, r3, #3
 8014e2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014e2e:	2300      	movs	r3, #0
 8014e30:	623b      	str	r3, [r7, #32]
 8014e32:	e014      	b.n	8014e5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014e34:	69bb      	ldr	r3, [r7, #24]
 8014e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014e3a:	681a      	ldr	r2, [r3, #0]
 8014e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8014e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e42:	3301      	adds	r3, #1
 8014e44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e48:	3301      	adds	r3, #1
 8014e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e4e:	3301      	adds	r3, #1
 8014e50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e54:	3301      	adds	r3, #1
 8014e56:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8014e58:	6a3b      	ldr	r3, [r7, #32]
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	623b      	str	r3, [r7, #32]
 8014e5e:	6a3a      	ldr	r2, [r7, #32]
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	429a      	cmp	r2, r3
 8014e64:	d3e6      	bcc.n	8014e34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014e66:	8bfb      	ldrh	r3, [r7, #30]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d01e      	beq.n	8014eaa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014e70:	69bb      	ldr	r3, [r7, #24]
 8014e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014e76:	461a      	mov	r2, r3
 8014e78:	f107 0310 	add.w	r3, r7, #16
 8014e7c:	6812      	ldr	r2, [r2, #0]
 8014e7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014e80:	693a      	ldr	r2, [r7, #16]
 8014e82:	6a3b      	ldr	r3, [r7, #32]
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	00db      	lsls	r3, r3, #3
 8014e88:	fa22 f303 	lsr.w	r3, r2, r3
 8014e8c:	b2da      	uxtb	r2, r3
 8014e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e90:	701a      	strb	r2, [r3, #0]
      i++;
 8014e92:	6a3b      	ldr	r3, [r7, #32]
 8014e94:	3301      	adds	r3, #1
 8014e96:	623b      	str	r3, [r7, #32]
      pDest++;
 8014e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e9a:	3301      	adds	r3, #1
 8014e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8014e9e:	8bfb      	ldrh	r3, [r7, #30]
 8014ea0:	3b01      	subs	r3, #1
 8014ea2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014ea4:	8bfb      	ldrh	r3, [r7, #30]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d1ea      	bne.n	8014e80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	372c      	adds	r7, #44	@ 0x2c
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb6:	4770      	bx	lr

08014eb8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014eb8:	b480      	push	{r7}
 8014eba:	b085      	sub	sp, #20
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
 8014ec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	781b      	ldrb	r3, [r3, #0]
 8014eca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	785b      	ldrb	r3, [r3, #1]
 8014ed0:	2b01      	cmp	r3, #1
 8014ed2:	d12c      	bne.n	8014f2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	015a      	lsls	r2, r3, #5
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	4413      	add	r3, r2
 8014edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	db12      	blt.n	8014f0c <USB_EPSetStall+0x54>
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d00f      	beq.n	8014f0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014eec:	68bb      	ldr	r3, [r7, #8]
 8014eee:	015a      	lsls	r2, r3, #5
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	4413      	add	r3, r2
 8014ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	68ba      	ldr	r2, [r7, #8]
 8014efc:	0151      	lsls	r1, r2, #5
 8014efe:	68fa      	ldr	r2, [r7, #12]
 8014f00:	440a      	add	r2, r1
 8014f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8014f0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	015a      	lsls	r2, r3, #5
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	4413      	add	r3, r2
 8014f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	68ba      	ldr	r2, [r7, #8]
 8014f1c:	0151      	lsls	r1, r2, #5
 8014f1e:	68fa      	ldr	r2, [r7, #12]
 8014f20:	440a      	add	r2, r1
 8014f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014f2a:	6013      	str	r3, [r2, #0]
 8014f2c:	e02b      	b.n	8014f86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	015a      	lsls	r2, r3, #5
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	4413      	add	r3, r2
 8014f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	db12      	blt.n	8014f66 <USB_EPSetStall+0xae>
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d00f      	beq.n	8014f66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014f46:	68bb      	ldr	r3, [r7, #8]
 8014f48:	015a      	lsls	r2, r3, #5
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	4413      	add	r3, r2
 8014f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	68ba      	ldr	r2, [r7, #8]
 8014f56:	0151      	lsls	r1, r2, #5
 8014f58:	68fa      	ldr	r2, [r7, #12]
 8014f5a:	440a      	add	r2, r1
 8014f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8014f64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	015a      	lsls	r2, r3, #5
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	4413      	add	r3, r2
 8014f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	68ba      	ldr	r2, [r7, #8]
 8014f76:	0151      	lsls	r1, r2, #5
 8014f78:	68fa      	ldr	r2, [r7, #12]
 8014f7a:	440a      	add	r2, r1
 8014f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014f84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f86:	2300      	movs	r3, #0
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	3714      	adds	r7, #20
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f92:	4770      	bx	lr

08014f94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014f94:	b480      	push	{r7}
 8014f96:	b085      	sub	sp, #20
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
 8014f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	785b      	ldrb	r3, [r3, #1]
 8014fac:	2b01      	cmp	r3, #1
 8014fae:	d128      	bne.n	8015002 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	015a      	lsls	r2, r3, #5
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	4413      	add	r3, r2
 8014fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	68ba      	ldr	r2, [r7, #8]
 8014fc0:	0151      	lsls	r1, r2, #5
 8014fc2:	68fa      	ldr	r2, [r7, #12]
 8014fc4:	440a      	add	r2, r1
 8014fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014fca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014fce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	791b      	ldrb	r3, [r3, #4]
 8014fd4:	2b03      	cmp	r3, #3
 8014fd6:	d003      	beq.n	8014fe0 <USB_EPClearStall+0x4c>
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	791b      	ldrb	r3, [r3, #4]
 8014fdc:	2b02      	cmp	r3, #2
 8014fde:	d138      	bne.n	8015052 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	015a      	lsls	r2, r3, #5
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	4413      	add	r3, r2
 8014fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	68ba      	ldr	r2, [r7, #8]
 8014ff0:	0151      	lsls	r1, r2, #5
 8014ff2:	68fa      	ldr	r2, [r7, #12]
 8014ff4:	440a      	add	r2, r1
 8014ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014ffe:	6013      	str	r3, [r2, #0]
 8015000:	e027      	b.n	8015052 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	015a      	lsls	r2, r3, #5
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	4413      	add	r3, r2
 801500a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	68ba      	ldr	r2, [r7, #8]
 8015012:	0151      	lsls	r1, r2, #5
 8015014:	68fa      	ldr	r2, [r7, #12]
 8015016:	440a      	add	r2, r1
 8015018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801501c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015020:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	791b      	ldrb	r3, [r3, #4]
 8015026:	2b03      	cmp	r3, #3
 8015028:	d003      	beq.n	8015032 <USB_EPClearStall+0x9e>
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	791b      	ldrb	r3, [r3, #4]
 801502e:	2b02      	cmp	r3, #2
 8015030:	d10f      	bne.n	8015052 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015032:	68bb      	ldr	r3, [r7, #8]
 8015034:	015a      	lsls	r2, r3, #5
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	4413      	add	r3, r2
 801503a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	0151      	lsls	r1, r2, #5
 8015044:	68fa      	ldr	r2, [r7, #12]
 8015046:	440a      	add	r2, r1
 8015048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801504c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015050:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015052:	2300      	movs	r3, #0
}
 8015054:	4618      	mov	r0, r3
 8015056:	3714      	adds	r7, #20
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr

08015060 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015060:	b480      	push	{r7}
 8015062:	b085      	sub	sp, #20
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	460b      	mov	r3, r1
 801506a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	68fa      	ldr	r2, [r7, #12]
 801507a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801507e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8015082:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801508a:	681a      	ldr	r2, [r3, #0]
 801508c:	78fb      	ldrb	r3, [r7, #3]
 801508e:	011b      	lsls	r3, r3, #4
 8015090:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015094:	68f9      	ldr	r1, [r7, #12]
 8015096:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801509a:	4313      	orrs	r3, r2
 801509c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801509e:	2300      	movs	r3, #0
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3714      	adds	r7, #20
 80150a4:	46bd      	mov	sp, r7
 80150a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150aa:	4770      	bx	lr

080150ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80150ac:	b480      	push	{r7}
 80150ae:	b085      	sub	sp, #20
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	68fa      	ldr	r2, [r7, #12]
 80150c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80150c6:	f023 0303 	bic.w	r3, r3, #3
 80150ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80150d2:	685b      	ldr	r3, [r3, #4]
 80150d4:	68fa      	ldr	r2, [r7, #12]
 80150d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80150da:	f023 0302 	bic.w	r3, r3, #2
 80150de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80150e0:	2300      	movs	r3, #0
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	3714      	adds	r7, #20
 80150e6:	46bd      	mov	sp, r7
 80150e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ec:	4770      	bx	lr

080150ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80150ee:	b480      	push	{r7}
 80150f0:	b085      	sub	sp, #20
 80150f2:	af00      	add	r7, sp, #0
 80150f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	68fa      	ldr	r2, [r7, #12]
 8015104:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015108:	f023 0303 	bic.w	r3, r3, #3
 801510c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	68fa      	ldr	r2, [r7, #12]
 8015118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801511c:	f043 0302 	orr.w	r3, r3, #2
 8015120:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015122:	2300      	movs	r3, #0
}
 8015124:	4618      	mov	r0, r3
 8015126:	3714      	adds	r7, #20
 8015128:	46bd      	mov	sp, r7
 801512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512e:	4770      	bx	lr

08015130 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015130:	b480      	push	{r7}
 8015132:	b085      	sub	sp, #20
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	695b      	ldr	r3, [r3, #20]
 801513c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	699b      	ldr	r3, [r3, #24]
 8015142:	68fa      	ldr	r2, [r7, #12]
 8015144:	4013      	ands	r3, r2
 8015146:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015148:	68fb      	ldr	r3, [r7, #12]
}
 801514a:	4618      	mov	r0, r3
 801514c:	3714      	adds	r7, #20
 801514e:	46bd      	mov	sp, r7
 8015150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015154:	4770      	bx	lr

08015156 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015156:	b480      	push	{r7}
 8015158:	b085      	sub	sp, #20
 801515a:	af00      	add	r7, sp, #0
 801515c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015168:	699b      	ldr	r3, [r3, #24]
 801516a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015172:	69db      	ldr	r3, [r3, #28]
 8015174:	68ba      	ldr	r2, [r7, #8]
 8015176:	4013      	ands	r3, r2
 8015178:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	0c1b      	lsrs	r3, r3, #16
}
 801517e:	4618      	mov	r0, r3
 8015180:	3714      	adds	r7, #20
 8015182:	46bd      	mov	sp, r7
 8015184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015188:	4770      	bx	lr

0801518a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801518a:	b480      	push	{r7}
 801518c:	b085      	sub	sp, #20
 801518e:	af00      	add	r7, sp, #0
 8015190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801519c:	699b      	ldr	r3, [r3, #24]
 801519e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151a6:	69db      	ldr	r3, [r3, #28]
 80151a8:	68ba      	ldr	r2, [r7, #8]
 80151aa:	4013      	ands	r3, r2
 80151ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	b29b      	uxth	r3, r3
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3714      	adds	r7, #20
 80151b6:	46bd      	mov	sp, r7
 80151b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151bc:	4770      	bx	lr

080151be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80151be:	b480      	push	{r7}
 80151c0:	b085      	sub	sp, #20
 80151c2:	af00      	add	r7, sp, #0
 80151c4:	6078      	str	r0, [r7, #4]
 80151c6:	460b      	mov	r3, r1
 80151c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80151ce:	78fb      	ldrb	r3, [r7, #3]
 80151d0:	015a      	lsls	r2, r3, #5
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	4413      	add	r3, r2
 80151d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151da:	689b      	ldr	r3, [r3, #8]
 80151dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151e4:	695b      	ldr	r3, [r3, #20]
 80151e6:	68ba      	ldr	r2, [r7, #8]
 80151e8:	4013      	ands	r3, r2
 80151ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80151ec:	68bb      	ldr	r3, [r7, #8]
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3714      	adds	r7, #20
 80151f2:	46bd      	mov	sp, r7
 80151f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f8:	4770      	bx	lr

080151fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80151fa:	b480      	push	{r7}
 80151fc:	b087      	sub	sp, #28
 80151fe:	af00      	add	r7, sp, #0
 8015200:	6078      	str	r0, [r7, #4]
 8015202:	460b      	mov	r3, r1
 8015204:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015210:	691b      	ldr	r3, [r3, #16]
 8015212:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801521a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801521c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801521e:	78fb      	ldrb	r3, [r7, #3]
 8015220:	f003 030f 	and.w	r3, r3, #15
 8015224:	68fa      	ldr	r2, [r7, #12]
 8015226:	fa22 f303 	lsr.w	r3, r2, r3
 801522a:	01db      	lsls	r3, r3, #7
 801522c:	b2db      	uxtb	r3, r3
 801522e:	693a      	ldr	r2, [r7, #16]
 8015230:	4313      	orrs	r3, r2
 8015232:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015234:	78fb      	ldrb	r3, [r7, #3]
 8015236:	015a      	lsls	r2, r3, #5
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	4413      	add	r3, r2
 801523c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015240:	689b      	ldr	r3, [r3, #8]
 8015242:	693a      	ldr	r2, [r7, #16]
 8015244:	4013      	ands	r3, r2
 8015246:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015248:	68bb      	ldr	r3, [r7, #8]
}
 801524a:	4618      	mov	r0, r3
 801524c:	371c      	adds	r7, #28
 801524e:	46bd      	mov	sp, r7
 8015250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015254:	4770      	bx	lr

08015256 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015256:	b480      	push	{r7}
 8015258:	b083      	sub	sp, #12
 801525a:	af00      	add	r7, sp, #0
 801525c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	695b      	ldr	r3, [r3, #20]
 8015262:	f003 0301 	and.w	r3, r3, #1
}
 8015266:	4618      	mov	r0, r3
 8015268:	370c      	adds	r7, #12
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr
	...

08015274 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015274:	b480      	push	{r7}
 8015276:	b085      	sub	sp, #20
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015286:	681a      	ldr	r2, [r3, #0]
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801528e:	4619      	mov	r1, r3
 8015290:	4b09      	ldr	r3, [pc, #36]	@ (80152b8 <USB_ActivateSetup+0x44>)
 8015292:	4013      	ands	r3, r2
 8015294:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801529c:	685b      	ldr	r3, [r3, #4]
 801529e:	68fa      	ldr	r2, [r7, #12]
 80152a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80152a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80152a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80152aa:	2300      	movs	r3, #0
}
 80152ac:	4618      	mov	r0, r3
 80152ae:	3714      	adds	r7, #20
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr
 80152b8:	fffff800 	.word	0xfffff800

080152bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80152bc:	b480      	push	{r7}
 80152be:	b087      	sub	sp, #28
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	60f8      	str	r0, [r7, #12]
 80152c4:	460b      	mov	r3, r1
 80152c6:	607a      	str	r2, [r7, #4]
 80152c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	333c      	adds	r3, #60	@ 0x3c
 80152d2:	3304      	adds	r3, #4
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80152d8:	693b      	ldr	r3, [r7, #16]
 80152da:	4a26      	ldr	r2, [pc, #152]	@ (8015374 <USB_EP0_OutStart+0xb8>)
 80152dc:	4293      	cmp	r3, r2
 80152de:	d90a      	bls.n	80152f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80152ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80152f0:	d101      	bne.n	80152f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80152f2:	2300      	movs	r3, #0
 80152f4:	e037      	b.n	8015366 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80152fc:	461a      	mov	r2, r3
 80152fe:	2300      	movs	r3, #0
 8015300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015308:	691b      	ldr	r3, [r3, #16]
 801530a:	697a      	ldr	r2, [r7, #20]
 801530c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015310:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801531c:	691b      	ldr	r3, [r3, #16]
 801531e:	697a      	ldr	r2, [r7, #20]
 8015320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015324:	f043 0318 	orr.w	r3, r3, #24
 8015328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015330:	691b      	ldr	r3, [r3, #16]
 8015332:	697a      	ldr	r2, [r7, #20]
 8015334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015338:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801533c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801533e:	7afb      	ldrb	r3, [r7, #11]
 8015340:	2b01      	cmp	r3, #1
 8015342:	d10f      	bne.n	8015364 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015344:	697b      	ldr	r3, [r7, #20]
 8015346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801534a:	461a      	mov	r2, r3
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	697a      	ldr	r2, [r7, #20]
 801535a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801535e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8015362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	371c      	adds	r7, #28
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr
 8015372:	bf00      	nop
 8015374:	4f54300a 	.word	0x4f54300a

08015378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015378:	b480      	push	{r7}
 801537a:	b085      	sub	sp, #20
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015380:	2300      	movs	r3, #0
 8015382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	3301      	adds	r3, #1
 8015388:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015390:	d901      	bls.n	8015396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015392:	2303      	movs	r3, #3
 8015394:	e01b      	b.n	80153ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	691b      	ldr	r3, [r3, #16]
 801539a:	2b00      	cmp	r3, #0
 801539c:	daf2      	bge.n	8015384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801539e:	2300      	movs	r3, #0
 80153a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	691b      	ldr	r3, [r3, #16]
 80153a6:	f043 0201 	orr.w	r2, r3, #1
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	3301      	adds	r3, #1
 80153b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80153ba:	d901      	bls.n	80153c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80153bc:	2303      	movs	r3, #3
 80153be:	e006      	b.n	80153ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	691b      	ldr	r3, [r3, #16]
 80153c4:	f003 0301 	and.w	r3, r3, #1
 80153c8:	2b01      	cmp	r3, #1
 80153ca:	d0f0      	beq.n	80153ae <USB_CoreReset+0x36>

  return HAL_OK;
 80153cc:	2300      	movs	r3, #0
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3714      	adds	r7, #20
 80153d2:	46bd      	mov	sp, r7
 80153d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d8:	4770      	bx	lr
	...

080153dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b084      	sub	sp, #16
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	460b      	mov	r3, r1
 80153e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80153e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80153ec:	f002 fd08 	bl	8017e00 <USBD_static_malloc>
 80153f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d109      	bne.n	801540c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	32b0      	adds	r2, #176	@ 0xb0
 8015402:	2100      	movs	r1, #0
 8015404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015408:	2302      	movs	r3, #2
 801540a:	e0d4      	b.n	80155b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801540c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015410:	2100      	movs	r1, #0
 8015412:	68f8      	ldr	r0, [r7, #12]
 8015414:	f002 fd5a 	bl	8017ecc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	32b0      	adds	r2, #176	@ 0xb0
 8015422:	68f9      	ldr	r1, [r7, #12]
 8015424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	32b0      	adds	r2, #176	@ 0xb0
 8015432:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	7c1b      	ldrb	r3, [r3, #16]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d138      	bne.n	80154b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015444:	4b5e      	ldr	r3, [pc, #376]	@ (80155c0 <USBD_CDC_Init+0x1e4>)
 8015446:	7819      	ldrb	r1, [r3, #0]
 8015448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801544c:	2202      	movs	r2, #2
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f002 fbb3 	bl	8017bba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015454:	4b5a      	ldr	r3, [pc, #360]	@ (80155c0 <USBD_CDC_Init+0x1e4>)
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	f003 020f 	and.w	r2, r3, #15
 801545c:	6879      	ldr	r1, [r7, #4]
 801545e:	4613      	mov	r3, r2
 8015460:	009b      	lsls	r3, r3, #2
 8015462:	4413      	add	r3, r2
 8015464:	009b      	lsls	r3, r3, #2
 8015466:	440b      	add	r3, r1
 8015468:	3324      	adds	r3, #36	@ 0x24
 801546a:	2201      	movs	r2, #1
 801546c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801546e:	4b55      	ldr	r3, [pc, #340]	@ (80155c4 <USBD_CDC_Init+0x1e8>)
 8015470:	7819      	ldrb	r1, [r3, #0]
 8015472:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015476:	2202      	movs	r2, #2
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f002 fb9e 	bl	8017bba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801547e:	4b51      	ldr	r3, [pc, #324]	@ (80155c4 <USBD_CDC_Init+0x1e8>)
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	f003 020f 	and.w	r2, r3, #15
 8015486:	6879      	ldr	r1, [r7, #4]
 8015488:	4613      	mov	r3, r2
 801548a:	009b      	lsls	r3, r3, #2
 801548c:	4413      	add	r3, r2
 801548e:	009b      	lsls	r3, r3, #2
 8015490:	440b      	add	r3, r1
 8015492:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015496:	2201      	movs	r2, #1
 8015498:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801549a:	4b4b      	ldr	r3, [pc, #300]	@ (80155c8 <USBD_CDC_Init+0x1ec>)
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	f003 020f 	and.w	r2, r3, #15
 80154a2:	6879      	ldr	r1, [r7, #4]
 80154a4:	4613      	mov	r3, r2
 80154a6:	009b      	lsls	r3, r3, #2
 80154a8:	4413      	add	r3, r2
 80154aa:	009b      	lsls	r3, r3, #2
 80154ac:	440b      	add	r3, r1
 80154ae:	3326      	adds	r3, #38	@ 0x26
 80154b0:	2210      	movs	r2, #16
 80154b2:	801a      	strh	r2, [r3, #0]
 80154b4:	e035      	b.n	8015522 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80154b6:	4b42      	ldr	r3, [pc, #264]	@ (80155c0 <USBD_CDC_Init+0x1e4>)
 80154b8:	7819      	ldrb	r1, [r3, #0]
 80154ba:	2340      	movs	r3, #64	@ 0x40
 80154bc:	2202      	movs	r2, #2
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f002 fb7b 	bl	8017bba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80154c4:	4b3e      	ldr	r3, [pc, #248]	@ (80155c0 <USBD_CDC_Init+0x1e4>)
 80154c6:	781b      	ldrb	r3, [r3, #0]
 80154c8:	f003 020f 	and.w	r2, r3, #15
 80154cc:	6879      	ldr	r1, [r7, #4]
 80154ce:	4613      	mov	r3, r2
 80154d0:	009b      	lsls	r3, r3, #2
 80154d2:	4413      	add	r3, r2
 80154d4:	009b      	lsls	r3, r3, #2
 80154d6:	440b      	add	r3, r1
 80154d8:	3324      	adds	r3, #36	@ 0x24
 80154da:	2201      	movs	r2, #1
 80154dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80154de:	4b39      	ldr	r3, [pc, #228]	@ (80155c4 <USBD_CDC_Init+0x1e8>)
 80154e0:	7819      	ldrb	r1, [r3, #0]
 80154e2:	2340      	movs	r3, #64	@ 0x40
 80154e4:	2202      	movs	r2, #2
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f002 fb67 	bl	8017bba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80154ec:	4b35      	ldr	r3, [pc, #212]	@ (80155c4 <USBD_CDC_Init+0x1e8>)
 80154ee:	781b      	ldrb	r3, [r3, #0]
 80154f0:	f003 020f 	and.w	r2, r3, #15
 80154f4:	6879      	ldr	r1, [r7, #4]
 80154f6:	4613      	mov	r3, r2
 80154f8:	009b      	lsls	r3, r3, #2
 80154fa:	4413      	add	r3, r2
 80154fc:	009b      	lsls	r3, r3, #2
 80154fe:	440b      	add	r3, r1
 8015500:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015504:	2201      	movs	r2, #1
 8015506:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015508:	4b2f      	ldr	r3, [pc, #188]	@ (80155c8 <USBD_CDC_Init+0x1ec>)
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	f003 020f 	and.w	r2, r3, #15
 8015510:	6879      	ldr	r1, [r7, #4]
 8015512:	4613      	mov	r3, r2
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	4413      	add	r3, r2
 8015518:	009b      	lsls	r3, r3, #2
 801551a:	440b      	add	r3, r1
 801551c:	3326      	adds	r3, #38	@ 0x26
 801551e:	2210      	movs	r2, #16
 8015520:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015522:	4b29      	ldr	r3, [pc, #164]	@ (80155c8 <USBD_CDC_Init+0x1ec>)
 8015524:	7819      	ldrb	r1, [r3, #0]
 8015526:	2308      	movs	r3, #8
 8015528:	2203      	movs	r2, #3
 801552a:	6878      	ldr	r0, [r7, #4]
 801552c:	f002 fb45 	bl	8017bba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015530:	4b25      	ldr	r3, [pc, #148]	@ (80155c8 <USBD_CDC_Init+0x1ec>)
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	f003 020f 	and.w	r2, r3, #15
 8015538:	6879      	ldr	r1, [r7, #4]
 801553a:	4613      	mov	r3, r2
 801553c:	009b      	lsls	r3, r3, #2
 801553e:	4413      	add	r3, r2
 8015540:	009b      	lsls	r3, r3, #2
 8015542:	440b      	add	r3, r1
 8015544:	3324      	adds	r3, #36	@ 0x24
 8015546:	2201      	movs	r2, #1
 8015548:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	2200      	movs	r2, #0
 801554e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015558:	687a      	ldr	r2, [r7, #4]
 801555a:	33b0      	adds	r3, #176	@ 0xb0
 801555c:	009b      	lsls	r3, r3, #2
 801555e:	4413      	add	r3, r2
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	2200      	movs	r2, #0
 801556a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2200      	movs	r2, #0
 8015572:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801557c:	2b00      	cmp	r3, #0
 801557e:	d101      	bne.n	8015584 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015580:	2302      	movs	r3, #2
 8015582:	e018      	b.n	80155b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	7c1b      	ldrb	r3, [r3, #16]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d10a      	bne.n	80155a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801558c:	4b0d      	ldr	r3, [pc, #52]	@ (80155c4 <USBD_CDC_Init+0x1e8>)
 801558e:	7819      	ldrb	r1, [r3, #0]
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015596:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f002 fbfc 	bl	8017d98 <USBD_LL_PrepareReceive>
 80155a0:	e008      	b.n	80155b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155a2:	4b08      	ldr	r3, [pc, #32]	@ (80155c4 <USBD_CDC_Init+0x1e8>)
 80155a4:	7819      	ldrb	r1, [r3, #0]
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80155ac:	2340      	movs	r3, #64	@ 0x40
 80155ae:	6878      	ldr	r0, [r7, #4]
 80155b0:	f002 fbf2 	bl	8017d98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80155b4:	2300      	movs	r3, #0
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	3710      	adds	r7, #16
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	2400009b 	.word	0x2400009b
 80155c4:	2400009c 	.word	0x2400009c
 80155c8:	2400009d 	.word	0x2400009d

080155cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b082      	sub	sp, #8
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	460b      	mov	r3, r1
 80155d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80155d8:	4b3a      	ldr	r3, [pc, #232]	@ (80156c4 <USBD_CDC_DeInit+0xf8>)
 80155da:	781b      	ldrb	r3, [r3, #0]
 80155dc:	4619      	mov	r1, r3
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f002 fb11 	bl	8017c06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80155e4:	4b37      	ldr	r3, [pc, #220]	@ (80156c4 <USBD_CDC_DeInit+0xf8>)
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	f003 020f 	and.w	r2, r3, #15
 80155ec:	6879      	ldr	r1, [r7, #4]
 80155ee:	4613      	mov	r3, r2
 80155f0:	009b      	lsls	r3, r3, #2
 80155f2:	4413      	add	r3, r2
 80155f4:	009b      	lsls	r3, r3, #2
 80155f6:	440b      	add	r3, r1
 80155f8:	3324      	adds	r3, #36	@ 0x24
 80155fa:	2200      	movs	r2, #0
 80155fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80155fe:	4b32      	ldr	r3, [pc, #200]	@ (80156c8 <USBD_CDC_DeInit+0xfc>)
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	4619      	mov	r1, r3
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f002 fafe 	bl	8017c06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801560a:	4b2f      	ldr	r3, [pc, #188]	@ (80156c8 <USBD_CDC_DeInit+0xfc>)
 801560c:	781b      	ldrb	r3, [r3, #0]
 801560e:	f003 020f 	and.w	r2, r3, #15
 8015612:	6879      	ldr	r1, [r7, #4]
 8015614:	4613      	mov	r3, r2
 8015616:	009b      	lsls	r3, r3, #2
 8015618:	4413      	add	r3, r2
 801561a:	009b      	lsls	r3, r3, #2
 801561c:	440b      	add	r3, r1
 801561e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015622:	2200      	movs	r2, #0
 8015624:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015626:	4b29      	ldr	r3, [pc, #164]	@ (80156cc <USBD_CDC_DeInit+0x100>)
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	4619      	mov	r1, r3
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f002 faea 	bl	8017c06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015632:	4b26      	ldr	r3, [pc, #152]	@ (80156cc <USBD_CDC_DeInit+0x100>)
 8015634:	781b      	ldrb	r3, [r3, #0]
 8015636:	f003 020f 	and.w	r2, r3, #15
 801563a:	6879      	ldr	r1, [r7, #4]
 801563c:	4613      	mov	r3, r2
 801563e:	009b      	lsls	r3, r3, #2
 8015640:	4413      	add	r3, r2
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	440b      	add	r3, r1
 8015646:	3324      	adds	r3, #36	@ 0x24
 8015648:	2200      	movs	r2, #0
 801564a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801564c:	4b1f      	ldr	r3, [pc, #124]	@ (80156cc <USBD_CDC_DeInit+0x100>)
 801564e:	781b      	ldrb	r3, [r3, #0]
 8015650:	f003 020f 	and.w	r2, r3, #15
 8015654:	6879      	ldr	r1, [r7, #4]
 8015656:	4613      	mov	r3, r2
 8015658:	009b      	lsls	r3, r3, #2
 801565a:	4413      	add	r3, r2
 801565c:	009b      	lsls	r3, r3, #2
 801565e:	440b      	add	r3, r1
 8015660:	3326      	adds	r3, #38	@ 0x26
 8015662:	2200      	movs	r2, #0
 8015664:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	32b0      	adds	r2, #176	@ 0xb0
 8015670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d01f      	beq.n	80156b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801567e:	687a      	ldr	r2, [r7, #4]
 8015680:	33b0      	adds	r3, #176	@ 0xb0
 8015682:	009b      	lsls	r3, r3, #2
 8015684:	4413      	add	r3, r2
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	32b0      	adds	r2, #176	@ 0xb0
 8015696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801569a:	4618      	mov	r0, r3
 801569c:	f002 fbbe 	bl	8017e1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	32b0      	adds	r2, #176	@ 0xb0
 80156aa:	2100      	movs	r1, #0
 80156ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2200      	movs	r2, #0
 80156b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80156b8:	2300      	movs	r3, #0
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	3708      	adds	r7, #8
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}
 80156c2:	bf00      	nop
 80156c4:	2400009b 	.word	0x2400009b
 80156c8:	2400009c 	.word	0x2400009c
 80156cc:	2400009d 	.word	0x2400009d

080156d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b086      	sub	sp, #24
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
 80156d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	32b0      	adds	r2, #176	@ 0xb0
 80156e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80156ea:	2300      	movs	r3, #0
 80156ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80156ee:	2300      	movs	r3, #0
 80156f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80156f2:	2300      	movs	r3, #0
 80156f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d101      	bne.n	8015700 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80156fc:	2303      	movs	r3, #3
 80156fe:	e0bf      	b.n	8015880 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015708:	2b00      	cmp	r3, #0
 801570a:	d050      	beq.n	80157ae <USBD_CDC_Setup+0xde>
 801570c:	2b20      	cmp	r3, #32
 801570e:	f040 80af 	bne.w	8015870 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	88db      	ldrh	r3, [r3, #6]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d03a      	beq.n	8015790 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801571a:	683b      	ldr	r3, [r7, #0]
 801571c:	781b      	ldrb	r3, [r3, #0]
 801571e:	b25b      	sxtb	r3, r3
 8015720:	2b00      	cmp	r3, #0
 8015722:	da1b      	bge.n	801575c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	33b0      	adds	r3, #176	@ 0xb0
 801572e:	009b      	lsls	r3, r3, #2
 8015730:	4413      	add	r3, r2
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	689b      	ldr	r3, [r3, #8]
 8015736:	683a      	ldr	r2, [r7, #0]
 8015738:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801573a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801573c:	683a      	ldr	r2, [r7, #0]
 801573e:	88d2      	ldrh	r2, [r2, #6]
 8015740:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	88db      	ldrh	r3, [r3, #6]
 8015746:	2b07      	cmp	r3, #7
 8015748:	bf28      	it	cs
 801574a:	2307      	movcs	r3, #7
 801574c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	89fa      	ldrh	r2, [r7, #14]
 8015752:	4619      	mov	r1, r3
 8015754:	6878      	ldr	r0, [r7, #4]
 8015756:	f001 fdbd 	bl	80172d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801575a:	e090      	b.n	801587e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	785a      	ldrb	r2, [r3, #1]
 8015760:	693b      	ldr	r3, [r7, #16]
 8015762:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	88db      	ldrh	r3, [r3, #6]
 801576a:	2b3f      	cmp	r3, #63	@ 0x3f
 801576c:	d803      	bhi.n	8015776 <USBD_CDC_Setup+0xa6>
 801576e:	683b      	ldr	r3, [r7, #0]
 8015770:	88db      	ldrh	r3, [r3, #6]
 8015772:	b2da      	uxtb	r2, r3
 8015774:	e000      	b.n	8015778 <USBD_CDC_Setup+0xa8>
 8015776:	2240      	movs	r2, #64	@ 0x40
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801577e:	6939      	ldr	r1, [r7, #16]
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015786:	461a      	mov	r2, r3
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	f001 fdcf 	bl	801732c <USBD_CtlPrepareRx>
      break;
 801578e:	e076      	b.n	801587e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015796:	687a      	ldr	r2, [r7, #4]
 8015798:	33b0      	adds	r3, #176	@ 0xb0
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	4413      	add	r3, r2
 801579e:	685b      	ldr	r3, [r3, #4]
 80157a0:	689b      	ldr	r3, [r3, #8]
 80157a2:	683a      	ldr	r2, [r7, #0]
 80157a4:	7850      	ldrb	r0, [r2, #1]
 80157a6:	2200      	movs	r2, #0
 80157a8:	6839      	ldr	r1, [r7, #0]
 80157aa:	4798      	blx	r3
      break;
 80157ac:	e067      	b.n	801587e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	785b      	ldrb	r3, [r3, #1]
 80157b2:	2b0b      	cmp	r3, #11
 80157b4:	d851      	bhi.n	801585a <USBD_CDC_Setup+0x18a>
 80157b6:	a201      	add	r2, pc, #4	@ (adr r2, 80157bc <USBD_CDC_Setup+0xec>)
 80157b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157bc:	080157ed 	.word	0x080157ed
 80157c0:	08015869 	.word	0x08015869
 80157c4:	0801585b 	.word	0x0801585b
 80157c8:	0801585b 	.word	0x0801585b
 80157cc:	0801585b 	.word	0x0801585b
 80157d0:	0801585b 	.word	0x0801585b
 80157d4:	0801585b 	.word	0x0801585b
 80157d8:	0801585b 	.word	0x0801585b
 80157dc:	0801585b 	.word	0x0801585b
 80157e0:	0801585b 	.word	0x0801585b
 80157e4:	08015817 	.word	0x08015817
 80157e8:	08015841 	.word	0x08015841
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80157f2:	b2db      	uxtb	r3, r3
 80157f4:	2b03      	cmp	r3, #3
 80157f6:	d107      	bne.n	8015808 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80157f8:	f107 030a 	add.w	r3, r7, #10
 80157fc:	2202      	movs	r2, #2
 80157fe:	4619      	mov	r1, r3
 8015800:	6878      	ldr	r0, [r7, #4]
 8015802:	f001 fd67 	bl	80172d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015806:	e032      	b.n	801586e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015808:	6839      	ldr	r1, [r7, #0]
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f001 fce5 	bl	80171da <USBD_CtlError>
            ret = USBD_FAIL;
 8015810:	2303      	movs	r3, #3
 8015812:	75fb      	strb	r3, [r7, #23]
          break;
 8015814:	e02b      	b.n	801586e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801581c:	b2db      	uxtb	r3, r3
 801581e:	2b03      	cmp	r3, #3
 8015820:	d107      	bne.n	8015832 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015822:	f107 030d 	add.w	r3, r7, #13
 8015826:	2201      	movs	r2, #1
 8015828:	4619      	mov	r1, r3
 801582a:	6878      	ldr	r0, [r7, #4]
 801582c:	f001 fd52 	bl	80172d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015830:	e01d      	b.n	801586e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015832:	6839      	ldr	r1, [r7, #0]
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f001 fcd0 	bl	80171da <USBD_CtlError>
            ret = USBD_FAIL;
 801583a:	2303      	movs	r3, #3
 801583c:	75fb      	strb	r3, [r7, #23]
          break;
 801583e:	e016      	b.n	801586e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015846:	b2db      	uxtb	r3, r3
 8015848:	2b03      	cmp	r3, #3
 801584a:	d00f      	beq.n	801586c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801584c:	6839      	ldr	r1, [r7, #0]
 801584e:	6878      	ldr	r0, [r7, #4]
 8015850:	f001 fcc3 	bl	80171da <USBD_CtlError>
            ret = USBD_FAIL;
 8015854:	2303      	movs	r3, #3
 8015856:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015858:	e008      	b.n	801586c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801585a:	6839      	ldr	r1, [r7, #0]
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f001 fcbc 	bl	80171da <USBD_CtlError>
          ret = USBD_FAIL;
 8015862:	2303      	movs	r3, #3
 8015864:	75fb      	strb	r3, [r7, #23]
          break;
 8015866:	e002      	b.n	801586e <USBD_CDC_Setup+0x19e>
          break;
 8015868:	bf00      	nop
 801586a:	e008      	b.n	801587e <USBD_CDC_Setup+0x1ae>
          break;
 801586c:	bf00      	nop
      }
      break;
 801586e:	e006      	b.n	801587e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015870:	6839      	ldr	r1, [r7, #0]
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	f001 fcb1 	bl	80171da <USBD_CtlError>
      ret = USBD_FAIL;
 8015878:	2303      	movs	r3, #3
 801587a:	75fb      	strb	r3, [r7, #23]
      break;
 801587c:	bf00      	nop
  }

  return (uint8_t)ret;
 801587e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015880:	4618      	mov	r0, r3
 8015882:	3718      	adds	r7, #24
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}

08015888 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b084      	sub	sp, #16
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
 8015890:	460b      	mov	r3, r1
 8015892:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801589a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	32b0      	adds	r2, #176	@ 0xb0
 80158a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d101      	bne.n	80158b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80158ae:	2303      	movs	r3, #3
 80158b0:	e065      	b.n	801597e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	32b0      	adds	r2, #176	@ 0xb0
 80158bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80158c2:	78fb      	ldrb	r3, [r7, #3]
 80158c4:	f003 020f 	and.w	r2, r3, #15
 80158c8:	6879      	ldr	r1, [r7, #4]
 80158ca:	4613      	mov	r3, r2
 80158cc:	009b      	lsls	r3, r3, #2
 80158ce:	4413      	add	r3, r2
 80158d0:	009b      	lsls	r3, r3, #2
 80158d2:	440b      	add	r3, r1
 80158d4:	3318      	adds	r3, #24
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d02f      	beq.n	801593c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80158dc:	78fb      	ldrb	r3, [r7, #3]
 80158de:	f003 020f 	and.w	r2, r3, #15
 80158e2:	6879      	ldr	r1, [r7, #4]
 80158e4:	4613      	mov	r3, r2
 80158e6:	009b      	lsls	r3, r3, #2
 80158e8:	4413      	add	r3, r2
 80158ea:	009b      	lsls	r3, r3, #2
 80158ec:	440b      	add	r3, r1
 80158ee:	3318      	adds	r3, #24
 80158f0:	681a      	ldr	r2, [r3, #0]
 80158f2:	78fb      	ldrb	r3, [r7, #3]
 80158f4:	f003 010f 	and.w	r1, r3, #15
 80158f8:	68f8      	ldr	r0, [r7, #12]
 80158fa:	460b      	mov	r3, r1
 80158fc:	00db      	lsls	r3, r3, #3
 80158fe:	440b      	add	r3, r1
 8015900:	009b      	lsls	r3, r3, #2
 8015902:	4403      	add	r3, r0
 8015904:	331c      	adds	r3, #28
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	fbb2 f1f3 	udiv	r1, r2, r3
 801590c:	fb01 f303 	mul.w	r3, r1, r3
 8015910:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015912:	2b00      	cmp	r3, #0
 8015914:	d112      	bne.n	801593c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015916:	78fb      	ldrb	r3, [r7, #3]
 8015918:	f003 020f 	and.w	r2, r3, #15
 801591c:	6879      	ldr	r1, [r7, #4]
 801591e:	4613      	mov	r3, r2
 8015920:	009b      	lsls	r3, r3, #2
 8015922:	4413      	add	r3, r2
 8015924:	009b      	lsls	r3, r3, #2
 8015926:	440b      	add	r3, r1
 8015928:	3318      	adds	r3, #24
 801592a:	2200      	movs	r2, #0
 801592c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801592e:	78f9      	ldrb	r1, [r7, #3]
 8015930:	2300      	movs	r3, #0
 8015932:	2200      	movs	r2, #0
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f002 fa0e 	bl	8017d56 <USBD_LL_Transmit>
 801593a:	e01f      	b.n	801597c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801593c:	68bb      	ldr	r3, [r7, #8]
 801593e:	2200      	movs	r2, #0
 8015940:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801594a:	687a      	ldr	r2, [r7, #4]
 801594c:	33b0      	adds	r3, #176	@ 0xb0
 801594e:	009b      	lsls	r3, r3, #2
 8015950:	4413      	add	r3, r2
 8015952:	685b      	ldr	r3, [r3, #4]
 8015954:	691b      	ldr	r3, [r3, #16]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d010      	beq.n	801597c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015960:	687a      	ldr	r2, [r7, #4]
 8015962:	33b0      	adds	r3, #176	@ 0xb0
 8015964:	009b      	lsls	r3, r3, #2
 8015966:	4413      	add	r3, r2
 8015968:	685b      	ldr	r3, [r3, #4]
 801596a:	691b      	ldr	r3, [r3, #16]
 801596c:	68ba      	ldr	r2, [r7, #8]
 801596e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015972:	68ba      	ldr	r2, [r7, #8]
 8015974:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015978:	78fa      	ldrb	r2, [r7, #3]
 801597a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801597c:	2300      	movs	r3, #0
}
 801597e:	4618      	mov	r0, r3
 8015980:	3710      	adds	r7, #16
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}

08015986 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015986:	b580      	push	{r7, lr}
 8015988:	b084      	sub	sp, #16
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
 801598e:	460b      	mov	r3, r1
 8015990:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	32b0      	adds	r2, #176	@ 0xb0
 801599c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	32b0      	adds	r2, #176	@ 0xb0
 80159ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d101      	bne.n	80159b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80159b4:	2303      	movs	r3, #3
 80159b6:	e01a      	b.n	80159ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80159b8:	78fb      	ldrb	r3, [r7, #3]
 80159ba:	4619      	mov	r1, r3
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f002 fa0c 	bl	8017dda <USBD_LL_GetRxDataSize>
 80159c2:	4602      	mov	r2, r0
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	33b0      	adds	r3, #176	@ 0xb0
 80159d4:	009b      	lsls	r3, r3, #2
 80159d6:	4413      	add	r3, r2
 80159d8:	685b      	ldr	r3, [r3, #4]
 80159da:	68db      	ldr	r3, [r3, #12]
 80159dc:	68fa      	ldr	r2, [r7, #12]
 80159de:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80159e2:	68fa      	ldr	r2, [r7, #12]
 80159e4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80159e8:	4611      	mov	r1, r2
 80159ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80159ec:	2300      	movs	r3, #0
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	3710      	adds	r7, #16
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}

080159f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80159f6:	b580      	push	{r7, lr}
 80159f8:	b084      	sub	sp, #16
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	32b0      	adds	r2, #176	@ 0xb0
 8015a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d101      	bne.n	8015a18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015a14:	2303      	movs	r3, #3
 8015a16:	e024      	b.n	8015a62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a1e:	687a      	ldr	r2, [r7, #4]
 8015a20:	33b0      	adds	r3, #176	@ 0xb0
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	4413      	add	r3, r2
 8015a26:	685b      	ldr	r3, [r3, #4]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d019      	beq.n	8015a60 <USBD_CDC_EP0_RxReady+0x6a>
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015a32:	2bff      	cmp	r3, #255	@ 0xff
 8015a34:	d014      	beq.n	8015a60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a3c:	687a      	ldr	r2, [r7, #4]
 8015a3e:	33b0      	adds	r3, #176	@ 0xb0
 8015a40:	009b      	lsls	r3, r3, #2
 8015a42:	4413      	add	r3, r2
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	689b      	ldr	r3, [r3, #8]
 8015a48:	68fa      	ldr	r2, [r7, #12]
 8015a4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8015a4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015a50:	68fa      	ldr	r2, [r7, #12]
 8015a52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015a56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	22ff      	movs	r2, #255	@ 0xff
 8015a5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8015a60:	2300      	movs	r3, #0
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	3710      	adds	r7, #16
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}
	...

08015a6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b086      	sub	sp, #24
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015a74:	2182      	movs	r1, #130	@ 0x82
 8015a76:	4818      	ldr	r0, [pc, #96]	@ (8015ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015a78:	f000 fd4f 	bl	801651a <USBD_GetEpDesc>
 8015a7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015a7e:	2101      	movs	r1, #1
 8015a80:	4815      	ldr	r0, [pc, #84]	@ (8015ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015a82:	f000 fd4a 	bl	801651a <USBD_GetEpDesc>
 8015a86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015a88:	2181      	movs	r1, #129	@ 0x81
 8015a8a:	4813      	ldr	r0, [pc, #76]	@ (8015ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015a8c:	f000 fd45 	bl	801651a <USBD_GetEpDesc>
 8015a90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015a92:	697b      	ldr	r3, [r7, #20]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d002      	beq.n	8015a9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	2210      	movs	r2, #16
 8015a9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d006      	beq.n	8015ab2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015aac:	711a      	strb	r2, [r3, #4]
 8015aae:	2200      	movs	r2, #0
 8015ab0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d006      	beq.n	8015ac6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	2200      	movs	r2, #0
 8015abc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ac0:	711a      	strb	r2, [r3, #4]
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	2243      	movs	r2, #67	@ 0x43
 8015aca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015acc:	4b02      	ldr	r3, [pc, #8]	@ (8015ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3718      	adds	r7, #24
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
 8015ad6:	bf00      	nop
 8015ad8:	24000058 	.word	0x24000058

08015adc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b086      	sub	sp, #24
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015ae4:	2182      	movs	r1, #130	@ 0x82
 8015ae6:	4818      	ldr	r0, [pc, #96]	@ (8015b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015ae8:	f000 fd17 	bl	801651a <USBD_GetEpDesc>
 8015aec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015aee:	2101      	movs	r1, #1
 8015af0:	4815      	ldr	r0, [pc, #84]	@ (8015b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015af2:	f000 fd12 	bl	801651a <USBD_GetEpDesc>
 8015af6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015af8:	2181      	movs	r1, #129	@ 0x81
 8015afa:	4813      	ldr	r0, [pc, #76]	@ (8015b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015afc:	f000 fd0d 	bl	801651a <USBD_GetEpDesc>
 8015b00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015b02:	697b      	ldr	r3, [r7, #20]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d002      	beq.n	8015b0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015b08:	697b      	ldr	r3, [r7, #20]
 8015b0a:	2210      	movs	r2, #16
 8015b0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015b0e:	693b      	ldr	r3, [r7, #16]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d006      	beq.n	8015b22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015b14:	693b      	ldr	r3, [r7, #16]
 8015b16:	2200      	movs	r2, #0
 8015b18:	711a      	strb	r2, [r3, #4]
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	f042 0202 	orr.w	r2, r2, #2
 8015b20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d006      	beq.n	8015b36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	711a      	strb	r2, [r3, #4]
 8015b2e:	2200      	movs	r2, #0
 8015b30:	f042 0202 	orr.w	r2, r2, #2
 8015b34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	2243      	movs	r2, #67	@ 0x43
 8015b3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015b3c:	4b02      	ldr	r3, [pc, #8]	@ (8015b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3718      	adds	r7, #24
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	bf00      	nop
 8015b48:	24000058 	.word	0x24000058

08015b4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b086      	sub	sp, #24
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015b54:	2182      	movs	r1, #130	@ 0x82
 8015b56:	4818      	ldr	r0, [pc, #96]	@ (8015bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b58:	f000 fcdf 	bl	801651a <USBD_GetEpDesc>
 8015b5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015b5e:	2101      	movs	r1, #1
 8015b60:	4815      	ldr	r0, [pc, #84]	@ (8015bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b62:	f000 fcda 	bl	801651a <USBD_GetEpDesc>
 8015b66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015b68:	2181      	movs	r1, #129	@ 0x81
 8015b6a:	4813      	ldr	r0, [pc, #76]	@ (8015bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b6c:	f000 fcd5 	bl	801651a <USBD_GetEpDesc>
 8015b70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015b72:	697b      	ldr	r3, [r7, #20]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d002      	beq.n	8015b7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015b78:	697b      	ldr	r3, [r7, #20]
 8015b7a:	2210      	movs	r2, #16
 8015b7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d006      	beq.n	8015b92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	2200      	movs	r2, #0
 8015b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015b8c:	711a      	strb	r2, [r3, #4]
 8015b8e:	2200      	movs	r2, #0
 8015b90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d006      	beq.n	8015ba6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ba0:	711a      	strb	r2, [r3, #4]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2243      	movs	r2, #67	@ 0x43
 8015baa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015bac:	4b02      	ldr	r3, [pc, #8]	@ (8015bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3718      	adds	r7, #24
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	24000058 	.word	0x24000058

08015bbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015bbc:	b480      	push	{r7}
 8015bbe:	b083      	sub	sp, #12
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	220a      	movs	r2, #10
 8015bc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015bca:	4b03      	ldr	r3, [pc, #12]	@ (8015bd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	370c      	adds	r7, #12
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd6:	4770      	bx	lr
 8015bd8:	24000014 	.word	0x24000014

08015bdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015bdc:	b480      	push	{r7}
 8015bde:	b083      	sub	sp, #12
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
 8015be4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015be6:	683b      	ldr	r3, [r7, #0]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d101      	bne.n	8015bf0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015bec:	2303      	movs	r3, #3
 8015bee:	e009      	b.n	8015c04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015bf6:	687a      	ldr	r2, [r7, #4]
 8015bf8:	33b0      	adds	r3, #176	@ 0xb0
 8015bfa:	009b      	lsls	r3, r3, #2
 8015bfc:	4413      	add	r3, r2
 8015bfe:	683a      	ldr	r2, [r7, #0]
 8015c00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015c02:	2300      	movs	r3, #0
}
 8015c04:	4618      	mov	r0, r3
 8015c06:	370c      	adds	r7, #12
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0e:	4770      	bx	lr

08015c10 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015c10:	b480      	push	{r7}
 8015c12:	b087      	sub	sp, #28
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	60f8      	str	r0, [r7, #12]
 8015c18:	60b9      	str	r1, [r7, #8]
 8015c1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	32b0      	adds	r2, #176	@ 0xb0
 8015c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c2a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015c2c:	697b      	ldr	r3, [r7, #20]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d101      	bne.n	8015c36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015c32:	2303      	movs	r3, #3
 8015c34:	e008      	b.n	8015c48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015c36:	697b      	ldr	r3, [r7, #20]
 8015c38:	68ba      	ldr	r2, [r7, #8]
 8015c3a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	687a      	ldr	r2, [r7, #4]
 8015c42:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8015c46:	2300      	movs	r3, #0
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	371c      	adds	r7, #28
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr

08015c54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b085      	sub	sp, #20
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	32b0      	adds	r2, #176	@ 0xb0
 8015c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d101      	bne.n	8015c78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015c74:	2303      	movs	r3, #3
 8015c76:	e004      	b.n	8015c82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	683a      	ldr	r2, [r7, #0]
 8015c7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8015c80:	2300      	movs	r3, #0
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3714      	adds	r7, #20
 8015c86:	46bd      	mov	sp, r7
 8015c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8c:	4770      	bx	lr
	...

08015c90 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b084      	sub	sp, #16
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	32b0      	adds	r2, #176	@ 0xb0
 8015ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ca6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015ca8:	2301      	movs	r3, #1
 8015caa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015cac:	68bb      	ldr	r3, [r7, #8]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d101      	bne.n	8015cb6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015cb2:	2303      	movs	r3, #3
 8015cb4:	e025      	b.n	8015d02 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d11f      	bne.n	8015d00 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015cc0:	68bb      	ldr	r3, [r7, #8]
 8015cc2:	2201      	movs	r2, #1
 8015cc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015cc8:	4b10      	ldr	r3, [pc, #64]	@ (8015d0c <USBD_CDC_TransmitPacket+0x7c>)
 8015cca:	781b      	ldrb	r3, [r3, #0]
 8015ccc:	f003 020f 	and.w	r2, r3, #15
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	4613      	mov	r3, r2
 8015cda:	009b      	lsls	r3, r3, #2
 8015cdc:	4413      	add	r3, r2
 8015cde:	009b      	lsls	r3, r3, #2
 8015ce0:	4403      	add	r3, r0
 8015ce2:	3318      	adds	r3, #24
 8015ce4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015ce6:	4b09      	ldr	r3, [pc, #36]	@ (8015d0c <USBD_CDC_TransmitPacket+0x7c>)
 8015ce8:	7819      	ldrb	r1, [r3, #0]
 8015cea:	68bb      	ldr	r3, [r7, #8]
 8015cec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8015cf6:	6878      	ldr	r0, [r7, #4]
 8015cf8:	f002 f82d 	bl	8017d56 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d02:	4618      	mov	r0, r3
 8015d04:	3710      	adds	r7, #16
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}
 8015d0a:	bf00      	nop
 8015d0c:	2400009b 	.word	0x2400009b

08015d10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	32b0      	adds	r2, #176	@ 0xb0
 8015d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	32b0      	adds	r2, #176	@ 0xb0
 8015d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d101      	bne.n	8015d3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015d3a:	2303      	movs	r3, #3
 8015d3c:	e018      	b.n	8015d70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	7c1b      	ldrb	r3, [r3, #16]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d10a      	bne.n	8015d5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d46:	4b0c      	ldr	r3, [pc, #48]	@ (8015d78 <USBD_CDC_ReceivePacket+0x68>)
 8015d48:	7819      	ldrb	r1, [r3, #0]
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015d50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f002 f81f 	bl	8017d98 <USBD_LL_PrepareReceive>
 8015d5a:	e008      	b.n	8015d6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d5c:	4b06      	ldr	r3, [pc, #24]	@ (8015d78 <USBD_CDC_ReceivePacket+0x68>)
 8015d5e:	7819      	ldrb	r1, [r3, #0]
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015d66:	2340      	movs	r3, #64	@ 0x40
 8015d68:	6878      	ldr	r0, [r7, #4]
 8015d6a:	f002 f815 	bl	8017d98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015d6e:	2300      	movs	r3, #0
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3710      	adds	r7, #16
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	2400009c 	.word	0x2400009c

08015d7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b086      	sub	sp, #24
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	60f8      	str	r0, [r7, #12]
 8015d84:	60b9      	str	r1, [r7, #8]
 8015d86:	4613      	mov	r3, r2
 8015d88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d101      	bne.n	8015d94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015d90:	2303      	movs	r3, #3
 8015d92:	e01f      	b.n	8015dd4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	2200      	movs	r2, #0
 8015d98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	2200      	movs	r2, #0
 8015da0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	2200      	movs	r2, #0
 8015da8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d003      	beq.n	8015dba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	68ba      	ldr	r2, [r7, #8]
 8015db6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2201      	movs	r2, #1
 8015dbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	79fa      	ldrb	r2, [r7, #7]
 8015dc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015dc8:	68f8      	ldr	r0, [r7, #12]
 8015dca:	f001 fe8b 	bl	8017ae4 <USBD_LL_Init>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	3718      	adds	r7, #24
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd80      	pop	{r7, pc}

08015ddc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b084      	sub	sp, #16
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
 8015de4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015de6:	2300      	movs	r3, #0
 8015de8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d101      	bne.n	8015df4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015df0:	2303      	movs	r3, #3
 8015df2:	e025      	b.n	8015e40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	683a      	ldr	r2, [r7, #0]
 8015df8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	32ae      	adds	r2, #174	@ 0xae
 8015e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d00f      	beq.n	8015e30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	32ae      	adds	r2, #174	@ 0xae
 8015e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e20:	f107 020e 	add.w	r2, r7, #14
 8015e24:	4610      	mov	r0, r2
 8015e26:	4798      	blx	r3
 8015e28:	4602      	mov	r2, r0
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015e36:	1c5a      	adds	r2, r3, #1
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8015e3e:	2300      	movs	r3, #0
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3710      	adds	r7, #16
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}

08015e48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f001 fe97 	bl	8017b84 <USBD_LL_Start>
 8015e56:	4603      	mov	r3, r0
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	3708      	adds	r7, #8
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd80      	pop	{r7, pc}

08015e60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015e60:	b480      	push	{r7}
 8015e62:	b083      	sub	sp, #12
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015e68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	370c      	adds	r7, #12
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e74:	4770      	bx	lr

08015e76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015e76:	b580      	push	{r7, lr}
 8015e78:	b084      	sub	sp, #16
 8015e7a:	af00      	add	r7, sp, #0
 8015e7c:	6078      	str	r0, [r7, #4]
 8015e7e:	460b      	mov	r3, r1
 8015e80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e82:	2300      	movs	r3, #0
 8015e84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d009      	beq.n	8015ea4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	78fa      	ldrb	r2, [r7, #3]
 8015e9a:	4611      	mov	r1, r2
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	4798      	blx	r3
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	3710      	adds	r7, #16
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd80      	pop	{r7, pc}

08015eae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015eae:	b580      	push	{r7, lr}
 8015eb0:	b084      	sub	sp, #16
 8015eb2:	af00      	add	r7, sp, #0
 8015eb4:	6078      	str	r0, [r7, #4]
 8015eb6:	460b      	mov	r3, r1
 8015eb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015eba:	2300      	movs	r3, #0
 8015ebc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015ec4:	685b      	ldr	r3, [r3, #4]
 8015ec6:	78fa      	ldrb	r2, [r7, #3]
 8015ec8:	4611      	mov	r1, r2
 8015eca:	6878      	ldr	r0, [r7, #4]
 8015ecc:	4798      	blx	r3
 8015ece:	4603      	mov	r3, r0
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d001      	beq.n	8015ed8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015ed4:	2303      	movs	r3, #3
 8015ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3710      	adds	r7, #16
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}

08015ee2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015ee2:	b580      	push	{r7, lr}
 8015ee4:	b084      	sub	sp, #16
 8015ee6:	af00      	add	r7, sp, #0
 8015ee8:	6078      	str	r0, [r7, #4]
 8015eea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015ef2:	6839      	ldr	r1, [r7, #0]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f001 f936 	bl	8017166 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2201      	movs	r2, #1
 8015efe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8015f08:	461a      	mov	r2, r3
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8015f16:	f003 031f 	and.w	r3, r3, #31
 8015f1a:	2b02      	cmp	r3, #2
 8015f1c:	d01a      	beq.n	8015f54 <USBD_LL_SetupStage+0x72>
 8015f1e:	2b02      	cmp	r3, #2
 8015f20:	d822      	bhi.n	8015f68 <USBD_LL_SetupStage+0x86>
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d002      	beq.n	8015f2c <USBD_LL_SetupStage+0x4a>
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d00a      	beq.n	8015f40 <USBD_LL_SetupStage+0x5e>
 8015f2a:	e01d      	b.n	8015f68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015f32:	4619      	mov	r1, r3
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f000 fb63 	bl	8016600 <USBD_StdDevReq>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8015f3e:	e020      	b.n	8015f82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015f46:	4619      	mov	r1, r3
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f000 fbcb 	bl	80166e4 <USBD_StdItfReq>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	73fb      	strb	r3, [r7, #15]
      break;
 8015f52:	e016      	b.n	8015f82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015f5a:	4619      	mov	r1, r3
 8015f5c:	6878      	ldr	r0, [r7, #4]
 8015f5e:	f000 fc2d 	bl	80167bc <USBD_StdEPReq>
 8015f62:	4603      	mov	r3, r0
 8015f64:	73fb      	strb	r3, [r7, #15]
      break;
 8015f66:	e00c      	b.n	8015f82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8015f6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8015f72:	b2db      	uxtb	r3, r3
 8015f74:	4619      	mov	r1, r3
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f001 fe64 	bl	8017c44 <USBD_LL_StallEP>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8015f80:	bf00      	nop
  }

  return ret;
 8015f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	3710      	adds	r7, #16
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}

08015f8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b086      	sub	sp, #24
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	460b      	mov	r3, r1
 8015f96:	607a      	str	r2, [r7, #4]
 8015f98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015f9e:	7afb      	ldrb	r3, [r7, #11]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d16e      	bne.n	8016082 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8015faa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8015fb2:	2b03      	cmp	r3, #3
 8015fb4:	f040 8098 	bne.w	80160e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015fb8:	693b      	ldr	r3, [r7, #16]
 8015fba:	689a      	ldr	r2, [r3, #8]
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	d913      	bls.n	8015fec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	689a      	ldr	r2, [r3, #8]
 8015fc8:	693b      	ldr	r3, [r7, #16]
 8015fca:	68db      	ldr	r3, [r3, #12]
 8015fcc:	1ad2      	subs	r2, r2, r3
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015fd2:	693b      	ldr	r3, [r7, #16]
 8015fd4:	68da      	ldr	r2, [r3, #12]
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	689b      	ldr	r3, [r3, #8]
 8015fda:	4293      	cmp	r3, r2
 8015fdc:	bf28      	it	cs
 8015fde:	4613      	movcs	r3, r2
 8015fe0:	461a      	mov	r2, r3
 8015fe2:	6879      	ldr	r1, [r7, #4]
 8015fe4:	68f8      	ldr	r0, [r7, #12]
 8015fe6:	f001 f9be 	bl	8017366 <USBD_CtlContinueRx>
 8015fea:	e07d      	b.n	80160e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8015ff2:	f003 031f 	and.w	r3, r3, #31
 8015ff6:	2b02      	cmp	r3, #2
 8015ff8:	d014      	beq.n	8016024 <USBD_LL_DataOutStage+0x98>
 8015ffa:	2b02      	cmp	r3, #2
 8015ffc:	d81d      	bhi.n	801603a <USBD_LL_DataOutStage+0xae>
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d002      	beq.n	8016008 <USBD_LL_DataOutStage+0x7c>
 8016002:	2b01      	cmp	r3, #1
 8016004:	d003      	beq.n	801600e <USBD_LL_DataOutStage+0x82>
 8016006:	e018      	b.n	801603a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016008:	2300      	movs	r3, #0
 801600a:	75bb      	strb	r3, [r7, #22]
            break;
 801600c:	e018      	b.n	8016040 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016014:	b2db      	uxtb	r3, r3
 8016016:	4619      	mov	r1, r3
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	f000 fa64 	bl	80164e6 <USBD_CoreFindIF>
 801601e:	4603      	mov	r3, r0
 8016020:	75bb      	strb	r3, [r7, #22]
            break;
 8016022:	e00d      	b.n	8016040 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801602a:	b2db      	uxtb	r3, r3
 801602c:	4619      	mov	r1, r3
 801602e:	68f8      	ldr	r0, [r7, #12]
 8016030:	f000 fa66 	bl	8016500 <USBD_CoreFindEP>
 8016034:	4603      	mov	r3, r0
 8016036:	75bb      	strb	r3, [r7, #22]
            break;
 8016038:	e002      	b.n	8016040 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801603a:	2300      	movs	r3, #0
 801603c:	75bb      	strb	r3, [r7, #22]
            break;
 801603e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016040:	7dbb      	ldrb	r3, [r7, #22]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d119      	bne.n	801607a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801604c:	b2db      	uxtb	r3, r3
 801604e:	2b03      	cmp	r3, #3
 8016050:	d113      	bne.n	801607a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016052:	7dba      	ldrb	r2, [r7, #22]
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	32ae      	adds	r2, #174	@ 0xae
 8016058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801605c:	691b      	ldr	r3, [r3, #16]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d00b      	beq.n	801607a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016062:	7dba      	ldrb	r2, [r7, #22]
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801606a:	7dba      	ldrb	r2, [r7, #22]
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	32ae      	adds	r2, #174	@ 0xae
 8016070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016074:	691b      	ldr	r3, [r3, #16]
 8016076:	68f8      	ldr	r0, [r7, #12]
 8016078:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801607a:	68f8      	ldr	r0, [r7, #12]
 801607c:	f001 f984 	bl	8017388 <USBD_CtlSendStatus>
 8016080:	e032      	b.n	80160e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016082:	7afb      	ldrb	r3, [r7, #11]
 8016084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016088:	b2db      	uxtb	r3, r3
 801608a:	4619      	mov	r1, r3
 801608c:	68f8      	ldr	r0, [r7, #12]
 801608e:	f000 fa37 	bl	8016500 <USBD_CoreFindEP>
 8016092:	4603      	mov	r3, r0
 8016094:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016096:	7dbb      	ldrb	r3, [r7, #22]
 8016098:	2bff      	cmp	r3, #255	@ 0xff
 801609a:	d025      	beq.n	80160e8 <USBD_LL_DataOutStage+0x15c>
 801609c:	7dbb      	ldrb	r3, [r7, #22]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d122      	bne.n	80160e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	2b03      	cmp	r3, #3
 80160ac:	d117      	bne.n	80160de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80160ae:	7dba      	ldrb	r2, [r7, #22]
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	32ae      	adds	r2, #174	@ 0xae
 80160b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160b8:	699b      	ldr	r3, [r3, #24]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d00f      	beq.n	80160de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80160be:	7dba      	ldrb	r2, [r7, #22]
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80160c6:	7dba      	ldrb	r2, [r7, #22]
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	32ae      	adds	r2, #174	@ 0xae
 80160cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160d0:	699b      	ldr	r3, [r3, #24]
 80160d2:	7afa      	ldrb	r2, [r7, #11]
 80160d4:	4611      	mov	r1, r2
 80160d6:	68f8      	ldr	r0, [r7, #12]
 80160d8:	4798      	blx	r3
 80160da:	4603      	mov	r3, r0
 80160dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80160de:	7dfb      	ldrb	r3, [r7, #23]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d001      	beq.n	80160e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80160e4:	7dfb      	ldrb	r3, [r7, #23]
 80160e6:	e000      	b.n	80160ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80160e8:	2300      	movs	r3, #0
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	3718      	adds	r7, #24
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}

080160f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80160f2:	b580      	push	{r7, lr}
 80160f4:	b086      	sub	sp, #24
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	60f8      	str	r0, [r7, #12]
 80160fa:	460b      	mov	r3, r1
 80160fc:	607a      	str	r2, [r7, #4]
 80160fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016100:	7afb      	ldrb	r3, [r7, #11]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d16f      	bne.n	80161e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	3314      	adds	r3, #20
 801610a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016112:	2b02      	cmp	r3, #2
 8016114:	d15a      	bne.n	80161cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	689a      	ldr	r2, [r3, #8]
 801611a:	693b      	ldr	r3, [r7, #16]
 801611c:	68db      	ldr	r3, [r3, #12]
 801611e:	429a      	cmp	r2, r3
 8016120:	d914      	bls.n	801614c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016122:	693b      	ldr	r3, [r7, #16]
 8016124:	689a      	ldr	r2, [r3, #8]
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	68db      	ldr	r3, [r3, #12]
 801612a:	1ad2      	subs	r2, r2, r3
 801612c:	693b      	ldr	r3, [r7, #16]
 801612e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016130:	693b      	ldr	r3, [r7, #16]
 8016132:	689b      	ldr	r3, [r3, #8]
 8016134:	461a      	mov	r2, r3
 8016136:	6879      	ldr	r1, [r7, #4]
 8016138:	68f8      	ldr	r0, [r7, #12]
 801613a:	f001 f8e6 	bl	801730a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801613e:	2300      	movs	r3, #0
 8016140:	2200      	movs	r2, #0
 8016142:	2100      	movs	r1, #0
 8016144:	68f8      	ldr	r0, [r7, #12]
 8016146:	f001 fe27 	bl	8017d98 <USBD_LL_PrepareReceive>
 801614a:	e03f      	b.n	80161cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801614c:	693b      	ldr	r3, [r7, #16]
 801614e:	68da      	ldr	r2, [r3, #12]
 8016150:	693b      	ldr	r3, [r7, #16]
 8016152:	689b      	ldr	r3, [r3, #8]
 8016154:	429a      	cmp	r2, r3
 8016156:	d11c      	bne.n	8016192 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	685a      	ldr	r2, [r3, #4]
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016160:	429a      	cmp	r2, r3
 8016162:	d316      	bcc.n	8016192 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016164:	693b      	ldr	r3, [r7, #16]
 8016166:	685a      	ldr	r2, [r3, #4]
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801616e:	429a      	cmp	r2, r3
 8016170:	d20f      	bcs.n	8016192 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016172:	2200      	movs	r2, #0
 8016174:	2100      	movs	r1, #0
 8016176:	68f8      	ldr	r0, [r7, #12]
 8016178:	f001 f8c7 	bl	801730a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2200      	movs	r2, #0
 8016180:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016184:	2300      	movs	r3, #0
 8016186:	2200      	movs	r2, #0
 8016188:	2100      	movs	r1, #0
 801618a:	68f8      	ldr	r0, [r7, #12]
 801618c:	f001 fe04 	bl	8017d98 <USBD_LL_PrepareReceive>
 8016190:	e01c      	b.n	80161cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016198:	b2db      	uxtb	r3, r3
 801619a:	2b03      	cmp	r3, #3
 801619c:	d10f      	bne.n	80161be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80161a4:	68db      	ldr	r3, [r3, #12]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d009      	beq.n	80161be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	2200      	movs	r2, #0
 80161ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80161b8:	68db      	ldr	r3, [r3, #12]
 80161ba:	68f8      	ldr	r0, [r7, #12]
 80161bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80161be:	2180      	movs	r1, #128	@ 0x80
 80161c0:	68f8      	ldr	r0, [r7, #12]
 80161c2:	f001 fd3f 	bl	8017c44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80161c6:	68f8      	ldr	r0, [r7, #12]
 80161c8:	f001 f8f1 	bl	80173ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d03a      	beq.n	801624c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80161d6:	68f8      	ldr	r0, [r7, #12]
 80161d8:	f7ff fe42 	bl	8015e60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	2200      	movs	r2, #0
 80161e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80161e4:	e032      	b.n	801624c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80161e6:	7afb      	ldrb	r3, [r7, #11]
 80161e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80161ec:	b2db      	uxtb	r3, r3
 80161ee:	4619      	mov	r1, r3
 80161f0:	68f8      	ldr	r0, [r7, #12]
 80161f2:	f000 f985 	bl	8016500 <USBD_CoreFindEP>
 80161f6:	4603      	mov	r3, r0
 80161f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80161fa:	7dfb      	ldrb	r3, [r7, #23]
 80161fc:	2bff      	cmp	r3, #255	@ 0xff
 80161fe:	d025      	beq.n	801624c <USBD_LL_DataInStage+0x15a>
 8016200:	7dfb      	ldrb	r3, [r7, #23]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d122      	bne.n	801624c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801620c:	b2db      	uxtb	r3, r3
 801620e:	2b03      	cmp	r3, #3
 8016210:	d11c      	bne.n	801624c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016212:	7dfa      	ldrb	r2, [r7, #23]
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	32ae      	adds	r2, #174	@ 0xae
 8016218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801621c:	695b      	ldr	r3, [r3, #20]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d014      	beq.n	801624c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016222:	7dfa      	ldrb	r2, [r7, #23]
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801622a:	7dfa      	ldrb	r2, [r7, #23]
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	32ae      	adds	r2, #174	@ 0xae
 8016230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016234:	695b      	ldr	r3, [r3, #20]
 8016236:	7afa      	ldrb	r2, [r7, #11]
 8016238:	4611      	mov	r1, r2
 801623a:	68f8      	ldr	r0, [r7, #12]
 801623c:	4798      	blx	r3
 801623e:	4603      	mov	r3, r0
 8016240:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016242:	7dbb      	ldrb	r3, [r7, #22]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d001      	beq.n	801624c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016248:	7dbb      	ldrb	r3, [r7, #22]
 801624a:	e000      	b.n	801624e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801624c:	2300      	movs	r3, #0
}
 801624e:	4618      	mov	r0, r3
 8016250:	3718      	adds	r7, #24
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}

08016256 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016256:	b580      	push	{r7, lr}
 8016258:	b084      	sub	sp, #16
 801625a:	af00      	add	r7, sp, #0
 801625c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801625e:	2300      	movs	r3, #0
 8016260:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	2201      	movs	r2, #1
 8016266:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	2200      	movs	r2, #0
 801626e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	2200      	movs	r2, #0
 8016276:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2200      	movs	r2, #0
 801627c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2200      	movs	r2, #0
 8016284:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801628e:	2b00      	cmp	r3, #0
 8016290:	d014      	beq.n	80162bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016298:	685b      	ldr	r3, [r3, #4]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d00e      	beq.n	80162bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80162a4:	685b      	ldr	r3, [r3, #4]
 80162a6:	687a      	ldr	r2, [r7, #4]
 80162a8:	6852      	ldr	r2, [r2, #4]
 80162aa:	b2d2      	uxtb	r2, r2
 80162ac:	4611      	mov	r1, r2
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	4798      	blx	r3
 80162b2:	4603      	mov	r3, r0
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d001      	beq.n	80162bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80162b8:	2303      	movs	r3, #3
 80162ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80162bc:	2340      	movs	r3, #64	@ 0x40
 80162be:	2200      	movs	r2, #0
 80162c0:	2100      	movs	r1, #0
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f001 fc79 	bl	8017bba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2201      	movs	r2, #1
 80162cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2240      	movs	r2, #64	@ 0x40
 80162d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80162d8:	2340      	movs	r3, #64	@ 0x40
 80162da:	2200      	movs	r2, #0
 80162dc:	2180      	movs	r1, #128	@ 0x80
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	f001 fc6b 	bl	8017bba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2201      	movs	r2, #1
 80162e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2240      	movs	r2, #64	@ 0x40
 80162ee:	621a      	str	r2, [r3, #32]

  return ret;
 80162f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80162f2:	4618      	mov	r0, r3
 80162f4:	3710      	adds	r7, #16
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}

080162fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80162fa:	b480      	push	{r7}
 80162fc:	b083      	sub	sp, #12
 80162fe:	af00      	add	r7, sp, #0
 8016300:	6078      	str	r0, [r7, #4]
 8016302:	460b      	mov	r3, r1
 8016304:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	78fa      	ldrb	r2, [r7, #3]
 801630a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801630c:	2300      	movs	r3, #0
}
 801630e:	4618      	mov	r0, r3
 8016310:	370c      	adds	r7, #12
 8016312:	46bd      	mov	sp, r7
 8016314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016318:	4770      	bx	lr

0801631a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801631a:	b480      	push	{r7}
 801631c:	b083      	sub	sp, #12
 801631e:	af00      	add	r7, sp, #0
 8016320:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016328:	b2db      	uxtb	r3, r3
 801632a:	2b04      	cmp	r3, #4
 801632c:	d006      	beq.n	801633c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016334:	b2da      	uxtb	r2, r3
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2204      	movs	r2, #4
 8016340:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016344:	2300      	movs	r3, #0
}
 8016346:	4618      	mov	r0, r3
 8016348:	370c      	adds	r7, #12
 801634a:	46bd      	mov	sp, r7
 801634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016350:	4770      	bx	lr

08016352 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016352:	b480      	push	{r7}
 8016354:	b083      	sub	sp, #12
 8016356:	af00      	add	r7, sp, #0
 8016358:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016360:	b2db      	uxtb	r3, r3
 8016362:	2b04      	cmp	r3, #4
 8016364:	d106      	bne.n	8016374 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801636c:	b2da      	uxtb	r2, r3
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016374:	2300      	movs	r3, #0
}
 8016376:	4618      	mov	r0, r3
 8016378:	370c      	adds	r7, #12
 801637a:	46bd      	mov	sp, r7
 801637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016380:	4770      	bx	lr

08016382 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016382:	b580      	push	{r7, lr}
 8016384:	b082      	sub	sp, #8
 8016386:	af00      	add	r7, sp, #0
 8016388:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016390:	b2db      	uxtb	r3, r3
 8016392:	2b03      	cmp	r3, #3
 8016394:	d110      	bne.n	80163b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801639c:	2b00      	cmp	r3, #0
 801639e:	d00b      	beq.n	80163b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163a6:	69db      	ldr	r3, [r3, #28]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d005      	beq.n	80163b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163b2:	69db      	ldr	r3, [r3, #28]
 80163b4:	6878      	ldr	r0, [r7, #4]
 80163b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80163b8:	2300      	movs	r3, #0
}
 80163ba:	4618      	mov	r0, r3
 80163bc:	3708      	adds	r7, #8
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}

080163c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80163c2:	b580      	push	{r7, lr}
 80163c4:	b082      	sub	sp, #8
 80163c6:	af00      	add	r7, sp, #0
 80163c8:	6078      	str	r0, [r7, #4]
 80163ca:	460b      	mov	r3, r1
 80163cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	32ae      	adds	r2, #174	@ 0xae
 80163d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d101      	bne.n	80163e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80163e0:	2303      	movs	r3, #3
 80163e2:	e01c      	b.n	801641e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80163ea:	b2db      	uxtb	r3, r3
 80163ec:	2b03      	cmp	r3, #3
 80163ee:	d115      	bne.n	801641c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	32ae      	adds	r2, #174	@ 0xae
 80163fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163fe:	6a1b      	ldr	r3, [r3, #32]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d00b      	beq.n	801641c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	32ae      	adds	r2, #174	@ 0xae
 801640e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016412:	6a1b      	ldr	r3, [r3, #32]
 8016414:	78fa      	ldrb	r2, [r7, #3]
 8016416:	4611      	mov	r1, r2
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801641c:	2300      	movs	r3, #0
}
 801641e:	4618      	mov	r0, r3
 8016420:	3708      	adds	r7, #8
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}

08016426 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016426:	b580      	push	{r7, lr}
 8016428:	b082      	sub	sp, #8
 801642a:	af00      	add	r7, sp, #0
 801642c:	6078      	str	r0, [r7, #4]
 801642e:	460b      	mov	r3, r1
 8016430:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	32ae      	adds	r2, #174	@ 0xae
 801643c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d101      	bne.n	8016448 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016444:	2303      	movs	r3, #3
 8016446:	e01c      	b.n	8016482 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801644e:	b2db      	uxtb	r3, r3
 8016450:	2b03      	cmp	r3, #3
 8016452:	d115      	bne.n	8016480 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	32ae      	adds	r2, #174	@ 0xae
 801645e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016464:	2b00      	cmp	r3, #0
 8016466:	d00b      	beq.n	8016480 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	32ae      	adds	r2, #174	@ 0xae
 8016472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016478:	78fa      	ldrb	r2, [r7, #3]
 801647a:	4611      	mov	r1, r2
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016480:	2300      	movs	r3, #0
}
 8016482:	4618      	mov	r0, r3
 8016484:	3708      	adds	r7, #8
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}

0801648a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801648a:	b480      	push	{r7}
 801648c:	b083      	sub	sp, #12
 801648e:	af00      	add	r7, sp, #0
 8016490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016492:	2300      	movs	r3, #0
}
 8016494:	4618      	mov	r0, r3
 8016496:	370c      	adds	r7, #12
 8016498:	46bd      	mov	sp, r7
 801649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649e:	4770      	bx	lr

080164a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80164a8:	2300      	movs	r3, #0
 80164aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2201      	movs	r2, #1
 80164b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d00e      	beq.n	80164dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	687a      	ldr	r2, [r7, #4]
 80164c8:	6852      	ldr	r2, [r2, #4]
 80164ca:	b2d2      	uxtb	r2, r2
 80164cc:	4611      	mov	r1, r2
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	4798      	blx	r3
 80164d2:	4603      	mov	r3, r0
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d001      	beq.n	80164dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80164d8:	2303      	movs	r3, #3
 80164da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80164dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80164de:	4618      	mov	r0, r3
 80164e0:	3710      	adds	r7, #16
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd80      	pop	{r7, pc}

080164e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80164e6:	b480      	push	{r7}
 80164e8:	b083      	sub	sp, #12
 80164ea:	af00      	add	r7, sp, #0
 80164ec:	6078      	str	r0, [r7, #4]
 80164ee:	460b      	mov	r3, r1
 80164f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80164f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	370c      	adds	r7, #12
 80164f8:	46bd      	mov	sp, r7
 80164fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fe:	4770      	bx	lr

08016500 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016500:	b480      	push	{r7}
 8016502:	b083      	sub	sp, #12
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
 8016508:	460b      	mov	r3, r1
 801650a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801650c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801650e:	4618      	mov	r0, r3
 8016510:	370c      	adds	r7, #12
 8016512:	46bd      	mov	sp, r7
 8016514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016518:	4770      	bx	lr

0801651a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801651a:	b580      	push	{r7, lr}
 801651c:	b086      	sub	sp, #24
 801651e:	af00      	add	r7, sp, #0
 8016520:	6078      	str	r0, [r7, #4]
 8016522:	460b      	mov	r3, r1
 8016524:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801652e:	2300      	movs	r3, #0
 8016530:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	885b      	ldrh	r3, [r3, #2]
 8016536:	b29b      	uxth	r3, r3
 8016538:	68fa      	ldr	r2, [r7, #12]
 801653a:	7812      	ldrb	r2, [r2, #0]
 801653c:	4293      	cmp	r3, r2
 801653e:	d91f      	bls.n	8016580 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016546:	e013      	b.n	8016570 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016548:	f107 030a 	add.w	r3, r7, #10
 801654c:	4619      	mov	r1, r3
 801654e:	6978      	ldr	r0, [r7, #20]
 8016550:	f000 f81b 	bl	801658a <USBD_GetNextDesc>
 8016554:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	785b      	ldrb	r3, [r3, #1]
 801655a:	2b05      	cmp	r3, #5
 801655c:	d108      	bne.n	8016570 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	789b      	ldrb	r3, [r3, #2]
 8016566:	78fa      	ldrb	r2, [r7, #3]
 8016568:	429a      	cmp	r2, r3
 801656a:	d008      	beq.n	801657e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801656c:	2300      	movs	r3, #0
 801656e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	885b      	ldrh	r3, [r3, #2]
 8016574:	b29a      	uxth	r2, r3
 8016576:	897b      	ldrh	r3, [r7, #10]
 8016578:	429a      	cmp	r2, r3
 801657a:	d8e5      	bhi.n	8016548 <USBD_GetEpDesc+0x2e>
 801657c:	e000      	b.n	8016580 <USBD_GetEpDesc+0x66>
          break;
 801657e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016580:	693b      	ldr	r3, [r7, #16]
}
 8016582:	4618      	mov	r0, r3
 8016584:	3718      	adds	r7, #24
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}

0801658a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801658a:	b480      	push	{r7}
 801658c:	b085      	sub	sp, #20
 801658e:	af00      	add	r7, sp, #0
 8016590:	6078      	str	r0, [r7, #4]
 8016592:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	881b      	ldrh	r3, [r3, #0]
 801659c:	68fa      	ldr	r2, [r7, #12]
 801659e:	7812      	ldrb	r2, [r2, #0]
 80165a0:	4413      	add	r3, r2
 80165a2:	b29a      	uxth	r2, r3
 80165a4:	683b      	ldr	r3, [r7, #0]
 80165a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	781b      	ldrb	r3, [r3, #0]
 80165ac:	461a      	mov	r2, r3
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	4413      	add	r3, r2
 80165b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80165b4:	68fb      	ldr	r3, [r7, #12]
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3714      	adds	r7, #20
 80165ba:	46bd      	mov	sp, r7
 80165bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c0:	4770      	bx	lr

080165c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80165c2:	b480      	push	{r7}
 80165c4:	b087      	sub	sp, #28
 80165c6:	af00      	add	r7, sp, #0
 80165c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80165d4:	697b      	ldr	r3, [r7, #20]
 80165d6:	3301      	adds	r3, #1
 80165d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80165da:	697b      	ldr	r3, [r7, #20]
 80165dc:	781b      	ldrb	r3, [r3, #0]
 80165de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80165e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80165e4:	021b      	lsls	r3, r3, #8
 80165e6:	b21a      	sxth	r2, r3
 80165e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80165ec:	4313      	orrs	r3, r2
 80165ee:	b21b      	sxth	r3, r3
 80165f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80165f2:	89fb      	ldrh	r3, [r7, #14]
}
 80165f4:	4618      	mov	r0, r3
 80165f6:	371c      	adds	r7, #28
 80165f8:	46bd      	mov	sp, r7
 80165fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fe:	4770      	bx	lr

08016600 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b084      	sub	sp, #16
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
 8016608:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801660a:	2300      	movs	r3, #0
 801660c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016616:	2b40      	cmp	r3, #64	@ 0x40
 8016618:	d005      	beq.n	8016626 <USBD_StdDevReq+0x26>
 801661a:	2b40      	cmp	r3, #64	@ 0x40
 801661c:	d857      	bhi.n	80166ce <USBD_StdDevReq+0xce>
 801661e:	2b00      	cmp	r3, #0
 8016620:	d00f      	beq.n	8016642 <USBD_StdDevReq+0x42>
 8016622:	2b20      	cmp	r3, #32
 8016624:	d153      	bne.n	80166ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	32ae      	adds	r2, #174	@ 0xae
 8016630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016634:	689b      	ldr	r3, [r3, #8]
 8016636:	6839      	ldr	r1, [r7, #0]
 8016638:	6878      	ldr	r0, [r7, #4]
 801663a:	4798      	blx	r3
 801663c:	4603      	mov	r3, r0
 801663e:	73fb      	strb	r3, [r7, #15]
      break;
 8016640:	e04a      	b.n	80166d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	785b      	ldrb	r3, [r3, #1]
 8016646:	2b09      	cmp	r3, #9
 8016648:	d83b      	bhi.n	80166c2 <USBD_StdDevReq+0xc2>
 801664a:	a201      	add	r2, pc, #4	@ (adr r2, 8016650 <USBD_StdDevReq+0x50>)
 801664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016650:	080166a5 	.word	0x080166a5
 8016654:	080166b9 	.word	0x080166b9
 8016658:	080166c3 	.word	0x080166c3
 801665c:	080166af 	.word	0x080166af
 8016660:	080166c3 	.word	0x080166c3
 8016664:	08016683 	.word	0x08016683
 8016668:	08016679 	.word	0x08016679
 801666c:	080166c3 	.word	0x080166c3
 8016670:	0801669b 	.word	0x0801669b
 8016674:	0801668d 	.word	0x0801668d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016678:	6839      	ldr	r1, [r7, #0]
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f000 fa3c 	bl	8016af8 <USBD_GetDescriptor>
          break;
 8016680:	e024      	b.n	80166cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016682:	6839      	ldr	r1, [r7, #0]
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f000 fbcb 	bl	8016e20 <USBD_SetAddress>
          break;
 801668a:	e01f      	b.n	80166cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801668c:	6839      	ldr	r1, [r7, #0]
 801668e:	6878      	ldr	r0, [r7, #4]
 8016690:	f000 fc0a 	bl	8016ea8 <USBD_SetConfig>
 8016694:	4603      	mov	r3, r0
 8016696:	73fb      	strb	r3, [r7, #15]
          break;
 8016698:	e018      	b.n	80166cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801669a:	6839      	ldr	r1, [r7, #0]
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f000 fcad 	bl	8016ffc <USBD_GetConfig>
          break;
 80166a2:	e013      	b.n	80166cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80166a4:	6839      	ldr	r1, [r7, #0]
 80166a6:	6878      	ldr	r0, [r7, #4]
 80166a8:	f000 fcde 	bl	8017068 <USBD_GetStatus>
          break;
 80166ac:	e00e      	b.n	80166cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80166ae:	6839      	ldr	r1, [r7, #0]
 80166b0:	6878      	ldr	r0, [r7, #4]
 80166b2:	f000 fd0d 	bl	80170d0 <USBD_SetFeature>
          break;
 80166b6:	e009      	b.n	80166cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80166b8:	6839      	ldr	r1, [r7, #0]
 80166ba:	6878      	ldr	r0, [r7, #4]
 80166bc:	f000 fd31 	bl	8017122 <USBD_ClrFeature>
          break;
 80166c0:	e004      	b.n	80166cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80166c2:	6839      	ldr	r1, [r7, #0]
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f000 fd88 	bl	80171da <USBD_CtlError>
          break;
 80166ca:	bf00      	nop
      }
      break;
 80166cc:	e004      	b.n	80166d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80166ce:	6839      	ldr	r1, [r7, #0]
 80166d0:	6878      	ldr	r0, [r7, #4]
 80166d2:	f000 fd82 	bl	80171da <USBD_CtlError>
      break;
 80166d6:	bf00      	nop
  }

  return ret;
 80166d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3710      	adds	r7, #16
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}
 80166e2:	bf00      	nop

080166e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b084      	sub	sp, #16
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
 80166ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80166ee:	2300      	movs	r3, #0
 80166f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	781b      	ldrb	r3, [r3, #0]
 80166f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80166fa:	2b40      	cmp	r3, #64	@ 0x40
 80166fc:	d005      	beq.n	801670a <USBD_StdItfReq+0x26>
 80166fe:	2b40      	cmp	r3, #64	@ 0x40
 8016700:	d852      	bhi.n	80167a8 <USBD_StdItfReq+0xc4>
 8016702:	2b00      	cmp	r3, #0
 8016704:	d001      	beq.n	801670a <USBD_StdItfReq+0x26>
 8016706:	2b20      	cmp	r3, #32
 8016708:	d14e      	bne.n	80167a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016710:	b2db      	uxtb	r3, r3
 8016712:	3b01      	subs	r3, #1
 8016714:	2b02      	cmp	r3, #2
 8016716:	d840      	bhi.n	801679a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016718:	683b      	ldr	r3, [r7, #0]
 801671a:	889b      	ldrh	r3, [r3, #4]
 801671c:	b2db      	uxtb	r3, r3
 801671e:	2b01      	cmp	r3, #1
 8016720:	d836      	bhi.n	8016790 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	889b      	ldrh	r3, [r3, #4]
 8016726:	b2db      	uxtb	r3, r3
 8016728:	4619      	mov	r1, r3
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f7ff fedb 	bl	80164e6 <USBD_CoreFindIF>
 8016730:	4603      	mov	r3, r0
 8016732:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016734:	7bbb      	ldrb	r3, [r7, #14]
 8016736:	2bff      	cmp	r3, #255	@ 0xff
 8016738:	d01d      	beq.n	8016776 <USBD_StdItfReq+0x92>
 801673a:	7bbb      	ldrb	r3, [r7, #14]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d11a      	bne.n	8016776 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016740:	7bba      	ldrb	r2, [r7, #14]
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	32ae      	adds	r2, #174	@ 0xae
 8016746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801674a:	689b      	ldr	r3, [r3, #8]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d00f      	beq.n	8016770 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016750:	7bba      	ldrb	r2, [r7, #14]
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016758:	7bba      	ldrb	r2, [r7, #14]
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	32ae      	adds	r2, #174	@ 0xae
 801675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016762:	689b      	ldr	r3, [r3, #8]
 8016764:	6839      	ldr	r1, [r7, #0]
 8016766:	6878      	ldr	r0, [r7, #4]
 8016768:	4798      	blx	r3
 801676a:	4603      	mov	r3, r0
 801676c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801676e:	e004      	b.n	801677a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016770:	2303      	movs	r3, #3
 8016772:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016774:	e001      	b.n	801677a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016776:	2303      	movs	r3, #3
 8016778:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	88db      	ldrh	r3, [r3, #6]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d110      	bne.n	80167a4 <USBD_StdItfReq+0xc0>
 8016782:	7bfb      	ldrb	r3, [r7, #15]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d10d      	bne.n	80167a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016788:	6878      	ldr	r0, [r7, #4]
 801678a:	f000 fdfd 	bl	8017388 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801678e:	e009      	b.n	80167a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016790:	6839      	ldr	r1, [r7, #0]
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f000 fd21 	bl	80171da <USBD_CtlError>
          break;
 8016798:	e004      	b.n	80167a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801679a:	6839      	ldr	r1, [r7, #0]
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	f000 fd1c 	bl	80171da <USBD_CtlError>
          break;
 80167a2:	e000      	b.n	80167a6 <USBD_StdItfReq+0xc2>
          break;
 80167a4:	bf00      	nop
      }
      break;
 80167a6:	e004      	b.n	80167b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80167a8:	6839      	ldr	r1, [r7, #0]
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f000 fd15 	bl	80171da <USBD_CtlError>
      break;
 80167b0:	bf00      	nop
  }

  return ret;
 80167b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80167b4:	4618      	mov	r0, r3
 80167b6:	3710      	adds	r7, #16
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}

080167bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b084      	sub	sp, #16
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
 80167c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80167c6:	2300      	movs	r3, #0
 80167c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80167ca:	683b      	ldr	r3, [r7, #0]
 80167cc:	889b      	ldrh	r3, [r3, #4]
 80167ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80167d8:	2b40      	cmp	r3, #64	@ 0x40
 80167da:	d007      	beq.n	80167ec <USBD_StdEPReq+0x30>
 80167dc:	2b40      	cmp	r3, #64	@ 0x40
 80167de:	f200 817f 	bhi.w	8016ae0 <USBD_StdEPReq+0x324>
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d02a      	beq.n	801683c <USBD_StdEPReq+0x80>
 80167e6:	2b20      	cmp	r3, #32
 80167e8:	f040 817a 	bne.w	8016ae0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80167ec:	7bbb      	ldrb	r3, [r7, #14]
 80167ee:	4619      	mov	r1, r3
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f7ff fe85 	bl	8016500 <USBD_CoreFindEP>
 80167f6:	4603      	mov	r3, r0
 80167f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80167fa:	7b7b      	ldrb	r3, [r7, #13]
 80167fc:	2bff      	cmp	r3, #255	@ 0xff
 80167fe:	f000 8174 	beq.w	8016aea <USBD_StdEPReq+0x32e>
 8016802:	7b7b      	ldrb	r3, [r7, #13]
 8016804:	2b00      	cmp	r3, #0
 8016806:	f040 8170 	bne.w	8016aea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801680a:	7b7a      	ldrb	r2, [r7, #13]
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016812:	7b7a      	ldrb	r2, [r7, #13]
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	32ae      	adds	r2, #174	@ 0xae
 8016818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801681c:	689b      	ldr	r3, [r3, #8]
 801681e:	2b00      	cmp	r3, #0
 8016820:	f000 8163 	beq.w	8016aea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016824:	7b7a      	ldrb	r2, [r7, #13]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	32ae      	adds	r2, #174	@ 0xae
 801682a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801682e:	689b      	ldr	r3, [r3, #8]
 8016830:	6839      	ldr	r1, [r7, #0]
 8016832:	6878      	ldr	r0, [r7, #4]
 8016834:	4798      	blx	r3
 8016836:	4603      	mov	r3, r0
 8016838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801683a:	e156      	b.n	8016aea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801683c:	683b      	ldr	r3, [r7, #0]
 801683e:	785b      	ldrb	r3, [r3, #1]
 8016840:	2b03      	cmp	r3, #3
 8016842:	d008      	beq.n	8016856 <USBD_StdEPReq+0x9a>
 8016844:	2b03      	cmp	r3, #3
 8016846:	f300 8145 	bgt.w	8016ad4 <USBD_StdEPReq+0x318>
 801684a:	2b00      	cmp	r3, #0
 801684c:	f000 809b 	beq.w	8016986 <USBD_StdEPReq+0x1ca>
 8016850:	2b01      	cmp	r3, #1
 8016852:	d03c      	beq.n	80168ce <USBD_StdEPReq+0x112>
 8016854:	e13e      	b.n	8016ad4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801685c:	b2db      	uxtb	r3, r3
 801685e:	2b02      	cmp	r3, #2
 8016860:	d002      	beq.n	8016868 <USBD_StdEPReq+0xac>
 8016862:	2b03      	cmp	r3, #3
 8016864:	d016      	beq.n	8016894 <USBD_StdEPReq+0xd8>
 8016866:	e02c      	b.n	80168c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016868:	7bbb      	ldrb	r3, [r7, #14]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d00d      	beq.n	801688a <USBD_StdEPReq+0xce>
 801686e:	7bbb      	ldrb	r3, [r7, #14]
 8016870:	2b80      	cmp	r3, #128	@ 0x80
 8016872:	d00a      	beq.n	801688a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016874:	7bbb      	ldrb	r3, [r7, #14]
 8016876:	4619      	mov	r1, r3
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	f001 f9e3 	bl	8017c44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801687e:	2180      	movs	r1, #128	@ 0x80
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	f001 f9df 	bl	8017c44 <USBD_LL_StallEP>
 8016886:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016888:	e020      	b.n	80168cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801688a:	6839      	ldr	r1, [r7, #0]
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f000 fca4 	bl	80171da <USBD_CtlError>
              break;
 8016892:	e01b      	b.n	80168cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	885b      	ldrh	r3, [r3, #2]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d10e      	bne.n	80168ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801689c:	7bbb      	ldrb	r3, [r7, #14]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d00b      	beq.n	80168ba <USBD_StdEPReq+0xfe>
 80168a2:	7bbb      	ldrb	r3, [r7, #14]
 80168a4:	2b80      	cmp	r3, #128	@ 0x80
 80168a6:	d008      	beq.n	80168ba <USBD_StdEPReq+0xfe>
 80168a8:	683b      	ldr	r3, [r7, #0]
 80168aa:	88db      	ldrh	r3, [r3, #6]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d104      	bne.n	80168ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80168b0:	7bbb      	ldrb	r3, [r7, #14]
 80168b2:	4619      	mov	r1, r3
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	f001 f9c5 	bl	8017c44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80168ba:	6878      	ldr	r0, [r7, #4]
 80168bc:	f000 fd64 	bl	8017388 <USBD_CtlSendStatus>

              break;
 80168c0:	e004      	b.n	80168cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80168c2:	6839      	ldr	r1, [r7, #0]
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f000 fc88 	bl	80171da <USBD_CtlError>
              break;
 80168ca:	bf00      	nop
          }
          break;
 80168cc:	e107      	b.n	8016ade <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80168d4:	b2db      	uxtb	r3, r3
 80168d6:	2b02      	cmp	r3, #2
 80168d8:	d002      	beq.n	80168e0 <USBD_StdEPReq+0x124>
 80168da:	2b03      	cmp	r3, #3
 80168dc:	d016      	beq.n	801690c <USBD_StdEPReq+0x150>
 80168de:	e04b      	b.n	8016978 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80168e0:	7bbb      	ldrb	r3, [r7, #14]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d00d      	beq.n	8016902 <USBD_StdEPReq+0x146>
 80168e6:	7bbb      	ldrb	r3, [r7, #14]
 80168e8:	2b80      	cmp	r3, #128	@ 0x80
 80168ea:	d00a      	beq.n	8016902 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80168ec:	7bbb      	ldrb	r3, [r7, #14]
 80168ee:	4619      	mov	r1, r3
 80168f0:	6878      	ldr	r0, [r7, #4]
 80168f2:	f001 f9a7 	bl	8017c44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80168f6:	2180      	movs	r1, #128	@ 0x80
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f001 f9a3 	bl	8017c44 <USBD_LL_StallEP>
 80168fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016900:	e040      	b.n	8016984 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016902:	6839      	ldr	r1, [r7, #0]
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f000 fc68 	bl	80171da <USBD_CtlError>
              break;
 801690a:	e03b      	b.n	8016984 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801690c:	683b      	ldr	r3, [r7, #0]
 801690e:	885b      	ldrh	r3, [r3, #2]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d136      	bne.n	8016982 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016914:	7bbb      	ldrb	r3, [r7, #14]
 8016916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801691a:	2b00      	cmp	r3, #0
 801691c:	d004      	beq.n	8016928 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801691e:	7bbb      	ldrb	r3, [r7, #14]
 8016920:	4619      	mov	r1, r3
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f001 f9ad 	bl	8017c82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016928:	6878      	ldr	r0, [r7, #4]
 801692a:	f000 fd2d 	bl	8017388 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801692e:	7bbb      	ldrb	r3, [r7, #14]
 8016930:	4619      	mov	r1, r3
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	f7ff fde4 	bl	8016500 <USBD_CoreFindEP>
 8016938:	4603      	mov	r3, r0
 801693a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801693c:	7b7b      	ldrb	r3, [r7, #13]
 801693e:	2bff      	cmp	r3, #255	@ 0xff
 8016940:	d01f      	beq.n	8016982 <USBD_StdEPReq+0x1c6>
 8016942:	7b7b      	ldrb	r3, [r7, #13]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d11c      	bne.n	8016982 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016948:	7b7a      	ldrb	r2, [r7, #13]
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016950:	7b7a      	ldrb	r2, [r7, #13]
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	32ae      	adds	r2, #174	@ 0xae
 8016956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801695a:	689b      	ldr	r3, [r3, #8]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d010      	beq.n	8016982 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016960:	7b7a      	ldrb	r2, [r7, #13]
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	32ae      	adds	r2, #174	@ 0xae
 8016966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801696a:	689b      	ldr	r3, [r3, #8]
 801696c:	6839      	ldr	r1, [r7, #0]
 801696e:	6878      	ldr	r0, [r7, #4]
 8016970:	4798      	blx	r3
 8016972:	4603      	mov	r3, r0
 8016974:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016976:	e004      	b.n	8016982 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016978:	6839      	ldr	r1, [r7, #0]
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f000 fc2d 	bl	80171da <USBD_CtlError>
              break;
 8016980:	e000      	b.n	8016984 <USBD_StdEPReq+0x1c8>
              break;
 8016982:	bf00      	nop
          }
          break;
 8016984:	e0ab      	b.n	8016ade <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801698c:	b2db      	uxtb	r3, r3
 801698e:	2b02      	cmp	r3, #2
 8016990:	d002      	beq.n	8016998 <USBD_StdEPReq+0x1dc>
 8016992:	2b03      	cmp	r3, #3
 8016994:	d032      	beq.n	80169fc <USBD_StdEPReq+0x240>
 8016996:	e097      	b.n	8016ac8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016998:	7bbb      	ldrb	r3, [r7, #14]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d007      	beq.n	80169ae <USBD_StdEPReq+0x1f2>
 801699e:	7bbb      	ldrb	r3, [r7, #14]
 80169a0:	2b80      	cmp	r3, #128	@ 0x80
 80169a2:	d004      	beq.n	80169ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80169a4:	6839      	ldr	r1, [r7, #0]
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f000 fc17 	bl	80171da <USBD_CtlError>
                break;
 80169ac:	e091      	b.n	8016ad2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	da0b      	bge.n	80169ce <USBD_StdEPReq+0x212>
 80169b6:	7bbb      	ldrb	r3, [r7, #14]
 80169b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80169bc:	4613      	mov	r3, r2
 80169be:	009b      	lsls	r3, r3, #2
 80169c0:	4413      	add	r3, r2
 80169c2:	009b      	lsls	r3, r3, #2
 80169c4:	3310      	adds	r3, #16
 80169c6:	687a      	ldr	r2, [r7, #4]
 80169c8:	4413      	add	r3, r2
 80169ca:	3304      	adds	r3, #4
 80169cc:	e00b      	b.n	80169e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80169ce:	7bbb      	ldrb	r3, [r7, #14]
 80169d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169d4:	4613      	mov	r3, r2
 80169d6:	009b      	lsls	r3, r3, #2
 80169d8:	4413      	add	r3, r2
 80169da:	009b      	lsls	r3, r3, #2
 80169dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80169e0:	687a      	ldr	r2, [r7, #4]
 80169e2:	4413      	add	r3, r2
 80169e4:	3304      	adds	r3, #4
 80169e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	2200      	movs	r2, #0
 80169ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80169ee:	68bb      	ldr	r3, [r7, #8]
 80169f0:	2202      	movs	r2, #2
 80169f2:	4619      	mov	r1, r3
 80169f4:	6878      	ldr	r0, [r7, #4]
 80169f6:	f000 fc6d 	bl	80172d4 <USBD_CtlSendData>
              break;
 80169fa:	e06a      	b.n	8016ad2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80169fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	da11      	bge.n	8016a28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016a04:	7bbb      	ldrb	r3, [r7, #14]
 8016a06:	f003 020f 	and.w	r2, r3, #15
 8016a0a:	6879      	ldr	r1, [r7, #4]
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	009b      	lsls	r3, r3, #2
 8016a10:	4413      	add	r3, r2
 8016a12:	009b      	lsls	r3, r3, #2
 8016a14:	440b      	add	r3, r1
 8016a16:	3324      	adds	r3, #36	@ 0x24
 8016a18:	881b      	ldrh	r3, [r3, #0]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d117      	bne.n	8016a4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a1e:	6839      	ldr	r1, [r7, #0]
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f000 fbda 	bl	80171da <USBD_CtlError>
                  break;
 8016a26:	e054      	b.n	8016ad2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016a28:	7bbb      	ldrb	r3, [r7, #14]
 8016a2a:	f003 020f 	and.w	r2, r3, #15
 8016a2e:	6879      	ldr	r1, [r7, #4]
 8016a30:	4613      	mov	r3, r2
 8016a32:	009b      	lsls	r3, r3, #2
 8016a34:	4413      	add	r3, r2
 8016a36:	009b      	lsls	r3, r3, #2
 8016a38:	440b      	add	r3, r1
 8016a3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016a3e:	881b      	ldrh	r3, [r3, #0]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d104      	bne.n	8016a4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a44:	6839      	ldr	r1, [r7, #0]
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f000 fbc7 	bl	80171da <USBD_CtlError>
                  break;
 8016a4c:	e041      	b.n	8016ad2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	da0b      	bge.n	8016a6e <USBD_StdEPReq+0x2b2>
 8016a56:	7bbb      	ldrb	r3, [r7, #14]
 8016a58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016a5c:	4613      	mov	r3, r2
 8016a5e:	009b      	lsls	r3, r3, #2
 8016a60:	4413      	add	r3, r2
 8016a62:	009b      	lsls	r3, r3, #2
 8016a64:	3310      	adds	r3, #16
 8016a66:	687a      	ldr	r2, [r7, #4]
 8016a68:	4413      	add	r3, r2
 8016a6a:	3304      	adds	r3, #4
 8016a6c:	e00b      	b.n	8016a86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016a6e:	7bbb      	ldrb	r3, [r7, #14]
 8016a70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a74:	4613      	mov	r3, r2
 8016a76:	009b      	lsls	r3, r3, #2
 8016a78:	4413      	add	r3, r2
 8016a7a:	009b      	lsls	r3, r3, #2
 8016a7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016a80:	687a      	ldr	r2, [r7, #4]
 8016a82:	4413      	add	r3, r2
 8016a84:	3304      	adds	r3, #4
 8016a86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016a88:	7bbb      	ldrb	r3, [r7, #14]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d002      	beq.n	8016a94 <USBD_StdEPReq+0x2d8>
 8016a8e:	7bbb      	ldrb	r3, [r7, #14]
 8016a90:	2b80      	cmp	r3, #128	@ 0x80
 8016a92:	d103      	bne.n	8016a9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	2200      	movs	r2, #0
 8016a98:	601a      	str	r2, [r3, #0]
 8016a9a:	e00e      	b.n	8016aba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016a9c:	7bbb      	ldrb	r3, [r7, #14]
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f001 f90d 	bl	8017cc0 <USBD_LL_IsStallEP>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d003      	beq.n	8016ab4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016aac:	68bb      	ldr	r3, [r7, #8]
 8016aae:	2201      	movs	r2, #1
 8016ab0:	601a      	str	r2, [r3, #0]
 8016ab2:	e002      	b.n	8016aba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016ab4:	68bb      	ldr	r3, [r7, #8]
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016aba:	68bb      	ldr	r3, [r7, #8]
 8016abc:	2202      	movs	r2, #2
 8016abe:	4619      	mov	r1, r3
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f000 fc07 	bl	80172d4 <USBD_CtlSendData>
              break;
 8016ac6:	e004      	b.n	8016ad2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016ac8:	6839      	ldr	r1, [r7, #0]
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f000 fb85 	bl	80171da <USBD_CtlError>
              break;
 8016ad0:	bf00      	nop
          }
          break;
 8016ad2:	e004      	b.n	8016ade <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016ad4:	6839      	ldr	r1, [r7, #0]
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f000 fb7f 	bl	80171da <USBD_CtlError>
          break;
 8016adc:	bf00      	nop
      }
      break;
 8016ade:	e005      	b.n	8016aec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016ae0:	6839      	ldr	r1, [r7, #0]
 8016ae2:	6878      	ldr	r0, [r7, #4]
 8016ae4:	f000 fb79 	bl	80171da <USBD_CtlError>
      break;
 8016ae8:	e000      	b.n	8016aec <USBD_StdEPReq+0x330>
      break;
 8016aea:	bf00      	nop
  }

  return ret;
 8016aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8016aee:	4618      	mov	r0, r3
 8016af0:	3710      	adds	r7, #16
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bd80      	pop	{r7, pc}
	...

08016af8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b084      	sub	sp, #16
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
 8016b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016b02:	2300      	movs	r3, #0
 8016b04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016b06:	2300      	movs	r3, #0
 8016b08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016b0e:	683b      	ldr	r3, [r7, #0]
 8016b10:	885b      	ldrh	r3, [r3, #2]
 8016b12:	0a1b      	lsrs	r3, r3, #8
 8016b14:	b29b      	uxth	r3, r3
 8016b16:	3b01      	subs	r3, #1
 8016b18:	2b0e      	cmp	r3, #14
 8016b1a:	f200 8152 	bhi.w	8016dc2 <USBD_GetDescriptor+0x2ca>
 8016b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8016b24 <USBD_GetDescriptor+0x2c>)
 8016b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b24:	08016b95 	.word	0x08016b95
 8016b28:	08016bad 	.word	0x08016bad
 8016b2c:	08016bed 	.word	0x08016bed
 8016b30:	08016dc3 	.word	0x08016dc3
 8016b34:	08016dc3 	.word	0x08016dc3
 8016b38:	08016d63 	.word	0x08016d63
 8016b3c:	08016d8f 	.word	0x08016d8f
 8016b40:	08016dc3 	.word	0x08016dc3
 8016b44:	08016dc3 	.word	0x08016dc3
 8016b48:	08016dc3 	.word	0x08016dc3
 8016b4c:	08016dc3 	.word	0x08016dc3
 8016b50:	08016dc3 	.word	0x08016dc3
 8016b54:	08016dc3 	.word	0x08016dc3
 8016b58:	08016dc3 	.word	0x08016dc3
 8016b5c:	08016b61 	.word	0x08016b61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016b66:	69db      	ldr	r3, [r3, #28]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d00b      	beq.n	8016b84 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016b72:	69db      	ldr	r3, [r3, #28]
 8016b74:	687a      	ldr	r2, [r7, #4]
 8016b76:	7c12      	ldrb	r2, [r2, #16]
 8016b78:	f107 0108 	add.w	r1, r7, #8
 8016b7c:	4610      	mov	r0, r2
 8016b7e:	4798      	blx	r3
 8016b80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016b82:	e126      	b.n	8016dd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016b84:	6839      	ldr	r1, [r7, #0]
 8016b86:	6878      	ldr	r0, [r7, #4]
 8016b88:	f000 fb27 	bl	80171da <USBD_CtlError>
        err++;
 8016b8c:	7afb      	ldrb	r3, [r7, #11]
 8016b8e:	3301      	adds	r3, #1
 8016b90:	72fb      	strb	r3, [r7, #11]
      break;
 8016b92:	e11e      	b.n	8016dd2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	687a      	ldr	r2, [r7, #4]
 8016b9e:	7c12      	ldrb	r2, [r2, #16]
 8016ba0:	f107 0108 	add.w	r1, r7, #8
 8016ba4:	4610      	mov	r0, r2
 8016ba6:	4798      	blx	r3
 8016ba8:	60f8      	str	r0, [r7, #12]
      break;
 8016baa:	e112      	b.n	8016dd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	7c1b      	ldrb	r3, [r3, #16]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d10d      	bne.n	8016bd0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016bbc:	f107 0208 	add.w	r2, r7, #8
 8016bc0:	4610      	mov	r0, r2
 8016bc2:	4798      	blx	r3
 8016bc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	3301      	adds	r3, #1
 8016bca:	2202      	movs	r2, #2
 8016bcc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016bce:	e100      	b.n	8016dd2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016bd8:	f107 0208 	add.w	r2, r7, #8
 8016bdc:	4610      	mov	r0, r2
 8016bde:	4798      	blx	r3
 8016be0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	3301      	adds	r3, #1
 8016be6:	2202      	movs	r2, #2
 8016be8:	701a      	strb	r2, [r3, #0]
      break;
 8016bea:	e0f2      	b.n	8016dd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	885b      	ldrh	r3, [r3, #2]
 8016bf0:	b2db      	uxtb	r3, r3
 8016bf2:	2b05      	cmp	r3, #5
 8016bf4:	f200 80ac 	bhi.w	8016d50 <USBD_GetDescriptor+0x258>
 8016bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8016c00 <USBD_GetDescriptor+0x108>)
 8016bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bfe:	bf00      	nop
 8016c00:	08016c19 	.word	0x08016c19
 8016c04:	08016c4d 	.word	0x08016c4d
 8016c08:	08016c81 	.word	0x08016c81
 8016c0c:	08016cb5 	.word	0x08016cb5
 8016c10:	08016ce9 	.word	0x08016ce9
 8016c14:	08016d1d 	.word	0x08016d1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d00b      	beq.n	8016c3c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016c2a:	685b      	ldr	r3, [r3, #4]
 8016c2c:	687a      	ldr	r2, [r7, #4]
 8016c2e:	7c12      	ldrb	r2, [r2, #16]
 8016c30:	f107 0108 	add.w	r1, r7, #8
 8016c34:	4610      	mov	r0, r2
 8016c36:	4798      	blx	r3
 8016c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c3a:	e091      	b.n	8016d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016c3c:	6839      	ldr	r1, [r7, #0]
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f000 facb 	bl	80171da <USBD_CtlError>
            err++;
 8016c44:	7afb      	ldrb	r3, [r7, #11]
 8016c46:	3301      	adds	r3, #1
 8016c48:	72fb      	strb	r3, [r7, #11]
          break;
 8016c4a:	e089      	b.n	8016d60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016c52:	689b      	ldr	r3, [r3, #8]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d00b      	beq.n	8016c70 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016c5e:	689b      	ldr	r3, [r3, #8]
 8016c60:	687a      	ldr	r2, [r7, #4]
 8016c62:	7c12      	ldrb	r2, [r2, #16]
 8016c64:	f107 0108 	add.w	r1, r7, #8
 8016c68:	4610      	mov	r0, r2
 8016c6a:	4798      	blx	r3
 8016c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c6e:	e077      	b.n	8016d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016c70:	6839      	ldr	r1, [r7, #0]
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f000 fab1 	bl	80171da <USBD_CtlError>
            err++;
 8016c78:	7afb      	ldrb	r3, [r7, #11]
 8016c7a:	3301      	adds	r3, #1
 8016c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8016c7e:	e06f      	b.n	8016d60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016c86:	68db      	ldr	r3, [r3, #12]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d00b      	beq.n	8016ca4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016c92:	68db      	ldr	r3, [r3, #12]
 8016c94:	687a      	ldr	r2, [r7, #4]
 8016c96:	7c12      	ldrb	r2, [r2, #16]
 8016c98:	f107 0108 	add.w	r1, r7, #8
 8016c9c:	4610      	mov	r0, r2
 8016c9e:	4798      	blx	r3
 8016ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016ca2:	e05d      	b.n	8016d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016ca4:	6839      	ldr	r1, [r7, #0]
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f000 fa97 	bl	80171da <USBD_CtlError>
            err++;
 8016cac:	7afb      	ldrb	r3, [r7, #11]
 8016cae:	3301      	adds	r3, #1
 8016cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8016cb2:	e055      	b.n	8016d60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016cba:	691b      	ldr	r3, [r3, #16]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d00b      	beq.n	8016cd8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016cc6:	691b      	ldr	r3, [r3, #16]
 8016cc8:	687a      	ldr	r2, [r7, #4]
 8016cca:	7c12      	ldrb	r2, [r2, #16]
 8016ccc:	f107 0108 	add.w	r1, r7, #8
 8016cd0:	4610      	mov	r0, r2
 8016cd2:	4798      	blx	r3
 8016cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cd6:	e043      	b.n	8016d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016cd8:	6839      	ldr	r1, [r7, #0]
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	f000 fa7d 	bl	80171da <USBD_CtlError>
            err++;
 8016ce0:	7afb      	ldrb	r3, [r7, #11]
 8016ce2:	3301      	adds	r3, #1
 8016ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ce6:	e03b      	b.n	8016d60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016cee:	695b      	ldr	r3, [r3, #20]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d00b      	beq.n	8016d0c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016cfa:	695b      	ldr	r3, [r3, #20]
 8016cfc:	687a      	ldr	r2, [r7, #4]
 8016cfe:	7c12      	ldrb	r2, [r2, #16]
 8016d00:	f107 0108 	add.w	r1, r7, #8
 8016d04:	4610      	mov	r0, r2
 8016d06:	4798      	blx	r3
 8016d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d0a:	e029      	b.n	8016d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016d0c:	6839      	ldr	r1, [r7, #0]
 8016d0e:	6878      	ldr	r0, [r7, #4]
 8016d10:	f000 fa63 	bl	80171da <USBD_CtlError>
            err++;
 8016d14:	7afb      	ldrb	r3, [r7, #11]
 8016d16:	3301      	adds	r3, #1
 8016d18:	72fb      	strb	r3, [r7, #11]
          break;
 8016d1a:	e021      	b.n	8016d60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016d22:	699b      	ldr	r3, [r3, #24]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d00b      	beq.n	8016d40 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016d2e:	699b      	ldr	r3, [r3, #24]
 8016d30:	687a      	ldr	r2, [r7, #4]
 8016d32:	7c12      	ldrb	r2, [r2, #16]
 8016d34:	f107 0108 	add.w	r1, r7, #8
 8016d38:	4610      	mov	r0, r2
 8016d3a:	4798      	blx	r3
 8016d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d3e:	e00f      	b.n	8016d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016d40:	6839      	ldr	r1, [r7, #0]
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f000 fa49 	bl	80171da <USBD_CtlError>
            err++;
 8016d48:	7afb      	ldrb	r3, [r7, #11]
 8016d4a:	3301      	adds	r3, #1
 8016d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8016d4e:	e007      	b.n	8016d60 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016d50:	6839      	ldr	r1, [r7, #0]
 8016d52:	6878      	ldr	r0, [r7, #4]
 8016d54:	f000 fa41 	bl	80171da <USBD_CtlError>
          err++;
 8016d58:	7afb      	ldrb	r3, [r7, #11]
 8016d5a:	3301      	adds	r3, #1
 8016d5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016d5e:	bf00      	nop
      }
      break;
 8016d60:	e037      	b.n	8016dd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	7c1b      	ldrb	r3, [r3, #16]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d109      	bne.n	8016d7e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d72:	f107 0208 	add.w	r2, r7, #8
 8016d76:	4610      	mov	r0, r2
 8016d78:	4798      	blx	r3
 8016d7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016d7c:	e029      	b.n	8016dd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016d7e:	6839      	ldr	r1, [r7, #0]
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f000 fa2a 	bl	80171da <USBD_CtlError>
        err++;
 8016d86:	7afb      	ldrb	r3, [r7, #11]
 8016d88:	3301      	adds	r3, #1
 8016d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8016d8c:	e021      	b.n	8016dd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	7c1b      	ldrb	r3, [r3, #16]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d10d      	bne.n	8016db2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d9e:	f107 0208 	add.w	r2, r7, #8
 8016da2:	4610      	mov	r0, r2
 8016da4:	4798      	blx	r3
 8016da6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	3301      	adds	r3, #1
 8016dac:	2207      	movs	r2, #7
 8016dae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016db0:	e00f      	b.n	8016dd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016db2:	6839      	ldr	r1, [r7, #0]
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f000 fa10 	bl	80171da <USBD_CtlError>
        err++;
 8016dba:	7afb      	ldrb	r3, [r7, #11]
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8016dc0:	e007      	b.n	8016dd2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8016dc2:	6839      	ldr	r1, [r7, #0]
 8016dc4:	6878      	ldr	r0, [r7, #4]
 8016dc6:	f000 fa08 	bl	80171da <USBD_CtlError>
      err++;
 8016dca:	7afb      	ldrb	r3, [r7, #11]
 8016dcc:	3301      	adds	r3, #1
 8016dce:	72fb      	strb	r3, [r7, #11]
      break;
 8016dd0:	bf00      	nop
  }

  if (err != 0U)
 8016dd2:	7afb      	ldrb	r3, [r7, #11]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d11e      	bne.n	8016e16 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8016dd8:	683b      	ldr	r3, [r7, #0]
 8016dda:	88db      	ldrh	r3, [r3, #6]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d016      	beq.n	8016e0e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8016de0:	893b      	ldrh	r3, [r7, #8]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d00e      	beq.n	8016e04 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	88da      	ldrh	r2, [r3, #6]
 8016dea:	893b      	ldrh	r3, [r7, #8]
 8016dec:	4293      	cmp	r3, r2
 8016dee:	bf28      	it	cs
 8016df0:	4613      	movcs	r3, r2
 8016df2:	b29b      	uxth	r3, r3
 8016df4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016df6:	893b      	ldrh	r3, [r7, #8]
 8016df8:	461a      	mov	r2, r3
 8016dfa:	68f9      	ldr	r1, [r7, #12]
 8016dfc:	6878      	ldr	r0, [r7, #4]
 8016dfe:	f000 fa69 	bl	80172d4 <USBD_CtlSendData>
 8016e02:	e009      	b.n	8016e18 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016e04:	6839      	ldr	r1, [r7, #0]
 8016e06:	6878      	ldr	r0, [r7, #4]
 8016e08:	f000 f9e7 	bl	80171da <USBD_CtlError>
 8016e0c:	e004      	b.n	8016e18 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f000 faba 	bl	8017388 <USBD_CtlSendStatus>
 8016e14:	e000      	b.n	8016e18 <USBD_GetDescriptor+0x320>
    return;
 8016e16:	bf00      	nop
  }
}
 8016e18:	3710      	adds	r7, #16
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
 8016e1e:	bf00      	nop

08016e20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b084      	sub	sp, #16
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
 8016e28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016e2a:	683b      	ldr	r3, [r7, #0]
 8016e2c:	889b      	ldrh	r3, [r3, #4]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d131      	bne.n	8016e96 <USBD_SetAddress+0x76>
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	88db      	ldrh	r3, [r3, #6]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d12d      	bne.n	8016e96 <USBD_SetAddress+0x76>
 8016e3a:	683b      	ldr	r3, [r7, #0]
 8016e3c:	885b      	ldrh	r3, [r3, #2]
 8016e3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8016e40:	d829      	bhi.n	8016e96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016e42:	683b      	ldr	r3, [r7, #0]
 8016e44:	885b      	ldrh	r3, [r3, #2]
 8016e46:	b2db      	uxtb	r3, r3
 8016e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016e4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016e54:	b2db      	uxtb	r3, r3
 8016e56:	2b03      	cmp	r3, #3
 8016e58:	d104      	bne.n	8016e64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016e5a:	6839      	ldr	r1, [r7, #0]
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f000 f9bc 	bl	80171da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e62:	e01d      	b.n	8016ea0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	7bfa      	ldrb	r2, [r7, #15]
 8016e68:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016e6c:	7bfb      	ldrb	r3, [r7, #15]
 8016e6e:	4619      	mov	r1, r3
 8016e70:	6878      	ldr	r0, [r7, #4]
 8016e72:	f000 ff51 	bl	8017d18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016e76:	6878      	ldr	r0, [r7, #4]
 8016e78:	f000 fa86 	bl	8017388 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016e7c:	7bfb      	ldrb	r3, [r7, #15]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d004      	beq.n	8016e8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	2202      	movs	r2, #2
 8016e86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e8a:	e009      	b.n	8016ea0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	2201      	movs	r2, #1
 8016e90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e94:	e004      	b.n	8016ea0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016e96:	6839      	ldr	r1, [r7, #0]
 8016e98:	6878      	ldr	r0, [r7, #4]
 8016e9a:	f000 f99e 	bl	80171da <USBD_CtlError>
  }
}
 8016e9e:	bf00      	nop
 8016ea0:	bf00      	nop
 8016ea2:	3710      	adds	r7, #16
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	bd80      	pop	{r7, pc}

08016ea8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b084      	sub	sp, #16
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
 8016eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	885b      	ldrh	r3, [r3, #2]
 8016eba:	b2da      	uxtb	r2, r3
 8016ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016ebe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	2b01      	cmp	r3, #1
 8016ec6:	d905      	bls.n	8016ed4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016ec8:	6839      	ldr	r1, [r7, #0]
 8016eca:	6878      	ldr	r0, [r7, #4]
 8016ecc:	f000 f985 	bl	80171da <USBD_CtlError>
    return USBD_FAIL;
 8016ed0:	2303      	movs	r3, #3
 8016ed2:	e08c      	b.n	8016fee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016eda:	b2db      	uxtb	r3, r3
 8016edc:	2b02      	cmp	r3, #2
 8016ede:	d002      	beq.n	8016ee6 <USBD_SetConfig+0x3e>
 8016ee0:	2b03      	cmp	r3, #3
 8016ee2:	d029      	beq.n	8016f38 <USBD_SetConfig+0x90>
 8016ee4:	e075      	b.n	8016fd2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016ee6:	4b44      	ldr	r3, [pc, #272]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016ee8:	781b      	ldrb	r3, [r3, #0]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d020      	beq.n	8016f30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016eee:	4b42      	ldr	r3, [pc, #264]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	461a      	mov	r2, r3
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016efa:	781b      	ldrb	r3, [r3, #0]
 8016efc:	4619      	mov	r1, r3
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f7fe ffb9 	bl	8015e76 <USBD_SetClassConfig>
 8016f04:	4603      	mov	r3, r0
 8016f06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016f08:	7bfb      	ldrb	r3, [r7, #15]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d008      	beq.n	8016f20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016f0e:	6839      	ldr	r1, [r7, #0]
 8016f10:	6878      	ldr	r0, [r7, #4]
 8016f12:	f000 f962 	bl	80171da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2202      	movs	r2, #2
 8016f1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f1e:	e065      	b.n	8016fec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016f20:	6878      	ldr	r0, [r7, #4]
 8016f22:	f000 fa31 	bl	8017388 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	2203      	movs	r2, #3
 8016f2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8016f2e:	e05d      	b.n	8016fec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016f30:	6878      	ldr	r0, [r7, #4]
 8016f32:	f000 fa29 	bl	8017388 <USBD_CtlSendStatus>
      break;
 8016f36:	e059      	b.n	8016fec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016f38:	4b2f      	ldr	r3, [pc, #188]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016f3a:	781b      	ldrb	r3, [r3, #0]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d112      	bne.n	8016f66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	2202      	movs	r2, #2
 8016f44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8016f48:	4b2b      	ldr	r3, [pc, #172]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016f4a:	781b      	ldrb	r3, [r3, #0]
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016f52:	4b29      	ldr	r3, [pc, #164]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016f54:	781b      	ldrb	r3, [r3, #0]
 8016f56:	4619      	mov	r1, r3
 8016f58:	6878      	ldr	r0, [r7, #4]
 8016f5a:	f7fe ffa8 	bl	8015eae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f000 fa12 	bl	8017388 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f64:	e042      	b.n	8016fec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016f66:	4b24      	ldr	r3, [pc, #144]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	685b      	ldr	r3, [r3, #4]
 8016f70:	429a      	cmp	r2, r3
 8016f72:	d02a      	beq.n	8016fca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	685b      	ldr	r3, [r3, #4]
 8016f78:	b2db      	uxtb	r3, r3
 8016f7a:	4619      	mov	r1, r3
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f7fe ff96 	bl	8015eae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016f82:	4b1d      	ldr	r3, [pc, #116]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016f84:	781b      	ldrb	r3, [r3, #0]
 8016f86:	461a      	mov	r2, r3
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016f8e:	781b      	ldrb	r3, [r3, #0]
 8016f90:	4619      	mov	r1, r3
 8016f92:	6878      	ldr	r0, [r7, #4]
 8016f94:	f7fe ff6f 	bl	8015e76 <USBD_SetClassConfig>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016f9c:	7bfb      	ldrb	r3, [r7, #15]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d00f      	beq.n	8016fc2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016fa2:	6839      	ldr	r1, [r7, #0]
 8016fa4:	6878      	ldr	r0, [r7, #4]
 8016fa6:	f000 f918 	bl	80171da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	b2db      	uxtb	r3, r3
 8016fb0:	4619      	mov	r1, r3
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	f7fe ff7b 	bl	8015eae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	2202      	movs	r2, #2
 8016fbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8016fc0:	e014      	b.n	8016fec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f000 f9e0 	bl	8017388 <USBD_CtlSendStatus>
      break;
 8016fc8:	e010      	b.n	8016fec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016fca:	6878      	ldr	r0, [r7, #4]
 8016fcc:	f000 f9dc 	bl	8017388 <USBD_CtlSendStatus>
      break;
 8016fd0:	e00c      	b.n	8016fec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016fd2:	6839      	ldr	r1, [r7, #0]
 8016fd4:	6878      	ldr	r0, [r7, #4]
 8016fd6:	f000 f900 	bl	80171da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016fda:	4b07      	ldr	r3, [pc, #28]	@ (8016ff8 <USBD_SetConfig+0x150>)
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	4619      	mov	r1, r3
 8016fe0:	6878      	ldr	r0, [r7, #4]
 8016fe2:	f7fe ff64 	bl	8015eae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016fe6:	2303      	movs	r3, #3
 8016fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8016fea:	bf00      	nop
  }

  return ret;
 8016fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fee:	4618      	mov	r0, r3
 8016ff0:	3710      	adds	r7, #16
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	bd80      	pop	{r7, pc}
 8016ff6:	bf00      	nop
 8016ff8:	240392e4 	.word	0x240392e4

08016ffc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b082      	sub	sp, #8
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017006:	683b      	ldr	r3, [r7, #0]
 8017008:	88db      	ldrh	r3, [r3, #6]
 801700a:	2b01      	cmp	r3, #1
 801700c:	d004      	beq.n	8017018 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801700e:	6839      	ldr	r1, [r7, #0]
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f000 f8e2 	bl	80171da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017016:	e023      	b.n	8017060 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801701e:	b2db      	uxtb	r3, r3
 8017020:	2b02      	cmp	r3, #2
 8017022:	dc02      	bgt.n	801702a <USBD_GetConfig+0x2e>
 8017024:	2b00      	cmp	r3, #0
 8017026:	dc03      	bgt.n	8017030 <USBD_GetConfig+0x34>
 8017028:	e015      	b.n	8017056 <USBD_GetConfig+0x5a>
 801702a:	2b03      	cmp	r3, #3
 801702c:	d00b      	beq.n	8017046 <USBD_GetConfig+0x4a>
 801702e:	e012      	b.n	8017056 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	2200      	movs	r2, #0
 8017034:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	3308      	adds	r3, #8
 801703a:	2201      	movs	r2, #1
 801703c:	4619      	mov	r1, r3
 801703e:	6878      	ldr	r0, [r7, #4]
 8017040:	f000 f948 	bl	80172d4 <USBD_CtlSendData>
        break;
 8017044:	e00c      	b.n	8017060 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	3304      	adds	r3, #4
 801704a:	2201      	movs	r2, #1
 801704c:	4619      	mov	r1, r3
 801704e:	6878      	ldr	r0, [r7, #4]
 8017050:	f000 f940 	bl	80172d4 <USBD_CtlSendData>
        break;
 8017054:	e004      	b.n	8017060 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017056:	6839      	ldr	r1, [r7, #0]
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f000 f8be 	bl	80171da <USBD_CtlError>
        break;
 801705e:	bf00      	nop
}
 8017060:	bf00      	nop
 8017062:	3708      	adds	r7, #8
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}

08017068 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b082      	sub	sp, #8
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017078:	b2db      	uxtb	r3, r3
 801707a:	3b01      	subs	r3, #1
 801707c:	2b02      	cmp	r3, #2
 801707e:	d81e      	bhi.n	80170be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017080:	683b      	ldr	r3, [r7, #0]
 8017082:	88db      	ldrh	r3, [r3, #6]
 8017084:	2b02      	cmp	r3, #2
 8017086:	d004      	beq.n	8017092 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017088:	6839      	ldr	r1, [r7, #0]
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	f000 f8a5 	bl	80171da <USBD_CtlError>
        break;
 8017090:	e01a      	b.n	80170c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	2201      	movs	r2, #1
 8017096:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d005      	beq.n	80170ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	68db      	ldr	r3, [r3, #12]
 80170a6:	f043 0202 	orr.w	r2, r3, #2
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	330c      	adds	r3, #12
 80170b2:	2202      	movs	r2, #2
 80170b4:	4619      	mov	r1, r3
 80170b6:	6878      	ldr	r0, [r7, #4]
 80170b8:	f000 f90c 	bl	80172d4 <USBD_CtlSendData>
      break;
 80170bc:	e004      	b.n	80170c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80170be:	6839      	ldr	r1, [r7, #0]
 80170c0:	6878      	ldr	r0, [r7, #4]
 80170c2:	f000 f88a 	bl	80171da <USBD_CtlError>
      break;
 80170c6:	bf00      	nop
  }
}
 80170c8:	bf00      	nop
 80170ca:	3708      	adds	r7, #8
 80170cc:	46bd      	mov	sp, r7
 80170ce:	bd80      	pop	{r7, pc}

080170d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b082      	sub	sp, #8
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
 80170d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80170da:	683b      	ldr	r3, [r7, #0]
 80170dc:	885b      	ldrh	r3, [r3, #2]
 80170de:	2b01      	cmp	r3, #1
 80170e0:	d107      	bne.n	80170f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	2201      	movs	r2, #1
 80170e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80170ea:	6878      	ldr	r0, [r7, #4]
 80170ec:	f000 f94c 	bl	8017388 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80170f0:	e013      	b.n	801711a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80170f2:	683b      	ldr	r3, [r7, #0]
 80170f4:	885b      	ldrh	r3, [r3, #2]
 80170f6:	2b02      	cmp	r3, #2
 80170f8:	d10b      	bne.n	8017112 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	889b      	ldrh	r3, [r3, #4]
 80170fe:	0a1b      	lsrs	r3, r3, #8
 8017100:	b29b      	uxth	r3, r3
 8017102:	b2da      	uxtb	r2, r3
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801710a:	6878      	ldr	r0, [r7, #4]
 801710c:	f000 f93c 	bl	8017388 <USBD_CtlSendStatus>
}
 8017110:	e003      	b.n	801711a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017112:	6839      	ldr	r1, [r7, #0]
 8017114:	6878      	ldr	r0, [r7, #4]
 8017116:	f000 f860 	bl	80171da <USBD_CtlError>
}
 801711a:	bf00      	nop
 801711c:	3708      	adds	r7, #8
 801711e:	46bd      	mov	sp, r7
 8017120:	bd80      	pop	{r7, pc}

08017122 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017122:	b580      	push	{r7, lr}
 8017124:	b082      	sub	sp, #8
 8017126:	af00      	add	r7, sp, #0
 8017128:	6078      	str	r0, [r7, #4]
 801712a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017132:	b2db      	uxtb	r3, r3
 8017134:	3b01      	subs	r3, #1
 8017136:	2b02      	cmp	r3, #2
 8017138:	d80b      	bhi.n	8017152 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801713a:	683b      	ldr	r3, [r7, #0]
 801713c:	885b      	ldrh	r3, [r3, #2]
 801713e:	2b01      	cmp	r3, #1
 8017140:	d10c      	bne.n	801715c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	2200      	movs	r2, #0
 8017146:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801714a:	6878      	ldr	r0, [r7, #4]
 801714c:	f000 f91c 	bl	8017388 <USBD_CtlSendStatus>
      }
      break;
 8017150:	e004      	b.n	801715c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017152:	6839      	ldr	r1, [r7, #0]
 8017154:	6878      	ldr	r0, [r7, #4]
 8017156:	f000 f840 	bl	80171da <USBD_CtlError>
      break;
 801715a:	e000      	b.n	801715e <USBD_ClrFeature+0x3c>
      break;
 801715c:	bf00      	nop
  }
}
 801715e:	bf00      	nop
 8017160:	3708      	adds	r7, #8
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}

08017166 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017166:	b580      	push	{r7, lr}
 8017168:	b084      	sub	sp, #16
 801716a:	af00      	add	r7, sp, #0
 801716c:	6078      	str	r0, [r7, #4]
 801716e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017170:	683b      	ldr	r3, [r7, #0]
 8017172:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	781a      	ldrb	r2, [r3, #0]
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	3301      	adds	r3, #1
 8017180:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	781a      	ldrb	r2, [r3, #0]
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	3301      	adds	r3, #1
 801718e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017190:	68f8      	ldr	r0, [r7, #12]
 8017192:	f7ff fa16 	bl	80165c2 <SWAPBYTE>
 8017196:	4603      	mov	r3, r0
 8017198:	461a      	mov	r2, r3
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	3301      	adds	r3, #1
 80171a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	3301      	adds	r3, #1
 80171a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80171aa:	68f8      	ldr	r0, [r7, #12]
 80171ac:	f7ff fa09 	bl	80165c2 <SWAPBYTE>
 80171b0:	4603      	mov	r3, r0
 80171b2:	461a      	mov	r2, r3
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	3301      	adds	r3, #1
 80171bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	3301      	adds	r3, #1
 80171c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80171c4:	68f8      	ldr	r0, [r7, #12]
 80171c6:	f7ff f9fc 	bl	80165c2 <SWAPBYTE>
 80171ca:	4603      	mov	r3, r0
 80171cc:	461a      	mov	r2, r3
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	80da      	strh	r2, [r3, #6]
}
 80171d2:	bf00      	nop
 80171d4:	3710      	adds	r7, #16
 80171d6:	46bd      	mov	sp, r7
 80171d8:	bd80      	pop	{r7, pc}

080171da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171da:	b580      	push	{r7, lr}
 80171dc:	b082      	sub	sp, #8
 80171de:	af00      	add	r7, sp, #0
 80171e0:	6078      	str	r0, [r7, #4]
 80171e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80171e4:	2180      	movs	r1, #128	@ 0x80
 80171e6:	6878      	ldr	r0, [r7, #4]
 80171e8:	f000 fd2c 	bl	8017c44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80171ec:	2100      	movs	r1, #0
 80171ee:	6878      	ldr	r0, [r7, #4]
 80171f0:	f000 fd28 	bl	8017c44 <USBD_LL_StallEP>
}
 80171f4:	bf00      	nop
 80171f6:	3708      	adds	r7, #8
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bd80      	pop	{r7, pc}

080171fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b086      	sub	sp, #24
 8017200:	af00      	add	r7, sp, #0
 8017202:	60f8      	str	r0, [r7, #12]
 8017204:	60b9      	str	r1, [r7, #8]
 8017206:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017208:	2300      	movs	r3, #0
 801720a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d042      	beq.n	8017298 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8017216:	6938      	ldr	r0, [r7, #16]
 8017218:	f000 f842 	bl	80172a0 <USBD_GetLen>
 801721c:	4603      	mov	r3, r0
 801721e:	3301      	adds	r3, #1
 8017220:	005b      	lsls	r3, r3, #1
 8017222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017226:	d808      	bhi.n	801723a <USBD_GetString+0x3e>
 8017228:	6938      	ldr	r0, [r7, #16]
 801722a:	f000 f839 	bl	80172a0 <USBD_GetLen>
 801722e:	4603      	mov	r3, r0
 8017230:	3301      	adds	r3, #1
 8017232:	b29b      	uxth	r3, r3
 8017234:	005b      	lsls	r3, r3, #1
 8017236:	b29a      	uxth	r2, r3
 8017238:	e001      	b.n	801723e <USBD_GetString+0x42>
 801723a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017242:	7dfb      	ldrb	r3, [r7, #23]
 8017244:	68ba      	ldr	r2, [r7, #8]
 8017246:	4413      	add	r3, r2
 8017248:	687a      	ldr	r2, [r7, #4]
 801724a:	7812      	ldrb	r2, [r2, #0]
 801724c:	701a      	strb	r2, [r3, #0]
  idx++;
 801724e:	7dfb      	ldrb	r3, [r7, #23]
 8017250:	3301      	adds	r3, #1
 8017252:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017254:	7dfb      	ldrb	r3, [r7, #23]
 8017256:	68ba      	ldr	r2, [r7, #8]
 8017258:	4413      	add	r3, r2
 801725a:	2203      	movs	r2, #3
 801725c:	701a      	strb	r2, [r3, #0]
  idx++;
 801725e:	7dfb      	ldrb	r3, [r7, #23]
 8017260:	3301      	adds	r3, #1
 8017262:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017264:	e013      	b.n	801728e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8017266:	7dfb      	ldrb	r3, [r7, #23]
 8017268:	68ba      	ldr	r2, [r7, #8]
 801726a:	4413      	add	r3, r2
 801726c:	693a      	ldr	r2, [r7, #16]
 801726e:	7812      	ldrb	r2, [r2, #0]
 8017270:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017272:	693b      	ldr	r3, [r7, #16]
 8017274:	3301      	adds	r3, #1
 8017276:	613b      	str	r3, [r7, #16]
    idx++;
 8017278:	7dfb      	ldrb	r3, [r7, #23]
 801727a:	3301      	adds	r3, #1
 801727c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801727e:	7dfb      	ldrb	r3, [r7, #23]
 8017280:	68ba      	ldr	r2, [r7, #8]
 8017282:	4413      	add	r3, r2
 8017284:	2200      	movs	r2, #0
 8017286:	701a      	strb	r2, [r3, #0]
    idx++;
 8017288:	7dfb      	ldrb	r3, [r7, #23]
 801728a:	3301      	adds	r3, #1
 801728c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d1e7      	bne.n	8017266 <USBD_GetString+0x6a>
 8017296:	e000      	b.n	801729a <USBD_GetString+0x9e>
    return;
 8017298:	bf00      	nop
  }
}
 801729a:	3718      	adds	r7, #24
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}

080172a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80172a0:	b480      	push	{r7}
 80172a2:	b085      	sub	sp, #20
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80172a8:	2300      	movs	r3, #0
 80172aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80172b0:	e005      	b.n	80172be <USBD_GetLen+0x1e>
  {
    len++;
 80172b2:	7bfb      	ldrb	r3, [r7, #15]
 80172b4:	3301      	adds	r3, #1
 80172b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	3301      	adds	r3, #1
 80172bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80172be:	68bb      	ldr	r3, [r7, #8]
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d1f5      	bne.n	80172b2 <USBD_GetLen+0x12>
  }

  return len;
 80172c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80172c8:	4618      	mov	r0, r3
 80172ca:	3714      	adds	r7, #20
 80172cc:	46bd      	mov	sp, r7
 80172ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d2:	4770      	bx	lr

080172d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b084      	sub	sp, #16
 80172d8:	af00      	add	r7, sp, #0
 80172da:	60f8      	str	r0, [r7, #12]
 80172dc:	60b9      	str	r1, [r7, #8]
 80172de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	2202      	movs	r2, #2
 80172e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	687a      	ldr	r2, [r7, #4]
 80172ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	687a      	ldr	r2, [r7, #4]
 80172f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	68ba      	ldr	r2, [r7, #8]
 80172f8:	2100      	movs	r1, #0
 80172fa:	68f8      	ldr	r0, [r7, #12]
 80172fc:	f000 fd2b 	bl	8017d56 <USBD_LL_Transmit>

  return USBD_OK;
 8017300:	2300      	movs	r3, #0
}
 8017302:	4618      	mov	r0, r3
 8017304:	3710      	adds	r7, #16
 8017306:	46bd      	mov	sp, r7
 8017308:	bd80      	pop	{r7, pc}

0801730a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801730a:	b580      	push	{r7, lr}
 801730c:	b084      	sub	sp, #16
 801730e:	af00      	add	r7, sp, #0
 8017310:	60f8      	str	r0, [r7, #12]
 8017312:	60b9      	str	r1, [r7, #8]
 8017314:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	68ba      	ldr	r2, [r7, #8]
 801731a:	2100      	movs	r1, #0
 801731c:	68f8      	ldr	r0, [r7, #12]
 801731e:	f000 fd1a 	bl	8017d56 <USBD_LL_Transmit>

  return USBD_OK;
 8017322:	2300      	movs	r3, #0
}
 8017324:	4618      	mov	r0, r3
 8017326:	3710      	adds	r7, #16
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}

0801732c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	60f8      	str	r0, [r7, #12]
 8017334:	60b9      	str	r1, [r7, #8]
 8017336:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	2203      	movs	r2, #3
 801733c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	687a      	ldr	r2, [r7, #4]
 8017344:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	687a      	ldr	r2, [r7, #4]
 801734c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	68ba      	ldr	r2, [r7, #8]
 8017354:	2100      	movs	r1, #0
 8017356:	68f8      	ldr	r0, [r7, #12]
 8017358:	f000 fd1e 	bl	8017d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801735c:	2300      	movs	r3, #0
}
 801735e:	4618      	mov	r0, r3
 8017360:	3710      	adds	r7, #16
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}

08017366 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017366:	b580      	push	{r7, lr}
 8017368:	b084      	sub	sp, #16
 801736a:	af00      	add	r7, sp, #0
 801736c:	60f8      	str	r0, [r7, #12]
 801736e:	60b9      	str	r1, [r7, #8]
 8017370:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	68ba      	ldr	r2, [r7, #8]
 8017376:	2100      	movs	r1, #0
 8017378:	68f8      	ldr	r0, [r7, #12]
 801737a:	f000 fd0d 	bl	8017d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801737e:	2300      	movs	r3, #0
}
 8017380:	4618      	mov	r0, r3
 8017382:	3710      	adds	r7, #16
 8017384:	46bd      	mov	sp, r7
 8017386:	bd80      	pop	{r7, pc}

08017388 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b082      	sub	sp, #8
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2204      	movs	r2, #4
 8017394:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017398:	2300      	movs	r3, #0
 801739a:	2200      	movs	r2, #0
 801739c:	2100      	movs	r1, #0
 801739e:	6878      	ldr	r0, [r7, #4]
 80173a0:	f000 fcd9 	bl	8017d56 <USBD_LL_Transmit>

  return USBD_OK;
 80173a4:	2300      	movs	r3, #0
}
 80173a6:	4618      	mov	r0, r3
 80173a8:	3708      	adds	r7, #8
 80173aa:	46bd      	mov	sp, r7
 80173ac:	bd80      	pop	{r7, pc}

080173ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80173ae:	b580      	push	{r7, lr}
 80173b0:	b082      	sub	sp, #8
 80173b2:	af00      	add	r7, sp, #0
 80173b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	2205      	movs	r2, #5
 80173ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80173be:	2300      	movs	r3, #0
 80173c0:	2200      	movs	r2, #0
 80173c2:	2100      	movs	r1, #0
 80173c4:	6878      	ldr	r0, [r7, #4]
 80173c6:	f000 fce7 	bl	8017d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80173ca:	2300      	movs	r3, #0
}
 80173cc:	4618      	mov	r0, r3
 80173ce:	3708      	adds	r7, #8
 80173d0:	46bd      	mov	sp, r7
 80173d2:	bd80      	pop	{r7, pc}

080173d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80173d8:	2200      	movs	r2, #0
 80173da:	4918      	ldr	r1, [pc, #96]	@ (801743c <MX_USB_DEVICE_Init+0x68>)
 80173dc:	4818      	ldr	r0, [pc, #96]	@ (8017440 <MX_USB_DEVICE_Init+0x6c>)
 80173de:	f7fe fccd 	bl	8015d7c <USBD_Init>
 80173e2:	4603      	mov	r3, r0
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d001      	beq.n	80173ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80173e8:	f7ea f95a 	bl	80016a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80173ec:	4915      	ldr	r1, [pc, #84]	@ (8017444 <MX_USB_DEVICE_Init+0x70>)
 80173ee:	4814      	ldr	r0, [pc, #80]	@ (8017440 <MX_USB_DEVICE_Init+0x6c>)
 80173f0:	f7fe fcf4 	bl	8015ddc <USBD_RegisterClass>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d001      	beq.n	80173fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80173fa:	f7ea f951 	bl	80016a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80173fe:	4912      	ldr	r1, [pc, #72]	@ (8017448 <MX_USB_DEVICE_Init+0x74>)
 8017400:	480f      	ldr	r0, [pc, #60]	@ (8017440 <MX_USB_DEVICE_Init+0x6c>)
 8017402:	f7fe fbeb 	bl	8015bdc <USBD_CDC_RegisterInterface>
 8017406:	4603      	mov	r3, r0
 8017408:	2b00      	cmp	r3, #0
 801740a:	d001      	beq.n	8017410 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801740c:	f7ea f948 	bl	80016a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017410:	480b      	ldr	r0, [pc, #44]	@ (8017440 <MX_USB_DEVICE_Init+0x6c>)
 8017412:	f7fe fd19 	bl	8015e48 <USBD_Start>
 8017416:	4603      	mov	r3, r0
 8017418:	2b00      	cmp	r3, #0
 801741a:	d001      	beq.n	8017420 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801741c:	f7ea f940 	bl	80016a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017420:	f7f5 fff6 	bl	800d410 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8017424:	4b06      	ldr	r3, [pc, #24]	@ (8017440 <MX_USB_DEVICE_Init+0x6c>)
 8017426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801742a:	4a05      	ldr	r2, [pc, #20]	@ (8017440 <MX_USB_DEVICE_Init+0x6c>)
 801742c:	33b0      	adds	r3, #176	@ 0xb0
 801742e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017432:	4a06      	ldr	r2, [pc, #24]	@ (801744c <MX_USB_DEVICE_Init+0x78>)
 8017434:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017436:	bf00      	nop
 8017438:	bd80      	pop	{r7, pc}
 801743a:	bf00      	nop
 801743c:	240000b4 	.word	0x240000b4
 8017440:	240392e8 	.word	0x240392e8
 8017444:	24000020 	.word	0x24000020
 8017448:	240000a0 	.word	0x240000a0
 801744c:	240395c4 	.word	0x240395c4

08017450 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017454:	2200      	movs	r2, #0
 8017456:	4905      	ldr	r1, [pc, #20]	@ (801746c <CDC_Init_FS+0x1c>)
 8017458:	4805      	ldr	r0, [pc, #20]	@ (8017470 <CDC_Init_FS+0x20>)
 801745a:	f7fe fbd9 	bl	8015c10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801745e:	4905      	ldr	r1, [pc, #20]	@ (8017474 <CDC_Init_FS+0x24>)
 8017460:	4803      	ldr	r0, [pc, #12]	@ (8017470 <CDC_Init_FS+0x20>)
 8017462:	f7fe fbf7 	bl	8015c54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017466:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017468:	4618      	mov	r0, r3
 801746a:	bd80      	pop	{r7, pc}
 801746c:	24039dc8 	.word	0x24039dc8
 8017470:	240392e8 	.word	0x240392e8
 8017474:	240395c8 	.word	0x240395c8

08017478 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017478:	b480      	push	{r7}
 801747a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801747c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801747e:	4618      	mov	r0, r3
 8017480:	46bd      	mov	sp, r7
 8017482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017486:	4770      	bx	lr

08017488 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017488:	b480      	push	{r7}
 801748a:	b083      	sub	sp, #12
 801748c:	af00      	add	r7, sp, #0
 801748e:	4603      	mov	r3, r0
 8017490:	6039      	str	r1, [r7, #0]
 8017492:	71fb      	strb	r3, [r7, #7]
 8017494:	4613      	mov	r3, r2
 8017496:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017498:	79fb      	ldrb	r3, [r7, #7]
 801749a:	2b23      	cmp	r3, #35	@ 0x23
 801749c:	d84a      	bhi.n	8017534 <CDC_Control_FS+0xac>
 801749e:	a201      	add	r2, pc, #4	@ (adr r2, 80174a4 <CDC_Control_FS+0x1c>)
 80174a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174a4:	08017535 	.word	0x08017535
 80174a8:	08017535 	.word	0x08017535
 80174ac:	08017535 	.word	0x08017535
 80174b0:	08017535 	.word	0x08017535
 80174b4:	08017535 	.word	0x08017535
 80174b8:	08017535 	.word	0x08017535
 80174bc:	08017535 	.word	0x08017535
 80174c0:	08017535 	.word	0x08017535
 80174c4:	08017535 	.word	0x08017535
 80174c8:	08017535 	.word	0x08017535
 80174cc:	08017535 	.word	0x08017535
 80174d0:	08017535 	.word	0x08017535
 80174d4:	08017535 	.word	0x08017535
 80174d8:	08017535 	.word	0x08017535
 80174dc:	08017535 	.word	0x08017535
 80174e0:	08017535 	.word	0x08017535
 80174e4:	08017535 	.word	0x08017535
 80174e8:	08017535 	.word	0x08017535
 80174ec:	08017535 	.word	0x08017535
 80174f0:	08017535 	.word	0x08017535
 80174f4:	08017535 	.word	0x08017535
 80174f8:	08017535 	.word	0x08017535
 80174fc:	08017535 	.word	0x08017535
 8017500:	08017535 	.word	0x08017535
 8017504:	08017535 	.word	0x08017535
 8017508:	08017535 	.word	0x08017535
 801750c:	08017535 	.word	0x08017535
 8017510:	08017535 	.word	0x08017535
 8017514:	08017535 	.word	0x08017535
 8017518:	08017535 	.word	0x08017535
 801751c:	08017535 	.word	0x08017535
 8017520:	08017535 	.word	0x08017535
 8017524:	08017535 	.word	0x08017535
 8017528:	08017535 	.word	0x08017535
 801752c:	08017535 	.word	0x08017535
 8017530:	08017535 	.word	0x08017535
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017534:	bf00      	nop
  }

  return (USBD_OK);
 8017536:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017538:	4618      	mov	r0, r3
 801753a:	370c      	adds	r7, #12
 801753c:	46bd      	mov	sp, r7
 801753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017542:	4770      	bx	lr

08017544 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b082      	sub	sp, #8
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
 801754c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801754e:	6879      	ldr	r1, [r7, #4]
 8017550:	480a      	ldr	r0, [pc, #40]	@ (801757c <CDC_Receive_FS+0x38>)
 8017552:	f7fe fb7f 	bl	8015c54 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017556:	4809      	ldr	r0, [pc, #36]	@ (801757c <CDC_Receive_FS+0x38>)
 8017558:	f7fe fbda 	bl	8015d10 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 801755c:	4b08      	ldr	r3, [pc, #32]	@ (8017580 <CDC_Receive_FS+0x3c>)
 801755e:	2201      	movs	r2, #1
 8017560:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8017562:	683b      	ldr	r3, [r7, #0]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	b29a      	uxth	r2, r3
 8017568:	2364      	movs	r3, #100	@ 0x64
 801756a:	6879      	ldr	r1, [r7, #4]
 801756c:	4805      	ldr	r0, [pc, #20]	@ (8017584 <CDC_Receive_FS+0x40>)
 801756e:	f7fa fc3e 	bl	8011dee <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8017572:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017574:	4618      	mov	r0, r3
 8017576:	3708      	adds	r7, #8
 8017578:	46bd      	mov	sp, r7
 801757a:	bd80      	pop	{r7, pc}
 801757c:	240392e8 	.word	0x240392e8
 8017580:	240392d8 	.word	0x240392d8
 8017584:	24000618 	.word	0x24000618

08017588 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b084      	sub	sp, #16
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
 8017590:	460b      	mov	r3, r1
 8017592:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017594:	2300      	movs	r3, #0
 8017596:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017598:	4b0d      	ldr	r3, [pc, #52]	@ (80175d0 <CDC_Transmit_FS+0x48>)
 801759a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801759e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80175a0:	68bb      	ldr	r3, [r7, #8]
 80175a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d001      	beq.n	80175ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80175aa:	2301      	movs	r3, #1
 80175ac:	e00b      	b.n	80175c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80175ae:	887b      	ldrh	r3, [r7, #2]
 80175b0:	461a      	mov	r2, r3
 80175b2:	6879      	ldr	r1, [r7, #4]
 80175b4:	4806      	ldr	r0, [pc, #24]	@ (80175d0 <CDC_Transmit_FS+0x48>)
 80175b6:	f7fe fb2b 	bl	8015c10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80175ba:	4805      	ldr	r0, [pc, #20]	@ (80175d0 <CDC_Transmit_FS+0x48>)
 80175bc:	f7fe fb68 	bl	8015c90 <USBD_CDC_TransmitPacket>
 80175c0:	4603      	mov	r3, r0
 80175c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80175c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3710      	adds	r7, #16
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bd80      	pop	{r7, pc}
 80175ce:	bf00      	nop
 80175d0:	240392e8 	.word	0x240392e8

080175d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80175d4:	b480      	push	{r7}
 80175d6:	b087      	sub	sp, #28
 80175d8:	af00      	add	r7, sp, #0
 80175da:	60f8      	str	r0, [r7, #12]
 80175dc:	60b9      	str	r1, [r7, #8]
 80175de:	4613      	mov	r3, r2
 80175e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80175e2:	2300      	movs	r3, #0
 80175e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80175e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80175ea:	4618      	mov	r0, r3
 80175ec:	371c      	adds	r7, #28
 80175ee:	46bd      	mov	sp, r7
 80175f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f4:	4770      	bx	lr
	...

080175f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175f8:	b480      	push	{r7}
 80175fa:	b083      	sub	sp, #12
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	4603      	mov	r3, r0
 8017600:	6039      	str	r1, [r7, #0]
 8017602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	2212      	movs	r2, #18
 8017608:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801760a:	4b03      	ldr	r3, [pc, #12]	@ (8017618 <USBD_FS_DeviceDescriptor+0x20>)
}
 801760c:	4618      	mov	r0, r3
 801760e:	370c      	adds	r7, #12
 8017610:	46bd      	mov	sp, r7
 8017612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017616:	4770      	bx	lr
 8017618:	240000d4 	.word	0x240000d4

0801761c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801761c:	b480      	push	{r7}
 801761e:	b083      	sub	sp, #12
 8017620:	af00      	add	r7, sp, #0
 8017622:	4603      	mov	r3, r0
 8017624:	6039      	str	r1, [r7, #0]
 8017626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017628:	683b      	ldr	r3, [r7, #0]
 801762a:	2204      	movs	r2, #4
 801762c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801762e:	4b03      	ldr	r3, [pc, #12]	@ (801763c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017630:	4618      	mov	r0, r3
 8017632:	370c      	adds	r7, #12
 8017634:	46bd      	mov	sp, r7
 8017636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763a:	4770      	bx	lr
 801763c:	240000e8 	.word	0x240000e8

08017640 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b082      	sub	sp, #8
 8017644:	af00      	add	r7, sp, #0
 8017646:	4603      	mov	r3, r0
 8017648:	6039      	str	r1, [r7, #0]
 801764a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801764c:	79fb      	ldrb	r3, [r7, #7]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d105      	bne.n	801765e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017652:	683a      	ldr	r2, [r7, #0]
 8017654:	4907      	ldr	r1, [pc, #28]	@ (8017674 <USBD_FS_ProductStrDescriptor+0x34>)
 8017656:	4808      	ldr	r0, [pc, #32]	@ (8017678 <USBD_FS_ProductStrDescriptor+0x38>)
 8017658:	f7ff fdd0 	bl	80171fc <USBD_GetString>
 801765c:	e004      	b.n	8017668 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801765e:	683a      	ldr	r2, [r7, #0]
 8017660:	4904      	ldr	r1, [pc, #16]	@ (8017674 <USBD_FS_ProductStrDescriptor+0x34>)
 8017662:	4805      	ldr	r0, [pc, #20]	@ (8017678 <USBD_FS_ProductStrDescriptor+0x38>)
 8017664:	f7ff fdca 	bl	80171fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8017668:	4b02      	ldr	r3, [pc, #8]	@ (8017674 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801766a:	4618      	mov	r0, r3
 801766c:	3708      	adds	r7, #8
 801766e:	46bd      	mov	sp, r7
 8017670:	bd80      	pop	{r7, pc}
 8017672:	bf00      	nop
 8017674:	2403a5c8 	.word	0x2403a5c8
 8017678:	08018874 	.word	0x08018874

0801767c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b082      	sub	sp, #8
 8017680:	af00      	add	r7, sp, #0
 8017682:	4603      	mov	r3, r0
 8017684:	6039      	str	r1, [r7, #0]
 8017686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017688:	683a      	ldr	r2, [r7, #0]
 801768a:	4904      	ldr	r1, [pc, #16]	@ (801769c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801768c:	4804      	ldr	r0, [pc, #16]	@ (80176a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801768e:	f7ff fdb5 	bl	80171fc <USBD_GetString>
  return USBD_StrDesc;
 8017692:	4b02      	ldr	r3, [pc, #8]	@ (801769c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017694:	4618      	mov	r0, r3
 8017696:	3708      	adds	r7, #8
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}
 801769c:	2403a5c8 	.word	0x2403a5c8
 80176a0:	0801888c 	.word	0x0801888c

080176a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b082      	sub	sp, #8
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	4603      	mov	r3, r0
 80176ac:	6039      	str	r1, [r7, #0]
 80176ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80176b0:	683b      	ldr	r3, [r7, #0]
 80176b2:	221a      	movs	r2, #26
 80176b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80176b6:	f000 f843 	bl	8017740 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80176ba:	4b02      	ldr	r3, [pc, #8]	@ (80176c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80176bc:	4618      	mov	r0, r3
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}
 80176c4:	240000ec 	.word	0x240000ec

080176c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b082      	sub	sp, #8
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	4603      	mov	r3, r0
 80176d0:	6039      	str	r1, [r7, #0]
 80176d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80176d4:	79fb      	ldrb	r3, [r7, #7]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d105      	bne.n	80176e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80176da:	683a      	ldr	r2, [r7, #0]
 80176dc:	4907      	ldr	r1, [pc, #28]	@ (80176fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80176de:	4808      	ldr	r0, [pc, #32]	@ (8017700 <USBD_FS_ConfigStrDescriptor+0x38>)
 80176e0:	f7ff fd8c 	bl	80171fc <USBD_GetString>
 80176e4:	e004      	b.n	80176f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80176e6:	683a      	ldr	r2, [r7, #0]
 80176e8:	4904      	ldr	r1, [pc, #16]	@ (80176fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80176ea:	4805      	ldr	r0, [pc, #20]	@ (8017700 <USBD_FS_ConfigStrDescriptor+0x38>)
 80176ec:	f7ff fd86 	bl	80171fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80176f0:	4b02      	ldr	r3, [pc, #8]	@ (80176fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80176f2:	4618      	mov	r0, r3
 80176f4:	3708      	adds	r7, #8
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}
 80176fa:	bf00      	nop
 80176fc:	2403a5c8 	.word	0x2403a5c8
 8017700:	080188a0 	.word	0x080188a0

08017704 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b082      	sub	sp, #8
 8017708:	af00      	add	r7, sp, #0
 801770a:	4603      	mov	r3, r0
 801770c:	6039      	str	r1, [r7, #0]
 801770e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017710:	79fb      	ldrb	r3, [r7, #7]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d105      	bne.n	8017722 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017716:	683a      	ldr	r2, [r7, #0]
 8017718:	4907      	ldr	r1, [pc, #28]	@ (8017738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801771a:	4808      	ldr	r0, [pc, #32]	@ (801773c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801771c:	f7ff fd6e 	bl	80171fc <USBD_GetString>
 8017720:	e004      	b.n	801772c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017722:	683a      	ldr	r2, [r7, #0]
 8017724:	4904      	ldr	r1, [pc, #16]	@ (8017738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017726:	4805      	ldr	r0, [pc, #20]	@ (801773c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017728:	f7ff fd68 	bl	80171fc <USBD_GetString>
  }
  return USBD_StrDesc;
 801772c:	4b02      	ldr	r3, [pc, #8]	@ (8017738 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801772e:	4618      	mov	r0, r3
 8017730:	3708      	adds	r7, #8
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}
 8017736:	bf00      	nop
 8017738:	2403a5c8 	.word	0x2403a5c8
 801773c:	080188ac 	.word	0x080188ac

08017740 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b084      	sub	sp, #16
 8017744:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017746:	4b0f      	ldr	r3, [pc, #60]	@ (8017784 <Get_SerialNum+0x44>)
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801774c:	4b0e      	ldr	r3, [pc, #56]	@ (8017788 <Get_SerialNum+0x48>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017752:	4b0e      	ldr	r3, [pc, #56]	@ (801778c <Get_SerialNum+0x4c>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017758:	68fa      	ldr	r2, [r7, #12]
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	4413      	add	r3, r2
 801775e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d009      	beq.n	801777a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017766:	2208      	movs	r2, #8
 8017768:	4909      	ldr	r1, [pc, #36]	@ (8017790 <Get_SerialNum+0x50>)
 801776a:	68f8      	ldr	r0, [r7, #12]
 801776c:	f000 f814 	bl	8017798 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017770:	2204      	movs	r2, #4
 8017772:	4908      	ldr	r1, [pc, #32]	@ (8017794 <Get_SerialNum+0x54>)
 8017774:	68b8      	ldr	r0, [r7, #8]
 8017776:	f000 f80f 	bl	8017798 <IntToUnicode>
  }
}
 801777a:	bf00      	nop
 801777c:	3710      	adds	r7, #16
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}
 8017782:	bf00      	nop
 8017784:	1ff1e800 	.word	0x1ff1e800
 8017788:	1ff1e804 	.word	0x1ff1e804
 801778c:	1ff1e808 	.word	0x1ff1e808
 8017790:	240000ee 	.word	0x240000ee
 8017794:	240000fe 	.word	0x240000fe

08017798 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017798:	b480      	push	{r7}
 801779a:	b087      	sub	sp, #28
 801779c:	af00      	add	r7, sp, #0
 801779e:	60f8      	str	r0, [r7, #12]
 80177a0:	60b9      	str	r1, [r7, #8]
 80177a2:	4613      	mov	r3, r2
 80177a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80177a6:	2300      	movs	r3, #0
 80177a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80177aa:	2300      	movs	r3, #0
 80177ac:	75fb      	strb	r3, [r7, #23]
 80177ae:	e027      	b.n	8017800 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	0f1b      	lsrs	r3, r3, #28
 80177b4:	2b09      	cmp	r3, #9
 80177b6:	d80b      	bhi.n	80177d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	0f1b      	lsrs	r3, r3, #28
 80177bc:	b2da      	uxtb	r2, r3
 80177be:	7dfb      	ldrb	r3, [r7, #23]
 80177c0:	005b      	lsls	r3, r3, #1
 80177c2:	4619      	mov	r1, r3
 80177c4:	68bb      	ldr	r3, [r7, #8]
 80177c6:	440b      	add	r3, r1
 80177c8:	3230      	adds	r2, #48	@ 0x30
 80177ca:	b2d2      	uxtb	r2, r2
 80177cc:	701a      	strb	r2, [r3, #0]
 80177ce:	e00a      	b.n	80177e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	0f1b      	lsrs	r3, r3, #28
 80177d4:	b2da      	uxtb	r2, r3
 80177d6:	7dfb      	ldrb	r3, [r7, #23]
 80177d8:	005b      	lsls	r3, r3, #1
 80177da:	4619      	mov	r1, r3
 80177dc:	68bb      	ldr	r3, [r7, #8]
 80177de:	440b      	add	r3, r1
 80177e0:	3237      	adds	r2, #55	@ 0x37
 80177e2:	b2d2      	uxtb	r2, r2
 80177e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	011b      	lsls	r3, r3, #4
 80177ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80177ec:	7dfb      	ldrb	r3, [r7, #23]
 80177ee:	005b      	lsls	r3, r3, #1
 80177f0:	3301      	adds	r3, #1
 80177f2:	68ba      	ldr	r2, [r7, #8]
 80177f4:	4413      	add	r3, r2
 80177f6:	2200      	movs	r2, #0
 80177f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80177fa:	7dfb      	ldrb	r3, [r7, #23]
 80177fc:	3301      	adds	r3, #1
 80177fe:	75fb      	strb	r3, [r7, #23]
 8017800:	7dfa      	ldrb	r2, [r7, #23]
 8017802:	79fb      	ldrb	r3, [r7, #7]
 8017804:	429a      	cmp	r2, r3
 8017806:	d3d3      	bcc.n	80177b0 <IntToUnicode+0x18>
  }
}
 8017808:	bf00      	nop
 801780a:	bf00      	nop
 801780c:	371c      	adds	r7, #28
 801780e:	46bd      	mov	sp, r7
 8017810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017814:	4770      	bx	lr
	...

08017818 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b0ba      	sub	sp, #232	@ 0xe8
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017820:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017824:	2200      	movs	r2, #0
 8017826:	601a      	str	r2, [r3, #0]
 8017828:	605a      	str	r2, [r3, #4]
 801782a:	609a      	str	r2, [r3, #8]
 801782c:	60da      	str	r2, [r3, #12]
 801782e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017830:	f107 0310 	add.w	r3, r7, #16
 8017834:	22c0      	movs	r2, #192	@ 0xc0
 8017836:	2100      	movs	r1, #0
 8017838:	4618      	mov	r0, r3
 801783a:	f000 fb47 	bl	8017ecc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	4a2c      	ldr	r2, [pc, #176]	@ (80178f4 <HAL_PCD_MspInit+0xdc>)
 8017844:	4293      	cmp	r3, r2
 8017846:	d151      	bne.n	80178ec <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017848:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801784c:	f04f 0300 	mov.w	r3, #0
 8017850:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8017854:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801785c:	f107 0310 	add.w	r3, r7, #16
 8017860:	4618      	mov	r0, r3
 8017862:	f7f6 fdcb 	bl	800e3fc <HAL_RCCEx_PeriphCLKConfig>
 8017866:	4603      	mov	r3, r0
 8017868:	2b00      	cmp	r3, #0
 801786a:	d001      	beq.n	8017870 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801786c:	f7e9 ff18 	bl	80016a0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017870:	f7f5 fdce 	bl	800d410 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017874:	4b20      	ldr	r3, [pc, #128]	@ (80178f8 <HAL_PCD_MspInit+0xe0>)
 8017876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801787a:	4a1f      	ldr	r2, [pc, #124]	@ (80178f8 <HAL_PCD_MspInit+0xe0>)
 801787c:	f043 0301 	orr.w	r3, r3, #1
 8017880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017884:	4b1c      	ldr	r3, [pc, #112]	@ (80178f8 <HAL_PCD_MspInit+0xe0>)
 8017886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801788a:	f003 0301 	and.w	r3, r3, #1
 801788e:	60fb      	str	r3, [r7, #12]
 8017890:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017892:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017896:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801789a:	2302      	movs	r3, #2
 801789c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178a0:	2300      	movs	r3, #0
 80178a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80178a6:	2300      	movs	r3, #0
 80178a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80178ac:	230a      	movs	r3, #10
 80178ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80178b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80178b6:	4619      	mov	r1, r3
 80178b8:	4810      	ldr	r0, [pc, #64]	@ (80178fc <HAL_PCD_MspInit+0xe4>)
 80178ba:	f7ef fa1b 	bl	8006cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80178be:	4b0e      	ldr	r3, [pc, #56]	@ (80178f8 <HAL_PCD_MspInit+0xe0>)
 80178c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80178c4:	4a0c      	ldr	r2, [pc, #48]	@ (80178f8 <HAL_PCD_MspInit+0xe0>)
 80178c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80178ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80178ce:	4b0a      	ldr	r3, [pc, #40]	@ (80178f8 <HAL_PCD_MspInit+0xe0>)
 80178d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80178d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80178d8:	60bb      	str	r3, [r7, #8]
 80178da:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80178dc:	2200      	movs	r2, #0
 80178de:	2100      	movs	r1, #0
 80178e0:	2065      	movs	r0, #101	@ 0x65
 80178e2:	f7ec fb04 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80178e6:	2065      	movs	r0, #101	@ 0x65
 80178e8:	f7ec fb1b 	bl	8003f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80178ec:	bf00      	nop
 80178ee:	37e8      	adds	r7, #232	@ 0xe8
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}
 80178f4:	40080000 	.word	0x40080000
 80178f8:	58024400 	.word	0x58024400
 80178fc:	58020000 	.word	0x58020000

08017900 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b082      	sub	sp, #8
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017914:	4619      	mov	r1, r3
 8017916:	4610      	mov	r0, r2
 8017918:	f7fe fae3 	bl	8015ee2 <USBD_LL_SetupStage>
}
 801791c:	bf00      	nop
 801791e:	3708      	adds	r7, #8
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}

08017924 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b082      	sub	sp, #8
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	460b      	mov	r3, r1
 801792e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017936:	78fa      	ldrb	r2, [r7, #3]
 8017938:	6879      	ldr	r1, [r7, #4]
 801793a:	4613      	mov	r3, r2
 801793c:	00db      	lsls	r3, r3, #3
 801793e:	4413      	add	r3, r2
 8017940:	009b      	lsls	r3, r3, #2
 8017942:	440b      	add	r3, r1
 8017944:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017948:	681a      	ldr	r2, [r3, #0]
 801794a:	78fb      	ldrb	r3, [r7, #3]
 801794c:	4619      	mov	r1, r3
 801794e:	f7fe fb1d 	bl	8015f8c <USBD_LL_DataOutStage>
}
 8017952:	bf00      	nop
 8017954:	3708      	adds	r7, #8
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}

0801795a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801795a:	b580      	push	{r7, lr}
 801795c:	b082      	sub	sp, #8
 801795e:	af00      	add	r7, sp, #0
 8017960:	6078      	str	r0, [r7, #4]
 8017962:	460b      	mov	r3, r1
 8017964:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801796c:	78fa      	ldrb	r2, [r7, #3]
 801796e:	6879      	ldr	r1, [r7, #4]
 8017970:	4613      	mov	r3, r2
 8017972:	00db      	lsls	r3, r3, #3
 8017974:	4413      	add	r3, r2
 8017976:	009b      	lsls	r3, r3, #2
 8017978:	440b      	add	r3, r1
 801797a:	3320      	adds	r3, #32
 801797c:	681a      	ldr	r2, [r3, #0]
 801797e:	78fb      	ldrb	r3, [r7, #3]
 8017980:	4619      	mov	r1, r3
 8017982:	f7fe fbb6 	bl	80160f2 <USBD_LL_DataInStage>
}
 8017986:	bf00      	nop
 8017988:	3708      	adds	r7, #8
 801798a:	46bd      	mov	sp, r7
 801798c:	bd80      	pop	{r7, pc}

0801798e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801798e:	b580      	push	{r7, lr}
 8017990:	b082      	sub	sp, #8
 8017992:	af00      	add	r7, sp, #0
 8017994:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801799c:	4618      	mov	r0, r3
 801799e:	f7fe fcf0 	bl	8016382 <USBD_LL_SOF>
}
 80179a2:	bf00      	nop
 80179a4:	3708      	adds	r7, #8
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd80      	pop	{r7, pc}

080179aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179aa:	b580      	push	{r7, lr}
 80179ac:	b084      	sub	sp, #16
 80179ae:	af00      	add	r7, sp, #0
 80179b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80179b2:	2301      	movs	r3, #1
 80179b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	79db      	ldrb	r3, [r3, #7]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d102      	bne.n	80179c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80179be:	2300      	movs	r3, #0
 80179c0:	73fb      	strb	r3, [r7, #15]
 80179c2:	e008      	b.n	80179d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	79db      	ldrb	r3, [r3, #7]
 80179c8:	2b02      	cmp	r3, #2
 80179ca:	d102      	bne.n	80179d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80179cc:	2301      	movs	r3, #1
 80179ce:	73fb      	strb	r3, [r7, #15]
 80179d0:	e001      	b.n	80179d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80179d2:	f7e9 fe65 	bl	80016a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80179dc:	7bfa      	ldrb	r2, [r7, #15]
 80179de:	4611      	mov	r1, r2
 80179e0:	4618      	mov	r0, r3
 80179e2:	f7fe fc8a 	bl	80162fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7fe fc32 	bl	8016256 <USBD_LL_Reset>
}
 80179f2:	bf00      	nop
 80179f4:	3710      	adds	r7, #16
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}
	...

080179fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b082      	sub	sp, #8
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f7fe fc85 	bl	801631a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	687a      	ldr	r2, [r7, #4]
 8017a1c:	6812      	ldr	r2, [r2, #0]
 8017a1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017a22:	f043 0301 	orr.w	r3, r3, #1
 8017a26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	7adb      	ldrb	r3, [r3, #11]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d005      	beq.n	8017a3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017a30:	4b04      	ldr	r3, [pc, #16]	@ (8017a44 <HAL_PCD_SuspendCallback+0x48>)
 8017a32:	691b      	ldr	r3, [r3, #16]
 8017a34:	4a03      	ldr	r2, [pc, #12]	@ (8017a44 <HAL_PCD_SuspendCallback+0x48>)
 8017a36:	f043 0306 	orr.w	r3, r3, #6
 8017a3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017a3c:	bf00      	nop
 8017a3e:	3708      	adds	r7, #8
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}
 8017a44:	e000ed00 	.word	0xe000ed00

08017a48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b082      	sub	sp, #8
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017a56:	4618      	mov	r0, r3
 8017a58:	f7fe fc7b 	bl	8016352 <USBD_LL_Resume>
}
 8017a5c:	bf00      	nop
 8017a5e:	3708      	adds	r7, #8
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}

08017a64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b082      	sub	sp, #8
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	460b      	mov	r3, r1
 8017a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017a76:	78fa      	ldrb	r2, [r7, #3]
 8017a78:	4611      	mov	r1, r2
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	f7fe fcd3 	bl	8016426 <USBD_LL_IsoOUTIncomplete>
}
 8017a80:	bf00      	nop
 8017a82:	3708      	adds	r7, #8
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}

08017a88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b082      	sub	sp, #8
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	6078      	str	r0, [r7, #4]
 8017a90:	460b      	mov	r3, r1
 8017a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017a9a:	78fa      	ldrb	r2, [r7, #3]
 8017a9c:	4611      	mov	r1, r2
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f7fe fc8f 	bl	80163c2 <USBD_LL_IsoINIncomplete>
}
 8017aa4:	bf00      	nop
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7fe fce5 	bl	801648a <USBD_LL_DevConnected>
}
 8017ac0:	bf00      	nop
 8017ac2:	3708      	adds	r7, #8
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}

08017ac8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b082      	sub	sp, #8
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7fe fce2 	bl	80164a0 <USBD_LL_DevDisconnected>
}
 8017adc:	bf00      	nop
 8017ade:	3708      	adds	r7, #8
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	bd80      	pop	{r7, pc}

08017ae4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b082      	sub	sp, #8
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	781b      	ldrb	r3, [r3, #0]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d13e      	bne.n	8017b72 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017af4:	4a21      	ldr	r2, [pc, #132]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	4a1f      	ldr	r2, [pc, #124]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b00:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017b04:	4b1d      	ldr	r3, [pc, #116]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b06:	4a1e      	ldr	r2, [pc, #120]	@ (8017b80 <USBD_LL_Init+0x9c>)
 8017b08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8017b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b0c:	2209      	movs	r2, #9
 8017b0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017b10:	4b1a      	ldr	r3, [pc, #104]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b12:	2202      	movs	r2, #2
 8017b14:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017b16:	4b19      	ldr	r3, [pc, #100]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b18:	2200      	movs	r2, #0
 8017b1a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017b1c:	4b17      	ldr	r3, [pc, #92]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b1e:	2202      	movs	r2, #2
 8017b20:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017b22:	4b16      	ldr	r3, [pc, #88]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b24:	2200      	movs	r2, #0
 8017b26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017b28:	4b14      	ldr	r3, [pc, #80]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017b2e:	4b13      	ldr	r3, [pc, #76]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b30:	2200      	movs	r2, #0
 8017b32:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8017b34:	4b11      	ldr	r3, [pc, #68]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b36:	2200      	movs	r2, #0
 8017b38:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017b3a:	4b10      	ldr	r3, [pc, #64]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017b40:	4b0e      	ldr	r3, [pc, #56]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b42:	2200      	movs	r2, #0
 8017b44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017b46:	480d      	ldr	r0, [pc, #52]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b48:	f7f4 f988 	bl	800be5c <HAL_PCD_Init>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d001      	beq.n	8017b56 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017b52:	f7e9 fda5 	bl	80016a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017b56:	2180      	movs	r1, #128	@ 0x80
 8017b58:	4808      	ldr	r0, [pc, #32]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b5a:	f7f5 fbde 	bl	800d31a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017b5e:	2240      	movs	r2, #64	@ 0x40
 8017b60:	2100      	movs	r1, #0
 8017b62:	4806      	ldr	r0, [pc, #24]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b64:	f7f5 fb92 	bl	800d28c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017b68:	2280      	movs	r2, #128	@ 0x80
 8017b6a:	2101      	movs	r1, #1
 8017b6c:	4803      	ldr	r0, [pc, #12]	@ (8017b7c <USBD_LL_Init+0x98>)
 8017b6e:	f7f5 fb8d 	bl	800d28c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8017b72:	2300      	movs	r3, #0
}
 8017b74:	4618      	mov	r0, r3
 8017b76:	3708      	adds	r7, #8
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	bd80      	pop	{r7, pc}
 8017b7c:	2403a7c8 	.word	0x2403a7c8
 8017b80:	40080000 	.word	0x40080000

08017b84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b084      	sub	sp, #16
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b90:	2300      	movs	r3, #0
 8017b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f7f4 fa6a 	bl	800c074 <HAL_PCD_Start>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ba4:	7bfb      	ldrb	r3, [r7, #15]
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f000 f942 	bl	8017e30 <USBD_Get_USB_Status>
 8017bac:	4603      	mov	r3, r0
 8017bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3710      	adds	r7, #16
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}

08017bba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017bba:	b580      	push	{r7, lr}
 8017bbc:	b084      	sub	sp, #16
 8017bbe:	af00      	add	r7, sp, #0
 8017bc0:	6078      	str	r0, [r7, #4]
 8017bc2:	4608      	mov	r0, r1
 8017bc4:	4611      	mov	r1, r2
 8017bc6:	461a      	mov	r2, r3
 8017bc8:	4603      	mov	r3, r0
 8017bca:	70fb      	strb	r3, [r7, #3]
 8017bcc:	460b      	mov	r3, r1
 8017bce:	70bb      	strb	r3, [r7, #2]
 8017bd0:	4613      	mov	r3, r2
 8017bd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bd8:	2300      	movs	r3, #0
 8017bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017be2:	78bb      	ldrb	r3, [r7, #2]
 8017be4:	883a      	ldrh	r2, [r7, #0]
 8017be6:	78f9      	ldrb	r1, [r7, #3]
 8017be8:	f7f4 ff6b 	bl	800cac2 <HAL_PCD_EP_Open>
 8017bec:	4603      	mov	r3, r0
 8017bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bf0:	7bfb      	ldrb	r3, [r7, #15]
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f000 f91c 	bl	8017e30 <USBD_Get_USB_Status>
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bfe:	4618      	mov	r0, r3
 8017c00:	3710      	adds	r7, #16
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}

08017c06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c06:	b580      	push	{r7, lr}
 8017c08:	b084      	sub	sp, #16
 8017c0a:	af00      	add	r7, sp, #0
 8017c0c:	6078      	str	r0, [r7, #4]
 8017c0e:	460b      	mov	r3, r1
 8017c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c12:	2300      	movs	r3, #0
 8017c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c16:	2300      	movs	r3, #0
 8017c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017c20:	78fa      	ldrb	r2, [r7, #3]
 8017c22:	4611      	mov	r1, r2
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7f4 ffb6 	bl	800cb96 <HAL_PCD_EP_Close>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c2e:	7bfb      	ldrb	r3, [r7, #15]
 8017c30:	4618      	mov	r0, r3
 8017c32:	f000 f8fd 	bl	8017e30 <USBD_Get_USB_Status>
 8017c36:	4603      	mov	r3, r0
 8017c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	3710      	adds	r7, #16
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}

08017c44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b084      	sub	sp, #16
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
 8017c4c:	460b      	mov	r3, r1
 8017c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c50:	2300      	movs	r3, #0
 8017c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c54:	2300      	movs	r3, #0
 8017c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017c5e:	78fa      	ldrb	r2, [r7, #3]
 8017c60:	4611      	mov	r1, r2
 8017c62:	4618      	mov	r0, r3
 8017c64:	f7f5 f86e 	bl	800cd44 <HAL_PCD_EP_SetStall>
 8017c68:	4603      	mov	r3, r0
 8017c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c6c:	7bfb      	ldrb	r3, [r7, #15]
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f000 f8de 	bl	8017e30 <USBD_Get_USB_Status>
 8017c74:	4603      	mov	r3, r0
 8017c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	3710      	adds	r7, #16
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	bd80      	pop	{r7, pc}

08017c82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c82:	b580      	push	{r7, lr}
 8017c84:	b084      	sub	sp, #16
 8017c86:	af00      	add	r7, sp, #0
 8017c88:	6078      	str	r0, [r7, #4]
 8017c8a:	460b      	mov	r3, r1
 8017c8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c92:	2300      	movs	r3, #0
 8017c94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017c9c:	78fa      	ldrb	r2, [r7, #3]
 8017c9e:	4611      	mov	r1, r2
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	f7f5 f8b2 	bl	800ce0a <HAL_PCD_EP_ClrStall>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017caa:	7bfb      	ldrb	r3, [r7, #15]
 8017cac:	4618      	mov	r0, r3
 8017cae:	f000 f8bf 	bl	8017e30 <USBD_Get_USB_Status>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3710      	adds	r7, #16
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}

08017cc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017cc0:	b480      	push	{r7}
 8017cc2:	b085      	sub	sp, #20
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
 8017cc8:	460b      	mov	r3, r1
 8017cca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017cd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	da0b      	bge.n	8017cf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017cdc:	78fb      	ldrb	r3, [r7, #3]
 8017cde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017ce2:	68f9      	ldr	r1, [r7, #12]
 8017ce4:	4613      	mov	r3, r2
 8017ce6:	00db      	lsls	r3, r3, #3
 8017ce8:	4413      	add	r3, r2
 8017cea:	009b      	lsls	r3, r3, #2
 8017cec:	440b      	add	r3, r1
 8017cee:	3316      	adds	r3, #22
 8017cf0:	781b      	ldrb	r3, [r3, #0]
 8017cf2:	e00b      	b.n	8017d0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017cf4:	78fb      	ldrb	r3, [r7, #3]
 8017cf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017cfa:	68f9      	ldr	r1, [r7, #12]
 8017cfc:	4613      	mov	r3, r2
 8017cfe:	00db      	lsls	r3, r3, #3
 8017d00:	4413      	add	r3, r2
 8017d02:	009b      	lsls	r3, r3, #2
 8017d04:	440b      	add	r3, r1
 8017d06:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8017d0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	3714      	adds	r7, #20
 8017d10:	46bd      	mov	sp, r7
 8017d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d16:	4770      	bx	lr

08017d18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b084      	sub	sp, #16
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
 8017d20:	460b      	mov	r3, r1
 8017d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d24:	2300      	movs	r3, #0
 8017d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d28:	2300      	movs	r3, #0
 8017d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017d32:	78fa      	ldrb	r2, [r7, #3]
 8017d34:	4611      	mov	r1, r2
 8017d36:	4618      	mov	r0, r3
 8017d38:	f7f4 fe9f 	bl	800ca7a <HAL_PCD_SetAddress>
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d40:	7bfb      	ldrb	r3, [r7, #15]
 8017d42:	4618      	mov	r0, r3
 8017d44:	f000 f874 	bl	8017e30 <USBD_Get_USB_Status>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d4e:	4618      	mov	r0, r3
 8017d50:	3710      	adds	r7, #16
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}

08017d56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d56:	b580      	push	{r7, lr}
 8017d58:	b086      	sub	sp, #24
 8017d5a:	af00      	add	r7, sp, #0
 8017d5c:	60f8      	str	r0, [r7, #12]
 8017d5e:	607a      	str	r2, [r7, #4]
 8017d60:	603b      	str	r3, [r7, #0]
 8017d62:	460b      	mov	r3, r1
 8017d64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d66:	2300      	movs	r3, #0
 8017d68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017d74:	7af9      	ldrb	r1, [r7, #11]
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	687a      	ldr	r2, [r7, #4]
 8017d7a:	f7f4 ffa9 	bl	800ccd0 <HAL_PCD_EP_Transmit>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d82:	7dfb      	ldrb	r3, [r7, #23]
 8017d84:	4618      	mov	r0, r3
 8017d86:	f000 f853 	bl	8017e30 <USBD_Get_USB_Status>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017d8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017d90:	4618      	mov	r0, r3
 8017d92:	3718      	adds	r7, #24
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bd80      	pop	{r7, pc}

08017d98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b086      	sub	sp, #24
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	60f8      	str	r0, [r7, #12]
 8017da0:	607a      	str	r2, [r7, #4]
 8017da2:	603b      	str	r3, [r7, #0]
 8017da4:	460b      	mov	r3, r1
 8017da6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017da8:	2300      	movs	r3, #0
 8017daa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017dac:	2300      	movs	r3, #0
 8017dae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017db6:	7af9      	ldrb	r1, [r7, #11]
 8017db8:	683b      	ldr	r3, [r7, #0]
 8017dba:	687a      	ldr	r2, [r7, #4]
 8017dbc:	f7f4 ff35 	bl	800cc2a <HAL_PCD_EP_Receive>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dc4:	7dfb      	ldrb	r3, [r7, #23]
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f000 f832 	bl	8017e30 <USBD_Get_USB_Status>
 8017dcc:	4603      	mov	r3, r0
 8017dce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017dd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	3718      	adds	r7, #24
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bd80      	pop	{r7, pc}

08017dda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017dda:	b580      	push	{r7, lr}
 8017ddc:	b082      	sub	sp, #8
 8017dde:	af00      	add	r7, sp, #0
 8017de0:	6078      	str	r0, [r7, #4]
 8017de2:	460b      	mov	r3, r1
 8017de4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017dec:	78fa      	ldrb	r2, [r7, #3]
 8017dee:	4611      	mov	r1, r2
 8017df0:	4618      	mov	r0, r3
 8017df2:	f7f4 ff55 	bl	800cca0 <HAL_PCD_EP_GetRxCount>
 8017df6:	4603      	mov	r3, r0
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	3708      	adds	r7, #8
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}

08017e00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017e00:	b480      	push	{r7}
 8017e02:	b083      	sub	sp, #12
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017e08:	4b03      	ldr	r3, [pc, #12]	@ (8017e18 <USBD_static_malloc+0x18>)
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	370c      	adds	r7, #12
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e14:	4770      	bx	lr
 8017e16:	bf00      	nop
 8017e18:	2403acac 	.word	0x2403acac

08017e1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017e1c:	b480      	push	{r7}
 8017e1e:	b083      	sub	sp, #12
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017e24:	bf00      	nop
 8017e26:	370c      	adds	r7, #12
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2e:	4770      	bx	lr

08017e30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017e30:	b480      	push	{r7}
 8017e32:	b085      	sub	sp, #20
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	4603      	mov	r3, r0
 8017e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017e3e:	79fb      	ldrb	r3, [r7, #7]
 8017e40:	2b03      	cmp	r3, #3
 8017e42:	d817      	bhi.n	8017e74 <USBD_Get_USB_Status+0x44>
 8017e44:	a201      	add	r2, pc, #4	@ (adr r2, 8017e4c <USBD_Get_USB_Status+0x1c>)
 8017e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e4a:	bf00      	nop
 8017e4c:	08017e5d 	.word	0x08017e5d
 8017e50:	08017e63 	.word	0x08017e63
 8017e54:	08017e69 	.word	0x08017e69
 8017e58:	08017e6f 	.word	0x08017e6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8017e60:	e00b      	b.n	8017e7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017e62:	2303      	movs	r3, #3
 8017e64:	73fb      	strb	r3, [r7, #15]
    break;
 8017e66:	e008      	b.n	8017e7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017e68:	2301      	movs	r3, #1
 8017e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8017e6c:	e005      	b.n	8017e7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017e6e:	2303      	movs	r3, #3
 8017e70:	73fb      	strb	r3, [r7, #15]
    break;
 8017e72:	e002      	b.n	8017e7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017e74:	2303      	movs	r3, #3
 8017e76:	73fb      	strb	r3, [r7, #15]
    break;
 8017e78:	bf00      	nop
  }
  return usb_status;
 8017e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3714      	adds	r7, #20
 8017e80:	46bd      	mov	sp, r7
 8017e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e86:	4770      	bx	lr

08017e88 <siprintf>:
 8017e88:	b40e      	push	{r1, r2, r3}
 8017e8a:	b510      	push	{r4, lr}
 8017e8c:	b09d      	sub	sp, #116	@ 0x74
 8017e8e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8017e90:	9002      	str	r0, [sp, #8]
 8017e92:	9006      	str	r0, [sp, #24]
 8017e94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017e98:	480a      	ldr	r0, [pc, #40]	@ (8017ec4 <siprintf+0x3c>)
 8017e9a:	9107      	str	r1, [sp, #28]
 8017e9c:	9104      	str	r1, [sp, #16]
 8017e9e:	490a      	ldr	r1, [pc, #40]	@ (8017ec8 <siprintf+0x40>)
 8017ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ea4:	9105      	str	r1, [sp, #20]
 8017ea6:	2400      	movs	r4, #0
 8017ea8:	a902      	add	r1, sp, #8
 8017eaa:	6800      	ldr	r0, [r0, #0]
 8017eac:	9301      	str	r3, [sp, #4]
 8017eae:	941b      	str	r4, [sp, #108]	@ 0x6c
 8017eb0:	f000 f9a2 	bl	80181f8 <_svfiprintf_r>
 8017eb4:	9b02      	ldr	r3, [sp, #8]
 8017eb6:	701c      	strb	r4, [r3, #0]
 8017eb8:	b01d      	add	sp, #116	@ 0x74
 8017eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ebe:	b003      	add	sp, #12
 8017ec0:	4770      	bx	lr
 8017ec2:	bf00      	nop
 8017ec4:	24000108 	.word	0x24000108
 8017ec8:	ffff0208 	.word	0xffff0208

08017ecc <memset>:
 8017ecc:	4402      	add	r2, r0
 8017ece:	4603      	mov	r3, r0
 8017ed0:	4293      	cmp	r3, r2
 8017ed2:	d100      	bne.n	8017ed6 <memset+0xa>
 8017ed4:	4770      	bx	lr
 8017ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8017eda:	e7f9      	b.n	8017ed0 <memset+0x4>

08017edc <__errno>:
 8017edc:	4b01      	ldr	r3, [pc, #4]	@ (8017ee4 <__errno+0x8>)
 8017ede:	6818      	ldr	r0, [r3, #0]
 8017ee0:	4770      	bx	lr
 8017ee2:	bf00      	nop
 8017ee4:	24000108 	.word	0x24000108

08017ee8 <__libc_init_array>:
 8017ee8:	b570      	push	{r4, r5, r6, lr}
 8017eea:	4d0d      	ldr	r5, [pc, #52]	@ (8017f20 <__libc_init_array+0x38>)
 8017eec:	4c0d      	ldr	r4, [pc, #52]	@ (8017f24 <__libc_init_array+0x3c>)
 8017eee:	1b64      	subs	r4, r4, r5
 8017ef0:	10a4      	asrs	r4, r4, #2
 8017ef2:	2600      	movs	r6, #0
 8017ef4:	42a6      	cmp	r6, r4
 8017ef6:	d109      	bne.n	8017f0c <__libc_init_array+0x24>
 8017ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8017f28 <__libc_init_array+0x40>)
 8017efa:	4c0c      	ldr	r4, [pc, #48]	@ (8017f2c <__libc_init_array+0x44>)
 8017efc:	f000 fc64 	bl	80187c8 <_init>
 8017f00:	1b64      	subs	r4, r4, r5
 8017f02:	10a4      	asrs	r4, r4, #2
 8017f04:	2600      	movs	r6, #0
 8017f06:	42a6      	cmp	r6, r4
 8017f08:	d105      	bne.n	8017f16 <__libc_init_array+0x2e>
 8017f0a:	bd70      	pop	{r4, r5, r6, pc}
 8017f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f10:	4798      	blx	r3
 8017f12:	3601      	adds	r6, #1
 8017f14:	e7ee      	b.n	8017ef4 <__libc_init_array+0xc>
 8017f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f1a:	4798      	blx	r3
 8017f1c:	3601      	adds	r6, #1
 8017f1e:	e7f2      	b.n	8017f06 <__libc_init_array+0x1e>
 8017f20:	08018e50 	.word	0x08018e50
 8017f24:	08018e50 	.word	0x08018e50
 8017f28:	08018e50 	.word	0x08018e50
 8017f2c:	08018e54 	.word	0x08018e54

08017f30 <__retarget_lock_acquire_recursive>:
 8017f30:	4770      	bx	lr

08017f32 <__retarget_lock_release_recursive>:
 8017f32:	4770      	bx	lr

08017f34 <memcpy>:
 8017f34:	440a      	add	r2, r1
 8017f36:	4291      	cmp	r1, r2
 8017f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8017f3c:	d100      	bne.n	8017f40 <memcpy+0xc>
 8017f3e:	4770      	bx	lr
 8017f40:	b510      	push	{r4, lr}
 8017f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017f4a:	4291      	cmp	r1, r2
 8017f4c:	d1f9      	bne.n	8017f42 <memcpy+0xe>
 8017f4e:	bd10      	pop	{r4, pc}

08017f50 <_free_r>:
 8017f50:	b538      	push	{r3, r4, r5, lr}
 8017f52:	4605      	mov	r5, r0
 8017f54:	2900      	cmp	r1, #0
 8017f56:	d041      	beq.n	8017fdc <_free_r+0x8c>
 8017f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f5c:	1f0c      	subs	r4, r1, #4
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	bfb8      	it	lt
 8017f62:	18e4      	addlt	r4, r4, r3
 8017f64:	f000 f8e0 	bl	8018128 <__malloc_lock>
 8017f68:	4a1d      	ldr	r2, [pc, #116]	@ (8017fe0 <_free_r+0x90>)
 8017f6a:	6813      	ldr	r3, [r2, #0]
 8017f6c:	b933      	cbnz	r3, 8017f7c <_free_r+0x2c>
 8017f6e:	6063      	str	r3, [r4, #4]
 8017f70:	6014      	str	r4, [r2, #0]
 8017f72:	4628      	mov	r0, r5
 8017f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f78:	f000 b8dc 	b.w	8018134 <__malloc_unlock>
 8017f7c:	42a3      	cmp	r3, r4
 8017f7e:	d908      	bls.n	8017f92 <_free_r+0x42>
 8017f80:	6820      	ldr	r0, [r4, #0]
 8017f82:	1821      	adds	r1, r4, r0
 8017f84:	428b      	cmp	r3, r1
 8017f86:	bf01      	itttt	eq
 8017f88:	6819      	ldreq	r1, [r3, #0]
 8017f8a:	685b      	ldreq	r3, [r3, #4]
 8017f8c:	1809      	addeq	r1, r1, r0
 8017f8e:	6021      	streq	r1, [r4, #0]
 8017f90:	e7ed      	b.n	8017f6e <_free_r+0x1e>
 8017f92:	461a      	mov	r2, r3
 8017f94:	685b      	ldr	r3, [r3, #4]
 8017f96:	b10b      	cbz	r3, 8017f9c <_free_r+0x4c>
 8017f98:	42a3      	cmp	r3, r4
 8017f9a:	d9fa      	bls.n	8017f92 <_free_r+0x42>
 8017f9c:	6811      	ldr	r1, [r2, #0]
 8017f9e:	1850      	adds	r0, r2, r1
 8017fa0:	42a0      	cmp	r0, r4
 8017fa2:	d10b      	bne.n	8017fbc <_free_r+0x6c>
 8017fa4:	6820      	ldr	r0, [r4, #0]
 8017fa6:	4401      	add	r1, r0
 8017fa8:	1850      	adds	r0, r2, r1
 8017faa:	4283      	cmp	r3, r0
 8017fac:	6011      	str	r1, [r2, #0]
 8017fae:	d1e0      	bne.n	8017f72 <_free_r+0x22>
 8017fb0:	6818      	ldr	r0, [r3, #0]
 8017fb2:	685b      	ldr	r3, [r3, #4]
 8017fb4:	6053      	str	r3, [r2, #4]
 8017fb6:	4408      	add	r0, r1
 8017fb8:	6010      	str	r0, [r2, #0]
 8017fba:	e7da      	b.n	8017f72 <_free_r+0x22>
 8017fbc:	d902      	bls.n	8017fc4 <_free_r+0x74>
 8017fbe:	230c      	movs	r3, #12
 8017fc0:	602b      	str	r3, [r5, #0]
 8017fc2:	e7d6      	b.n	8017f72 <_free_r+0x22>
 8017fc4:	6820      	ldr	r0, [r4, #0]
 8017fc6:	1821      	adds	r1, r4, r0
 8017fc8:	428b      	cmp	r3, r1
 8017fca:	bf04      	itt	eq
 8017fcc:	6819      	ldreq	r1, [r3, #0]
 8017fce:	685b      	ldreq	r3, [r3, #4]
 8017fd0:	6063      	str	r3, [r4, #4]
 8017fd2:	bf04      	itt	eq
 8017fd4:	1809      	addeq	r1, r1, r0
 8017fd6:	6021      	streq	r1, [r4, #0]
 8017fd8:	6054      	str	r4, [r2, #4]
 8017fda:	e7ca      	b.n	8017f72 <_free_r+0x22>
 8017fdc:	bd38      	pop	{r3, r4, r5, pc}
 8017fde:	bf00      	nop
 8017fe0:	2403b010 	.word	0x2403b010

08017fe4 <sbrk_aligned>:
 8017fe4:	b570      	push	{r4, r5, r6, lr}
 8017fe6:	4e0f      	ldr	r6, [pc, #60]	@ (8018024 <sbrk_aligned+0x40>)
 8017fe8:	460c      	mov	r4, r1
 8017fea:	6831      	ldr	r1, [r6, #0]
 8017fec:	4605      	mov	r5, r0
 8017fee:	b911      	cbnz	r1, 8017ff6 <sbrk_aligned+0x12>
 8017ff0:	f000 fba4 	bl	801873c <_sbrk_r>
 8017ff4:	6030      	str	r0, [r6, #0]
 8017ff6:	4621      	mov	r1, r4
 8017ff8:	4628      	mov	r0, r5
 8017ffa:	f000 fb9f 	bl	801873c <_sbrk_r>
 8017ffe:	1c43      	adds	r3, r0, #1
 8018000:	d103      	bne.n	801800a <sbrk_aligned+0x26>
 8018002:	f04f 34ff 	mov.w	r4, #4294967295
 8018006:	4620      	mov	r0, r4
 8018008:	bd70      	pop	{r4, r5, r6, pc}
 801800a:	1cc4      	adds	r4, r0, #3
 801800c:	f024 0403 	bic.w	r4, r4, #3
 8018010:	42a0      	cmp	r0, r4
 8018012:	d0f8      	beq.n	8018006 <sbrk_aligned+0x22>
 8018014:	1a21      	subs	r1, r4, r0
 8018016:	4628      	mov	r0, r5
 8018018:	f000 fb90 	bl	801873c <_sbrk_r>
 801801c:	3001      	adds	r0, #1
 801801e:	d1f2      	bne.n	8018006 <sbrk_aligned+0x22>
 8018020:	e7ef      	b.n	8018002 <sbrk_aligned+0x1e>
 8018022:	bf00      	nop
 8018024:	2403b00c 	.word	0x2403b00c

08018028 <_malloc_r>:
 8018028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801802c:	1ccd      	adds	r5, r1, #3
 801802e:	f025 0503 	bic.w	r5, r5, #3
 8018032:	3508      	adds	r5, #8
 8018034:	2d0c      	cmp	r5, #12
 8018036:	bf38      	it	cc
 8018038:	250c      	movcc	r5, #12
 801803a:	2d00      	cmp	r5, #0
 801803c:	4606      	mov	r6, r0
 801803e:	db01      	blt.n	8018044 <_malloc_r+0x1c>
 8018040:	42a9      	cmp	r1, r5
 8018042:	d904      	bls.n	801804e <_malloc_r+0x26>
 8018044:	230c      	movs	r3, #12
 8018046:	6033      	str	r3, [r6, #0]
 8018048:	2000      	movs	r0, #0
 801804a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801804e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018124 <_malloc_r+0xfc>
 8018052:	f000 f869 	bl	8018128 <__malloc_lock>
 8018056:	f8d8 3000 	ldr.w	r3, [r8]
 801805a:	461c      	mov	r4, r3
 801805c:	bb44      	cbnz	r4, 80180b0 <_malloc_r+0x88>
 801805e:	4629      	mov	r1, r5
 8018060:	4630      	mov	r0, r6
 8018062:	f7ff ffbf 	bl	8017fe4 <sbrk_aligned>
 8018066:	1c43      	adds	r3, r0, #1
 8018068:	4604      	mov	r4, r0
 801806a:	d158      	bne.n	801811e <_malloc_r+0xf6>
 801806c:	f8d8 4000 	ldr.w	r4, [r8]
 8018070:	4627      	mov	r7, r4
 8018072:	2f00      	cmp	r7, #0
 8018074:	d143      	bne.n	80180fe <_malloc_r+0xd6>
 8018076:	2c00      	cmp	r4, #0
 8018078:	d04b      	beq.n	8018112 <_malloc_r+0xea>
 801807a:	6823      	ldr	r3, [r4, #0]
 801807c:	4639      	mov	r1, r7
 801807e:	4630      	mov	r0, r6
 8018080:	eb04 0903 	add.w	r9, r4, r3
 8018084:	f000 fb5a 	bl	801873c <_sbrk_r>
 8018088:	4581      	cmp	r9, r0
 801808a:	d142      	bne.n	8018112 <_malloc_r+0xea>
 801808c:	6821      	ldr	r1, [r4, #0]
 801808e:	1a6d      	subs	r5, r5, r1
 8018090:	4629      	mov	r1, r5
 8018092:	4630      	mov	r0, r6
 8018094:	f7ff ffa6 	bl	8017fe4 <sbrk_aligned>
 8018098:	3001      	adds	r0, #1
 801809a:	d03a      	beq.n	8018112 <_malloc_r+0xea>
 801809c:	6823      	ldr	r3, [r4, #0]
 801809e:	442b      	add	r3, r5
 80180a0:	6023      	str	r3, [r4, #0]
 80180a2:	f8d8 3000 	ldr.w	r3, [r8]
 80180a6:	685a      	ldr	r2, [r3, #4]
 80180a8:	bb62      	cbnz	r2, 8018104 <_malloc_r+0xdc>
 80180aa:	f8c8 7000 	str.w	r7, [r8]
 80180ae:	e00f      	b.n	80180d0 <_malloc_r+0xa8>
 80180b0:	6822      	ldr	r2, [r4, #0]
 80180b2:	1b52      	subs	r2, r2, r5
 80180b4:	d420      	bmi.n	80180f8 <_malloc_r+0xd0>
 80180b6:	2a0b      	cmp	r2, #11
 80180b8:	d917      	bls.n	80180ea <_malloc_r+0xc2>
 80180ba:	1961      	adds	r1, r4, r5
 80180bc:	42a3      	cmp	r3, r4
 80180be:	6025      	str	r5, [r4, #0]
 80180c0:	bf18      	it	ne
 80180c2:	6059      	strne	r1, [r3, #4]
 80180c4:	6863      	ldr	r3, [r4, #4]
 80180c6:	bf08      	it	eq
 80180c8:	f8c8 1000 	streq.w	r1, [r8]
 80180cc:	5162      	str	r2, [r4, r5]
 80180ce:	604b      	str	r3, [r1, #4]
 80180d0:	4630      	mov	r0, r6
 80180d2:	f000 f82f 	bl	8018134 <__malloc_unlock>
 80180d6:	f104 000b 	add.w	r0, r4, #11
 80180da:	1d23      	adds	r3, r4, #4
 80180dc:	f020 0007 	bic.w	r0, r0, #7
 80180e0:	1ac2      	subs	r2, r0, r3
 80180e2:	bf1c      	itt	ne
 80180e4:	1a1b      	subne	r3, r3, r0
 80180e6:	50a3      	strne	r3, [r4, r2]
 80180e8:	e7af      	b.n	801804a <_malloc_r+0x22>
 80180ea:	6862      	ldr	r2, [r4, #4]
 80180ec:	42a3      	cmp	r3, r4
 80180ee:	bf0c      	ite	eq
 80180f0:	f8c8 2000 	streq.w	r2, [r8]
 80180f4:	605a      	strne	r2, [r3, #4]
 80180f6:	e7eb      	b.n	80180d0 <_malloc_r+0xa8>
 80180f8:	4623      	mov	r3, r4
 80180fa:	6864      	ldr	r4, [r4, #4]
 80180fc:	e7ae      	b.n	801805c <_malloc_r+0x34>
 80180fe:	463c      	mov	r4, r7
 8018100:	687f      	ldr	r7, [r7, #4]
 8018102:	e7b6      	b.n	8018072 <_malloc_r+0x4a>
 8018104:	461a      	mov	r2, r3
 8018106:	685b      	ldr	r3, [r3, #4]
 8018108:	42a3      	cmp	r3, r4
 801810a:	d1fb      	bne.n	8018104 <_malloc_r+0xdc>
 801810c:	2300      	movs	r3, #0
 801810e:	6053      	str	r3, [r2, #4]
 8018110:	e7de      	b.n	80180d0 <_malloc_r+0xa8>
 8018112:	230c      	movs	r3, #12
 8018114:	6033      	str	r3, [r6, #0]
 8018116:	4630      	mov	r0, r6
 8018118:	f000 f80c 	bl	8018134 <__malloc_unlock>
 801811c:	e794      	b.n	8018048 <_malloc_r+0x20>
 801811e:	6005      	str	r5, [r0, #0]
 8018120:	e7d6      	b.n	80180d0 <_malloc_r+0xa8>
 8018122:	bf00      	nop
 8018124:	2403b010 	.word	0x2403b010

08018128 <__malloc_lock>:
 8018128:	4801      	ldr	r0, [pc, #4]	@ (8018130 <__malloc_lock+0x8>)
 801812a:	f7ff bf01 	b.w	8017f30 <__retarget_lock_acquire_recursive>
 801812e:	bf00      	nop
 8018130:	2403b008 	.word	0x2403b008

08018134 <__malloc_unlock>:
 8018134:	4801      	ldr	r0, [pc, #4]	@ (801813c <__malloc_unlock+0x8>)
 8018136:	f7ff befc 	b.w	8017f32 <__retarget_lock_release_recursive>
 801813a:	bf00      	nop
 801813c:	2403b008 	.word	0x2403b008

08018140 <__ssputs_r>:
 8018140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018144:	688e      	ldr	r6, [r1, #8]
 8018146:	461f      	mov	r7, r3
 8018148:	42be      	cmp	r6, r7
 801814a:	680b      	ldr	r3, [r1, #0]
 801814c:	4682      	mov	sl, r0
 801814e:	460c      	mov	r4, r1
 8018150:	4690      	mov	r8, r2
 8018152:	d82d      	bhi.n	80181b0 <__ssputs_r+0x70>
 8018154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018158:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801815c:	d026      	beq.n	80181ac <__ssputs_r+0x6c>
 801815e:	6965      	ldr	r5, [r4, #20]
 8018160:	6909      	ldr	r1, [r1, #16]
 8018162:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018166:	eba3 0901 	sub.w	r9, r3, r1
 801816a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801816e:	1c7b      	adds	r3, r7, #1
 8018170:	444b      	add	r3, r9
 8018172:	106d      	asrs	r5, r5, #1
 8018174:	429d      	cmp	r5, r3
 8018176:	bf38      	it	cc
 8018178:	461d      	movcc	r5, r3
 801817a:	0553      	lsls	r3, r2, #21
 801817c:	d527      	bpl.n	80181ce <__ssputs_r+0x8e>
 801817e:	4629      	mov	r1, r5
 8018180:	f7ff ff52 	bl	8018028 <_malloc_r>
 8018184:	4606      	mov	r6, r0
 8018186:	b360      	cbz	r0, 80181e2 <__ssputs_r+0xa2>
 8018188:	6921      	ldr	r1, [r4, #16]
 801818a:	464a      	mov	r2, r9
 801818c:	f7ff fed2 	bl	8017f34 <memcpy>
 8018190:	89a3      	ldrh	r3, [r4, #12]
 8018192:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801819a:	81a3      	strh	r3, [r4, #12]
 801819c:	6126      	str	r6, [r4, #16]
 801819e:	6165      	str	r5, [r4, #20]
 80181a0:	444e      	add	r6, r9
 80181a2:	eba5 0509 	sub.w	r5, r5, r9
 80181a6:	6026      	str	r6, [r4, #0]
 80181a8:	60a5      	str	r5, [r4, #8]
 80181aa:	463e      	mov	r6, r7
 80181ac:	42be      	cmp	r6, r7
 80181ae:	d900      	bls.n	80181b2 <__ssputs_r+0x72>
 80181b0:	463e      	mov	r6, r7
 80181b2:	6820      	ldr	r0, [r4, #0]
 80181b4:	4632      	mov	r2, r6
 80181b6:	4641      	mov	r1, r8
 80181b8:	f000 faa6 	bl	8018708 <memmove>
 80181bc:	68a3      	ldr	r3, [r4, #8]
 80181be:	1b9b      	subs	r3, r3, r6
 80181c0:	60a3      	str	r3, [r4, #8]
 80181c2:	6823      	ldr	r3, [r4, #0]
 80181c4:	4433      	add	r3, r6
 80181c6:	6023      	str	r3, [r4, #0]
 80181c8:	2000      	movs	r0, #0
 80181ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ce:	462a      	mov	r2, r5
 80181d0:	f000 fac4 	bl	801875c <_realloc_r>
 80181d4:	4606      	mov	r6, r0
 80181d6:	2800      	cmp	r0, #0
 80181d8:	d1e0      	bne.n	801819c <__ssputs_r+0x5c>
 80181da:	6921      	ldr	r1, [r4, #16]
 80181dc:	4650      	mov	r0, sl
 80181de:	f7ff feb7 	bl	8017f50 <_free_r>
 80181e2:	230c      	movs	r3, #12
 80181e4:	f8ca 3000 	str.w	r3, [sl]
 80181e8:	89a3      	ldrh	r3, [r4, #12]
 80181ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80181ee:	81a3      	strh	r3, [r4, #12]
 80181f0:	f04f 30ff 	mov.w	r0, #4294967295
 80181f4:	e7e9      	b.n	80181ca <__ssputs_r+0x8a>
	...

080181f8 <_svfiprintf_r>:
 80181f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181fc:	4698      	mov	r8, r3
 80181fe:	898b      	ldrh	r3, [r1, #12]
 8018200:	061b      	lsls	r3, r3, #24
 8018202:	b09d      	sub	sp, #116	@ 0x74
 8018204:	4607      	mov	r7, r0
 8018206:	460d      	mov	r5, r1
 8018208:	4614      	mov	r4, r2
 801820a:	d510      	bpl.n	801822e <_svfiprintf_r+0x36>
 801820c:	690b      	ldr	r3, [r1, #16]
 801820e:	b973      	cbnz	r3, 801822e <_svfiprintf_r+0x36>
 8018210:	2140      	movs	r1, #64	@ 0x40
 8018212:	f7ff ff09 	bl	8018028 <_malloc_r>
 8018216:	6028      	str	r0, [r5, #0]
 8018218:	6128      	str	r0, [r5, #16]
 801821a:	b930      	cbnz	r0, 801822a <_svfiprintf_r+0x32>
 801821c:	230c      	movs	r3, #12
 801821e:	603b      	str	r3, [r7, #0]
 8018220:	f04f 30ff 	mov.w	r0, #4294967295
 8018224:	b01d      	add	sp, #116	@ 0x74
 8018226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801822a:	2340      	movs	r3, #64	@ 0x40
 801822c:	616b      	str	r3, [r5, #20]
 801822e:	2300      	movs	r3, #0
 8018230:	9309      	str	r3, [sp, #36]	@ 0x24
 8018232:	2320      	movs	r3, #32
 8018234:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018238:	f8cd 800c 	str.w	r8, [sp, #12]
 801823c:	2330      	movs	r3, #48	@ 0x30
 801823e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80183dc <_svfiprintf_r+0x1e4>
 8018242:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018246:	f04f 0901 	mov.w	r9, #1
 801824a:	4623      	mov	r3, r4
 801824c:	469a      	mov	sl, r3
 801824e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018252:	b10a      	cbz	r2, 8018258 <_svfiprintf_r+0x60>
 8018254:	2a25      	cmp	r2, #37	@ 0x25
 8018256:	d1f9      	bne.n	801824c <_svfiprintf_r+0x54>
 8018258:	ebba 0b04 	subs.w	fp, sl, r4
 801825c:	d00b      	beq.n	8018276 <_svfiprintf_r+0x7e>
 801825e:	465b      	mov	r3, fp
 8018260:	4622      	mov	r2, r4
 8018262:	4629      	mov	r1, r5
 8018264:	4638      	mov	r0, r7
 8018266:	f7ff ff6b 	bl	8018140 <__ssputs_r>
 801826a:	3001      	adds	r0, #1
 801826c:	f000 80a7 	beq.w	80183be <_svfiprintf_r+0x1c6>
 8018270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018272:	445a      	add	r2, fp
 8018274:	9209      	str	r2, [sp, #36]	@ 0x24
 8018276:	f89a 3000 	ldrb.w	r3, [sl]
 801827a:	2b00      	cmp	r3, #0
 801827c:	f000 809f 	beq.w	80183be <_svfiprintf_r+0x1c6>
 8018280:	2300      	movs	r3, #0
 8018282:	f04f 32ff 	mov.w	r2, #4294967295
 8018286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801828a:	f10a 0a01 	add.w	sl, sl, #1
 801828e:	9304      	str	r3, [sp, #16]
 8018290:	9307      	str	r3, [sp, #28]
 8018292:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018296:	931a      	str	r3, [sp, #104]	@ 0x68
 8018298:	4654      	mov	r4, sl
 801829a:	2205      	movs	r2, #5
 801829c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182a0:	484e      	ldr	r0, [pc, #312]	@ (80183dc <_svfiprintf_r+0x1e4>)
 80182a2:	f7e8 f825 	bl	80002f0 <memchr>
 80182a6:	9a04      	ldr	r2, [sp, #16]
 80182a8:	b9d8      	cbnz	r0, 80182e2 <_svfiprintf_r+0xea>
 80182aa:	06d0      	lsls	r0, r2, #27
 80182ac:	bf44      	itt	mi
 80182ae:	2320      	movmi	r3, #32
 80182b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80182b4:	0711      	lsls	r1, r2, #28
 80182b6:	bf44      	itt	mi
 80182b8:	232b      	movmi	r3, #43	@ 0x2b
 80182ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80182be:	f89a 3000 	ldrb.w	r3, [sl]
 80182c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80182c4:	d015      	beq.n	80182f2 <_svfiprintf_r+0xfa>
 80182c6:	9a07      	ldr	r2, [sp, #28]
 80182c8:	4654      	mov	r4, sl
 80182ca:	2000      	movs	r0, #0
 80182cc:	f04f 0c0a 	mov.w	ip, #10
 80182d0:	4621      	mov	r1, r4
 80182d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182d6:	3b30      	subs	r3, #48	@ 0x30
 80182d8:	2b09      	cmp	r3, #9
 80182da:	d94b      	bls.n	8018374 <_svfiprintf_r+0x17c>
 80182dc:	b1b0      	cbz	r0, 801830c <_svfiprintf_r+0x114>
 80182de:	9207      	str	r2, [sp, #28]
 80182e0:	e014      	b.n	801830c <_svfiprintf_r+0x114>
 80182e2:	eba0 0308 	sub.w	r3, r0, r8
 80182e6:	fa09 f303 	lsl.w	r3, r9, r3
 80182ea:	4313      	orrs	r3, r2
 80182ec:	9304      	str	r3, [sp, #16]
 80182ee:	46a2      	mov	sl, r4
 80182f0:	e7d2      	b.n	8018298 <_svfiprintf_r+0xa0>
 80182f2:	9b03      	ldr	r3, [sp, #12]
 80182f4:	1d19      	adds	r1, r3, #4
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	9103      	str	r1, [sp, #12]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	bfbb      	ittet	lt
 80182fe:	425b      	neglt	r3, r3
 8018300:	f042 0202 	orrlt.w	r2, r2, #2
 8018304:	9307      	strge	r3, [sp, #28]
 8018306:	9307      	strlt	r3, [sp, #28]
 8018308:	bfb8      	it	lt
 801830a:	9204      	strlt	r2, [sp, #16]
 801830c:	7823      	ldrb	r3, [r4, #0]
 801830e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018310:	d10a      	bne.n	8018328 <_svfiprintf_r+0x130>
 8018312:	7863      	ldrb	r3, [r4, #1]
 8018314:	2b2a      	cmp	r3, #42	@ 0x2a
 8018316:	d132      	bne.n	801837e <_svfiprintf_r+0x186>
 8018318:	9b03      	ldr	r3, [sp, #12]
 801831a:	1d1a      	adds	r2, r3, #4
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	9203      	str	r2, [sp, #12]
 8018320:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018324:	3402      	adds	r4, #2
 8018326:	9305      	str	r3, [sp, #20]
 8018328:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80183ec <_svfiprintf_r+0x1f4>
 801832c:	7821      	ldrb	r1, [r4, #0]
 801832e:	2203      	movs	r2, #3
 8018330:	4650      	mov	r0, sl
 8018332:	f7e7 ffdd 	bl	80002f0 <memchr>
 8018336:	b138      	cbz	r0, 8018348 <_svfiprintf_r+0x150>
 8018338:	9b04      	ldr	r3, [sp, #16]
 801833a:	eba0 000a 	sub.w	r0, r0, sl
 801833e:	2240      	movs	r2, #64	@ 0x40
 8018340:	4082      	lsls	r2, r0
 8018342:	4313      	orrs	r3, r2
 8018344:	3401      	adds	r4, #1
 8018346:	9304      	str	r3, [sp, #16]
 8018348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801834c:	4824      	ldr	r0, [pc, #144]	@ (80183e0 <_svfiprintf_r+0x1e8>)
 801834e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018352:	2206      	movs	r2, #6
 8018354:	f7e7 ffcc 	bl	80002f0 <memchr>
 8018358:	2800      	cmp	r0, #0
 801835a:	d036      	beq.n	80183ca <_svfiprintf_r+0x1d2>
 801835c:	4b21      	ldr	r3, [pc, #132]	@ (80183e4 <_svfiprintf_r+0x1ec>)
 801835e:	bb1b      	cbnz	r3, 80183a8 <_svfiprintf_r+0x1b0>
 8018360:	9b03      	ldr	r3, [sp, #12]
 8018362:	3307      	adds	r3, #7
 8018364:	f023 0307 	bic.w	r3, r3, #7
 8018368:	3308      	adds	r3, #8
 801836a:	9303      	str	r3, [sp, #12]
 801836c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801836e:	4433      	add	r3, r6
 8018370:	9309      	str	r3, [sp, #36]	@ 0x24
 8018372:	e76a      	b.n	801824a <_svfiprintf_r+0x52>
 8018374:	fb0c 3202 	mla	r2, ip, r2, r3
 8018378:	460c      	mov	r4, r1
 801837a:	2001      	movs	r0, #1
 801837c:	e7a8      	b.n	80182d0 <_svfiprintf_r+0xd8>
 801837e:	2300      	movs	r3, #0
 8018380:	3401      	adds	r4, #1
 8018382:	9305      	str	r3, [sp, #20]
 8018384:	4619      	mov	r1, r3
 8018386:	f04f 0c0a 	mov.w	ip, #10
 801838a:	4620      	mov	r0, r4
 801838c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018390:	3a30      	subs	r2, #48	@ 0x30
 8018392:	2a09      	cmp	r2, #9
 8018394:	d903      	bls.n	801839e <_svfiprintf_r+0x1a6>
 8018396:	2b00      	cmp	r3, #0
 8018398:	d0c6      	beq.n	8018328 <_svfiprintf_r+0x130>
 801839a:	9105      	str	r1, [sp, #20]
 801839c:	e7c4      	b.n	8018328 <_svfiprintf_r+0x130>
 801839e:	fb0c 2101 	mla	r1, ip, r1, r2
 80183a2:	4604      	mov	r4, r0
 80183a4:	2301      	movs	r3, #1
 80183a6:	e7f0      	b.n	801838a <_svfiprintf_r+0x192>
 80183a8:	ab03      	add	r3, sp, #12
 80183aa:	9300      	str	r3, [sp, #0]
 80183ac:	462a      	mov	r2, r5
 80183ae:	4b0e      	ldr	r3, [pc, #56]	@ (80183e8 <_svfiprintf_r+0x1f0>)
 80183b0:	a904      	add	r1, sp, #16
 80183b2:	4638      	mov	r0, r7
 80183b4:	f3af 8000 	nop.w
 80183b8:	1c42      	adds	r2, r0, #1
 80183ba:	4606      	mov	r6, r0
 80183bc:	d1d6      	bne.n	801836c <_svfiprintf_r+0x174>
 80183be:	89ab      	ldrh	r3, [r5, #12]
 80183c0:	065b      	lsls	r3, r3, #25
 80183c2:	f53f af2d 	bmi.w	8018220 <_svfiprintf_r+0x28>
 80183c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80183c8:	e72c      	b.n	8018224 <_svfiprintf_r+0x2c>
 80183ca:	ab03      	add	r3, sp, #12
 80183cc:	9300      	str	r3, [sp, #0]
 80183ce:	462a      	mov	r2, r5
 80183d0:	4b05      	ldr	r3, [pc, #20]	@ (80183e8 <_svfiprintf_r+0x1f0>)
 80183d2:	a904      	add	r1, sp, #16
 80183d4:	4638      	mov	r0, r7
 80183d6:	f000 f879 	bl	80184cc <_printf_i>
 80183da:	e7ed      	b.n	80183b8 <_svfiprintf_r+0x1c0>
 80183dc:	08018e14 	.word	0x08018e14
 80183e0:	08018e1e 	.word	0x08018e1e
 80183e4:	00000000 	.word	0x00000000
 80183e8:	08018141 	.word	0x08018141
 80183ec:	08018e1a 	.word	0x08018e1a

080183f0 <_printf_common>:
 80183f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183f4:	4616      	mov	r6, r2
 80183f6:	4698      	mov	r8, r3
 80183f8:	688a      	ldr	r2, [r1, #8]
 80183fa:	690b      	ldr	r3, [r1, #16]
 80183fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018400:	4293      	cmp	r3, r2
 8018402:	bfb8      	it	lt
 8018404:	4613      	movlt	r3, r2
 8018406:	6033      	str	r3, [r6, #0]
 8018408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801840c:	4607      	mov	r7, r0
 801840e:	460c      	mov	r4, r1
 8018410:	b10a      	cbz	r2, 8018416 <_printf_common+0x26>
 8018412:	3301      	adds	r3, #1
 8018414:	6033      	str	r3, [r6, #0]
 8018416:	6823      	ldr	r3, [r4, #0]
 8018418:	0699      	lsls	r1, r3, #26
 801841a:	bf42      	ittt	mi
 801841c:	6833      	ldrmi	r3, [r6, #0]
 801841e:	3302      	addmi	r3, #2
 8018420:	6033      	strmi	r3, [r6, #0]
 8018422:	6825      	ldr	r5, [r4, #0]
 8018424:	f015 0506 	ands.w	r5, r5, #6
 8018428:	d106      	bne.n	8018438 <_printf_common+0x48>
 801842a:	f104 0a19 	add.w	sl, r4, #25
 801842e:	68e3      	ldr	r3, [r4, #12]
 8018430:	6832      	ldr	r2, [r6, #0]
 8018432:	1a9b      	subs	r3, r3, r2
 8018434:	42ab      	cmp	r3, r5
 8018436:	dc26      	bgt.n	8018486 <_printf_common+0x96>
 8018438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801843c:	6822      	ldr	r2, [r4, #0]
 801843e:	3b00      	subs	r3, #0
 8018440:	bf18      	it	ne
 8018442:	2301      	movne	r3, #1
 8018444:	0692      	lsls	r2, r2, #26
 8018446:	d42b      	bmi.n	80184a0 <_printf_common+0xb0>
 8018448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801844c:	4641      	mov	r1, r8
 801844e:	4638      	mov	r0, r7
 8018450:	47c8      	blx	r9
 8018452:	3001      	adds	r0, #1
 8018454:	d01e      	beq.n	8018494 <_printf_common+0xa4>
 8018456:	6823      	ldr	r3, [r4, #0]
 8018458:	6922      	ldr	r2, [r4, #16]
 801845a:	f003 0306 	and.w	r3, r3, #6
 801845e:	2b04      	cmp	r3, #4
 8018460:	bf02      	ittt	eq
 8018462:	68e5      	ldreq	r5, [r4, #12]
 8018464:	6833      	ldreq	r3, [r6, #0]
 8018466:	1aed      	subeq	r5, r5, r3
 8018468:	68a3      	ldr	r3, [r4, #8]
 801846a:	bf0c      	ite	eq
 801846c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018470:	2500      	movne	r5, #0
 8018472:	4293      	cmp	r3, r2
 8018474:	bfc4      	itt	gt
 8018476:	1a9b      	subgt	r3, r3, r2
 8018478:	18ed      	addgt	r5, r5, r3
 801847a:	2600      	movs	r6, #0
 801847c:	341a      	adds	r4, #26
 801847e:	42b5      	cmp	r5, r6
 8018480:	d11a      	bne.n	80184b8 <_printf_common+0xc8>
 8018482:	2000      	movs	r0, #0
 8018484:	e008      	b.n	8018498 <_printf_common+0xa8>
 8018486:	2301      	movs	r3, #1
 8018488:	4652      	mov	r2, sl
 801848a:	4641      	mov	r1, r8
 801848c:	4638      	mov	r0, r7
 801848e:	47c8      	blx	r9
 8018490:	3001      	adds	r0, #1
 8018492:	d103      	bne.n	801849c <_printf_common+0xac>
 8018494:	f04f 30ff 	mov.w	r0, #4294967295
 8018498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801849c:	3501      	adds	r5, #1
 801849e:	e7c6      	b.n	801842e <_printf_common+0x3e>
 80184a0:	18e1      	adds	r1, r4, r3
 80184a2:	1c5a      	adds	r2, r3, #1
 80184a4:	2030      	movs	r0, #48	@ 0x30
 80184a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80184aa:	4422      	add	r2, r4
 80184ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80184b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80184b4:	3302      	adds	r3, #2
 80184b6:	e7c7      	b.n	8018448 <_printf_common+0x58>
 80184b8:	2301      	movs	r3, #1
 80184ba:	4622      	mov	r2, r4
 80184bc:	4641      	mov	r1, r8
 80184be:	4638      	mov	r0, r7
 80184c0:	47c8      	blx	r9
 80184c2:	3001      	adds	r0, #1
 80184c4:	d0e6      	beq.n	8018494 <_printf_common+0xa4>
 80184c6:	3601      	adds	r6, #1
 80184c8:	e7d9      	b.n	801847e <_printf_common+0x8e>
	...

080184cc <_printf_i>:
 80184cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80184d0:	7e0f      	ldrb	r7, [r1, #24]
 80184d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80184d4:	2f78      	cmp	r7, #120	@ 0x78
 80184d6:	4691      	mov	r9, r2
 80184d8:	4680      	mov	r8, r0
 80184da:	460c      	mov	r4, r1
 80184dc:	469a      	mov	sl, r3
 80184de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80184e2:	d807      	bhi.n	80184f4 <_printf_i+0x28>
 80184e4:	2f62      	cmp	r7, #98	@ 0x62
 80184e6:	d80a      	bhi.n	80184fe <_printf_i+0x32>
 80184e8:	2f00      	cmp	r7, #0
 80184ea:	f000 80d1 	beq.w	8018690 <_printf_i+0x1c4>
 80184ee:	2f58      	cmp	r7, #88	@ 0x58
 80184f0:	f000 80b8 	beq.w	8018664 <_printf_i+0x198>
 80184f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80184f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80184fc:	e03a      	b.n	8018574 <_printf_i+0xa8>
 80184fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018502:	2b15      	cmp	r3, #21
 8018504:	d8f6      	bhi.n	80184f4 <_printf_i+0x28>
 8018506:	a101      	add	r1, pc, #4	@ (adr r1, 801850c <_printf_i+0x40>)
 8018508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801850c:	08018565 	.word	0x08018565
 8018510:	08018579 	.word	0x08018579
 8018514:	080184f5 	.word	0x080184f5
 8018518:	080184f5 	.word	0x080184f5
 801851c:	080184f5 	.word	0x080184f5
 8018520:	080184f5 	.word	0x080184f5
 8018524:	08018579 	.word	0x08018579
 8018528:	080184f5 	.word	0x080184f5
 801852c:	080184f5 	.word	0x080184f5
 8018530:	080184f5 	.word	0x080184f5
 8018534:	080184f5 	.word	0x080184f5
 8018538:	08018677 	.word	0x08018677
 801853c:	080185a3 	.word	0x080185a3
 8018540:	08018631 	.word	0x08018631
 8018544:	080184f5 	.word	0x080184f5
 8018548:	080184f5 	.word	0x080184f5
 801854c:	08018699 	.word	0x08018699
 8018550:	080184f5 	.word	0x080184f5
 8018554:	080185a3 	.word	0x080185a3
 8018558:	080184f5 	.word	0x080184f5
 801855c:	080184f5 	.word	0x080184f5
 8018560:	08018639 	.word	0x08018639
 8018564:	6833      	ldr	r3, [r6, #0]
 8018566:	1d1a      	adds	r2, r3, #4
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	6032      	str	r2, [r6, #0]
 801856c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018574:	2301      	movs	r3, #1
 8018576:	e09c      	b.n	80186b2 <_printf_i+0x1e6>
 8018578:	6833      	ldr	r3, [r6, #0]
 801857a:	6820      	ldr	r0, [r4, #0]
 801857c:	1d19      	adds	r1, r3, #4
 801857e:	6031      	str	r1, [r6, #0]
 8018580:	0606      	lsls	r6, r0, #24
 8018582:	d501      	bpl.n	8018588 <_printf_i+0xbc>
 8018584:	681d      	ldr	r5, [r3, #0]
 8018586:	e003      	b.n	8018590 <_printf_i+0xc4>
 8018588:	0645      	lsls	r5, r0, #25
 801858a:	d5fb      	bpl.n	8018584 <_printf_i+0xb8>
 801858c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018590:	2d00      	cmp	r5, #0
 8018592:	da03      	bge.n	801859c <_printf_i+0xd0>
 8018594:	232d      	movs	r3, #45	@ 0x2d
 8018596:	426d      	negs	r5, r5
 8018598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801859c:	4858      	ldr	r0, [pc, #352]	@ (8018700 <_printf_i+0x234>)
 801859e:	230a      	movs	r3, #10
 80185a0:	e011      	b.n	80185c6 <_printf_i+0xfa>
 80185a2:	6821      	ldr	r1, [r4, #0]
 80185a4:	6833      	ldr	r3, [r6, #0]
 80185a6:	0608      	lsls	r0, r1, #24
 80185a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80185ac:	d402      	bmi.n	80185b4 <_printf_i+0xe8>
 80185ae:	0649      	lsls	r1, r1, #25
 80185b0:	bf48      	it	mi
 80185b2:	b2ad      	uxthmi	r5, r5
 80185b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80185b6:	4852      	ldr	r0, [pc, #328]	@ (8018700 <_printf_i+0x234>)
 80185b8:	6033      	str	r3, [r6, #0]
 80185ba:	bf14      	ite	ne
 80185bc:	230a      	movne	r3, #10
 80185be:	2308      	moveq	r3, #8
 80185c0:	2100      	movs	r1, #0
 80185c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80185c6:	6866      	ldr	r6, [r4, #4]
 80185c8:	60a6      	str	r6, [r4, #8]
 80185ca:	2e00      	cmp	r6, #0
 80185cc:	db05      	blt.n	80185da <_printf_i+0x10e>
 80185ce:	6821      	ldr	r1, [r4, #0]
 80185d0:	432e      	orrs	r6, r5
 80185d2:	f021 0104 	bic.w	r1, r1, #4
 80185d6:	6021      	str	r1, [r4, #0]
 80185d8:	d04b      	beq.n	8018672 <_printf_i+0x1a6>
 80185da:	4616      	mov	r6, r2
 80185dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80185e0:	fb03 5711 	mls	r7, r3, r1, r5
 80185e4:	5dc7      	ldrb	r7, [r0, r7]
 80185e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80185ea:	462f      	mov	r7, r5
 80185ec:	42bb      	cmp	r3, r7
 80185ee:	460d      	mov	r5, r1
 80185f0:	d9f4      	bls.n	80185dc <_printf_i+0x110>
 80185f2:	2b08      	cmp	r3, #8
 80185f4:	d10b      	bne.n	801860e <_printf_i+0x142>
 80185f6:	6823      	ldr	r3, [r4, #0]
 80185f8:	07df      	lsls	r7, r3, #31
 80185fa:	d508      	bpl.n	801860e <_printf_i+0x142>
 80185fc:	6923      	ldr	r3, [r4, #16]
 80185fe:	6861      	ldr	r1, [r4, #4]
 8018600:	4299      	cmp	r1, r3
 8018602:	bfde      	ittt	le
 8018604:	2330      	movle	r3, #48	@ 0x30
 8018606:	f806 3c01 	strble.w	r3, [r6, #-1]
 801860a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801860e:	1b92      	subs	r2, r2, r6
 8018610:	6122      	str	r2, [r4, #16]
 8018612:	f8cd a000 	str.w	sl, [sp]
 8018616:	464b      	mov	r3, r9
 8018618:	aa03      	add	r2, sp, #12
 801861a:	4621      	mov	r1, r4
 801861c:	4640      	mov	r0, r8
 801861e:	f7ff fee7 	bl	80183f0 <_printf_common>
 8018622:	3001      	adds	r0, #1
 8018624:	d14a      	bne.n	80186bc <_printf_i+0x1f0>
 8018626:	f04f 30ff 	mov.w	r0, #4294967295
 801862a:	b004      	add	sp, #16
 801862c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018630:	6823      	ldr	r3, [r4, #0]
 8018632:	f043 0320 	orr.w	r3, r3, #32
 8018636:	6023      	str	r3, [r4, #0]
 8018638:	4832      	ldr	r0, [pc, #200]	@ (8018704 <_printf_i+0x238>)
 801863a:	2778      	movs	r7, #120	@ 0x78
 801863c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018640:	6823      	ldr	r3, [r4, #0]
 8018642:	6831      	ldr	r1, [r6, #0]
 8018644:	061f      	lsls	r7, r3, #24
 8018646:	f851 5b04 	ldr.w	r5, [r1], #4
 801864a:	d402      	bmi.n	8018652 <_printf_i+0x186>
 801864c:	065f      	lsls	r7, r3, #25
 801864e:	bf48      	it	mi
 8018650:	b2ad      	uxthmi	r5, r5
 8018652:	6031      	str	r1, [r6, #0]
 8018654:	07d9      	lsls	r1, r3, #31
 8018656:	bf44      	itt	mi
 8018658:	f043 0320 	orrmi.w	r3, r3, #32
 801865c:	6023      	strmi	r3, [r4, #0]
 801865e:	b11d      	cbz	r5, 8018668 <_printf_i+0x19c>
 8018660:	2310      	movs	r3, #16
 8018662:	e7ad      	b.n	80185c0 <_printf_i+0xf4>
 8018664:	4826      	ldr	r0, [pc, #152]	@ (8018700 <_printf_i+0x234>)
 8018666:	e7e9      	b.n	801863c <_printf_i+0x170>
 8018668:	6823      	ldr	r3, [r4, #0]
 801866a:	f023 0320 	bic.w	r3, r3, #32
 801866e:	6023      	str	r3, [r4, #0]
 8018670:	e7f6      	b.n	8018660 <_printf_i+0x194>
 8018672:	4616      	mov	r6, r2
 8018674:	e7bd      	b.n	80185f2 <_printf_i+0x126>
 8018676:	6833      	ldr	r3, [r6, #0]
 8018678:	6825      	ldr	r5, [r4, #0]
 801867a:	6961      	ldr	r1, [r4, #20]
 801867c:	1d18      	adds	r0, r3, #4
 801867e:	6030      	str	r0, [r6, #0]
 8018680:	062e      	lsls	r6, r5, #24
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	d501      	bpl.n	801868a <_printf_i+0x1be>
 8018686:	6019      	str	r1, [r3, #0]
 8018688:	e002      	b.n	8018690 <_printf_i+0x1c4>
 801868a:	0668      	lsls	r0, r5, #25
 801868c:	d5fb      	bpl.n	8018686 <_printf_i+0x1ba>
 801868e:	8019      	strh	r1, [r3, #0]
 8018690:	2300      	movs	r3, #0
 8018692:	6123      	str	r3, [r4, #16]
 8018694:	4616      	mov	r6, r2
 8018696:	e7bc      	b.n	8018612 <_printf_i+0x146>
 8018698:	6833      	ldr	r3, [r6, #0]
 801869a:	1d1a      	adds	r2, r3, #4
 801869c:	6032      	str	r2, [r6, #0]
 801869e:	681e      	ldr	r6, [r3, #0]
 80186a0:	6862      	ldr	r2, [r4, #4]
 80186a2:	2100      	movs	r1, #0
 80186a4:	4630      	mov	r0, r6
 80186a6:	f7e7 fe23 	bl	80002f0 <memchr>
 80186aa:	b108      	cbz	r0, 80186b0 <_printf_i+0x1e4>
 80186ac:	1b80      	subs	r0, r0, r6
 80186ae:	6060      	str	r0, [r4, #4]
 80186b0:	6863      	ldr	r3, [r4, #4]
 80186b2:	6123      	str	r3, [r4, #16]
 80186b4:	2300      	movs	r3, #0
 80186b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80186ba:	e7aa      	b.n	8018612 <_printf_i+0x146>
 80186bc:	6923      	ldr	r3, [r4, #16]
 80186be:	4632      	mov	r2, r6
 80186c0:	4649      	mov	r1, r9
 80186c2:	4640      	mov	r0, r8
 80186c4:	47d0      	blx	sl
 80186c6:	3001      	adds	r0, #1
 80186c8:	d0ad      	beq.n	8018626 <_printf_i+0x15a>
 80186ca:	6823      	ldr	r3, [r4, #0]
 80186cc:	079b      	lsls	r3, r3, #30
 80186ce:	d413      	bmi.n	80186f8 <_printf_i+0x22c>
 80186d0:	68e0      	ldr	r0, [r4, #12]
 80186d2:	9b03      	ldr	r3, [sp, #12]
 80186d4:	4298      	cmp	r0, r3
 80186d6:	bfb8      	it	lt
 80186d8:	4618      	movlt	r0, r3
 80186da:	e7a6      	b.n	801862a <_printf_i+0x15e>
 80186dc:	2301      	movs	r3, #1
 80186de:	4632      	mov	r2, r6
 80186e0:	4649      	mov	r1, r9
 80186e2:	4640      	mov	r0, r8
 80186e4:	47d0      	blx	sl
 80186e6:	3001      	adds	r0, #1
 80186e8:	d09d      	beq.n	8018626 <_printf_i+0x15a>
 80186ea:	3501      	adds	r5, #1
 80186ec:	68e3      	ldr	r3, [r4, #12]
 80186ee:	9903      	ldr	r1, [sp, #12]
 80186f0:	1a5b      	subs	r3, r3, r1
 80186f2:	42ab      	cmp	r3, r5
 80186f4:	dcf2      	bgt.n	80186dc <_printf_i+0x210>
 80186f6:	e7eb      	b.n	80186d0 <_printf_i+0x204>
 80186f8:	2500      	movs	r5, #0
 80186fa:	f104 0619 	add.w	r6, r4, #25
 80186fe:	e7f5      	b.n	80186ec <_printf_i+0x220>
 8018700:	08018e25 	.word	0x08018e25
 8018704:	08018e36 	.word	0x08018e36

08018708 <memmove>:
 8018708:	4288      	cmp	r0, r1
 801870a:	b510      	push	{r4, lr}
 801870c:	eb01 0402 	add.w	r4, r1, r2
 8018710:	d902      	bls.n	8018718 <memmove+0x10>
 8018712:	4284      	cmp	r4, r0
 8018714:	4623      	mov	r3, r4
 8018716:	d807      	bhi.n	8018728 <memmove+0x20>
 8018718:	1e43      	subs	r3, r0, #1
 801871a:	42a1      	cmp	r1, r4
 801871c:	d008      	beq.n	8018730 <memmove+0x28>
 801871e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018726:	e7f8      	b.n	801871a <memmove+0x12>
 8018728:	4402      	add	r2, r0
 801872a:	4601      	mov	r1, r0
 801872c:	428a      	cmp	r2, r1
 801872e:	d100      	bne.n	8018732 <memmove+0x2a>
 8018730:	bd10      	pop	{r4, pc}
 8018732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801873a:	e7f7      	b.n	801872c <memmove+0x24>

0801873c <_sbrk_r>:
 801873c:	b538      	push	{r3, r4, r5, lr}
 801873e:	4d06      	ldr	r5, [pc, #24]	@ (8018758 <_sbrk_r+0x1c>)
 8018740:	2300      	movs	r3, #0
 8018742:	4604      	mov	r4, r0
 8018744:	4608      	mov	r0, r1
 8018746:	602b      	str	r3, [r5, #0]
 8018748:	f7e9 fc20 	bl	8001f8c <_sbrk>
 801874c:	1c43      	adds	r3, r0, #1
 801874e:	d102      	bne.n	8018756 <_sbrk_r+0x1a>
 8018750:	682b      	ldr	r3, [r5, #0]
 8018752:	b103      	cbz	r3, 8018756 <_sbrk_r+0x1a>
 8018754:	6023      	str	r3, [r4, #0]
 8018756:	bd38      	pop	{r3, r4, r5, pc}
 8018758:	2403b004 	.word	0x2403b004

0801875c <_realloc_r>:
 801875c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018760:	4607      	mov	r7, r0
 8018762:	4614      	mov	r4, r2
 8018764:	460d      	mov	r5, r1
 8018766:	b921      	cbnz	r1, 8018772 <_realloc_r+0x16>
 8018768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801876c:	4611      	mov	r1, r2
 801876e:	f7ff bc5b 	b.w	8018028 <_malloc_r>
 8018772:	b92a      	cbnz	r2, 8018780 <_realloc_r+0x24>
 8018774:	f7ff fbec 	bl	8017f50 <_free_r>
 8018778:	4625      	mov	r5, r4
 801877a:	4628      	mov	r0, r5
 801877c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018780:	f000 f81a 	bl	80187b8 <_malloc_usable_size_r>
 8018784:	4284      	cmp	r4, r0
 8018786:	4606      	mov	r6, r0
 8018788:	d802      	bhi.n	8018790 <_realloc_r+0x34>
 801878a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801878e:	d8f4      	bhi.n	801877a <_realloc_r+0x1e>
 8018790:	4621      	mov	r1, r4
 8018792:	4638      	mov	r0, r7
 8018794:	f7ff fc48 	bl	8018028 <_malloc_r>
 8018798:	4680      	mov	r8, r0
 801879a:	b908      	cbnz	r0, 80187a0 <_realloc_r+0x44>
 801879c:	4645      	mov	r5, r8
 801879e:	e7ec      	b.n	801877a <_realloc_r+0x1e>
 80187a0:	42b4      	cmp	r4, r6
 80187a2:	4622      	mov	r2, r4
 80187a4:	4629      	mov	r1, r5
 80187a6:	bf28      	it	cs
 80187a8:	4632      	movcs	r2, r6
 80187aa:	f7ff fbc3 	bl	8017f34 <memcpy>
 80187ae:	4629      	mov	r1, r5
 80187b0:	4638      	mov	r0, r7
 80187b2:	f7ff fbcd 	bl	8017f50 <_free_r>
 80187b6:	e7f1      	b.n	801879c <_realloc_r+0x40>

080187b8 <_malloc_usable_size_r>:
 80187b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187bc:	1f18      	subs	r0, r3, #4
 80187be:	2b00      	cmp	r3, #0
 80187c0:	bfbc      	itt	lt
 80187c2:	580b      	ldrlt	r3, [r1, r0]
 80187c4:	18c0      	addlt	r0, r0, r3
 80187c6:	4770      	bx	lr

080187c8 <_init>:
 80187c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ca:	bf00      	nop
 80187cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187ce:	bc08      	pop	{r3}
 80187d0:	469e      	mov	lr, r3
 80187d2:	4770      	bx	lr

080187d4 <_fini>:
 80187d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187d6:	bf00      	nop
 80187d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187da:	bc08      	pop	{r3}
 80187dc:	469e      	mov	lr, r3
 80187de:	4770      	bx	lr
