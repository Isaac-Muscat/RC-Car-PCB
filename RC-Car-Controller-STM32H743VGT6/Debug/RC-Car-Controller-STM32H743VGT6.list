
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017418  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  080176b8  080176b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017cf4  08017cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017cfc  08017cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017d00  08017d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08017d04  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000283c4  24000158  08017e5c  00019158  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2402851c  08017e5c  0001951c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019158  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bd7a  00000000  00000000  00019186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000052e0  00000000  00000000  00044f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f10  00000000  00000000  0004a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001805  00000000  00000000  0004c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dba6  00000000  00000000  0004d8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d343  00000000  00000000  0008b49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001785a9  00000000  00000000  000b87de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00230d87  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000089fc  00000000  00000000  00230dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  002397c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080176a0 	.word	0x080176a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	080176a0 	.word	0x080176a0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 fdb9 	bl	8001238 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fd77 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f919 	bl	8000900 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ce:	f000 f991 	bl	80009f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fc05 	bl	8000ee0 <MX_GPIO_Init>
  MX_MDMA_Init();
 80006d6:	f000 fbe3 	bl	8000ea0 <MX_MDMA_Init>
  MX_DMA_Init();
 80006da:	f000 fb99 	bl	8000e10 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006de:	f000 fb49 	bl	8000d74 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006e2:	f015 fded 	bl	80162c0 <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 80006e6:	f000 fadb 	bl	8000ca0 <MX_JPEG_Init>
  MX_I2C1_Init();
 80006ea:	f000 fa59 	bl	8000ba0 <MX_I2C1_Init>
  MX_SPI4_Init();
 80006ee:	f000 faeb 	bl	8000cc8 <MX_SPI4_Init>
  MX_ADC1_Init();
 80006f2:	f000 f9c9 	bl	8000a88 <MX_ADC1_Init>
  MX_I2C2_Init();
 80006f6:	f000 fa93 	bl	8000c20 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // ------------------------------------------------------------ SETUP ADC DMA -- //

  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 80006fa:	2214      	movs	r2, #20
 80006fc:	496e      	ldr	r1, [pc, #440]	@ (80008b8 <main+0x1fc>)
 80006fe:	486f      	ldr	r0, [pc, #444]	@ (80008bc <main+0x200>)
 8000700:	f002 f9d8 	bl	8002ab4 <HAL_ADC_Start_DMA>

  // ------------------------------------------------------------ SETUP SSD1306 -- //

  uint8_t init_result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	77fb      	strb	r3, [r7, #31]

  hssd1.i2c_handle = &hi2c2;
 8000708:	4b6d      	ldr	r3, [pc, #436]	@ (80008c0 <main+0x204>)
 800070a:	4a6e      	ldr	r2, [pc, #440]	@ (80008c4 <main+0x208>)
 800070c:	601a      	str	r2, [r3, #0]
  hssd1.address = OLED_ADDR;
 800070e:	4b6c      	ldr	r3, [pc, #432]	@ (80008c0 <main+0x204>)
 8000710:	223c      	movs	r2, #60	@ 0x3c
 8000712:	711a      	strb	r2, [r3, #4]
  hssd1.vram_full = ssd1_vram;
 8000714:	4b6a      	ldr	r3, [pc, #424]	@ (80008c0 <main+0x204>)
 8000716:	4a6c      	ldr	r2, [pc, #432]	@ (80008c8 <main+0x20c>)
 8000718:	609a      	str	r2, [r3, #8]
  init_result = SSD1306_Init(&hssd1);
 800071a:	4869      	ldr	r0, [pc, #420]	@ (80008c0 <main+0x204>)
 800071c:	f001 fb2a 	bl	8001d74 <SSD1306_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	77fb      	strb	r3, [r7, #31]
  if (init_result) {
 8000724:	7ffb      	ldrb	r3, [r7, #31]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d013      	beq.n	8000752 <main+0x96>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 800072a:	7ffb      	ldrb	r3, [r7, #31]
 800072c:	461a      	mov	r2, r3
 800072e:	4967      	ldr	r1, [pc, #412]	@ (80008cc <main+0x210>)
 8000730:	4867      	ldr	r0, [pc, #412]	@ (80008d0 <main+0x214>)
 8000732:	f016 fb15 	bl	8016d60 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000736:	4866      	ldr	r0, [pc, #408]	@ (80008d0 <main+0x214>)
 8000738:	f7ff fdd2 	bl	80002e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	4619      	mov	r1, r3
 8000740:	4863      	ldr	r0, [pc, #396]	@ (80008d0 <main+0x214>)
 8000742:	f015 fe8d 	bl	8016460 <CDC_Transmit_FS>
		  HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f001 fdc7 	bl	80022dc <HAL_Delay>
	  while (1) {
 800074e:	bf00      	nop
 8000750:	e7eb      	b.n	800072a <main+0x6e>
	  }
  }

  hssd2.i2c_handle = &hi2c1;
 8000752:	4b60      	ldr	r3, [pc, #384]	@ (80008d4 <main+0x218>)
 8000754:	4a60      	ldr	r2, [pc, #384]	@ (80008d8 <main+0x21c>)
 8000756:	601a      	str	r2, [r3, #0]
  hssd2.address = OLED_ADDR;
 8000758:	4b5e      	ldr	r3, [pc, #376]	@ (80008d4 <main+0x218>)
 800075a:	223c      	movs	r2, #60	@ 0x3c
 800075c:	711a      	strb	r2, [r3, #4]
  hssd2.vram_full = ssd2_vram;
 800075e:	4b5d      	ldr	r3, [pc, #372]	@ (80008d4 <main+0x218>)
 8000760:	4a5e      	ldr	r2, [pc, #376]	@ (80008dc <main+0x220>)
 8000762:	609a      	str	r2, [r3, #8]
  init_result = SSD1306_Init(&hssd2);
 8000764:	485b      	ldr	r0, [pc, #364]	@ (80008d4 <main+0x218>)
 8000766:	f001 fb05 	bl	8001d74 <SSD1306_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	77fb      	strb	r3, [r7, #31]
  if (init_result) {
 800076e:	7ffb      	ldrb	r3, [r7, #31]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <main+0xe0>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 8000774:	7ffb      	ldrb	r3, [r7, #31]
 8000776:	461a      	mov	r2, r3
 8000778:	4959      	ldr	r1, [pc, #356]	@ (80008e0 <main+0x224>)
 800077a:	4855      	ldr	r0, [pc, #340]	@ (80008d0 <main+0x214>)
 800077c:	f016 faf0 	bl	8016d60 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000780:	4853      	ldr	r0, [pc, #332]	@ (80008d0 <main+0x214>)
 8000782:	f7ff fdad 	bl	80002e0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	4851      	ldr	r0, [pc, #324]	@ (80008d0 <main+0x214>)
 800078c:	f015 fe68 	bl	8016460 <CDC_Transmit_FS>
		  HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000794:	f001 fda2 	bl	80022dc <HAL_Delay>
	  while (1) {
 8000798:	bf00      	nop
 800079a:	e7eb      	b.n	8000774 <main+0xb8>
	  }
  }

  // ------------------------------------------------------------ SETUP ST7789 -- //
  hst7789.spi_handle = &hspi4;
 800079c:	4b51      	ldr	r3, [pc, #324]	@ (80008e4 <main+0x228>)
 800079e:	4a52      	ldr	r2, [pc, #328]	@ (80008e8 <main+0x22c>)
 80007a0:	601a      	str	r2, [r3, #0]
  hst7789.spi_ready = 1;
 80007a2:	4b50      	ldr	r3, [pc, #320]	@ (80008e4 <main+0x228>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	711a      	strb	r2, [r3, #4]
  hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 80007a8:	4b4e      	ldr	r3, [pc, #312]	@ (80008e4 <main+0x228>)
 80007aa:	4a50      	ldr	r2, [pc, #320]	@ (80008ec <main+0x230>)
 80007ac:	609a      	str	r2, [r3, #8]
  hst7789.dc_gpio_pin = SPI4_DC_Pin;
 80007ae:	4b4d      	ldr	r3, [pc, #308]	@ (80008e4 <main+0x228>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	819a      	strh	r2, [r3, #12]
  hst7789.vram = st7789_vram;
 80007b4:	4b4b      	ldr	r3, [pc, #300]	@ (80008e4 <main+0x228>)
 80007b6:	4a4e      	ldr	r2, [pc, #312]	@ (80008f0 <main+0x234>)
 80007b8:	611a      	str	r2, [r3, #16]
  init_result = ST7789_Init(&hst7789);
 80007ba:	484a      	ldr	r0, [pc, #296]	@ (80008e4 <main+0x228>)
 80007bc:	f001 fbfe 	bl	8001fbc <ST7789_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	77fb      	strb	r3, [r7, #31]
  if (init_result) {
 80007c4:	7ffb      	ldrb	r3, [r7, #31]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d013      	beq.n	80007f2 <main+0x136>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 80007ca:	7ffb      	ldrb	r3, [r7, #31]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4949      	ldr	r1, [pc, #292]	@ (80008f4 <main+0x238>)
 80007d0:	483f      	ldr	r0, [pc, #252]	@ (80008d0 <main+0x214>)
 80007d2:	f016 fac5 	bl	8016d60 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007d6:	483e      	ldr	r0, [pc, #248]	@ (80008d0 <main+0x214>)
 80007d8:	f7ff fd82 	bl	80002e0 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	4619      	mov	r1, r3
 80007e0:	483b      	ldr	r0, [pc, #236]	@ (80008d0 <main+0x214>)
 80007e2:	f015 fe3d 	bl	8016460 <CDC_Transmit_FS>
		  HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ea:	f001 fd77 	bl	80022dc <HAL_Delay>
	  while (1) {
 80007ee:	bf00      	nop
 80007f0:	e7eb      	b.n	80007ca <main+0x10e>
	  }
  }

  // ------------------------------------------------------------ PROGRAM THE XBEE -- //
  uint8_t at_buffer[20] = {0};	// Reserve 20 bytes for writing AT commands
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
//	}
//	WriteDebug(ssd_msg, strlen(ssd_msg));
//
//	while (1) { }

  uint8_t col = 0xF0;
 8000800:	23f0      	movs	r3, #240	@ 0xf0
 8000802:	77bb      	strb	r3, [r7, #30]
  uint8_t screen_portion = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t fill_byte = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  uint32_t old_t = HAL_GetTick();
 8000810:	f001 fd58 	bl	80022c4 <HAL_GetTick>
 8000814:	6238      	str	r0, [r7, #32]
    /* USER CODE BEGIN 3 */

	  // Queue up the Screen updates
	  //SSD1306_Update(&hssd1);
	  //SSD1306_Update(&hssd2);
	  if (hst7789.spi_ready) {
 8000816:	4b33      	ldr	r3, [pc, #204]	@ (80008e4 <main+0x228>)
 8000818:	791b      	ldrb	r3, [r3, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0fb      	beq.n	8000816 <main+0x15a>
		  uint32_t new_t = HAL_GetTick();
 800081e:	f001 fd51 	bl	80022c4 <HAL_GetTick>
 8000822:	61b8      	str	r0, [r7, #24]
		  if (new_t > old_t) { // Check for timer overflow
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	429a      	cmp	r2, r3
 800082a:	d91b      	bls.n	8000864 <main+0x1a8>
			  uint32_t delta_t = new_t - old_t;
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	6a3b      	ldr	r3, [r7, #32]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	617b      	str	r3, [r7, #20]
			  if (fill_byte % 16 == 0) {
 8000834:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000838:	f003 030f 	and.w	r3, r3, #15
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d110      	bne.n	8000864 <main+0x1a8>
				  sprintf(ssd_msg, " DMA ms: %d", delta_t);
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	492c      	ldr	r1, [pc, #176]	@ (80008f8 <main+0x23c>)
 8000846:	482d      	ldr	r0, [pc, #180]	@ (80008fc <main+0x240>)
 8000848:	f016 fa8a 	bl	8016d60 <siprintf>
				  WriteDebug(ssd_msg, strlen(ssd_msg));
 800084c:	482b      	ldr	r0, [pc, #172]	@ (80008fc <main+0x240>)
 800084e:	f7ff fd47 	bl	80002e0 <strlen>
 8000852:	4603      	mov	r3, r0
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	4828      	ldr	r0, [pc, #160]	@ (80008fc <main+0x240>)
 800085a:	f000 fcc7 	bl	80011ec <WriteDebug>
				  HAL_Delay(20);
 800085e:	2014      	movs	r0, #20
 8000860:	f001 fd3c 	bl	80022dc <HAL_Delay>
			  }
		  }
		  //HAL_Delay(20);
		  if (!screen_portion) {
 8000864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000868:	2b00      	cmp	r3, #0
 800086a:	d111      	bne.n	8000890 <main+0x1d4>
			  ST7789_Clear(&hst7789, fill_byte);
 800086c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000870:	4619      	mov	r1, r3
 8000872:	481c      	ldr	r0, [pc, #112]	@ (80008e4 <main+0x228>)
 8000874:	f001 fc4b 	bl	800210e <ST7789_Clear>
			  fill_byte++;
 8000878:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800087c:	3301      	adds	r3, #1
 800087e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			  if (fill_byte == 0xFF) fill_byte = 0;
 8000882:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000886:	2bff      	cmp	r3, #255	@ 0xff
 8000888:	d102      	bne.n	8000890 <main+0x1d4>
 800088a:	2300      	movs	r3, #0
 800088c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		  }
		  old_t = HAL_GetTick();
 8000890:	f001 fd18 	bl	80022c4 <HAL_GetTick>
 8000894:	6238      	str	r0, [r7, #32]
		  ST7789_Update(&hst7789, screen_portion);		// DMA half of screen
 8000896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800089a:	4619      	mov	r1, r3
 800089c:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <main+0x228>)
 800089e:	f001 fc49 	bl	8002134 <ST7789_Update>
		  screen_portion = !screen_portion;
 80008a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  if (hst7789.spi_ready) {
 80008b4:	e7af      	b.n	8000816 <main+0x15a>
 80008b6:	bf00      	nop
 80008b8:	240267b0 	.word	0x240267b0
 80008bc:	24000174 	.word	0x24000174
 80008c0:	240006ac 	.word	0x240006ac
 80008c4:	240002a4 	.word	0x240002a4
 80008c8:	240006d4 	.word	0x240006d4
 80008cc:	080176b8 	.word	0x080176b8
 80008d0:	24000f38 	.word	0x24000f38
 80008d4:	240006c0 	.word	0x240006c0
 80008d8:	24000250 	.word	0x24000250
 80008dc:	24000ad4 	.word	0x24000ad4
 80008e0:	080176d4 	.word	0x080176d4
 80008e4:	24000f9c 	.word	0x24000f9c
 80008e8:	24000518 	.word	0x24000518
 80008ec:	58021000 	.word	0x58021000
 80008f0:	24000fb0 	.word	0x24000fb0
 80008f4:	080176f0 	.word	0x080176f0
 80008f8:	0801770c 	.word	0x0801770c
 80008fc:	24000ed4 	.word	0x24000ed4

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09c      	sub	sp, #112	@ 0x70
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	224c      	movs	r2, #76	@ 0x4c
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f016 fa48 	bl	8016da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2220      	movs	r2, #32
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f016 fa42 	bl	8016da4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000920:	2002      	movs	r0, #2
 8000922:	f00b ff71 	bl	800c808 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b30      	ldr	r3, [pc, #192]	@ (80009ec <SystemClock_Config+0xec>)
 800092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092e:	4a2f      	ldr	r2, [pc, #188]	@ (80009ec <SystemClock_Config+0xec>)
 8000930:	f023 0301 	bic.w	r3, r3, #1
 8000934:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000936:	4b2d      	ldr	r3, [pc, #180]	@ (80009ec <SystemClock_Config+0xec>)
 8000938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	4b2b      	ldr	r3, [pc, #172]	@ (80009f0 <SystemClock_Config+0xf0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a2a      	ldr	r2, [pc, #168]	@ (80009f0 <SystemClock_Config+0xf0>)
 8000946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <SystemClock_Config+0xf0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000958:	bf00      	nop
 800095a:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <SystemClock_Config+0xf0>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000966:	d1f8      	bne.n	800095a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000968:	2301      	movs	r3, #1
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	2302      	movs	r3, #2
 8000978:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800097e:	2318      	movs	r3, #24
 8000980:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000986:	2306      	movs	r3, #6
 8000988:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800098e:	230c      	movs	r3, #12
 8000990:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000992:	2300      	movs	r3, #0
 8000994:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099e:	4618      	mov	r0, r3
 80009a0:	f00b ff7c 	bl	800c89c <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009aa:	f000 fc71 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	233f      	movs	r3, #63	@ 0x3f
 80009b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2303      	movs	r3, #3
 80009b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009be:	2340      	movs	r3, #64	@ 0x40
 80009c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c2:	2340      	movs	r3, #64	@ 0x40
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2102      	movs	r1, #2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f00c fbbb 	bl	800d150 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009e0:	f000 fc56 	bl	8001290 <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3770      	adds	r7, #112	@ 0x70
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	58000400 	.word	0x58000400
 80009f0:	58024800 	.word	0x58024800

080009f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0b0      	sub	sp, #192	@ 0xc0
 80009f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	22c0      	movs	r2, #192	@ 0xc0
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f016 f9cf 	bl	8016da4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C2
 8000a06:	4a1f      	ldr	r2, [pc, #124]	@ (8000a84 <PeriphCommonClock_Config+0x90>)
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000a10:	2310      	movs	r3, #16
 8000a12:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000a14:	2380      	movs	r3, #128	@ 0x80
 8000a16:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 20;
 8000a18:	2314      	movs	r3, #20
 8000a1a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000a34:	230c      	movs	r3, #12
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000a40:	2303      	movs	r3, #3
 8000a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000a44:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000a54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a58:	667b      	str	r3, [r7, #100]	@ 0x64
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00c fefc 	bl	800d868 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <PeriphCommonClock_Config+0x86>
  {
    Error_Handler();
 8000a76:	f000 fc0b 	bl	8001290 <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	37c0      	adds	r7, #192	@ 0xc0
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	00082008 	.word	0x00082008

08000a88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aac:	4b38      	ldr	r3, [pc, #224]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000aae:	4a39      	ldr	r2, [pc, #228]	@ (8000b94 <MX_ADC1_Init+0x10c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000ab2:	4b37      	ldr	r3, [pc, #220]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000ab4:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000aba:	4b35      	ldr	r3, [pc, #212]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ac0:	4b33      	ldr	r3, [pc, #204]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ac6:	4b32      	ldr	r3, [pc, #200]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000ac8:	2208      	movs	r2, #8
 8000aca:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000acc:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ade:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000af0:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000af2:	2203      	movs	r2, #3
 8000af4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000af6:	4b26      	ldr	r3, [pc, #152]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000afc:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b02:	4b23      	ldr	r3, [pc, #140]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b10:	481f      	ldr	r0, [pc, #124]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000b12:	f001 fe2d 	bl	8002770 <HAL_ADC_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b1c:	f000 fbb8 	bl	8001290 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4819      	ldr	r0, [pc, #100]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000b2c:	f002 fdda 	bl	80036e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b36:	f000 fbab 	bl	8001290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <MX_ADC1_Init+0x110>)
 8000b3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b3e:	2306      	movs	r3, #6
 8000b40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000b42:	2307      	movs	r3, #7
 8000b44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b46:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b4a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000b5e:	f002 f881 	bl	8002c64 <HAL_ADC_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b68:	f000 fb92 	bl	8001290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <MX_ADC1_Init+0x114>)
 8000b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b70:	230c      	movs	r3, #12
 8000b72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_ADC1_Init+0x108>)
 8000b7a:	f002 f873 	bl	8002c64 <HAL_ADC_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b84:	f000 fb84 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	@ 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	24000174 	.word	0x24000174
 8000b94:	40022000 	.word	0x40022000
 8000b98:	0c900008 	.word	0x0c900008
 8000b9c:	10c00010 	.word	0x10c00010

08000ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <MX_I2C1_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bac:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <MX_I2C1_Init+0x7c>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bda:	480e      	ldr	r0, [pc, #56]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bdc:	f006 f808 	bl	8006bf0 <HAL_I2C_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000be6:	f000 fb53 	bl	8001290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4809      	ldr	r0, [pc, #36]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000bee:	f008 fc39 	bl	8009464 <HAL_I2CEx_ConfigAnalogFilter>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bf8:	f000 fb4a 	bl	8001290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_I2C1_Init+0x74>)
 8000c00:	f008 fc7b 	bl	80094fa <HAL_I2CEx_ConfigDigitalFilter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f000 fb41 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	24000250 	.word	0x24000250
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	00401959 	.word	0x00401959

08000c20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c26:	4a1c      	ldr	r2, [pc, #112]	@ (8000c98 <MX_I2C2_Init+0x78>)
 8000c28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c9c <MX_I2C2_Init+0x7c>)
 8000c2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c30:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c5a:	480e      	ldr	r0, [pc, #56]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c5c:	f005 ffc8 	bl	8006bf0 <HAL_I2C_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c66:	f000 fb13 	bl	8001290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c6e:	f008 fbf9 	bl	8009464 <HAL_I2CEx_ConfigAnalogFilter>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c78:	f000 fb0a 	bl	8001290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_I2C2_Init+0x74>)
 8000c80:	f008 fc3b 	bl	80094fa <HAL_I2CEx_ConfigDigitalFilter>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c8a:	f000 fb01 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	240002a4 	.word	0x240002a4
 8000c98:	40005800 	.word	0x40005800
 8000c9c:	00401959 	.word	0x00401959

08000ca0 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_JPEG_Init+0x20>)
 8000ca6:	4a07      	ldr	r2, [pc, #28]	@ (8000cc4 <MX_JPEG_Init+0x24>)
 8000ca8:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_JPEG_Init+0x20>)
 8000cac:	f008 fc72 	bl	8009594 <HAL_JPEG_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000cb6:	f000 faeb 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	240003e8 	.word	0x240003e8
 8000cc4:	52003000 	.word	0x52003000

08000cc8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ccc:	4b27      	ldr	r3, [pc, #156]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000cce:	4a28      	ldr	r2, [pc, #160]	@ (8000d70 <MX_SPI4_Init+0xa8>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cd2:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000cd4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cd8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000cda:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000cdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ce0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ce2:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce8:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cee:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000cf6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cfa:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d20:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d28:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <MX_SPI4_Init+0xa4>)
 8000d5a:	f00f fa83 	bl	8010264 <HAL_SPI_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d64:	f000 fa94 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	24000518 	.word	0x24000518
 8000d70:	40013400 	.word	0x40013400

08000d74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d78:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d7a:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <MX_USART1_UART_Init+0x94>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d80:	4a22      	ldr	r2, [pc, #136]	@ (8000e0c <MX_USART1_UART_Init+0x98>)
 8000d82:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d98:	220c      	movs	r2, #12
 8000d9a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da2:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dba:	4812      	ldr	r0, [pc, #72]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000dbc:	f010 f9fd 	bl	80111ba <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000dc6:	f000 fa63 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000dce:	f011 fe59 	bl	8012a84 <HAL_UARTEx_SetTxFifoThreshold>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000dd8:	f000 fa5a 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4809      	ldr	r0, [pc, #36]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000de0:	f011 fe8e 	bl	8012b00 <HAL_UARTEx_SetRxFifoThreshold>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000dea:	f000 fa51 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000df0:	f011 fe0d 	bl	8012a0e <HAL_UARTEx_EnableFifoMode>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000dfa:	f000 fa49 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	24000618 	.word	0x24000618
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	0001b207 	.word	0x0001b207

08000e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e16:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <MX_DMA_Init+0x8c>)
 8000e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000e9c <MX_DMA_Init+0x8c>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e26:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <MX_DMA_Init+0x8c>)
 8000e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <MX_DMA_Init+0x8c>)
 8000e36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e3a:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <MX_DMA_Init+0x8c>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e44:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <MX_DMA_Init+0x8c>)
 8000e46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	200b      	movs	r0, #11
 8000e58:	f002 fdfd 	bl	8003a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e5c:	200b      	movs	r0, #11
 8000e5e:	f002 fe14 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	200c      	movs	r0, #12
 8000e68:	f002 fdf5 	bl	8003a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	f002 fe0c 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	200d      	movs	r0, #13
 8000e78:	f002 fded 	bl	8003a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e7c:	200d      	movs	r0, #13
 8000e7e:	f002 fe04 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2038      	movs	r0, #56	@ 0x38
 8000e88:	f002 fde5 	bl	8003a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e8c:	2038      	movs	r0, #56	@ 0x38
 8000e8e:	f002 fdfc 	bl	8003a8a <HAL_NVIC_EnableIRQ>

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	58024400 	.word	0x58024400

08000ea0 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <MX_MDMA_Init+0x3c>)
 8000ea8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eac:	4a0b      	ldr	r2, [pc, #44]	@ (8000edc <MX_MDMA_Init+0x3c>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_MDMA_Init+0x3c>)
 8000eb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	207a      	movs	r0, #122	@ 0x7a
 8000eca:	f002 fdc4 	bl	8003a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000ece:	207a      	movs	r0, #122	@ 0x7a
 8000ed0:	f002 fddb 	bl	8003a8a <HAL_NVIC_EnableIRQ>

}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58024400 	.word	0x58024400

08000ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	@ 0x28
 8000ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4b47      	ldr	r3, [pc, #284]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	4a45      	ldr	r2, [pc, #276]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f06:	4b43      	ldr	r3, [pc, #268]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f14:	4b3f      	ldr	r3, [pc, #252]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a3e      	ldr	r2, [pc, #248]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b3b      	ldr	r3, [pc, #236]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	4a36      	ldr	r2, [pc, #216]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f42:	4b34      	ldr	r3, [pc, #208]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a2f      	ldr	r2, [pc, #188]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b2c      	ldr	r3, [pc, #176]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b29      	ldr	r3, [pc, #164]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	4a27      	ldr	r2, [pc, #156]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7e:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <MX_GPIO_Init+0x134>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4821      	ldr	r0, [pc, #132]	@ (8001018 <MX_GPIO_Init+0x138>)
 8000f92:	f005 fe13 	bl	8006bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f9c:	481f      	ldr	r0, [pc, #124]	@ (800101c <MX_GPIO_Init+0x13c>)
 8000f9e:	f005 fe0d 	bl	8006bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_DC_Pin */
  GPIO_InitStruct.Pin = SPI4_DC_Pin;
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4817      	ldr	r0, [pc, #92]	@ (8001018 <MX_GPIO_Init+0x138>)
 8000fba:	f005 fc4f 	bl	800685c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_L_Pin */
  GPIO_InitStruct.Pin = BTN_L_Pin;
 8000fbe:	2320      	movs	r3, #32
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_L_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4813      	ldr	r0, [pc, #76]	@ (8001020 <MX_GPIO_Init+0x140>)
 8000fd2:	f005 fc43 	bl	800685c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_R_Pin */
  GPIO_InitStruct.Pin = BTN_R_Pin;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <MX_GPIO_Init+0x13c>)
 8000fea:	f005 fc37 	bl	800685c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_RST_Pin */
  GPIO_InitStruct.Pin = SPI4_RST_Pin;
 8000fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_GPIO_Init+0x13c>)
 8001008:	f005 fc28 	bl	800685c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	@ 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	58024400 	.word	0x58024400
 8001018:	58021000 	.word	0x58021000
 800101c:	58020800 	.word	0x58020800
 8001020:	58020000 	.word	0x58020000

08001024 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <HAL_SPI_TxCpltCallback+0x18>)
 800102e:	f001 f8b5 	bl	800219c <ST7789_DMATransmitCplt>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	24000f9c 	.word	0x24000f9c

08001040 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	// Roll the blunt (rolling average)
	//adc_average[0] = 0;
	//adc_average[1] = 0;
	uint16_t adc_newavg[2] = {0, 0};
 8001048:	2300      	movs	r3, #0
 800104a:	81bb      	strh	r3, [r7, #12]
 800104c:	2300      	movs	r3, #0
 800104e:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 20; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	e01f      	b.n	8001096 <HAL_ADC_ConvCpltCallback+0x56>
		// Accumulate the samples
		// Have to pre-divide so the result fits in a uint16
		adc_newavg[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b00      	cmp	r3, #0
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	bfb8      	it	lt
 8001060:	425b      	neglt	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	0053      	lsls	r3, r2, #1
 8001066:	3318      	adds	r3, #24
 8001068:	443b      	add	r3, r7
 800106a:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 800106e:	4858      	ldr	r0, [pc, #352]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x190>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001076:	4857      	ldr	r0, [pc, #348]	@ (80011d4 <HAL_ADC_ConvCpltCallback+0x194>)
 8001078:	fba0 0303 	umull	r0, r3, r0, r3
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	b29b      	uxth	r3, r3
 8001080:	440b      	add	r3, r1
 8001082:	b299      	uxth	r1, r3
 8001084:	0053      	lsls	r3, r2, #1
 8001086:	3318      	adds	r3, #24
 8001088:	443b      	add	r3, r7
 800108a:	460a      	mov	r2, r1
 800108c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (int i = 0; i < 20; i++) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2b13      	cmp	r3, #19
 800109a:	dddc      	ble.n	8001056 <HAL_ADC_ConvCpltCallback+0x16>
	}

	for (int i = 0; i < 2; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	e081      	b.n	80011a6 <HAL_ADC_ConvCpltCallback+0x166>
		// Interpolate for smoother control
		adc_average[i] *= 0.4;
 80010a2:	4a4d      	ldr	r2, [pc, #308]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0x198>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010b2:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 80011c0 <HAL_ADC_ConvCpltCallback+0x180>
 80010b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010be:	ee17 3a90 	vmov	r3, s15
 80010c2:	b299      	uxth	r1, r3
 80010c4:	4a44      	ldr	r2, [pc, #272]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0x198>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_average[i] += adc_newavg[i]*0.6;
 80010cc:	4a42      	ldr	r2, [pc, #264]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0x198>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	3318      	adds	r3, #24
 80010e2:	443b      	add	r3, r7
 80010e4:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010f0:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 80011c8 <HAL_ADC_ConvCpltCallback+0x188>
 80010f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001100:	ee17 3a90 	vmov	r3, s15
 8001104:	b299      	uxth	r1, r3
 8001106:	4a34      	ldr	r2, [pc, #208]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0x198>)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 800110e:	4a32      	ldr	r2, [pc, #200]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0x198>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001116:	b21b      	sxth	r3, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	0bdb      	lsrs	r3, r3, #15
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	4a2e      	ldr	r2, [pc, #184]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x19c>)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4413      	add	r3, r2
 8001128:	460a      	mov	r2, r1
 800112a:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 800112c:	4a2a      	ldr	r2, [pc, #168]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0x198>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001134:	09db      	lsrs	r3, r3, #7
 8001136:	b29b      	uxth	r3, r3
 8001138:	b2d9      	uxtb	r1, r3
 800113a:	4a29      	ldr	r2, [pc, #164]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4413      	add	r3, r2
 8001140:	460a      	mov	r2, r1
 8001142:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 8001144:	4a25      	ldr	r2, [pc, #148]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x19c>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00a      	beq.n	8001166 <HAL_ADC_ConvCpltCallback+0x126>
 8001150:	4a23      	ldr	r2, [pc, #140]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	43db      	mvns	r3, r3
 800115a:	b2d9      	uxtb	r1, r3
 800115c:	4a20      	ldr	r2, [pc, #128]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4413      	add	r3, r2
 8001162:	460a      	mov	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4413      	add	r3, r2
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d204      	bcs.n	8001180 <HAL_ADC_ConvCpltCallback+0x140>
			slider_magnitude[i] = 0;
 8001176:	4a1a      	ldr	r2, [pc, #104]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4413      	add	r3, r2
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 8001180:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001192:	429a      	cmp	r2, r3
 8001194:	dd04      	ble.n	80011a0 <HAL_ADC_ConvCpltCallback+0x160>
				slider_magnitude[i] = 0xFF;
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4413      	add	r3, r2
 800119c:	22ff      	movs	r2, #255	@ 0xff
 800119e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	3301      	adds	r3, #1
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f77f af7a 	ble.w	80010a2 <HAL_ADC_ConvCpltCallback+0x62>

	}
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	f3af 8000 	nop.w
 80011c0:	9999999a 	.word	0x9999999a
 80011c4:	3fd99999 	.word	0x3fd99999
 80011c8:	33333333 	.word	0x33333333
 80011cc:	3fe33333 	.word	0x3fe33333
 80011d0:	240267b0 	.word	0x240267b0
 80011d4:	cccccccd 	.word	0xcccccccd
 80011d8:	240267d8 	.word	0x240267d8
 80011dc:	240267e0 	.word	0x240267e0
 80011e0:	240267dc 	.word	0x240267dc
 80011e4:	24000000 	.word	0x24000000
 80011e8:	24000001 	.word	0x24000001

080011ec <WriteDebug>:
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
	}
}

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
	  SSD1306_Clear(&hssd1);
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <WriteDebug+0x44>)
 80011fa:	f000 fe05 	bl	8001e08 <SSD1306_Clear>
	  SSD1306_Clear(&hssd2);
 80011fe:	480d      	ldr	r0, [pc, #52]	@ (8001234 <WriteDebug+0x48>)
 8001200:	f000 fe02 	bl	8001e08 <SSD1306_Clear>
	  SSD1306_DrawString(&hssd1, str_ptr, str_len);
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	461a      	mov	r2, r3
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4809      	ldr	r0, [pc, #36]	@ (8001230 <WriteDebug+0x44>)
 800120c:	f000 fe6e 	bl	8001eec <SSD1306_DrawString>
	  SSD1306_DrawString(&hssd2, str_ptr, str_len);
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	461a      	mov	r2, r3
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4807      	ldr	r0, [pc, #28]	@ (8001234 <WriteDebug+0x48>)
 8001218:	f000 fe68 	bl	8001eec <SSD1306_DrawString>
	  SSD1306_Update(&hssd1);
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <WriteDebug+0x44>)
 800121e:	f000 fe07 	bl	8001e30 <SSD1306_Update>
	  SSD1306_Update(&hssd2);
 8001222:	4804      	ldr	r0, [pc, #16]	@ (8001234 <WriteDebug+0x48>)
 8001224:	f000 fe04 	bl	8001e30 <SSD1306_Update>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	240006ac 	.word	0x240006ac
 8001234:	240006c0 	.word	0x240006c0

08001238 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800124a:	f002 fc39 	bl	8003ac0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800124e:	2301      	movs	r3, #1
 8001250:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001252:	2300      	movs	r3, #0
 8001254:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800125a:	231f      	movs	r3, #31
 800125c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800125e:	2387      	movs	r3, #135	@ 0x87
 8001260:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001262:	2300      	movs	r3, #0
 8001264:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001266:	2300      	movs	r3, #0
 8001268:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800126a:	2301      	movs	r3, #1
 800126c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800126e:	2301      	movs	r3, #1
 8001270:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800127a:	463b      	mov	r3, r7
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fc57 	bl	8003b30 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001282:	2004      	movs	r0, #4
 8001284:	f002 fc34 	bl	8003af0 <HAL_MPU_Enable>

}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <Error_Handler+0x8>

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_MspInit+0x30>)
 80012a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012a8:	4a08      	ldr	r2, [pc, #32]	@ (80012cc <HAL_MspInit+0x30>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_MspInit+0x30>)
 80012b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	58024400 	.word	0x58024400

080012d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a3e      	ldr	r2, [pc, #248]	@ (80013e8 <HAL_ADC_MspInit+0x118>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d175      	bne.n	80013de <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012f2:	4b3e      	ldr	r3, [pc, #248]	@ (80013ec <HAL_ADC_MspInit+0x11c>)
 80012f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012f8:	4a3c      	ldr	r2, [pc, #240]	@ (80013ec <HAL_ADC_MspInit+0x11c>)
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001302:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <HAL_ADC_MspInit+0x11c>)
 8001304:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b36      	ldr	r3, [pc, #216]	@ (80013ec <HAL_ADC_MspInit+0x11c>)
 8001312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001316:	4a35      	ldr	r2, [pc, #212]	@ (80013ec <HAL_ADC_MspInit+0x11c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001320:	4b32      	ldr	r3, [pc, #200]	@ (80013ec <HAL_ADC_MspInit+0x11c>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b2f      	ldr	r3, [pc, #188]	@ (80013ec <HAL_ADC_MspInit+0x11c>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001334:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <HAL_ADC_MspInit+0x11c>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800133e:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <HAL_ADC_MspInit+0x11c>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 800134c:	2340      	movs	r3, #64	@ 0x40
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4824      	ldr	r0, [pc, #144]	@ (80013f0 <HAL_ADC_MspInit+0x120>)
 8001360:	f005 fa7c 	bl	800685c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8001364:	2310      	movs	r3, #16
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	2303      	movs	r3, #3
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	481f      	ldr	r0, [pc, #124]	@ (80013f4 <HAL_ADC_MspInit+0x124>)
 8001378:	f005 fa70 	bl	800685c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800137c:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 800137e:	4a1f      	ldr	r2, [pc, #124]	@ (80013fc <HAL_ADC_MspInit+0x12c>)
 8001380:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001382:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 8001384:	2209      	movs	r2, #9
 8001386:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 8001396:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800139a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800139c:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 800139e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 80013a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 80013ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80013b4:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 80013b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 80013c4:	f002 fbf4 	bl	8003bb0 <HAL_DMA_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80013ce:	f7ff ff5f 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 80013d6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013d8:	4a07      	ldr	r2, [pc, #28]	@ (80013f8 <HAL_ADC_MspInit+0x128>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	@ 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40022000 	.word	0x40022000
 80013ec:	58024400 	.word	0x58024400
 80013f0:	58020000 	.word	0x58020000
 80013f4:	58020800 	.word	0x58020800
 80013f8:	240001d8 	.word	0x240001d8
 80013fc:	40020410 	.word	0x40020410

08001400 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a73      	ldr	r2, [pc, #460]	@ (80015ec <HAL_I2C_MspInit+0x1ec>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d16d      	bne.n	80014fe <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b73      	ldr	r3, [pc, #460]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001428:	4a71      	ldr	r2, [pc, #452]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001432:	4b6f      	ldr	r3, [pc, #444]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001440:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001446:	2312      	movs	r3, #18
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001452:	2304      	movs	r3, #4
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4865      	ldr	r0, [pc, #404]	@ (80015f4 <HAL_I2C_MspInit+0x1f4>)
 800145e:	f005 f9fd 	bl	800685c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001462:	4b63      	ldr	r3, [pc, #396]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 8001464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001468:	4a61      	ldr	r2, [pc, #388]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 800146a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800146e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001472:	4b5f      	ldr	r3, [pc, #380]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 8001474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001480:	4b5d      	ldr	r3, [pc, #372]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 8001482:	4a5e      	ldr	r2, [pc, #376]	@ (80015fc <HAL_I2C_MspInit+0x1fc>)
 8001484:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001486:	4b5c      	ldr	r3, [pc, #368]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 8001488:	2222      	movs	r2, #34	@ 0x22
 800148a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800148c:	4b5a      	ldr	r3, [pc, #360]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 800148e:	2240      	movs	r2, #64	@ 0x40
 8001490:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001492:	4b59      	ldr	r3, [pc, #356]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001498:	4b57      	ldr	r3, [pc, #348]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 800149a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800149e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a0:	4b55      	ldr	r3, [pc, #340]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a6:	4b54      	ldr	r3, [pc, #336]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80014ac:	4b52      	ldr	r3, [pc, #328]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80014b2:	4b51      	ldr	r3, [pc, #324]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 80014b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014b8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ba:	4b4f      	ldr	r3, [pc, #316]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80014c0:	484d      	ldr	r0, [pc, #308]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 80014c2:	f002 fb75 	bl	8003bb0 <HAL_DMA_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80014cc:	f7ff fee0 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a49      	ldr	r2, [pc, #292]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 80014d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80014d6:	4a48      	ldr	r2, [pc, #288]	@ (80015f8 <HAL_I2C_MspInit+0x1f8>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	201f      	movs	r0, #31
 80014e2:	f002 fab8 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014e6:	201f      	movs	r0, #31
 80014e8:	f002 facf 	bl	8003a8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2020      	movs	r0, #32
 80014f2:	f002 fab0 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014f6:	2020      	movs	r0, #32
 80014f8:	f002 fac7 	bl	8003a8a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014fc:	e071      	b.n	80015e2 <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a3f      	ldr	r2, [pc, #252]	@ (8001600 <HAL_I2C_MspInit+0x200>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d16c      	bne.n	80015e2 <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150e:	4a38      	ldr	r2, [pc, #224]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001518:	4b35      	ldr	r3, [pc, #212]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001526:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152c:	2312      	movs	r3, #18
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001530:	2301      	movs	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001538:	2304      	movs	r3, #4
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	482c      	ldr	r0, [pc, #176]	@ (80015f4 <HAL_I2C_MspInit+0x1f4>)
 8001544:	f005 f98a 	bl	800685c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001548:	4b29      	ldr	r3, [pc, #164]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 800154a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800154e:	4a28      	ldr	r2, [pc, #160]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 8001550:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001554:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001558:	4b25      	ldr	r3, [pc, #148]	@ (80015f0 <HAL_I2C_MspInit+0x1f0>)
 800155a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800155e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8001566:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 8001568:	4a27      	ldr	r2, [pc, #156]	@ (8001608 <HAL_I2C_MspInit+0x208>)
 800156a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 800156e:	2224      	movs	r2, #36	@ 0x24
 8001570:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 8001574:	2240      	movs	r2, #64	@ 0x40
 8001576:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 8001580:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001584:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001586:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800158c:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001598:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 800159a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800159e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80015a6:	4817      	ldr	r0, [pc, #92]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 80015a8:	f002 fb02 	bl	8003bb0 <HAL_DMA_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 80015b2:	f7ff fe6d 	bl	8001290 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 80015ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80015bc:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <HAL_I2C_MspInit+0x204>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2021      	movs	r0, #33	@ 0x21
 80015c8:	f002 fa45 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80015cc:	2021      	movs	r0, #33	@ 0x21
 80015ce:	f002 fa5c 	bl	8003a8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2022      	movs	r0, #34	@ 0x22
 80015d8:	f002 fa3d 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80015dc:	2022      	movs	r0, #34	@ 0x22
 80015de:	f002 fa54 	bl	8003a8a <HAL_NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3730      	adds	r7, #48	@ 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40005400 	.word	0x40005400
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58020400 	.word	0x58020400
 80015f8:	240002f8 	.word	0x240002f8
 80015fc:	40020040 	.word	0x40020040
 8001600:	40005800 	.word	0x40005800
 8001604:	24000370 	.word	0x24000370
 8001608:	40020028 	.word	0x40020028

0800160c <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a55      	ldr	r2, [pc, #340]	@ (8001770 <HAL_JPEG_MspInit+0x164>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 80a3 	bne.w	8001766 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001620:	4b54      	ldr	r3, [pc, #336]	@ (8001774 <HAL_JPEG_MspInit+0x168>)
 8001622:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001626:	4a53      	ldr	r2, [pc, #332]	@ (8001774 <HAL_JPEG_MspInit+0x168>)
 8001628:	f043 0320 	orr.w	r3, r3, #32
 800162c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001630:	4b50      	ldr	r3, [pc, #320]	@ (8001774 <HAL_JPEG_MspInit+0x168>)
 8001632:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001636:	f003 0320 	and.w	r3, r3, #32
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 800163e:	4b4e      	ldr	r3, [pc, #312]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 8001640:	4a4e      	ldr	r2, [pc, #312]	@ (800177c <HAL_JPEG_MspInit+0x170>)
 8001642:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001644:	4b4c      	ldr	r3, [pc, #304]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 8001646:	2211      	movs	r2, #17
 8001648:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800164a:	4b4b      	ldr	r3, [pc, #300]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001650:	4b49      	ldr	r3, [pc, #292]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 8001652:	2240      	movs	r2, #64	@ 0x40
 8001654:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001656:	4b48      	ldr	r3, [pc, #288]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800165c:	4b46      	ldr	r3, [pc, #280]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 800165e:	2202      	movs	r2, #2
 8001660:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001662:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001668:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800166e:	4b42      	ldr	r3, [pc, #264]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001674:	4b40      	ldr	r3, [pc, #256]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 8001676:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800167c:	4b3e      	ldr	r3, [pc, #248]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 800167e:	2220      	movs	r2, #32
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001682:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 8001684:	2200      	movs	r2, #0
 8001686:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001688:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 800168a:	2200      	movs	r2, #0
 800168c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 800168e:	4b3a      	ldr	r3, [pc, #232]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 8001690:	2200      	movs	r2, #0
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001694:	4b38      	ldr	r3, [pc, #224]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 8001696:	2200      	movs	r2, #0
 8001698:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800169a:	4837      	ldr	r0, [pc, #220]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 800169c:	f009 fb62 	bl	800ad64 <HAL_MDMA_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 80016a6:	f7ff fdf3 	bl	8001290 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	4832      	ldr	r0, [pc, #200]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 80016b0:	f009 fba4 	bl	800adfc <HAL_MDMA_ConfigPostRequestMask>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 80016ba:	f7ff fde9 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 80016c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80016c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001778 <HAL_JPEG_MspInit+0x16c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 80016ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 80016cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001784 <HAL_JPEG_MspInit+0x178>)
 80016ce:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 80016d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 80016d2:	2214      	movs	r2, #20
 80016d4:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80016d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80016dc:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 80016de:	2240      	movs	r2, #64	@ 0x40
 80016e0:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80016e2:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80016e8:	4b25      	ldr	r3, [pc, #148]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80016ee:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 80016f0:	2208      	movs	r2, #8
 80016f2:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80016f4:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 80016f6:	2220      	movs	r2, #32
 80016f8:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80016fa:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 8001702:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001708:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 800170a:	2204      	movs	r2, #4
 800170c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800170e:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 8001710:	2200      	movs	r2, #0
 8001712:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001714:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 8001716:	2200      	movs	r2, #0
 8001718:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 800171a:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 800171c:	2200      	movs	r2, #0
 800171e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001720:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 8001722:	2200      	movs	r2, #0
 8001724:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001726:	4816      	ldr	r0, [pc, #88]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 8001728:	f009 fb1c 	bl	800ad64 <HAL_MDMA_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001732:	f7ff fdad 	bl	8001290 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	4811      	ldr	r0, [pc, #68]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 800173c:	f009 fb5e 	bl	800adfc <HAL_MDMA_ConfigPostRequestMask>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001746:	f7ff fda3 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a0c      	ldr	r2, [pc, #48]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 800174e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001750:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <HAL_JPEG_MspInit+0x174>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	2079      	movs	r0, #121	@ 0x79
 800175c:	f002 f97b 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001760:	2079      	movs	r0, #121	@ 0x79
 8001762:	f002 f992 	bl	8003a8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	52003000 	.word	0x52003000
 8001774:	58024400 	.word	0x58024400
 8001778:	24000440 	.word	0x24000440
 800177c:	52000040 	.word	0x52000040
 8001780:	240004ac 	.word	0x240004ac
 8001784:	52000080 	.word	0x52000080

08001788 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	@ 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a3d      	ldr	r2, [pc, #244]	@ (800189c <HAL_SPI_MspInit+0x114>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d173      	bne.n	8001892 <HAL_SPI_MspInit+0x10a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017aa:	4b3d      	ldr	r3, [pc, #244]	@ (80018a0 <HAL_SPI_MspInit+0x118>)
 80017ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017b0:	4a3b      	ldr	r2, [pc, #236]	@ (80018a0 <HAL_SPI_MspInit+0x118>)
 80017b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017ba:	4b39      	ldr	r3, [pc, #228]	@ (80018a0 <HAL_SPI_MspInit+0x118>)
 80017bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c8:	4b35      	ldr	r3, [pc, #212]	@ (80018a0 <HAL_SPI_MspInit+0x118>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ce:	4a34      	ldr	r2, [pc, #208]	@ (80018a0 <HAL_SPI_MspInit+0x118>)
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d8:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <HAL_SPI_MspInit+0x118>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80017e6:	2344      	movs	r3, #68	@ 0x44
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80017f6:	2305      	movs	r3, #5
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4828      	ldr	r0, [pc, #160]	@ (80018a4 <HAL_SPI_MspInit+0x11c>)
 8001802:	f005 f82b 	bl	800685c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001806:	2310      	movs	r3, #16
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001816:	2305      	movs	r3, #5
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4820      	ldr	r0, [pc, #128]	@ (80018a4 <HAL_SPI_MspInit+0x11c>)
 8001822:	f005 f81b 	bl	800685c <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8001826:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 8001828:	4a20      	ldr	r2, [pc, #128]	@ (80018ac <HAL_SPI_MspInit+0x124>)
 800182a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800182c:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 800182e:	2254      	movs	r2, #84	@ 0x54
 8001830:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001832:	4b1d      	ldr	r3, [pc, #116]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 8001834:	2240      	movs	r2, #64	@ 0x40
 8001836:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 8001840:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001844:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 800185a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800185e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001866:	4810      	ldr	r0, [pc, #64]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 8001868:	f002 f9a2 	bl	8003bb0 <HAL_DMA_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 8001872:	f7ff fd0d 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 800187a:	679a      	str	r2, [r3, #120]	@ 0x78
 800187c:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <HAL_SPI_MspInit+0x120>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2054      	movs	r0, #84	@ 0x54
 8001888:	f002 f8e5 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800188c:	2054      	movs	r0, #84	@ 0x54
 800188e:	f002 f8fc 	bl	8003a8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	@ 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40013400 	.word	0x40013400
 80018a0:	58024400 	.word	0x58024400
 80018a4:	58021000 	.word	0x58021000
 80018a8:	240005a0 	.word	0x240005a0
 80018ac:	40020010 	.word	0x40020010

080018b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0ba      	sub	sp, #232	@ 0xe8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	22c0      	movs	r2, #192	@ 0xc0
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f015 fa67 	bl	8016da4 <memset>
  if(huart->Instance==USART1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a2b      	ldr	r2, [pc, #172]	@ (8001988 <HAL_UART_MspInit+0xd8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d14e      	bne.n	800197e <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018e0:	f04f 0201 	mov.w	r2, #1
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00b ffb6 	bl	800d868 <HAL_RCCEx_PeriphCLKConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001902:	f7ff fcc5 	bl	8001290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001906:	4b21      	ldr	r3, [pc, #132]	@ (800198c <HAL_UART_MspInit+0xdc>)
 8001908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800190c:	4a1f      	ldr	r2, [pc, #124]	@ (800198c <HAL_UART_MspInit+0xdc>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001916:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <HAL_UART_MspInit+0xdc>)
 8001918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_UART_MspInit+0xdc>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800192a:	4a18      	ldr	r2, [pc, #96]	@ (800198c <HAL_UART_MspInit+0xdc>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001934:	4b15      	ldr	r3, [pc, #84]	@ (800198c <HAL_UART_MspInit+0xdc>)
 8001936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001942:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800195c:	2304      	movs	r3, #4
 800195e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001962:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001966:	4619      	mov	r1, r3
 8001968:	4809      	ldr	r0, [pc, #36]	@ (8001990 <HAL_UART_MspInit+0xe0>)
 800196a:	f004 ff77 	bl	800685c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	2025      	movs	r0, #37	@ 0x25
 8001974:	f002 f86f 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001978:	2025      	movs	r0, #37	@ 0x25
 800197a:	f002 f886 	bl	8003a8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800197e:	bf00      	nop
 8001980:	37e8      	adds	r7, #232	@ 0xe8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40011000 	.word	0x40011000
 800198c:	58024400 	.word	0x58024400
 8001990:	58020400 	.word	0x58020400

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <NMI_Handler+0x4>

0800199c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <HardFault_Handler+0x4>

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <MemManage_Handler+0x4>

080019ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <UsageFault_Handler+0x4>

080019bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ea:	f000 fc57 	bl	800229c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80019f8:	4802      	ldr	r0, [pc, #8]	@ (8001a04 <DMA1_Stream0_IRQHandler+0x10>)
 80019fa:	f003 fc03 	bl	8005204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	240005a0 	.word	0x240005a0

08001a08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001a0c:	4802      	ldr	r0, [pc, #8]	@ (8001a18 <DMA1_Stream1_IRQHandler+0x10>)
 8001a0e:	f003 fbf9 	bl	8005204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	24000370 	.word	0x24000370

08001a1c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a20:	4802      	ldr	r0, [pc, #8]	@ (8001a2c <DMA1_Stream2_IRQHandler+0x10>)
 8001a22:	f003 fbef 	bl	8005204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	240002f8 	.word	0x240002f8

08001a30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <I2C1_EV_IRQHandler+0x10>)
 8001a36:	f005 fba3 	bl	8007180 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	24000250 	.word	0x24000250

08001a44 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a48:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <I2C1_ER_IRQHandler+0x10>)
 8001a4a:	f005 fbb3 	bl	80071b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	24000250 	.word	0x24000250

08001a58 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001a5c:	4802      	ldr	r0, [pc, #8]	@ (8001a68 <I2C2_EV_IRQHandler+0x10>)
 8001a5e:	f005 fb8f 	bl	8007180 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	240002a4 	.word	0x240002a4

08001a6c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <I2C2_ER_IRQHandler+0x10>)
 8001a72:	f005 fb9f 	bl	80071b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	240002a4 	.word	0x240002a4

08001a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <USART1_IRQHandler+0x10>)
 8001a86:	f00f fbe9 	bl	801125c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	24000618 	.word	0x24000618

08001a94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a98:	4802      	ldr	r0, [pc, #8]	@ (8001aa4 <DMA2_Stream0_IRQHandler+0x10>)
 8001a9a:	f003 fbb3 	bl	8005204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	240001d8 	.word	0x240001d8

08001aa8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <SPI4_IRQHandler+0x10>)
 8001aae:	f00f f82d 	bl	8010b0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	24000518 	.word	0x24000518

08001abc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <OTG_FS_IRQHandler+0x10>)
 8001ac2:	f009 fd42 	bl	800b54a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	24027cd0 	.word	0x24027cd0

08001ad0 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <JPEG_IRQHandler+0x10>)
 8001ad6:	f007 ff02 	bl	80098de <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	240003e8 	.word	0x240003e8

08001ae4 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001ae8:	4803      	ldr	r0, [pc, #12]	@ (8001af8 <MDMA_IRQHandler+0x14>)
 8001aea:	f009 fa01 	bl	800aef0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8001aee:	4803      	ldr	r0, [pc, #12]	@ (8001afc <MDMA_IRQHandler+0x18>)
 8001af0:	f009 f9fe 	bl	800aef0 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	24000440 	.word	0x24000440
 8001afc:	240004ac 	.word	0x240004ac

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f015 f940 	bl	8016db4 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	24080000 	.word	0x24080000
 8001b60:	00000400 	.word	0x00000400
 8001b64:	240267e4 	.word	0x240267e4
 8001b68:	24028520 	.word	0x24028520

08001b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b70:	4b43      	ldr	r3, [pc, #268]	@ (8001c80 <SystemInit+0x114>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b76:	4a42      	ldr	r2, [pc, #264]	@ (8001c80 <SystemInit+0x114>)
 8001b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b80:	4b40      	ldr	r3, [pc, #256]	@ (8001c84 <SystemInit+0x118>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	2b06      	cmp	r3, #6
 8001b8a:	d807      	bhi.n	8001b9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <SystemInit+0x118>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 030f 	bic.w	r3, r3, #15
 8001b94:	4a3b      	ldr	r2, [pc, #236]	@ (8001c84 <SystemInit+0x118>)
 8001b96:	f043 0307 	orr.w	r3, r3, #7
 8001b9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c88 <SystemInit+0x11c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a39      	ldr	r2, [pc, #228]	@ (8001c88 <SystemInit+0x11c>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ba8:	4b37      	ldr	r3, [pc, #220]	@ (8001c88 <SystemInit+0x11c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bae:	4b36      	ldr	r3, [pc, #216]	@ (8001c88 <SystemInit+0x11c>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4935      	ldr	r1, [pc, #212]	@ (8001c88 <SystemInit+0x11c>)
 8001bb4:	4b35      	ldr	r3, [pc, #212]	@ (8001c8c <SystemInit+0x120>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bba:	4b32      	ldr	r3, [pc, #200]	@ (8001c84 <SystemInit+0x118>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c84 <SystemInit+0x118>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 030f 	bic.w	r3, r3, #15
 8001bce:	4a2d      	ldr	r2, [pc, #180]	@ (8001c84 <SystemInit+0x118>)
 8001bd0:	f043 0307 	orr.w	r3, r3, #7
 8001bd4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c88 <SystemInit+0x11c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c88 <SystemInit+0x11c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001be2:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <SystemInit+0x11c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001be8:	4b27      	ldr	r3, [pc, #156]	@ (8001c88 <SystemInit+0x11c>)
 8001bea:	4a29      	ldr	r2, [pc, #164]	@ (8001c90 <SystemInit+0x124>)
 8001bec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bee:	4b26      	ldr	r3, [pc, #152]	@ (8001c88 <SystemInit+0x11c>)
 8001bf0:	4a28      	ldr	r2, [pc, #160]	@ (8001c94 <SystemInit+0x128>)
 8001bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bf4:	4b24      	ldr	r3, [pc, #144]	@ (8001c88 <SystemInit+0x11c>)
 8001bf6:	4a28      	ldr	r2, [pc, #160]	@ (8001c98 <SystemInit+0x12c>)
 8001bf8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <SystemInit+0x11c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c00:	4b21      	ldr	r3, [pc, #132]	@ (8001c88 <SystemInit+0x11c>)
 8001c02:	4a25      	ldr	r2, [pc, #148]	@ (8001c98 <SystemInit+0x12c>)
 8001c04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <SystemInit+0x11c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <SystemInit+0x11c>)
 8001c0e:	4a22      	ldr	r2, [pc, #136]	@ (8001c98 <SystemInit+0x12c>)
 8001c10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c12:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <SystemInit+0x11c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <SystemInit+0x11c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c88 <SystemInit+0x11c>)
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c24:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <SystemInit+0x11c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <SystemInit+0x130>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca0 <SystemInit+0x134>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c36:	d202      	bcs.n	8001c3e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <SystemInit+0x138>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <SystemInit+0x11c>)
 8001c40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d113      	bne.n	8001c74 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <SystemInit+0x11c>)
 8001c4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c52:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <SystemInit+0x11c>)
 8001c54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c58:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <SystemInit+0x13c>)
 8001c5e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c62:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <SystemInit+0x11c>)
 8001c66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c6a:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <SystemInit+0x11c>)
 8001c6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c70:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00
 8001c84:	52002000 	.word	0x52002000
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c90:	02020200 	.word	0x02020200
 8001c94:	01ff0000 	.word	0x01ff0000
 8001c98:	01010280 	.word	0x01010280
 8001c9c:	5c001000 	.word	0x5c001000
 8001ca0:	ffff0000 	.word	0xffff0000
 8001ca4:	51008108 	.word	0x51008108
 8001ca8:	52004000 	.word	0x52004000

08001cac <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <ExitRun0Mode+0x2c>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <ExitRun0Mode+0x2c>)
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001cbc:	bf00      	nop
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <ExitRun0Mode+0x2c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f9      	beq.n	8001cbe <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	58024800 	.word	0x58024800

08001cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cdc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001d18 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001ce0:	f7ff ffe4 	bl	8001cac <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ce4:	f7ff ff42 	bl	8001b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce8:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cea:	490d      	ldr	r1, [pc, #52]	@ (8001d20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cec:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf0:	e002      	b.n	8001cf8 <LoopCopyDataInit>

08001cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf6:	3304      	adds	r3, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cfc:	d3f9      	bcc.n	8001cf2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d00:	4c0a      	ldr	r4, [pc, #40]	@ (8001d2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d04:	e001      	b.n	8001d0a <LoopFillZerobss>

08001d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d08:	3204      	adds	r2, #4

08001d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d0c:	d3fb      	bcc.n	8001d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d0e:	f015 f857 	bl	8016dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d12:	f7fe fcd3 	bl	80006bc <main>
  bx  lr
 8001d16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d18:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d20:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 8001d24:	08017d04 	.word	0x08017d04
  ldr r2, =_sbss
 8001d28:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8001d2c:	2402851c 	.word	0x2402851c

08001d30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d30:	e7fe      	b.n	8001d30 <ADC3_IRQHandler>

08001d32 <SSD1306_SendCommand>:
    0x06, 0x00, 0b00010000, 0b00001000, 0b00010000, 0b00100000, 0b00010000, 0x00  // ------ 126 - ~
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af02      	add	r7, sp, #8
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	733b      	strb	r3, [r7, #12]
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	791b      	ldrb	r3, [r3, #4]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	b299      	uxth	r1, r3
 8001d52:	f107 020c 	add.w	r2, r7, #12
 8001d56:	2364      	movs	r3, #100	@ 0x64
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	f004 ffe4 	bl	8006d28 <HAL_I2C_Master_Transmit>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SSD1306_SendCommand+0x38>
		return ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8001d8c:	2312      	movs	r3, #18
 8001d8e:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8001d94:	e02c      	b.n	8001df0 <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	4a1a      	ldr	r2, [pc, #104]	@ (8001e04 <SSD1306_Init+0x90>)
 8001d9a:	5cd3      	ldrb	r3, [r2, r3]
 8001d9c:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 8001d9e:	897b      	ldrh	r3, [r7, #10]
 8001da0:	3301      	adds	r3, #1
 8001da2:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8001da4:	897b      	ldrh	r3, [r7, #10]
 8001da6:	4a17      	ldr	r2, [pc, #92]	@ (8001e04 <SSD1306_Init+0x90>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ffc0 	bl	8001d32 <SSD1306_SendCommand>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <SSD1306_Init+0x4a>
 8001db8:	897b      	ldrh	r3, [r7, #10]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	e01e      	b.n	8001dfc <SSD1306_Init+0x88>
	        cmd_idx++;
 8001dbe:	897b      	ldrh	r3, [r7, #10]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8001dc4:	e00f      	b.n	8001de6 <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8001dc6:	897b      	ldrh	r3, [r7, #10]
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e04 <SSD1306_Init+0x90>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffaf 	bl	8001d32 <SSD1306_SendCommand>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <SSD1306_Init+0x6c>
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	e00d      	b.n	8001dfc <SSD1306_Init+0x88>
	            cmd_idx++;
 8001de0:	897b      	ldrh	r3, [r7, #10]
 8001de2:	3301      	adds	r3, #1
 8001de4:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 8001de6:	89bb      	ldrh	r3, [r7, #12]
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	81ba      	strh	r2, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ea      	bne.n	8001dc6 <SSD1306_Init+0x52>
	while (n_commands--) {
 8001df0:	89fb      	ldrh	r3, [r7, #14]
 8001df2:	1e5a      	subs	r2, r3, #1
 8001df4:	81fa      	strh	r2, [r7, #14]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1cd      	bne.n	8001d96 <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	08017778 	.word	0x08017778

08001e08 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f014 ffbf 	bl	8016da4 <memset>
	return 0;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2240      	movs	r2, #64	@ 0x40
 8001e3e:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	791b      	ldrb	r3, [r3, #4]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	f240 4301 	movw	r3, #1025	@ 0x401
 8001e54:	f005 f880 	bl	8006f58 <HAL_I2C_Master_Transmit_DMA>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	70fb      	strb	r3, [r7, #3]
	if (ch < 32 || ch > 126) return ERROR;	// char is unable to be rendered
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	2b1f      	cmp	r3, #31
 8001e74:	d902      	bls.n	8001e7c <SSD1306_DrawChar+0x18>
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e7a:	d901      	bls.n	8001e80 <SSD1306_DrawChar+0x1c>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e02e      	b.n	8001ede <SSD1306_DrawChar+0x7a>
	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	3b20      	subs	r3, #32
 8001e84:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	2b60      	cmp	r3, #96	@ 0x60
 8001e8a:	d906      	bls.n	8001e9a <SSD1306_DrawChar+0x36>
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001e90:	d803      	bhi.n	8001e9a <SSD1306_DrawChar+0x36>
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	3b20      	subs	r3, #32
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e005      	b.n	8001ea6 <SSD1306_DrawChar+0x42>
	else if (ch >= 123) newC -= 26;			// remap the brace set to align with the font table
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	2b7a      	cmp	r3, #122	@ 0x7a
 8001e9e:	d902      	bls.n	8001ea6 <SSD1306_DrawChar+0x42>
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3b1a      	subs	r3, #26
 8001ea4:	73fb      	strb	r3, [r7, #15]

	uint8_t len = ALPHNUM[newC*8];
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <SSD1306_DrawChar+0x84>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	73bb      	strb	r3, [r7, #14]
	memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	8a12      	ldrh	r2, [r2, #16]
 8001eb8:	1898      	adds	r0, r3, r2
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	4a09      	ldr	r2, [pc, #36]	@ (8001ee8 <SSD1306_DrawChar+0x84>)
 8001ec2:	4413      	add	r3, r2
 8001ec4:	7bba      	ldrb	r2, [r7, #14]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f014 ffa0 	bl	8016e0c <memcpy>
	hssd->str_cursor += len;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	8a1a      	ldrh	r2, [r3, #16]
 8001ed0:	7bbb      	ldrb	r3, [r7, #14]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	080177ac 	.word	0x080177ac

08001eec <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < length; i++) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
 8001efe:	e013      	b.n	8001f28 <SSD1306_DrawString+0x3c>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x06;
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f7ff ffaa 	bl	8001e64 <SSD1306_DrawChar>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <SSD1306_DrawString+0x36>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8a1b      	ldrh	r3, [r3, #16]
 8001f1a:	3306      	adds	r3, #6
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	3301      	adds	r3, #1
 8001f26:	75fb      	strb	r3, [r7, #23]
 8001f28:	7dfa      	ldrb	r2, [r7, #23]
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3e7      	bcc.n	8001f00 <SSD1306_DrawString+0x14>
	}

	return SUCCESS;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6898      	ldr	r0, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	899b      	ldrh	r3, [r3, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4619      	mov	r1, r3
 8001f52:	f004 fe33 	bl	8006bbc <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	1cf9      	adds	r1, r7, #3
 8001f5c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f60:	2201      	movs	r2, #1
 8001f62:	f00e faa3 	bl	80104ac <HAL_SPI_Transmit>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <ST7789_SendByte_Command+0x36>
		return ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6898      	ldr	r0, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	899b      	ldrh	r3, [r3, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4619      	mov	r1, r3
 8001f92:	f004 fe13 	bl	8006bbc <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	1cf9      	adds	r1, r7, #3
 8001f9c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f00e fa83 	bl	80104ac <HAL_SPI_Transmit>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <ST7789_SendByte_Data+0x36>
		return ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f107 0109 	add.w	r1, r7, #9
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00e fc58 	bl	8010888 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 8001fd8:	200a      	movs	r0, #10
 8001fda:	f000 f97f 	bl	80022dc <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 8001fde:	2313      	movs	r3, #19
 8001fe0:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8001fe6:	e02c      	b.n	8002042 <ST7789_Init+0x86>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 8001fe8:	897b      	ldrh	r3, [r7, #10]
 8001fea:	4a1b      	ldr	r2, [pc, #108]	@ (8002058 <ST7789_Init+0x9c>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 8001ff0:	897b      	ldrh	r3, [r7, #10]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 8001ff6:	897b      	ldrh	r3, [r7, #10]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	@ (8002058 <ST7789_Init+0x9c>)
 8001ffa:	5cd3      	ldrb	r3, [r2, r3]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ff9b 	bl	8001f3a <ST7789_SendByte_Command>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <ST7789_Init+0x54>
 800200a:	897b      	ldrh	r3, [r7, #10]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e01e      	b.n	800204e <ST7789_Init+0x92>
	    cmd_idx++;
 8002010:	897b      	ldrh	r3, [r7, #10]
 8002012:	3301      	adds	r3, #1
 8002014:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 8002016:	e00f      	b.n	8002038 <ST7789_Init+0x7c>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 8002018:	897b      	ldrh	r3, [r7, #10]
 800201a:	4a0f      	ldr	r2, [pc, #60]	@ (8002058 <ST7789_Init+0x9c>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ffaa 	bl	8001f7a <ST7789_SendByte_Data>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <ST7789_Init+0x76>
 800202c:	897b      	ldrh	r3, [r7, #10]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	e00d      	b.n	800204e <ST7789_Init+0x92>
				cmd_idx++;
 8002032:	897b      	ldrh	r3, [r7, #10]
 8002034:	3301      	adds	r3, #1
 8002036:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 8002038:	89bb      	ldrh	r3, [r7, #12]
 800203a:	1e5a      	subs	r2, r3, #1
 800203c:	81ba      	strh	r2, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ea      	bne.n	8002018 <ST7789_Init+0x5c>
	while (n_commands--) {
 8002042:	89fb      	ldrh	r3, [r7, #14]
 8002044:	1e5a      	subs	r2, r3, #1
 8002046:	81fa      	strh	r2, [r7, #14]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1cd      	bne.n	8001fe8 <ST7789_Init+0x2c>
	    }
	}
	return SUCCESS;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	080179d4 	.word	0x080179d4

0800205c <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	461a      	mov	r2, r3
 800206a:	4603      	mov	r3, r0
 800206c:	817b      	strh	r3, [r7, #10]
 800206e:	460b      	mov	r3, r1
 8002070:	813b      	strh	r3, [r7, #8]
 8002072:	4613      	mov	r3, r2
 8002074:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 8002076:	212a      	movs	r1, #42	@ 0x2a
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff ff5e 	bl	8001f3a <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	b29b      	uxth	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4619      	mov	r1, r3
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f7ff ff76 	bl	8001f7a <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 800208e:	897b      	ldrh	r3, [r7, #10]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4619      	mov	r1, r3
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7ff ff70 	bl	8001f7a <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	3b01      	subs	r3, #1
 800209e:	121b      	asrs	r3, r3, #8
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	4619      	mov	r1, r3
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff ff68 	bl	8001f7a <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	4619      	mov	r1, r3
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff ff60 	bl	8001f7a <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 80020ba:	212b      	movs	r1, #43	@ 0x2b
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff ff3c 	bl	8001f3a <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 80020c2:	893b      	ldrh	r3, [r7, #8]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	4619      	mov	r1, r3
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7ff ff54 	bl	8001f7a <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 80020d2:	893b      	ldrh	r3, [r7, #8]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4619      	mov	r1, r3
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7ff ff4e 	bl	8001f7a <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 80020de:	8b3b      	ldrh	r3, [r7, #24]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	121b      	asrs	r3, r3, #8
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	4619      	mov	r1, r3
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7ff ff46 	bl	8001f7a <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 80020ee:	8b3b      	ldrh	r3, [r7, #24]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4619      	mov	r1, r3
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7ff ff3e 	bl	8001f7a <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 80020fe:	212c      	movs	r1, #44	@ 0x2c
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff ff1a 	bl	8001f3a <ST7789_SendByte_Command>
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789, uint8_t col) {
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	70fb      	strb	r3, [r7, #3]
	// fill VRAM with white
	memset(hst7789->vram, col, LCD_WIDTH*LCD_HEIGHT*2);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	78f9      	ldrb	r1, [r7, #3]
 8002120:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8002124:	4618      	mov	r0, r3
 8002126:	f014 fe3d 	bl	8016da4 <memset>
	return SUCCESS;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <ST7789_Update>:

uint8_t ST7789_Update(ST7789_HandleTypeDef *hst7789, uint8_t screen_section) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af02      	add	r7, sp, #8
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	70fb      	strb	r3, [r7, #3]
	// Flag busy
	hst7789->spi_ready = 0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	711a      	strb	r2, [r3, #4]

	// Set the window based on the vram offset
	ST7789_SetWindow(hst7789, 0, (screen_section*0xEA60)/(LCD_WIDTH*2), LCD_WIDTH, LCD_HEIGHT);
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	0152      	lsls	r2, r2, #5
 800214e:	1ad2      	subs	r2, r2, r3
 8002150:	0092      	lsls	r2, r2, #2
 8002152:	4413      	add	r3, r2
 8002154:	b29a      	uxth	r2, r3
 8002156:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	23f0      	movs	r3, #240	@ 0xf0
 800215e:	2100      	movs	r1, #0
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff7b 	bl	800205c <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (~CMD)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6898      	ldr	r0, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	899b      	ldrh	r3, [r3, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	4619      	mov	r1, r3
 8002172:	f004 fd23 	bl	8006bbc <HAL_GPIO_WritePin>


	if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram, 0xEA60))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002182:	4619      	mov	r1, r3
 8002184:	f00e fb80 	bl	8010888 <HAL_SPI_Transmit_DMA>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <ST7789_Update+0x5e>
		return ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <ST7789_Update+0x60>
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <ST7789_DMATransmitCplt>:

void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	hst7789->spi_ready = 1;	// Flag ready
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	711a      	strb	r2, [r3, #4]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021be:	2003      	movs	r0, #3
 80021c0:	f001 fc3e 	bl	8003a40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021c4:	f00b f97a 	bl	800d4bc <HAL_RCC_GetSysClockFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_Init+0x68>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	4913      	ldr	r1, [pc, #76]	@ (8002224 <HAL_Init+0x6c>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
 80021e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <HAL_Init+0x68>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002224 <HAL_Init+0x6c>)
 80021ec:	5cd3      	ldrb	r3, [r2, r3]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002228 <HAL_Init+0x70>)
 80021fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021fc:	4a0b      	ldr	r2, [pc, #44]	@ (800222c <HAL_Init+0x74>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002202:	200f      	movs	r0, #15
 8002204:	f000 f814 	bl	8002230 <HAL_InitTick>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e002      	b.n	8002218 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002212:	f7ff f843 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	58024400 	.word	0x58024400
 8002224:	08017768 	.word	0x08017768
 8002228:	24000008 	.word	0x24000008
 800222c:	24000004 	.word	0x24000004

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_InitTick+0x60>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e021      	b.n	8002288 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002244:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <HAL_InitTick+0x64>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <HAL_InitTick+0x60>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002252:	fbb3 f3f1 	udiv	r3, r3, r1
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f001 fc23 	bl	8003aa6 <HAL_SYSTICK_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00e      	b.n	8002288 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d80a      	bhi.n	8002286 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002270:	2200      	movs	r2, #0
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f001 fbed 	bl	8003a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800227c:	4a06      	ldr	r2, [pc, #24]	@ (8002298 <HAL_InitTick+0x68>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	24000010 	.word	0x24000010
 8002294:	24000004 	.word	0x24000004
 8002298:	2400000c 	.word	0x2400000c

0800229c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_IncTick+0x20>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_IncTick+0x24>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <HAL_IncTick+0x24>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	24000010 	.word	0x24000010
 80022c0:	240267e8 	.word	0x240267e8

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_GetTick+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	240267e8 	.word	0x240267e8

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff ffee 	bl	80022c4 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <HAL_Delay+0x44>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffde 	bl	80022c4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	24000010 	.word	0x24000010

08002324 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002328:	4b03      	ldr	r3, [pc, #12]	@ (8002338 <HAL_GetREVID+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0c1b      	lsrs	r3, r3, #16
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	5c001000 	.word	0x5c001000

0800233c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	609a      	str	r2, [r3, #8]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	609a      	str	r2, [r3, #8]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d107      	bne.n	80023c8 <LL_ADC_SetChannelPreselection+0x24>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2201      	movs	r2, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	e015      	b.n	80023f4 <LL_ADC_SetChannelPreselection+0x50>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2201      	movs	r2, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	69d2      	ldr	r2, [r2, #28]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800240a:	b480      	push	{r7}
 800240c:	b087      	sub	sp, #28
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3360      	adds	r3, #96	@ 0x60
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	430b      	orrs	r3, r1
 8002438:	431a      	orrs	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	431a      	orrs	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	611a      	str	r2, [r3, #16]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3360      	adds	r3, #96	@ 0x60
 800248c:	461a      	mov	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	601a      	str	r2, [r3, #0]
  }
}
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3330      	adds	r3, #48	@ 0x30
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	4413      	add	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	211f      	movs	r1, #31
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	401a      	ands	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	0e9b      	lsrs	r3, r3, #26
 8002510:	f003 011f 	and.w	r1, r3, #31
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	431a      	orrs	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60da      	str	r2, [r3, #12]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002556:	b480      	push	{r7}
 8002558:	b087      	sub	sp, #28
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3314      	adds	r3, #20
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	0e5b      	lsrs	r3, r3, #25
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	4413      	add	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	0d1b      	lsrs	r3, r3, #20
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2107      	movs	r1, #7
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	401a      	ands	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	0d1b      	lsrs	r3, r3, #20
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	431a      	orrs	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c4:	43db      	mvns	r3, r3
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0318 	and.w	r3, r3, #24
 80025ce:	4908      	ldr	r1, [pc, #32]	@ (80025f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025d0:	40d9      	lsrs	r1, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	400b      	ands	r3, r1
 80025d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025da:	431a      	orrs	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	000fffff 	.word	0x000fffff

080025f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 031f 	and.w	r3, r3, #31
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <LL_ADC_DisableDeepPowerDown+0x20>)
 800261e:	4013      	ands	r3, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6093      	str	r3, [r2, #8]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	5fffffc0 	.word	0x5fffffc0

08002634 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002648:	d101      	bne.n	800264e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	4b05      	ldr	r3, [pc, #20]	@ (8002680 <LL_ADC_EnableInternalRegulator+0x24>)
 800266a:	4013      	ands	r3, r2
 800266c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	6fffffc0 	.word	0x6fffffc0

08002684 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002698:	d101      	bne.n	800269e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <LL_ADC_Enable+0x24>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	7fffffc0 	.word	0x7fffffc0

080026d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <LL_ADC_IsEnabled+0x18>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <LL_ADC_IsEnabled+0x1a>
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <LL_ADC_REG_StartConversion+0x24>)
 800270a:	4013      	ands	r3, r2
 800270c:	f043 0204 	orr.w	r2, r3, #4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	7fffffc0 	.word	0x7fffffc0

08002724 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b04      	cmp	r3, #4
 8002736:	d101      	bne.n	800273c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b08      	cmp	r3, #8
 800275c:	d101      	bne.n	8002762 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b089      	sub	sp, #36	@ 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e18f      	b.n	8002aaa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7fe fd99 	bl	80012d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff3f 	bl	8002634 <LL_ADC_IsDeepPowerDownEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff25 	bl	8002610 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff5a 	bl	8002684 <LL_ADC_IsInternalRegulatorEnabled>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d114      	bne.n	8002800 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff3e 	bl	800265c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027e0:	4b87      	ldr	r3, [pc, #540]	@ (8002a00 <HAL_ADC_Init+0x290>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	4a87      	ldr	r2, [pc, #540]	@ (8002a04 <HAL_ADC_Init+0x294>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	3301      	adds	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027f2:	e002      	b.n	80027fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff3d 	bl	8002684 <LL_ADC_IsInternalRegulatorEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10d      	bne.n	800282c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002814:	f043 0210 	orr.w	r2, r3, #16
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff77 	bl	8002724 <LL_ADC_REG_IsConversionOngoing>
 8002836:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 8129 	bne.w	8002a98 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f040 8125 	bne.w	8002a98 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002852:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002856:	f043 0202 	orr.w	r2, r3, #2
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff36 	bl	80026d4 <LL_ADC_IsEnabled>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d136      	bne.n	80028dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a65      	ldr	r2, [pc, #404]	@ (8002a08 <HAL_ADC_Init+0x298>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_ADC_Init+0x112>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a63      	ldr	r2, [pc, #396]	@ (8002a0c <HAL_ADC_Init+0x29c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10e      	bne.n	80028a0 <HAL_ADC_Init+0x130>
 8002882:	4861      	ldr	r0, [pc, #388]	@ (8002a08 <HAL_ADC_Init+0x298>)
 8002884:	f7ff ff26 	bl	80026d4 <LL_ADC_IsEnabled>
 8002888:	4604      	mov	r4, r0
 800288a:	4860      	ldr	r0, [pc, #384]	@ (8002a0c <HAL_ADC_Init+0x29c>)
 800288c:	f7ff ff22 	bl	80026d4 <LL_ADC_IsEnabled>
 8002890:	4603      	mov	r3, r0
 8002892:	4323      	orrs	r3, r4
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e008      	b.n	80028b2 <HAL_ADC_Init+0x142>
 80028a0:	485b      	ldr	r0, [pc, #364]	@ (8002a10 <HAL_ADC_Init+0x2a0>)
 80028a2:	f7ff ff17 	bl	80026d4 <LL_ADC_IsEnabled>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a53      	ldr	r2, [pc, #332]	@ (8002a08 <HAL_ADC_Init+0x298>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_ADC_Init+0x15a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a51      	ldr	r2, [pc, #324]	@ (8002a0c <HAL_ADC_Init+0x29c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_Init+0x15e>
 80028ca:	4a52      	ldr	r2, [pc, #328]	@ (8002a14 <HAL_ADC_Init+0x2a4>)
 80028cc:	e000      	b.n	80028d0 <HAL_ADC_Init+0x160>
 80028ce:	4a52      	ldr	r2, [pc, #328]	@ (8002a18 <HAL_ADC_Init+0x2a8>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f7ff fd30 	bl	800233c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80028dc:	f7ff fd22 	bl	8002324 <HAL_GetREVID>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d914      	bls.n	8002914 <HAL_ADC_Init+0x1a4>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d110      	bne.n	8002914 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	7d5b      	ldrb	r3, [r3, #21]
 80028f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028fc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002902:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7f1b      	ldrb	r3, [r3, #28]
 8002908:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800290a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800290c:	f043 030c 	orr.w	r3, r3, #12
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	e00d      	b.n	8002930 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7d5b      	ldrb	r3, [r3, #21]
 8002918:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800291e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002924:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7f1b      	ldrb	r3, [r3, #28]
 800292a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7f1b      	ldrb	r3, [r3, #28]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d106      	bne.n	8002946 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	3b01      	subs	r3, #1
 800293e:	045b      	lsls	r3, r3, #17
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	4b2c      	ldr	r3, [pc, #176]	@ (8002a1c <HAL_ADC_Init+0x2ac>)
 800296a:	4013      	ands	r3, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	69b9      	ldr	r1, [r7, #24]
 8002972:	430b      	orrs	r3, r1
 8002974:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fed2 	bl	8002724 <LL_ADC_REG_IsConversionOngoing>
 8002980:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fedf 	bl	800274a <LL_ADC_INJ_IsConversionOngoing>
 800298c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d15f      	bne.n	8002a54 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d15c      	bne.n	8002a54 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7d1b      	ldrb	r3, [r3, #20]
 800299e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002a20 <HAL_ADC_Init+0x2b0>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	430b      	orrs	r3, r1
 80029ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d130      	bne.n	8002a28 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <HAL_ADC_Init+0x2b4>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029da:	3a01      	subs	r2, #1
 80029dc:	0411      	lsls	r1, r2, #16
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80029e8:	4311      	orrs	r1, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029ee:	430a      	orrs	r2, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	611a      	str	r2, [r3, #16]
 80029fc:	e01c      	b.n	8002a38 <HAL_ADC_Init+0x2c8>
 80029fe:	bf00      	nop
 8002a00:	24000004 	.word	0x24000004
 8002a04:	053e2d63 	.word	0x053e2d63
 8002a08:	40022000 	.word	0x40022000
 8002a0c:	40022100 	.word	0x40022100
 8002a10:	58026000 	.word	0x58026000
 8002a14:	40022300 	.word	0x40022300
 8002a18:	58026300 	.word	0x58026300
 8002a1c:	fff0c003 	.word	0xfff0c003
 8002a20:	ffffbffc 	.word	0xffffbffc
 8002a24:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fd16 	bl	8003480 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d10c      	bne.n	8002a76 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	f023 010f 	bic.w	r1, r3, #15
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	1e5a      	subs	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a74:	e007      	b.n	8002a86 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 020f 	bic.w	r2, r2, #15
 8002a84:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	f023 0303 	bic.w	r3, r3, #3
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a96:	e007      	b.n	8002aa8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9c:	f043 0210 	orr.w	r2, r3, #16
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002aa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	@ 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}
 8002ab2:	bf00      	nop

08002ab4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a55      	ldr	r2, [pc, #340]	@ (8002c1c <HAL_ADC_Start_DMA+0x168>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_Start_DMA+0x20>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a54      	ldr	r2, [pc, #336]	@ (8002c20 <HAL_ADC_Start_DMA+0x16c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_Start_DMA+0x24>
 8002ad4:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <HAL_ADC_Start_DMA+0x170>)
 8002ad6:	e000      	b.n	8002ada <HAL_ADC_Start_DMA+0x26>
 8002ad8:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_ADC_Start_DMA+0x174>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fd8a 	bl	80025f4 <LL_ADC_GetMultimode>
 8002ae0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fe1c 	bl	8002724 <LL_ADC_REG_IsConversionOngoing>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 808c 	bne.w	8002c0c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_Start_DMA+0x4e>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e087      	b.n	8002c12 <HAL_ADC_Start_DMA+0x15e>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d002      	beq.n	8002b1c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	d170      	bne.n	8002bfe <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fb91 	bl	8003244 <ADC_Enable>
 8002b22:	4603      	mov	r3, r0
 8002b24:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d163      	bne.n	8002bf4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b30:	4b3e      	ldr	r3, [pc, #248]	@ (8002c2c <HAL_ADC_Start_DMA+0x178>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a37      	ldr	r2, [pc, #220]	@ (8002c20 <HAL_ADC_Start_DMA+0x16c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d002      	beq.n	8002b4c <HAL_ADC_Start_DMA+0x98>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e000      	b.n	8002b4e <HAL_ADC_Start_DMA+0x9a>
 8002b4c:	4b33      	ldr	r3, [pc, #204]	@ (8002c1c <HAL_ADC_Start_DMA+0x168>)
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d002      	beq.n	8002b5c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d006      	beq.n	8002b82 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	f023 0206 	bic.w	r2, r3, #6
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b80:	e002      	b.n	8002b88 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8c:	4a28      	ldr	r2, [pc, #160]	@ (8002c30 <HAL_ADC_Start_DMA+0x17c>)
 8002b8e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b94:	4a27      	ldr	r2, [pc, #156]	@ (8002c34 <HAL_ADC_Start_DMA+0x180>)
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9c:	4a26      	ldr	r2, [pc, #152]	@ (8002c38 <HAL_ADC_Start_DMA+0x184>)
 8002b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	221c      	movs	r2, #28
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0210 	orr.w	r2, r2, #16
 8002bbe:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	f7ff fcb0 	bl	8002530 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3340      	adds	r3, #64	@ 0x40
 8002bda:	4619      	mov	r1, r3
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f001 fb42 	bl	8004268 <HAL_DMA_Start_IT>
 8002be4:	4603      	mov	r3, r0
 8002be6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fd85 	bl	80026fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002bf2:	e00d      	b.n	8002c10 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002bfc:	e008      	b.n	8002c10 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002c0a:	e001      	b.n	8002c10 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40022100 	.word	0x40022100
 8002c24:	40022300 	.word	0x40022300
 8002c28:	58026300 	.word	0x58026300
 8002c2c:	fffff0fe 	.word	0xfffff0fe
 8002c30:	08003359 	.word	0x08003359
 8002c34:	08003431 	.word	0x08003431
 8002c38:	0800344d 	.word	0x0800344d

08002c3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b08d      	sub	sp, #52	@ 0x34
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a65      	ldr	r2, [pc, #404]	@ (8002e14 <HAL_ADC_ConfigChannel+0x1b0>)
 8002c7e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x2a>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e2c7      	b.n	800321e <HAL_ADC_ConfigChannel+0x5ba>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fd42 	bl	8002724 <LL_ADC_REG_IsConversionOngoing>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f040 82ac 	bne.w	8003200 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db2c      	blt.n	8002d0a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d108      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x6a>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0e9b      	lsrs	r3, r3, #26
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	e016      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x98>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	613b      	str	r3, [r7, #16]
  return result;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	e003      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	69d1      	ldr	r1, [r2, #28]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	430b      	orrs	r3, r1
 8002d08:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	f7ff fbde 	bl	80024d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fcff 	bl	8002724 <LL_ADC_REG_IsConversionOngoing>
 8002d26:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fd0c 	bl	800274a <LL_ADC_INJ_IsConversionOngoing>
 8002d32:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 80b8 	bne.w	8002eac <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80b4 	bne.w	8002eac <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6819      	ldr	r1, [r3, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f7ff fc00 	bl	8002556 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d56:	4b30      	ldr	r3, [pc, #192]	@ (8002e18 <HAL_ADC_ConfigChannel+0x1b4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002d5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d62:	d10b      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x118>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	e01d      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x154>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x13e>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	e00a      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x154>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d02c      	beq.n	8002e1c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6919      	ldr	r1, [r3, #16]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f7ff fb1b 	bl	800240a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6919      	ldr	r1, [r3, #16]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	7e5b      	ldrb	r3, [r3, #25]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x186>
 8002de4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002de8:	e000      	b.n	8002dec <HAL_ADC_ConfigChannel+0x188>
 8002dea:	2300      	movs	r3, #0
 8002dec:	461a      	mov	r2, r3
 8002dee:	f7ff fb45 	bl	800247c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6919      	ldr	r1, [r3, #16]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	7e1b      	ldrb	r3, [r3, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x1a4>
 8002e02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e06:	e000      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x1a6>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f7ff fb1d 	bl	800244a <LL_ADC_SetDataRightShift>
 8002e10:	e04c      	b.n	8002eac <HAL_ADC_ConfigChannel+0x248>
 8002e12:	bf00      	nop
 8002e14:	47ff0000 	.word	0x47ff0000
 8002e18:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	069b      	lsls	r3, r3, #26
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d107      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e3e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	069b      	lsls	r3, r3, #26
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d107      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e62:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	069b      	lsls	r3, r3, #26
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d107      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e86:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	069b      	lsls	r3, r3, #26
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d107      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002eaa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fc0f 	bl	80026d4 <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f040 81aa 	bne.w	8003212 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6819      	ldr	r1, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f7ff fb6e 	bl	80025ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a87      	ldr	r2, [pc, #540]	@ (80030f4 <HAL_ADC_ConfigChannel+0x490>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f040 809a 	bne.w	8003010 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4984      	ldr	r1, [pc, #528]	@ (80030f8 <HAL_ADC_ConfigChannel+0x494>)
 8002ee6:	428b      	cmp	r3, r1
 8002ee8:	d147      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x316>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4983      	ldr	r1, [pc, #524]	@ (80030fc <HAL_ADC_ConfigChannel+0x498>)
 8002ef0:	428b      	cmp	r3, r1
 8002ef2:	d040      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x312>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4981      	ldr	r1, [pc, #516]	@ (8003100 <HAL_ADC_ConfigChannel+0x49c>)
 8002efa:	428b      	cmp	r3, r1
 8002efc:	d039      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x30e>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4980      	ldr	r1, [pc, #512]	@ (8003104 <HAL_ADC_ConfigChannel+0x4a0>)
 8002f04:	428b      	cmp	r3, r1
 8002f06:	d032      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x30a>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	497e      	ldr	r1, [pc, #504]	@ (8003108 <HAL_ADC_ConfigChannel+0x4a4>)
 8002f0e:	428b      	cmp	r3, r1
 8002f10:	d02b      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x306>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	497d      	ldr	r1, [pc, #500]	@ (800310c <HAL_ADC_ConfigChannel+0x4a8>)
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	d024      	beq.n	8002f66 <HAL_ADC_ConfigChannel+0x302>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	497b      	ldr	r1, [pc, #492]	@ (8003110 <HAL_ADC_ConfigChannel+0x4ac>)
 8002f22:	428b      	cmp	r3, r1
 8002f24:	d01d      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0x2fe>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	497a      	ldr	r1, [pc, #488]	@ (8003114 <HAL_ADC_ConfigChannel+0x4b0>)
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	d016      	beq.n	8002f5e <HAL_ADC_ConfigChannel+0x2fa>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4978      	ldr	r1, [pc, #480]	@ (8003118 <HAL_ADC_ConfigChannel+0x4b4>)
 8002f36:	428b      	cmp	r3, r1
 8002f38:	d00f      	beq.n	8002f5a <HAL_ADC_ConfigChannel+0x2f6>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4977      	ldr	r1, [pc, #476]	@ (800311c <HAL_ADC_ConfigChannel+0x4b8>)
 8002f40:	428b      	cmp	r3, r1
 8002f42:	d008      	beq.n	8002f56 <HAL_ADC_ConfigChannel+0x2f2>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4975      	ldr	r1, [pc, #468]	@ (8003120 <HAL_ADC_ConfigChannel+0x4bc>)
 8002f4a:	428b      	cmp	r3, r1
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x2ee>
 8002f4e:	4b75      	ldr	r3, [pc, #468]	@ (8003124 <HAL_ADC_ConfigChannel+0x4c0>)
 8002f50:	e05a      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f52:	2300      	movs	r3, #0
 8002f54:	e058      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f56:	4b74      	ldr	r3, [pc, #464]	@ (8003128 <HAL_ADC_ConfigChannel+0x4c4>)
 8002f58:	e056      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f5a:	4b74      	ldr	r3, [pc, #464]	@ (800312c <HAL_ADC_ConfigChannel+0x4c8>)
 8002f5c:	e054      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8003118 <HAL_ADC_ConfigChannel+0x4b4>)
 8002f60:	e052      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f62:	4b6c      	ldr	r3, [pc, #432]	@ (8003114 <HAL_ADC_ConfigChannel+0x4b0>)
 8002f64:	e050      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f66:	4b72      	ldr	r3, [pc, #456]	@ (8003130 <HAL_ADC_ConfigChannel+0x4cc>)
 8002f68:	e04e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f6a:	4b72      	ldr	r3, [pc, #456]	@ (8003134 <HAL_ADC_ConfigChannel+0x4d0>)
 8002f6c:	e04c      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f6e:	4b72      	ldr	r3, [pc, #456]	@ (8003138 <HAL_ADC_ConfigChannel+0x4d4>)
 8002f70:	e04a      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f72:	4b72      	ldr	r3, [pc, #456]	@ (800313c <HAL_ADC_ConfigChannel+0x4d8>)
 8002f74:	e048      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e046      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4970      	ldr	r1, [pc, #448]	@ (8003140 <HAL_ADC_ConfigChannel+0x4dc>)
 8002f80:	428b      	cmp	r3, r1
 8002f82:	d140      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x3a2>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	495c      	ldr	r1, [pc, #368]	@ (80030fc <HAL_ADC_ConfigChannel+0x498>)
 8002f8a:	428b      	cmp	r3, r1
 8002f8c:	d039      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x39e>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	495b      	ldr	r1, [pc, #364]	@ (8003100 <HAL_ADC_ConfigChannel+0x49c>)
 8002f94:	428b      	cmp	r3, r1
 8002f96:	d032      	beq.n	8002ffe <HAL_ADC_ConfigChannel+0x39a>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4959      	ldr	r1, [pc, #356]	@ (8003104 <HAL_ADC_ConfigChannel+0x4a0>)
 8002f9e:	428b      	cmp	r3, r1
 8002fa0:	d02b      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x396>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4958      	ldr	r1, [pc, #352]	@ (8003108 <HAL_ADC_ConfigChannel+0x4a4>)
 8002fa8:	428b      	cmp	r3, r1
 8002faa:	d024      	beq.n	8002ff6 <HAL_ADC_ConfigChannel+0x392>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4956      	ldr	r1, [pc, #344]	@ (800310c <HAL_ADC_ConfigChannel+0x4a8>)
 8002fb2:	428b      	cmp	r3, r1
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_ADC_ConfigChannel+0x38e>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4955      	ldr	r1, [pc, #340]	@ (8003110 <HAL_ADC_ConfigChannel+0x4ac>)
 8002fbc:	428b      	cmp	r3, r1
 8002fbe:	d016      	beq.n	8002fee <HAL_ADC_ConfigChannel+0x38a>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4953      	ldr	r1, [pc, #332]	@ (8003114 <HAL_ADC_ConfigChannel+0x4b0>)
 8002fc6:	428b      	cmp	r3, r1
 8002fc8:	d00f      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x386>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4952      	ldr	r1, [pc, #328]	@ (8003118 <HAL_ADC_ConfigChannel+0x4b4>)
 8002fd0:	428b      	cmp	r3, r1
 8002fd2:	d008      	beq.n	8002fe6 <HAL_ADC_ConfigChannel+0x382>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4951      	ldr	r1, [pc, #324]	@ (8003120 <HAL_ADC_ConfigChannel+0x4bc>)
 8002fda:	428b      	cmp	r3, r1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x37e>
 8002fde:	4b51      	ldr	r3, [pc, #324]	@ (8003124 <HAL_ADC_ConfigChannel+0x4c0>)
 8002fe0:	e012      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e010      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002fe6:	4b51      	ldr	r3, [pc, #324]	@ (800312c <HAL_ADC_ConfigChannel+0x4c8>)
 8002fe8:	e00e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002fea:	4b4b      	ldr	r3, [pc, #300]	@ (8003118 <HAL_ADC_ConfigChannel+0x4b4>)
 8002fec:	e00c      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002fee:	4b49      	ldr	r3, [pc, #292]	@ (8003114 <HAL_ADC_ConfigChannel+0x4b0>)
 8002ff0:	e00a      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8003130 <HAL_ADC_ConfigChannel+0x4cc>)
 8002ff4:	e008      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8003134 <HAL_ADC_ConfigChannel+0x4d0>)
 8002ff8:	e006      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8003138 <HAL_ADC_ConfigChannel+0x4d4>)
 8002ffc:	e004      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8002ffe:	4b4f      	ldr	r3, [pc, #316]	@ (800313c <HAL_ADC_ConfigChannel+0x4d8>)
 8003000:	e002      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3a4>
 8003006:	2300      	movs	r3, #0
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7ff f9ca 	bl	80023a4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f280 80fc 	bge.w	8003212 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a36      	ldr	r2, [pc, #216]	@ (80030f8 <HAL_ADC_ConfigChannel+0x494>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_ADC_ConfigChannel+0x3ca>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a45      	ldr	r2, [pc, #276]	@ (8003140 <HAL_ADC_ConfigChannel+0x4dc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x3ce>
 800302e:	4b45      	ldr	r3, [pc, #276]	@ (8003144 <HAL_ADC_ConfigChannel+0x4e0>)
 8003030:	e000      	b.n	8003034 <HAL_ADC_ConfigChannel+0x3d0>
 8003032:	4b45      	ldr	r3, [pc, #276]	@ (8003148 <HAL_ADC_ConfigChannel+0x4e4>)
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f9a7 	bl	8002388 <LL_ADC_GetCommonPathInternalCh>
 800303a:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2d      	ldr	r2, [pc, #180]	@ (80030f8 <HAL_ADC_ConfigChannel+0x494>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x3ec>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a3d      	ldr	r2, [pc, #244]	@ (8003140 <HAL_ADC_ConfigChannel+0x4dc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d10e      	bne.n	800306e <HAL_ADC_ConfigChannel+0x40a>
 8003050:	4829      	ldr	r0, [pc, #164]	@ (80030f8 <HAL_ADC_ConfigChannel+0x494>)
 8003052:	f7ff fb3f 	bl	80026d4 <LL_ADC_IsEnabled>
 8003056:	4604      	mov	r4, r0
 8003058:	4839      	ldr	r0, [pc, #228]	@ (8003140 <HAL_ADC_ConfigChannel+0x4dc>)
 800305a:	f7ff fb3b 	bl	80026d4 <LL_ADC_IsEnabled>
 800305e:	4603      	mov	r3, r0
 8003060:	4323      	orrs	r3, r4
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf0c      	ite	eq
 8003066:	2301      	moveq	r3, #1
 8003068:	2300      	movne	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e008      	b.n	8003080 <HAL_ADC_ConfigChannel+0x41c>
 800306e:	4837      	ldr	r0, [pc, #220]	@ (800314c <HAL_ADC_ConfigChannel+0x4e8>)
 8003070:	f7ff fb30 	bl	80026d4 <LL_ADC_IsEnabled>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80b3 	beq.w	80031ec <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a31      	ldr	r2, [pc, #196]	@ (8003150 <HAL_ADC_ConfigChannel+0x4ec>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d165      	bne.n	800315c <HAL_ADC_ConfigChannel+0x4f8>
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d160      	bne.n	800315c <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2b      	ldr	r2, [pc, #172]	@ (800314c <HAL_ADC_ConfigChannel+0x4e8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f040 80b6 	bne.w	8003212 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a13      	ldr	r2, [pc, #76]	@ (80030f8 <HAL_ADC_ConfigChannel+0x494>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d004      	beq.n	80030ba <HAL_ADC_ConfigChannel+0x456>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <HAL_ADC_ConfigChannel+0x4dc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x45a>
 80030ba:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <HAL_ADC_ConfigChannel+0x4e0>)
 80030bc:	e000      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x45c>
 80030be:	4a22      	ldr	r2, [pc, #136]	@ (8003148 <HAL_ADC_ConfigChannel+0x4e4>)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f7ff f94a 	bl	8002362 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ce:	4b21      	ldr	r3, [pc, #132]	@ (8003154 <HAL_ADC_ConfigChannel+0x4f0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	4a20      	ldr	r2, [pc, #128]	@ (8003158 <HAL_ADC_ConfigChannel+0x4f4>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	099b      	lsrs	r3, r3, #6
 80030dc:	3301      	adds	r3, #1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80030e2:	e002      	b.n	80030ea <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f9      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f0:	e08f      	b.n	8003212 <HAL_ADC_ConfigChannel+0x5ae>
 80030f2:	bf00      	nop
 80030f4:	47ff0000 	.word	0x47ff0000
 80030f8:	40022000 	.word	0x40022000
 80030fc:	04300002 	.word	0x04300002
 8003100:	08600004 	.word	0x08600004
 8003104:	0c900008 	.word	0x0c900008
 8003108:	10c00010 	.word	0x10c00010
 800310c:	14f00020 	.word	0x14f00020
 8003110:	2a000400 	.word	0x2a000400
 8003114:	2e300800 	.word	0x2e300800
 8003118:	32601000 	.word	0x32601000
 800311c:	43210000 	.word	0x43210000
 8003120:	4b840000 	.word	0x4b840000
 8003124:	4fb80000 	.word	0x4fb80000
 8003128:	47520000 	.word	0x47520000
 800312c:	36902000 	.word	0x36902000
 8003130:	25b00200 	.word	0x25b00200
 8003134:	21800100 	.word	0x21800100
 8003138:	1d500080 	.word	0x1d500080
 800313c:	19200040 	.word	0x19200040
 8003140:	40022100 	.word	0x40022100
 8003144:	40022300 	.word	0x40022300
 8003148:	58026300 	.word	0x58026300
 800314c:	58026000 	.word	0x58026000
 8003150:	cb840000 	.word	0xcb840000
 8003154:	24000004 	.word	0x24000004
 8003158:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a31      	ldr	r2, [pc, #196]	@ (8003228 <HAL_ADC_ConfigChannel+0x5c4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d11e      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x540>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d119      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2d      	ldr	r2, [pc, #180]	@ (800322c <HAL_ADC_ConfigChannel+0x5c8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d14b      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2c      	ldr	r2, [pc, #176]	@ (8003230 <HAL_ADC_ConfigChannel+0x5cc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_ADC_ConfigChannel+0x52a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2a      	ldr	r2, [pc, #168]	@ (8003234 <HAL_ADC_ConfigChannel+0x5d0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x52e>
 800318e:	4a2a      	ldr	r2, [pc, #168]	@ (8003238 <HAL_ADC_ConfigChannel+0x5d4>)
 8003190:	e000      	b.n	8003194 <HAL_ADC_ConfigChannel+0x530>
 8003192:	4a2a      	ldr	r2, [pc, #168]	@ (800323c <HAL_ADC_ConfigChannel+0x5d8>)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	f7ff f8e0 	bl	8002362 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a2:	e036      	b.n	8003212 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a25      	ldr	r2, [pc, #148]	@ (8003240 <HAL_ADC_ConfigChannel+0x5dc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d131      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x5ae>
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d12c      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <HAL_ADC_ConfigChannel+0x5c8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d127      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003230 <HAL_ADC_ConfigChannel+0x5cc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x572>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a18      	ldr	r2, [pc, #96]	@ (8003234 <HAL_ADC_ConfigChannel+0x5d0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_ADC_ConfigChannel+0x576>
 80031d6:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_ADC_ConfigChannel+0x5d4>)
 80031d8:	e000      	b.n	80031dc <HAL_ADC_ConfigChannel+0x578>
 80031da:	4a18      	ldr	r2, [pc, #96]	@ (800323c <HAL_ADC_ConfigChannel+0x5d8>)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031e2:	4619      	mov	r1, r3
 80031e4:	4610      	mov	r0, r2
 80031e6:	f7ff f8bc 	bl	8002362 <LL_ADC_SetCommonPathInternalCh>
 80031ea:	e012      	b.n	8003212 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80031fe:	e008      	b.n	8003212 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800321a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800321e:	4618      	mov	r0, r3
 8003220:	3734      	adds	r7, #52	@ 0x34
 8003222:	46bd      	mov	sp, r7
 8003224:	bd90      	pop	{r4, r7, pc}
 8003226:	bf00      	nop
 8003228:	c7520000 	.word	0xc7520000
 800322c:	58026000 	.word	0x58026000
 8003230:	40022000 	.word	0x40022000
 8003234:	40022100 	.word	0x40022100
 8003238:	40022300 	.word	0x40022300
 800323c:	58026300 	.word	0x58026300
 8003240:	cfb80000 	.word	0xcfb80000

08003244 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fa3f 	bl	80026d4 <LL_ADC_IsEnabled>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d16e      	bne.n	800333a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	4b38      	ldr	r3, [pc, #224]	@ (8003344 <ADC_Enable+0x100>)
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	f043 0210 	orr.w	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e05a      	b.n	800333c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fa0e 	bl	80026ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003290:	f7ff f818 	bl	80022c4 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2b      	ldr	r2, [pc, #172]	@ (8003348 <ADC_Enable+0x104>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <ADC_Enable+0x66>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a29      	ldr	r2, [pc, #164]	@ (800334c <ADC_Enable+0x108>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <ADC_Enable+0x6a>
 80032aa:	4b29      	ldr	r3, [pc, #164]	@ (8003350 <ADC_Enable+0x10c>)
 80032ac:	e000      	b.n	80032b0 <ADC_Enable+0x6c>
 80032ae:	4b29      	ldr	r3, [pc, #164]	@ (8003354 <ADC_Enable+0x110>)
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff f99f 	bl	80025f4 <LL_ADC_GetMultimode>
 80032b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a23      	ldr	r2, [pc, #140]	@ (800334c <ADC_Enable+0x108>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d002      	beq.n	80032c8 <ADC_Enable+0x84>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	e000      	b.n	80032ca <ADC_Enable+0x86>
 80032c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003348 <ADC_Enable+0x104>)
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02c      	beq.n	800332c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d130      	bne.n	800333a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d8:	e028      	b.n	800332c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f9f8 	bl	80026d4 <LL_ADC_IsEnabled>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d104      	bne.n	80032f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff f9dc 	bl	80026ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032f4:	f7fe ffe6 	bl	80022c4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d914      	bls.n	800332c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d00d      	beq.n	800332c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	f043 0210 	orr.w	r2, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e007      	b.n	800333c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d1cf      	bne.n	80032da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	8000003f 	.word	0x8000003f
 8003348:	40022000 	.word	0x40022000
 800334c:	40022100 	.word	0x40022100
 8003350:	40022300 	.word	0x40022300
 8003354:	58026300 	.word	0x58026300

08003358 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800336e:	2b00      	cmp	r3, #0
 8003370:	d14b      	bne.n	800340a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d021      	beq.n	80033d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff f88e 	bl	80024b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d032      	beq.n	8003402 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d12b      	bne.n	8003402 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d11f      	bne.n	8003402 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80033ce:	e018      	b.n	8003402 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d111      	bne.n	8003402 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d105      	bne.n	8003402 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f7fd fe1c 	bl	8001040 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003408:	e00e      	b.n	8003428 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff fc1a 	bl	8002c50 <HAL_ADC_ErrorCallback>
}
 800341c:	e004      	b.n	8003428 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7ff fbfc 	bl	8002c3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	f043 0204 	orr.w	r2, r3, #4
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff fbec 	bl	8002c50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a7a      	ldr	r2, [pc, #488]	@ (8003678 <ADC_ConfigureBoostMode+0x1f8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <ADC_ConfigureBoostMode+0x1c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a79      	ldr	r2, [pc, #484]	@ (800367c <ADC_ConfigureBoostMode+0x1fc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d109      	bne.n	80034b0 <ADC_ConfigureBoostMode+0x30>
 800349c:	4b78      	ldr	r3, [pc, #480]	@ (8003680 <ADC_ConfigureBoostMode+0x200>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf14      	ite	ne
 80034a8:	2301      	movne	r3, #1
 80034aa:	2300      	moveq	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	e008      	b.n	80034c2 <ADC_ConfigureBoostMode+0x42>
 80034b0:	4b74      	ldr	r3, [pc, #464]	@ (8003684 <ADC_ConfigureBoostMode+0x204>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01c      	beq.n	8003500 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80034c6:	f00a f973 	bl	800d7b0 <HAL_RCC_GetHCLKFreq>
 80034ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034d4:	d010      	beq.n	80034f8 <ADC_ConfigureBoostMode+0x78>
 80034d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034da:	d873      	bhi.n	80035c4 <ADC_ConfigureBoostMode+0x144>
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e0:	d002      	beq.n	80034e8 <ADC_ConfigureBoostMode+0x68>
 80034e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034e6:	d16d      	bne.n	80035c4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	60fb      	str	r3, [r7, #12]
        break;
 80034f6:	e068      	b.n	80035ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	60fb      	str	r3, [r7, #12]
        break;
 80034fe:	e064      	b.n	80035ca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003500:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	f00b fbb8 	bl	800ec7c <HAL_RCCEx_GetPeriphCLKFreq>
 800350c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003516:	d051      	beq.n	80035bc <ADC_ConfigureBoostMode+0x13c>
 8003518:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800351c:	d854      	bhi.n	80035c8 <ADC_ConfigureBoostMode+0x148>
 800351e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003522:	d047      	beq.n	80035b4 <ADC_ConfigureBoostMode+0x134>
 8003524:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003528:	d84e      	bhi.n	80035c8 <ADC_ConfigureBoostMode+0x148>
 800352a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800352e:	d03d      	beq.n	80035ac <ADC_ConfigureBoostMode+0x12c>
 8003530:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003534:	d848      	bhi.n	80035c8 <ADC_ConfigureBoostMode+0x148>
 8003536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800353a:	d033      	beq.n	80035a4 <ADC_ConfigureBoostMode+0x124>
 800353c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003540:	d842      	bhi.n	80035c8 <ADC_ConfigureBoostMode+0x148>
 8003542:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003546:	d029      	beq.n	800359c <ADC_ConfigureBoostMode+0x11c>
 8003548:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800354c:	d83c      	bhi.n	80035c8 <ADC_ConfigureBoostMode+0x148>
 800354e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003552:	d01a      	beq.n	800358a <ADC_ConfigureBoostMode+0x10a>
 8003554:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003558:	d836      	bhi.n	80035c8 <ADC_ConfigureBoostMode+0x148>
 800355a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800355e:	d014      	beq.n	800358a <ADC_ConfigureBoostMode+0x10a>
 8003560:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003564:	d830      	bhi.n	80035c8 <ADC_ConfigureBoostMode+0x148>
 8003566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800356a:	d00e      	beq.n	800358a <ADC_ConfigureBoostMode+0x10a>
 800356c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003570:	d82a      	bhi.n	80035c8 <ADC_ConfigureBoostMode+0x148>
 8003572:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003576:	d008      	beq.n	800358a <ADC_ConfigureBoostMode+0x10a>
 8003578:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800357c:	d824      	bhi.n	80035c8 <ADC_ConfigureBoostMode+0x148>
 800357e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003582:	d002      	beq.n	800358a <ADC_ConfigureBoostMode+0x10a>
 8003584:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003588:	d11e      	bne.n	80035c8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	0c9b      	lsrs	r3, r3, #18
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	60fb      	str	r3, [r7, #12]
        break;
 800359a:	e016      	b.n	80035ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]
        break;
 80035a2:	e012      	b.n	80035ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	60fb      	str	r3, [r7, #12]
        break;
 80035aa:	e00e      	b.n	80035ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	60fb      	str	r3, [r7, #12]
        break;
 80035b2:	e00a      	b.n	80035ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	09db      	lsrs	r3, r3, #7
 80035b8:	60fb      	str	r3, [r7, #12]
        break;
 80035ba:	e006      	b.n	80035ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	60fb      	str	r3, [r7, #12]
        break;
 80035c2:	e002      	b.n	80035ca <ADC_ConfigureBoostMode+0x14a>
        break;
 80035c4:	bf00      	nop
 80035c6:	e000      	b.n	80035ca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80035c8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80035ca:	f7fe feab 	bl	8002324 <HAL_GetREVID>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d815      	bhi.n	8003604 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a2b      	ldr	r2, [pc, #172]	@ (8003688 <ADC_ConfigureBoostMode+0x208>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d908      	bls.n	80035f2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80035f0:	e03e      	b.n	8003670 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003600:	609a      	str	r2, [r3, #8]
}
 8003602:	e035      	b.n	8003670 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a1f      	ldr	r2, [pc, #124]	@ (800368c <ADC_ConfigureBoostMode+0x20c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d808      	bhi.n	8003624 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003620:	609a      	str	r2, [r3, #8]
}
 8003622:	e025      	b.n	8003670 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a1a      	ldr	r2, [pc, #104]	@ (8003690 <ADC_ConfigureBoostMode+0x210>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d80a      	bhi.n	8003642 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	e016      	b.n	8003670 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <ADC_ConfigureBoostMode+0x214>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d80a      	bhi.n	8003660 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365c:	609a      	str	r2, [r3, #8]
}
 800365e:	e007      	b.n	8003670 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40022000 	.word	0x40022000
 800367c:	40022100 	.word	0x40022100
 8003680:	40022300 	.word	0x40022300
 8003684:	58026300 	.word	0x58026300
 8003688:	01312d00 	.word	0x01312d00
 800368c:	005f5e10 	.word	0x005f5e10
 8003690:	00bebc20 	.word	0x00bebc20
 8003694:	017d7840 	.word	0x017d7840

08003698 <LL_ADC_IsEnabled>:
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <LL_ADC_IsEnabled+0x18>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <LL_ADC_IsEnabled+0x1a>
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <LL_ADC_REG_IsConversionOngoing>:
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d101      	bne.n	80036d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b09f      	sub	sp, #124	@ 0x7c
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036fe:	2302      	movs	r3, #2
 8003700:	e0be      	b.n	8003880 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800370e:	2300      	movs	r3, #0
 8003710:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a5c      	ldr	r2, [pc, #368]	@ (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d102      	bne.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800371c:	4b5b      	ldr	r3, [pc, #364]	@ (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	e001      	b.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e09d      	b.n	8003880 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ffb9 	bl	80036be <LL_ADC_REG_IsConversionOngoing>
 800374c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff ffb3 	bl	80036be <LL_ADC_REG_IsConversionOngoing>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d17f      	bne.n	800385e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800375e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003760:	2b00      	cmp	r3, #0
 8003762:	d17c      	bne.n	800385e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a47      	ldr	r2, [pc, #284]	@ (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a46      	ldr	r2, [pc, #280]	@ (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003778:	4b45      	ldr	r3, [pc, #276]	@ (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800377a:	e000      	b.n	800377e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800377c:	4b45      	ldr	r3, [pc, #276]	@ (8003894 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800377e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d039      	beq.n	80037fc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	431a      	orrs	r2, r3
 8003796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003798:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3a      	ldr	r2, [pc, #232]	@ (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d004      	beq.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a38      	ldr	r2, [pc, #224]	@ (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10e      	bne.n	80037cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80037ae:	4836      	ldr	r0, [pc, #216]	@ (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037b0:	f7ff ff72 	bl	8003698 <LL_ADC_IsEnabled>
 80037b4:	4604      	mov	r4, r0
 80037b6:	4835      	ldr	r0, [pc, #212]	@ (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037b8:	f7ff ff6e 	bl	8003698 <LL_ADC_IsEnabled>
 80037bc:	4603      	mov	r3, r0
 80037be:	4323      	orrs	r3, r4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e008      	b.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80037cc:	4832      	ldr	r0, [pc, #200]	@ (8003898 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80037ce:	f7ff ff63 	bl	8003698 <LL_ADC_IsEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d047      	beq.n	8003872 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	4b2d      	ldr	r3, [pc, #180]	@ (800389c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	6811      	ldr	r1, [r2, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	431a      	orrs	r2, r3
 80037f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037fa:	e03a      	b.n	8003872 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80037fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003806:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1e      	ldr	r2, [pc, #120]	@ (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d10e      	bne.n	800383a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800381c:	481a      	ldr	r0, [pc, #104]	@ (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800381e:	f7ff ff3b 	bl	8003698 <LL_ADC_IsEnabled>
 8003822:	4604      	mov	r4, r0
 8003824:	4819      	ldr	r0, [pc, #100]	@ (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003826:	f7ff ff37 	bl	8003698 <LL_ADC_IsEnabled>
 800382a:	4603      	mov	r3, r0
 800382c:	4323      	orrs	r3, r4
 800382e:	2b00      	cmp	r3, #0
 8003830:	bf0c      	ite	eq
 8003832:	2301      	moveq	r3, #1
 8003834:	2300      	movne	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	e008      	b.n	800384c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800383a:	4817      	ldr	r0, [pc, #92]	@ (8003898 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800383c:	f7ff ff2c 	bl	8003698 <LL_ADC_IsEnabled>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d010      	beq.n	8003872 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	4b11      	ldr	r3, [pc, #68]	@ (800389c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003856:	4013      	ands	r3, r2
 8003858:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800385a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800385c:	e009      	b.n	8003872 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003870:	e000      	b.n	8003874 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003872:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800387c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003880:	4618      	mov	r0, r3
 8003882:	377c      	adds	r7, #124	@ 0x7c
 8003884:	46bd      	mov	sp, r7
 8003886:	bd90      	pop	{r4, r7, pc}
 8003888:	40022000 	.word	0x40022000
 800388c:	40022100 	.word	0x40022100
 8003890:	40022300 	.word	0x40022300
 8003894:	58026300 	.word	0x58026300
 8003898:	58026000 	.word	0x58026000
 800389c:	fffff0e0 	.word	0xfffff0e0

080038a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <__NVIC_SetPriorityGrouping+0x40>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038bc:	4013      	ands	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038c8:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ce:	4a04      	ldr	r2, [pc, #16]	@ (80038e0 <__NVIC_SetPriorityGrouping+0x40>)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	60d3      	str	r3, [r2, #12]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000ed00 	.word	0xe000ed00
 80038e4:	05fa0000 	.word	0x05fa0000

080038e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <__NVIC_GetPriorityGrouping+0x18>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 0307 	and.w	r3, r3, #7
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800390e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003912:	2b00      	cmp	r3, #0
 8003914:	db0b      	blt.n	800392e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	4907      	ldr	r1, [pc, #28]	@ (800393c <__NVIC_EnableIRQ+0x38>)
 800391e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2001      	movs	r0, #1
 8003926:	fa00 f202 	lsl.w	r2, r0, r2
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000e100 	.word	0xe000e100

08003940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800394c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003950:	2b00      	cmp	r3, #0
 8003952:	db0a      	blt.n	800396a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	b2da      	uxtb	r2, r3
 8003958:	490c      	ldr	r1, [pc, #48]	@ (800398c <__NVIC_SetPriority+0x4c>)
 800395a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	440b      	add	r3, r1
 8003964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003968:	e00a      	b.n	8003980 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4908      	ldr	r1, [pc, #32]	@ (8003990 <__NVIC_SetPriority+0x50>)
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3b04      	subs	r3, #4
 8003978:	0112      	lsls	r2, r2, #4
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	440b      	add	r3, r1
 800397e:	761a      	strb	r2, [r3, #24]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000e100 	.word	0xe000e100
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	@ 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f1c3 0307 	rsb	r3, r3, #7
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	bf28      	it	cs
 80039b2:	2304      	movcs	r3, #4
 80039b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3304      	adds	r3, #4
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	d902      	bls.n	80039c4 <NVIC_EncodePriority+0x30>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3b03      	subs	r3, #3
 80039c2:	e000      	b.n	80039c6 <NVIC_EncodePriority+0x32>
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	401a      	ands	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039dc:	f04f 31ff 	mov.w	r1, #4294967295
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	43d9      	mvns	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ec:	4313      	orrs	r3, r2
         );
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3724      	adds	r7, #36	@ 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a0c:	d301      	bcc.n	8003a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00f      	b.n	8003a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a12:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <SysTick_Config+0x40>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a1a:	210f      	movs	r1, #15
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	f7ff ff8e 	bl	8003940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a24:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <SysTick_Config+0x40>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2a:	4b04      	ldr	r3, [pc, #16]	@ (8003a3c <SysTick_Config+0x40>)
 8003a2c:	2207      	movs	r2, #7
 8003a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	e000e010 	.word	0xe000e010

08003a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff29 	bl	80038a0 <__NVIC_SetPriorityGrouping>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b086      	sub	sp, #24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a64:	f7ff ff40 	bl	80038e8 <__NVIC_GetPriorityGrouping>
 8003a68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	6978      	ldr	r0, [r7, #20]
 8003a70:	f7ff ff90 	bl	8003994 <NVIC_EncodePriority>
 8003a74:	4602      	mov	r2, r0
 8003a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff5f 	bl	8003940 <__NVIC_SetPriority>
}
 8003a82:	bf00      	nop
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff33 	bl	8003904 <__NVIC_EnableIRQ>
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ffa4 	bl	80039fc <SysTick_Config>
 8003ab4:	4603      	mov	r3, r0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003ac4:	f3bf 8f5f 	dmb	sy
}
 8003ac8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003aca:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <HAL_MPU_Disable+0x28>)
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	4a06      	ldr	r2, [pc, #24]	@ (8003ae8 <HAL_MPU_Disable+0x28>)
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003ad6:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <HAL_MPU_Disable+0x2c>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	605a      	str	r2, [r3, #4]
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000ed00 	.word	0xe000ed00
 8003aec:	e000ed90 	.word	0xe000ed90

08003af0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003af8:	4a0b      	ldr	r2, [pc, #44]	@ (8003b28 <HAL_MPU_Enable+0x38>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_MPU_Enable+0x3c>)
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	4a09      	ldr	r2, [pc, #36]	@ (8003b2c <HAL_MPU_Enable+0x3c>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003b0e:	f3bf 8f4f 	dsb	sy
}
 8003b12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b14:	f3bf 8f6f 	isb	sy
}
 8003b18:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	e000ed90 	.word	0xe000ed90
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	785a      	ldrb	r2, [r3, #1]
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <HAL_MPU_ConfigRegion+0x7c>)
 8003b3e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003b40:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <HAL_MPU_ConfigRegion+0x7c>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <HAL_MPU_ConfigRegion+0x7c>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003b4c:	4a17      	ldr	r2, [pc, #92]	@ (8003bac <HAL_MPU_ConfigRegion+0x7c>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	7b1b      	ldrb	r3, [r3, #12]
 8003b58:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7adb      	ldrb	r3, [r3, #11]
 8003b5e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7a9b      	ldrb	r3, [r3, #10]
 8003b66:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	7b5b      	ldrb	r3, [r3, #13]
 8003b6e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	7b9b      	ldrb	r3, [r3, #14]
 8003b76:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7bdb      	ldrb	r3, [r3, #15]
 8003b7e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7a5b      	ldrb	r3, [r3, #9]
 8003b86:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7a1b      	ldrb	r3, [r3, #8]
 8003b8e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b90:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	7812      	ldrb	r2, [r2, #0]
 8003b96:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b98:	4a04      	ldr	r2, [pc, #16]	@ (8003bac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003b9a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b9c:	6113      	str	r3, [r2, #16]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000ed90 	.word	0xe000ed90

08003bb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003bb8:	f7fe fb84 	bl	80022c4 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e316      	b.n	80041f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a66      	ldr	r2, [pc, #408]	@ (8003d68 <HAL_DMA_Init+0x1b8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d04a      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a65      	ldr	r2, [pc, #404]	@ (8003d6c <HAL_DMA_Init+0x1bc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d045      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a63      	ldr	r2, [pc, #396]	@ (8003d70 <HAL_DMA_Init+0x1c0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d040      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a62      	ldr	r2, [pc, #392]	@ (8003d74 <HAL_DMA_Init+0x1c4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d03b      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a60      	ldr	r2, [pc, #384]	@ (8003d78 <HAL_DMA_Init+0x1c8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d036      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a5f      	ldr	r2, [pc, #380]	@ (8003d7c <HAL_DMA_Init+0x1cc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d031      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5d      	ldr	r2, [pc, #372]	@ (8003d80 <HAL_DMA_Init+0x1d0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02c      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a5c      	ldr	r2, [pc, #368]	@ (8003d84 <HAL_DMA_Init+0x1d4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d027      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a5a      	ldr	r2, [pc, #360]	@ (8003d88 <HAL_DMA_Init+0x1d8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d022      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a59      	ldr	r2, [pc, #356]	@ (8003d8c <HAL_DMA_Init+0x1dc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d01d      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a57      	ldr	r2, [pc, #348]	@ (8003d90 <HAL_DMA_Init+0x1e0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d018      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a56      	ldr	r2, [pc, #344]	@ (8003d94 <HAL_DMA_Init+0x1e4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a54      	ldr	r2, [pc, #336]	@ (8003d98 <HAL_DMA_Init+0x1e8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00e      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a53      	ldr	r2, [pc, #332]	@ (8003d9c <HAL_DMA_Init+0x1ec>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d009      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a51      	ldr	r2, [pc, #324]	@ (8003da0 <HAL_DMA_Init+0x1f0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_Init+0xb8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a50      	ldr	r2, [pc, #320]	@ (8003da4 <HAL_DMA_Init+0x1f4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <HAL_DMA_Init+0xbc>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_DMA_Init+0xbe>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 813b 	beq.w	8003eea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a37      	ldr	r2, [pc, #220]	@ (8003d68 <HAL_DMA_Init+0x1b8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d04a      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a36      	ldr	r2, [pc, #216]	@ (8003d6c <HAL_DMA_Init+0x1bc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d045      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a34      	ldr	r2, [pc, #208]	@ (8003d70 <HAL_DMA_Init+0x1c0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d040      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a33      	ldr	r2, [pc, #204]	@ (8003d74 <HAL_DMA_Init+0x1c4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d03b      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a31      	ldr	r2, [pc, #196]	@ (8003d78 <HAL_DMA_Init+0x1c8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d036      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a30      	ldr	r2, [pc, #192]	@ (8003d7c <HAL_DMA_Init+0x1cc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d031      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d80 <HAL_DMA_Init+0x1d0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02c      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2d      	ldr	r2, [pc, #180]	@ (8003d84 <HAL_DMA_Init+0x1d4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d027      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d88 <HAL_DMA_Init+0x1d8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d022      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d8c <HAL_DMA_Init+0x1dc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01d      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a28      	ldr	r2, [pc, #160]	@ (8003d90 <HAL_DMA_Init+0x1e0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d018      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a27      	ldr	r2, [pc, #156]	@ (8003d94 <HAL_DMA_Init+0x1e4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a25      	ldr	r2, [pc, #148]	@ (8003d98 <HAL_DMA_Init+0x1e8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00e      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a24      	ldr	r2, [pc, #144]	@ (8003d9c <HAL_DMA_Init+0x1ec>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a22      	ldr	r2, [pc, #136]	@ (8003da0 <HAL_DMA_Init+0x1f0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <HAL_DMA_Init+0x174>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a21      	ldr	r2, [pc, #132]	@ (8003da4 <HAL_DMA_Init+0x1f4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d108      	bne.n	8003d36 <HAL_DMA_Init+0x186>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e007      	b.n	8003d46 <HAL_DMA_Init+0x196>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d46:	e02f      	b.n	8003da8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d48:	f7fe fabc 	bl	80022c4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d928      	bls.n	8003da8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2203      	movs	r2, #3
 8003d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e246      	b.n	80041f6 <HAL_DMA_Init+0x646>
 8003d68:	40020010 	.word	0x40020010
 8003d6c:	40020028 	.word	0x40020028
 8003d70:	40020040 	.word	0x40020040
 8003d74:	40020058 	.word	0x40020058
 8003d78:	40020070 	.word	0x40020070
 8003d7c:	40020088 	.word	0x40020088
 8003d80:	400200a0 	.word	0x400200a0
 8003d84:	400200b8 	.word	0x400200b8
 8003d88:	40020410 	.word	0x40020410
 8003d8c:	40020428 	.word	0x40020428
 8003d90:	40020440 	.word	0x40020440
 8003d94:	40020458 	.word	0x40020458
 8003d98:	40020470 	.word	0x40020470
 8003d9c:	40020488 	.word	0x40020488
 8003da0:	400204a0 	.word	0x400204a0
 8003da4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1c8      	bne.n	8003d48 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4b83      	ldr	r3, [pc, #524]	@ (8003fd0 <HAL_DMA_Init+0x420>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003dce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dda:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d107      	bne.n	8003e0c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	4313      	orrs	r3, r2
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003e0c:	4b71      	ldr	r3, [pc, #452]	@ (8003fd4 <HAL_DMA_Init+0x424>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b71      	ldr	r3, [pc, #452]	@ (8003fd8 <HAL_DMA_Init+0x428>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e18:	d328      	bcc.n	8003e6c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b28      	cmp	r3, #40	@ 0x28
 8003e20:	d903      	bls.n	8003e2a <HAL_DMA_Init+0x27a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e28:	d917      	bls.n	8003e5a <HAL_DMA_Init+0x2aa>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e30:	d903      	bls.n	8003e3a <HAL_DMA_Init+0x28a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b42      	cmp	r3, #66	@ 0x42
 8003e38:	d90f      	bls.n	8003e5a <HAL_DMA_Init+0x2aa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b46      	cmp	r3, #70	@ 0x46
 8003e40:	d903      	bls.n	8003e4a <HAL_DMA_Init+0x29a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b48      	cmp	r3, #72	@ 0x48
 8003e48:	d907      	bls.n	8003e5a <HAL_DMA_Init+0x2aa>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003e50:	d905      	bls.n	8003e5e <HAL_DMA_Init+0x2ae>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b52      	cmp	r3, #82	@ 0x52
 8003e58:	d801      	bhi.n	8003e5e <HAL_DMA_Init+0x2ae>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <HAL_DMA_Init+0x2b0>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e6a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d117      	bne.n	8003ec6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f002 fb4d 	bl	8006548 <DMA_CheckFifoParam>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e197      	b.n	80041f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f002 fa88 	bl	80063e4 <DMA_CalcBaseAndBitshift>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	223f      	movs	r2, #63	@ 0x3f
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	e0cd      	b.n	8004086 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3b      	ldr	r2, [pc, #236]	@ (8003fdc <HAL_DMA_Init+0x42c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_Init+0x38a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a39      	ldr	r2, [pc, #228]	@ (8003fe0 <HAL_DMA_Init+0x430>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01d      	beq.n	8003f3a <HAL_DMA_Init+0x38a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a38      	ldr	r2, [pc, #224]	@ (8003fe4 <HAL_DMA_Init+0x434>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_DMA_Init+0x38a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a36      	ldr	r2, [pc, #216]	@ (8003fe8 <HAL_DMA_Init+0x438>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_DMA_Init+0x38a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a35      	ldr	r2, [pc, #212]	@ (8003fec <HAL_DMA_Init+0x43c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_DMA_Init+0x38a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a33      	ldr	r2, [pc, #204]	@ (8003ff0 <HAL_DMA_Init+0x440>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_DMA_Init+0x38a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a32      	ldr	r2, [pc, #200]	@ (8003ff4 <HAL_DMA_Init+0x444>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_DMA_Init+0x38a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a30      	ldr	r2, [pc, #192]	@ (8003ff8 <HAL_DMA_Init+0x448>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <HAL_DMA_Init+0x38e>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_DMA_Init+0x390>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8097 	beq.w	8004074 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a24      	ldr	r2, [pc, #144]	@ (8003fdc <HAL_DMA_Init+0x42c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d021      	beq.n	8003f94 <HAL_DMA_Init+0x3e4>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a22      	ldr	r2, [pc, #136]	@ (8003fe0 <HAL_DMA_Init+0x430>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d01c      	beq.n	8003f94 <HAL_DMA_Init+0x3e4>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a21      	ldr	r2, [pc, #132]	@ (8003fe4 <HAL_DMA_Init+0x434>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d017      	beq.n	8003f94 <HAL_DMA_Init+0x3e4>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe8 <HAL_DMA_Init+0x438>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d012      	beq.n	8003f94 <HAL_DMA_Init+0x3e4>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1e      	ldr	r2, [pc, #120]	@ (8003fec <HAL_DMA_Init+0x43c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00d      	beq.n	8003f94 <HAL_DMA_Init+0x3e4>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff0 <HAL_DMA_Init+0x440>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d008      	beq.n	8003f94 <HAL_DMA_Init+0x3e4>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff4 <HAL_DMA_Init+0x444>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <HAL_DMA_Init+0x3e4>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a19      	ldr	r2, [pc, #100]	@ (8003ff8 <HAL_DMA_Init+0x448>)
 8003f92:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4b13      	ldr	r3, [pc, #76]	@ (8003ffc <HAL_DMA_Init+0x44c>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b40      	cmp	r3, #64	@ 0x40
 8003fba:	d021      	beq.n	8004000 <HAL_DMA_Init+0x450>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b80      	cmp	r3, #128	@ 0x80
 8003fc2:	d102      	bne.n	8003fca <HAL_DMA_Init+0x41a>
 8003fc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fc8:	e01b      	b.n	8004002 <HAL_DMA_Init+0x452>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e019      	b.n	8004002 <HAL_DMA_Init+0x452>
 8003fce:	bf00      	nop
 8003fd0:	fe10803f 	.word	0xfe10803f
 8003fd4:	5c001000 	.word	0x5c001000
 8003fd8:	ffff0000 	.word	0xffff0000
 8003fdc:	58025408 	.word	0x58025408
 8003fe0:	5802541c 	.word	0x5802541c
 8003fe4:	58025430 	.word	0x58025430
 8003fe8:	58025444 	.word	0x58025444
 8003fec:	58025458 	.word	0x58025458
 8003ff0:	5802546c 	.word	0x5802546c
 8003ff4:	58025480 	.word	0x58025480
 8003ff8:	58025494 	.word	0x58025494
 8003ffc:	fffe000f 	.word	0xfffe000f
 8004000:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004018:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004020:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004028:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004030:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	4b6e      	ldr	r3, [pc, #440]	@ (8004200 <HAL_DMA_Init+0x650>)
 8004048:	4413      	add	r3, r2
 800404a:	4a6e      	ldr	r2, [pc, #440]	@ (8004204 <HAL_DMA_Init+0x654>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	009a      	lsls	r2, r3, #2
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f002 f9c3 	bl	80063e4 <DMA_CalcBaseAndBitshift>
 800405e:	4603      	mov	r3, r0
 8004060:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2201      	movs	r2, #1
 800406c:	409a      	lsls	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	e008      	b.n	8004086 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2240      	movs	r2, #64	@ 0x40
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2203      	movs	r2, #3
 800407e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e0b7      	b.n	80041f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a5f      	ldr	r2, [pc, #380]	@ (8004208 <HAL_DMA_Init+0x658>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d072      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a5d      	ldr	r2, [pc, #372]	@ (800420c <HAL_DMA_Init+0x65c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d06d      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a5c      	ldr	r2, [pc, #368]	@ (8004210 <HAL_DMA_Init+0x660>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d068      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004214 <HAL_DMA_Init+0x664>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d063      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a59      	ldr	r2, [pc, #356]	@ (8004218 <HAL_DMA_Init+0x668>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d05e      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a57      	ldr	r2, [pc, #348]	@ (800421c <HAL_DMA_Init+0x66c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d059      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a56      	ldr	r2, [pc, #344]	@ (8004220 <HAL_DMA_Init+0x670>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d054      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a54      	ldr	r2, [pc, #336]	@ (8004224 <HAL_DMA_Init+0x674>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d04f      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a53      	ldr	r2, [pc, #332]	@ (8004228 <HAL_DMA_Init+0x678>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04a      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a51      	ldr	r2, [pc, #324]	@ (800422c <HAL_DMA_Init+0x67c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d045      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a50      	ldr	r2, [pc, #320]	@ (8004230 <HAL_DMA_Init+0x680>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d040      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a4e      	ldr	r2, [pc, #312]	@ (8004234 <HAL_DMA_Init+0x684>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d03b      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a4d      	ldr	r2, [pc, #308]	@ (8004238 <HAL_DMA_Init+0x688>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d036      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a4b      	ldr	r2, [pc, #300]	@ (800423c <HAL_DMA_Init+0x68c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d031      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a4a      	ldr	r2, [pc, #296]	@ (8004240 <HAL_DMA_Init+0x690>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d02c      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a48      	ldr	r2, [pc, #288]	@ (8004244 <HAL_DMA_Init+0x694>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d027      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a47      	ldr	r2, [pc, #284]	@ (8004248 <HAL_DMA_Init+0x698>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a45      	ldr	r2, [pc, #276]	@ (800424c <HAL_DMA_Init+0x69c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a44      	ldr	r2, [pc, #272]	@ (8004250 <HAL_DMA_Init+0x6a0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a42      	ldr	r2, [pc, #264]	@ (8004254 <HAL_DMA_Init+0x6a4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a41      	ldr	r2, [pc, #260]	@ (8004258 <HAL_DMA_Init+0x6a8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a3f      	ldr	r2, [pc, #252]	@ (800425c <HAL_DMA_Init+0x6ac>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a3e      	ldr	r2, [pc, #248]	@ (8004260 <HAL_DMA_Init+0x6b0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_DMA_Init+0x5c6>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a3c      	ldr	r2, [pc, #240]	@ (8004264 <HAL_DMA_Init+0x6b4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <HAL_DMA_Init+0x5ca>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_DMA_Init+0x5cc>
 800417a:	2300      	movs	r3, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d032      	beq.n	80041e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f002 fa5d 	bl	8006640 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b80      	cmp	r3, #128	@ 0x80
 800418c:	d102      	bne.n	8004194 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d010      	beq.n	80041d4 <HAL_DMA_Init+0x624>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d80c      	bhi.n	80041d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f002 fada 	bl	8006774 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	e008      	b.n	80041e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	a7fdabf8 	.word	0xa7fdabf8
 8004204:	cccccccd 	.word	0xcccccccd
 8004208:	40020010 	.word	0x40020010
 800420c:	40020028 	.word	0x40020028
 8004210:	40020040 	.word	0x40020040
 8004214:	40020058 	.word	0x40020058
 8004218:	40020070 	.word	0x40020070
 800421c:	40020088 	.word	0x40020088
 8004220:	400200a0 	.word	0x400200a0
 8004224:	400200b8 	.word	0x400200b8
 8004228:	40020410 	.word	0x40020410
 800422c:	40020428 	.word	0x40020428
 8004230:	40020440 	.word	0x40020440
 8004234:	40020458 	.word	0x40020458
 8004238:	40020470 	.word	0x40020470
 800423c:	40020488 	.word	0x40020488
 8004240:	400204a0 	.word	0x400204a0
 8004244:	400204b8 	.word	0x400204b8
 8004248:	58025408 	.word	0x58025408
 800424c:	5802541c 	.word	0x5802541c
 8004250:	58025430 	.word	0x58025430
 8004254:	58025444 	.word	0x58025444
 8004258:	58025458 	.word	0x58025458
 800425c:	5802546c 	.word	0x5802546c
 8004260:	58025480 	.word	0x58025480
 8004264:	58025494 	.word	0x58025494

08004268 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e226      	b.n	80046d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_DMA_Start_IT+0x2a>
 800428e:	2302      	movs	r3, #2
 8004290:	e21f      	b.n	80046d2 <HAL_DMA_Start_IT+0x46a>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	f040 820a 	bne.w	80046bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a68      	ldr	r2, [pc, #416]	@ (800445c <HAL_DMA_Start_IT+0x1f4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a66      	ldr	r2, [pc, #408]	@ (8004460 <HAL_DMA_Start_IT+0x1f8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a65      	ldr	r2, [pc, #404]	@ (8004464 <HAL_DMA_Start_IT+0x1fc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a63      	ldr	r2, [pc, #396]	@ (8004468 <HAL_DMA_Start_IT+0x200>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a62      	ldr	r2, [pc, #392]	@ (800446c <HAL_DMA_Start_IT+0x204>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a60      	ldr	r2, [pc, #384]	@ (8004470 <HAL_DMA_Start_IT+0x208>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a5f      	ldr	r2, [pc, #380]	@ (8004474 <HAL_DMA_Start_IT+0x20c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a5d      	ldr	r2, [pc, #372]	@ (8004478 <HAL_DMA_Start_IT+0x210>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a5c      	ldr	r2, [pc, #368]	@ (800447c <HAL_DMA_Start_IT+0x214>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a5a      	ldr	r2, [pc, #360]	@ (8004480 <HAL_DMA_Start_IT+0x218>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a59      	ldr	r2, [pc, #356]	@ (8004484 <HAL_DMA_Start_IT+0x21c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a57      	ldr	r2, [pc, #348]	@ (8004488 <HAL_DMA_Start_IT+0x220>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a56      	ldr	r2, [pc, #344]	@ (800448c <HAL_DMA_Start_IT+0x224>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a54      	ldr	r2, [pc, #336]	@ (8004490 <HAL_DMA_Start_IT+0x228>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a53      	ldr	r2, [pc, #332]	@ (8004494 <HAL_DMA_Start_IT+0x22c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_DMA_Start_IT+0xee>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a51      	ldr	r2, [pc, #324]	@ (8004498 <HAL_DMA_Start_IT+0x230>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <HAL_DMA_Start_IT+0x100>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e007      	b.n	8004378 <HAL_DMA_Start_IT+0x110>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f001 fe84 	bl	800608c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a34      	ldr	r2, [pc, #208]	@ (800445c <HAL_DMA_Start_IT+0x1f4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d04a      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a33      	ldr	r2, [pc, #204]	@ (8004460 <HAL_DMA_Start_IT+0x1f8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d045      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a31      	ldr	r2, [pc, #196]	@ (8004464 <HAL_DMA_Start_IT+0x1fc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d040      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a30      	ldr	r2, [pc, #192]	@ (8004468 <HAL_DMA_Start_IT+0x200>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d03b      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2e      	ldr	r2, [pc, #184]	@ (800446c <HAL_DMA_Start_IT+0x204>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d036      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004470 <HAL_DMA_Start_IT+0x208>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d031      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004474 <HAL_DMA_Start_IT+0x20c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d02c      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004478 <HAL_DMA_Start_IT+0x210>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d027      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a28      	ldr	r2, [pc, #160]	@ (800447c <HAL_DMA_Start_IT+0x214>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d022      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a27      	ldr	r2, [pc, #156]	@ (8004480 <HAL_DMA_Start_IT+0x218>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d01d      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a25      	ldr	r2, [pc, #148]	@ (8004484 <HAL_DMA_Start_IT+0x21c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d018      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a24      	ldr	r2, [pc, #144]	@ (8004488 <HAL_DMA_Start_IT+0x220>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d013      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a22      	ldr	r2, [pc, #136]	@ (800448c <HAL_DMA_Start_IT+0x224>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00e      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a21      	ldr	r2, [pc, #132]	@ (8004490 <HAL_DMA_Start_IT+0x228>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1f      	ldr	r2, [pc, #124]	@ (8004494 <HAL_DMA_Start_IT+0x22c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_DMA_Start_IT+0x1bc>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1e      	ldr	r2, [pc, #120]	@ (8004498 <HAL_DMA_Start_IT+0x230>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d101      	bne.n	8004428 <HAL_DMA_Start_IT+0x1c0>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_DMA_Start_IT+0x1c2>
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d036      	beq.n	800449c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 021e 	bic.w	r2, r3, #30
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0216 	orr.w	r2, r2, #22
 8004440:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03e      	beq.n	80044c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0208 	orr.w	r2, r2, #8
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e035      	b.n	80044c8 <HAL_DMA_Start_IT+0x260>
 800445c:	40020010 	.word	0x40020010
 8004460:	40020028 	.word	0x40020028
 8004464:	40020040 	.word	0x40020040
 8004468:	40020058 	.word	0x40020058
 800446c:	40020070 	.word	0x40020070
 8004470:	40020088 	.word	0x40020088
 8004474:	400200a0 	.word	0x400200a0
 8004478:	400200b8 	.word	0x400200b8
 800447c:	40020410 	.word	0x40020410
 8004480:	40020428 	.word	0x40020428
 8004484:	40020440 	.word	0x40020440
 8004488:	40020458 	.word	0x40020458
 800448c:	40020470 	.word	0x40020470
 8004490:	40020488 	.word	0x40020488
 8004494:	400204a0 	.word	0x400204a0
 8004498:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 020e 	bic.w	r2, r3, #14
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 020a 	orr.w	r2, r2, #10
 80044ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0204 	orr.w	r2, r2, #4
 80044c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a83      	ldr	r2, [pc, #524]	@ (80046dc <HAL_DMA_Start_IT+0x474>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d072      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a82      	ldr	r2, [pc, #520]	@ (80046e0 <HAL_DMA_Start_IT+0x478>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d06d      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a80      	ldr	r2, [pc, #512]	@ (80046e4 <HAL_DMA_Start_IT+0x47c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d068      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7f      	ldr	r2, [pc, #508]	@ (80046e8 <HAL_DMA_Start_IT+0x480>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d063      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a7d      	ldr	r2, [pc, #500]	@ (80046ec <HAL_DMA_Start_IT+0x484>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d05e      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a7c      	ldr	r2, [pc, #496]	@ (80046f0 <HAL_DMA_Start_IT+0x488>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d059      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a7a      	ldr	r2, [pc, #488]	@ (80046f4 <HAL_DMA_Start_IT+0x48c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d054      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a79      	ldr	r2, [pc, #484]	@ (80046f8 <HAL_DMA_Start_IT+0x490>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d04f      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a77      	ldr	r2, [pc, #476]	@ (80046fc <HAL_DMA_Start_IT+0x494>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d04a      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a76      	ldr	r2, [pc, #472]	@ (8004700 <HAL_DMA_Start_IT+0x498>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d045      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a74      	ldr	r2, [pc, #464]	@ (8004704 <HAL_DMA_Start_IT+0x49c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d040      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a73      	ldr	r2, [pc, #460]	@ (8004708 <HAL_DMA_Start_IT+0x4a0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d03b      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a71      	ldr	r2, [pc, #452]	@ (800470c <HAL_DMA_Start_IT+0x4a4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d036      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a70      	ldr	r2, [pc, #448]	@ (8004710 <HAL_DMA_Start_IT+0x4a8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d031      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6e      	ldr	r2, [pc, #440]	@ (8004714 <HAL_DMA_Start_IT+0x4ac>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d02c      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6d      	ldr	r2, [pc, #436]	@ (8004718 <HAL_DMA_Start_IT+0x4b0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d027      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a6b      	ldr	r2, [pc, #428]	@ (800471c <HAL_DMA_Start_IT+0x4b4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d022      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a6a      	ldr	r2, [pc, #424]	@ (8004720 <HAL_DMA_Start_IT+0x4b8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d01d      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a68      	ldr	r2, [pc, #416]	@ (8004724 <HAL_DMA_Start_IT+0x4bc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d018      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a67      	ldr	r2, [pc, #412]	@ (8004728 <HAL_DMA_Start_IT+0x4c0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d013      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a65      	ldr	r2, [pc, #404]	@ (800472c <HAL_DMA_Start_IT+0x4c4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00e      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a64      	ldr	r2, [pc, #400]	@ (8004730 <HAL_DMA_Start_IT+0x4c8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d009      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a62      	ldr	r2, [pc, #392]	@ (8004734 <HAL_DMA_Start_IT+0x4cc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <HAL_DMA_Start_IT+0x350>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a61      	ldr	r2, [pc, #388]	@ (8004738 <HAL_DMA_Start_IT+0x4d0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_DMA_Start_IT+0x354>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <HAL_DMA_Start_IT+0x356>
 80045bc:	2300      	movs	r3, #0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01a      	beq.n	80045f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a37      	ldr	r2, [pc, #220]	@ (80046dc <HAL_DMA_Start_IT+0x474>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d04a      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a36      	ldr	r2, [pc, #216]	@ (80046e0 <HAL_DMA_Start_IT+0x478>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d045      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a34      	ldr	r2, [pc, #208]	@ (80046e4 <HAL_DMA_Start_IT+0x47c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d040      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a33      	ldr	r2, [pc, #204]	@ (80046e8 <HAL_DMA_Start_IT+0x480>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d03b      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a31      	ldr	r2, [pc, #196]	@ (80046ec <HAL_DMA_Start_IT+0x484>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d036      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a30      	ldr	r2, [pc, #192]	@ (80046f0 <HAL_DMA_Start_IT+0x488>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d031      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2e      	ldr	r2, [pc, #184]	@ (80046f4 <HAL_DMA_Start_IT+0x48c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d02c      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a2d      	ldr	r2, [pc, #180]	@ (80046f8 <HAL_DMA_Start_IT+0x490>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d027      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a2b      	ldr	r2, [pc, #172]	@ (80046fc <HAL_DMA_Start_IT+0x494>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d022      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2a      	ldr	r2, [pc, #168]	@ (8004700 <HAL_DMA_Start_IT+0x498>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d01d      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a28      	ldr	r2, [pc, #160]	@ (8004704 <HAL_DMA_Start_IT+0x49c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d018      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a27      	ldr	r2, [pc, #156]	@ (8004708 <HAL_DMA_Start_IT+0x4a0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a25      	ldr	r2, [pc, #148]	@ (800470c <HAL_DMA_Start_IT+0x4a4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00e      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a24      	ldr	r2, [pc, #144]	@ (8004710 <HAL_DMA_Start_IT+0x4a8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d009      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a22      	ldr	r2, [pc, #136]	@ (8004714 <HAL_DMA_Start_IT+0x4ac>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d004      	beq.n	8004698 <HAL_DMA_Start_IT+0x430>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a21      	ldr	r2, [pc, #132]	@ (8004718 <HAL_DMA_Start_IT+0x4b0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d108      	bne.n	80046aa <HAL_DMA_Start_IT+0x442>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e012      	b.n	80046d0 <HAL_DMA_Start_IT+0x468>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0201 	orr.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e009      	b.n	80046d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40020010 	.word	0x40020010
 80046e0:	40020028 	.word	0x40020028
 80046e4:	40020040 	.word	0x40020040
 80046e8:	40020058 	.word	0x40020058
 80046ec:	40020070 	.word	0x40020070
 80046f0:	40020088 	.word	0x40020088
 80046f4:	400200a0 	.word	0x400200a0
 80046f8:	400200b8 	.word	0x400200b8
 80046fc:	40020410 	.word	0x40020410
 8004700:	40020428 	.word	0x40020428
 8004704:	40020440 	.word	0x40020440
 8004708:	40020458 	.word	0x40020458
 800470c:	40020470 	.word	0x40020470
 8004710:	40020488 	.word	0x40020488
 8004714:	400204a0 	.word	0x400204a0
 8004718:	400204b8 	.word	0x400204b8
 800471c:	58025408 	.word	0x58025408
 8004720:	5802541c 	.word	0x5802541c
 8004724:	58025430 	.word	0x58025430
 8004728:	58025444 	.word	0x58025444
 800472c:	58025458 	.word	0x58025458
 8004730:	5802546c 	.word	0x5802546c
 8004734:	58025480 	.word	0x58025480
 8004738:	58025494 	.word	0x58025494

0800473c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004744:	f7fd fdbe 	bl	80022c4 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e2dc      	b.n	8004d0e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d008      	beq.n	8004772 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2280      	movs	r2, #128	@ 0x80
 8004764:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e2cd      	b.n	8004d0e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a76      	ldr	r2, [pc, #472]	@ (8004950 <HAL_DMA_Abort+0x214>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d04a      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a74      	ldr	r2, [pc, #464]	@ (8004954 <HAL_DMA_Abort+0x218>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d045      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a73      	ldr	r2, [pc, #460]	@ (8004958 <HAL_DMA_Abort+0x21c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d040      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a71      	ldr	r2, [pc, #452]	@ (800495c <HAL_DMA_Abort+0x220>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d03b      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a70      	ldr	r2, [pc, #448]	@ (8004960 <HAL_DMA_Abort+0x224>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d036      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004964 <HAL_DMA_Abort+0x228>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d031      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a6d      	ldr	r2, [pc, #436]	@ (8004968 <HAL_DMA_Abort+0x22c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d02c      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a6b      	ldr	r2, [pc, #428]	@ (800496c <HAL_DMA_Abort+0x230>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d027      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a6a      	ldr	r2, [pc, #424]	@ (8004970 <HAL_DMA_Abort+0x234>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d022      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a68      	ldr	r2, [pc, #416]	@ (8004974 <HAL_DMA_Abort+0x238>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01d      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a67      	ldr	r2, [pc, #412]	@ (8004978 <HAL_DMA_Abort+0x23c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d018      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a65      	ldr	r2, [pc, #404]	@ (800497c <HAL_DMA_Abort+0x240>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a64      	ldr	r2, [pc, #400]	@ (8004980 <HAL_DMA_Abort+0x244>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00e      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a62      	ldr	r2, [pc, #392]	@ (8004984 <HAL_DMA_Abort+0x248>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d009      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a61      	ldr	r2, [pc, #388]	@ (8004988 <HAL_DMA_Abort+0x24c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d004      	beq.n	8004812 <HAL_DMA_Abort+0xd6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a5f      	ldr	r2, [pc, #380]	@ (800498c <HAL_DMA_Abort+0x250>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <HAL_DMA_Abort+0xda>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <HAL_DMA_Abort+0xdc>
 8004816:	2300      	movs	r3, #0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d013      	beq.n	8004844 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 021e 	bic.w	r2, r2, #30
 800482a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800483a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e00a      	b.n	800485a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 020e 	bic.w	r2, r2, #14
 8004852:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a3c      	ldr	r2, [pc, #240]	@ (8004950 <HAL_DMA_Abort+0x214>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d072      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a3a      	ldr	r2, [pc, #232]	@ (8004954 <HAL_DMA_Abort+0x218>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d06d      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a39      	ldr	r2, [pc, #228]	@ (8004958 <HAL_DMA_Abort+0x21c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d068      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a37      	ldr	r2, [pc, #220]	@ (800495c <HAL_DMA_Abort+0x220>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d063      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a36      	ldr	r2, [pc, #216]	@ (8004960 <HAL_DMA_Abort+0x224>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d05e      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a34      	ldr	r2, [pc, #208]	@ (8004964 <HAL_DMA_Abort+0x228>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d059      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a33      	ldr	r2, [pc, #204]	@ (8004968 <HAL_DMA_Abort+0x22c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d054      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a31      	ldr	r2, [pc, #196]	@ (800496c <HAL_DMA_Abort+0x230>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d04f      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a30      	ldr	r2, [pc, #192]	@ (8004970 <HAL_DMA_Abort+0x234>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d04a      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004974 <HAL_DMA_Abort+0x238>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d045      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004978 <HAL_DMA_Abort+0x23c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d040      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2b      	ldr	r2, [pc, #172]	@ (800497c <HAL_DMA_Abort+0x240>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d03b      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004980 <HAL_DMA_Abort+0x244>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d036      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a28      	ldr	r2, [pc, #160]	@ (8004984 <HAL_DMA_Abort+0x248>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d031      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a27      	ldr	r2, [pc, #156]	@ (8004988 <HAL_DMA_Abort+0x24c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d02c      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a25      	ldr	r2, [pc, #148]	@ (800498c <HAL_DMA_Abort+0x250>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d027      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a24      	ldr	r2, [pc, #144]	@ (8004990 <HAL_DMA_Abort+0x254>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d022      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a22      	ldr	r2, [pc, #136]	@ (8004994 <HAL_DMA_Abort+0x258>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01d      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a21      	ldr	r2, [pc, #132]	@ (8004998 <HAL_DMA_Abort+0x25c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d018      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1f      	ldr	r2, [pc, #124]	@ (800499c <HAL_DMA_Abort+0x260>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1e      	ldr	r2, [pc, #120]	@ (80049a0 <HAL_DMA_Abort+0x264>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00e      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1c      	ldr	r2, [pc, #112]	@ (80049a4 <HAL_DMA_Abort+0x268>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d009      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1b      	ldr	r2, [pc, #108]	@ (80049a8 <HAL_DMA_Abort+0x26c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_DMA_Abort+0x20e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a19      	ldr	r2, [pc, #100]	@ (80049ac <HAL_DMA_Abort+0x270>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d132      	bne.n	80049b0 <HAL_DMA_Abort+0x274>
 800494a:	2301      	movs	r3, #1
 800494c:	e031      	b.n	80049b2 <HAL_DMA_Abort+0x276>
 800494e:	bf00      	nop
 8004950:	40020010 	.word	0x40020010
 8004954:	40020028 	.word	0x40020028
 8004958:	40020040 	.word	0x40020040
 800495c:	40020058 	.word	0x40020058
 8004960:	40020070 	.word	0x40020070
 8004964:	40020088 	.word	0x40020088
 8004968:	400200a0 	.word	0x400200a0
 800496c:	400200b8 	.word	0x400200b8
 8004970:	40020410 	.word	0x40020410
 8004974:	40020428 	.word	0x40020428
 8004978:	40020440 	.word	0x40020440
 800497c:	40020458 	.word	0x40020458
 8004980:	40020470 	.word	0x40020470
 8004984:	40020488 	.word	0x40020488
 8004988:	400204a0 	.word	0x400204a0
 800498c:	400204b8 	.word	0x400204b8
 8004990:	58025408 	.word	0x58025408
 8004994:	5802541c 	.word	0x5802541c
 8004998:	58025430 	.word	0x58025430
 800499c:	58025444 	.word	0x58025444
 80049a0:	58025458 	.word	0x58025458
 80049a4:	5802546c 	.word	0x5802546c
 80049a8:	58025480 	.word	0x58025480
 80049ac:	58025494 	.word	0x58025494
 80049b0:	2300      	movs	r3, #0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004b80 <HAL_DMA_Abort+0x444>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d04a      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004b84 <HAL_DMA_Abort+0x448>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d045      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a6a      	ldr	r2, [pc, #424]	@ (8004b88 <HAL_DMA_Abort+0x44c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d040      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a68      	ldr	r2, [pc, #416]	@ (8004b8c <HAL_DMA_Abort+0x450>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d03b      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a67      	ldr	r2, [pc, #412]	@ (8004b90 <HAL_DMA_Abort+0x454>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d036      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a65      	ldr	r2, [pc, #404]	@ (8004b94 <HAL_DMA_Abort+0x458>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d031      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a64      	ldr	r2, [pc, #400]	@ (8004b98 <HAL_DMA_Abort+0x45c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d02c      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a62      	ldr	r2, [pc, #392]	@ (8004b9c <HAL_DMA_Abort+0x460>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d027      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a61      	ldr	r2, [pc, #388]	@ (8004ba0 <HAL_DMA_Abort+0x464>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d022      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a5f      	ldr	r2, [pc, #380]	@ (8004ba4 <HAL_DMA_Abort+0x468>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01d      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ba8 <HAL_DMA_Abort+0x46c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d018      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a5c      	ldr	r2, [pc, #368]	@ (8004bac <HAL_DMA_Abort+0x470>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a5b      	ldr	r2, [pc, #364]	@ (8004bb0 <HAL_DMA_Abort+0x474>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00e      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a59      	ldr	r2, [pc, #356]	@ (8004bb4 <HAL_DMA_Abort+0x478>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a58      	ldr	r2, [pc, #352]	@ (8004bb8 <HAL_DMA_Abort+0x47c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_DMA_Abort+0x32a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a56      	ldr	r2, [pc, #344]	@ (8004bbc <HAL_DMA_Abort+0x480>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d108      	bne.n	8004a78 <HAL_DMA_Abort+0x33c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0201 	bic.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e007      	b.n	8004a88 <HAL_DMA_Abort+0x34c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004a88:	e013      	b.n	8004ab2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a8a:	f7fd fc1b 	bl	80022c4 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d90c      	bls.n	8004ab2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e12d      	b.n	8004d0e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e5      	bne.n	8004a8a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8004b80 <HAL_DMA_Abort+0x444>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d04a      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a2d      	ldr	r2, [pc, #180]	@ (8004b84 <HAL_DMA_Abort+0x448>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d045      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b88 <HAL_DMA_Abort+0x44c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d040      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a2a      	ldr	r2, [pc, #168]	@ (8004b8c <HAL_DMA_Abort+0x450>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d03b      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a29      	ldr	r2, [pc, #164]	@ (8004b90 <HAL_DMA_Abort+0x454>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d036      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a27      	ldr	r2, [pc, #156]	@ (8004b94 <HAL_DMA_Abort+0x458>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d031      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a26      	ldr	r2, [pc, #152]	@ (8004b98 <HAL_DMA_Abort+0x45c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d02c      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a24      	ldr	r2, [pc, #144]	@ (8004b9c <HAL_DMA_Abort+0x460>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d027      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a23      	ldr	r2, [pc, #140]	@ (8004ba0 <HAL_DMA_Abort+0x464>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d022      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a21      	ldr	r2, [pc, #132]	@ (8004ba4 <HAL_DMA_Abort+0x468>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01d      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a20      	ldr	r2, [pc, #128]	@ (8004ba8 <HAL_DMA_Abort+0x46c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d018      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1e      	ldr	r2, [pc, #120]	@ (8004bac <HAL_DMA_Abort+0x470>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d013      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb0 <HAL_DMA_Abort+0x474>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00e      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb4 <HAL_DMA_Abort+0x478>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d009      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb8 <HAL_DMA_Abort+0x47c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_DMA_Abort+0x422>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a18      	ldr	r2, [pc, #96]	@ (8004bbc <HAL_DMA_Abort+0x480>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d101      	bne.n	8004b62 <HAL_DMA_Abort+0x426>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <HAL_DMA_Abort+0x428>
 8004b62:	2300      	movs	r3, #0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d02b      	beq.n	8004bc0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	223f      	movs	r2, #63	@ 0x3f
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	609a      	str	r2, [r3, #8]
 8004b7e:	e02a      	b.n	8004bd6 <HAL_DMA_Abort+0x49a>
 8004b80:	40020010 	.word	0x40020010
 8004b84:	40020028 	.word	0x40020028
 8004b88:	40020040 	.word	0x40020040
 8004b8c:	40020058 	.word	0x40020058
 8004b90:	40020070 	.word	0x40020070
 8004b94:	40020088 	.word	0x40020088
 8004b98:	400200a0 	.word	0x400200a0
 8004b9c:	400200b8 	.word	0x400200b8
 8004ba0:	40020410 	.word	0x40020410
 8004ba4:	40020428 	.word	0x40020428
 8004ba8:	40020440 	.word	0x40020440
 8004bac:	40020458 	.word	0x40020458
 8004bb0:	40020470 	.word	0x40020470
 8004bb4:	40020488 	.word	0x40020488
 8004bb8:	400204a0 	.word	0x400204a0
 8004bbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2201      	movs	r2, #1
 8004bd0:	409a      	lsls	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a4f      	ldr	r2, [pc, #316]	@ (8004d18 <HAL_DMA_Abort+0x5dc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d072      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a4d      	ldr	r2, [pc, #308]	@ (8004d1c <HAL_DMA_Abort+0x5e0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d06d      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a4c      	ldr	r2, [pc, #304]	@ (8004d20 <HAL_DMA_Abort+0x5e4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d068      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a4a      	ldr	r2, [pc, #296]	@ (8004d24 <HAL_DMA_Abort+0x5e8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d063      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a49      	ldr	r2, [pc, #292]	@ (8004d28 <HAL_DMA_Abort+0x5ec>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d05e      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a47      	ldr	r2, [pc, #284]	@ (8004d2c <HAL_DMA_Abort+0x5f0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d059      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a46      	ldr	r2, [pc, #280]	@ (8004d30 <HAL_DMA_Abort+0x5f4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d054      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a44      	ldr	r2, [pc, #272]	@ (8004d34 <HAL_DMA_Abort+0x5f8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04f      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a43      	ldr	r2, [pc, #268]	@ (8004d38 <HAL_DMA_Abort+0x5fc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d04a      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a41      	ldr	r2, [pc, #260]	@ (8004d3c <HAL_DMA_Abort+0x600>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d045      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a40      	ldr	r2, [pc, #256]	@ (8004d40 <HAL_DMA_Abort+0x604>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d040      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a3e      	ldr	r2, [pc, #248]	@ (8004d44 <HAL_DMA_Abort+0x608>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d03b      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a3d      	ldr	r2, [pc, #244]	@ (8004d48 <HAL_DMA_Abort+0x60c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d036      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d4c <HAL_DMA_Abort+0x610>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d031      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3a      	ldr	r2, [pc, #232]	@ (8004d50 <HAL_DMA_Abort+0x614>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d02c      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a38      	ldr	r2, [pc, #224]	@ (8004d54 <HAL_DMA_Abort+0x618>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d027      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a37      	ldr	r2, [pc, #220]	@ (8004d58 <HAL_DMA_Abort+0x61c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a35      	ldr	r2, [pc, #212]	@ (8004d5c <HAL_DMA_Abort+0x620>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01d      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a34      	ldr	r2, [pc, #208]	@ (8004d60 <HAL_DMA_Abort+0x624>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d018      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a32      	ldr	r2, [pc, #200]	@ (8004d64 <HAL_DMA_Abort+0x628>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a31      	ldr	r2, [pc, #196]	@ (8004d68 <HAL_DMA_Abort+0x62c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2f      	ldr	r2, [pc, #188]	@ (8004d6c <HAL_DMA_Abort+0x630>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8004d70 <HAL_DMA_Abort+0x634>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_DMA_Abort+0x58a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d74 <HAL_DMA_Abort+0x638>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <HAL_DMA_Abort+0x58e>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_DMA_Abort+0x590>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d015      	beq.n	8004cfc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004cd8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00c      	beq.n	8004cfc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cfa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40020010 	.word	0x40020010
 8004d1c:	40020028 	.word	0x40020028
 8004d20:	40020040 	.word	0x40020040
 8004d24:	40020058 	.word	0x40020058
 8004d28:	40020070 	.word	0x40020070
 8004d2c:	40020088 	.word	0x40020088
 8004d30:	400200a0 	.word	0x400200a0
 8004d34:	400200b8 	.word	0x400200b8
 8004d38:	40020410 	.word	0x40020410
 8004d3c:	40020428 	.word	0x40020428
 8004d40:	40020440 	.word	0x40020440
 8004d44:	40020458 	.word	0x40020458
 8004d48:	40020470 	.word	0x40020470
 8004d4c:	40020488 	.word	0x40020488
 8004d50:	400204a0 	.word	0x400204a0
 8004d54:	400204b8 	.word	0x400204b8
 8004d58:	58025408 	.word	0x58025408
 8004d5c:	5802541c 	.word	0x5802541c
 8004d60:	58025430 	.word	0x58025430
 8004d64:	58025444 	.word	0x58025444
 8004d68:	58025458 	.word	0x58025458
 8004d6c:	5802546c 	.word	0x5802546c
 8004d70:	58025480 	.word	0x58025480
 8004d74:	58025494 	.word	0x58025494

08004d78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e237      	b.n	80051fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d004      	beq.n	8004da0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2280      	movs	r2, #128	@ 0x80
 8004d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e22c      	b.n	80051fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5c      	ldr	r2, [pc, #368]	@ (8004f18 <HAL_DMA_Abort_IT+0x1a0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d04a      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a5b      	ldr	r2, [pc, #364]	@ (8004f1c <HAL_DMA_Abort_IT+0x1a4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d045      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a59      	ldr	r2, [pc, #356]	@ (8004f20 <HAL_DMA_Abort_IT+0x1a8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d040      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a58      	ldr	r2, [pc, #352]	@ (8004f24 <HAL_DMA_Abort_IT+0x1ac>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d03b      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a56      	ldr	r2, [pc, #344]	@ (8004f28 <HAL_DMA_Abort_IT+0x1b0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d036      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a55      	ldr	r2, [pc, #340]	@ (8004f2c <HAL_DMA_Abort_IT+0x1b4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d031      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a53      	ldr	r2, [pc, #332]	@ (8004f30 <HAL_DMA_Abort_IT+0x1b8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d02c      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a52      	ldr	r2, [pc, #328]	@ (8004f34 <HAL_DMA_Abort_IT+0x1bc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d027      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a50      	ldr	r2, [pc, #320]	@ (8004f38 <HAL_DMA_Abort_IT+0x1c0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d022      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a4f      	ldr	r2, [pc, #316]	@ (8004f3c <HAL_DMA_Abort_IT+0x1c4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d01d      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a4d      	ldr	r2, [pc, #308]	@ (8004f40 <HAL_DMA_Abort_IT+0x1c8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d018      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a4c      	ldr	r2, [pc, #304]	@ (8004f44 <HAL_DMA_Abort_IT+0x1cc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d013      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f48 <HAL_DMA_Abort_IT+0x1d0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00e      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a49      	ldr	r2, [pc, #292]	@ (8004f4c <HAL_DMA_Abort_IT+0x1d4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a47      	ldr	r2, [pc, #284]	@ (8004f50 <HAL_DMA_Abort_IT+0x1d8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_DMA_Abort_IT+0xc8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a46      	ldr	r2, [pc, #280]	@ (8004f54 <HAL_DMA_Abort_IT+0x1dc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d101      	bne.n	8004e44 <HAL_DMA_Abort_IT+0xcc>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <HAL_DMA_Abort_IT+0xce>
 8004e44:	2300      	movs	r3, #0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8086 	beq.w	8004f58 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2204      	movs	r2, #4
 8004e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2f      	ldr	r2, [pc, #188]	@ (8004f18 <HAL_DMA_Abort_IT+0x1a0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d04a      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2e      	ldr	r2, [pc, #184]	@ (8004f1c <HAL_DMA_Abort_IT+0x1a4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d045      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f20 <HAL_DMA_Abort_IT+0x1a8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d040      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2b      	ldr	r2, [pc, #172]	@ (8004f24 <HAL_DMA_Abort_IT+0x1ac>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d03b      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a29      	ldr	r2, [pc, #164]	@ (8004f28 <HAL_DMA_Abort_IT+0x1b0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d036      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a28      	ldr	r2, [pc, #160]	@ (8004f2c <HAL_DMA_Abort_IT+0x1b4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d031      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a26      	ldr	r2, [pc, #152]	@ (8004f30 <HAL_DMA_Abort_IT+0x1b8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d02c      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a25      	ldr	r2, [pc, #148]	@ (8004f34 <HAL_DMA_Abort_IT+0x1bc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d027      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	@ (8004f38 <HAL_DMA_Abort_IT+0x1c0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d022      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a22      	ldr	r2, [pc, #136]	@ (8004f3c <HAL_DMA_Abort_IT+0x1c4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d01d      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a20      	ldr	r2, [pc, #128]	@ (8004f40 <HAL_DMA_Abort_IT+0x1c8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f44 <HAL_DMA_Abort_IT+0x1cc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <HAL_DMA_Abort_IT+0x1d0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1c      	ldr	r2, [pc, #112]	@ (8004f4c <HAL_DMA_Abort_IT+0x1d4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f50 <HAL_DMA_Abort_IT+0x1d8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x17c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a19      	ldr	r2, [pc, #100]	@ (8004f54 <HAL_DMA_Abort_IT+0x1dc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d108      	bne.n	8004f06 <HAL_DMA_Abort_IT+0x18e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e178      	b.n	80051f8 <HAL_DMA_Abort_IT+0x480>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e16f      	b.n	80051f8 <HAL_DMA_Abort_IT+0x480>
 8004f18:	40020010 	.word	0x40020010
 8004f1c:	40020028 	.word	0x40020028
 8004f20:	40020040 	.word	0x40020040
 8004f24:	40020058 	.word	0x40020058
 8004f28:	40020070 	.word	0x40020070
 8004f2c:	40020088 	.word	0x40020088
 8004f30:	400200a0 	.word	0x400200a0
 8004f34:	400200b8 	.word	0x400200b8
 8004f38:	40020410 	.word	0x40020410
 8004f3c:	40020428 	.word	0x40020428
 8004f40:	40020440 	.word	0x40020440
 8004f44:	40020458 	.word	0x40020458
 8004f48:	40020470 	.word	0x40020470
 8004f4c:	40020488 	.word	0x40020488
 8004f50:	400204a0 	.word	0x400204a0
 8004f54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 020e 	bic.w	r2, r2, #14
 8004f66:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a6c      	ldr	r2, [pc, #432]	@ (8005120 <HAL_DMA_Abort_IT+0x3a8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d04a      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a6b      	ldr	r2, [pc, #428]	@ (8005124 <HAL_DMA_Abort_IT+0x3ac>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d045      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a69      	ldr	r2, [pc, #420]	@ (8005128 <HAL_DMA_Abort_IT+0x3b0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d040      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a68      	ldr	r2, [pc, #416]	@ (800512c <HAL_DMA_Abort_IT+0x3b4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d03b      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a66      	ldr	r2, [pc, #408]	@ (8005130 <HAL_DMA_Abort_IT+0x3b8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d036      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a65      	ldr	r2, [pc, #404]	@ (8005134 <HAL_DMA_Abort_IT+0x3bc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d031      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a63      	ldr	r2, [pc, #396]	@ (8005138 <HAL_DMA_Abort_IT+0x3c0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d02c      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a62      	ldr	r2, [pc, #392]	@ (800513c <HAL_DMA_Abort_IT+0x3c4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d027      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a60      	ldr	r2, [pc, #384]	@ (8005140 <HAL_DMA_Abort_IT+0x3c8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d022      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8005144 <HAL_DMA_Abort_IT+0x3cc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d01d      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8005148 <HAL_DMA_Abort_IT+0x3d0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d018      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a5c      	ldr	r2, [pc, #368]	@ (800514c <HAL_DMA_Abort_IT+0x3d4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8005150 <HAL_DMA_Abort_IT+0x3d8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00e      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a59      	ldr	r2, [pc, #356]	@ (8005154 <HAL_DMA_Abort_IT+0x3dc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d009      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a57      	ldr	r2, [pc, #348]	@ (8005158 <HAL_DMA_Abort_IT+0x3e0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_DMA_Abort_IT+0x290>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a56      	ldr	r2, [pc, #344]	@ (800515c <HAL_DMA_Abort_IT+0x3e4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d108      	bne.n	800501a <HAL_DMA_Abort_IT+0x2a2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0201 	bic.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e007      	b.n	800502a <HAL_DMA_Abort_IT+0x2b2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0201 	bic.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a3c      	ldr	r2, [pc, #240]	@ (8005120 <HAL_DMA_Abort_IT+0x3a8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d072      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a3a      	ldr	r2, [pc, #232]	@ (8005124 <HAL_DMA_Abort_IT+0x3ac>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d06d      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a39      	ldr	r2, [pc, #228]	@ (8005128 <HAL_DMA_Abort_IT+0x3b0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d068      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a37      	ldr	r2, [pc, #220]	@ (800512c <HAL_DMA_Abort_IT+0x3b4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d063      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a36      	ldr	r2, [pc, #216]	@ (8005130 <HAL_DMA_Abort_IT+0x3b8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d05e      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a34      	ldr	r2, [pc, #208]	@ (8005134 <HAL_DMA_Abort_IT+0x3bc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d059      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a33      	ldr	r2, [pc, #204]	@ (8005138 <HAL_DMA_Abort_IT+0x3c0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d054      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a31      	ldr	r2, [pc, #196]	@ (800513c <HAL_DMA_Abort_IT+0x3c4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d04f      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a30      	ldr	r2, [pc, #192]	@ (8005140 <HAL_DMA_Abort_IT+0x3c8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d04a      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a2e      	ldr	r2, [pc, #184]	@ (8005144 <HAL_DMA_Abort_IT+0x3cc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d045      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a2d      	ldr	r2, [pc, #180]	@ (8005148 <HAL_DMA_Abort_IT+0x3d0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d040      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a2b      	ldr	r2, [pc, #172]	@ (800514c <HAL_DMA_Abort_IT+0x3d4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d03b      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005150 <HAL_DMA_Abort_IT+0x3d8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d036      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a28      	ldr	r2, [pc, #160]	@ (8005154 <HAL_DMA_Abort_IT+0x3dc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d031      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a27      	ldr	r2, [pc, #156]	@ (8005158 <HAL_DMA_Abort_IT+0x3e0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d02c      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a25      	ldr	r2, [pc, #148]	@ (800515c <HAL_DMA_Abort_IT+0x3e4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d027      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a24      	ldr	r2, [pc, #144]	@ (8005160 <HAL_DMA_Abort_IT+0x3e8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d022      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a22      	ldr	r2, [pc, #136]	@ (8005164 <HAL_DMA_Abort_IT+0x3ec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01d      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a21      	ldr	r2, [pc, #132]	@ (8005168 <HAL_DMA_Abort_IT+0x3f0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d018      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1f      	ldr	r2, [pc, #124]	@ (800516c <HAL_DMA_Abort_IT+0x3f4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005170 <HAL_DMA_Abort_IT+0x3f8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1c      	ldr	r2, [pc, #112]	@ (8005174 <HAL_DMA_Abort_IT+0x3fc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1b      	ldr	r2, [pc, #108]	@ (8005178 <HAL_DMA_Abort_IT+0x400>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_DMA_Abort_IT+0x3a2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a19      	ldr	r2, [pc, #100]	@ (800517c <HAL_DMA_Abort_IT+0x404>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d132      	bne.n	8005180 <HAL_DMA_Abort_IT+0x408>
 800511a:	2301      	movs	r3, #1
 800511c:	e031      	b.n	8005182 <HAL_DMA_Abort_IT+0x40a>
 800511e:	bf00      	nop
 8005120:	40020010 	.word	0x40020010
 8005124:	40020028 	.word	0x40020028
 8005128:	40020040 	.word	0x40020040
 800512c:	40020058 	.word	0x40020058
 8005130:	40020070 	.word	0x40020070
 8005134:	40020088 	.word	0x40020088
 8005138:	400200a0 	.word	0x400200a0
 800513c:	400200b8 	.word	0x400200b8
 8005140:	40020410 	.word	0x40020410
 8005144:	40020428 	.word	0x40020428
 8005148:	40020440 	.word	0x40020440
 800514c:	40020458 	.word	0x40020458
 8005150:	40020470 	.word	0x40020470
 8005154:	40020488 	.word	0x40020488
 8005158:	400204a0 	.word	0x400204a0
 800515c:	400204b8 	.word	0x400204b8
 8005160:	58025408 	.word	0x58025408
 8005164:	5802541c 	.word	0x5802541c
 8005168:	58025430 	.word	0x58025430
 800516c:	58025444 	.word	0x58025444
 8005170:	58025458 	.word	0x58025458
 8005174:	5802546c 	.word	0x5802546c
 8005178:	58025480 	.word	0x58025480
 800517c:	58025494 	.word	0x58025494
 8005180:	2300      	movs	r3, #0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d028      	beq.n	80051d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005190:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005194:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	2201      	movs	r2, #1
 80051a6:	409a      	lsls	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00c      	beq.n	80051d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop

08005204 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08a      	sub	sp, #40	@ 0x28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005210:	4b67      	ldr	r3, [pc, #412]	@ (80053b0 <HAL_DMA_IRQHandler+0x1ac>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a67      	ldr	r2, [pc, #412]	@ (80053b4 <HAL_DMA_IRQHandler+0x1b0>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	0a9b      	lsrs	r3, r3, #10
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005222:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005228:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a5f      	ldr	r2, [pc, #380]	@ (80053b8 <HAL_DMA_IRQHandler+0x1b4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d04a      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a5d      	ldr	r2, [pc, #372]	@ (80053bc <HAL_DMA_IRQHandler+0x1b8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d045      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a5c      	ldr	r2, [pc, #368]	@ (80053c0 <HAL_DMA_IRQHandler+0x1bc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d040      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a5a      	ldr	r2, [pc, #360]	@ (80053c4 <HAL_DMA_IRQHandler+0x1c0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d03b      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a59      	ldr	r2, [pc, #356]	@ (80053c8 <HAL_DMA_IRQHandler+0x1c4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d036      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a57      	ldr	r2, [pc, #348]	@ (80053cc <HAL_DMA_IRQHandler+0x1c8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d031      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a56      	ldr	r2, [pc, #344]	@ (80053d0 <HAL_DMA_IRQHandler+0x1cc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d02c      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a54      	ldr	r2, [pc, #336]	@ (80053d4 <HAL_DMA_IRQHandler+0x1d0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d027      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a53      	ldr	r2, [pc, #332]	@ (80053d8 <HAL_DMA_IRQHandler+0x1d4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d022      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a51      	ldr	r2, [pc, #324]	@ (80053dc <HAL_DMA_IRQHandler+0x1d8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01d      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a50      	ldr	r2, [pc, #320]	@ (80053e0 <HAL_DMA_IRQHandler+0x1dc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d018      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a4e      	ldr	r2, [pc, #312]	@ (80053e4 <HAL_DMA_IRQHandler+0x1e0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a4d      	ldr	r2, [pc, #308]	@ (80053e8 <HAL_DMA_IRQHandler+0x1e4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00e      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a4b      	ldr	r2, [pc, #300]	@ (80053ec <HAL_DMA_IRQHandler+0x1e8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d009      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a4a      	ldr	r2, [pc, #296]	@ (80053f0 <HAL_DMA_IRQHandler+0x1ec>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d004      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xd2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a48      	ldr	r2, [pc, #288]	@ (80053f4 <HAL_DMA_IRQHandler+0x1f0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d101      	bne.n	80052da <HAL_DMA_IRQHandler+0xd6>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <HAL_DMA_IRQHandler+0xd8>
 80052da:	2300      	movs	r3, #0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 842b 	beq.w	8005b38 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e6:	f003 031f 	and.w	r3, r3, #31
 80052ea:	2208      	movs	r2, #8
 80052ec:	409a      	lsls	r2, r3
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80a2 	beq.w	800543c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	@ (80053b8 <HAL_DMA_IRQHandler+0x1b4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d04a      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2d      	ldr	r2, [pc, #180]	@ (80053bc <HAL_DMA_IRQHandler+0x1b8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d045      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a2b      	ldr	r2, [pc, #172]	@ (80053c0 <HAL_DMA_IRQHandler+0x1bc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d040      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2a      	ldr	r2, [pc, #168]	@ (80053c4 <HAL_DMA_IRQHandler+0x1c0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d03b      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a28      	ldr	r2, [pc, #160]	@ (80053c8 <HAL_DMA_IRQHandler+0x1c4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d036      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a27      	ldr	r2, [pc, #156]	@ (80053cc <HAL_DMA_IRQHandler+0x1c8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d031      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a25      	ldr	r2, [pc, #148]	@ (80053d0 <HAL_DMA_IRQHandler+0x1cc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d02c      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a24      	ldr	r2, [pc, #144]	@ (80053d4 <HAL_DMA_IRQHandler+0x1d0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d027      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a22      	ldr	r2, [pc, #136]	@ (80053d8 <HAL_DMA_IRQHandler+0x1d4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d022      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a21      	ldr	r2, [pc, #132]	@ (80053dc <HAL_DMA_IRQHandler+0x1d8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d01d      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1f      	ldr	r2, [pc, #124]	@ (80053e0 <HAL_DMA_IRQHandler+0x1dc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d018      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1e      	ldr	r2, [pc, #120]	@ (80053e4 <HAL_DMA_IRQHandler+0x1e0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <HAL_DMA_IRQHandler+0x1e4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00e      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1b      	ldr	r2, [pc, #108]	@ (80053ec <HAL_DMA_IRQHandler+0x1e8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d009      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <HAL_DMA_IRQHandler+0x1ec>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_DMA_IRQHandler+0x194>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <HAL_DMA_IRQHandler+0x1f0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d12f      	bne.n	80053f8 <HAL_DMA_IRQHandler+0x1f4>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf14      	ite	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	2300      	moveq	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	e02e      	b.n	800540c <HAL_DMA_IRQHandler+0x208>
 80053ae:	bf00      	nop
 80053b0:	24000004 	.word	0x24000004
 80053b4:	1b4e81b5 	.word	0x1b4e81b5
 80053b8:	40020010 	.word	0x40020010
 80053bc:	40020028 	.word	0x40020028
 80053c0:	40020040 	.word	0x40020040
 80053c4:	40020058 	.word	0x40020058
 80053c8:	40020070 	.word	0x40020070
 80053cc:	40020088 	.word	0x40020088
 80053d0:	400200a0 	.word	0x400200a0
 80053d4:	400200b8 	.word	0x400200b8
 80053d8:	40020410 	.word	0x40020410
 80053dc:	40020428 	.word	0x40020428
 80053e0:	40020440 	.word	0x40020440
 80053e4:	40020458 	.word	0x40020458
 80053e8:	40020470 	.word	0x40020470
 80053ec:	40020488 	.word	0x40020488
 80053f0:	400204a0 	.word	0x400204a0
 80053f4:	400204b8 	.word	0x400204b8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	bf14      	ite	ne
 8005406:	2301      	movne	r3, #1
 8005408:	2300      	moveq	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d015      	beq.n	800543c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0204 	bic.w	r2, r2, #4
 800541e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2208      	movs	r2, #8
 800542a:	409a      	lsls	r2, r3
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	fa22 f303 	lsr.w	r3, r2, r3
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d06e      	beq.n	8005530 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a69      	ldr	r2, [pc, #420]	@ (80055fc <HAL_DMA_IRQHandler+0x3f8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04a      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a67      	ldr	r2, [pc, #412]	@ (8005600 <HAL_DMA_IRQHandler+0x3fc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d045      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a66      	ldr	r2, [pc, #408]	@ (8005604 <HAL_DMA_IRQHandler+0x400>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d040      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a64      	ldr	r2, [pc, #400]	@ (8005608 <HAL_DMA_IRQHandler+0x404>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d03b      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a63      	ldr	r2, [pc, #396]	@ (800560c <HAL_DMA_IRQHandler+0x408>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d036      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a61      	ldr	r2, [pc, #388]	@ (8005610 <HAL_DMA_IRQHandler+0x40c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d031      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a60      	ldr	r2, [pc, #384]	@ (8005614 <HAL_DMA_IRQHandler+0x410>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d02c      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5e      	ldr	r2, [pc, #376]	@ (8005618 <HAL_DMA_IRQHandler+0x414>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d027      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a5d      	ldr	r2, [pc, #372]	@ (800561c <HAL_DMA_IRQHandler+0x418>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d022      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a5b      	ldr	r2, [pc, #364]	@ (8005620 <HAL_DMA_IRQHandler+0x41c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01d      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a5a      	ldr	r2, [pc, #360]	@ (8005624 <HAL_DMA_IRQHandler+0x420>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a58      	ldr	r2, [pc, #352]	@ (8005628 <HAL_DMA_IRQHandler+0x424>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a57      	ldr	r2, [pc, #348]	@ (800562c <HAL_DMA_IRQHandler+0x428>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a55      	ldr	r2, [pc, #340]	@ (8005630 <HAL_DMA_IRQHandler+0x42c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a54      	ldr	r2, [pc, #336]	@ (8005634 <HAL_DMA_IRQHandler+0x430>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x2ee>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a52      	ldr	r2, [pc, #328]	@ (8005638 <HAL_DMA_IRQHandler+0x434>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10a      	bne.n	8005508 <HAL_DMA_IRQHandler+0x304>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e003      	b.n	8005510 <HAL_DMA_IRQHandler+0x30c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	2201      	movs	r2, #1
 800551e:	409a      	lsls	r2, r3
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005528:	f043 0202 	orr.w	r2, r3, #2
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005534:	f003 031f 	and.w	r3, r3, #31
 8005538:	2204      	movs	r2, #4
 800553a:	409a      	lsls	r2, r3
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 808f 	beq.w	8005664 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2c      	ldr	r2, [pc, #176]	@ (80055fc <HAL_DMA_IRQHandler+0x3f8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d04a      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2a      	ldr	r2, [pc, #168]	@ (8005600 <HAL_DMA_IRQHandler+0x3fc>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d045      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a29      	ldr	r2, [pc, #164]	@ (8005604 <HAL_DMA_IRQHandler+0x400>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d040      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a27      	ldr	r2, [pc, #156]	@ (8005608 <HAL_DMA_IRQHandler+0x404>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d03b      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a26      	ldr	r2, [pc, #152]	@ (800560c <HAL_DMA_IRQHandler+0x408>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d036      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a24      	ldr	r2, [pc, #144]	@ (8005610 <HAL_DMA_IRQHandler+0x40c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d031      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a23      	ldr	r2, [pc, #140]	@ (8005614 <HAL_DMA_IRQHandler+0x410>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d02c      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a21      	ldr	r2, [pc, #132]	@ (8005618 <HAL_DMA_IRQHandler+0x414>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d027      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a20      	ldr	r2, [pc, #128]	@ (800561c <HAL_DMA_IRQHandler+0x418>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005620 <HAL_DMA_IRQHandler+0x41c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01d      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005624 <HAL_DMA_IRQHandler+0x420>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005628 <HAL_DMA_IRQHandler+0x424>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1a      	ldr	r2, [pc, #104]	@ (800562c <HAL_DMA_IRQHandler+0x428>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a18      	ldr	r2, [pc, #96]	@ (8005630 <HAL_DMA_IRQHandler+0x42c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a17      	ldr	r2, [pc, #92]	@ (8005634 <HAL_DMA_IRQHandler+0x430>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x3e2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a15      	ldr	r2, [pc, #84]	@ (8005638 <HAL_DMA_IRQHandler+0x434>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d12a      	bne.n	800563c <HAL_DMA_IRQHandler+0x438>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e023      	b.n	8005644 <HAL_DMA_IRQHandler+0x440>
 80055fc:	40020010 	.word	0x40020010
 8005600:	40020028 	.word	0x40020028
 8005604:	40020040 	.word	0x40020040
 8005608:	40020058 	.word	0x40020058
 800560c:	40020070 	.word	0x40020070
 8005610:	40020088 	.word	0x40020088
 8005614:	400200a0 	.word	0x400200a0
 8005618:	400200b8 	.word	0x400200b8
 800561c:	40020410 	.word	0x40020410
 8005620:	40020428 	.word	0x40020428
 8005624:	40020440 	.word	0x40020440
 8005628:	40020458 	.word	0x40020458
 800562c:	40020470 	.word	0x40020470
 8005630:	40020488 	.word	0x40020488
 8005634:	400204a0 	.word	0x400204a0
 8005638:	400204b8 	.word	0x400204b8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2300      	movs	r3, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00d      	beq.n	8005664 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2204      	movs	r2, #4
 8005652:	409a      	lsls	r2, r3
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565c:	f043 0204 	orr.w	r2, r3, #4
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	2210      	movs	r2, #16
 800566e:	409a      	lsls	r2, r3
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	4013      	ands	r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80a6 	beq.w	80057c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a85      	ldr	r2, [pc, #532]	@ (8005894 <HAL_DMA_IRQHandler+0x690>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d04a      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a83      	ldr	r2, [pc, #524]	@ (8005898 <HAL_DMA_IRQHandler+0x694>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d045      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a82      	ldr	r2, [pc, #520]	@ (800589c <HAL_DMA_IRQHandler+0x698>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d040      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a80      	ldr	r2, [pc, #512]	@ (80058a0 <HAL_DMA_IRQHandler+0x69c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d03b      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a7f      	ldr	r2, [pc, #508]	@ (80058a4 <HAL_DMA_IRQHandler+0x6a0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d036      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a7d      	ldr	r2, [pc, #500]	@ (80058a8 <HAL_DMA_IRQHandler+0x6a4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d031      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a7c      	ldr	r2, [pc, #496]	@ (80058ac <HAL_DMA_IRQHandler+0x6a8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d02c      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a7a      	ldr	r2, [pc, #488]	@ (80058b0 <HAL_DMA_IRQHandler+0x6ac>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d027      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a79      	ldr	r2, [pc, #484]	@ (80058b4 <HAL_DMA_IRQHandler+0x6b0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d022      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a77      	ldr	r2, [pc, #476]	@ (80058b8 <HAL_DMA_IRQHandler+0x6b4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01d      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a76      	ldr	r2, [pc, #472]	@ (80058bc <HAL_DMA_IRQHandler+0x6b8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d018      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a74      	ldr	r2, [pc, #464]	@ (80058c0 <HAL_DMA_IRQHandler+0x6bc>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a73      	ldr	r2, [pc, #460]	@ (80058c4 <HAL_DMA_IRQHandler+0x6c0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a71      	ldr	r2, [pc, #452]	@ (80058c8 <HAL_DMA_IRQHandler+0x6c4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a70      	ldr	r2, [pc, #448]	@ (80058cc <HAL_DMA_IRQHandler+0x6c8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_DMA_IRQHandler+0x516>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a6e      	ldr	r2, [pc, #440]	@ (80058d0 <HAL_DMA_IRQHandler+0x6cc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d10a      	bne.n	8005730 <HAL_DMA_IRQHandler+0x52c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e009      	b.n	8005744 <HAL_DMA_IRQHandler+0x540>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	bf14      	ite	ne
 800573e:	2301      	movne	r3, #1
 8005740:	2300      	moveq	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d03e      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2210      	movs	r2, #16
 8005752:	409a      	lsls	r2, r3
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d018      	beq.n	8005798 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d108      	bne.n	8005786 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d024      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4798      	blx	r3
 8005784:	e01f      	b.n	80057c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01b      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	4798      	blx	r3
 8005796:	e016      	b.n	80057c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d107      	bne.n	80057b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0208 	bic.w	r2, r2, #8
 80057b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	2220      	movs	r2, #32
 80057d0:	409a      	lsls	r2, r3
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 8110 	beq.w	80059fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005894 <HAL_DMA_IRQHandler+0x690>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d04a      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2b      	ldr	r2, [pc, #172]	@ (8005898 <HAL_DMA_IRQHandler+0x694>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d045      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a29      	ldr	r2, [pc, #164]	@ (800589c <HAL_DMA_IRQHandler+0x698>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d040      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a28      	ldr	r2, [pc, #160]	@ (80058a0 <HAL_DMA_IRQHandler+0x69c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d03b      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a26      	ldr	r2, [pc, #152]	@ (80058a4 <HAL_DMA_IRQHandler+0x6a0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d036      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a25      	ldr	r2, [pc, #148]	@ (80058a8 <HAL_DMA_IRQHandler+0x6a4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d031      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a23      	ldr	r2, [pc, #140]	@ (80058ac <HAL_DMA_IRQHandler+0x6a8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d02c      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a22      	ldr	r2, [pc, #136]	@ (80058b0 <HAL_DMA_IRQHandler+0x6ac>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d027      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a20      	ldr	r2, [pc, #128]	@ (80058b4 <HAL_DMA_IRQHandler+0x6b0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d022      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1f      	ldr	r2, [pc, #124]	@ (80058b8 <HAL_DMA_IRQHandler+0x6b4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d01d      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1d      	ldr	r2, [pc, #116]	@ (80058bc <HAL_DMA_IRQHandler+0x6b8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d018      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1c      	ldr	r2, [pc, #112]	@ (80058c0 <HAL_DMA_IRQHandler+0x6bc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d013      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1a      	ldr	r2, [pc, #104]	@ (80058c4 <HAL_DMA_IRQHandler+0x6c0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00e      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a19      	ldr	r2, [pc, #100]	@ (80058c8 <HAL_DMA_IRQHandler+0x6c4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a17      	ldr	r2, [pc, #92]	@ (80058cc <HAL_DMA_IRQHandler+0x6c8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_DMA_IRQHandler+0x678>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a16      	ldr	r2, [pc, #88]	@ (80058d0 <HAL_DMA_IRQHandler+0x6cc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d12b      	bne.n	80058d4 <HAL_DMA_IRQHandler+0x6d0>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b00      	cmp	r3, #0
 8005888:	bf14      	ite	ne
 800588a:	2301      	movne	r3, #1
 800588c:	2300      	moveq	r3, #0
 800588e:	b2db      	uxtb	r3, r3
 8005890:	e02a      	b.n	80058e8 <HAL_DMA_IRQHandler+0x6e4>
 8005892:	bf00      	nop
 8005894:	40020010 	.word	0x40020010
 8005898:	40020028 	.word	0x40020028
 800589c:	40020040 	.word	0x40020040
 80058a0:	40020058 	.word	0x40020058
 80058a4:	40020070 	.word	0x40020070
 80058a8:	40020088 	.word	0x40020088
 80058ac:	400200a0 	.word	0x400200a0
 80058b0:	400200b8 	.word	0x400200b8
 80058b4:	40020410 	.word	0x40020410
 80058b8:	40020428 	.word	0x40020428
 80058bc:	40020440 	.word	0x40020440
 80058c0:	40020458 	.word	0x40020458
 80058c4:	40020470 	.word	0x40020470
 80058c8:	40020488 	.word	0x40020488
 80058cc:	400204a0 	.word	0x400204a0
 80058d0:	400204b8 	.word	0x400204b8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	bf14      	ite	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	2300      	moveq	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8087 	beq.w	80059fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	2220      	movs	r2, #32
 80058f8:	409a      	lsls	r2, r3
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b04      	cmp	r3, #4
 8005908:	d139      	bne.n	800597e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0216 	bic.w	r2, r2, #22
 8005918:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005928:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d103      	bne.n	800593a <HAL_DMA_IRQHandler+0x736>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0208 	bic.w	r2, r2, #8
 8005948:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	223f      	movs	r2, #63	@ 0x3f
 8005954:	409a      	lsls	r2, r3
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 834a 	beq.w	8006008 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
          }
          return;
 800597c:	e344      	b.n	8006008 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d018      	beq.n	80059be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d108      	bne.n	80059ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d02c      	beq.n	80059fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	4798      	blx	r3
 80059aa:	e027      	b.n	80059fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d023      	beq.n	80059fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	4798      	blx	r3
 80059bc:	e01e      	b.n	80059fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10f      	bne.n	80059ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0210 	bic.w	r2, r2, #16
 80059da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8306 	beq.w	8006012 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8088 	beq.w	8005b24 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2204      	movs	r2, #4
 8005a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a7a      	ldr	r2, [pc, #488]	@ (8005c0c <HAL_DMA_IRQHandler+0xa08>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d04a      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a79      	ldr	r2, [pc, #484]	@ (8005c10 <HAL_DMA_IRQHandler+0xa0c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d045      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a77      	ldr	r2, [pc, #476]	@ (8005c14 <HAL_DMA_IRQHandler+0xa10>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d040      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a76      	ldr	r2, [pc, #472]	@ (8005c18 <HAL_DMA_IRQHandler+0xa14>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d03b      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a74      	ldr	r2, [pc, #464]	@ (8005c1c <HAL_DMA_IRQHandler+0xa18>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d036      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a73      	ldr	r2, [pc, #460]	@ (8005c20 <HAL_DMA_IRQHandler+0xa1c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d031      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a71      	ldr	r2, [pc, #452]	@ (8005c24 <HAL_DMA_IRQHandler+0xa20>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d02c      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a70      	ldr	r2, [pc, #448]	@ (8005c28 <HAL_DMA_IRQHandler+0xa24>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d027      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a6e      	ldr	r2, [pc, #440]	@ (8005c2c <HAL_DMA_IRQHandler+0xa28>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d022      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a6d      	ldr	r2, [pc, #436]	@ (8005c30 <HAL_DMA_IRQHandler+0xa2c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d01d      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a6b      	ldr	r2, [pc, #428]	@ (8005c34 <HAL_DMA_IRQHandler+0xa30>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d018      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a6a      	ldr	r2, [pc, #424]	@ (8005c38 <HAL_DMA_IRQHandler+0xa34>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d013      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a68      	ldr	r2, [pc, #416]	@ (8005c3c <HAL_DMA_IRQHandler+0xa38>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00e      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a67      	ldr	r2, [pc, #412]	@ (8005c40 <HAL_DMA_IRQHandler+0xa3c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a65      	ldr	r2, [pc, #404]	@ (8005c44 <HAL_DMA_IRQHandler+0xa40>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_DMA_IRQHandler+0x8b8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a64      	ldr	r2, [pc, #400]	@ (8005c48 <HAL_DMA_IRQHandler+0xa44>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d108      	bne.n	8005ace <HAL_DMA_IRQHandler+0x8ca>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e007      	b.n	8005ade <HAL_DMA_IRQHandler+0x8da>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d307      	bcc.n	8005afa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1f2      	bne.n	8005ade <HAL_DMA_IRQHandler+0x8da>
 8005af8:	e000      	b.n	8005afc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005afa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005b12:	e003      	b.n	8005b1c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8272 	beq.w	8006012 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	4798      	blx	r3
 8005b36:	e26c      	b.n	8006012 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a43      	ldr	r2, [pc, #268]	@ (8005c4c <HAL_DMA_IRQHandler+0xa48>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d022      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x984>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a42      	ldr	r2, [pc, #264]	@ (8005c50 <HAL_DMA_IRQHandler+0xa4c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d01d      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x984>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a40      	ldr	r2, [pc, #256]	@ (8005c54 <HAL_DMA_IRQHandler+0xa50>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d018      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x984>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8005c58 <HAL_DMA_IRQHandler+0xa54>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x984>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a3d      	ldr	r2, [pc, #244]	@ (8005c5c <HAL_DMA_IRQHandler+0xa58>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00e      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x984>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a3c      	ldr	r2, [pc, #240]	@ (8005c60 <HAL_DMA_IRQHandler+0xa5c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d009      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x984>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a3a      	ldr	r2, [pc, #232]	@ (8005c64 <HAL_DMA_IRQHandler+0xa60>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x984>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a39      	ldr	r2, [pc, #228]	@ (8005c68 <HAL_DMA_IRQHandler+0xa64>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d101      	bne.n	8005b8c <HAL_DMA_IRQHandler+0x988>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <HAL_DMA_IRQHandler+0x98a>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 823f 	beq.w	8006012 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	409a      	lsls	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80cd 	beq.w	8005d4c <HAL_DMA_IRQHandler+0xb48>
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 80c7 	beq.w	8005d4c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	409a      	lsls	r2, r3
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d049      	beq.n	8005c6c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 8210 	beq.w	800600c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bf4:	e20a      	b.n	800600c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8206 	beq.w	800600c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c08:	e200      	b.n	800600c <HAL_DMA_IRQHandler+0xe08>
 8005c0a:	bf00      	nop
 8005c0c:	40020010 	.word	0x40020010
 8005c10:	40020028 	.word	0x40020028
 8005c14:	40020040 	.word	0x40020040
 8005c18:	40020058 	.word	0x40020058
 8005c1c:	40020070 	.word	0x40020070
 8005c20:	40020088 	.word	0x40020088
 8005c24:	400200a0 	.word	0x400200a0
 8005c28:	400200b8 	.word	0x400200b8
 8005c2c:	40020410 	.word	0x40020410
 8005c30:	40020428 	.word	0x40020428
 8005c34:	40020440 	.word	0x40020440
 8005c38:	40020458 	.word	0x40020458
 8005c3c:	40020470 	.word	0x40020470
 8005c40:	40020488 	.word	0x40020488
 8005c44:	400204a0 	.word	0x400204a0
 8005c48:	400204b8 	.word	0x400204b8
 8005c4c:	58025408 	.word	0x58025408
 8005c50:	5802541c 	.word	0x5802541c
 8005c54:	58025430 	.word	0x58025430
 8005c58:	58025444 	.word	0x58025444
 8005c5c:	58025458 	.word	0x58025458
 8005c60:	5802546c 	.word	0x5802546c
 8005c64:	58025480 	.word	0x58025480
 8005c68:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d160      	bne.n	8005d38 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a7f      	ldr	r2, [pc, #508]	@ (8005e78 <HAL_DMA_IRQHandler+0xc74>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d04a      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a7d      	ldr	r2, [pc, #500]	@ (8005e7c <HAL_DMA_IRQHandler+0xc78>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d045      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8005e80 <HAL_DMA_IRQHandler+0xc7c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d040      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a7a      	ldr	r2, [pc, #488]	@ (8005e84 <HAL_DMA_IRQHandler+0xc80>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d03b      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a79      	ldr	r2, [pc, #484]	@ (8005e88 <HAL_DMA_IRQHandler+0xc84>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d036      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a77      	ldr	r2, [pc, #476]	@ (8005e8c <HAL_DMA_IRQHandler+0xc88>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d031      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a76      	ldr	r2, [pc, #472]	@ (8005e90 <HAL_DMA_IRQHandler+0xc8c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d02c      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a74      	ldr	r2, [pc, #464]	@ (8005e94 <HAL_DMA_IRQHandler+0xc90>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d027      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a73      	ldr	r2, [pc, #460]	@ (8005e98 <HAL_DMA_IRQHandler+0xc94>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d022      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a71      	ldr	r2, [pc, #452]	@ (8005e9c <HAL_DMA_IRQHandler+0xc98>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01d      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a70      	ldr	r2, [pc, #448]	@ (8005ea0 <HAL_DMA_IRQHandler+0xc9c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d018      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a6e      	ldr	r2, [pc, #440]	@ (8005ea4 <HAL_DMA_IRQHandler+0xca0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d013      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6d      	ldr	r2, [pc, #436]	@ (8005ea8 <HAL_DMA_IRQHandler+0xca4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00e      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a6b      	ldr	r2, [pc, #428]	@ (8005eac <HAL_DMA_IRQHandler+0xca8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6a      	ldr	r2, [pc, #424]	@ (8005eb0 <HAL_DMA_IRQHandler+0xcac>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xb12>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a68      	ldr	r2, [pc, #416]	@ (8005eb4 <HAL_DMA_IRQHandler+0xcb0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d108      	bne.n	8005d28 <HAL_DMA_IRQHandler+0xb24>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0208 	bic.w	r2, r2, #8
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e007      	b.n	8005d38 <HAL_DMA_IRQHandler+0xb34>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0204 	bic.w	r2, r2, #4
 8005d36:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8165 	beq.w	800600c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d4a:	e15f      	b.n	800600c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	2202      	movs	r2, #2
 8005d56:	409a      	lsls	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80c5 	beq.w	8005eec <HAL_DMA_IRQHandler+0xce8>
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80bf 	beq.w	8005eec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2202      	movs	r2, #2
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d018      	beq.n	8005dba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 813a 	beq.w	8006010 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005da4:	e134      	b.n	8006010 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8130 	beq.w	8006010 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005db8:	e12a      	b.n	8006010 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f040 8089 	bne.w	8005ed8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a2b      	ldr	r2, [pc, #172]	@ (8005e78 <HAL_DMA_IRQHandler+0xc74>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d04a      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a29      	ldr	r2, [pc, #164]	@ (8005e7c <HAL_DMA_IRQHandler+0xc78>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d045      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a28      	ldr	r2, [pc, #160]	@ (8005e80 <HAL_DMA_IRQHandler+0xc7c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d040      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a26      	ldr	r2, [pc, #152]	@ (8005e84 <HAL_DMA_IRQHandler+0xc80>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d03b      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a25      	ldr	r2, [pc, #148]	@ (8005e88 <HAL_DMA_IRQHandler+0xc84>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d036      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a23      	ldr	r2, [pc, #140]	@ (8005e8c <HAL_DMA_IRQHandler+0xc88>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d031      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a22      	ldr	r2, [pc, #136]	@ (8005e90 <HAL_DMA_IRQHandler+0xc8c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d02c      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a20      	ldr	r2, [pc, #128]	@ (8005e94 <HAL_DMA_IRQHandler+0xc90>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d027      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e98 <HAL_DMA_IRQHandler+0xc94>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d022      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1d      	ldr	r2, [pc, #116]	@ (8005e9c <HAL_DMA_IRQHandler+0xc98>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d01d      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea0 <HAL_DMA_IRQHandler+0xc9c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d018      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea4 <HAL_DMA_IRQHandler+0xca0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a19      	ldr	r2, [pc, #100]	@ (8005ea8 <HAL_DMA_IRQHandler+0xca4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00e      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a17      	ldr	r2, [pc, #92]	@ (8005eac <HAL_DMA_IRQHandler+0xca8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d009      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a16      	ldr	r2, [pc, #88]	@ (8005eb0 <HAL_DMA_IRQHandler+0xcac>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d004      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xc62>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a14      	ldr	r2, [pc, #80]	@ (8005eb4 <HAL_DMA_IRQHandler+0xcb0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d128      	bne.n	8005eb8 <HAL_DMA_IRQHandler+0xcb4>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0214 	bic.w	r2, r2, #20
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	e027      	b.n	8005ec8 <HAL_DMA_IRQHandler+0xcc4>
 8005e78:	40020010 	.word	0x40020010
 8005e7c:	40020028 	.word	0x40020028
 8005e80:	40020040 	.word	0x40020040
 8005e84:	40020058 	.word	0x40020058
 8005e88:	40020070 	.word	0x40020070
 8005e8c:	40020088 	.word	0x40020088
 8005e90:	400200a0 	.word	0x400200a0
 8005e94:	400200b8 	.word	0x400200b8
 8005e98:	40020410 	.word	0x40020410
 8005e9c:	40020428 	.word	0x40020428
 8005ea0:	40020440 	.word	0x40020440
 8005ea4:	40020458 	.word	0x40020458
 8005ea8:	40020470 	.word	0x40020470
 8005eac:	40020488 	.word	0x40020488
 8005eb0:	400204a0 	.word	0x400204a0
 8005eb4:	400204b8 	.word	0x400204b8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 020a 	bic.w	r2, r2, #10
 8005ec6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8097 	beq.w	8006010 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eea:	e091      	b.n	8006010 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8088 	beq.w	8006012 <HAL_DMA_IRQHandler+0xe0e>
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8082 	beq.w	8006012 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a41      	ldr	r2, [pc, #260]	@ (8006018 <HAL_DMA_IRQHandler+0xe14>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d04a      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800601c <HAL_DMA_IRQHandler+0xe18>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d045      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a3e      	ldr	r2, [pc, #248]	@ (8006020 <HAL_DMA_IRQHandler+0xe1c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d040      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a3c      	ldr	r2, [pc, #240]	@ (8006024 <HAL_DMA_IRQHandler+0xe20>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d03b      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8006028 <HAL_DMA_IRQHandler+0xe24>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d036      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a39      	ldr	r2, [pc, #228]	@ (800602c <HAL_DMA_IRQHandler+0xe28>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d031      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a38      	ldr	r2, [pc, #224]	@ (8006030 <HAL_DMA_IRQHandler+0xe2c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d02c      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a36      	ldr	r2, [pc, #216]	@ (8006034 <HAL_DMA_IRQHandler+0xe30>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d027      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a35      	ldr	r2, [pc, #212]	@ (8006038 <HAL_DMA_IRQHandler+0xe34>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d022      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a33      	ldr	r2, [pc, #204]	@ (800603c <HAL_DMA_IRQHandler+0xe38>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01d      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a32      	ldr	r2, [pc, #200]	@ (8006040 <HAL_DMA_IRQHandler+0xe3c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d018      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a30      	ldr	r2, [pc, #192]	@ (8006044 <HAL_DMA_IRQHandler+0xe40>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8006048 <HAL_DMA_IRQHandler+0xe44>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00e      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a2d      	ldr	r2, [pc, #180]	@ (800604c <HAL_DMA_IRQHandler+0xe48>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d009      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8006050 <HAL_DMA_IRQHandler+0xe4c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_DMA_IRQHandler+0xdaa>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8006054 <HAL_DMA_IRQHandler+0xe50>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d108      	bne.n	8005fc0 <HAL_DMA_IRQHandler+0xdbc>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 021c 	bic.w	r2, r2, #28
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e007      	b.n	8005fd0 <HAL_DMA_IRQHandler+0xdcc>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 020e 	bic.w	r2, r2, #14
 8005fce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2201      	movs	r2, #1
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
 8006006:	e004      	b.n	8006012 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006008:	bf00      	nop
 800600a:	e002      	b.n	8006012 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800600c:	bf00      	nop
 800600e:	e000      	b.n	8006012 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006010:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006012:	3728      	adds	r7, #40	@ 0x28
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40020010 	.word	0x40020010
 800601c:	40020028 	.word	0x40020028
 8006020:	40020040 	.word	0x40020040
 8006024:	40020058 	.word	0x40020058
 8006028:	40020070 	.word	0x40020070
 800602c:	40020088 	.word	0x40020088
 8006030:	400200a0 	.word	0x400200a0
 8006034:	400200b8 	.word	0x400200b8
 8006038:	40020410 	.word	0x40020410
 800603c:	40020428 	.word	0x40020428
 8006040:	40020440 	.word	0x40020440
 8006044:	40020458 	.word	0x40020458
 8006048:	40020470 	.word	0x40020470
 800604c:	40020488 	.word	0x40020488
 8006050:	400204a0 	.word	0x400204a0
 8006054:	400204b8 	.word	0x400204b8

08006058 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006066:	b2db      	uxtb	r3, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a7f      	ldr	r2, [pc, #508]	@ (80062a8 <DMA_SetConfig+0x21c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d072      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a7d      	ldr	r2, [pc, #500]	@ (80062ac <DMA_SetConfig+0x220>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d06d      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a7c      	ldr	r2, [pc, #496]	@ (80062b0 <DMA_SetConfig+0x224>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d068      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a7a      	ldr	r2, [pc, #488]	@ (80062b4 <DMA_SetConfig+0x228>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d063      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a79      	ldr	r2, [pc, #484]	@ (80062b8 <DMA_SetConfig+0x22c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d05e      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a77      	ldr	r2, [pc, #476]	@ (80062bc <DMA_SetConfig+0x230>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d059      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a76      	ldr	r2, [pc, #472]	@ (80062c0 <DMA_SetConfig+0x234>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d054      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a74      	ldr	r2, [pc, #464]	@ (80062c4 <DMA_SetConfig+0x238>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04f      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a73      	ldr	r2, [pc, #460]	@ (80062c8 <DMA_SetConfig+0x23c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d04a      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a71      	ldr	r2, [pc, #452]	@ (80062cc <DMA_SetConfig+0x240>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d045      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a70      	ldr	r2, [pc, #448]	@ (80062d0 <DMA_SetConfig+0x244>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d040      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a6e      	ldr	r2, [pc, #440]	@ (80062d4 <DMA_SetConfig+0x248>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d03b      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a6d      	ldr	r2, [pc, #436]	@ (80062d8 <DMA_SetConfig+0x24c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d036      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a6b      	ldr	r2, [pc, #428]	@ (80062dc <DMA_SetConfig+0x250>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d031      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a6a      	ldr	r2, [pc, #424]	@ (80062e0 <DMA_SetConfig+0x254>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d02c      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a68      	ldr	r2, [pc, #416]	@ (80062e4 <DMA_SetConfig+0x258>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d027      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a67      	ldr	r2, [pc, #412]	@ (80062e8 <DMA_SetConfig+0x25c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d022      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a65      	ldr	r2, [pc, #404]	@ (80062ec <DMA_SetConfig+0x260>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01d      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a64      	ldr	r2, [pc, #400]	@ (80062f0 <DMA_SetConfig+0x264>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d018      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a62      	ldr	r2, [pc, #392]	@ (80062f4 <DMA_SetConfig+0x268>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a61      	ldr	r2, [pc, #388]	@ (80062f8 <DMA_SetConfig+0x26c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00e      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a5f      	ldr	r2, [pc, #380]	@ (80062fc <DMA_SetConfig+0x270>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d009      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a5e      	ldr	r2, [pc, #376]	@ (8006300 <DMA_SetConfig+0x274>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d004      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a5c      	ldr	r2, [pc, #368]	@ (8006304 <DMA_SetConfig+0x278>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d101      	bne.n	800619a <DMA_SetConfig+0x10e>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <DMA_SetConfig+0x110>
 800619a:	2300      	movs	r3, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00d      	beq.n	80061bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80061a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80061ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a39      	ldr	r2, [pc, #228]	@ (80062a8 <DMA_SetConfig+0x21c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d04a      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a38      	ldr	r2, [pc, #224]	@ (80062ac <DMA_SetConfig+0x220>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d045      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a36      	ldr	r2, [pc, #216]	@ (80062b0 <DMA_SetConfig+0x224>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d040      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a35      	ldr	r2, [pc, #212]	@ (80062b4 <DMA_SetConfig+0x228>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d03b      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a33      	ldr	r2, [pc, #204]	@ (80062b8 <DMA_SetConfig+0x22c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d036      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a32      	ldr	r2, [pc, #200]	@ (80062bc <DMA_SetConfig+0x230>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d031      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a30      	ldr	r2, [pc, #192]	@ (80062c0 <DMA_SetConfig+0x234>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d02c      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2f      	ldr	r2, [pc, #188]	@ (80062c4 <DMA_SetConfig+0x238>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d027      	beq.n	800625c <DMA_SetConfig+0x1d0>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a2d      	ldr	r2, [pc, #180]	@ (80062c8 <DMA_SetConfig+0x23c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d022      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a2c      	ldr	r2, [pc, #176]	@ (80062cc <DMA_SetConfig+0x240>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d01d      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2a      	ldr	r2, [pc, #168]	@ (80062d0 <DMA_SetConfig+0x244>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d018      	beq.n	800625c <DMA_SetConfig+0x1d0>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a29      	ldr	r2, [pc, #164]	@ (80062d4 <DMA_SetConfig+0x248>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a27      	ldr	r2, [pc, #156]	@ (80062d8 <DMA_SetConfig+0x24c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00e      	beq.n	800625c <DMA_SetConfig+0x1d0>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a26      	ldr	r2, [pc, #152]	@ (80062dc <DMA_SetConfig+0x250>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d009      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a24      	ldr	r2, [pc, #144]	@ (80062e0 <DMA_SetConfig+0x254>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a23      	ldr	r2, [pc, #140]	@ (80062e4 <DMA_SetConfig+0x258>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d101      	bne.n	8006260 <DMA_SetConfig+0x1d4>
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <DMA_SetConfig+0x1d6>
 8006260:	2300      	movs	r3, #0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d059      	beq.n	800631a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	223f      	movs	r2, #63	@ 0x3f
 8006270:	409a      	lsls	r2, r3
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006284:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b40      	cmp	r3, #64	@ 0x40
 8006294:	d138      	bne.n	8006308 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80062a6:	e086      	b.n	80063b6 <DMA_SetConfig+0x32a>
 80062a8:	40020010 	.word	0x40020010
 80062ac:	40020028 	.word	0x40020028
 80062b0:	40020040 	.word	0x40020040
 80062b4:	40020058 	.word	0x40020058
 80062b8:	40020070 	.word	0x40020070
 80062bc:	40020088 	.word	0x40020088
 80062c0:	400200a0 	.word	0x400200a0
 80062c4:	400200b8 	.word	0x400200b8
 80062c8:	40020410 	.word	0x40020410
 80062cc:	40020428 	.word	0x40020428
 80062d0:	40020440 	.word	0x40020440
 80062d4:	40020458 	.word	0x40020458
 80062d8:	40020470 	.word	0x40020470
 80062dc:	40020488 	.word	0x40020488
 80062e0:	400204a0 	.word	0x400204a0
 80062e4:	400204b8 	.word	0x400204b8
 80062e8:	58025408 	.word	0x58025408
 80062ec:	5802541c 	.word	0x5802541c
 80062f0:	58025430 	.word	0x58025430
 80062f4:	58025444 	.word	0x58025444
 80062f8:	58025458 	.word	0x58025458
 80062fc:	5802546c 	.word	0x5802546c
 8006300:	58025480 	.word	0x58025480
 8006304:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]
}
 8006318:	e04d      	b.n	80063b6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a29      	ldr	r2, [pc, #164]	@ (80063c4 <DMA_SetConfig+0x338>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d022      	beq.n	800636a <DMA_SetConfig+0x2de>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a27      	ldr	r2, [pc, #156]	@ (80063c8 <DMA_SetConfig+0x33c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01d      	beq.n	800636a <DMA_SetConfig+0x2de>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a26      	ldr	r2, [pc, #152]	@ (80063cc <DMA_SetConfig+0x340>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d018      	beq.n	800636a <DMA_SetConfig+0x2de>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a24      	ldr	r2, [pc, #144]	@ (80063d0 <DMA_SetConfig+0x344>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <DMA_SetConfig+0x2de>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a23      	ldr	r2, [pc, #140]	@ (80063d4 <DMA_SetConfig+0x348>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00e      	beq.n	800636a <DMA_SetConfig+0x2de>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a21      	ldr	r2, [pc, #132]	@ (80063d8 <DMA_SetConfig+0x34c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d009      	beq.n	800636a <DMA_SetConfig+0x2de>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a20      	ldr	r2, [pc, #128]	@ (80063dc <DMA_SetConfig+0x350>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d004      	beq.n	800636a <DMA_SetConfig+0x2de>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1e      	ldr	r2, [pc, #120]	@ (80063e0 <DMA_SetConfig+0x354>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d101      	bne.n	800636e <DMA_SetConfig+0x2e2>
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <DMA_SetConfig+0x2e4>
 800636e:	2300      	movs	r3, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d020      	beq.n	80063b6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2201      	movs	r2, #1
 800637e:	409a      	lsls	r2, r3
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b40      	cmp	r3, #64	@ 0x40
 8006392:	d108      	bne.n	80063a6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	60da      	str	r2, [r3, #12]
}
 80063a4:	e007      	b.n	80063b6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	58025408 	.word	0x58025408
 80063c8:	5802541c 	.word	0x5802541c
 80063cc:	58025430 	.word	0x58025430
 80063d0:	58025444 	.word	0x58025444
 80063d4:	58025458 	.word	0x58025458
 80063d8:	5802546c 	.word	0x5802546c
 80063dc:	58025480 	.word	0x58025480
 80063e0:	58025494 	.word	0x58025494

080063e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a42      	ldr	r2, [pc, #264]	@ (80064fc <DMA_CalcBaseAndBitshift+0x118>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d04a      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a41      	ldr	r2, [pc, #260]	@ (8006500 <DMA_CalcBaseAndBitshift+0x11c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d045      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a3f      	ldr	r2, [pc, #252]	@ (8006504 <DMA_CalcBaseAndBitshift+0x120>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d040      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a3e      	ldr	r2, [pc, #248]	@ (8006508 <DMA_CalcBaseAndBitshift+0x124>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d03b      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a3c      	ldr	r2, [pc, #240]	@ (800650c <DMA_CalcBaseAndBitshift+0x128>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d036      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a3b      	ldr	r2, [pc, #236]	@ (8006510 <DMA_CalcBaseAndBitshift+0x12c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d031      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a39      	ldr	r2, [pc, #228]	@ (8006514 <DMA_CalcBaseAndBitshift+0x130>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d02c      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a38      	ldr	r2, [pc, #224]	@ (8006518 <DMA_CalcBaseAndBitshift+0x134>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d027      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a36      	ldr	r2, [pc, #216]	@ (800651c <DMA_CalcBaseAndBitshift+0x138>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d022      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a35      	ldr	r2, [pc, #212]	@ (8006520 <DMA_CalcBaseAndBitshift+0x13c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d01d      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a33      	ldr	r2, [pc, #204]	@ (8006524 <DMA_CalcBaseAndBitshift+0x140>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d018      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a32      	ldr	r2, [pc, #200]	@ (8006528 <DMA_CalcBaseAndBitshift+0x144>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a30      	ldr	r2, [pc, #192]	@ (800652c <DMA_CalcBaseAndBitshift+0x148>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00e      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2f      	ldr	r2, [pc, #188]	@ (8006530 <DMA_CalcBaseAndBitshift+0x14c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d009      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2d      	ldr	r2, [pc, #180]	@ (8006534 <DMA_CalcBaseAndBitshift+0x150>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2c      	ldr	r2, [pc, #176]	@ (8006538 <DMA_CalcBaseAndBitshift+0x154>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d101      	bne.n	8006490 <DMA_CalcBaseAndBitshift+0xac>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <DMA_CalcBaseAndBitshift+0xae>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d024      	beq.n	80064e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	3b10      	subs	r3, #16
 800649e:	4a27      	ldr	r2, [pc, #156]	@ (800653c <DMA_CalcBaseAndBitshift+0x158>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	091b      	lsrs	r3, r3, #4
 80064a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	4a24      	ldr	r2, [pc, #144]	@ (8006540 <DMA_CalcBaseAndBitshift+0x15c>)
 80064b0:	5cd3      	ldrb	r3, [r2, r3]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d908      	bls.n	80064d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	4b1f      	ldr	r3, [pc, #124]	@ (8006544 <DMA_CalcBaseAndBitshift+0x160>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	1d1a      	adds	r2, r3, #4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80064ce:	e00d      	b.n	80064ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006544 <DMA_CalcBaseAndBitshift+0x160>)
 80064d8:	4013      	ands	r3, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80064de:	e005      	b.n	80064ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	40020010 	.word	0x40020010
 8006500:	40020028 	.word	0x40020028
 8006504:	40020040 	.word	0x40020040
 8006508:	40020058 	.word	0x40020058
 800650c:	40020070 	.word	0x40020070
 8006510:	40020088 	.word	0x40020088
 8006514:	400200a0 	.word	0x400200a0
 8006518:	400200b8 	.word	0x400200b8
 800651c:	40020410 	.word	0x40020410
 8006520:	40020428 	.word	0x40020428
 8006524:	40020440 	.word	0x40020440
 8006528:	40020458 	.word	0x40020458
 800652c:	40020470 	.word	0x40020470
 8006530:	40020488 	.word	0x40020488
 8006534:	400204a0 	.word	0x400204a0
 8006538:	400204b8 	.word	0x400204b8
 800653c:	aaaaaaab 	.word	0xaaaaaaab
 8006540:	08017a30 	.word	0x08017a30
 8006544:	fffffc00 	.word	0xfffffc00

08006548 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d120      	bne.n	800659e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	2b03      	cmp	r3, #3
 8006562:	d858      	bhi.n	8006616 <DMA_CheckFifoParam+0xce>
 8006564:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <DMA_CheckFifoParam+0x24>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	0800657d 	.word	0x0800657d
 8006570:	0800658f 	.word	0x0800658f
 8006574:	0800657d 	.word	0x0800657d
 8006578:	08006617 	.word	0x08006617
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006580:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d048      	beq.n	800661a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800658c:	e045      	b.n	800661a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006596:	d142      	bne.n	800661e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800659c:	e03f      	b.n	800661e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a6:	d123      	bne.n	80065f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d838      	bhi.n	8006622 <DMA_CheckFifoParam+0xda>
 80065b0:	a201      	add	r2, pc, #4	@ (adr r2, 80065b8 <DMA_CheckFifoParam+0x70>)
 80065b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b6:	bf00      	nop
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	080065cf 	.word	0x080065cf
 80065c0:	080065c9 	.word	0x080065c9
 80065c4:	080065e1 	.word	0x080065e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	73fb      	strb	r3, [r7, #15]
        break;
 80065cc:	e030      	b.n	8006630 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d025      	beq.n	8006626 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065de:	e022      	b.n	8006626 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80065e8:	d11f      	bne.n	800662a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065ee:	e01c      	b.n	800662a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d902      	bls.n	80065fe <DMA_CheckFifoParam+0xb6>
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d003      	beq.n	8006604 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80065fc:	e018      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	73fb      	strb	r3, [r7, #15]
        break;
 8006602:	e015      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006608:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
    break;
 8006614:	e00b      	b.n	800662e <DMA_CheckFifoParam+0xe6>
        break;
 8006616:	bf00      	nop
 8006618:	e00a      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        break;
 800661a:	bf00      	nop
 800661c:	e008      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        break;
 800661e:	bf00      	nop
 8006620:	e006      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        break;
 8006622:	bf00      	nop
 8006624:	e004      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        break;
 8006626:	bf00      	nop
 8006628:	e002      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
    break;
 800662e:	bf00      	nop
    }
  }

  return status;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a38      	ldr	r2, [pc, #224]	@ (8006734 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d022      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a36      	ldr	r2, [pc, #216]	@ (8006738 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d01d      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a35      	ldr	r2, [pc, #212]	@ (800673c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d018      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a33      	ldr	r2, [pc, #204]	@ (8006740 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a32      	ldr	r2, [pc, #200]	@ (8006744 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00e      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a30      	ldr	r2, [pc, #192]	@ (8006748 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d009      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2f      	ldr	r2, [pc, #188]	@ (800674c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d004      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a2d      	ldr	r2, [pc, #180]	@ (8006750 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d101      	bne.n	80066a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01a      	beq.n	80066de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	3b08      	subs	r3, #8
 80066b0:	4a28      	ldr	r2, [pc, #160]	@ (8006754 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	091b      	lsrs	r3, r3, #4
 80066b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4b26      	ldr	r3, [pc, #152]	@ (8006758 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a24      	ldr	r2, [pc, #144]	@ (800675c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80066cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	2201      	movs	r2, #1
 80066d6:	409a      	lsls	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80066dc:	e024      	b.n	8006728 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	3b10      	subs	r3, #16
 80066e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006760 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80066e8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ec:	091b      	lsrs	r3, r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006764 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d806      	bhi.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006768 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d902      	bls.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3308      	adds	r3, #8
 8006704:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4b18      	ldr	r3, [pc, #96]	@ (800676c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	461a      	mov	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a16      	ldr	r2, [pc, #88]	@ (8006770 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006718:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f003 031f 	and.w	r3, r3, #31
 8006720:	2201      	movs	r2, #1
 8006722:	409a      	lsls	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	58025408 	.word	0x58025408
 8006738:	5802541c 	.word	0x5802541c
 800673c:	58025430 	.word	0x58025430
 8006740:	58025444 	.word	0x58025444
 8006744:	58025458 	.word	0x58025458
 8006748:	5802546c 	.word	0x5802546c
 800674c:	58025480 	.word	0x58025480
 8006750:	58025494 	.word	0x58025494
 8006754:	cccccccd 	.word	0xcccccccd
 8006758:	16009600 	.word	0x16009600
 800675c:	58025880 	.word	0x58025880
 8006760:	aaaaaaab 	.word	0xaaaaaaab
 8006764:	400204b8 	.word	0x400204b8
 8006768:	4002040f 	.word	0x4002040f
 800676c:	10008200 	.word	0x10008200
 8006770:	40020880 	.word	0x40020880

08006774 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d04a      	beq.n	8006820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d847      	bhi.n	8006820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a25      	ldr	r2, [pc, #148]	@ (800682c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d022      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a24      	ldr	r2, [pc, #144]	@ (8006830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d01d      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a22      	ldr	r2, [pc, #136]	@ (8006834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d018      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a21      	ldr	r2, [pc, #132]	@ (8006838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d013      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1f      	ldr	r2, [pc, #124]	@ (800683c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00e      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d009      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1b      	ldr	r2, [pc, #108]	@ (8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d101      	bne.n	80067e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80067e4:	2300      	movs	r3, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4b17      	ldr	r3, [pc, #92]	@ (800684c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a15      	ldr	r2, [pc, #84]	@ (8006850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80067fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80067fe:	e009      	b.n	8006814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4b14      	ldr	r3, [pc, #80]	@ (8006854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	461a      	mov	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a11      	ldr	r2, [pc, #68]	@ (8006858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006812:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3b01      	subs	r3, #1
 8006818:	2201      	movs	r2, #1
 800681a:	409a      	lsls	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	58025408 	.word	0x58025408
 8006830:	5802541c 	.word	0x5802541c
 8006834:	58025430 	.word	0x58025430
 8006838:	58025444 	.word	0x58025444
 800683c:	58025458 	.word	0x58025458
 8006840:	5802546c 	.word	0x5802546c
 8006844:	58025480 	.word	0x58025480
 8006848:	58025494 	.word	0x58025494
 800684c:	1600963f 	.word	0x1600963f
 8006850:	58025940 	.word	0x58025940
 8006854:	1000823f 	.word	0x1000823f
 8006858:	40020940 	.word	0x40020940

0800685c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800685c:	b480      	push	{r7}
 800685e:	b089      	sub	sp, #36	@ 0x24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800686a:	4b89      	ldr	r3, [pc, #548]	@ (8006a90 <HAL_GPIO_Init+0x234>)
 800686c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800686e:	e194      	b.n	8006b9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	2101      	movs	r1, #1
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	fa01 f303 	lsl.w	r3, r1, r3
 800687c:	4013      	ands	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8186 	beq.w	8006b94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f003 0303 	and.w	r3, r3, #3
 8006890:	2b01      	cmp	r3, #1
 8006892:	d005      	beq.n	80068a0 <HAL_GPIO_Init+0x44>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d130      	bne.n	8006902 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	2203      	movs	r2, #3
 80068ac:	fa02 f303 	lsl.w	r3, r2, r3
 80068b0:	43db      	mvns	r3, r3
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	4013      	ands	r3, r2
 80068b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	fa02 f303 	lsl.w	r3, r2, r3
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068d6:	2201      	movs	r2, #1
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	43db      	mvns	r3, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	4013      	ands	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	091b      	lsrs	r3, r3, #4
 80068ec:	f003 0201 	and.w	r2, r3, #1
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b03      	cmp	r3, #3
 800690c:	d017      	beq.n	800693e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	2203      	movs	r2, #3
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	43db      	mvns	r3, r3
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	4013      	ands	r3, r2
 8006924:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	4313      	orrs	r3, r2
 8006936:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d123      	bne.n	8006992 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	08da      	lsrs	r2, r3, #3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3208      	adds	r2, #8
 8006952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	220f      	movs	r2, #15
 8006962:	fa02 f303 	lsl.w	r3, r2, r3
 8006966:	43db      	mvns	r3, r3
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	4013      	ands	r3, r2
 800696c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	691a      	ldr	r2, [r3, #16]
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	fa02 f303 	lsl.w	r3, r2, r3
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	4313      	orrs	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	08da      	lsrs	r2, r3, #3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3208      	adds	r2, #8
 800698c:	69b9      	ldr	r1, [r7, #24]
 800698e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	2203      	movs	r2, #3
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	43db      	mvns	r3, r3
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	4013      	ands	r3, r2
 80069a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f003 0203 	and.w	r2, r3, #3
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	4313      	orrs	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 80e0 	beq.w	8006b94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069d4:	4b2f      	ldr	r3, [pc, #188]	@ (8006a94 <HAL_GPIO_Init+0x238>)
 80069d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069da:	4a2e      	ldr	r2, [pc, #184]	@ (8006a94 <HAL_GPIO_Init+0x238>)
 80069dc:	f043 0302 	orr.w	r3, r3, #2
 80069e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80069e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a94 <HAL_GPIO_Init+0x238>)
 80069e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069f2:	4a29      	ldr	r2, [pc, #164]	@ (8006a98 <HAL_GPIO_Init+0x23c>)
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	089b      	lsrs	r3, r3, #2
 80069f8:	3302      	adds	r3, #2
 80069fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	220f      	movs	r2, #15
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	43db      	mvns	r3, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	4013      	ands	r3, r2
 8006a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a20      	ldr	r2, [pc, #128]	@ (8006a9c <HAL_GPIO_Init+0x240>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d052      	beq.n	8006ac4 <HAL_GPIO_Init+0x268>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa0 <HAL_GPIO_Init+0x244>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d031      	beq.n	8006a8a <HAL_GPIO_Init+0x22e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa4 <HAL_GPIO_Init+0x248>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d02b      	beq.n	8006a86 <HAL_GPIO_Init+0x22a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa8 <HAL_GPIO_Init+0x24c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d025      	beq.n	8006a82 <HAL_GPIO_Init+0x226>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a1c      	ldr	r2, [pc, #112]	@ (8006aac <HAL_GPIO_Init+0x250>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01f      	beq.n	8006a7e <HAL_GPIO_Init+0x222>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab0 <HAL_GPIO_Init+0x254>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d019      	beq.n	8006a7a <HAL_GPIO_Init+0x21e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab4 <HAL_GPIO_Init+0x258>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_GPIO_Init+0x21a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a19      	ldr	r2, [pc, #100]	@ (8006ab8 <HAL_GPIO_Init+0x25c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00d      	beq.n	8006a72 <HAL_GPIO_Init+0x216>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a18      	ldr	r2, [pc, #96]	@ (8006abc <HAL_GPIO_Init+0x260>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d007      	beq.n	8006a6e <HAL_GPIO_Init+0x212>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a17      	ldr	r2, [pc, #92]	@ (8006ac0 <HAL_GPIO_Init+0x264>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d101      	bne.n	8006a6a <HAL_GPIO_Init+0x20e>
 8006a66:	2309      	movs	r3, #9
 8006a68:	e02d      	b.n	8006ac6 <HAL_GPIO_Init+0x26a>
 8006a6a:	230a      	movs	r3, #10
 8006a6c:	e02b      	b.n	8006ac6 <HAL_GPIO_Init+0x26a>
 8006a6e:	2308      	movs	r3, #8
 8006a70:	e029      	b.n	8006ac6 <HAL_GPIO_Init+0x26a>
 8006a72:	2307      	movs	r3, #7
 8006a74:	e027      	b.n	8006ac6 <HAL_GPIO_Init+0x26a>
 8006a76:	2306      	movs	r3, #6
 8006a78:	e025      	b.n	8006ac6 <HAL_GPIO_Init+0x26a>
 8006a7a:	2305      	movs	r3, #5
 8006a7c:	e023      	b.n	8006ac6 <HAL_GPIO_Init+0x26a>
 8006a7e:	2304      	movs	r3, #4
 8006a80:	e021      	b.n	8006ac6 <HAL_GPIO_Init+0x26a>
 8006a82:	2303      	movs	r3, #3
 8006a84:	e01f      	b.n	8006ac6 <HAL_GPIO_Init+0x26a>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e01d      	b.n	8006ac6 <HAL_GPIO_Init+0x26a>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e01b      	b.n	8006ac6 <HAL_GPIO_Init+0x26a>
 8006a8e:	bf00      	nop
 8006a90:	58000080 	.word	0x58000080
 8006a94:	58024400 	.word	0x58024400
 8006a98:	58000400 	.word	0x58000400
 8006a9c:	58020000 	.word	0x58020000
 8006aa0:	58020400 	.word	0x58020400
 8006aa4:	58020800 	.word	0x58020800
 8006aa8:	58020c00 	.word	0x58020c00
 8006aac:	58021000 	.word	0x58021000
 8006ab0:	58021400 	.word	0x58021400
 8006ab4:	58021800 	.word	0x58021800
 8006ab8:	58021c00 	.word	0x58021c00
 8006abc:	58022000 	.word	0x58022000
 8006ac0:	58022400 	.word	0x58022400
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	f002 0203 	and.w	r2, r2, #3
 8006acc:	0092      	lsls	r2, r2, #2
 8006ace:	4093      	lsls	r3, r2
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ad6:	4938      	ldr	r1, [pc, #224]	@ (8006bb8 <HAL_GPIO_Init+0x35c>)
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	089b      	lsrs	r3, r3, #2
 8006adc:	3302      	adds	r3, #2
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	43db      	mvns	r3, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4013      	ands	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	4013      	ands	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006b38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	43db      	mvns	r3, r3
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	43db      	mvns	r3, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4013      	ands	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3301      	adds	r3, #1
 8006b98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f47f ae63 	bne.w	8006870 <HAL_GPIO_Init+0x14>
  }
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	3724      	adds	r7, #36	@ 0x24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	58000400 	.word	0x58000400

08006bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	807b      	strh	r3, [r7, #2]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bcc:	787b      	ldrb	r3, [r7, #1]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bd2:	887a      	ldrh	r2, [r7, #2]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006bd8:	e003      	b.n	8006be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006bda:	887b      	ldrh	r3, [r7, #2]
 8006bdc:	041a      	lsls	r2, r3, #16
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	619a      	str	r2, [r3, #24]
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e08b      	b.n	8006d1a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fa fbf2 	bl	8001400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2224      	movs	r2, #36	@ 0x24
 8006c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006c40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d107      	bne.n	8006c6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c66:	609a      	str	r2, [r3, #8]
 8006c68:	e006      	b.n	8006c78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006c76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d108      	bne.n	8006c92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c8e:	605a      	str	r2, [r3, #4]
 8006c90:	e007      	b.n	8006ca2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ca0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6859      	ldr	r1, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	4b1d      	ldr	r3, [pc, #116]	@ (8006d24 <HAL_I2C_Init+0x134>)
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006cc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691a      	ldr	r2, [r3, #16]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69d9      	ldr	r1, [r3, #28]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1a      	ldr	r2, [r3, #32]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	02008000 	.word	0x02008000

08006d28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	607a      	str	r2, [r7, #4]
 8006d32:	461a      	mov	r2, r3
 8006d34:	460b      	mov	r3, r1
 8006d36:	817b      	strh	r3, [r7, #10]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	f040 80fd 	bne.w	8006f44 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_I2C_Master_Transmit+0x30>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e0f6      	b.n	8006f46 <HAL_I2C_Master_Transmit+0x21e>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d60:	f7fb fab0 	bl	80022c4 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	2319      	movs	r3, #25
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f002 f89e 	bl	8008eb4 <I2C_WaitOnFlagUntilTimeout>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e0e1      	b.n	8006f46 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2221      	movs	r2, #33	@ 0x21
 8006d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2210      	movs	r2, #16
 8006d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	893a      	ldrh	r2, [r7, #8]
 8006da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2bff      	cmp	r3, #255	@ 0xff
 8006db2:	d906      	bls.n	8006dc2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	22ff      	movs	r2, #255	@ 0xff
 8006db8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006dba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	e007      	b.n	8006dd2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006dcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006dd0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d024      	beq.n	8006e24 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	781a      	ldrb	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	3301      	adds	r3, #1
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	8979      	ldrh	r1, [r7, #10]
 8006e16:	4b4e      	ldr	r3, [pc, #312]	@ (8006f50 <HAL_I2C_Master_Transmit+0x228>)
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f002 fa0d 	bl	800923c <I2C_TransferConfig>
 8006e22:	e066      	b.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	8979      	ldrh	r1, [r7, #10]
 8006e2c:	4b48      	ldr	r3, [pc, #288]	@ (8006f50 <HAL_I2C_Master_Transmit+0x228>)
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f002 fa02 	bl	800923c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006e38:	e05b      	b.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	6a39      	ldr	r1, [r7, #32]
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f002 f891 	bl	8008f66 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e07b      	b.n	8006f46 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e52:	781a      	ldrb	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d034      	beq.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ca>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d130      	bne.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	2200      	movs	r2, #0
 8006e98:	2180      	movs	r1, #128	@ 0x80
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f002 f80a 	bl	8008eb4 <I2C_WaitOnFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e04d      	b.n	8006f46 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2bff      	cmp	r3, #255	@ 0xff
 8006eb2:	d90e      	bls.n	8006ed2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	@ 0xff
 8006eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	8979      	ldrh	r1, [r7, #10]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f002 f9b6 	bl	800923c <I2C_TransferConfig>
 8006ed0:	e00f      	b.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	8979      	ldrh	r1, [r7, #10]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f002 f9a5 	bl	800923c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d19e      	bne.n	8006e3a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	6a39      	ldr	r1, [r7, #32]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f002 f877 	bl	8008ff4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e01a      	b.n	8006f46 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2220      	movs	r2, #32
 8006f16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6859      	ldr	r1, [r3, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b0c      	ldr	r3, [pc, #48]	@ (8006f54 <HAL_I2C_Master_Transmit+0x22c>)
 8006f24:	400b      	ands	r3, r1
 8006f26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	e000      	b.n	8006f46 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006f44:	2302      	movs	r3, #2
  }
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	80002000 	.word	0x80002000
 8006f54:	fe00e800 	.word	0xfe00e800

08006f58 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08a      	sub	sp, #40	@ 0x28
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	461a      	mov	r2, r3
 8006f64:	460b      	mov	r3, r1
 8006f66:	817b      	strh	r3, [r7, #10]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	f040 80ef 	bne.w	800715c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f8c:	d101      	bne.n	8006f92 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e0e5      	b.n	800715e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_I2C_Master_Transmit_DMA+0x48>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e0de      	b.n	800715e <HAL_I2C_Master_Transmit_DMA+0x206>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2221      	movs	r2, #33	@ 0x21
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2210      	movs	r2, #16
 8006fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	893a      	ldrh	r2, [r7, #8]
 8006fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4a66      	ldr	r2, [pc, #408]	@ (8007168 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8006fce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a66      	ldr	r2, [pc, #408]	@ (800716c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006fd4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2bff      	cmp	r3, #255	@ 0xff
 8006fde:	d906      	bls.n	8006fee <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	22ff      	movs	r2, #255	@ 0xff
 8006fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006fe6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006fea:	61fb      	str	r3, [r7, #28]
 8006fec:	e007      	b.n	8006ffe <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ffc:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d01a      	beq.n	800703c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700a:	781a      	ldrb	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007020:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007034:	3b01      	subs	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007040:	2b00      	cmp	r3, #0
 8007042:	d074      	beq.n	800712e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007048:	2b00      	cmp	r3, #0
 800704a:	d022      	beq.n	8007092 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	4a47      	ldr	r2, [pc, #284]	@ (8007170 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8007052:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007058:	4a46      	ldr	r2, [pc, #280]	@ (8007174 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800705a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007060:	2200      	movs	r2, #0
 8007062:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007068:	2200      	movs	r2, #0
 800706a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007074:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800707c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007082:	f7fd f8f1 	bl	8004268 <HAL_DMA_Start_IT>
 8007086:	4603      	mov	r3, r0
 8007088:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d13a      	bne.n	8007106 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007090:	e013      	b.n	80070ba <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e051      	b.n	800715e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	3301      	adds	r3, #1
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	8979      	ldrh	r1, [r7, #10]
 80070c6:	4b2c      	ldr	r3, [pc, #176]	@ (8007178 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f002 f8b5 	bl	800923c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80070ec:	2110      	movs	r1, #16
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f002 f8d6 	bl	80092a0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	e028      	b.n	8007158 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711a:	f043 0210 	orr.w	r2, r3, #16
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e017      	b.n	800715e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4a12      	ldr	r2, [pc, #72]	@ (800717c <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007132:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	b2da      	uxtb	r2, r3
 8007138:	8979      	ldrh	r1, [r7, #10]
 800713a:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f002 f87a 	bl	800923c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007150:	2101      	movs	r1, #1
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f002 f8a4 	bl	80092a0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	e000      	b.n	800715e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800715c:	2302      	movs	r3, #2
  }
}
 800715e:	4618      	mov	r0, r3
 8007160:	3720      	adds	r7, #32
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	ffff0000 	.word	0xffff0000
 800716c:	080077b7 	.word	0x080077b7
 8007170:	08008b6f 	.word	0x08008b6f
 8007174:	08008c05 	.word	0x08008c05
 8007178:	80002000 	.word	0x80002000
 800717c:	08007347 	.word	0x08007347

08007180 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	68f9      	ldr	r1, [r7, #12]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	4798      	blx	r3
  }
}
 80071ac:	bf00      	nop
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	0a1b      	lsrs	r3, r3, #8
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d010      	beq.n	80071fa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	09db      	lsrs	r3, r3, #7
 80071dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e8:	f043 0201 	orr.w	r2, r3, #1
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	0a9b      	lsrs	r3, r3, #10
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d010      	beq.n	8007228 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	09db      	lsrs	r3, r3, #7
 800720a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007216:	f043 0208 	orr.w	r2, r3, #8
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007226:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	0a5b      	lsrs	r3, r3, #9
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	09db      	lsrs	r3, r3, #7
 8007238:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007244:	f043 0202 	orr.w	r2, r3, #2
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007254:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800725a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f003 030b 	and.w	r3, r3, #11
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 fb45 	bl	80088f8 <I2C_ITError>
  }
}
 800726e:	bf00      	nop
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	460b      	mov	r3, r1
 80072d0:	70fb      	strb	r3, [r7, #3]
 80072d2:	4613      	mov	r3, r2
 80072d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b088      	sub	sp, #32
 800734a:	af02      	add	r7, sp, #8
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <I2C_Master_ISR_IT+0x1e>
 8007360:	2302      	movs	r3, #2
 8007362:	e120      	b.n	80075a6 <I2C_Master_ISR_IT+0x260>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	091b      	lsrs	r3, r3, #4
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d013      	beq.n	80073a0 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	091b      	lsrs	r3, r3, #4
 800737c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00d      	beq.n	80073a0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2210      	movs	r2, #16
 800738a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007390:	f043 0204 	orr.w	r2, r3, #4
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f001 fbc4 	bl	8008b26 <I2C_Flush_TXDR>
 800739e:	e0ed      	b.n	800757c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	089b      	lsrs	r3, r3, #2
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d023      	beq.n	80073f4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	089b      	lsrs	r3, r3, #2
 80073b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01d      	beq.n	80073f4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f023 0304 	bic.w	r3, r3, #4
 80073be:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073dc:	3b01      	subs	r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073f2:	e0c3      	b.n	800757c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	099b      	lsrs	r3, r3, #6
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d12a      	bne.n	8007456 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	085b      	lsrs	r3, r3, #1
 8007404:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007408:	2b00      	cmp	r3, #0
 800740a:	d024      	beq.n	8007456 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	085b      	lsrs	r3, r3, #1
 8007410:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01e      	beq.n	8007456 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 80ac 	beq.w	800757c <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	781a      	ldrb	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	3b01      	subs	r3, #1
 800744e:	b29a      	uxth	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8007454:	e092      	b.n	800757c <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	09db      	lsrs	r3, r3, #7
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d05d      	beq.n	800751e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	099b      	lsrs	r3, r3, #6
 8007466:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800746a:	2b00      	cmp	r3, #0
 800746c:	d057      	beq.n	800751e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d040      	beq.n	80074fa <I2C_Master_ISR_IT+0x1b4>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800747c:	2b00      	cmp	r3, #0
 800747e:	d13c      	bne.n	80074fa <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800748c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007492:	b29b      	uxth	r3, r3
 8007494:	2bff      	cmp	r3, #255	@ 0xff
 8007496:	d90e      	bls.n	80074b6 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	22ff      	movs	r2, #255	@ 0xff
 800749c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	8a79      	ldrh	r1, [r7, #18]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f001 fec4 	bl	800923c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074b4:	e032      	b.n	800751c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80074c8:	d00b      	beq.n	80074e2 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ce:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80074d4:	8a79      	ldrh	r1, [r7, #18]
 80074d6:	2000      	movs	r0, #0
 80074d8:	9000      	str	r0, [sp, #0]
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 feae 	bl	800923c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074e0:	e01c      	b.n	800751c <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	8a79      	ldrh	r1, [r7, #18]
 80074ea:	2300      	movs	r3, #0
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f001 fea2 	bl	800923c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074f8:	e010      	b.n	800751c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007508:	d003      	beq.n	8007512 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fdde 	bl	80080cc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007510:	e034      	b.n	800757c <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007512:	2140      	movs	r1, #64	@ 0x40
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f001 f9ef 	bl	80088f8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800751a:	e02f      	b.n	800757c <I2C_Master_ISR_IT+0x236>
 800751c:	e02e      	b.n	800757c <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	099b      	lsrs	r3, r3, #6
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d028      	beq.n	800757c <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	099b      	lsrs	r3, r3, #6
 800752e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007532:	2b00      	cmp	r3, #0
 8007534:	d022      	beq.n	800757c <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d119      	bne.n	8007574 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800754a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800754e:	d015      	beq.n	800757c <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007558:	d108      	bne.n	800756c <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007568:	605a      	str	r2, [r3, #4]
 800756a:	e007      	b.n	800757c <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fdad 	bl	80080cc <I2C_ITMasterSeqCplt>
 8007572:	e003      	b.n	800757c <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007574:	2140      	movs	r1, #64	@ 0x40
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f001 f9be 	bl	80088f8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d009      	beq.n	800759c <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	095b      	lsrs	r3, r3, #5
 800758c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007594:	6979      	ldr	r1, [r7, #20]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 fe34 	bl	8008204 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b086      	sub	sp, #24
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075be:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <I2C_Slave_ISR_IT+0x24>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e0ed      	b.n	80077ae <I2C_Slave_ISR_IT+0x200>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d004      	beq.n	80075fc <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80075f2:	6939      	ldr	r1, [r7, #16]
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fecf 	bl	8008398 <I2C_ITSlaveCplt>
 80075fa:	e0d3      	b.n	80077a4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	091b      	lsrs	r3, r3, #4
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d04d      	beq.n	80076a4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	091b      	lsrs	r3, r3, #4
 800760c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007610:	2b00      	cmp	r3, #0
 8007612:	d047      	beq.n	80076a4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d128      	bne.n	8007670 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b28      	cmp	r3, #40	@ 0x28
 8007628:	d108      	bne.n	800763c <I2C_Slave_ISR_IT+0x8e>
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007630:	d104      	bne.n	800763c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007632:	6939      	ldr	r1, [r7, #16]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f001 f909 	bl	800884c <I2C_ITListenCplt>
 800763a:	e032      	b.n	80076a2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b29      	cmp	r3, #41	@ 0x29
 8007646:	d10e      	bne.n	8007666 <I2C_Slave_ISR_IT+0xb8>
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800764e:	d00a      	beq.n	8007666 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2210      	movs	r2, #16
 8007656:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f001 fa64 	bl	8008b26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 fd71 	bl	8008146 <I2C_ITSlaveSeqCplt>
 8007664:	e01d      	b.n	80076a2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2210      	movs	r2, #16
 800766c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800766e:	e096      	b.n	800779e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2210      	movs	r2, #16
 8007676:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767c:	f043 0204 	orr.w	r2, r3, #4
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d004      	beq.n	8007694 <I2C_Slave_ISR_IT+0xe6>
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007690:	f040 8085 	bne.w	800779e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007698:	4619      	mov	r1, r3
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f001 f92c 	bl	80088f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80076a0:	e07d      	b.n	800779e <I2C_Slave_ISR_IT+0x1f0>
 80076a2:	e07c      	b.n	800779e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	089b      	lsrs	r3, r3, #2
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d030      	beq.n	8007712 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	089b      	lsrs	r3, r3, #2
 80076b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d02a      	beq.n	8007712 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d018      	beq.n	80076f8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d14f      	bne.n	80077a2 <I2C_Slave_ISR_IT+0x1f4>
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007708:	d04b      	beq.n	80077a2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 fd1b 	bl	8008146 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007710:	e047      	b.n	80077a2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	08db      	lsrs	r3, r3, #3
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	08db      	lsrs	r3, r3, #3
 8007722:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800772a:	6939      	ldr	r1, [r7, #16]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 fc49 	bl	8007fc4 <I2C_ITAddrCplt>
 8007732:	e037      	b.n	80077a4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	085b      	lsrs	r3, r3, #1
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d031      	beq.n	80077a4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	085b      	lsrs	r3, r3, #1
 8007744:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007748:	2b00      	cmp	r3, #0
 800774a:	d02b      	beq.n	80077a4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d018      	beq.n	8007788 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800777e:	3b01      	subs	r3, #1
 8007780:	b29a      	uxth	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007786:	e00d      	b.n	80077a4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800778e:	d002      	beq.n	8007796 <I2C_Slave_ISR_IT+0x1e8>
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d106      	bne.n	80077a4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fcd5 	bl	8008146 <I2C_ITSlaveSeqCplt>
 800779c:	e002      	b.n	80077a4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800779e:	bf00      	nop
 80077a0:	e000      	b.n	80077a4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80077a2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b088      	sub	sp, #32
 80077ba:	af02      	add	r7, sp, #8
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <I2C_Master_ISR_DMA+0x1a>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e0e1      	b.n	8007994 <I2C_Master_ISR_DMA+0x1de>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	091b      	lsrs	r3, r3, #4
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d017      	beq.n	8007814 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	091b      	lsrs	r3, r3, #4
 80077e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d011      	beq.n	8007814 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2210      	movs	r2, #16
 80077f6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077fc:	f043 0204 	orr.w	r2, r3, #4
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007804:	2120      	movs	r1, #32
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f001 fd4a 	bl	80092a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f001 f98a 	bl	8008b26 <I2C_Flush_TXDR>
 8007812:	e0ba      	b.n	800798a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	09db      	lsrs	r3, r3, #7
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d072      	beq.n	8007906 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	099b      	lsrs	r3, r3, #6
 8007824:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007828:	2b00      	cmp	r3, #0
 800782a:	d06c      	beq.n	8007906 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800783a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d04e      	beq.n	80078e4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	b29b      	uxth	r3, r3
 800784e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007852:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007858:	b29b      	uxth	r3, r3
 800785a:	2bff      	cmp	r3, #255	@ 0xff
 800785c:	d906      	bls.n	800786c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	22ff      	movs	r2, #255	@ 0xff
 8007862:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007864:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007868:	617b      	str	r3, [r7, #20]
 800786a:	e010      	b.n	800788e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800787e:	d003      	beq.n	8007888 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	e002      	b.n	800788e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007888:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800788c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007892:	b2da      	uxtb	r2, r3
 8007894:	8a79      	ldrh	r1, [r7, #18]
 8007896:	2300      	movs	r3, #0
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f001 fccd 	bl	800923c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b22      	cmp	r3, #34	@ 0x22
 80078be:	d108      	bne.n	80078d2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80078d0:	e05b      	b.n	800798a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80078e2:	e052      	b.n	800798a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078f2:	d003      	beq.n	80078fc <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fbe9 	bl	80080cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80078fa:	e046      	b.n	800798a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80078fc:	2140      	movs	r1, #64	@ 0x40
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fffa 	bl	80088f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007904:	e041      	b.n	800798a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	099b      	lsrs	r3, r3, #6
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d029      	beq.n	8007966 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	099b      	lsrs	r3, r3, #6
 8007916:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800791a:	2b00      	cmp	r3, #0
 800791c:	d023      	beq.n	8007966 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d119      	bne.n	800795c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007932:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007936:	d027      	beq.n	8007988 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007940:	d108      	bne.n	8007954 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007950:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007952:	e019      	b.n	8007988 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 fbb9 	bl	80080cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800795a:	e015      	b.n	8007988 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800795c:	2140      	movs	r1, #64	@ 0x40
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 ffca 	bl	80088f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007964:	e010      	b.n	8007988 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	095b      	lsrs	r3, r3, #5
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00b      	beq.n	800798a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	095b      	lsrs	r3, r3, #5
 8007976:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800797e:	68b9      	ldr	r1, [r7, #8]
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 fc3f 	bl	8008204 <I2C_ITMasterCplt>
 8007986:	e000      	b.n	800798a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007988:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80079a8:	4b92      	ldr	r3, [pc, #584]	@ (8007bf4 <I2C_Mem_ISR_DMA+0x258>)
 80079aa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <I2C_Mem_ISR_DMA+0x1e>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e118      	b.n	8007bec <I2C_Mem_ISR_DMA+0x250>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	091b      	lsrs	r3, r3, #4
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d017      	beq.n	80079fe <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	091b      	lsrs	r3, r3, #4
 80079d2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d011      	beq.n	80079fe <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2210      	movs	r2, #16
 80079e0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079e6:	f043 0204 	orr.w	r2, r3, #4
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80079ee:	2120      	movs	r1, #32
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f001 fc55 	bl	80092a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f001 f895 	bl	8008b26 <I2C_Flush_TXDR>
 80079fc:	e0f1      	b.n	8007be2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	085b      	lsrs	r3, r3, #1
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00f      	beq.n	8007a2a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	085b      	lsrs	r3, r3, #1
 8007a0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a1e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f04f 32ff 	mov.w	r2, #4294967295
 8007a26:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a28:	e0db      	b.n	8007be2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	09db      	lsrs	r3, r3, #7
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d060      	beq.n	8007af8 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	099b      	lsrs	r3, r3, #6
 8007a3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d05a      	beq.n	8007af8 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007a42:	2101      	movs	r1, #1
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f001 fcaf 	bl	80093a8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007a4a:	2110      	movs	r1, #16
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f001 fc27 	bl	80092a0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d048      	beq.n	8007aee <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2bff      	cmp	r3, #255	@ 0xff
 8007a64:	d910      	bls.n	8007a88 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	22ff      	movs	r2, #255	@ 0xff
 8007a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a70:	b299      	uxth	r1, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	2300      	movs	r3, #0
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f001 fbdb 	bl	800923c <I2C_TransferConfig>
 8007a86:	e011      	b.n	8007aac <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a96:	b299      	uxth	r1, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f001 fbc8 	bl	800923c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b22      	cmp	r3, #34	@ 0x22
 8007ac8:	d108      	bne.n	8007adc <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ad8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007ada:	e082      	b.n	8007be2 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007aea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007aec:	e079      	b.n	8007be2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007aee:	2140      	movs	r1, #64	@ 0x40
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 ff01 	bl	80088f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007af6:	e074      	b.n	8007be2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	099b      	lsrs	r3, r3, #6
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d05e      	beq.n	8007bc2 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	099b      	lsrs	r3, r3, #6
 8007b08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d058      	beq.n	8007bc2 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007b10:	2101      	movs	r1, #1
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f001 fc48 	bl	80093a8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007b18:	2110      	movs	r1, #16
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 fbc0 	bl	80092a0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b22      	cmp	r3, #34	@ 0x22
 8007b2a:	d101      	bne.n	8007b30 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8007b2c:	4b32      	ldr	r3, [pc, #200]	@ (8007bf8 <I2C_Mem_ISR_DMA+0x25c>)
 8007b2e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2bff      	cmp	r3, #255	@ 0xff
 8007b38:	d910      	bls.n	8007b5c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	22ff      	movs	r2, #255	@ 0xff
 8007b3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b44:	b299      	uxth	r1, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f001 fb71 	bl	800923c <I2C_TransferConfig>
 8007b5a:	e011      	b.n	8007b80 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b6a:	b299      	uxth	r1, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f001 fb5e 	bl	800923c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b22      	cmp	r3, #34	@ 0x22
 8007b9c:	d108      	bne.n	8007bb0 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bac:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bae:	e018      	b.n	8007be2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bbe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bc0:	e00f      	b.n	8007be2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	095b      	lsrs	r3, r3, #5
 8007bd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 fb11 	bl	8008204 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	80002000 	.word	0x80002000
 8007bf8:	80002400 	.word	0x80002400

08007bfc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <I2C_Slave_ISR_DMA+0x24>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e1cc      	b.n	8007fba <I2C_Slave_ISR_DMA+0x3be>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	095b      	lsrs	r3, r3, #5
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d004      	beq.n	8007c4a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007c40:	68b9      	ldr	r1, [r7, #8]
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fba8 	bl	8008398 <I2C_ITSlaveCplt>
 8007c48:	e1b2      	b.n	8007fb0 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	091b      	lsrs	r3, r3, #4
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 819c 	beq.w	8007f90 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	091b      	lsrs	r3, r3, #4
 8007c5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 8195 	beq.w	8007f90 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	0b9b      	lsrs	r3, r3, #14
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d106      	bne.n	8007c80 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	0bdb      	lsrs	r3, r3, #15
 8007c76:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 8181 	beq.w	8007f82 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d07c      	beq.n	8007d82 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	0bdb      	lsrs	r3, r3, #15
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d076      	beq.n	8007d82 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a75      	ldr	r2, [pc, #468]	@ (8007e70 <I2C_Slave_ISR_DMA+0x274>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d059      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a73      	ldr	r2, [pc, #460]	@ (8007e74 <I2C_Slave_ISR_DMA+0x278>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d053      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a71      	ldr	r2, [pc, #452]	@ (8007e78 <I2C_Slave_ISR_DMA+0x27c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d04d      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a6f      	ldr	r2, [pc, #444]	@ (8007e7c <I2C_Slave_ISR_DMA+0x280>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d047      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a6d      	ldr	r2, [pc, #436]	@ (8007e80 <I2C_Slave_ISR_DMA+0x284>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d041      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a6b      	ldr	r2, [pc, #428]	@ (8007e84 <I2C_Slave_ISR_DMA+0x288>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d03b      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a69      	ldr	r2, [pc, #420]	@ (8007e88 <I2C_Slave_ISR_DMA+0x28c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d035      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a67      	ldr	r2, [pc, #412]	@ (8007e8c <I2C_Slave_ISR_DMA+0x290>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d02f      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a65      	ldr	r2, [pc, #404]	@ (8007e90 <I2C_Slave_ISR_DMA+0x294>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d029      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a63      	ldr	r2, [pc, #396]	@ (8007e94 <I2C_Slave_ISR_DMA+0x298>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d023      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a61      	ldr	r2, [pc, #388]	@ (8007e98 <I2C_Slave_ISR_DMA+0x29c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d01d      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a5f      	ldr	r2, [pc, #380]	@ (8007e9c <I2C_Slave_ISR_DMA+0x2a0>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d017      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a5d      	ldr	r2, [pc, #372]	@ (8007ea0 <I2C_Slave_ISR_DMA+0x2a4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d011      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a5b      	ldr	r2, [pc, #364]	@ (8007ea4 <I2C_Slave_ISR_DMA+0x2a8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00b      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a59      	ldr	r2, [pc, #356]	@ (8007ea8 <I2C_Slave_ISR_DMA+0x2ac>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d005      	beq.n	8007d54 <I2C_Slave_ISR_DMA+0x158>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a57      	ldr	r2, [pc, #348]	@ (8007eac <I2C_Slave_ISR_DMA+0x2b0>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d109      	bne.n	8007d68 <I2C_Slave_ISR_DMA+0x16c>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bf0c      	ite	eq
 8007d60:	2301      	moveq	r3, #1
 8007d62:	2300      	movne	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	e008      	b.n	8007d7a <I2C_Slave_ISR_DMA+0x17e>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 809f 	beq.w	8007eca <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	0b9b      	lsrs	r3, r3, #14
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 8098 	beq.w	8007eca <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a33      	ldr	r2, [pc, #204]	@ (8007e70 <I2C_Slave_ISR_DMA+0x274>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d059      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a31      	ldr	r2, [pc, #196]	@ (8007e74 <I2C_Slave_ISR_DMA+0x278>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d053      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a2f      	ldr	r2, [pc, #188]	@ (8007e78 <I2C_Slave_ISR_DMA+0x27c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d04d      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8007e7c <I2C_Slave_ISR_DMA+0x280>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d047      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8007e80 <I2C_Slave_ISR_DMA+0x284>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d041      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a29      	ldr	r2, [pc, #164]	@ (8007e84 <I2C_Slave_ISR_DMA+0x288>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d03b      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a27      	ldr	r2, [pc, #156]	@ (8007e88 <I2C_Slave_ISR_DMA+0x28c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d035      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a25      	ldr	r2, [pc, #148]	@ (8007e8c <I2C_Slave_ISR_DMA+0x290>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d02f      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a23      	ldr	r2, [pc, #140]	@ (8007e90 <I2C_Slave_ISR_DMA+0x294>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d029      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a21      	ldr	r2, [pc, #132]	@ (8007e94 <I2C_Slave_ISR_DMA+0x298>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d023      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a1f      	ldr	r2, [pc, #124]	@ (8007e98 <I2C_Slave_ISR_DMA+0x29c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d01d      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a1d      	ldr	r2, [pc, #116]	@ (8007e9c <I2C_Slave_ISR_DMA+0x2a0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d017      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1b      	ldr	r2, [pc, #108]	@ (8007ea0 <I2C_Slave_ISR_DMA+0x2a4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d011      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a19      	ldr	r2, [pc, #100]	@ (8007ea4 <I2C_Slave_ISR_DMA+0x2a8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00b      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a17      	ldr	r2, [pc, #92]	@ (8007ea8 <I2C_Slave_ISR_DMA+0x2ac>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d005      	beq.n	8007e5a <I2C_Slave_ISR_DMA+0x25e>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a15      	ldr	r2, [pc, #84]	@ (8007eac <I2C_Slave_ISR_DMA+0x2b0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d12a      	bne.n	8007eb0 <I2C_Slave_ISR_DMA+0x2b4>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bf0c      	ite	eq
 8007e66:	2301      	moveq	r3, #1
 8007e68:	2300      	movne	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	e029      	b.n	8007ec2 <I2C_Slave_ISR_DMA+0x2c6>
 8007e6e:	bf00      	nop
 8007e70:	40020010 	.word	0x40020010
 8007e74:	40020028 	.word	0x40020028
 8007e78:	40020040 	.word	0x40020040
 8007e7c:	40020058 	.word	0x40020058
 8007e80:	40020070 	.word	0x40020070
 8007e84:	40020088 	.word	0x40020088
 8007e88:	400200a0 	.word	0x400200a0
 8007e8c:	400200b8 	.word	0x400200b8
 8007e90:	40020410 	.word	0x40020410
 8007e94:	40020428 	.word	0x40020428
 8007e98:	40020440 	.word	0x40020440
 8007e9c:	40020458 	.word	0x40020458
 8007ea0:	40020470 	.word	0x40020470
 8007ea4:	40020488 	.word	0x40020488
 8007ea8:	400204a0 	.word	0x400204a0
 8007eac:	400204b8 	.word	0x400204b8
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d128      	bne.n	8007f22 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b28      	cmp	r3, #40	@ 0x28
 8007eda:	d108      	bne.n	8007eee <I2C_Slave_ISR_DMA+0x2f2>
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ee2:	d104      	bne.n	8007eee <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007ee4:	68b9      	ldr	r1, [r7, #8]
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 fcb0 	bl	800884c <I2C_ITListenCplt>
 8007eec:	e048      	b.n	8007f80 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b29      	cmp	r3, #41	@ 0x29
 8007ef8:	d10e      	bne.n	8007f18 <I2C_Slave_ISR_DMA+0x31c>
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f00:	d00a      	beq.n	8007f18 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2210      	movs	r2, #16
 8007f08:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fe0b 	bl	8008b26 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f918 	bl	8008146 <I2C_ITSlaveSeqCplt>
 8007f16:	e033      	b.n	8007f80 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2210      	movs	r2, #16
 8007f1e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007f20:	e034      	b.n	8007f8c <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2210      	movs	r2, #16
 8007f28:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2e:	f043 0204 	orr.w	r2, r3, #4
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f3c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <I2C_Slave_ISR_DMA+0x350>
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f4a:	d11f      	bne.n	8007f8c <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	2b21      	cmp	r3, #33	@ 0x21
 8007f50:	d002      	beq.n	8007f58 <I2C_Slave_ISR_DMA+0x35c>
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	2b29      	cmp	r3, #41	@ 0x29
 8007f56:	d103      	bne.n	8007f60 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2221      	movs	r2, #33	@ 0x21
 8007f5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f5e:	e008      	b.n	8007f72 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	2b22      	cmp	r3, #34	@ 0x22
 8007f64:	d002      	beq.n	8007f6c <I2C_Slave_ISR_DMA+0x370>
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f6a:	d102      	bne.n	8007f72 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2222      	movs	r2, #34	@ 0x22
 8007f70:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f76:	4619      	mov	r1, r3
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fcbd 	bl	80088f8 <I2C_ITError>
      if (treatdmanack == 1U)
 8007f7e:	e005      	b.n	8007f8c <I2C_Slave_ISR_DMA+0x390>
 8007f80:	e004      	b.n	8007f8c <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2210      	movs	r2, #16
 8007f88:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f8a:	e011      	b.n	8007fb0 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8007f8c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f8e:	e00f      	b.n	8007fb0 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	08db      	lsrs	r3, r3, #3
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d009      	beq.n	8007fb0 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	08db      	lsrs	r3, r3, #3
 8007fa0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d003      	beq.n	8007fb0 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 f80a 	bl	8007fc4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3720      	adds	r7, #32
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop

08007fc4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fda:	2b28      	cmp	r3, #40	@ 0x28
 8007fdc:	d16a      	bne.n	80080b4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007ffc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	b29b      	uxth	r3, r3
 8008006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800800a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	b29b      	uxth	r3, r3
 8008014:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008018:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d138      	bne.n	8008094 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008022:	897b      	ldrh	r3, [r7, #10]
 8008024:	09db      	lsrs	r3, r3, #7
 8008026:	b29a      	uxth	r2, r3
 8008028:	89bb      	ldrh	r3, [r7, #12]
 800802a:	4053      	eors	r3, r2
 800802c:	b29b      	uxth	r3, r3
 800802e:	f003 0306 	and.w	r3, r3, #6
 8008032:	2b00      	cmp	r3, #0
 8008034:	d11c      	bne.n	8008070 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008036:	897b      	ldrh	r3, [r7, #10]
 8008038:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008048:	2b02      	cmp	r3, #2
 800804a:	d13b      	bne.n	80080c4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2208      	movs	r2, #8
 8008058:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008062:	89ba      	ldrh	r2, [r7, #12]
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff f92c 	bl	80072c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800806e:	e029      	b.n	80080c4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008070:	893b      	ldrh	r3, [r7, #8]
 8008072:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008074:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 f995 	bl	80093a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008086:	89ba      	ldrh	r2, [r7, #12]
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff f91a 	bl	80072c6 <HAL_I2C_AddrCallback>
}
 8008092:	e017      	b.n	80080c4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 f985 	bl	80093a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080a6:	89ba      	ldrh	r2, [r7, #12]
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff f90a 	bl	80072c6 <HAL_I2C_AddrCallback>
}
 80080b2:	e007      	b.n	80080c4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2208      	movs	r2, #8
 80080ba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80080c4:	bf00      	nop
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b21      	cmp	r3, #33	@ 0x21
 80080e6:	d115      	bne.n	8008114 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2220      	movs	r2, #32
 80080ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2211      	movs	r2, #17
 80080f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80080fc:	2101      	movs	r1, #1
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 f952 	bl	80093a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff f8b2 	bl	8007276 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008112:	e014      	b.n	800813e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2212      	movs	r2, #18
 8008120:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008128:	2102      	movs	r1, #2
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f001 f93c 	bl	80093a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff f8a6 	bl	800728a <HAL_I2C_MasterRxCpltCallback>
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	0b9b      	lsrs	r3, r3, #14
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d008      	beq.n	800817c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	e00d      	b.n	8008198 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	0bdb      	lsrs	r3, r3, #15
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008196:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b29      	cmp	r3, #41	@ 0x29
 80081a2:	d112      	bne.n	80081ca <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2228      	movs	r2, #40	@ 0x28
 80081a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2221      	movs	r2, #33	@ 0x21
 80081b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80081b2:	2101      	movs	r1, #1
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 f8f7 	bl	80093a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff f86b 	bl	800729e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80081c8:	e017      	b.n	80081fa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80081d4:	d111      	bne.n	80081fa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2228      	movs	r2, #40	@ 0x28
 80081da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2222      	movs	r2, #34	@ 0x22
 80081e2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80081e4:	2102      	movs	r1, #2
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 f8de 	bl	80093a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff f85c 	bl	80072b2 <HAL_I2C_SlaveRxCpltCallback>
}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2220      	movs	r2, #32
 8008218:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b21      	cmp	r3, #33	@ 0x21
 8008224:	d107      	bne.n	8008236 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008226:	2101      	movs	r1, #1
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 f8bd 	bl	80093a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2211      	movs	r2, #17
 8008232:	631a      	str	r2, [r3, #48]	@ 0x30
 8008234:	e00c      	b.n	8008250 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b22      	cmp	r3, #34	@ 0x22
 8008240:	d106      	bne.n	8008250 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008242:	2102      	movs	r1, #2
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 f8af 	bl	80093a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2212      	movs	r2, #18
 800824e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6859      	ldr	r1, [r3, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b4d      	ldr	r3, [pc, #308]	@ (8008390 <I2C_ITMasterCplt+0x18c>)
 800825c:	400b      	ands	r3, r1
 800825e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a4a      	ldr	r2, [pc, #296]	@ (8008394 <I2C_ITMasterCplt+0x190>)
 800826a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	091b      	lsrs	r3, r3, #4
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2210      	movs	r2, #16
 800827e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008284:	f043 0204 	orr.w	r2, r3, #4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b60      	cmp	r3, #96	@ 0x60
 8008296:	d10b      	bne.n	80082b0 <I2C_ITMasterCplt+0xac>
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	089b      	lsrs	r3, r3, #2
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d005      	beq.n	80082b0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80082ae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fc38 	bl	8008b26 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b60      	cmp	r3, #96	@ 0x60
 80082c6:	d002      	beq.n	80082ce <I2C_ITMasterCplt+0xca>
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d006      	beq.n	80082dc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fb0f 	bl	80088f8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80082da:	e054      	b.n	8008386 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b21      	cmp	r3, #33	@ 0x21
 80082e6:	d124      	bne.n	8008332 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2220      	movs	r2, #32
 80082ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b40      	cmp	r3, #64	@ 0x40
 8008300:	d10b      	bne.n	800831a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fe ffef 	bl	80072f6 <HAL_I2C_MemTxCpltCallback>
}
 8008318:	e035      	b.n	8008386 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7fe ffa3 	bl	8007276 <HAL_I2C_MasterTxCpltCallback>
}
 8008330:	e029      	b.n	8008386 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b22      	cmp	r3, #34	@ 0x22
 800833c:	d123      	bne.n	8008386 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b40      	cmp	r3, #64	@ 0x40
 8008356:	d10b      	bne.n	8008370 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7fe ffce 	bl	800730a <HAL_I2C_MemRxCpltCallback>
}
 800836e:	e00a      	b.n	8008386 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7fe ff82 	bl	800728a <HAL_I2C_MasterRxCpltCallback>
}
 8008386:	bf00      	nop
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	fe00e800 	.word	0xfe00e800
 8008394:	ffff0000 	.word	0xffff0000

08008398 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083ba:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2220      	movs	r2, #32
 80083c2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	2b21      	cmp	r3, #33	@ 0x21
 80083c8:	d002      	beq.n	80083d0 <I2C_ITSlaveCplt+0x38>
 80083ca:	7afb      	ldrb	r3, [r7, #11]
 80083cc:	2b29      	cmp	r3, #41	@ 0x29
 80083ce:	d108      	bne.n	80083e2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80083d0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 ffe7 	bl	80093a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2221      	movs	r2, #33	@ 0x21
 80083de:	631a      	str	r2, [r3, #48]	@ 0x30
 80083e0:	e019      	b.n	8008416 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80083e2:	7afb      	ldrb	r3, [r7, #11]
 80083e4:	2b22      	cmp	r3, #34	@ 0x22
 80083e6:	d002      	beq.n	80083ee <I2C_ITSlaveCplt+0x56>
 80083e8:	7afb      	ldrb	r3, [r7, #11]
 80083ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ec:	d108      	bne.n	8008400 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80083ee:	f248 0102 	movw	r1, #32770	@ 0x8002
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 ffd8 	bl	80093a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2222      	movs	r2, #34	@ 0x22
 80083fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80083fe:	e00a      	b.n	8008416 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	2b28      	cmp	r3, #40	@ 0x28
 8008404:	d107      	bne.n	8008416 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008406:	f248 0103 	movw	r1, #32771	@ 0x8003
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 ffcc 	bl	80093a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008424:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6859      	ldr	r1, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	4b80      	ldr	r3, [pc, #512]	@ (8008634 <I2C_ITSlaveCplt+0x29c>)
 8008432:	400b      	ands	r3, r1
 8008434:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fb75 	bl	8008b26 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	0b9b      	lsrs	r3, r3, #14
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b00      	cmp	r3, #0
 8008446:	d07a      	beq.n	800853e <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008456:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8112 	beq.w	8008686 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a73      	ldr	r2, [pc, #460]	@ (8008638 <I2C_ITSlaveCplt+0x2a0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d059      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a71      	ldr	r2, [pc, #452]	@ (800863c <I2C_ITSlaveCplt+0x2a4>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d053      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a6f      	ldr	r2, [pc, #444]	@ (8008640 <I2C_ITSlaveCplt+0x2a8>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d04d      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a6d      	ldr	r2, [pc, #436]	@ (8008644 <I2C_ITSlaveCplt+0x2ac>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d047      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a6b      	ldr	r2, [pc, #428]	@ (8008648 <I2C_ITSlaveCplt+0x2b0>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d041      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a69      	ldr	r2, [pc, #420]	@ (800864c <I2C_ITSlaveCplt+0x2b4>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d03b      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a67      	ldr	r2, [pc, #412]	@ (8008650 <I2C_ITSlaveCplt+0x2b8>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d035      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a65      	ldr	r2, [pc, #404]	@ (8008654 <I2C_ITSlaveCplt+0x2bc>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d02f      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a63      	ldr	r2, [pc, #396]	@ (8008658 <I2C_ITSlaveCplt+0x2c0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d029      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a61      	ldr	r2, [pc, #388]	@ (800865c <I2C_ITSlaveCplt+0x2c4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d023      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a5f      	ldr	r2, [pc, #380]	@ (8008660 <I2C_ITSlaveCplt+0x2c8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d01d      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a5d      	ldr	r2, [pc, #372]	@ (8008664 <I2C_ITSlaveCplt+0x2cc>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d017      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a5b      	ldr	r2, [pc, #364]	@ (8008668 <I2C_ITSlaveCplt+0x2d0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d011      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a59      	ldr	r2, [pc, #356]	@ (800866c <I2C_ITSlaveCplt+0x2d4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d00b      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a57      	ldr	r2, [pc, #348]	@ (8008670 <I2C_ITSlaveCplt+0x2d8>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d005      	beq.n	8008522 <I2C_ITSlaveCplt+0x18a>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a55      	ldr	r2, [pc, #340]	@ (8008674 <I2C_ITSlaveCplt+0x2dc>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d105      	bne.n	800852e <I2C_ITSlaveCplt+0x196>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	b29b      	uxth	r3, r3
 800852c:	e004      	b.n	8008538 <I2C_ITSlaveCplt+0x1a0>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	b29b      	uxth	r3, r3
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800853c:	e0a3      	b.n	8008686 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	0bdb      	lsrs	r3, r3, #15
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 809d 	beq.w	8008686 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800855a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8090 	beq.w	8008686 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a32      	ldr	r2, [pc, #200]	@ (8008638 <I2C_ITSlaveCplt+0x2a0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d059      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a30      	ldr	r2, [pc, #192]	@ (800863c <I2C_ITSlaveCplt+0x2a4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d053      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a2e      	ldr	r2, [pc, #184]	@ (8008640 <I2C_ITSlaveCplt+0x2a8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d04d      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a2c      	ldr	r2, [pc, #176]	@ (8008644 <I2C_ITSlaveCplt+0x2ac>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d047      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a2a      	ldr	r2, [pc, #168]	@ (8008648 <I2C_ITSlaveCplt+0x2b0>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d041      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a28      	ldr	r2, [pc, #160]	@ (800864c <I2C_ITSlaveCplt+0x2b4>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d03b      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a26      	ldr	r2, [pc, #152]	@ (8008650 <I2C_ITSlaveCplt+0x2b8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d035      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a24      	ldr	r2, [pc, #144]	@ (8008654 <I2C_ITSlaveCplt+0x2bc>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d02f      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a22      	ldr	r2, [pc, #136]	@ (8008658 <I2C_ITSlaveCplt+0x2c0>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d029      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a20      	ldr	r2, [pc, #128]	@ (800865c <I2C_ITSlaveCplt+0x2c4>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d023      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008660 <I2C_ITSlaveCplt+0x2c8>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d01d      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008664 <I2C_ITSlaveCplt+0x2cc>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d017      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008668 <I2C_ITSlaveCplt+0x2d0>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d011      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a18      	ldr	r2, [pc, #96]	@ (800866c <I2C_ITSlaveCplt+0x2d4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00b      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a16      	ldr	r2, [pc, #88]	@ (8008670 <I2C_ITSlaveCplt+0x2d8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d005      	beq.n	8008626 <I2C_ITSlaveCplt+0x28e>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a14      	ldr	r2, [pc, #80]	@ (8008674 <I2C_ITSlaveCplt+0x2dc>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d128      	bne.n	8008678 <I2C_ITSlaveCplt+0x2e0>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	b29b      	uxth	r3, r3
 8008630:	e027      	b.n	8008682 <I2C_ITSlaveCplt+0x2ea>
 8008632:	bf00      	nop
 8008634:	fe00e800 	.word	0xfe00e800
 8008638:	40020010 	.word	0x40020010
 800863c:	40020028 	.word	0x40020028
 8008640:	40020040 	.word	0x40020040
 8008644:	40020058 	.word	0x40020058
 8008648:	40020070 	.word	0x40020070
 800864c:	40020088 	.word	0x40020088
 8008650:	400200a0 	.word	0x400200a0
 8008654:	400200b8 	.word	0x400200b8
 8008658:	40020410 	.word	0x40020410
 800865c:	40020428 	.word	0x40020428
 8008660:	40020440 	.word	0x40020440
 8008664:	40020458 	.word	0x40020458
 8008668:	40020470 	.word	0x40020470
 800866c:	40020488 	.word	0x40020488
 8008670:	400204a0 	.word	0x400204a0
 8008674:	400204b8 	.word	0x400204b8
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	b29b      	uxth	r3, r3
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	089b      	lsrs	r3, r3, #2
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d020      	beq.n	80086d4 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f023 0304 	bic.w	r3, r3, #4
 8008698:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a4:	b2d2      	uxtb	r2, r2
 80086a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00c      	beq.n	80086d4 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086be:	3b01      	subs	r3, #1
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d005      	beq.n	80086ea <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e2:	f043 0204 	orr.w	r2, r3, #4
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	091b      	lsrs	r3, r3, #4
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d04a      	beq.n	800878c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	091b      	lsrs	r3, r3, #4
 80086fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d044      	beq.n	800878c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008706:	b29b      	uxth	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d128      	bne.n	800875e <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b28      	cmp	r3, #40	@ 0x28
 8008716:	d108      	bne.n	800872a <I2C_ITSlaveCplt+0x392>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800871e:	d104      	bne.n	800872a <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008720:	6979      	ldr	r1, [r7, #20]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f892 	bl	800884c <I2C_ITListenCplt>
 8008728:	e030      	b.n	800878c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b29      	cmp	r3, #41	@ 0x29
 8008734:	d10e      	bne.n	8008754 <I2C_ITSlaveCplt+0x3bc>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800873c:	d00a      	beq.n	8008754 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2210      	movs	r2, #16
 8008744:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f9ed 	bl	8008b26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff fcfa 	bl	8008146 <I2C_ITSlaveSeqCplt>
 8008752:	e01b      	b.n	800878c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2210      	movs	r2, #16
 800875a:	61da      	str	r2, [r3, #28]
 800875c:	e016      	b.n	800878c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2210      	movs	r2, #16
 8008764:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800876a:	f043 0204 	orr.w	r2, r3, #4
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d003      	beq.n	8008780 <I2C_ITSlaveCplt+0x3e8>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800877e:	d105      	bne.n	800878c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f8b6 	bl	80088f8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d010      	beq.n	80087c4 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f8a5 	bl	80088f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b28      	cmp	r3, #40	@ 0x28
 80087b8:	d141      	bne.n	800883e <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80087ba:	6979      	ldr	r1, [r7, #20]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f845 	bl	800884c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087c2:	e03c      	b.n	800883e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087cc:	d014      	beq.n	80087f8 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff fcb9 	bl	8008146 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008848 <I2C_ITSlaveCplt+0x4b0>)
 80087d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2220      	movs	r2, #32
 80087de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7fe fd76 	bl	80072e2 <HAL_I2C_ListenCpltCallback>
}
 80087f6:	e022      	b.n	800883e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b22      	cmp	r3, #34	@ 0x22
 8008802:	d10e      	bne.n	8008822 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7fe fd49 	bl	80072b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8008820:	e00d      	b.n	800883e <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fe fd30 	bl	800729e <HAL_I2C_SlaveTxCpltCallback>
}
 800883e:	bf00      	nop
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	ffff0000 	.word	0xffff0000

0800884c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a26      	ldr	r2, [pc, #152]	@ (80088f4 <I2C_ITListenCplt+0xa8>)
 800885a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2220      	movs	r2, #32
 8008866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	089b      	lsrs	r3, r3, #2
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b00      	cmp	r3, #0
 8008882:	d022      	beq.n	80088ca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d012      	beq.n	80088ca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c2:	f043 0204 	orr.w	r2, r3, #4
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80088ca:	f248 0103 	movw	r1, #32771	@ 0x8003
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fd6a 	bl	80093a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2210      	movs	r2, #16
 80088da:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7fe fcfc 	bl	80072e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	ffff0000 	.word	0xffff0000

080088f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008908:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a6d      	ldr	r2, [pc, #436]	@ (8008acc <I2C_ITError+0x1d4>)
 8008916:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	2b28      	cmp	r3, #40	@ 0x28
 800892e:	d005      	beq.n	800893c <I2C_ITError+0x44>
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	2b29      	cmp	r3, #41	@ 0x29
 8008934:	d002      	beq.n	800893c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	2b2a      	cmp	r3, #42	@ 0x2a
 800893a:	d10b      	bne.n	8008954 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800893c:	2103      	movs	r1, #3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fd32 	bl	80093a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2228      	movs	r2, #40	@ 0x28
 8008948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a60      	ldr	r2, [pc, #384]	@ (8008ad0 <I2C_ITError+0x1d8>)
 8008950:	635a      	str	r2, [r3, #52]	@ 0x34
 8008952:	e030      	b.n	80089b6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008954:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fd25 	bl	80093a8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f8e1 	bl	8008b26 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b60      	cmp	r3, #96	@ 0x60
 800896e:	d01f      	beq.n	80089b0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b20      	cmp	r3, #32
 8008984:	d114      	bne.n	80089b0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b10      	cmp	r3, #16
 8008992:	d109      	bne.n	80089a8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2210      	movs	r2, #16
 800899a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a0:	f043 0204 	orr.w	r2, r3, #4
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2220      	movs	r2, #32
 80089ae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d039      	beq.n	8008a38 <I2C_ITError+0x140>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b11      	cmp	r3, #17
 80089c8:	d002      	beq.n	80089d0 <I2C_ITError+0xd8>
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b21      	cmp	r3, #33	@ 0x21
 80089ce:	d133      	bne.n	8008a38 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089de:	d107      	bne.n	80089f0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80089ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fd fb2f 	bl	8006058 <HAL_DMA_GetState>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d017      	beq.n	8008a30 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a04:	4a33      	ldr	r2, [pc, #204]	@ (8008ad4 <I2C_ITError+0x1dc>)
 8008a06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fc f9af 	bl	8004d78 <HAL_DMA_Abort_IT>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d04d      	beq.n	8008abc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008a2e:	e045      	b.n	8008abc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f851 	bl	8008ad8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008a36:	e041      	b.n	8008abc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d039      	beq.n	8008ab4 <I2C_ITError+0x1bc>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b12      	cmp	r3, #18
 8008a44:	d002      	beq.n	8008a4c <I2C_ITError+0x154>
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b22      	cmp	r3, #34	@ 0x22
 8008a4a:	d133      	bne.n	8008ab4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a5a:	d107      	bne.n	8008a6c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fd faf1 	bl	8006058 <HAL_DMA_GetState>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d017      	beq.n	8008aac <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a80:	4a14      	ldr	r2, [pc, #80]	@ (8008ad4 <I2C_ITError+0x1dc>)
 8008a82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fc f971 	bl	8004d78 <HAL_DMA_Abort_IT>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d011      	beq.n	8008ac0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008aaa:	e009      	b.n	8008ac0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f813 	bl	8008ad8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ab2:	e005      	b.n	8008ac0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f80f 	bl	8008ad8 <I2C_TreatErrorCallback>
  }
}
 8008aba:	e002      	b.n	8008ac2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008abc:	bf00      	nop
 8008abe:	e000      	b.n	8008ac2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ac0:	bf00      	nop
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	ffff0000 	.word	0xffff0000
 8008ad0:	080075af 	.word	0x080075af
 8008ad4:	08008e79 	.word	0x08008e79

08008ad8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b60      	cmp	r3, #96	@ 0x60
 8008aea:	d10e      	bne.n	8008b0a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7fe fc15 	bl	8007332 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008b08:	e009      	b.n	8008b1e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7fe fc00 	bl	800731e <HAL_I2C_ErrorCallback>
}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d103      	bne.n	8008b44 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2200      	movs	r2, #0
 8008b42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d007      	beq.n	8008b62 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	699a      	ldr	r2, [r3, #24]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0201 	orr.w	r2, r2, #1
 8008b60:	619a      	str	r2, [r3, #24]
  }
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b8a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d104      	bne.n	8008ba0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008b96:	2120      	movs	r1, #32
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fb81 	bl	80092a0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008b9e:	e02d      	b.n	8008bfc <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008ba8:	441a      	add	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	2bff      	cmp	r3, #255	@ 0xff
 8008bb6:	d903      	bls.n	8008bc0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	22ff      	movs	r2, #255	@ 0xff
 8008bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008bbe:	e004      	b.n	8008bca <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3328      	adds	r3, #40	@ 0x28
 8008bda:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008be0:	f7fb fb42 	bl	8004268 <HAL_DMA_Start_IT>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008bea:	2110      	movs	r1, #16
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff fe83 	bl	80088f8 <I2C_ITError>
}
 8008bf2:	e003      	b.n	8008bfc <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008bf4:	2140      	movs	r1, #64	@ 0x40
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 fb52 	bl	80092a0 <I2C_Enable_IRQ>
}
 8008bfc:	bf00      	nop
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c14:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d076      	beq.n	8008d0c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a71      	ldr	r2, [pc, #452]	@ (8008dec <I2C_DMAError+0x1e8>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d059      	beq.n	8008cde <I2C_DMAError+0xda>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a6f      	ldr	r2, [pc, #444]	@ (8008df0 <I2C_DMAError+0x1ec>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d053      	beq.n	8008cde <I2C_DMAError+0xda>
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a6d      	ldr	r2, [pc, #436]	@ (8008df4 <I2C_DMAError+0x1f0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d04d      	beq.n	8008cde <I2C_DMAError+0xda>
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a6b      	ldr	r2, [pc, #428]	@ (8008df8 <I2C_DMAError+0x1f4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d047      	beq.n	8008cde <I2C_DMAError+0xda>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a69      	ldr	r2, [pc, #420]	@ (8008dfc <I2C_DMAError+0x1f8>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d041      	beq.n	8008cde <I2C_DMAError+0xda>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a67      	ldr	r2, [pc, #412]	@ (8008e00 <I2C_DMAError+0x1fc>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d03b      	beq.n	8008cde <I2C_DMAError+0xda>
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a65      	ldr	r2, [pc, #404]	@ (8008e04 <I2C_DMAError+0x200>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d035      	beq.n	8008cde <I2C_DMAError+0xda>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a63      	ldr	r2, [pc, #396]	@ (8008e08 <I2C_DMAError+0x204>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d02f      	beq.n	8008cde <I2C_DMAError+0xda>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a61      	ldr	r2, [pc, #388]	@ (8008e0c <I2C_DMAError+0x208>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d029      	beq.n	8008cde <I2C_DMAError+0xda>
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a5f      	ldr	r2, [pc, #380]	@ (8008e10 <I2C_DMAError+0x20c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d023      	beq.n	8008cde <I2C_DMAError+0xda>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8008e14 <I2C_DMAError+0x210>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d01d      	beq.n	8008cde <I2C_DMAError+0xda>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a5b      	ldr	r2, [pc, #364]	@ (8008e18 <I2C_DMAError+0x214>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d017      	beq.n	8008cde <I2C_DMAError+0xda>
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a59      	ldr	r2, [pc, #356]	@ (8008e1c <I2C_DMAError+0x218>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d011      	beq.n	8008cde <I2C_DMAError+0xda>
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a57      	ldr	r2, [pc, #348]	@ (8008e20 <I2C_DMAError+0x21c>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d00b      	beq.n	8008cde <I2C_DMAError+0xda>
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a55      	ldr	r2, [pc, #340]	@ (8008e24 <I2C_DMAError+0x220>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d005      	beq.n	8008cde <I2C_DMAError+0xda>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a53      	ldr	r2, [pc, #332]	@ (8008e28 <I2C_DMAError+0x224>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d109      	bne.n	8008cf2 <I2C_DMAError+0xee>
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bf0c      	ite	eq
 8008cea:	2301      	moveq	r3, #1
 8008cec:	2300      	movne	r3, #0
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	e008      	b.n	8008d04 <I2C_DMAError+0x100>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	bf0c      	ite	eq
 8008cfe:	2301      	moveq	r3, #1
 8008d00:	2300      	movne	r3, #0
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 8098 	beq.w	8008e46 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a33      	ldr	r2, [pc, #204]	@ (8008dec <I2C_DMAError+0x1e8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d059      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a31      	ldr	r2, [pc, #196]	@ (8008df0 <I2C_DMAError+0x1ec>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d053      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a2f      	ldr	r2, [pc, #188]	@ (8008df4 <I2C_DMAError+0x1f0>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d04d      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a2d      	ldr	r2, [pc, #180]	@ (8008df8 <I2C_DMAError+0x1f4>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d047      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8008dfc <I2C_DMAError+0x1f8>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d041      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a29      	ldr	r2, [pc, #164]	@ (8008e00 <I2C_DMAError+0x1fc>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d03b      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a27      	ldr	r2, [pc, #156]	@ (8008e04 <I2C_DMAError+0x200>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d035      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a25      	ldr	r2, [pc, #148]	@ (8008e08 <I2C_DMAError+0x204>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d02f      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a23      	ldr	r2, [pc, #140]	@ (8008e0c <I2C_DMAError+0x208>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d029      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a21      	ldr	r2, [pc, #132]	@ (8008e10 <I2C_DMAError+0x20c>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d023      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a1f      	ldr	r2, [pc, #124]	@ (8008e14 <I2C_DMAError+0x210>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d01d      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e18 <I2C_DMAError+0x214>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d017      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a1b      	ldr	r2, [pc, #108]	@ (8008e1c <I2C_DMAError+0x218>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d011      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a19      	ldr	r2, [pc, #100]	@ (8008e20 <I2C_DMAError+0x21c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00b      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a17      	ldr	r2, [pc, #92]	@ (8008e24 <I2C_DMAError+0x220>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d005      	beq.n	8008dd6 <I2C_DMAError+0x1d2>
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a15      	ldr	r2, [pc, #84]	@ (8008e28 <I2C_DMAError+0x224>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d12a      	bne.n	8008e2c <I2C_DMAError+0x228>
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	bf0c      	ite	eq
 8008de2:	2301      	moveq	r3, #1
 8008de4:	2300      	movne	r3, #0
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	e029      	b.n	8008e3e <I2C_DMAError+0x23a>
 8008dea:	bf00      	nop
 8008dec:	40020010 	.word	0x40020010
 8008df0:	40020028 	.word	0x40020028
 8008df4:	40020040 	.word	0x40020040
 8008df8:	40020058 	.word	0x40020058
 8008dfc:	40020070 	.word	0x40020070
 8008e00:	40020088 	.word	0x40020088
 8008e04:	400200a0 	.word	0x400200a0
 8008e08:	400200b8 	.word	0x400200b8
 8008e0c:	40020410 	.word	0x40020410
 8008e10:	40020428 	.word	0x40020428
 8008e14:	40020440 	.word	0x40020440
 8008e18:	40020458 	.word	0x40020458
 8008e1c:	40020470 	.word	0x40020470
 8008e20:	40020488 	.word	0x40020488
 8008e24:	400204a0 	.word	0x400204a0
 8008e28:	400204b8 	.word	0x400204b8
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bf0c      	ite	eq
 8008e38:	2301      	moveq	r3, #1
 8008e3a:	2300      	movne	r3, #0
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8008e42:	2301      	movs	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fd f914 	bl	8006074 <HAL_DMA_GetError>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d00e      	beq.n	8008e70 <I2C_DMAError+0x26c>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00b      	beq.n	8008e70 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e66:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008e68:	2110      	movs	r1, #16
 8008e6a:	68b8      	ldr	r0, [r7, #8]
 8008e6c:	f7ff fd44 	bl	80088f8 <I2C_ITError>
  }
}
 8008e70:	bf00      	nop
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e84:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	2200      	movs	r2, #0
 8008e94:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f7ff fe16 	bl	8008ad8 <I2C_TreatErrorCallback>
}
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	603b      	str	r3, [r7, #0]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ec4:	e03b      	b.n	8008f3e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f8d6 	bl	800907c <I2C_IsErrorOccurred>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e041      	b.n	8008f5e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee0:	d02d      	beq.n	8008f3e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ee2:	f7f9 f9ef 	bl	80022c4 <HAL_GetTick>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d302      	bcc.n	8008ef8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d122      	bne.n	8008f3e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	699a      	ldr	r2, [r3, #24]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	4013      	ands	r3, r2
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	bf0c      	ite	eq
 8008f08:	2301      	moveq	r3, #1
 8008f0a:	2300      	movne	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	461a      	mov	r2, r3
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d113      	bne.n	8008f3e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1a:	f043 0220 	orr.w	r2, r3, #32
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e00f      	b.n	8008f5e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4013      	ands	r3, r2
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	bf0c      	ite	eq
 8008f4e:	2301      	moveq	r3, #1
 8008f50:	2300      	movne	r3, #0
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	461a      	mov	r2, r3
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d0b4      	beq.n	8008ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f72:	e033      	b.n	8008fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 f87f 	bl	800907c <I2C_IsErrorOccurred>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e031      	b.n	8008fec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8e:	d025      	beq.n	8008fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f90:	f7f9 f998 	bl	80022c4 <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d302      	bcc.n	8008fa6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d11a      	bne.n	8008fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	f003 0302 	and.w	r3, r3, #2
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d013      	beq.n	8008fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb8:	f043 0220 	orr.w	r2, r3, #32
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e007      	b.n	8008fec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d1c4      	bne.n	8008f74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009000:	e02f      	b.n	8009062 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	68b9      	ldr	r1, [r7, #8]
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 f838 	bl	800907c <I2C_IsErrorOccurred>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e02d      	b.n	8009072 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009016:	f7f9 f955 	bl	80022c4 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	429a      	cmp	r2, r3
 8009024:	d302      	bcc.n	800902c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d11a      	bne.n	8009062 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b20      	cmp	r3, #32
 8009038:	d013      	beq.n	8009062 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800903e:	f043 0220 	orr.w	r2, r3, #32
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2220      	movs	r2, #32
 800904a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e007      	b.n	8009072 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f003 0320 	and.w	r3, r3, #32
 800906c:	2b20      	cmp	r3, #32
 800906e:	d1c8      	bne.n	8009002 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	@ 0x28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	f003 0310 	and.w	r3, r3, #16
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d068      	beq.n	800917a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2210      	movs	r2, #16
 80090ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80090b0:	e049      	b.n	8009146 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b8:	d045      	beq.n	8009146 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80090ba:	f7f9 f903 	bl	80022c4 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d302      	bcc.n	80090d0 <I2C_IsErrorOccurred+0x54>
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d13a      	bne.n	8009146 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80090ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090f2:	d121      	bne.n	8009138 <I2C_IsErrorOccurred+0xbc>
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090fa:	d01d      	beq.n	8009138 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80090fc:	7cfb      	ldrb	r3, [r7, #19]
 80090fe:	2b20      	cmp	r3, #32
 8009100:	d01a      	beq.n	8009138 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009110:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009112:	f7f9 f8d7 	bl	80022c4 <HAL_GetTick>
 8009116:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009118:	e00e      	b.n	8009138 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800911a:	f7f9 f8d3 	bl	80022c4 <HAL_GetTick>
 800911e:	4602      	mov	r2, r0
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	2b19      	cmp	r3, #25
 8009126:	d907      	bls.n	8009138 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	f043 0320 	orr.w	r3, r3, #32
 800912e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009136:	e006      	b.n	8009146 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b20      	cmp	r3, #32
 8009144:	d1e9      	bne.n	800911a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	f003 0320 	and.w	r3, r3, #32
 8009150:	2b20      	cmp	r3, #32
 8009152:	d003      	beq.n	800915c <I2C_IsErrorOccurred+0xe0>
 8009154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0aa      	beq.n	80090b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800915c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009160:	2b00      	cmp	r3, #0
 8009162:	d103      	bne.n	800916c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2220      	movs	r2, #32
 800916a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	f043 0304 	orr.w	r3, r3, #4
 8009172:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	f043 0301 	orr.w	r3, r3, #1
 8009192:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800919c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00b      	beq.n	80091c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	f043 0308 	orr.w	r3, r3, #8
 80091b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80091be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	f043 0302 	orr.w	r3, r3, #2
 80091d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80091e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01c      	beq.n	800922a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f7ff fc98 	bl	8008b26 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6859      	ldr	r1, [r3, #4]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	4b0d      	ldr	r3, [pc, #52]	@ (8009238 <I2C_IsErrorOccurred+0x1bc>)
 8009202:	400b      	ands	r3, r1
 8009204:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	431a      	orrs	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2220      	movs	r2, #32
 8009216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800922a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800922e:	4618      	mov	r0, r3
 8009230:	3728      	adds	r7, #40	@ 0x28
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	fe00e800 	.word	0xfe00e800

0800923c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	607b      	str	r3, [r7, #4]
 8009246:	460b      	mov	r3, r1
 8009248:	817b      	strh	r3, [r7, #10]
 800924a:	4613      	mov	r3, r2
 800924c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800924e:	897b      	ldrh	r3, [r7, #10]
 8009250:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009254:	7a7b      	ldrb	r3, [r7, #9]
 8009256:	041b      	lsls	r3, r3, #16
 8009258:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800925c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	4313      	orrs	r3, r2
 8009266:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800926a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	0d5b      	lsrs	r3, r3, #21
 8009276:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800927a:	4b08      	ldr	r3, [pc, #32]	@ (800929c <I2C_TransferConfig+0x60>)
 800927c:	430b      	orrs	r3, r1
 800927e:	43db      	mvns	r3, r3
 8009280:	ea02 0103 	and.w	r1, r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	430a      	orrs	r2, r1
 800928c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800928e:	bf00      	nop
 8009290:	371c      	adds	r7, #28
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	03ff63ff 	.word	0x03ff63ff

080092a0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b4:	4a39      	ldr	r2, [pc, #228]	@ (800939c <I2C_Enable_IRQ+0xfc>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d032      	beq.n	8009320 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80092be:	4a38      	ldr	r2, [pc, #224]	@ (80093a0 <I2C_Enable_IRQ+0x100>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d02d      	beq.n	8009320 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80092c8:	4a36      	ldr	r2, [pc, #216]	@ (80093a4 <I2C_Enable_IRQ+0x104>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d028      	beq.n	8009320 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80092ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	da03      	bge.n	80092de <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80092dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80092de:	887b      	ldrh	r3, [r7, #2]
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80092ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80092f0:	887b      	ldrh	r3, [r7, #2]
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009300:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009302:	887b      	ldrh	r3, [r7, #2]
 8009304:	2b10      	cmp	r3, #16
 8009306:	d103      	bne.n	8009310 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800930e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009310:	887b      	ldrh	r3, [r7, #2]
 8009312:	2b20      	cmp	r3, #32
 8009314:	d133      	bne.n	800937e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f043 0320 	orr.w	r3, r3, #32
 800931c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800931e:	e02e      	b.n	800937e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009320:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009324:	2b00      	cmp	r3, #0
 8009326:	da03      	bge.n	8009330 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800932e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009330:	887b      	ldrh	r3, [r7, #2]
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009340:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009342:	887b      	ldrh	r3, [r7, #2]
 8009344:	f003 0302 	and.w	r3, r3, #2
 8009348:	2b00      	cmp	r3, #0
 800934a:	d003      	beq.n	8009354 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009352:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009354:	887b      	ldrh	r3, [r7, #2]
 8009356:	2b10      	cmp	r3, #16
 8009358:	d103      	bne.n	8009362 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009360:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009362:	887b      	ldrh	r3, [r7, #2]
 8009364:	2b20      	cmp	r3, #32
 8009366:	d103      	bne.n	8009370 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800936e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009370:	887b      	ldrh	r3, [r7, #2]
 8009372:	2b40      	cmp	r3, #64	@ 0x40
 8009374:	d103      	bne.n	800937e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800937c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6819      	ldr	r1, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	430a      	orrs	r2, r1
 800938c:	601a      	str	r2, [r3, #0]
}
 800938e:	bf00      	nop
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	080077b7 	.word	0x080077b7
 80093a0:	08007bfd 	.word	0x08007bfd
 80093a4:	0800799d 	.word	0x0800799d

080093a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80093b8:	887b      	ldrh	r3, [r7, #2]
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00f      	beq.n	80093e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80093c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80093d6:	2b28      	cmp	r3, #40	@ 0x28
 80093d8:	d003      	beq.n	80093e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80093e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80093e2:	887b      	ldrh	r3, [r7, #2]
 80093e4:	f003 0302 	and.w	r3, r3, #2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00f      	beq.n	800940c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80093f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009400:	2b28      	cmp	r3, #40	@ 0x28
 8009402:	d003      	beq.n	800940c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800940a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800940c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009410:	2b00      	cmp	r3, #0
 8009412:	da03      	bge.n	800941c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800941a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800941c:	887b      	ldrh	r3, [r7, #2]
 800941e:	2b10      	cmp	r3, #16
 8009420:	d103      	bne.n	800942a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009428:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800942a:	887b      	ldrh	r3, [r7, #2]
 800942c:	2b20      	cmp	r3, #32
 800942e:	d103      	bne.n	8009438 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f043 0320 	orr.w	r3, r3, #32
 8009436:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009438:	887b      	ldrh	r3, [r7, #2]
 800943a:	2b40      	cmp	r3, #64	@ 0x40
 800943c:	d103      	bne.n	8009446 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009444:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6819      	ldr	r1, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	43da      	mvns	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	400a      	ands	r2, r1
 8009456:	601a      	str	r2, [r3, #0]
}
 8009458:	bf00      	nop
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b20      	cmp	r3, #32
 8009478:	d138      	bne.n	80094ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009484:	2302      	movs	r3, #2
 8009486:	e032      	b.n	80094ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2224      	movs	r2, #36	@ 0x24
 8009494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 0201 	bic.w	r2, r2, #1
 80094a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80094b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6819      	ldr	r1, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f042 0201 	orr.w	r2, r2, #1
 80094d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2220      	movs	r2, #32
 80094dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	e000      	b.n	80094ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094ec:	2302      	movs	r3, #2
  }
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b20      	cmp	r3, #32
 800950e:	d139      	bne.n	8009584 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009516:	2b01      	cmp	r3, #1
 8009518:	d101      	bne.n	800951e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800951a:	2302      	movs	r3, #2
 800951c:	e033      	b.n	8009586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2224      	movs	r2, #36	@ 0x24
 800952a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 0201 	bic.w	r2, r2, #1
 800953c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800954c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	021b      	lsls	r3, r3, #8
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	4313      	orrs	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f042 0201 	orr.w	r2, r2, #1
 800956e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	e000      	b.n	8009586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009584:	2302      	movs	r3, #2
  }
}
 8009586:	4618      	mov	r0, r3
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
	...

08009594 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e070      	b.n	8009688 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d106      	bne.n	80095c0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7f8 f826 	bl	800160c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0201 	orr.w	r2, r2, #1
 80095d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0201 	bic.w	r2, r2, #1
 80095e6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80095f6:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009606:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009616:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009626:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a19      	ldr	r2, [pc, #100]	@ (8009690 <HAL_JPEG_Init+0xfc>)
 800962c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a18      	ldr	r2, [pc, #96]	@ (8009694 <HAL_JPEG_Init+0x100>)
 8009632:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fc81 	bl	8009f48 <JPEG_Set_HuffEnc_Mem>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d004      	beq.n	8009656 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e018      	b.n	8009688 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009664:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	08017c18 	.word	0x08017c18
 8009694:	08017c58 	.word	0x08017c58

08009698 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <HAL_JPEG_GetInfo+0x16>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e083      	b.n	80097ba <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d103      	bne.n	80096c8 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2210      	movs	r2, #16
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	e017      	b.n	80096f8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f003 0303 	and.w	r3, r3, #3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d103      	bne.n	80096de <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	e00c      	b.n	80096f8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	f003 0303 	and.w	r3, r3, #3
 80096e8:	2b03      	cmp	r3, #3
 80096ea:	d103      	bne.n	80096f4 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2230      	movs	r2, #48	@ 0x30
 80096f0:	601a      	str	r2, [r3, #0]
 80096f2:	e001      	b.n	80096f8 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e060      	b.n	80097ba <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	0c1b      	lsrs	r3, r3, #16
 8009700:	b29a      	uxth	r2, r3
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	0c1b      	lsrs	r3, r3, #16
 800970e:	b29a      	uxth	r2, r3
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b10      	cmp	r3, #16
 800971a:	d003      	beq.n	8009724 <HAL_JPEG_GetInfo+0x8c>
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b30      	cmp	r3, #48	@ 0x30
 8009722:	d140      	bne.n	80097a6 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	091b      	lsrs	r3, r3, #4
 800972c:	f003 030f 	and.w	r3, r3, #15
 8009730:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	091b      	lsrs	r3, r3, #4
 800973a:	f003 030f 	and.w	r3, r3, #15
 800973e:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	091b      	lsrs	r3, r3, #4
 8009748:	f003 030f 	and.w	r3, r3, #15
 800974c:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d109      	bne.n	8009768 <HAL_JPEG_GetInfo+0xd0>
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <HAL_JPEG_GetInfo+0xd0>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d103      	bne.n	8009768 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2202      	movs	r2, #2
 8009764:	605a      	str	r2, [r3, #4]
 8009766:	e01d      	b.n	80097a4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <HAL_JPEG_GetInfo+0xea>
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d106      	bne.n	8009782 <HAL_JPEG_GetInfo+0xea>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d103      	bne.n	8009782 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2200      	movs	r2, #0
 800977e:	605a      	str	r2, [r3, #4]
 8009780:	e010      	b.n	80097a4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d109      	bne.n	800979c <HAL_JPEG_GetInfo+0x104>
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d106      	bne.n	800979c <HAL_JPEG_GetInfo+0x104>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d103      	bne.n	800979c <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2201      	movs	r2, #1
 8009798:	605a      	str	r2, [r3, #4]
 800979a:	e003      	b.n	80097a4 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2200      	movs	r2, #0
 80097a0:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80097a2:	e003      	b.n	80097ac <HAL_JPEG_GetInfo+0x114>
 80097a4:	e002      	b.n	80097ac <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2200      	movs	r2, #0
 80097aa:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f001 fa7b 	bl	800aca8 <JPEG_GetQuality>
 80097b2:	4602      	mov	r2, r0
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b085      	sub	sp, #20
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d4:	f003 030c 	and.w	r3, r3, #12
 80097d8:	2b0c      	cmp	r3, #12
 80097da:	d116      	bne.n	800980a <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d005      	beq.n	80097f2 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	f003 0302 	and.w	r3, r3, #2
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d033      	beq.n	8009864 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009800:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	655a      	str	r2, [r3, #84]	@ 0x54
 8009808:	e02c      	b.n	8009864 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800980e:	f003 030c 	and.w	r3, r3, #12
 8009812:	2b08      	cmp	r3, #8
 8009814:	d126      	bne.n	8009864 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	d009      	beq.n	8009834 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009824:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f043 0306 	orr.w	r3, r3, #6
 8009832:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	f003 0302 	and.w	r3, r3, #2
 800983a:	2b00      	cmp	r3, #0
 800983c:	d009      	beq.n	8009852 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009842:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8009850:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	43da      	mvns	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	400a      	ands	r2, r1
 8009862:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009872:	b480      	push	{r7}
 8009874:	b083      	sub	sp, #12
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b085      	sub	sp, #20
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	3b03      	subs	r3, #3
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d813      	bhi.n	800991c <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f8:	f003 030c 	and.w	r3, r3, #12
 80098fc:	2b08      	cmp	r3, #8
 80098fe:	d103      	bne.n	8009908 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fda3 	bl	800a44c <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8009906:	e00b      	b.n	8009920 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800990c:	f003 030c 	and.w	r3, r3, #12
 8009910:	2b0c      	cmp	r3, #12
 8009912:	d105      	bne.n	8009920 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 f848 	bl	800a9aa <JPEG_DMA_ContinueProcess>
      break;
 800991a:	e001      	b.n	8009920 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800991c:	bf00      	nop
 800991e:	e000      	b.n	8009922 <HAL_JPEG_IRQHandler+0x44>
      break;
 8009920:	bf00      	nop
  }
}
 8009922:	bf00      	nop
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800992a:	b480      	push	{r7}
 800992c:	b08b      	sub	sp, #44	@ 0x2c
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
 8009936:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800993c:	2300      	movs	r3, #0
 800993e:	61fb      	str	r3, [r7, #28]
 8009940:	e020      	b.n	8009984 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	4413      	add	r3, r2
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800994c:	6a3a      	ldr	r2, [r7, #32]
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	4413      	add	r3, r2
 8009952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009956:	d90f      	bls.n	8009978 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e055      	b.n	8009a08 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	b2da      	uxtb	r2, r3
 8009960:	68b9      	ldr	r1, [r7, #8]
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	440b      	add	r3, r1
 8009966:	3201      	adds	r2, #1
 8009968:	b2d2      	uxtb	r2, r2
 800996a:	701a      	strb	r2, [r3, #0]
      p++;
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	3301      	adds	r3, #1
 8009970:	623b      	str	r3, [r7, #32]
      i--;
 8009972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009974:	3b01      	subs	r3, #1
 8009976:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8009978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1ee      	bne.n	800995c <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	3301      	adds	r3, #1
 8009982:	61fb      	str	r3, [r7, #28]
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	2b0f      	cmp	r3, #15
 8009988:	d9db      	bls.n	8009942 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	4413      	add	r3, r2
 8009990:	2200      	movs	r2, #0
 8009992:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	6a3a      	ldr	r2, [r7, #32]
 8009998:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	617b      	str	r3, [r7, #20]
  p = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80099a8:	e027      	b.n	80099fa <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	4413      	add	r3, r2
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	601a      	str	r2, [r3, #0]
      p++;
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	3301      	adds	r3, #1
 80099ba:	623b      	str	r3, [r7, #32]
      code++;
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	3301      	adds	r3, #1
 80099c0:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	4413      	add	r3, r2
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d0eb      	beq.n	80099aa <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b1f      	cmp	r3, #31
 80099d6:	d901      	bls.n	80099dc <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e015      	b.n	8009a08 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80099dc:	2201      	movs	r2, #1
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	fa02 f303 	lsl.w	r3, r2, r3
 80099e4:	69ba      	ldr	r2, [r7, #24]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d301      	bcc.n	80099ee <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e00c      	b.n	8009a08 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	61bb      	str	r3, [r7, #24]
    si++;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	3301      	adds	r3, #1
 80099f8:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	4413      	add	r3, r2
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1dd      	bne.n	80099c2 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	372c      	adds	r7, #44	@ 0x2c
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a20:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a24:	6018      	str	r0, [r3, #0]
 8009a26:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a2a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009a2e:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009a30:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a34:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	f107 0308 	add.w	r3, r7, #8
 8009a3e:	f107 020c 	add.w	r2, r7, #12
 8009a42:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8009a46:	f7ff ff70 	bl	800992a <JPEG_Bits_To_SizeCodes>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8009a50:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009a58:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009a5c:	e075      	b.n	8009b4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8009a64:	e067      	b.n	8009b36 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8009a66:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a6a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009a74:	4413      	add	r3, r2
 8009a76:	3310      	adds	r3, #16
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8009a7e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d103      	bne.n	8009a8e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8009a86:	23a0      	movs	r3, #160	@ 0xa0
 8009a88:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009a8c:	e021      	b.n	8009ad2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8009a8e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a92:	2bf0      	cmp	r3, #240	@ 0xf0
 8009a94:	d103      	bne.n	8009a9e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8009a96:	23a1      	movs	r3, #161	@ 0xa1
 8009a98:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009a9c:	e019      	b.n	8009ad2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8009a9e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009aa2:	091b      	lsrs	r3, r3, #4
 8009aa4:	f003 030f 	and.w	r3, r3, #15
 8009aa8:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8009aac:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009ab0:	f003 030f 	and.w	r3, r3, #15
 8009ab4:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8009ab8:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8009abc:	4613      	mov	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	005b      	lsls	r3, r3, #1
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009aca:	4413      	add	r3, r2
 8009acc:	3b01      	subs	r3, #1
 8009ace:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8009ad2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009ad6:	2ba1      	cmp	r3, #161	@ 0xa1
 8009ad8:	d901      	bls.n	8009ade <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009ada:	2301      	movs	r3, #1
 8009adc:	e035      	b.n	8009b4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009ade:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009ae2:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009ae6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009aea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009aee:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009af2:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009af6:	6819      	ldr	r1, [r3, #0]
 8009af8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009afc:	3328      	adds	r3, #40	@ 0x28
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	440b      	add	r3, r1
 8009b02:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009b04:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009b08:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8009b0c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009b10:	4413      	add	r3, r2
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	b2d9      	uxtb	r1, r3
 8009b18:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009b1c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009b26:	4413      	add	r3, r2
 8009b28:	460a      	mov	r2, r1
 8009b2a:	701a      	strb	r2, [r3, #0]
      k++;
 8009b2c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009b30:	3301      	adds	r3, #1
 8009b32:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8009b36:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009b3a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d38e      	bcc.n	8009a66 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b60:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b64:	6018      	str	r0, [r3, #0]
 8009b66:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b6a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b6e:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009b70:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b74:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8009b7e:	f107 0208 	add.w	r2, r7, #8
 8009b82:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8009b86:	f7ff fed0 	bl	800992a <JPEG_Bits_To_SizeCodes>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8009b90:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009b98:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009b9c:	e048      	b.n	8009c30 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8009ba4:	e03d      	b.n	8009c22 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8009ba6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009baa:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009bb4:	4413      	add	r3, r2
 8009bb6:	3310      	adds	r3, #16
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009bbe:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009bc2:	2b0b      	cmp	r3, #11
 8009bc4:	d901      	bls.n	8009bca <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e032      	b.n	8009c30 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009bca:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bce:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8009bd2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009bd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bda:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bde:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009be2:	6819      	ldr	r1, [r3, #0]
 8009be4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009be8:	3302      	adds	r3, #2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	440b      	add	r3, r1
 8009bee:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009bf0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bf4:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8009bf8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009bfc:	4413      	add	r3, r2
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b2d9      	uxtb	r1, r3
 8009c04:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009c08:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009c12:	4413      	add	r3, r2
 8009c14:	460a      	mov	r2, r1
 8009c16:	701a      	strb	r2, [r3, #0]
      k++;
 8009c18:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8009c22:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8009c26:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d3bb      	bcc.n	8009ba6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b09a      	sub	sp, #104	@ 0x68
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	60f8      	str	r0, [r7, #12]
 8009c42:	60b9      	str	r1, [r7, #8]
 8009c44:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d106      	bne.n	8009c62 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009c5c:	3318      	adds	r3, #24
 8009c5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c60:	e00f      	b.n	8009c82 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d106      	bne.n	8009c7e <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009c78:	3318      	adds	r3, #24
 8009c7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c7c:	e001      	b.n	8009c82 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e059      	b.n	8009d36 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d055      	beq.n	8009d34 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8009c88:	f107 0314 	add.w	r3, r7, #20
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	68b8      	ldr	r0, [r7, #8]
 8009c90:	f7ff ff60 	bl	8009b54 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8009c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8009ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ca6:	e046      	b.n	8009d36 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8009ca8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009caa:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009cac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cae:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009cb2:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009cba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cbc:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009cc0:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8009cc6:	e032      	b.n	8009d2e <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8009cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8009cce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cd0:	3b04      	subs	r3, #4
 8009cd2:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009cd4:	f107 0214 	add.w	r2, r7, #20
 8009cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cda:	4413      	add	r3, r2
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	021b      	lsls	r3, r3, #8
 8009ce0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ce6:	3302      	adds	r3, #2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	3368      	adds	r3, #104	@ 0x68
 8009cec:	443b      	add	r3, r7
 8009cee:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8009cf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009cfe:	f107 0214 	add.w	r2, r7, #20
 8009d02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d04:	4413      	add	r3, r2
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009d0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d10:	3302      	adds	r3, #2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	3368      	adds	r3, #104	@ 0x68
 8009d16:	443b      	add	r3, r7
 8009d18:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d24:	041a      	lsls	r2, r3, #16
 8009d26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d28:	431a      	orrs	r2, r3
 8009d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d2c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009d2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d8c9      	bhi.n	8009cc8 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3768      	adds	r7, #104	@ 0x68
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d4c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d50:	6018      	str	r0, [r3, #0]
 8009d52:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d56:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009d5a:	6019      	str	r1, [r3, #0]
 8009d5c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d60:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8009d64:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009d66:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d6a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d76:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009d7a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009d7e:	6812      	ldr	r2, [r2, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d10c      	bne.n	8009d9e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009d84:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d88:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d94:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009d98:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009d9c:	e01d      	b.n	8009dda <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8009d9e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009da2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009dae:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009db2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009db6:	6812      	ldr	r2, [r2, #0]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d10c      	bne.n	8009dd6 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009dbc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009dc0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009dcc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009dd0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009dd4:	e001      	b.n	8009dda <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e0a8      	b.n	8009f2c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8009dda:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009dde:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 80a0 	beq.w	8009f2a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8009dea:	f107 0214 	add.w	r2, r7, #20
 8009dee:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009df2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009df6:	4611      	mov	r1, r2
 8009df8:	6818      	ldr	r0, [r3, #0]
 8009dfa:	f7ff fe0b 	bl	8009a14 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8009e04:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8009e0c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009e10:	e08c      	b.n	8009f2c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8009e12:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009e16:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009e20:	e00e      	b.n	8009e40 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8009e22:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e26:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009e2a:	601a      	str	r2, [r3, #0]
      addressDef++;
 8009e2c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e30:	3304      	adds	r3, #4
 8009e32:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009e36:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009e40:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d9ec      	bls.n	8009e22 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8009e48:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e4c:	4a3a      	ldr	r2, [pc, #232]	@ (8009f38 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8009e4e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e50:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e54:	3304      	adds	r3, #4
 8009e56:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8009e5a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e5e:	4a37      	ldr	r2, [pc, #220]	@ (8009f3c <JPEG_Set_HuffAC_Mem+0x1fc>)
 8009e60:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e62:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e66:	3304      	adds	r3, #4
 8009e68:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8009e6c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e70:	4a33      	ldr	r2, [pc, #204]	@ (8009f40 <JPEG_Set_HuffAC_Mem+0x200>)
 8009e72:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e74:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e78:	3304      	adds	r3, #4
 8009e7a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8009e7e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e82:	4a30      	ldr	r2, [pc, #192]	@ (8009f44 <JPEG_Set_HuffAC_Mem+0x204>)
 8009e84:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8009e86:	23a2      	movs	r3, #162	@ 0xa2
 8009e88:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8009e8c:	e049      	b.n	8009f22 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8009e8e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e92:	3b01      	subs	r3, #1
 8009e94:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8009e98:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009e9c:	3b04      	subs	r3, #4
 8009e9e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009ea2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ea6:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009eaa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009eae:	4413      	add	r3, r2
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	021b      	lsls	r3, r3, #8
 8009eb4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009eb8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ebc:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009ec0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ec4:	3328      	adds	r3, #40	@ 0x28
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	440b      	add	r3, r1
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8009ed4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009ede:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ee2:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009ee6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009eea:	4413      	add	r3, r2
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	021b      	lsls	r3, r3, #8
 8009ef0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009ef4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ef8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009efc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009f00:	3328      	adds	r3, #40	@ 0x28
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	440b      	add	r3, r1
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009f10:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009f14:	041a      	lsls	r2, r3, #16
 8009f16:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009f20:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009f22:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d8b1      	bhi.n	8009e8e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	0fd10fd0 	.word	0x0fd10fd0
 8009f3c:	0fd30fd2 	.word	0x0fd30fd2
 8009f40:	0fd50fd4 	.word	0x0fd50fd4
 8009f44:	0fd70fd6 	.word	0x0fd70fd6

08009f48 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f84d 	bl	8009ff0 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8009f5e:	461a      	mov	r2, r3
 8009f60:	491f      	ldr	r1, [pc, #124]	@ (8009fe0 <JPEG_Set_HuffEnc_Mem+0x98>)
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7ff feec 	bl	8009d40 <JPEG_Set_HuffAC_Mem>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
 8009f74:	e030      	b.n	8009fd8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4918      	ldr	r1, [pc, #96]	@ (8009fe4 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7ff fedc 	bl	8009d40 <JPEG_Set_HuffAC_Mem>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
 8009f94:	e020      	b.n	8009fd8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	4911      	ldr	r1, [pc, #68]	@ (8009fe8 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7ff fe49 	bl	8009c3a <JPEG_Set_HuffDC_Mem>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
 8009fb4:	e010      	b.n	8009fd8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	490a      	ldr	r1, [pc, #40]	@ (8009fec <JPEG_Set_HuffEnc_Mem+0xa4>)
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7ff fe39 	bl	8009c3a <JPEG_Set_HuffDC_Mem>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	e000      	b.n	8009fd8 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	08017a70 	.word	0x08017a70
 8009fe4:	08017b24 	.word	0x08017b24
 8009fe8:	08017a38 	.word	0x08017a38
 8009fec:	08017a54 	.word	0x08017a54

08009ff0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b08b      	sub	sp, #44	@ 0x2c
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8009ff8:	4b80      	ldr	r3, [pc, #512]	@ (800a1fc <JPEG_Set_Huff_DHTMem+0x20c>)
 8009ffa:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8009ffc:	4b80      	ldr	r3, [pc, #512]	@ (800a200 <JPEG_Set_Huff_DHTMem+0x210>)
 8009ffe:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800a000:	4b80      	ldr	r3, [pc, #512]	@ (800a204 <JPEG_Set_Huff_DHTMem+0x214>)
 800a002:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800a004:	4b80      	ldr	r3, [pc, #512]	@ (800a208 <JPEG_Set_Huff_DHTMem+0x218>)
 800a006:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a010:	330c      	adds	r3, #12
 800a012:	623b      	str	r3, [r7, #32]
  index = 16;
 800a014:	2310      	movs	r3, #16
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a018:	e01d      	b.n	800a056 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01c:	3b01      	subs	r3, #1
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	5cd3      	ldrb	r3, [r2, r3]
 800a022:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a026:	3b02      	subs	r3, #2
 800a028:	6979      	ldr	r1, [r7, #20]
 800a02a:	5ccb      	ldrb	r3, [r1, r3]
 800a02c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a02e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a032:	3b03      	subs	r3, #3
 800a034:	6979      	ldr	r1, [r7, #20]
 800a036:	5ccb      	ldrb	r3, [r1, r3]
 800a038:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a03a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a03c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a03e:	3a04      	subs	r2, #4
 800a040:	6979      	ldr	r1, [r7, #20]
 800a042:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a044:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	601a      	str	r2, [r3, #0]
    address--;
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	3b04      	subs	r3, #4
 800a04e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	3b04      	subs	r3, #4
 800a054:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d8de      	bhi.n	800a01a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a064:	3318      	adds	r3, #24
 800a066:	623b      	str	r3, [r7, #32]
  index = 12;
 800a068:	230c      	movs	r3, #12
 800a06a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a06c:	e021      	b.n	800a0b2 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a070:	3b01      	subs	r3, #1
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	4413      	add	r3, r2
 800a076:	7c1b      	ldrb	r3, [r3, #16]
 800a078:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07c:	3b02      	subs	r3, #2
 800a07e:	6979      	ldr	r1, [r7, #20]
 800a080:	440b      	add	r3, r1
 800a082:	7c1b      	ldrb	r3, [r3, #16]
 800a084:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a086:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08a:	3b03      	subs	r3, #3
 800a08c:	6979      	ldr	r1, [r7, #20]
 800a08e:	440b      	add	r3, r1
 800a090:	7c1b      	ldrb	r3, [r3, #16]
 800a092:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a094:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800a096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a098:	3a04      	subs	r2, #4
 800a09a:	6979      	ldr	r1, [r7, #20]
 800a09c:	440a      	add	r2, r1
 800a09e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a0a0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	601a      	str	r2, [r3, #0]
    address--;
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	3b04      	subs	r3, #4
 800a0aa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ae:	3b04      	subs	r3, #4
 800a0b0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d8da      	bhi.n	800a06e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a0c0:	3328      	adds	r3, #40	@ 0x28
 800a0c2:	623b      	str	r3, [r7, #32]
  index = 16;
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a0c8:	e01d      	b.n	800a106 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	69fa      	ldr	r2, [r7, #28]
 800a0d0:	5cd3      	ldrb	r3, [r2, r3]
 800a0d2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	3b02      	subs	r3, #2
 800a0d8:	69f9      	ldr	r1, [r7, #28]
 800a0da:	5ccb      	ldrb	r3, [r1, r3]
 800a0dc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0de:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e2:	3b03      	subs	r3, #3
 800a0e4:	69f9      	ldr	r1, [r7, #28]
 800a0e6:	5ccb      	ldrb	r3, [r1, r3]
 800a0e8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a0ea:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a0ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0ee:	3a04      	subs	r2, #4
 800a0f0:	69f9      	ldr	r1, [r7, #28]
 800a0f2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a0f4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	601a      	str	r2, [r3, #0]
    address--;
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	3b04      	subs	r3, #4
 800a0fe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a102:	3b04      	subs	r3, #4
 800a104:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d8de      	bhi.n	800a0ca <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a114:	33cc      	adds	r3, #204	@ 0xcc
 800a116:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	4b3b      	ldr	r3, [pc, #236]	@ (800a20c <JPEG_Set_Huff_DHTMem+0x21c>)
 800a11e:	4013      	ands	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800a128:	021a      	lsls	r2, r3, #8
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800a134:	4313      	orrs	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	3b04      	subs	r3, #4
 800a142:	623b      	str	r3, [r7, #32]
  index = 160;
 800a144:	23a0      	movs	r3, #160	@ 0xa0
 800a146:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a148:	e021      	b.n	800a18e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	3b01      	subs	r3, #1
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	4413      	add	r3, r2
 800a152:	7c1b      	ldrb	r3, [r3, #16]
 800a154:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a158:	3b02      	subs	r3, #2
 800a15a:	69f9      	ldr	r1, [r7, #28]
 800a15c:	440b      	add	r3, r1
 800a15e:	7c1b      	ldrb	r3, [r3, #16]
 800a160:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a162:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a166:	3b03      	subs	r3, #3
 800a168:	69f9      	ldr	r1, [r7, #28]
 800a16a:	440b      	add	r3, r1
 800a16c:	7c1b      	ldrb	r3, [r3, #16]
 800a16e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a170:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a174:	3a04      	subs	r2, #4
 800a176:	69f9      	ldr	r1, [r7, #28]
 800a178:	440a      	add	r2, r1
 800a17a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a17c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	601a      	str	r2, [r3, #0]
    address--;
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	3b04      	subs	r3, #4
 800a186:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18a:	3b04      	subs	r3, #4
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a190:	2b03      	cmp	r3, #3
 800a192:	d8da      	bhi.n	800a14a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a19c:	33cc      	adds	r3, #204	@ 0xcc
 800a19e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	061a      	lsls	r2, r3, #24
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	041b      	lsls	r3, r3, #16
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a1ca:	33dc      	adds	r3, #220	@ 0xdc
 800a1cc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a1ce:	6a3b      	ldr	r3, [r7, #32]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a20c <JPEG_Set_Huff_DHTMem+0x21c>)
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	7bdb      	ldrb	r3, [r3, #15]
 800a1dc:	021a      	lsls	r2, r3, #8
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	7b92      	ldrb	r2, [r2, #14]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	3b04      	subs	r3, #4
 800a1f4:	623b      	str	r3, [r7, #32]
  index = 12;
 800a1f6:	230c      	movs	r3, #12
 800a1f8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a1fa:	e027      	b.n	800a24c <JPEG_Set_Huff_DHTMem+0x25c>
 800a1fc:	08017a70 	.word	0x08017a70
 800a200:	08017b24 	.word	0x08017b24
 800a204:	08017a38 	.word	0x08017a38
 800a208:	08017a54 	.word	0x08017a54
 800a20c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a212:	3301      	adds	r3, #1
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	5cd3      	ldrb	r3, [r2, r3]
 800a218:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a21a:	6939      	ldr	r1, [r7, #16]
 800a21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21e:	440b      	add	r3, r1
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a224:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	3b01      	subs	r3, #1
 800a22a:	6939      	ldr	r1, [r7, #16]
 800a22c:	5ccb      	ldrb	r3, [r1, r3]
 800a22e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a230:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800a232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a234:	3a02      	subs	r2, #2
 800a236:	6939      	ldr	r1, [r7, #16]
 800a238:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a23a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	601a      	str	r2, [r3, #0]
    address--;
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	3b04      	subs	r3, #4
 800a244:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a248:	3b04      	subs	r3, #4
 800a24a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24e:	2b03      	cmp	r3, #3
 800a250:	d8de      	bhi.n	800a210 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a25a:	33dc      	adds	r3, #220	@ 0xdc
 800a25c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	b29b      	uxth	r3, r3
 800a264:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	7c5b      	ldrb	r3, [r3, #17]
 800a26a:	061a      	lsls	r2, r3, #24
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	431a      	orrs	r2, r3
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	7c1b      	ldrb	r3, [r3, #16]
 800a274:	041b      	lsls	r3, r3, #16
 800a276:	4313      	orrs	r3, r2
 800a278:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a288:	33e8      	adds	r3, #232	@ 0xe8
 800a28a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	4b6d      	ldr	r3, [pc, #436]	@ (800a448 <JPEG_Set_Huff_DHTMem+0x458>)
 800a292:	4013      	ands	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	7edb      	ldrb	r3, [r3, #27]
 800a29a:	021a      	lsls	r2, r3, #8
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	7e92      	ldrb	r2, [r2, #26]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	3b04      	subs	r3, #4
 800a2b2:	623b      	str	r3, [r7, #32]
  index = 8;
 800a2b4:	2308      	movs	r3, #8
 800a2b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a2b8:	e021      	b.n	800a2fe <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	3301      	adds	r3, #1
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	7c1b      	ldrb	r3, [r3, #16]
 800a2c4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a2c6:	6939      	ldr	r1, [r7, #16]
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ca:	440b      	add	r3, r1
 800a2cc:	3310      	adds	r3, #16
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a2d2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	6939      	ldr	r1, [r7, #16]
 800a2da:	440b      	add	r3, r1
 800a2dc:	7c1b      	ldrb	r3, [r3, #16]
 800a2de:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a2e0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800a2e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2e4:	3a02      	subs	r2, #2
 800a2e6:	6939      	ldr	r1, [r7, #16]
 800a2e8:	440a      	add	r2, r1
 800a2ea:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a2ec:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	601a      	str	r2, [r3, #0]
    address--;
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	3b04      	subs	r3, #4
 800a2f6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fa:	3b04      	subs	r3, #4
 800a2fc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a300:	2b03      	cmp	r3, #3
 800a302:	d8da      	bhi.n	800a2ba <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a30c:	33e8      	adds	r3, #232	@ 0xe8
 800a30e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	b29b      	uxth	r3, r3
 800a316:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	785b      	ldrb	r3, [r3, #1]
 800a31c:	061a      	lsls	r2, r3, #24
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	431a      	orrs	r2, r3
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	041b      	lsls	r3, r3, #16
 800a328:	4313      	orrs	r3, r2
 800a32a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a33a:	33f8      	adds	r3, #248	@ 0xf8
 800a33c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	4b41      	ldr	r3, [pc, #260]	@ (800a448 <JPEG_Set_Huff_DHTMem+0x458>)
 800a344:	4013      	ands	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	7bdb      	ldrb	r3, [r3, #15]
 800a34c:	021a      	lsls	r2, r3, #8
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	4313      	orrs	r3, r2
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	7b92      	ldrb	r2, [r2, #14]
 800a356:	4313      	orrs	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	3b04      	subs	r3, #4
 800a364:	623b      	str	r3, [r7, #32]
  index = 12;
 800a366:	230c      	movs	r3, #12
 800a368:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a36a:	e01d      	b.n	800a3a8 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36e:	3301      	adds	r3, #1
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	5cd3      	ldrb	r3, [r2, r3]
 800a374:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a376:	69b9      	ldr	r1, [r7, #24]
 800a378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37a:	440b      	add	r3, r1
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a380:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a384:	3b01      	subs	r3, #1
 800a386:	69b9      	ldr	r1, [r7, #24]
 800a388:	5ccb      	ldrb	r3, [r1, r3]
 800a38a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a38c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800a38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a390:	3a02      	subs	r2, #2
 800a392:	69b9      	ldr	r1, [r7, #24]
 800a394:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a396:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	601a      	str	r2, [r3, #0]
    address--;
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	3b04      	subs	r3, #4
 800a3a0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a4:	3b04      	subs	r3, #4
 800a3a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d8de      	bhi.n	800a36c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a3b6:	33f8      	adds	r3, #248	@ 0xf8
 800a3b8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	7c5b      	ldrb	r3, [r3, #17]
 800a3c6:	061a      	lsls	r2, r3, #24
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	7c1b      	ldrb	r3, [r3, #16]
 800a3d0:	041b      	lsls	r3, r3, #16
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a3e4:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800a3e8:	623b      	str	r3, [r7, #32]
  index = 160;
 800a3ea:	23a0      	movs	r3, #160	@ 0xa0
 800a3ec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a3ee:	e021      	b.n	800a434 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	69ba      	ldr	r2, [r7, #24]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	7c1b      	ldrb	r3, [r3, #16]
 800a3fa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a3fc:	69b9      	ldr	r1, [r7, #24]
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a400:	440b      	add	r3, r1
 800a402:	3310      	adds	r3, #16
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a408:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40c:	3b01      	subs	r3, #1
 800a40e:	69b9      	ldr	r1, [r7, #24]
 800a410:	440b      	add	r3, r1
 800a412:	7c1b      	ldrb	r3, [r3, #16]
 800a414:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a416:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a41a:	3a02      	subs	r2, #2
 800a41c:	69b9      	ldr	r1, [r7, #24]
 800a41e:	440a      	add	r2, r1
 800a420:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a422:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	601a      	str	r2, [r3, #0]
    address--;
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	3b04      	subs	r3, #4
 800a42c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a430:	3b04      	subs	r3, #4
 800a432:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a436:	2b03      	cmp	r3, #3
 800a438:	d8da      	bhi.n	800a3f0 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800a43a:	bf00      	nop
 800a43c:	bf00      	nop
 800a43e:	372c      	adds	r7, #44	@ 0x2c
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	ffff0000 	.word	0xffff0000

0800a44c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a458:	f003 0303 	and.w	r3, r3, #3
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d125      	bne.n	800a4ac <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d01e      	beq.n	800a4ac <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3304      	adds	r3, #4
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff f90f 	bl	8009698 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3304      	adds	r3, #4
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff f9f3 	bl	8009872 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a49a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a4aa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d116      	bne.n	800a4e6 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d004      	beq.n	800a4d0 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a4c6:	2108      	movs	r1, #8
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f988 	bl	800a7de <JPEG_ReadInputData>
 800a4ce:	e00a      	b.n	800a4e6 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4d6:	f003 0304 	and.w	r3, r3, #4
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800a4de:	2101      	movs	r1, #1
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f97c 	bl	800a7de <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d116      	bne.n	800a520 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d004      	beq.n	800a50a <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a500:	2108      	movs	r1, #8
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f864 	bl	800a5d0 <JPEG_StoreOutputData>
 800a508:	e00a      	b.n	800a520 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a510:	f003 0310 	and.w	r3, r3, #16
 800a514:	2b00      	cmp	r3, #0
 800a516:	d003      	beq.n	800a520 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800a518:	2101      	movs	r1, #1
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f858 	bl	800a5d0 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a526:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a52a:	2b20      	cmp	r3, #32
 800a52c:	d14b      	bne.n	800a5c6 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 0201 	bic.w	r2, r2, #1
 800a53c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a542:	f003 030c 	and.w	r3, r3, #12
 800a546:	2b08      	cmp	r3, #8
 800a548:	d107      	bne.n	800a55a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a558:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a568:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00a      	beq.n	800a588 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	69d9      	ldr	r1, [r3, #28]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a57a:	461a      	mov	r2, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7ff f9a2 	bl	80098c6 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a58c:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a592:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f003 0303 	and.w	r3, r3, #3
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d103      	bne.n	800a5bc <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff f971 	bl	800989c <HAL_JPEG_DecodeCpltCallback>
 800a5ba:	e002      	b.n	800a5c2 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff f963 	bl	8009888 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e000      	b.n	800a5c8 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	440b      	add	r3, r1
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d34b      	bcc.n	800a684 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	617b      	str	r3, [r7, #20]
 800a5f0:	e031      	b.n	800a656 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5f8:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	69da      	ldr	r2, [r3, #28]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a602:	4413      	add	r3, r2
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	0a19      	lsrs	r1, r3, #8
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	69da      	ldr	r2, [r3, #28]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a616:	3301      	adds	r3, #1
 800a618:	4413      	add	r3, r2
 800a61a:	b2ca      	uxtb	r2, r1
 800a61c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	0c19      	lsrs	r1, r3, #16
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	69da      	ldr	r2, [r3, #28]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a62a:	3302      	adds	r3, #2
 800a62c:	4413      	add	r3, r2
 800a62e:	b2ca      	uxtb	r2, r1
 800a630:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	0e19      	lsrs	r1, r3, #24
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	69da      	ldr	r2, [r3, #28]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63e:	3303      	adds	r3, #3
 800a640:	4413      	add	r3, r2
 800a642:	b2ca      	uxtb	r2, r1
 800a644:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64a:	1d1a      	adds	r2, r3, #4
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	3301      	adds	r3, #1
 800a654:	617b      	str	r3, [r7, #20]
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d3c9      	bcc.n	800a5f2 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a666:	429a      	cmp	r2, r3
 800a668:	f040 80b5 	bne.w	800a7d6 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	69d9      	ldr	r1, [r3, #28]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a674:	461a      	mov	r2, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7ff f925 	bl	80098c6 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800a682:	e0a8      	b.n	800a7d6 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68c:	429a      	cmp	r2, r3
 800a68e:	f240 80a2 	bls.w	800a7d6 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	089b      	lsrs	r3, r3, #2
 800a69e:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	617b      	str	r3, [r7, #20]
 800a6a4:	e031      	b.n	800a70a <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ac:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	69da      	ldr	r2, [r3, #28]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b6:	4413      	add	r3, r2
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	b2d2      	uxtb	r2, r2
 800a6bc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	0a19      	lsrs	r1, r3, #8
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	69da      	ldr	r2, [r3, #28]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	4413      	add	r3, r2
 800a6ce:	b2ca      	uxtb	r2, r1
 800a6d0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	0c19      	lsrs	r1, r3, #16
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	69da      	ldr	r2, [r3, #28]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6de:	3302      	adds	r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	b2ca      	uxtb	r2, r1
 800a6e4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	0e19      	lsrs	r1, r3, #24
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	69da      	ldr	r2, [r3, #28]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f2:	3303      	adds	r3, #3
 800a6f4:	4413      	add	r3, r2
 800a6f6:	b2ca      	uxtb	r2, r1
 800a6f8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fe:	1d1a      	adds	r2, r3, #4
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	3301      	adds	r3, #1
 800a708:	617b      	str	r3, [r7, #20]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d3c9      	bcc.n	800a6a6 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d10b      	bne.n	800a736 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	69d9      	ldr	r1, [r3, #28]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a726:	461a      	mov	r2, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7ff f8cc 	bl	80098c6 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a734:	e04f      	b.n	800a7d6 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a748:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800a74a:	2300      	movs	r3, #0
 800a74c:	617b      	str	r3, [r7, #20]
 800a74e:	e015      	b.n	800a77c <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f003 0303 	and.w	r3, r3, #3
 800a756:	00db      	lsls	r3, r3, #3
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	fa22 f103 	lsr.w	r1, r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	69da      	ldr	r2, [r3, #28]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a766:	4413      	add	r3, r2
 800a768:	b2ca      	uxtb	r2, r1
 800a76a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a770:	1c5a      	adds	r2, r3, #1
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	3301      	adds	r3, #1
 800a77a:	617b      	str	r3, [r7, #20]
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	429a      	cmp	r2, r3
 800a782:	d3e5      	bcc.n	800a750 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	69d9      	ldr	r1, [r3, #28]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78c:	461a      	mov	r2, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7ff f899 	bl	80098c6 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f1c3 0304 	rsb	r3, r3, #4
 800a7a0:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	617b      	str	r3, [r7, #20]
 800a7a6:	e013      	b.n	800a7d0 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	fa22 f103 	lsr.w	r1, r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	69da      	ldr	r2, [r3, #28]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ba:	4413      	add	r3, r2
 800a7bc:	b2ca      	uxtb	r2, r1
 800a7be:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c4:	1c5a      	adds	r2, r3, #1
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d9e8      	bls.n	800a7a8 <JPEG_StoreOutputData+0x1d8>
}
 800a7d6:	bf00      	nop
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b088      	sub	sp, #32
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <JPEG_ReadInputData+0x1c>
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d104      	bne.n	800a804 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7fe ffe0 	bl	80097c2 <HAL_JPEG_Pause>
 800a802:	e028      	b.n	800a856 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a1b      	ldr	r3, [r3, #32]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d906      	bls.n	800a81e <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a1b      	ldr	r3, [r3, #32]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	61fb      	str	r3, [r7, #28]
 800a81c:	e01b      	b.n	800a856 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	429a      	cmp	r2, r3
 800a828:	d115      	bne.n	800a856 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff f83d 	bl	80098b0 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	d905      	bls.n	800a84a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a842:	f023 0203 	bic.w	r2, r3, #3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a854:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a85a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f040 809f 	bne.w	800a9a2 <JPEG_ReadInputData+0x1c4>
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	2b00      	cmp	r3, #0
 800a868:	f000 809b 	beq.w	800a9a2 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	089b      	lsrs	r3, r3, #2
 800a870:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	429a      	cmp	r2, r3
 800a878:	d335      	bcc.n	800a8e6 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800a87a:	2300      	movs	r3, #0
 800a87c:	61bb      	str	r3, [r7, #24]
 800a87e:	e02d      	b.n	800a8dc <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a1b      	ldr	r3, [r3, #32]
 800a884:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	699a      	ldr	r2, [r3, #24]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	699a      	ldr	r2, [r3, #24]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3301      	adds	r3, #1
 800a89a:	4413      	add	r3, r2
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a8a0:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6999      	ldr	r1, [r3, #24]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	3302      	adds	r3, #2
 800a8ac:	440b      	add	r3, r1
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a8b2:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	699a      	ldr	r2, [r3, #24]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3303      	adds	r3, #3
 800a8be:	4413      	add	r3, r2
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a8c8:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a8ca:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	1d1a      	adds	r2, r3, #4
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	61bb      	str	r3, [r7, #24]
 800a8dc:	69ba      	ldr	r2, [r7, #24]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d3cd      	bcc.n	800a880 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800a8e4:	e05d      	b.n	800a9a2 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d035      	beq.n	800a958 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	61bb      	str	r3, [r7, #24]
 800a8f0:	e02d      	b.n	800a94e <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	699a      	ldr	r2, [r3, #24]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4413      	add	r3, r2
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	699a      	ldr	r2, [r3, #24]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	3301      	adds	r3, #1
 800a90c:	4413      	add	r3, r2
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a912:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6999      	ldr	r1, [r3, #24]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3302      	adds	r3, #2
 800a91e:	440b      	add	r3, r1
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a924:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	699a      	ldr	r2, [r3, #24]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3303      	adds	r3, #3
 800a930:	4413      	add	r3, r2
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a93a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a93c:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	1d1a      	adds	r2, r3, #4
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	3301      	adds	r3, #1
 800a94c:	61bb      	str	r3, [r7, #24]
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	429a      	cmp	r2, r3
 800a954:	d3cd      	bcc.n	800a8f2 <JPEG_ReadInputData+0x114>
}
 800a956:	e024      	b.n	800a9a2 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800a95c:	2300      	movs	r3, #0
 800a95e:	61bb      	str	r3, [r7, #24]
 800a960:	e017      	b.n	800a992 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	699a      	ldr	r2, [r3, #24]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	4413      	add	r3, r2
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	f003 0303 	and.w	r3, r3, #3
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	fa02 f303 	lsl.w	r3, r2, r3
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	4313      	orrs	r3, r2
 800a980:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	3301      	adds	r3, #1
 800a990:	61bb      	str	r3, [r7, #24]
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	429a      	cmp	r2, r3
 800a998:	d3e3      	bcc.n	800a962 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a9a2:	bf00      	nop
 800a9a4:	3720      	adds	r7, #32
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9b6:	f003 0303 	and.w	r3, r3, #3
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d125      	bne.n	800aa0a <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d01e      	beq.n	800aa0a <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7fe fe60 	bl	8009698 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7fe ff44 	bl	8009872 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a9f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa08:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa10:	f003 0320 	and.w	r3, r3, #32
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d039      	beq.n	800aa8c <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa1c:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f022 0201 	bic.w	r2, r2, #1
 800aa32:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aa42:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa52:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d104      	bne.n	800aa6c <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fa1a 	bl	800aea0 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d105      	bne.n	800aa86 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fa0e 	bl	800aea0 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800aa84:	e002      	b.n	800aa8c <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f804 	bl	800aa94 <JPEG_DMA_EndProcess>
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800aaac:	1ad2      	subs	r2, r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d10a      	bne.n	800aad4 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	69d9      	ldr	r1, [r3, #28]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac6:	461a      	mov	r2, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7fe fefc 	bl	80098c6 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aada:	f003 0310 	and.w	r3, r3, #16
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d134      	bne.n	800ab4c <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	69d9      	ldr	r1, [r3, #28]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7fe fee6 	bl	80098c6 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f022 0201 	bic.w	r2, r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab14:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab1a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f003 0303 	and.w	r3, r3, #3
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d103      	bne.n	800ab44 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7fe fead 	bl	800989c <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800ab42:	e00c      	b.n	800ab5e <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7fe fe9f 	bl	8009888 <HAL_JPEG_EncodeCpltCallback>
}
 800ab4a:	e008      	b.n	800ab5e <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d102      	bne.n	800ab5e <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f804 	bl	800ab66 <JPEG_DMA_PollResidualData>
}
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b086      	sub	sp, #24
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800ab6e:	2310      	movs	r3, #16
 800ab70:	617b      	str	r3, [r7, #20]
 800ab72:	e04f      	b.n	800ac14 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d146      	bne.n	800ac0e <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab86:	f003 0310 	and.w	r3, r3, #16
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d03f      	beq.n	800ac0e <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab94:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	69da      	ldr	r2, [r3, #28]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9e:	4413      	add	r3, r2
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	b2d2      	uxtb	r2, r2
 800aba4:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	0a19      	lsrs	r1, r3, #8
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	69da      	ldr	r2, [r3, #28]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb2:	3301      	adds	r3, #1
 800abb4:	4413      	add	r3, r2
 800abb6:	b2ca      	uxtb	r2, r1
 800abb8:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	0c19      	lsrs	r1, r3, #16
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	69da      	ldr	r2, [r3, #28]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc6:	3302      	adds	r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	b2ca      	uxtb	r2, r1
 800abcc:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	0e19      	lsrs	r1, r3, #24
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	69da      	ldr	r2, [r3, #28]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abda:	3303      	adds	r3, #3
 800abdc:	4413      	add	r3, r2
 800abde:	b2ca      	uxtb	r2, r1
 800abe0:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe6:	1d1a      	adds	r2, r3, #4
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d10a      	bne.n	800ac0e <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	69d9      	ldr	r1, [r3, #28]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac00:	461a      	mov	r2, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7fe fe5f 	bl	80098c6 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	3b01      	subs	r3, #1
 800ac12:	617b      	str	r3, [r7, #20]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1ac      	bne.n	800ab74 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac1e:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac26:	f003 0310 	and.w	r3, r3, #16
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d004      	beq.n	800ac38 <JPEG_DMA_PollResidualData+0xd2>
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d133      	bne.n	800aca0 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f022 0201 	bic.w	r2, r2, #1
 800ac46:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00a      	beq.n	800ac66 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	69d9      	ldr	r1, [r3, #28]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac58:	461a      	mov	r2, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7fe fe33 	bl	80098c6 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac6a:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac70:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d103      	bne.n	800ac9a <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7fe fe02 	bl	800989c <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800ac98:	e002      	b.n	800aca0 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7fe fdf4 	bl	8009888 <HAL_JPEG_EncodeCpltCallback>
}
 800aca0:	bf00      	nop
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b08b      	sub	sp, #44	@ 0x2c
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3350      	adds	r3, #80	@ 0x50
 800acba:	61bb      	str	r3, [r7, #24]

  i = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800acc0:	e042      	b.n	800ad48 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800acc8:	2300      	movs	r3, #0
 800acca:	61fb      	str	r3, [r7, #28]
 800accc:	e033      	b.n	800ad36 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	fa22 f303 	lsr.w	r3, r2, r3
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d103      	bne.n	800acea <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace4:	3364      	adds	r3, #100	@ 0x64
 800ace6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ace8:	e022      	b.n	800ad30 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	2264      	movs	r2, #100	@ 0x64
 800acee:	fb02 f303 	mul.w	r3, r2, r3
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800acf6:	6a38      	ldr	r0, [r7, #32]
 800acf8:	69f9      	ldr	r1, [r7, #28]
 800acfa:	4401      	add	r1, r0
 800acfc:	4818      	ldr	r0, [pc, #96]	@ (800ad60 <JPEG_GetQuality+0xb8>)
 800acfe:	5c41      	ldrb	r1, [r0, r1]
 800ad00:	440a      	add	r2, r1
 800ad02:	7812      	ldrb	r2, [r2, #0]
 800ad04:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad08:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b64      	cmp	r3, #100	@ 0x64
 800ad0e:	d807      	bhi.n	800ad20 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800ad16:	085b      	lsrs	r3, r3, #1
 800ad18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad1a:	4413      	add	r3, r2
 800ad1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad1e:	e007      	b.n	800ad30 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800ad20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad2c:	4413      	add	r3, r2
 800ad2e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	3301      	adds	r3, #1
 800ad34:	61fb      	str	r3, [r7, #28]
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d9c8      	bls.n	800acce <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	3304      	adds	r3, #4
 800ad40:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	3304      	adds	r3, #4
 800ad46:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800ad48:	6a3b      	ldr	r3, [r7, #32]
 800ad4a:	2b3c      	cmp	r3, #60	@ 0x3c
 800ad4c:	d9b9      	bls.n	800acc2 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad50:	099b      	lsrs	r3, r3, #6
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	372c      	adds	r7, #44	@ 0x2c
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	08017bd8 	.word	0x08017bd8

0800ad64 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ad6c:	f7f7 faaa 	bl	80022c4 <HAL_GetTick>
 800ad70:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e03b      	b.n	800adf4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2202      	movs	r2, #2
 800ad88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68da      	ldr	r2, [r3, #12]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 0201 	bic.w	r2, r2, #1
 800ad9a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ad9c:	e00f      	b.n	800adbe <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ad9e:	f7f7 fa91 	bl	80022c4 <HAL_GetTick>
 800ada2:	4602      	mov	r2, r0
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	2b05      	cmp	r3, #5
 800adaa:	d908      	bls.n	800adbe <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2240      	movs	r2, #64	@ 0x40
 800adb0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2203      	movs	r2, #3
 800adb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e01a      	b.n	800adf4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1e8      	bne.n	800ad9e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f9e3 	bl	800b198 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e03e      	b.n	800ae94 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d101      	bne.n	800ae24 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e037      	b.n	800ae94 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d126      	bne.n	800ae86 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d11c      	bne.n	800ae80 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d108      	bne.n	800ae6e <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	691a      	ldr	r2, [r3, #16]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ae6a:	611a      	str	r2, [r3, #16]
 800ae6c:	e00d      	b.n	800ae8a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	691a      	ldr	r2, [r3, #16]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ae7c:	611a      	str	r2, [r3, #16]
 800ae7e:	e004      	b.n	800ae8a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	75fb      	strb	r3, [r7, #23]
 800ae84:	e001      	b.n	800ae8a <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e017      	b.n	800aee2 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d004      	beq.n	800aec8 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2280      	movs	r2, #128	@ 0x80
 800aec2:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e00c      	b.n	800aee2 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2204      	movs	r2, #4
 800aecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	68da      	ldr	r2, [r3, #12]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f022 0201 	bic.w	r2, r2, #1
 800aede:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	370c      	adds	r7, #12
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
	...

0800aef0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aefc:	4b91      	ldr	r3, [pc, #580]	@ (800b144 <HAL_MDMA_IRQHandler+0x254>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a91      	ldr	r2, [pc, #580]	@ (800b148 <HAL_MDMA_IRQHandler+0x258>)
 800af02:	fba2 2303 	umull	r2, r3, r2, r3
 800af06:	0a9b      	lsrs	r3, r3, #10
 800af08:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	4b8e      	ldr	r3, [pc, #568]	@ (800b14c <HAL_MDMA_IRQHandler+0x25c>)
 800af12:	4413      	add	r3, r2
 800af14:	099b      	lsrs	r3, r3, #6
 800af16:	f003 031f 	and.w	r3, r3, #31
 800af1a:	2201      	movs	r2, #1
 800af1c:	fa02 f303 	lsl.w	r3, r2, r3
 800af20:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800af22:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	4013      	ands	r3, r2
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 812d 	beq.w	800b18c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d054      	beq.n	800afea <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	f003 0302 	and.w	r3, r3, #2
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d04d      	beq.n	800afea <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f022 0202 	bic.w	r2, r2, #2
 800af5c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d106      	bne.n	800af7e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af74:	f043 0201 	orr.w	r2, r3, #1
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	669a      	str	r2, [r3, #104]	@ 0x68
 800af7c:	e005      	b.n	800af8a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af82:	f043 0202 	orr.w	r2, r3, #2
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af90:	2b00      	cmp	r3, #0
 800af92:	d005      	beq.n	800afa0 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af98:	f043 0204 	orr.w	r2, r3, #4
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d005      	beq.n	800afb6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afae:	f043 0208 	orr.w	r2, r3, #8
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d005      	beq.n	800afcc <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afc4:	f043 0210 	orr.w	r2, r3, #16
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d005      	beq.n	800afe2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afda:	f043 0220 	orr.w	r2, r3, #32
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2201      	movs	r2, #1
 800afe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d012      	beq.n	800b01e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00b      	beq.n	800b01e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2210      	movs	r2, #16
 800b00c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0308 	and.w	r3, r3, #8
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d012      	beq.n	800b052 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	f003 0310 	and.w	r3, r3, #16
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00b      	beq.n	800b052 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2208      	movs	r2, #8
 800b040:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0304 	and.w	r3, r3, #4
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d012      	beq.n	800b086 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	f003 0308 	and.w	r3, r3, #8
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00b      	beq.n	800b086 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2204      	movs	r2, #4
 800b074:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d003      	beq.n	800b086 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0302 	and.w	r3, r3, #2
 800b090:	2b00      	cmp	r3, #0
 800b092:	d039      	beq.n	800b108 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	f003 0304 	and.w	r3, r3, #4
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d032      	beq.n	800b108 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68da      	ldr	r2, [r3, #12]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b0b0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b04      	cmp	r3, #4
 800b0bc:	d110      	bne.n	800b0e0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d05c      	beq.n	800b190 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	4798      	blx	r3
        }
        return;
 800b0de:	e057      	b.n	800b190 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2202      	movs	r2, #2
 800b0e6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d003      	beq.n	800b108 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d040      	beq.n	800b192 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2204      	movs	r2, #4
 800b114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f022 0201 	bic.w	r2, r2, #1
 800b126:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3301      	adds	r3, #1
 800b12c:	60bb      	str	r3, [r7, #8]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	429a      	cmp	r2, r3
 800b132:	d30d      	bcc.n	800b150 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1f2      	bne.n	800b128 <HAL_MDMA_IRQHandler+0x238>
 800b142:	e006      	b.n	800b152 <HAL_MDMA_IRQHandler+0x262>
 800b144:	24000004 	.word	0x24000004
 800b148:	1b4e81b5 	.word	0x1b4e81b5
 800b14c:	adffffc0 	.word	0xadffffc0
        break;
 800b150:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	2b00      	cmp	r3, #0
 800b166:	d004      	beq.n	800b172 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2203      	movs	r2, #3
 800b16c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b170:	e003      	b.n	800b17a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d007      	beq.n	800b192 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	4798      	blx	r3
 800b18a:	e002      	b.n	800b192 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800b18c:	bf00      	nop
 800b18e:	e000      	b.n	800b192 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800b190:	bf00      	nop
    }
  }
}
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68d9      	ldr	r1, [r3, #12]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	691a      	ldr	r2, [r3, #16]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	695a      	ldr	r2, [r3, #20]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b1be:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a1b      	ldr	r3, [r3, #32]
 800b1c4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b1ca:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b1d6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800b1e0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b1ec:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b1ee:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1f8:	d107      	bne.n	800b20a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	691a      	ldr	r2, [r3, #16]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800b208:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2200      	movs	r2, #0
 800b210:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b216:	2b00      	cmp	r3, #0
 800b218:	da11      	bge.n	800b23e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	695a      	ldr	r2, [r3, #20]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b228:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b22e:	425b      	negs	r3, r3
 800b230:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	b292      	uxth	r2, r2
 800b23a:	621a      	str	r2, [r3, #32]
 800b23c:	e006      	b.n	800b24c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b242:	461a      	mov	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	b292      	uxth	r2, r2
 800b24a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b250:	2b00      	cmp	r3, #0
 800b252:	da15      	bge.n	800b280 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	695a      	ldr	r2, [r3, #20]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800b262:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b268:	425b      	negs	r3, r3
 800b26a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	6a19      	ldr	r1, [r3, #32]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	041a      	lsls	r2, r3, #16
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	430a      	orrs	r2, r1
 800b27c:	621a      	str	r2, [r3, #32]
 800b27e:	e009      	b.n	800b294 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6a19      	ldr	r1, [r3, #32]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b28a:	041a      	lsls	r2, r3, #16
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	430a      	orrs	r2, r1
 800b292:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b29c:	d006      	beq.n	800b2ac <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685a      	ldr	r2, [r3, #4]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	b2d2      	uxtb	r2, r2
 800b2a8:	629a      	str	r2, [r3, #40]	@ 0x28
 800b2aa:	e003      	b.n	800b2b4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b2bc:	bf00      	nop
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af02      	add	r7, sp, #8
 800b2ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e0fe      	b.n	800b4d8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d106      	bne.n	800b2f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f00b f9fe 	bl	80166f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2203      	movs	r2, #3
 800b2f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4618      	mov	r0, r3
 800b302:	f007 fdae 	bl	8012e62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6818      	ldr	r0, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	7c1a      	ldrb	r2, [r3, #16]
 800b30e:	f88d 2000 	strb.w	r2, [sp]
 800b312:	3304      	adds	r3, #4
 800b314:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b316:	f007 fc7f 	bl	8012c18 <USB_CoreInit>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d005      	beq.n	800b32c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2202      	movs	r2, #2
 800b324:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	e0d5      	b.n	800b4d8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2100      	movs	r1, #0
 800b332:	4618      	mov	r0, r3
 800b334:	f007 fda6 	bl	8012e84 <USB_SetCurrentMode>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d005      	beq.n	800b34a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2202      	movs	r2, #2
 800b342:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e0c6      	b.n	800b4d8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b34a:	2300      	movs	r3, #0
 800b34c:	73fb      	strb	r3, [r7, #15]
 800b34e:	e04a      	b.n	800b3e6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b350:	7bfa      	ldrb	r2, [r7, #15]
 800b352:	6879      	ldr	r1, [r7, #4]
 800b354:	4613      	mov	r3, r2
 800b356:	00db      	lsls	r3, r3, #3
 800b358:	4413      	add	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	440b      	add	r3, r1
 800b35e:	3315      	adds	r3, #21
 800b360:	2201      	movs	r2, #1
 800b362:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b364:	7bfa      	ldrb	r2, [r7, #15]
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	4613      	mov	r3, r2
 800b36a:	00db      	lsls	r3, r3, #3
 800b36c:	4413      	add	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	440b      	add	r3, r1
 800b372:	3314      	adds	r3, #20
 800b374:	7bfa      	ldrb	r2, [r7, #15]
 800b376:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b378:	7bfa      	ldrb	r2, [r7, #15]
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	b298      	uxth	r0, r3
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	4613      	mov	r3, r2
 800b382:	00db      	lsls	r3, r3, #3
 800b384:	4413      	add	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	440b      	add	r3, r1
 800b38a:	332e      	adds	r3, #46	@ 0x2e
 800b38c:	4602      	mov	r2, r0
 800b38e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b390:	7bfa      	ldrb	r2, [r7, #15]
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	4613      	mov	r3, r2
 800b396:	00db      	lsls	r3, r3, #3
 800b398:	4413      	add	r3, r2
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	440b      	add	r3, r1
 800b39e:	3318      	adds	r3, #24
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b3a4:	7bfa      	ldrb	r2, [r7, #15]
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	00db      	lsls	r3, r3, #3
 800b3ac:	4413      	add	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	440b      	add	r3, r1
 800b3b2:	331c      	adds	r3, #28
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b3b8:	7bfa      	ldrb	r2, [r7, #15]
 800b3ba:	6879      	ldr	r1, [r7, #4]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	00db      	lsls	r3, r3, #3
 800b3c0:	4413      	add	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	440b      	add	r3, r1
 800b3c6:	3320      	adds	r3, #32
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b3cc:	7bfa      	ldrb	r2, [r7, #15]
 800b3ce:	6879      	ldr	r1, [r7, #4]
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	4413      	add	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	440b      	add	r3, r1
 800b3da:	3324      	adds	r3, #36	@ 0x24
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	73fb      	strb	r3, [r7, #15]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	791b      	ldrb	r3, [r3, #4]
 800b3ea:	7bfa      	ldrb	r2, [r7, #15]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d3af      	bcc.n	800b350 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]
 800b3f4:	e044      	b.n	800b480 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b3f6:	7bfa      	ldrb	r2, [r7, #15]
 800b3f8:	6879      	ldr	r1, [r7, #4]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	00db      	lsls	r3, r3, #3
 800b3fe:	4413      	add	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	440b      	add	r3, r1
 800b404:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b408:	2200      	movs	r2, #0
 800b40a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b40c:	7bfa      	ldrb	r2, [r7, #15]
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	4613      	mov	r3, r2
 800b412:	00db      	lsls	r3, r3, #3
 800b414:	4413      	add	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	440b      	add	r3, r1
 800b41a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b41e:	7bfa      	ldrb	r2, [r7, #15]
 800b420:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b422:	7bfa      	ldrb	r2, [r7, #15]
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	4613      	mov	r3, r2
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	4413      	add	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	440b      	add	r3, r1
 800b430:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b434:	2200      	movs	r2, #0
 800b436:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b438:	7bfa      	ldrb	r2, [r7, #15]
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	4613      	mov	r3, r2
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	4413      	add	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	440b      	add	r3, r1
 800b446:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b44a:	2200      	movs	r2, #0
 800b44c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b44e:	7bfa      	ldrb	r2, [r7, #15]
 800b450:	6879      	ldr	r1, [r7, #4]
 800b452:	4613      	mov	r3, r2
 800b454:	00db      	lsls	r3, r3, #3
 800b456:	4413      	add	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	440b      	add	r3, r1
 800b45c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b464:	7bfa      	ldrb	r2, [r7, #15]
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	4613      	mov	r3, r2
 800b46a:	00db      	lsls	r3, r3, #3
 800b46c:	4413      	add	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	440b      	add	r3, r1
 800b472:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b476:	2200      	movs	r2, #0
 800b478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
 800b47c:	3301      	adds	r3, #1
 800b47e:	73fb      	strb	r3, [r7, #15]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	791b      	ldrb	r3, [r3, #4]
 800b484:	7bfa      	ldrb	r2, [r7, #15]
 800b486:	429a      	cmp	r2, r3
 800b488:	d3b5      	bcc.n	800b3f6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6818      	ldr	r0, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	7c1a      	ldrb	r2, [r3, #16]
 800b492:	f88d 2000 	strb.w	r2, [sp]
 800b496:	3304      	adds	r3, #4
 800b498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b49a:	f007 fd3f 	bl	8012f1c <USB_DevInit>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d005      	beq.n	800b4b0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e013      	b.n	800b4d8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	7b1b      	ldrb	r3, [r3, #12]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d102      	bne.n	800b4cc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f001 f96e 	bl	800c7a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f008 fd82 	bl	8013fda <USB_DevDisconnect>

  return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d101      	bne.n	800b4fc <HAL_PCD_Start+0x1c>
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	e022      	b.n	800b542 <HAL_PCD_Start+0x62>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d009      	beq.n	800b524 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b514:	2b01      	cmp	r3, #1
 800b516:	d105      	bne.n	800b524 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b51c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4618      	mov	r0, r3
 800b52a:	f007 fc89 	bl	8012e40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4618      	mov	r0, r3
 800b534:	f008 fd30 	bl	8013f98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b54a:	b590      	push	{r4, r7, lr}
 800b54c:	b08d      	sub	sp, #52	@ 0x34
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b558:	6a3b      	ldr	r3, [r7, #32]
 800b55a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4618      	mov	r0, r3
 800b562:	f008 fdee 	bl	8014142 <USB_GetMode>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f040 84b9 	bne.w	800bee0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4618      	mov	r0, r3
 800b574:	f008 fd52 	bl	801401c <USB_ReadInterrupts>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f000 84af 	beq.w	800bede <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	0a1b      	lsrs	r3, r3, #8
 800b58a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4618      	mov	r0, r3
 800b59a:	f008 fd3f 	bl	801401c <USB_ReadInterrupts>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	f003 0302 	and.w	r3, r3, #2
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d107      	bne.n	800b5b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	695a      	ldr	r2, [r3, #20]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f002 0202 	and.w	r2, r2, #2
 800b5b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f008 fd2d 	bl	801401c <USB_ReadInterrupts>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	f003 0310 	and.w	r3, r3, #16
 800b5c8:	2b10      	cmp	r3, #16
 800b5ca:	d161      	bne.n	800b690 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	699a      	ldr	r2, [r3, #24]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f022 0210 	bic.w	r2, r2, #16
 800b5da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	6a1b      	ldr	r3, [r3, #32]
 800b5e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	f003 020f 	and.w	r2, r3, #15
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b602:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b606:	d124      	bne.n	800b652 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b60e:	4013      	ands	r3, r2
 800b610:	2b00      	cmp	r3, #0
 800b612:	d035      	beq.n	800b680 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	091b      	lsrs	r3, r3, #4
 800b61c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b61e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b622:	b29b      	uxth	r3, r3
 800b624:	461a      	mov	r2, r3
 800b626:	6a38      	ldr	r0, [r7, #32]
 800b628:	f008 fb64 	bl	8013cf4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	68da      	ldr	r2, [r3, #12]
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	091b      	lsrs	r3, r3, #4
 800b634:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b638:	441a      	add	r2, r3
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	695a      	ldr	r2, [r3, #20]
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	091b      	lsrs	r3, r3, #4
 800b646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b64a:	441a      	add	r2, r3
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	615a      	str	r2, [r3, #20]
 800b650:	e016      	b.n	800b680 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b658:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b65c:	d110      	bne.n	800b680 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b664:	2208      	movs	r2, #8
 800b666:	4619      	mov	r1, r3
 800b668:	6a38      	ldr	r0, [r7, #32]
 800b66a:	f008 fb43 	bl	8013cf4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	695a      	ldr	r2, [r3, #20]
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	091b      	lsrs	r3, r3, #4
 800b676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b67a:	441a      	add	r2, r3
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	699a      	ldr	r2, [r3, #24]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f042 0210 	orr.w	r2, r2, #16
 800b68e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4618      	mov	r0, r3
 800b696:	f008 fcc1 	bl	801401c <USB_ReadInterrupts>
 800b69a:	4603      	mov	r3, r0
 800b69c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b6a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b6a4:	f040 80a7 	bne.w	800b7f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f008 fcc6 	bl	8014042 <USB_ReadDevAllOutEpInterrupt>
 800b6b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b6b8:	e099      	b.n	800b7ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 808e 	beq.w	800b7e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6cc:	b2d2      	uxtb	r2, r2
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f008 fcea 	bl	80140aa <USB_ReadDevOutEPInterrupt>
 800b6d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00c      	beq.n	800b6fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e4:	015a      	lsls	r2, r3, #5
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b6f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fed0 	bl	800c49c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f003 0308 	and.w	r3, r3, #8
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00c      	beq.n	800b720 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b708:	015a      	lsls	r2, r3, #5
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	4413      	add	r3, r2
 800b70e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b712:	461a      	mov	r2, r3
 800b714:	2308      	movs	r3, #8
 800b716:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b718:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 ffa6 	bl	800c66c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	f003 0310 	and.w	r3, r3, #16
 800b726:	2b00      	cmp	r3, #0
 800b728:	d008      	beq.n	800b73c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72c:	015a      	lsls	r2, r3, #5
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	4413      	add	r3, r2
 800b732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b736:	461a      	mov	r2, r3
 800b738:	2310      	movs	r3, #16
 800b73a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f003 0302 	and.w	r3, r3, #2
 800b742:	2b00      	cmp	r3, #0
 800b744:	d030      	beq.n	800b7a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b74e:	2b80      	cmp	r3, #128	@ 0x80
 800b750:	d109      	bne.n	800b766 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	69fa      	ldr	r2, [r7, #28]
 800b75c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b760:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b764:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b768:	4613      	mov	r3, r2
 800b76a:	00db      	lsls	r3, r3, #3
 800b76c:	4413      	add	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	4413      	add	r3, r2
 800b778:	3304      	adds	r3, #4
 800b77a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	78db      	ldrb	r3, [r3, #3]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d108      	bne.n	800b796 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	2200      	movs	r2, #0
 800b788:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f00b f8d3 	bl	801693c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b798:	015a      	lsls	r2, r3, #5
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	4413      	add	r3, r2
 800b79e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	f003 0320 	and.w	r3, r3, #32
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d008      	beq.n	800b7c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b4:	015a      	lsls	r2, r3, #5
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7be:	461a      	mov	r2, r3
 800b7c0:	2320      	movs	r3, #32
 800b7c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d009      	beq.n	800b7e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d0:	015a      	lsls	r2, r3, #5
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b7e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ea:	085b      	lsrs	r3, r3, #1
 800b7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f47f af62 	bne.w	800b6ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f008 fc0e 	bl	801401c <USB_ReadInterrupts>
 800b800:	4603      	mov	r3, r0
 800b802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b806:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b80a:	f040 80db 	bne.w	800b9c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4618      	mov	r0, r3
 800b814:	f008 fc2f 	bl	8014076 <USB_ReadDevAllInEpInterrupt>
 800b818:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b81e:	e0cd      	b.n	800b9bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 80c2 	beq.w	800b9b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b832:	b2d2      	uxtb	r2, r2
 800b834:	4611      	mov	r1, r2
 800b836:	4618      	mov	r0, r3
 800b838:	f008 fc55 	bl	80140e6 <USB_ReadDevInEPInterrupt>
 800b83c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d057      	beq.n	800b8f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84a:	f003 030f 	and.w	r3, r3, #15
 800b84e:	2201      	movs	r2, #1
 800b850:	fa02 f303 	lsl.w	r3, r2, r3
 800b854:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b85c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	43db      	mvns	r3, r3
 800b862:	69f9      	ldr	r1, [r7, #28]
 800b864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b868:	4013      	ands	r3, r2
 800b86a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86e:	015a      	lsls	r2, r3, #5
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	4413      	add	r3, r2
 800b874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b878:	461a      	mov	r2, r3
 800b87a:	2301      	movs	r3, #1
 800b87c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	799b      	ldrb	r3, [r3, #6]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d132      	bne.n	800b8ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b886:	6879      	ldr	r1, [r7, #4]
 800b888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b88a:	4613      	mov	r3, r2
 800b88c:	00db      	lsls	r3, r3, #3
 800b88e:	4413      	add	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	440b      	add	r3, r1
 800b894:	3320      	adds	r3, #32
 800b896:	6819      	ldr	r1, [r3, #0]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b89c:	4613      	mov	r3, r2
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	4413      	add	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4403      	add	r3, r0
 800b8a6:	331c      	adds	r3, #28
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4419      	add	r1, r3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	00db      	lsls	r3, r3, #3
 800b8b4:	4413      	add	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4403      	add	r3, r0
 800b8ba:	3320      	adds	r3, #32
 800b8bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d113      	bne.n	800b8ec <HAL_PCD_IRQHandler+0x3a2>
 800b8c4:	6879      	ldr	r1, [r7, #4]
 800b8c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	00db      	lsls	r3, r3, #3
 800b8cc:	4413      	add	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	440b      	add	r3, r1
 800b8d2:	3324      	adds	r3, #36	@ 0x24
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d108      	bne.n	800b8ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6818      	ldr	r0, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	f008 fc5e 	bl	80141a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f00a ff9d 	bl	8016832 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f003 0308 	and.w	r3, r3, #8
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d008      	beq.n	800b914 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b904:	015a      	lsls	r2, r3, #5
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	4413      	add	r3, r2
 800b90a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b90e:	461a      	mov	r2, r3
 800b910:	2308      	movs	r3, #8
 800b912:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	f003 0310 	and.w	r3, r3, #16
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d008      	beq.n	800b930 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b920:	015a      	lsls	r2, r3, #5
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	4413      	add	r3, r2
 800b926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b92a:	461a      	mov	r2, r3
 800b92c:	2310      	movs	r3, #16
 800b92e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b936:	2b00      	cmp	r3, #0
 800b938:	d008      	beq.n	800b94c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93c:	015a      	lsls	r2, r3, #5
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	4413      	add	r3, r2
 800b942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b946:	461a      	mov	r2, r3
 800b948:	2340      	movs	r3, #64	@ 0x40
 800b94a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	f003 0302 	and.w	r3, r3, #2
 800b952:	2b00      	cmp	r3, #0
 800b954:	d023      	beq.n	800b99e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b956:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b958:	6a38      	ldr	r0, [r7, #32]
 800b95a:	f007 fc3d 	bl	80131d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b95e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b960:	4613      	mov	r3, r2
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	4413      	add	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	3310      	adds	r3, #16
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	4413      	add	r3, r2
 800b96e:	3304      	adds	r3, #4
 800b970:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	78db      	ldrb	r3, [r3, #3]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d108      	bne.n	800b98c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2200      	movs	r2, #0
 800b97e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b982:	b2db      	uxtb	r3, r3
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f00a ffea 	bl	8016960 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98e:	015a      	lsls	r2, r3, #5
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	4413      	add	r3, r2
 800b994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b998:	461a      	mov	r2, r3
 800b99a:	2302      	movs	r3, #2
 800b99c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d003      	beq.n	800b9b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b9a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fcea 	bl	800c384 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b8:	085b      	lsrs	r3, r3, #1
 800b9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f47f af2e 	bne.w	800b820 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f008 fb27 	bl	801401c <USB_ReadInterrupts>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9d8:	d122      	bne.n	800ba20 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	69fa      	ldr	r2, [r7, #28]
 800b9e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9e8:	f023 0301 	bic.w	r3, r3, #1
 800b9ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d108      	bne.n	800ba0a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ba00:	2100      	movs	r1, #0
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fef4 	bl	800c7f0 <HAL_PCDEx_LPM_Callback>
 800ba08:	e002      	b.n	800ba10 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f00a ff88 	bl	8016920 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	695a      	ldr	r2, [r3, #20]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800ba1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f008 faf9 	bl	801401c <USB_ReadInterrupts>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba34:	d112      	bne.n	800ba5c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d102      	bne.n	800ba4c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f00a ff44 	bl	80168d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	695a      	ldr	r2, [r3, #20]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800ba5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4618      	mov	r0, r3
 800ba62:	f008 fadb 	bl	801401c <USB_ReadInterrupts>
 800ba66:	4603      	mov	r3, r0
 800ba68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba70:	d121      	bne.n	800bab6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	695a      	ldr	r2, [r3, #20]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800ba80:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d111      	bne.n	800bab0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba9a:	089b      	lsrs	r3, r3, #2
 800ba9c:	f003 020f 	and.w	r2, r3, #15
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800baa6:	2101      	movs	r1, #1
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fea1 	bl	800c7f0 <HAL_PCDEx_LPM_Callback>
 800baae:	e002      	b.n	800bab6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f00a ff0f 	bl	80168d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4618      	mov	r0, r3
 800babc:	f008 faae 	bl	801401c <USB_ReadInterrupts>
 800bac0:	4603      	mov	r3, r0
 800bac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800baca:	f040 80b7 	bne.w	800bc3c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	69fa      	ldr	r2, [r7, #28]
 800bad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800badc:	f023 0301 	bic.w	r3, r3, #1
 800bae0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2110      	movs	r1, #16
 800bae8:	4618      	mov	r0, r3
 800baea:	f007 fb75 	bl	80131d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800baee:	2300      	movs	r3, #0
 800baf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baf2:	e046      	b.n	800bb82 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800baf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf6:	015a      	lsls	r2, r3, #5
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	4413      	add	r3, r2
 800bafc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb00:	461a      	mov	r2, r3
 800bb02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb18:	0151      	lsls	r1, r2, #5
 800bb1a:	69fa      	ldr	r2, [r7, #28]
 800bb1c:	440a      	add	r2, r1
 800bb1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb34:	461a      	mov	r2, r3
 800bb36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb3e:	015a      	lsls	r2, r3, #5
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	4413      	add	r3, r2
 800bb44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb4c:	0151      	lsls	r1, r2, #5
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	440a      	add	r2, r1
 800bb52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb6c:	0151      	lsls	r1, r2, #5
 800bb6e:	69fa      	ldr	r2, [r7, #28]
 800bb70:	440a      	add	r2, r1
 800bb72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bb7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7e:	3301      	adds	r3, #1
 800bb80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	791b      	ldrb	r3, [r3, #4]
 800bb86:	461a      	mov	r2, r3
 800bb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d3b2      	bcc.n	800baf4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb94:	69db      	ldr	r3, [r3, #28]
 800bb96:	69fa      	ldr	r2, [r7, #28]
 800bb98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb9c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bba0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	7bdb      	ldrb	r3, [r3, #15]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d016      	beq.n	800bbd8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbb4:	69fa      	ldr	r2, [r7, #28]
 800bbb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbba:	f043 030b 	orr.w	r3, r3, #11
 800bbbe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbca:	69fa      	ldr	r2, [r7, #28]
 800bbcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbd0:	f043 030b 	orr.w	r3, r3, #11
 800bbd4:	6453      	str	r3, [r2, #68]	@ 0x44
 800bbd6:	e015      	b.n	800bc04 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbde:	695a      	ldr	r2, [r3, #20]
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	f242 032b 	movw	r3, #8235	@ 0x202b
 800bbec:	4313      	orrs	r3, r2
 800bbee:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	69fa      	ldr	r2, [r7, #28]
 800bbfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbfe:	f043 030b 	orr.w	r3, r3, #11
 800bc02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	69fa      	ldr	r2, [r7, #28]
 800bc0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bc16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6818      	ldr	r0, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bc26:	461a      	mov	r2, r3
 800bc28:	f008 fabe 	bl	80141a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	695a      	ldr	r2, [r3, #20]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800bc3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f008 f9eb 	bl	801401c <USB_ReadInterrupts>
 800bc46:	4603      	mov	r3, r0
 800bc48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc50:	d123      	bne.n	800bc9a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f008 fa82 	bl	8014160 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4618      	mov	r0, r3
 800bc62:	f007 fb32 	bl	80132ca <USB_GetDevSpeed>
 800bc66:	4603      	mov	r3, r0
 800bc68:	461a      	mov	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681c      	ldr	r4, [r3, #0]
 800bc72:	f001 fd9d 	bl	800d7b0 <HAL_RCC_GetHCLKFreq>
 800bc76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f007 f83c 	bl	8012cfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f00a fdfc 	bl	8016882 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	695a      	ldr	r2, [r3, #20]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800bc98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f008 f9bc 	bl	801401c <USB_ReadInterrupts>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f003 0308 	and.w	r3, r3, #8
 800bcaa:	2b08      	cmp	r3, #8
 800bcac:	d10a      	bne.n	800bcc4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f00a fdd9 	bl	8016866 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	695a      	ldr	r2, [r3, #20]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f002 0208 	and.w	r2, r2, #8
 800bcc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f008 f9a7 	bl	801401c <USB_ReadInterrupts>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcd4:	2b80      	cmp	r3, #128	@ 0x80
 800bcd6:	d123      	bne.n	800bd20 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	699b      	ldr	r3, [r3, #24]
 800bcdc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bce0:	6a3b      	ldr	r3, [r7, #32]
 800bce2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bce4:	2301      	movs	r3, #1
 800bce6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bce8:	e014      	b.n	800bd14 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bcea:	6879      	ldr	r1, [r7, #4]
 800bcec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcee:	4613      	mov	r3, r2
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	4413      	add	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	440b      	add	r3, r1
 800bcf8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d105      	bne.n	800bd0e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	4619      	mov	r1, r3
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fb0a 	bl	800c322 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd10:	3301      	adds	r3, #1
 800bd12:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	791b      	ldrb	r3, [r3, #4]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d3e4      	bcc.n	800bcea <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f008 f979 	bl	801401c <USB_ReadInterrupts>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd34:	d13c      	bne.n	800bdb0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd36:	2301      	movs	r3, #1
 800bd38:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd3a:	e02b      	b.n	800bd94 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd4c:	6879      	ldr	r1, [r7, #4]
 800bd4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd50:	4613      	mov	r3, r2
 800bd52:	00db      	lsls	r3, r3, #3
 800bd54:	4413      	add	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	440b      	add	r3, r1
 800bd5a:	3318      	adds	r3, #24
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d115      	bne.n	800bd8e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bd62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	da12      	bge.n	800bd8e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bd68:	6879      	ldr	r1, [r7, #4]
 800bd6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	00db      	lsls	r3, r3, #3
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	440b      	add	r3, r1
 800bd76:	3317      	adds	r3, #23
 800bd78:	2201      	movs	r2, #1
 800bd7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	4619      	mov	r1, r3
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 faca 	bl	800c322 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd90:	3301      	adds	r3, #1
 800bd92:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	791b      	ldrb	r3, [r3, #4]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d3cd      	bcc.n	800bd3c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	695a      	ldr	r2, [r3, #20]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bdae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f008 f931 	bl	801401c <USB_ReadInterrupts>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bdc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdc4:	d156      	bne.n	800be74 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdca:	e045      	b.n	800be58 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdce:	015a      	lsls	r2, r3, #5
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bddc:	6879      	ldr	r1, [r7, #4]
 800bdde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bde0:	4613      	mov	r3, r2
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	440b      	add	r3, r1
 800bdea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d12e      	bne.n	800be52 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bdf4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	da2b      	bge.n	800be52 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	0c1a      	lsrs	r2, r3, #16
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800be04:	4053      	eors	r3, r2
 800be06:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d121      	bne.n	800be52 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800be0e:	6879      	ldr	r1, [r7, #4]
 800be10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be12:	4613      	mov	r3, r2
 800be14:	00db      	lsls	r3, r3, #3
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	440b      	add	r3, r1
 800be1c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800be20:	2201      	movs	r2, #1
 800be22:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800be24:	6a3b      	ldr	r3, [r7, #32]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800be30:	6a3b      	ldr	r3, [r7, #32]
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10a      	bne.n	800be52 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	69fa      	ldr	r2, [r7, #28]
 800be46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be4e:	6053      	str	r3, [r2, #4]
            break;
 800be50:	e008      	b.n	800be64 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	3301      	adds	r3, #1
 800be56:	627b      	str	r3, [r7, #36]	@ 0x24
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	791b      	ldrb	r3, [r3, #4]
 800be5c:	461a      	mov	r2, r3
 800be5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be60:	4293      	cmp	r3, r2
 800be62:	d3b3      	bcc.n	800bdcc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	695a      	ldr	r2, [r3, #20]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800be72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4618      	mov	r0, r3
 800be7a:	f008 f8cf 	bl	801401c <USB_ReadInterrupts>
 800be7e:	4603      	mov	r3, r0
 800be80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800be84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be88:	d10a      	bne.n	800bea0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f00a fd7a 	bl	8016984 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	695a      	ldr	r2, [r3, #20]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800be9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4618      	mov	r0, r3
 800bea6:	f008 f8b9 	bl	801401c <USB_ReadInterrupts>
 800beaa:	4603      	mov	r3, r0
 800beac:	f003 0304 	and.w	r3, r3, #4
 800beb0:	2b04      	cmp	r3, #4
 800beb2:	d115      	bne.n	800bee0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	f003 0304 	and.w	r3, r3, #4
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d002      	beq.n	800becc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f00a fd6a 	bl	80169a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6859      	ldr	r1, [r3, #4]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	430a      	orrs	r2, r1
 800beda:	605a      	str	r2, [r3, #4]
 800bedc:	e000      	b.n	800bee0 <HAL_PCD_IRQHandler+0x996>
      return;
 800bede:	bf00      	nop
    }
  }
}
 800bee0:	3734      	adds	r7, #52	@ 0x34
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd90      	pop	{r4, r7, pc}

0800bee6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b082      	sub	sp, #8
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
 800beee:	460b      	mov	r3, r1
 800bef0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_PCD_SetAddress+0x1a>
 800befc:	2302      	movs	r3, #2
 800befe:	e012      	b.n	800bf26 <HAL_PCD_SetAddress+0x40>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	78fa      	ldrb	r2, [r7, #3]
 800bf0c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	78fa      	ldrb	r2, [r7, #3]
 800bf14:	4611      	mov	r1, r2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f008 f818 	bl	8013f4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	4608      	mov	r0, r1
 800bf38:	4611      	mov	r1, r2
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	70fb      	strb	r3, [r7, #3]
 800bf40:	460b      	mov	r3, r1
 800bf42:	803b      	strh	r3, [r7, #0]
 800bf44:	4613      	mov	r3, r2
 800bf46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bf4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	da0f      	bge.n	800bf74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf54:	78fb      	ldrb	r3, [r7, #3]
 800bf56:	f003 020f 	and.w	r2, r3, #15
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	00db      	lsls	r3, r3, #3
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	3310      	adds	r3, #16
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	4413      	add	r3, r2
 800bf68:	3304      	adds	r3, #4
 800bf6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	705a      	strb	r2, [r3, #1]
 800bf72:	e00f      	b.n	800bf94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf74:	78fb      	ldrb	r3, [r7, #3]
 800bf76:	f003 020f 	and.w	r2, r3, #15
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	00db      	lsls	r3, r3, #3
 800bf7e:	4413      	add	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	4413      	add	r3, r2
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	f003 030f 	and.w	r3, r3, #15
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800bfa0:	883b      	ldrh	r3, [r7, #0]
 800bfa2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	78ba      	ldrb	r2, [r7, #2]
 800bfae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	785b      	ldrb	r3, [r3, #1]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d004      	beq.n	800bfc2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bfc2:	78bb      	ldrb	r3, [r7, #2]
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d102      	bne.n	800bfce <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d101      	bne.n	800bfdc <HAL_PCD_EP_Open+0xae>
 800bfd8:	2302      	movs	r3, #2
 800bfda:	e00e      	b.n	800bffa <HAL_PCD_EP_Open+0xcc>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68f9      	ldr	r1, [r7, #12]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f007 f992 	bl	8013314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800bff8:	7afb      	ldrb	r3, [r7, #11]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b084      	sub	sp, #16
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	460b      	mov	r3, r1
 800c00c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c00e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c012:	2b00      	cmp	r3, #0
 800c014:	da0f      	bge.n	800c036 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c016:	78fb      	ldrb	r3, [r7, #3]
 800c018:	f003 020f 	and.w	r2, r3, #15
 800c01c:	4613      	mov	r3, r2
 800c01e:	00db      	lsls	r3, r3, #3
 800c020:	4413      	add	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	3310      	adds	r3, #16
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	4413      	add	r3, r2
 800c02a:	3304      	adds	r3, #4
 800c02c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2201      	movs	r2, #1
 800c032:	705a      	strb	r2, [r3, #1]
 800c034:	e00f      	b.n	800c056 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c036:	78fb      	ldrb	r3, [r7, #3]
 800c038:	f003 020f 	and.w	r2, r3, #15
 800c03c:	4613      	mov	r3, r2
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	4413      	add	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	4413      	add	r3, r2
 800c04c:	3304      	adds	r3, #4
 800c04e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2200      	movs	r2, #0
 800c054:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c056:	78fb      	ldrb	r3, [r7, #3]
 800c058:	f003 030f 	and.w	r3, r3, #15
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d101      	bne.n	800c070 <HAL_PCD_EP_Close+0x6e>
 800c06c:	2302      	movs	r3, #2
 800c06e:	e00e      	b.n	800c08e <HAL_PCD_EP_Close+0x8c>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68f9      	ldr	r1, [r7, #12]
 800c07e:	4618      	mov	r0, r3
 800c080:	f007 f9d0 	bl	8013424 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b086      	sub	sp, #24
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	60f8      	str	r0, [r7, #12]
 800c09e:	607a      	str	r2, [r7, #4]
 800c0a0:	603b      	str	r3, [r7, #0]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c0a6:	7afb      	ldrb	r3, [r7, #11]
 800c0a8:	f003 020f 	and.w	r2, r3, #15
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	00db      	lsls	r3, r3, #3
 800c0b0:	4413      	add	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	3304      	adds	r3, #4
 800c0be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0d8:	7afb      	ldrb	r3, [r7, #11]
 800c0da:	f003 030f 	and.w	r3, r3, #15
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	799b      	ldrb	r3, [r3, #6]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d102      	bne.n	800c0f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6818      	ldr	r0, [r3, #0]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	799b      	ldrb	r3, [r3, #6]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	6979      	ldr	r1, [r7, #20]
 800c0fe:	f007 fa6d 	bl	80135dc <USB_EPStartXfer>

  return HAL_OK;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	460b      	mov	r3, r1
 800c116:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c118:	78fb      	ldrb	r3, [r7, #3]
 800c11a:	f003 020f 	and.w	r2, r3, #15
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	4613      	mov	r3, r2
 800c122:	00db      	lsls	r3, r3, #3
 800c124:	4413      	add	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	440b      	add	r3, r1
 800c12a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c12e:	681b      	ldr	r3, [r3, #0]
}
 800c130:	4618      	mov	r0, r3
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	607a      	str	r2, [r7, #4]
 800c146:	603b      	str	r3, [r7, #0]
 800c148:	460b      	mov	r3, r1
 800c14a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c14c:	7afb      	ldrb	r3, [r7, #11]
 800c14e:	f003 020f 	and.w	r2, r3, #15
 800c152:	4613      	mov	r3, r2
 800c154:	00db      	lsls	r3, r3, #3
 800c156:	4413      	add	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	3310      	adds	r3, #16
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	4413      	add	r3, r2
 800c160:	3304      	adds	r3, #4
 800c162:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	683a      	ldr	r2, [r7, #0]
 800c16e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	2200      	movs	r2, #0
 800c174:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	2201      	movs	r2, #1
 800c17a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c17c:	7afb      	ldrb	r3, [r7, #11]
 800c17e:	f003 030f 	and.w	r3, r3, #15
 800c182:	b2da      	uxtb	r2, r3
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	799b      	ldrb	r3, [r3, #6]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d102      	bne.n	800c196 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	799b      	ldrb	r3, [r3, #6]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	6979      	ldr	r1, [r7, #20]
 800c1a2:	f007 fa1b 	bl	80135dc <USB_EPStartXfer>

  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3718      	adds	r7, #24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c1bc:	78fb      	ldrb	r3, [r7, #3]
 800c1be:	f003 030f 	and.w	r3, r3, #15
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	7912      	ldrb	r2, [r2, #4]
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d901      	bls.n	800c1ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e04f      	b.n	800c26e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c1ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	da0f      	bge.n	800c1f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1d6:	78fb      	ldrb	r3, [r7, #3]
 800c1d8:	f003 020f 	and.w	r2, r3, #15
 800c1dc:	4613      	mov	r3, r2
 800c1de:	00db      	lsls	r3, r3, #3
 800c1e0:	4413      	add	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	3310      	adds	r3, #16
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	705a      	strb	r2, [r3, #1]
 800c1f4:	e00d      	b.n	800c212 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c1f6:	78fa      	ldrb	r2, [r7, #3]
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	00db      	lsls	r3, r3, #3
 800c1fc:	4413      	add	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	4413      	add	r3, r2
 800c208:	3304      	adds	r3, #4
 800c20a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2200      	movs	r2, #0
 800c210:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2201      	movs	r2, #1
 800c216:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c218:	78fb      	ldrb	r3, [r7, #3]
 800c21a:	f003 030f 	and.w	r3, r3, #15
 800c21e:	b2da      	uxtb	r2, r3
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d101      	bne.n	800c232 <HAL_PCD_EP_SetStall+0x82>
 800c22e:	2302      	movs	r3, #2
 800c230:	e01d      	b.n	800c26e <HAL_PCD_EP_SetStall+0xbe>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2201      	movs	r2, #1
 800c236:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68f9      	ldr	r1, [r7, #12]
 800c240:	4618      	mov	r0, r3
 800c242:	f007 fdaf 	bl	8013da4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c246:	78fb      	ldrb	r3, [r7, #3]
 800c248:	f003 030f 	and.w	r3, r3, #15
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d109      	bne.n	800c264 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6818      	ldr	r0, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	7999      	ldrb	r1, [r3, #6]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c25e:	461a      	mov	r2, r3
 800c260:	f007 ffa2 	bl	80141a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b084      	sub	sp, #16
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	460b      	mov	r3, r1
 800c280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c282:	78fb      	ldrb	r3, [r7, #3]
 800c284:	f003 030f 	and.w	r3, r3, #15
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	7912      	ldrb	r2, [r2, #4]
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d901      	bls.n	800c294 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	e042      	b.n	800c31a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	da0f      	bge.n	800c2bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c29c:	78fb      	ldrb	r3, [r7, #3]
 800c29e:	f003 020f 	and.w	r2, r3, #15
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	00db      	lsls	r3, r3, #3
 800c2a6:	4413      	add	r3, r2
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	3310      	adds	r3, #16
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	705a      	strb	r2, [r3, #1]
 800c2ba:	e00f      	b.n	800c2dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	f003 020f 	and.w	r2, r3, #15
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	00db      	lsls	r3, r3, #3
 800c2c6:	4413      	add	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2e2:	78fb      	ldrb	r3, [r7, #3]
 800c2e4:	f003 030f 	and.w	r3, r3, #15
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d101      	bne.n	800c2fc <HAL_PCD_EP_ClrStall+0x86>
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	e00e      	b.n	800c31a <HAL_PCD_EP_ClrStall+0xa4>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68f9      	ldr	r1, [r7, #12]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f007 fdb8 	bl	8013e80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b084      	sub	sp, #16
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	460b      	mov	r3, r1
 800c32c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c32e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c332:	2b00      	cmp	r3, #0
 800c334:	da0c      	bge.n	800c350 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c336:	78fb      	ldrb	r3, [r7, #3]
 800c338:	f003 020f 	and.w	r2, r3, #15
 800c33c:	4613      	mov	r3, r2
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	4413      	add	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	3310      	adds	r3, #16
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	4413      	add	r3, r2
 800c34a:	3304      	adds	r3, #4
 800c34c:	60fb      	str	r3, [r7, #12]
 800c34e:	e00c      	b.n	800c36a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c350:	78fb      	ldrb	r3, [r7, #3]
 800c352:	f003 020f 	and.w	r2, r3, #15
 800c356:	4613      	mov	r3, r2
 800c358:	00db      	lsls	r3, r3, #3
 800c35a:	4413      	add	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	4413      	add	r3, r2
 800c366:	3304      	adds	r3, #4
 800c368:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	68f9      	ldr	r1, [r7, #12]
 800c370:	4618      	mov	r0, r3
 800c372:	f007 fbd7 	bl	8013b24 <USB_EPStopXfer>
 800c376:	4603      	mov	r3, r0
 800c378:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c37a:	7afb      	ldrb	r3, [r7, #11]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b08a      	sub	sp, #40	@ 0x28
 800c388:	af02      	add	r7, sp, #8
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	4613      	mov	r3, r2
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	4413      	add	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	3310      	adds	r3, #16
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	695a      	ldr	r2, [r3, #20]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d901      	bls.n	800c3bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e06b      	b.n	800c494 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	691a      	ldr	r2, [r3, #16]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	695b      	ldr	r3, [r3, #20]
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	69fa      	ldr	r2, [r7, #28]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d902      	bls.n	800c3d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	3303      	adds	r3, #3
 800c3dc:	089b      	lsrs	r3, r3, #2
 800c3de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c3e0:	e02a      	b.n	800c438 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	691a      	ldr	r2, [r3, #16]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	69fa      	ldr	r2, [r7, #28]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d902      	bls.n	800c3fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	3303      	adds	r3, #3
 800c402:	089b      	lsrs	r3, r3, #2
 800c404:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	68d9      	ldr	r1, [r3, #12]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	4603      	mov	r3, r0
 800c41a:	6978      	ldr	r0, [r7, #20]
 800c41c:	f007 fc2c 	bl	8013c78 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	68da      	ldr	r2, [r3, #12]
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	441a      	add	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	695a      	ldr	r2, [r3, #20]
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	441a      	add	r2, r3
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	015a      	lsls	r2, r3, #5
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	4413      	add	r3, r2
 800c440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c444:	699b      	ldr	r3, [r3, #24]
 800c446:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c448:	69ba      	ldr	r2, [r7, #24]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d809      	bhi.n	800c462 <PCD_WriteEmptyTxFifo+0xde>
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	695a      	ldr	r2, [r3, #20]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c456:	429a      	cmp	r2, r3
 800c458:	d203      	bcs.n	800c462 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1bf      	bne.n	800c3e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	691a      	ldr	r2, [r3, #16]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d811      	bhi.n	800c492 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	f003 030f 	and.w	r3, r3, #15
 800c474:	2201      	movs	r2, #1
 800c476:	fa02 f303 	lsl.w	r3, r2, r3
 800c47a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	43db      	mvns	r3, r3
 800c488:	6939      	ldr	r1, [r7, #16]
 800c48a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c48e:	4013      	ands	r3, r2
 800c490:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3720      	adds	r7, #32
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b088      	sub	sp, #32
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	333c      	adds	r3, #60	@ 0x3c
 800c4b4:	3304      	adds	r3, #4
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	015a      	lsls	r2, r3, #5
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	799b      	ldrb	r3, [r3, #6]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d17b      	bne.n	800c5ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f003 0308 	and.w	r3, r3, #8
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d015      	beq.n	800c508 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	4a61      	ldr	r2, [pc, #388]	@ (800c664 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	f240 80b9 	bls.w	800c658 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 80b3 	beq.w	800c658 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	015a      	lsls	r2, r3, #5
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4fe:	461a      	mov	r2, r3
 800c500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c504:	6093      	str	r3, [r2, #8]
 800c506:	e0a7      	b.n	800c658 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f003 0320 	and.w	r3, r3, #32
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d009      	beq.n	800c526 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	015a      	lsls	r2, r3, #5
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	4413      	add	r3, r2
 800c51a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c51e:	461a      	mov	r2, r3
 800c520:	2320      	movs	r3, #32
 800c522:	6093      	str	r3, [r2, #8]
 800c524:	e098      	b.n	800c658 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f040 8093 	bne.w	800c658 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	4a4b      	ldr	r2, [pc, #300]	@ (800c664 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d90f      	bls.n	800c55a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00a      	beq.n	800c55a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	015a      	lsls	r2, r3, #5
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	4413      	add	r3, r2
 800c54c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c550:	461a      	mov	r2, r3
 800c552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c556:	6093      	str	r3, [r2, #8]
 800c558:	e07e      	b.n	800c658 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	4613      	mov	r3, r2
 800c55e:	00db      	lsls	r3, r3, #3
 800c560:	4413      	add	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	4413      	add	r3, r2
 800c56c:	3304      	adds	r3, #4
 800c56e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6a1a      	ldr	r2, [r3, #32]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	0159      	lsls	r1, r3, #5
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	440b      	add	r3, r1
 800c57c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c586:	1ad2      	subs	r2, r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d114      	bne.n	800c5bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d109      	bne.n	800c5ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6818      	ldr	r0, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	2101      	movs	r1, #1
 800c5a8:	f007 fdfe 	bl	80141a8 <USB_EP0_OutStart>
 800c5ac:	e006      	b.n	800c5bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	68da      	ldr	r2, [r3, #12]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	695b      	ldr	r3, [r3, #20]
 800c5b6:	441a      	add	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f00a f91a 	bl	80167fc <HAL_PCD_DataOutStageCallback>
 800c5c8:	e046      	b.n	800c658 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	4a26      	ldr	r2, [pc, #152]	@ (800c668 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d124      	bne.n	800c61c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00a      	beq.n	800c5f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5ee:	6093      	str	r3, [r2, #8]
 800c5f0:	e032      	b.n	800c658 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	f003 0320 	and.w	r3, r3, #32
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d008      	beq.n	800c60e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	015a      	lsls	r2, r3, #5
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	4413      	add	r3, r2
 800c604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c608:	461a      	mov	r2, r3
 800c60a:	2320      	movs	r3, #32
 800c60c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	b2db      	uxtb	r3, r3
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f00a f8f1 	bl	80167fc <HAL_PCD_DataOutStageCallback>
 800c61a:	e01d      	b.n	800c658 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d114      	bne.n	800c64c <PCD_EP_OutXfrComplete_int+0x1b0>
 800c622:	6879      	ldr	r1, [r7, #4]
 800c624:	683a      	ldr	r2, [r7, #0]
 800c626:	4613      	mov	r3, r2
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	4413      	add	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	440b      	add	r3, r1
 800c630:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d108      	bne.n	800c64c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6818      	ldr	r0, [r3, #0]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c644:	461a      	mov	r2, r3
 800c646:	2100      	movs	r1, #0
 800c648:	f007 fdae 	bl	80141a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f00a f8d2 	bl	80167fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3720      	adds	r7, #32
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	4f54300a 	.word	0x4f54300a
 800c668:	4f54310a 	.word	0x4f54310a

0800c66c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	333c      	adds	r3, #60	@ 0x3c
 800c684:	3304      	adds	r3, #4
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	015a      	lsls	r2, r3, #5
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	4413      	add	r3, r2
 800c692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	4a15      	ldr	r2, [pc, #84]	@ (800c6f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d90e      	bls.n	800c6c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d009      	beq.n	800c6c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	015a      	lsls	r2, r3, #5
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f00a f889 	bl	80167d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	4a0a      	ldr	r2, [pc, #40]	@ (800c6f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d90c      	bls.n	800c6e8 <PCD_EP_OutSetupPacket_int+0x7c>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	799b      	ldrb	r3, [r3, #6]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d108      	bne.n	800c6e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6818      	ldr	r0, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	f007 fd60 	bl	80141a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	4f54300a 	.word	0x4f54300a

0800c6f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	460b      	mov	r3, r1
 800c702:	70fb      	strb	r3, [r7, #3]
 800c704:	4613      	mov	r3, r2
 800c706:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c70e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c710:	78fb      	ldrb	r3, [r7, #3]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d107      	bne.n	800c726 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c716:	883b      	ldrh	r3, [r7, #0]
 800c718:	0419      	lsls	r1, r3, #16
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	430a      	orrs	r2, r1
 800c722:	629a      	str	r2, [r3, #40]	@ 0x28
 800c724:	e028      	b.n	800c778 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c72c:	0c1b      	lsrs	r3, r3, #16
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	4413      	add	r3, r2
 800c732:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c734:	2300      	movs	r3, #0
 800c736:	73fb      	strb	r3, [r7, #15]
 800c738:	e00d      	b.n	800c756 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	7bfb      	ldrb	r3, [r7, #15]
 800c740:	3340      	adds	r3, #64	@ 0x40
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4413      	add	r3, r2
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	0c1b      	lsrs	r3, r3, #16
 800c74a:	68ba      	ldr	r2, [r7, #8]
 800c74c:	4413      	add	r3, r2
 800c74e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c750:	7bfb      	ldrb	r3, [r7, #15]
 800c752:	3301      	adds	r3, #1
 800c754:	73fb      	strb	r3, [r7, #15]
 800c756:	7bfa      	ldrb	r2, [r7, #15]
 800c758:	78fb      	ldrb	r3, [r7, #3]
 800c75a:	3b01      	subs	r3, #1
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d3ec      	bcc.n	800c73a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c760:	883b      	ldrh	r3, [r7, #0]
 800c762:	0418      	lsls	r0, r3, #16
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6819      	ldr	r1, [r3, #0]
 800c768:	78fb      	ldrb	r3, [r7, #3]
 800c76a:	3b01      	subs	r3, #1
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	4302      	orrs	r2, r0
 800c770:	3340      	adds	r3, #64	@ 0x40
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	440b      	add	r3, r1
 800c776:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3714      	adds	r7, #20
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c786:	b480      	push	{r7}
 800c788:	b083      	sub	sp, #12
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	460b      	mov	r3, r1
 800c790:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	887a      	ldrh	r2, [r7, #2]
 800c798:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c7d6:	4b05      	ldr	r3, [pc, #20]	@ (800c7ec <HAL_PCDEx_ActivateLPM+0x44>)
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	10000003 	.word	0x10000003

0800c7f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c7fc:	bf00      	nop
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c810:	4b19      	ldr	r3, [pc, #100]	@ (800c878 <HAL_PWREx_ConfigSupply+0x70>)
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f003 0304 	and.w	r3, r3, #4
 800c818:	2b04      	cmp	r3, #4
 800c81a:	d00a      	beq.n	800c832 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c81c:	4b16      	ldr	r3, [pc, #88]	@ (800c878 <HAL_PWREx_ConfigSupply+0x70>)
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f003 0307 	and.w	r3, r3, #7
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	d001      	beq.n	800c82e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	e01f      	b.n	800c86e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c82e:	2300      	movs	r3, #0
 800c830:	e01d      	b.n	800c86e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c832:	4b11      	ldr	r3, [pc, #68]	@ (800c878 <HAL_PWREx_ConfigSupply+0x70>)
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	f023 0207 	bic.w	r2, r3, #7
 800c83a:	490f      	ldr	r1, [pc, #60]	@ (800c878 <HAL_PWREx_ConfigSupply+0x70>)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4313      	orrs	r3, r2
 800c840:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c842:	f7f5 fd3f 	bl	80022c4 <HAL_GetTick>
 800c846:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c848:	e009      	b.n	800c85e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c84a:	f7f5 fd3b 	bl	80022c4 <HAL_GetTick>
 800c84e:	4602      	mov	r2, r0
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	1ad3      	subs	r3, r2, r3
 800c854:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c858:	d901      	bls.n	800c85e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e007      	b.n	800c86e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c85e:	4b06      	ldr	r3, [pc, #24]	@ (800c878 <HAL_PWREx_ConfigSupply+0x70>)
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c86a:	d1ee      	bne.n	800c84a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	58024800 	.word	0x58024800

0800c87c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c87c:	b480      	push	{r7}
 800c87e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c880:	4b05      	ldr	r3, [pc, #20]	@ (800c898 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	4a04      	ldr	r2, [pc, #16]	@ (800c898 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c88a:	60d3      	str	r3, [r2, #12]
}
 800c88c:	bf00      	nop
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	58024800 	.word	0x58024800

0800c89c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b08c      	sub	sp, #48	@ 0x30
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d102      	bne.n	800c8b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	f000 bc48 	b.w	800d140 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 8088 	beq.w	800c9ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8be:	4b99      	ldr	r3, [pc, #612]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c8c8:	4b96      	ldr	r3, [pc, #600]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c8ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d0:	2b10      	cmp	r3, #16
 800c8d2:	d007      	beq.n	800c8e4 <HAL_RCC_OscConfig+0x48>
 800c8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d6:	2b18      	cmp	r3, #24
 800c8d8:	d111      	bne.n	800c8fe <HAL_RCC_OscConfig+0x62>
 800c8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8dc:	f003 0303 	and.w	r3, r3, #3
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d10c      	bne.n	800c8fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8e4:	4b8f      	ldr	r3, [pc, #572]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d06d      	beq.n	800c9cc <HAL_RCC_OscConfig+0x130>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d169      	bne.n	800c9cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	f000 bc21 	b.w	800d140 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c906:	d106      	bne.n	800c916 <HAL_RCC_OscConfig+0x7a>
 800c908:	4b86      	ldr	r3, [pc, #536]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a85      	ldr	r2, [pc, #532]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c90e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c912:	6013      	str	r3, [r2, #0]
 800c914:	e02e      	b.n	800c974 <HAL_RCC_OscConfig+0xd8>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10c      	bne.n	800c938 <HAL_RCC_OscConfig+0x9c>
 800c91e:	4b81      	ldr	r3, [pc, #516]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a80      	ldr	r2, [pc, #512]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c928:	6013      	str	r3, [r2, #0]
 800c92a:	4b7e      	ldr	r3, [pc, #504]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a7d      	ldr	r2, [pc, #500]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c930:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	e01d      	b.n	800c974 <HAL_RCC_OscConfig+0xd8>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c940:	d10c      	bne.n	800c95c <HAL_RCC_OscConfig+0xc0>
 800c942:	4b78      	ldr	r3, [pc, #480]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a77      	ldr	r2, [pc, #476]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c94c:	6013      	str	r3, [r2, #0]
 800c94e:	4b75      	ldr	r3, [pc, #468]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a74      	ldr	r2, [pc, #464]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c958:	6013      	str	r3, [r2, #0]
 800c95a:	e00b      	b.n	800c974 <HAL_RCC_OscConfig+0xd8>
 800c95c:	4b71      	ldr	r3, [pc, #452]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a70      	ldr	r2, [pc, #448]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c966:	6013      	str	r3, [r2, #0]
 800c968:	4b6e      	ldr	r3, [pc, #440]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a6d      	ldr	r2, [pc, #436]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c96e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d013      	beq.n	800c9a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c97c:	f7f5 fca2 	bl	80022c4 <HAL_GetTick>
 800c980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c982:	e008      	b.n	800c996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c984:	f7f5 fc9e 	bl	80022c4 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	2b64      	cmp	r3, #100	@ 0x64
 800c990:	d901      	bls.n	800c996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e3d4      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c996:	4b63      	ldr	r3, [pc, #396]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d0f0      	beq.n	800c984 <HAL_RCC_OscConfig+0xe8>
 800c9a2:	e014      	b.n	800c9ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9a4:	f7f5 fc8e 	bl	80022c4 <HAL_GetTick>
 800c9a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c9aa:	e008      	b.n	800c9be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9ac:	f7f5 fc8a 	bl	80022c4 <HAL_GetTick>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	2b64      	cmp	r3, #100	@ 0x64
 800c9b8:	d901      	bls.n	800c9be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	e3c0      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c9be:	4b59      	ldr	r3, [pc, #356]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1f0      	bne.n	800c9ac <HAL_RCC_OscConfig+0x110>
 800c9ca:	e000      	b.n	800c9ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f003 0302 	and.w	r3, r3, #2
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 80ca 	beq.w	800cb70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c9dc:	4b51      	ldr	r3, [pc, #324]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c9e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c9e6:	4b4f      	ldr	r3, [pc, #316]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800c9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c9ec:	6a3b      	ldr	r3, [r7, #32]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d007      	beq.n	800ca02 <HAL_RCC_OscConfig+0x166>
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	2b18      	cmp	r3, #24
 800c9f6:	d156      	bne.n	800caa6 <HAL_RCC_OscConfig+0x20a>
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	f003 0303 	and.w	r3, r3, #3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d151      	bne.n	800caa6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca02:	4b48      	ldr	r3, [pc, #288]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 0304 	and.w	r3, r3, #4
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d005      	beq.n	800ca1a <HAL_RCC_OscConfig+0x17e>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d101      	bne.n	800ca1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e392      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ca1a:	4b42      	ldr	r3, [pc, #264]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f023 0219 	bic.w	r2, r3, #25
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	493f      	ldr	r1, [pc, #252]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca2c:	f7f5 fc4a 	bl	80022c4 <HAL_GetTick>
 800ca30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca32:	e008      	b.n	800ca46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca34:	f7f5 fc46 	bl	80022c4 <HAL_GetTick>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d901      	bls.n	800ca46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ca42:	2303      	movs	r3, #3
 800ca44:	e37c      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca46:	4b37      	ldr	r3, [pc, #220]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f003 0304 	and.w	r3, r3, #4
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0f0      	beq.n	800ca34 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca52:	f7f5 fc67 	bl	8002324 <HAL_GetREVID>
 800ca56:	4603      	mov	r3, r0
 800ca58:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d817      	bhi.n	800ca90 <HAL_RCC_OscConfig+0x1f4>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	2b40      	cmp	r3, #64	@ 0x40
 800ca66:	d108      	bne.n	800ca7a <HAL_RCC_OscConfig+0x1de>
 800ca68:	4b2e      	ldr	r3, [pc, #184]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ca70:	4a2c      	ldr	r2, [pc, #176]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800ca72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca76:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca78:	e07a      	b.n	800cb70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca7a:	4b2a      	ldr	r3, [pc, #168]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	031b      	lsls	r3, r3, #12
 800ca88:	4926      	ldr	r1, [pc, #152]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca8e:	e06f      	b.n	800cb70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca90:	4b24      	ldr	r3, [pc, #144]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	691b      	ldr	r3, [r3, #16]
 800ca9c:	061b      	lsls	r3, r3, #24
 800ca9e:	4921      	ldr	r1, [pc, #132]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800caa0:	4313      	orrs	r3, r2
 800caa2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800caa4:	e064      	b.n	800cb70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d047      	beq.n	800cb3e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800caae:	4b1d      	ldr	r3, [pc, #116]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f023 0219 	bic.w	r2, r3, #25
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	491a      	ldr	r1, [pc, #104]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800cabc:	4313      	orrs	r3, r2
 800cabe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cac0:	f7f5 fc00 	bl	80022c4 <HAL_GetTick>
 800cac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cac6:	e008      	b.n	800cada <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cac8:	f7f5 fbfc 	bl	80022c4 <HAL_GetTick>
 800cacc:	4602      	mov	r2, r0
 800cace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d901      	bls.n	800cada <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cad6:	2303      	movs	r3, #3
 800cad8:	e332      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cada:	4b12      	ldr	r3, [pc, #72]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 0304 	and.w	r3, r3, #4
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d0f0      	beq.n	800cac8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cae6:	f7f5 fc1d 	bl	8002324 <HAL_GetREVID>
 800caea:	4603      	mov	r3, r0
 800caec:	f241 0203 	movw	r2, #4099	@ 0x1003
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d819      	bhi.n	800cb28 <HAL_RCC_OscConfig+0x28c>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	2b40      	cmp	r3, #64	@ 0x40
 800cafa:	d108      	bne.n	800cb0e <HAL_RCC_OscConfig+0x272>
 800cafc:	4b09      	ldr	r3, [pc, #36]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800cb04:	4a07      	ldr	r2, [pc, #28]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800cb06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb0a:	6053      	str	r3, [r2, #4]
 800cb0c:	e030      	b.n	800cb70 <HAL_RCC_OscConfig+0x2d4>
 800cb0e:	4b05      	ldr	r3, [pc, #20]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	031b      	lsls	r3, r3, #12
 800cb1c:	4901      	ldr	r1, [pc, #4]	@ (800cb24 <HAL_RCC_OscConfig+0x288>)
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	604b      	str	r3, [r1, #4]
 800cb22:	e025      	b.n	800cb70 <HAL_RCC_OscConfig+0x2d4>
 800cb24:	58024400 	.word	0x58024400
 800cb28:	4b9a      	ldr	r3, [pc, #616]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	691b      	ldr	r3, [r3, #16]
 800cb34:	061b      	lsls	r3, r3, #24
 800cb36:	4997      	ldr	r1, [pc, #604]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	604b      	str	r3, [r1, #4]
 800cb3c:	e018      	b.n	800cb70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb3e:	4b95      	ldr	r3, [pc, #596]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a94      	ldr	r2, [pc, #592]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cb44:	f023 0301 	bic.w	r3, r3, #1
 800cb48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb4a:	f7f5 fbbb 	bl	80022c4 <HAL_GetTick>
 800cb4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cb50:	e008      	b.n	800cb64 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb52:	f7f5 fbb7 	bl	80022c4 <HAL_GetTick>
 800cb56:	4602      	mov	r2, r0
 800cb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d901      	bls.n	800cb64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e2ed      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cb64:	4b8b      	ldr	r3, [pc, #556]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0304 	and.w	r3, r3, #4
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1f0      	bne.n	800cb52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0310 	and.w	r3, r3, #16
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 80a9 	beq.w	800ccd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb7e:	4b85      	ldr	r3, [pc, #532]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cb88:	4b82      	ldr	r3, [pc, #520]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cb8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	2b08      	cmp	r3, #8
 800cb92:	d007      	beq.n	800cba4 <HAL_RCC_OscConfig+0x308>
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	2b18      	cmp	r3, #24
 800cb98:	d13a      	bne.n	800cc10 <HAL_RCC_OscConfig+0x374>
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	f003 0303 	and.w	r3, r3, #3
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d135      	bne.n	800cc10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cba4:	4b7b      	ldr	r3, [pc, #492]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d005      	beq.n	800cbbc <HAL_RCC_OscConfig+0x320>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	69db      	ldr	r3, [r3, #28]
 800cbb4:	2b80      	cmp	r3, #128	@ 0x80
 800cbb6:	d001      	beq.n	800cbbc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e2c1      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cbbc:	f7f5 fbb2 	bl	8002324 <HAL_GetREVID>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d817      	bhi.n	800cbfa <HAL_RCC_OscConfig+0x35e>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	2b20      	cmp	r3, #32
 800cbd0:	d108      	bne.n	800cbe4 <HAL_RCC_OscConfig+0x348>
 800cbd2:	4b70      	ldr	r3, [pc, #448]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cbda:	4a6e      	ldr	r2, [pc, #440]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cbdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cbe0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cbe2:	e075      	b.n	800ccd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cbe4:	4b6b      	ldr	r3, [pc, #428]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	069b      	lsls	r3, r3, #26
 800cbf2:	4968      	ldr	r1, [pc, #416]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cbf8:	e06a      	b.n	800ccd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cbfa:	4b66      	ldr	r3, [pc, #408]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	061b      	lsls	r3, r3, #24
 800cc08:	4962      	ldr	r1, [pc, #392]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cc0e:	e05f      	b.n	800ccd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	69db      	ldr	r3, [r3, #28]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d042      	beq.n	800cc9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cc18:	4b5e      	ldr	r3, [pc, #376]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a5d      	ldr	r2, [pc, #372]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cc1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc24:	f7f5 fb4e 	bl	80022c4 <HAL_GetTick>
 800cc28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cc2a:	e008      	b.n	800cc3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cc2c:	f7f5 fb4a 	bl	80022c4 <HAL_GetTick>
 800cc30:	4602      	mov	r2, r0
 800cc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc34:	1ad3      	subs	r3, r2, r3
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	d901      	bls.n	800cc3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	e280      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cc3e:	4b55      	ldr	r3, [pc, #340]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0f0      	beq.n	800cc2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cc4a:	f7f5 fb6b 	bl	8002324 <HAL_GetREVID>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d817      	bhi.n	800cc88 <HAL_RCC_OscConfig+0x3ec>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a1b      	ldr	r3, [r3, #32]
 800cc5c:	2b20      	cmp	r3, #32
 800cc5e:	d108      	bne.n	800cc72 <HAL_RCC_OscConfig+0x3d6>
 800cc60:	4b4c      	ldr	r3, [pc, #304]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cc68:	4a4a      	ldr	r2, [pc, #296]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cc6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cc6e:	6053      	str	r3, [r2, #4]
 800cc70:	e02e      	b.n	800ccd0 <HAL_RCC_OscConfig+0x434>
 800cc72:	4b48      	ldr	r3, [pc, #288]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a1b      	ldr	r3, [r3, #32]
 800cc7e:	069b      	lsls	r3, r3, #26
 800cc80:	4944      	ldr	r1, [pc, #272]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cc82:	4313      	orrs	r3, r2
 800cc84:	604b      	str	r3, [r1, #4]
 800cc86:	e023      	b.n	800ccd0 <HAL_RCC_OscConfig+0x434>
 800cc88:	4b42      	ldr	r3, [pc, #264]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a1b      	ldr	r3, [r3, #32]
 800cc94:	061b      	lsls	r3, r3, #24
 800cc96:	493f      	ldr	r1, [pc, #252]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	60cb      	str	r3, [r1, #12]
 800cc9c:	e018      	b.n	800ccd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cc9e:	4b3d      	ldr	r3, [pc, #244]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a3c      	ldr	r2, [pc, #240]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cca4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccaa:	f7f5 fb0b 	bl	80022c4 <HAL_GetTick>
 800ccae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ccb0:	e008      	b.n	800ccc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ccb2:	f7f5 fb07 	bl	80022c4 <HAL_GetTick>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d901      	bls.n	800ccc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	e23d      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ccc4:	4b33      	ldr	r3, [pc, #204]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1f0      	bne.n	800ccb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f003 0308 	and.w	r3, r3, #8
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d036      	beq.n	800cd4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	695b      	ldr	r3, [r3, #20]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d019      	beq.n	800cd18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cce4:	4b2b      	ldr	r3, [pc, #172]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cce8:	4a2a      	ldr	r2, [pc, #168]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800ccea:	f043 0301 	orr.w	r3, r3, #1
 800ccee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccf0:	f7f5 fae8 	bl	80022c4 <HAL_GetTick>
 800ccf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ccf6:	e008      	b.n	800cd0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ccf8:	f7f5 fae4 	bl	80022c4 <HAL_GetTick>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	d901      	bls.n	800cd0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cd06:	2303      	movs	r3, #3
 800cd08:	e21a      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cd0a:	4b22      	ldr	r3, [pc, #136]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cd0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd0e:	f003 0302 	and.w	r3, r3, #2
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d0f0      	beq.n	800ccf8 <HAL_RCC_OscConfig+0x45c>
 800cd16:	e018      	b.n	800cd4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cd18:	4b1e      	ldr	r3, [pc, #120]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cd1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd1c:	4a1d      	ldr	r2, [pc, #116]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cd1e:	f023 0301 	bic.w	r3, r3, #1
 800cd22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd24:	f7f5 face 	bl	80022c4 <HAL_GetTick>
 800cd28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cd2a:	e008      	b.n	800cd3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cd2c:	f7f5 faca 	bl	80022c4 <HAL_GetTick>
 800cd30:	4602      	mov	r2, r0
 800cd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd34:	1ad3      	subs	r3, r2, r3
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d901      	bls.n	800cd3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	e200      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cd3e:	4b15      	ldr	r3, [pc, #84]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cd40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd42:	f003 0302 	and.w	r3, r3, #2
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1f0      	bne.n	800cd2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 0320 	and.w	r3, r3, #32
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d039      	beq.n	800cdca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d01c      	beq.n	800cd98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cd5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4a0c      	ldr	r2, [pc, #48]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cd64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cd68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cd6a:	f7f5 faab 	bl	80022c4 <HAL_GetTick>
 800cd6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cd70:	e008      	b.n	800cd84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd72:	f7f5 faa7 	bl	80022c4 <HAL_GetTick>
 800cd76:	4602      	mov	r2, r0
 800cd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d901      	bls.n	800cd84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800cd80:	2303      	movs	r3, #3
 800cd82:	e1dd      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cd84:	4b03      	ldr	r3, [pc, #12]	@ (800cd94 <HAL_RCC_OscConfig+0x4f8>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d0f0      	beq.n	800cd72 <HAL_RCC_OscConfig+0x4d6>
 800cd90:	e01b      	b.n	800cdca <HAL_RCC_OscConfig+0x52e>
 800cd92:	bf00      	nop
 800cd94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cd98:	4b9b      	ldr	r3, [pc, #620]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a9a      	ldr	r2, [pc, #616]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cd9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cda2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cda4:	f7f5 fa8e 	bl	80022c4 <HAL_GetTick>
 800cda8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cdaa:	e008      	b.n	800cdbe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cdac:	f7f5 fa8a 	bl	80022c4 <HAL_GetTick>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	d901      	bls.n	800cdbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	e1c0      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cdbe:	4b92      	ldr	r3, [pc, #584]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1f0      	bne.n	800cdac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 0304 	and.w	r3, r3, #4
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f000 8081 	beq.w	800ceda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cdd8:	4b8c      	ldr	r3, [pc, #560]	@ (800d00c <HAL_RCC_OscConfig+0x770>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a8b      	ldr	r2, [pc, #556]	@ (800d00c <HAL_RCC_OscConfig+0x770>)
 800cdde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cde2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cde4:	f7f5 fa6e 	bl	80022c4 <HAL_GetTick>
 800cde8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cdea:	e008      	b.n	800cdfe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdec:	f7f5 fa6a 	bl	80022c4 <HAL_GetTick>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf4:	1ad3      	subs	r3, r2, r3
 800cdf6:	2b64      	cmp	r3, #100	@ 0x64
 800cdf8:	d901      	bls.n	800cdfe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800cdfa:	2303      	movs	r3, #3
 800cdfc:	e1a0      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cdfe:	4b83      	ldr	r3, [pc, #524]	@ (800d00c <HAL_RCC_OscConfig+0x770>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d0f0      	beq.n	800cdec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d106      	bne.n	800ce20 <HAL_RCC_OscConfig+0x584>
 800ce12:	4b7d      	ldr	r3, [pc, #500]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce16:	4a7c      	ldr	r2, [pc, #496]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce18:	f043 0301 	orr.w	r3, r3, #1
 800ce1c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce1e:	e02d      	b.n	800ce7c <HAL_RCC_OscConfig+0x5e0>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10c      	bne.n	800ce42 <HAL_RCC_OscConfig+0x5a6>
 800ce28:	4b77      	ldr	r3, [pc, #476]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce2c:	4a76      	ldr	r2, [pc, #472]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce2e:	f023 0301 	bic.w	r3, r3, #1
 800ce32:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce34:	4b74      	ldr	r3, [pc, #464]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce38:	4a73      	ldr	r2, [pc, #460]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce3a:	f023 0304 	bic.w	r3, r3, #4
 800ce3e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce40:	e01c      	b.n	800ce7c <HAL_RCC_OscConfig+0x5e0>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	2b05      	cmp	r3, #5
 800ce48:	d10c      	bne.n	800ce64 <HAL_RCC_OscConfig+0x5c8>
 800ce4a:	4b6f      	ldr	r3, [pc, #444]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce4e:	4a6e      	ldr	r2, [pc, #440]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce50:	f043 0304 	orr.w	r3, r3, #4
 800ce54:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce56:	4b6c      	ldr	r3, [pc, #432]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce5a:	4a6b      	ldr	r2, [pc, #428]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce5c:	f043 0301 	orr.w	r3, r3, #1
 800ce60:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce62:	e00b      	b.n	800ce7c <HAL_RCC_OscConfig+0x5e0>
 800ce64:	4b68      	ldr	r3, [pc, #416]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce68:	4a67      	ldr	r2, [pc, #412]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce6a:	f023 0301 	bic.w	r3, r3, #1
 800ce6e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce70:	4b65      	ldr	r3, [pc, #404]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce74:	4a64      	ldr	r2, [pc, #400]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ce76:	f023 0304 	bic.w	r3, r3, #4
 800ce7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d015      	beq.n	800ceb0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce84:	f7f5 fa1e 	bl	80022c4 <HAL_GetTick>
 800ce88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce8a:	e00a      	b.n	800cea2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce8c:	f7f5 fa1a 	bl	80022c4 <HAL_GetTick>
 800ce90:	4602      	mov	r2, r0
 800ce92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d901      	bls.n	800cea2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	e14e      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cea2:	4b59      	ldr	r3, [pc, #356]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cea6:	f003 0302 	and.w	r3, r3, #2
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d0ee      	beq.n	800ce8c <HAL_RCC_OscConfig+0x5f0>
 800ceae:	e014      	b.n	800ceda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceb0:	f7f5 fa08 	bl	80022c4 <HAL_GetTick>
 800ceb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ceb6:	e00a      	b.n	800cece <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ceb8:	f7f5 fa04 	bl	80022c4 <HAL_GetTick>
 800cebc:	4602      	mov	r2, r0
 800cebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec0:	1ad3      	subs	r3, r2, r3
 800cec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d901      	bls.n	800cece <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e138      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cece:	4b4e      	ldr	r3, [pc, #312]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800ced0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ced2:	f003 0302 	and.w	r3, r3, #2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1ee      	bne.n	800ceb8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 812d 	beq.w	800d13e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cee4:	4b48      	ldr	r3, [pc, #288]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cee6:	691b      	ldr	r3, [r3, #16]
 800cee8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ceec:	2b18      	cmp	r3, #24
 800ceee:	f000 80bd 	beq.w	800d06c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	f040 809e 	bne.w	800d038 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cefc:	4b42      	ldr	r3, [pc, #264]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a41      	ldr	r2, [pc, #260]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cf02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cf06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf08:	f7f5 f9dc 	bl	80022c4 <HAL_GetTick>
 800cf0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf0e:	e008      	b.n	800cf22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf10:	f7f5 f9d8 	bl	80022c4 <HAL_GetTick>
 800cf14:	4602      	mov	r2, r0
 800cf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf18:	1ad3      	subs	r3, r2, r3
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	d901      	bls.n	800cf22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	e10e      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf22:	4b39      	ldr	r3, [pc, #228]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d1f0      	bne.n	800cf10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf2e:	4b36      	ldr	r3, [pc, #216]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cf30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf32:	4b37      	ldr	r3, [pc, #220]	@ (800d010 <HAL_RCC_OscConfig+0x774>)
 800cf34:	4013      	ands	r3, r2
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cf3e:	0112      	lsls	r2, r2, #4
 800cf40:	430a      	orrs	r2, r1
 800cf42:	4931      	ldr	r1, [pc, #196]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cf44:	4313      	orrs	r3, r2
 800cf46:	628b      	str	r3, [r1, #40]	@ 0x28
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf56:	3b01      	subs	r3, #1
 800cf58:	025b      	lsls	r3, r3, #9
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	431a      	orrs	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf62:	3b01      	subs	r3, #1
 800cf64:	041b      	lsls	r3, r3, #16
 800cf66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cf6a:	431a      	orrs	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf70:	3b01      	subs	r3, #1
 800cf72:	061b      	lsls	r3, r3, #24
 800cf74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cf78:	4923      	ldr	r1, [pc, #140]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800cf7e:	4b22      	ldr	r3, [pc, #136]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cf80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf82:	4a21      	ldr	r2, [pc, #132]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cf84:	f023 0301 	bic.w	r3, r3, #1
 800cf88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cf8a:	4b1f      	ldr	r3, [pc, #124]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cf8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf8e:	4b21      	ldr	r3, [pc, #132]	@ (800d014 <HAL_RCC_OscConfig+0x778>)
 800cf90:	4013      	ands	r3, r2
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cf96:	00d2      	lsls	r2, r2, #3
 800cf98:	491b      	ldr	r1, [pc, #108]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cf9e:	4b1a      	ldr	r3, [pc, #104]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa2:	f023 020c 	bic.w	r2, r3, #12
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfaa:	4917      	ldr	r1, [pc, #92]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfac:	4313      	orrs	r3, r2
 800cfae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800cfb0:	4b15      	ldr	r3, [pc, #84]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb4:	f023 0202 	bic.w	r2, r3, #2
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfbc:	4912      	ldr	r1, [pc, #72]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cfc2:	4b11      	ldr	r3, [pc, #68]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc6:	4a10      	ldr	r2, [pc, #64]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cfcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfce:	4b0e      	ldr	r3, [pc, #56]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfd2:	4a0d      	ldr	r2, [pc, #52]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cfd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cfda:	4b0b      	ldr	r3, [pc, #44]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfde:	4a0a      	ldr	r2, [pc, #40]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cfe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800cfe6:	4b08      	ldr	r3, [pc, #32]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfea:	4a07      	ldr	r2, [pc, #28]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cfec:	f043 0301 	orr.w	r3, r3, #1
 800cff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cff2:	4b05      	ldr	r3, [pc, #20]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a04      	ldr	r2, [pc, #16]	@ (800d008 <HAL_RCC_OscConfig+0x76c>)
 800cff8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cffe:	f7f5 f961 	bl	80022c4 <HAL_GetTick>
 800d002:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d004:	e011      	b.n	800d02a <HAL_RCC_OscConfig+0x78e>
 800d006:	bf00      	nop
 800d008:	58024400 	.word	0x58024400
 800d00c:	58024800 	.word	0x58024800
 800d010:	fffffc0c 	.word	0xfffffc0c
 800d014:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d018:	f7f5 f954 	bl	80022c4 <HAL_GetTick>
 800d01c:	4602      	mov	r2, r0
 800d01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	2b02      	cmp	r3, #2
 800d024:	d901      	bls.n	800d02a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d026:	2303      	movs	r3, #3
 800d028:	e08a      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d02a:	4b47      	ldr	r3, [pc, #284]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d032:	2b00      	cmp	r3, #0
 800d034:	d0f0      	beq.n	800d018 <HAL_RCC_OscConfig+0x77c>
 800d036:	e082      	b.n	800d13e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d038:	4b43      	ldr	r3, [pc, #268]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a42      	ldr	r2, [pc, #264]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d03e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d044:	f7f5 f93e 	bl	80022c4 <HAL_GetTick>
 800d048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d04a:	e008      	b.n	800d05e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d04c:	f7f5 f93a 	bl	80022c4 <HAL_GetTick>
 800d050:	4602      	mov	r2, r0
 800d052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	2b02      	cmp	r3, #2
 800d058:	d901      	bls.n	800d05e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d05a:	2303      	movs	r3, #3
 800d05c:	e070      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d05e:	4b3a      	ldr	r3, [pc, #232]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1f0      	bne.n	800d04c <HAL_RCC_OscConfig+0x7b0>
 800d06a:	e068      	b.n	800d13e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d06c:	4b36      	ldr	r3, [pc, #216]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d070:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d072:	4b35      	ldr	r3, [pc, #212]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d076:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d031      	beq.n	800d0e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	f003 0203 	and.w	r2, r3, #3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d12a      	bne.n	800d0e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	091b      	lsrs	r3, r3, #4
 800d092:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d122      	bne.n	800d0e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d11a      	bne.n	800d0e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	0a5b      	lsrs	r3, r3, #9
 800d0b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d111      	bne.n	800d0e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	0c1b      	lsrs	r3, r3, #16
 800d0c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d108      	bne.n	800d0e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	0e1b      	lsrs	r3, r3, #24
 800d0d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d001      	beq.n	800d0e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e02b      	b.n	800d140 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d0e8:	4b17      	ldr	r3, [pc, #92]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d0ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0ec:	08db      	lsrs	r3, r3, #3
 800d0ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0f8:	693a      	ldr	r2, [r7, #16]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d01f      	beq.n	800d13e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d0fe:	4b12      	ldr	r3, [pc, #72]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d102:	4a11      	ldr	r2, [pc, #68]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d104:	f023 0301 	bic.w	r3, r3, #1
 800d108:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d10a:	f7f5 f8db 	bl	80022c4 <HAL_GetTick>
 800d10e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d110:	bf00      	nop
 800d112:	f7f5 f8d7 	bl	80022c4 <HAL_GetTick>
 800d116:	4602      	mov	r2, r0
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d0f9      	beq.n	800d112 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d11e:	4b0a      	ldr	r3, [pc, #40]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d122:	4b0a      	ldr	r3, [pc, #40]	@ (800d14c <HAL_RCC_OscConfig+0x8b0>)
 800d124:	4013      	ands	r3, r2
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d12a:	00d2      	lsls	r2, r2, #3
 800d12c:	4906      	ldr	r1, [pc, #24]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d12e:	4313      	orrs	r3, r2
 800d130:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d132:	4b05      	ldr	r3, [pc, #20]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d136:	4a04      	ldr	r2, [pc, #16]	@ (800d148 <HAL_RCC_OscConfig+0x8ac>)
 800d138:	f043 0301 	orr.w	r3, r3, #1
 800d13c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3730      	adds	r7, #48	@ 0x30
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	58024400 	.word	0x58024400
 800d14c:	ffff0007 	.word	0xffff0007

0800d150 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d101      	bne.n	800d164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	e19c      	b.n	800d49e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d164:	4b8a      	ldr	r3, [pc, #552]	@ (800d390 <HAL_RCC_ClockConfig+0x240>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f003 030f 	and.w	r3, r3, #15
 800d16c:	683a      	ldr	r2, [r7, #0]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d910      	bls.n	800d194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d172:	4b87      	ldr	r3, [pc, #540]	@ (800d390 <HAL_RCC_ClockConfig+0x240>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f023 020f 	bic.w	r2, r3, #15
 800d17a:	4985      	ldr	r1, [pc, #532]	@ (800d390 <HAL_RCC_ClockConfig+0x240>)
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	4313      	orrs	r3, r2
 800d180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d182:	4b83      	ldr	r3, [pc, #524]	@ (800d390 <HAL_RCC_ClockConfig+0x240>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f003 030f 	and.w	r3, r3, #15
 800d18a:	683a      	ldr	r2, [r7, #0]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d001      	beq.n	800d194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	e184      	b.n	800d49e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 0304 	and.w	r3, r3, #4
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d010      	beq.n	800d1c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	691a      	ldr	r2, [r3, #16]
 800d1a4:	4b7b      	ldr	r3, [pc, #492]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d1a6:	699b      	ldr	r3, [r3, #24]
 800d1a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d908      	bls.n	800d1c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d1b0:	4b78      	ldr	r3, [pc, #480]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d1b2:	699b      	ldr	r3, [r3, #24]
 800d1b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	4975      	ldr	r1, [pc, #468]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f003 0308 	and.w	r3, r3, #8
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d010      	beq.n	800d1f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	695a      	ldr	r2, [r3, #20]
 800d1d2:	4b70      	ldr	r3, [pc, #448]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d1d4:	69db      	ldr	r3, [r3, #28]
 800d1d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d908      	bls.n	800d1f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d1de:	4b6d      	ldr	r3, [pc, #436]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	695b      	ldr	r3, [r3, #20]
 800d1ea:	496a      	ldr	r1, [pc, #424]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f003 0310 	and.w	r3, r3, #16
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d010      	beq.n	800d21e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	699a      	ldr	r2, [r3, #24]
 800d200:	4b64      	ldr	r3, [pc, #400]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d202:	69db      	ldr	r3, [r3, #28]
 800d204:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d208:	429a      	cmp	r2, r3
 800d20a:	d908      	bls.n	800d21e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d20c:	4b61      	ldr	r3, [pc, #388]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d20e:	69db      	ldr	r3, [r3, #28]
 800d210:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	495e      	ldr	r1, [pc, #376]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d21a:	4313      	orrs	r3, r2
 800d21c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f003 0320 	and.w	r3, r3, #32
 800d226:	2b00      	cmp	r3, #0
 800d228:	d010      	beq.n	800d24c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	69da      	ldr	r2, [r3, #28]
 800d22e:	4b59      	ldr	r3, [pc, #356]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d236:	429a      	cmp	r2, r3
 800d238:	d908      	bls.n	800d24c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d23a:	4b56      	ldr	r3, [pc, #344]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d23c:	6a1b      	ldr	r3, [r3, #32]
 800d23e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	69db      	ldr	r3, [r3, #28]
 800d246:	4953      	ldr	r1, [pc, #332]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d248:	4313      	orrs	r3, r2
 800d24a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 0302 	and.w	r3, r3, #2
 800d254:	2b00      	cmp	r3, #0
 800d256:	d010      	beq.n	800d27a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	68da      	ldr	r2, [r3, #12]
 800d25c:	4b4d      	ldr	r3, [pc, #308]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	f003 030f 	and.w	r3, r3, #15
 800d264:	429a      	cmp	r2, r3
 800d266:	d908      	bls.n	800d27a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d268:	4b4a      	ldr	r3, [pc, #296]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	f023 020f 	bic.w	r2, r3, #15
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	4947      	ldr	r1, [pc, #284]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d276:	4313      	orrs	r3, r2
 800d278:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	2b00      	cmp	r3, #0
 800d284:	d055      	beq.n	800d332 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d286:	4b43      	ldr	r3, [pc, #268]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	4940      	ldr	r1, [pc, #256]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d294:	4313      	orrs	r3, r2
 800d296:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d107      	bne.n	800d2b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d2a0:	4b3c      	ldr	r3, [pc, #240]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d121      	bne.n	800d2f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e0f6      	b.n	800d49e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	2b03      	cmp	r3, #3
 800d2b6:	d107      	bne.n	800d2c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2b8:	4b36      	ldr	r3, [pc, #216]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d115      	bne.n	800d2f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e0ea      	b.n	800d49e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d107      	bne.n	800d2e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d2d0:	4b30      	ldr	r3, [pc, #192]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d109      	bne.n	800d2f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e0de      	b.n	800d49e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d2e0:	4b2c      	ldr	r3, [pc, #176]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f003 0304 	and.w	r3, r3, #4
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d101      	bne.n	800d2f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e0d6      	b.n	800d49e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d2f0:	4b28      	ldr	r3, [pc, #160]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	f023 0207 	bic.w	r2, r3, #7
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	4925      	ldr	r1, [pc, #148]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d2fe:	4313      	orrs	r3, r2
 800d300:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d302:	f7f4 ffdf 	bl	80022c4 <HAL_GetTick>
 800d306:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d308:	e00a      	b.n	800d320 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d30a:	f7f4 ffdb 	bl	80022c4 <HAL_GetTick>
 800d30e:	4602      	mov	r2, r0
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d318:	4293      	cmp	r3, r2
 800d31a:	d901      	bls.n	800d320 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d31c:	2303      	movs	r3, #3
 800d31e:	e0be      	b.n	800d49e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d320:	4b1c      	ldr	r3, [pc, #112]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	00db      	lsls	r3, r3, #3
 800d32e:	429a      	cmp	r2, r3
 800d330:	d1eb      	bne.n	800d30a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f003 0302 	and.w	r3, r3, #2
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d010      	beq.n	800d360 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68da      	ldr	r2, [r3, #12]
 800d342:	4b14      	ldr	r3, [pc, #80]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d344:	699b      	ldr	r3, [r3, #24]
 800d346:	f003 030f 	and.w	r3, r3, #15
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d208      	bcs.n	800d360 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d34e:	4b11      	ldr	r3, [pc, #68]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d350:	699b      	ldr	r3, [r3, #24]
 800d352:	f023 020f 	bic.w	r2, r3, #15
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	490e      	ldr	r1, [pc, #56]	@ (800d394 <HAL_RCC_ClockConfig+0x244>)
 800d35c:	4313      	orrs	r3, r2
 800d35e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d360:	4b0b      	ldr	r3, [pc, #44]	@ (800d390 <HAL_RCC_ClockConfig+0x240>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 030f 	and.w	r3, r3, #15
 800d368:	683a      	ldr	r2, [r7, #0]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d214      	bcs.n	800d398 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d36e:	4b08      	ldr	r3, [pc, #32]	@ (800d390 <HAL_RCC_ClockConfig+0x240>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f023 020f 	bic.w	r2, r3, #15
 800d376:	4906      	ldr	r1, [pc, #24]	@ (800d390 <HAL_RCC_ClockConfig+0x240>)
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	4313      	orrs	r3, r2
 800d37c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d37e:	4b04      	ldr	r3, [pc, #16]	@ (800d390 <HAL_RCC_ClockConfig+0x240>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f003 030f 	and.w	r3, r3, #15
 800d386:	683a      	ldr	r2, [r7, #0]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d005      	beq.n	800d398 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d38c:	2301      	movs	r3, #1
 800d38e:	e086      	b.n	800d49e <HAL_RCC_ClockConfig+0x34e>
 800d390:	52002000 	.word	0x52002000
 800d394:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 0304 	and.w	r3, r3, #4
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d010      	beq.n	800d3c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	691a      	ldr	r2, [r3, #16]
 800d3a8:	4b3f      	ldr	r3, [pc, #252]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d3aa:	699b      	ldr	r3, [r3, #24]
 800d3ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d208      	bcs.n	800d3c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d3b4:	4b3c      	ldr	r3, [pc, #240]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	4939      	ldr	r1, [pc, #228]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f003 0308 	and.w	r3, r3, #8
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d010      	beq.n	800d3f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	695a      	ldr	r2, [r3, #20]
 800d3d6:	4b34      	ldr	r3, [pc, #208]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d3d8:	69db      	ldr	r3, [r3, #28]
 800d3da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d208      	bcs.n	800d3f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d3e2:	4b31      	ldr	r3, [pc, #196]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d3e4:	69db      	ldr	r3, [r3, #28]
 800d3e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	695b      	ldr	r3, [r3, #20]
 800d3ee:	492e      	ldr	r1, [pc, #184]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 0310 	and.w	r3, r3, #16
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d010      	beq.n	800d422 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	699a      	ldr	r2, [r3, #24]
 800d404:	4b28      	ldr	r3, [pc, #160]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d406:	69db      	ldr	r3, [r3, #28]
 800d408:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d208      	bcs.n	800d422 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d410:	4b25      	ldr	r3, [pc, #148]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d412:	69db      	ldr	r3, [r3, #28]
 800d414:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	699b      	ldr	r3, [r3, #24]
 800d41c:	4922      	ldr	r1, [pc, #136]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d41e:	4313      	orrs	r3, r2
 800d420:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f003 0320 	and.w	r3, r3, #32
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d010      	beq.n	800d450 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	69da      	ldr	r2, [r3, #28]
 800d432:	4b1d      	ldr	r3, [pc, #116]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d208      	bcs.n	800d450 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d43e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	69db      	ldr	r3, [r3, #28]
 800d44a:	4917      	ldr	r1, [pc, #92]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d44c:	4313      	orrs	r3, r2
 800d44e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d450:	f000 f834 	bl	800d4bc <HAL_RCC_GetSysClockFreq>
 800d454:	4602      	mov	r2, r0
 800d456:	4b14      	ldr	r3, [pc, #80]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	0a1b      	lsrs	r3, r3, #8
 800d45c:	f003 030f 	and.w	r3, r3, #15
 800d460:	4912      	ldr	r1, [pc, #72]	@ (800d4ac <HAL_RCC_ClockConfig+0x35c>)
 800d462:	5ccb      	ldrb	r3, [r1, r3]
 800d464:	f003 031f 	and.w	r3, r3, #31
 800d468:	fa22 f303 	lsr.w	r3, r2, r3
 800d46c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d46e:	4b0e      	ldr	r3, [pc, #56]	@ (800d4a8 <HAL_RCC_ClockConfig+0x358>)
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	f003 030f 	and.w	r3, r3, #15
 800d476:	4a0d      	ldr	r2, [pc, #52]	@ (800d4ac <HAL_RCC_ClockConfig+0x35c>)
 800d478:	5cd3      	ldrb	r3, [r2, r3]
 800d47a:	f003 031f 	and.w	r3, r3, #31
 800d47e:	693a      	ldr	r2, [r7, #16]
 800d480:	fa22 f303 	lsr.w	r3, r2, r3
 800d484:	4a0a      	ldr	r2, [pc, #40]	@ (800d4b0 <HAL_RCC_ClockConfig+0x360>)
 800d486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d488:	4a0a      	ldr	r2, [pc, #40]	@ (800d4b4 <HAL_RCC_ClockConfig+0x364>)
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d48e:	4b0a      	ldr	r3, [pc, #40]	@ (800d4b8 <HAL_RCC_ClockConfig+0x368>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4618      	mov	r0, r3
 800d494:	f7f4 fecc 	bl	8002230 <HAL_InitTick>
 800d498:	4603      	mov	r3, r0
 800d49a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3718      	adds	r7, #24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	58024400 	.word	0x58024400
 800d4ac:	08017768 	.word	0x08017768
 800d4b0:	24000008 	.word	0x24000008
 800d4b4:	24000004 	.word	0x24000004
 800d4b8:	2400000c 	.word	0x2400000c

0800d4bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b089      	sub	sp, #36	@ 0x24
 800d4c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d4c2:	4bb3      	ldr	r3, [pc, #716]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d4ca:	2b18      	cmp	r3, #24
 800d4cc:	f200 8155 	bhi.w	800d77a <HAL_RCC_GetSysClockFreq+0x2be>
 800d4d0:	a201      	add	r2, pc, #4	@ (adr r2, 800d4d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d6:	bf00      	nop
 800d4d8:	0800d53d 	.word	0x0800d53d
 800d4dc:	0800d77b 	.word	0x0800d77b
 800d4e0:	0800d77b 	.word	0x0800d77b
 800d4e4:	0800d77b 	.word	0x0800d77b
 800d4e8:	0800d77b 	.word	0x0800d77b
 800d4ec:	0800d77b 	.word	0x0800d77b
 800d4f0:	0800d77b 	.word	0x0800d77b
 800d4f4:	0800d77b 	.word	0x0800d77b
 800d4f8:	0800d563 	.word	0x0800d563
 800d4fc:	0800d77b 	.word	0x0800d77b
 800d500:	0800d77b 	.word	0x0800d77b
 800d504:	0800d77b 	.word	0x0800d77b
 800d508:	0800d77b 	.word	0x0800d77b
 800d50c:	0800d77b 	.word	0x0800d77b
 800d510:	0800d77b 	.word	0x0800d77b
 800d514:	0800d77b 	.word	0x0800d77b
 800d518:	0800d569 	.word	0x0800d569
 800d51c:	0800d77b 	.word	0x0800d77b
 800d520:	0800d77b 	.word	0x0800d77b
 800d524:	0800d77b 	.word	0x0800d77b
 800d528:	0800d77b 	.word	0x0800d77b
 800d52c:	0800d77b 	.word	0x0800d77b
 800d530:	0800d77b 	.word	0x0800d77b
 800d534:	0800d77b 	.word	0x0800d77b
 800d538:	0800d56f 	.word	0x0800d56f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d53c:	4b94      	ldr	r3, [pc, #592]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f003 0320 	and.w	r3, r3, #32
 800d544:	2b00      	cmp	r3, #0
 800d546:	d009      	beq.n	800d55c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d548:	4b91      	ldr	r3, [pc, #580]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	08db      	lsrs	r3, r3, #3
 800d54e:	f003 0303 	and.w	r3, r3, #3
 800d552:	4a90      	ldr	r2, [pc, #576]	@ (800d794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d554:	fa22 f303 	lsr.w	r3, r2, r3
 800d558:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d55a:	e111      	b.n	800d780 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d55c:	4b8d      	ldr	r3, [pc, #564]	@ (800d794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d55e:	61bb      	str	r3, [r7, #24]
      break;
 800d560:	e10e      	b.n	800d780 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d562:	4b8d      	ldr	r3, [pc, #564]	@ (800d798 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d564:	61bb      	str	r3, [r7, #24]
      break;
 800d566:	e10b      	b.n	800d780 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d568:	4b8c      	ldr	r3, [pc, #560]	@ (800d79c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d56a:	61bb      	str	r3, [r7, #24]
      break;
 800d56c:	e108      	b.n	800d780 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d56e:	4b88      	ldr	r3, [pc, #544]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d572:	f003 0303 	and.w	r3, r3, #3
 800d576:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d578:	4b85      	ldr	r3, [pc, #532]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d57c:	091b      	lsrs	r3, r3, #4
 800d57e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d582:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d584:	4b82      	ldr	r3, [pc, #520]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d58e:	4b80      	ldr	r3, [pc, #512]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d592:	08db      	lsrs	r3, r3, #3
 800d594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	fb02 f303 	mul.w	r3, r2, r3
 800d59e:	ee07 3a90 	vmov	s15, r3
 800d5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f000 80e1 	beq.w	800d774 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	f000 8083 	beq.w	800d6c0 <HAL_RCC_GetSysClockFreq+0x204>
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	f200 80a1 	bhi.w	800d704 <HAL_RCC_GetSysClockFreq+0x248>
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d003      	beq.n	800d5d0 <HAL_RCC_GetSysClockFreq+0x114>
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d056      	beq.n	800d67c <HAL_RCC_GetSysClockFreq+0x1c0>
 800d5ce:	e099      	b.n	800d704 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5d0:	4b6f      	ldr	r3, [pc, #444]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 0320 	and.w	r3, r3, #32
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d02d      	beq.n	800d638 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5dc:	4b6c      	ldr	r3, [pc, #432]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	08db      	lsrs	r3, r3, #3
 800d5e2:	f003 0303 	and.w	r3, r3, #3
 800d5e6:	4a6b      	ldr	r2, [pc, #428]	@ (800d794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d5e8:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	ee07 3a90 	vmov	s15, r3
 800d5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d606:	4b62      	ldr	r3, [pc, #392]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d60e:	ee07 3a90 	vmov	s15, r3
 800d612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d616:	ed97 6a02 	vldr	s12, [r7, #8]
 800d61a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d7a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d61e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d62a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d632:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d636:	e087      	b.n	800d748 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	ee07 3a90 	vmov	s15, r3
 800d63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d642:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d7a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d64a:	4b51      	ldr	r3, [pc, #324]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d64c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d652:	ee07 3a90 	vmov	s15, r3
 800d656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d65a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d65e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d7a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d66a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d676:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d67a:	e065      	b.n	800d748 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	ee07 3a90 	vmov	s15, r3
 800d682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d686:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d7a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d68e:	4b40      	ldr	r3, [pc, #256]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d696:	ee07 3a90 	vmov	s15, r3
 800d69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d69e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d6a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d7a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d6be:	e043      	b.n	800d748 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	ee07 3a90 	vmov	s15, r3
 800d6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d7ac <HAL_RCC_GetSysClockFreq+0x2f0>
 800d6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6d2:	4b2f      	ldr	r3, [pc, #188]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6da:	ee07 3a90 	vmov	s15, r3
 800d6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d6e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d7a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d702:	e021      	b.n	800d748 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	ee07 3a90 	vmov	s15, r3
 800d70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d70e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d7a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d716:	4b1e      	ldr	r3, [pc, #120]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d71e:	ee07 3a90 	vmov	s15, r3
 800d722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d726:	ed97 6a02 	vldr	s12, [r7, #8]
 800d72a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d7a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d746:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d748:	4b11      	ldr	r3, [pc, #68]	@ (800d790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d74a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d74c:	0a5b      	lsrs	r3, r3, #9
 800d74e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d752:	3301      	adds	r3, #1
 800d754:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	ee07 3a90 	vmov	s15, r3
 800d75c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d760:	edd7 6a07 	vldr	s13, [r7, #28]
 800d764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d76c:	ee17 3a90 	vmov	r3, s15
 800d770:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d772:	e005      	b.n	800d780 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d774:	2300      	movs	r3, #0
 800d776:	61bb      	str	r3, [r7, #24]
      break;
 800d778:	e002      	b.n	800d780 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d77a:	4b07      	ldr	r3, [pc, #28]	@ (800d798 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d77c:	61bb      	str	r3, [r7, #24]
      break;
 800d77e:	bf00      	nop
  }

  return sysclockfreq;
 800d780:	69bb      	ldr	r3, [r7, #24]
}
 800d782:	4618      	mov	r0, r3
 800d784:	3724      	adds	r7, #36	@ 0x24
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	58024400 	.word	0x58024400
 800d794:	03d09000 	.word	0x03d09000
 800d798:	003d0900 	.word	0x003d0900
 800d79c:	017d7840 	.word	0x017d7840
 800d7a0:	46000000 	.word	0x46000000
 800d7a4:	4c742400 	.word	0x4c742400
 800d7a8:	4a742400 	.word	0x4a742400
 800d7ac:	4bbebc20 	.word	0x4bbebc20

0800d7b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d7b6:	f7ff fe81 	bl	800d4bc <HAL_RCC_GetSysClockFreq>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	4b10      	ldr	r3, [pc, #64]	@ (800d800 <HAL_RCC_GetHCLKFreq+0x50>)
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	0a1b      	lsrs	r3, r3, #8
 800d7c2:	f003 030f 	and.w	r3, r3, #15
 800d7c6:	490f      	ldr	r1, [pc, #60]	@ (800d804 <HAL_RCC_GetHCLKFreq+0x54>)
 800d7c8:	5ccb      	ldrb	r3, [r1, r3]
 800d7ca:	f003 031f 	and.w	r3, r3, #31
 800d7ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d7d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d7d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d800 <HAL_RCC_GetHCLKFreq+0x50>)
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	f003 030f 	and.w	r3, r3, #15
 800d7dc:	4a09      	ldr	r2, [pc, #36]	@ (800d804 <HAL_RCC_GetHCLKFreq+0x54>)
 800d7de:	5cd3      	ldrb	r3, [r2, r3]
 800d7e0:	f003 031f 	and.w	r3, r3, #31
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ea:	4a07      	ldr	r2, [pc, #28]	@ (800d808 <HAL_RCC_GetHCLKFreq+0x58>)
 800d7ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d7ee:	4a07      	ldr	r2, [pc, #28]	@ (800d80c <HAL_RCC_GetHCLKFreq+0x5c>)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d7f4:	4b04      	ldr	r3, [pc, #16]	@ (800d808 <HAL_RCC_GetHCLKFreq+0x58>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	58024400 	.word	0x58024400
 800d804:	08017768 	.word	0x08017768
 800d808:	24000008 	.word	0x24000008
 800d80c:	24000004 	.word	0x24000004

0800d810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d814:	f7ff ffcc 	bl	800d7b0 <HAL_RCC_GetHCLKFreq>
 800d818:	4602      	mov	r2, r0
 800d81a:	4b06      	ldr	r3, [pc, #24]	@ (800d834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d81c:	69db      	ldr	r3, [r3, #28]
 800d81e:	091b      	lsrs	r3, r3, #4
 800d820:	f003 0307 	and.w	r3, r3, #7
 800d824:	4904      	ldr	r1, [pc, #16]	@ (800d838 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d826:	5ccb      	ldrb	r3, [r1, r3]
 800d828:	f003 031f 	and.w	r3, r3, #31
 800d82c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d830:	4618      	mov	r0, r3
 800d832:	bd80      	pop	{r7, pc}
 800d834:	58024400 	.word	0x58024400
 800d838:	08017768 	.word	0x08017768

0800d83c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d840:	f7ff ffb6 	bl	800d7b0 <HAL_RCC_GetHCLKFreq>
 800d844:	4602      	mov	r2, r0
 800d846:	4b06      	ldr	r3, [pc, #24]	@ (800d860 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d848:	69db      	ldr	r3, [r3, #28]
 800d84a:	0a1b      	lsrs	r3, r3, #8
 800d84c:	f003 0307 	and.w	r3, r3, #7
 800d850:	4904      	ldr	r1, [pc, #16]	@ (800d864 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d852:	5ccb      	ldrb	r3, [r1, r3]
 800d854:	f003 031f 	and.w	r3, r3, #31
 800d858:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	58024400 	.word	0x58024400
 800d864:	08017768 	.word	0x08017768

0800d868 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d86c:	b0ca      	sub	sp, #296	@ 0x128
 800d86e:	af00      	add	r7, sp, #0
 800d870:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d874:	2300      	movs	r3, #0
 800d876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d87a:	2300      	movs	r3, #0
 800d87c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d888:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d88c:	2500      	movs	r5, #0
 800d88e:	ea54 0305 	orrs.w	r3, r4, r5
 800d892:	d049      	beq.n	800d928 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d898:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d89a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d89e:	d02f      	beq.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d8a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d8a4:	d828      	bhi.n	800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d8a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d8aa:	d01a      	beq.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d8ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d8b0:	d822      	bhi.n	800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d003      	beq.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d8b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d8ba:	d007      	beq.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d8bc:	e01c      	b.n	800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8be:	4bb8      	ldr	r3, [pc, #736]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c2:	4ab7      	ldr	r2, [pc, #732]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d8ca:	e01a      	b.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8d0:	3308      	adds	r3, #8
 800d8d2:	2102      	movs	r1, #2
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f002 fb61 	bl	800ff9c <RCCEx_PLL2_Config>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d8e0:	e00f      	b.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8e6:	3328      	adds	r3, #40	@ 0x28
 800d8e8:	2102      	movs	r1, #2
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f002 fc08 	bl	8010100 <RCCEx_PLL3_Config>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d8f6:	e004      	b.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d8fe:	e000      	b.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d900:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10a      	bne.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d90a:	4ba5      	ldr	r3, [pc, #660]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d90c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d90e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d918:	4aa1      	ldr	r2, [pc, #644]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d91a:	430b      	orrs	r3, r1
 800d91c:	6513      	str	r3, [r2, #80]	@ 0x50
 800d91e:	e003      	b.n	800d928 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d930:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d934:	f04f 0900 	mov.w	r9, #0
 800d938:	ea58 0309 	orrs.w	r3, r8, r9
 800d93c:	d047      	beq.n	800d9ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d93e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d944:	2b04      	cmp	r3, #4
 800d946:	d82a      	bhi.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d948:	a201      	add	r2, pc, #4	@ (adr r2, 800d950 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94e:	bf00      	nop
 800d950:	0800d965 	.word	0x0800d965
 800d954:	0800d973 	.word	0x0800d973
 800d958:	0800d989 	.word	0x0800d989
 800d95c:	0800d9a7 	.word	0x0800d9a7
 800d960:	0800d9a7 	.word	0x0800d9a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d964:	4b8e      	ldr	r3, [pc, #568]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d968:	4a8d      	ldr	r2, [pc, #564]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d96a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d96e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d970:	e01a      	b.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d976:	3308      	adds	r3, #8
 800d978:	2100      	movs	r1, #0
 800d97a:	4618      	mov	r0, r3
 800d97c:	f002 fb0e 	bl	800ff9c <RCCEx_PLL2_Config>
 800d980:	4603      	mov	r3, r0
 800d982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d986:	e00f      	b.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d98c:	3328      	adds	r3, #40	@ 0x28
 800d98e:	2100      	movs	r1, #0
 800d990:	4618      	mov	r0, r3
 800d992:	f002 fbb5 	bl	8010100 <RCCEx_PLL3_Config>
 800d996:	4603      	mov	r3, r0
 800d998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d99c:	e004      	b.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9a4:	e000      	b.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d9a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d10a      	bne.n	800d9c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d9b0:	4b7b      	ldr	r3, [pc, #492]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9b4:	f023 0107 	bic.w	r1, r3, #7
 800d9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9be:	4a78      	ldr	r2, [pc, #480]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9c0:	430b      	orrs	r3, r1
 800d9c2:	6513      	str	r3, [r2, #80]	@ 0x50
 800d9c4:	e003      	b.n	800d9ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800d9da:	f04f 0b00 	mov.w	fp, #0
 800d9de:	ea5a 030b 	orrs.w	r3, sl, fp
 800d9e2:	d04c      	beq.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d9ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9ee:	d030      	beq.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d9f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9f4:	d829      	bhi.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d9f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d9f8:	d02d      	beq.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d9fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800d9fc:	d825      	bhi.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d9fe:	2b80      	cmp	r3, #128	@ 0x80
 800da00:	d018      	beq.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800da02:	2b80      	cmp	r3, #128	@ 0x80
 800da04:	d821      	bhi.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800da06:	2b00      	cmp	r3, #0
 800da08:	d002      	beq.n	800da10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800da0a:	2b40      	cmp	r3, #64	@ 0x40
 800da0c:	d007      	beq.n	800da1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800da0e:	e01c      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da10:	4b63      	ldr	r3, [pc, #396]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da14:	4a62      	ldr	r2, [pc, #392]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800da1c:	e01c      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da22:	3308      	adds	r3, #8
 800da24:	2100      	movs	r1, #0
 800da26:	4618      	mov	r0, r3
 800da28:	f002 fab8 	bl	800ff9c <RCCEx_PLL2_Config>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800da32:	e011      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da38:	3328      	adds	r3, #40	@ 0x28
 800da3a:	2100      	movs	r1, #0
 800da3c:	4618      	mov	r0, r3
 800da3e:	f002 fb5f 	bl	8010100 <RCCEx_PLL3_Config>
 800da42:	4603      	mov	r3, r0
 800da44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800da48:	e006      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800da50:	e002      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800da52:	bf00      	nop
 800da54:	e000      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800da56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10a      	bne.n	800da76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800da60:	4b4f      	ldr	r3, [pc, #316]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da64:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800da68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da6e:	4a4c      	ldr	r2, [pc, #304]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da70:	430b      	orrs	r3, r1
 800da72:	6513      	str	r3, [r2, #80]	@ 0x50
 800da74:	e003      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800da7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800da8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800da8e:	2300      	movs	r3, #0
 800da90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800da94:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800da98:	460b      	mov	r3, r1
 800da9a:	4313      	orrs	r3, r2
 800da9c:	d053      	beq.n	800db46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800da9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800daa6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800daaa:	d035      	beq.n	800db18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800daac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dab0:	d82e      	bhi.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dab2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dab6:	d031      	beq.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800dab8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dabc:	d828      	bhi.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dabe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dac2:	d01a      	beq.n	800dafa <HAL_RCCEx_PeriphCLKConfig+0x292>
 800dac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dac8:	d822      	bhi.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d003      	beq.n	800dad6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800dace:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dad2:	d007      	beq.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800dad4:	e01c      	b.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dad6:	4b32      	ldr	r3, [pc, #200]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dada:	4a31      	ldr	r2, [pc, #196]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dadc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dae0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dae2:	e01c      	b.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dae8:	3308      	adds	r3, #8
 800daea:	2100      	movs	r1, #0
 800daec:	4618      	mov	r0, r3
 800daee:	f002 fa55 	bl	800ff9c <RCCEx_PLL2_Config>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800daf8:	e011      	b.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dafe:	3328      	adds	r3, #40	@ 0x28
 800db00:	2100      	movs	r1, #0
 800db02:	4618      	mov	r0, r3
 800db04:	f002 fafc 	bl	8010100 <RCCEx_PLL3_Config>
 800db08:	4603      	mov	r3, r0
 800db0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800db0e:	e006      	b.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800db10:	2301      	movs	r3, #1
 800db12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db16:	e002      	b.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800db18:	bf00      	nop
 800db1a:	e000      	b.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800db1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db22:	2b00      	cmp	r3, #0
 800db24:	d10b      	bne.n	800db3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800db26:	4b1e      	ldr	r3, [pc, #120]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db2a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800db2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800db36:	4a1a      	ldr	r2, [pc, #104]	@ (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db38:	430b      	orrs	r3, r1
 800db3a:	6593      	str	r3, [r2, #88]	@ 0x58
 800db3c:	e003      	b.n	800db46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800db46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800db52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800db56:	2300      	movs	r3, #0
 800db58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800db5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800db60:	460b      	mov	r3, r1
 800db62:	4313      	orrs	r3, r2
 800db64:	d056      	beq.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800db66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800db6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800db72:	d038      	beq.n	800dbe6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800db74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800db78:	d831      	bhi.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x376>
 800db7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800db7e:	d034      	beq.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0x382>
 800db80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800db84:	d82b      	bhi.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x376>
 800db86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db8a:	d01d      	beq.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800db8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db90:	d825      	bhi.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x376>
 800db92:	2b00      	cmp	r3, #0
 800db94:	d006      	beq.n	800dba4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800db96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db9a:	d00a      	beq.n	800dbb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800db9c:	e01f      	b.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x376>
 800db9e:	bf00      	nop
 800dba0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dba4:	4ba2      	ldr	r3, [pc, #648]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba8:	4aa1      	ldr	r2, [pc, #644]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dbae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dbb0:	e01c      	b.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbb6:	3308      	adds	r3, #8
 800dbb8:	2100      	movs	r1, #0
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f002 f9ee 	bl	800ff9c <RCCEx_PLL2_Config>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dbc6:	e011      	b.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbcc:	3328      	adds	r3, #40	@ 0x28
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f002 fa95 	bl	8010100 <RCCEx_PLL3_Config>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dbdc:	e006      	b.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbe4:	e002      	b.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dbe6:	bf00      	nop
 800dbe8:	e000      	b.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dbea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10b      	bne.n	800dc0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dbf4:	4b8e      	ldr	r3, [pc, #568]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbf8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800dbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dc04:	4a8a      	ldr	r2, [pc, #552]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc06:	430b      	orrs	r3, r1
 800dc08:	6593      	str	r3, [r2, #88]	@ 0x58
 800dc0a:	e003      	b.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dc14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800dc20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800dc24:	2300      	movs	r3, #0
 800dc26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dc2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800dc2e:	460b      	mov	r3, r1
 800dc30:	4313      	orrs	r3, r2
 800dc32:	d03a      	beq.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800dc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc3a:	2b30      	cmp	r3, #48	@ 0x30
 800dc3c:	d01f      	beq.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800dc3e:	2b30      	cmp	r3, #48	@ 0x30
 800dc40:	d819      	bhi.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dc42:	2b20      	cmp	r3, #32
 800dc44:	d00c      	beq.n	800dc60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800dc46:	2b20      	cmp	r3, #32
 800dc48:	d815      	bhi.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d019      	beq.n	800dc82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800dc4e:	2b10      	cmp	r3, #16
 800dc50:	d111      	bne.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc52:	4b77      	ldr	r3, [pc, #476]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc56:	4a76      	ldr	r2, [pc, #472]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dc5e:	e011      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc64:	3308      	adds	r3, #8
 800dc66:	2102      	movs	r1, #2
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f002 f997 	bl	800ff9c <RCCEx_PLL2_Config>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dc74:	e006      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc7c:	e002      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800dc7e:	bf00      	nop
 800dc80:	e000      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800dc82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10a      	bne.n	800dca2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800dc8c:	4b68      	ldr	r3, [pc, #416]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc90:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800dc94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc9a:	4a65      	ldr	r2, [pc, #404]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc9c:	430b      	orrs	r3, r1
 800dc9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dca0:	e003      	b.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800dcaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800dcb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dcc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	d051      	beq.n	800dd6e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800dcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dcd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dcd4:	d035      	beq.n	800dd42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800dcd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dcda:	d82e      	bhi.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dcdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dce0:	d031      	beq.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800dce2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dce6:	d828      	bhi.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcec:	d01a      	beq.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dcee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcf2:	d822      	bhi.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d003      	beq.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dcf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcfc:	d007      	beq.n	800dd0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800dcfe:	e01c      	b.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd00:	4b4b      	ldr	r3, [pc, #300]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd04:	4a4a      	ldr	r2, [pc, #296]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd0c:	e01c      	b.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd12:	3308      	adds	r3, #8
 800dd14:	2100      	movs	r1, #0
 800dd16:	4618      	mov	r0, r3
 800dd18:	f002 f940 	bl	800ff9c <RCCEx_PLL2_Config>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd22:	e011      	b.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd28:	3328      	adds	r3, #40	@ 0x28
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f002 f9e7 	bl	8010100 <RCCEx_PLL3_Config>
 800dd32:	4603      	mov	r3, r0
 800dd34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd38:	e006      	b.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd40:	e002      	b.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dd42:	bf00      	nop
 800dd44:	e000      	b.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dd46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10a      	bne.n	800dd66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dd50:	4b37      	ldr	r3, [pc, #220]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd54:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800dd58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd5e:	4a34      	ldr	r2, [pc, #208]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd60:	430b      	orrs	r3, r1
 800dd62:	6513      	str	r3, [r2, #80]	@ 0x50
 800dd64:	e003      	b.n	800dd6e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dd6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd76:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800dd7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dd84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800dd88:	460b      	mov	r3, r1
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	d056      	beq.n	800de3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800dd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dd98:	d033      	beq.n	800de02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800dd9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dd9e:	d82c      	bhi.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dda0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dda4:	d02f      	beq.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800dda6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ddaa:	d826      	bhi.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ddac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ddb0:	d02b      	beq.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ddb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ddb6:	d820      	bhi.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ddb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ddbc:	d012      	beq.n	800dde4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ddbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ddc2:	d81a      	bhi.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d022      	beq.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ddc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddcc:	d115      	bne.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ddce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	2101      	movs	r1, #1
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f002 f8e0 	bl	800ff9c <RCCEx_PLL2_Config>
 800dddc:	4603      	mov	r3, r0
 800ddde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dde2:	e015      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dde4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dde8:	3328      	adds	r3, #40	@ 0x28
 800ddea:	2101      	movs	r1, #1
 800ddec:	4618      	mov	r0, r3
 800ddee:	f002 f987 	bl	8010100 <RCCEx_PLL3_Config>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ddf8:	e00a      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800de00:	e006      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800de02:	bf00      	nop
 800de04:	e004      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800de06:	bf00      	nop
 800de08:	e002      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800de0a:	bf00      	nop
 800de0c:	e000      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800de0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10d      	bne.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800de18:	4b05      	ldr	r3, [pc, #20]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de1c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800de20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de26:	4a02      	ldr	r2, [pc, #8]	@ (800de30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de28:	430b      	orrs	r3, r1
 800de2a:	6513      	str	r3, [r2, #80]	@ 0x50
 800de2c:	e006      	b.n	800de3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800de2e:	bf00      	nop
 800de30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800de3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de44:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800de48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de4c:	2300      	movs	r3, #0
 800de4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800de52:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800de56:	460b      	mov	r3, r1
 800de58:	4313      	orrs	r3, r2
 800de5a:	d055      	beq.n	800df08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800de5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800de64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800de68:	d033      	beq.n	800ded2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800de6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800de6e:	d82c      	bhi.n	800deca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800de70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de74:	d02f      	beq.n	800ded6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800de76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de7a:	d826      	bhi.n	800deca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800de7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800de80:	d02b      	beq.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x672>
 800de82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800de86:	d820      	bhi.n	800deca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800de88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de8c:	d012      	beq.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800de8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de92:	d81a      	bhi.n	800deca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800de94:	2b00      	cmp	r3, #0
 800de96:	d022      	beq.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x676>
 800de98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de9c:	d115      	bne.n	800deca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dea2:	3308      	adds	r3, #8
 800dea4:	2101      	movs	r1, #1
 800dea6:	4618      	mov	r0, r3
 800dea8:	f002 f878 	bl	800ff9c <RCCEx_PLL2_Config>
 800deac:	4603      	mov	r3, r0
 800deae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800deb2:	e015      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800deb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800deb8:	3328      	adds	r3, #40	@ 0x28
 800deba:	2101      	movs	r1, #1
 800debc:	4618      	mov	r0, r3
 800debe:	f002 f91f 	bl	8010100 <RCCEx_PLL3_Config>
 800dec2:	4603      	mov	r3, r0
 800dec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dec8:	e00a      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800deca:	2301      	movs	r3, #1
 800decc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ded0:	e006      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ded2:	bf00      	nop
 800ded4:	e004      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ded6:	bf00      	nop
 800ded8:	e002      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800deda:	bf00      	nop
 800dedc:	e000      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dede:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10b      	bne.n	800df00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800dee8:	4ba3      	ldr	r3, [pc, #652]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800deea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800deec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800def0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800def4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800def8:	4a9f      	ldr	r2, [pc, #636]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800defa:	430b      	orrs	r3, r1
 800defc:	6593      	str	r3, [r2, #88]	@ 0x58
 800defe:	e003      	b.n	800df08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800df08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800df14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df18:	2300      	movs	r3, #0
 800df1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800df1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800df22:	460b      	mov	r3, r1
 800df24:	4313      	orrs	r3, r2
 800df26:	d037      	beq.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800df28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df32:	d00e      	beq.n	800df52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800df34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df38:	d816      	bhi.n	800df68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d018      	beq.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800df3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df42:	d111      	bne.n	800df68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df44:	4b8c      	ldr	r3, [pc, #560]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df48:	4a8b      	ldr	r2, [pc, #556]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800df50:	e00f      	b.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800df52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df56:	3308      	adds	r3, #8
 800df58:	2101      	movs	r1, #1
 800df5a:	4618      	mov	r0, r3
 800df5c:	f002 f81e 	bl	800ff9c <RCCEx_PLL2_Config>
 800df60:	4603      	mov	r3, r0
 800df62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800df66:	e004      	b.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df68:	2301      	movs	r3, #1
 800df6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df6e:	e000      	b.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800df70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df76:	2b00      	cmp	r3, #0
 800df78:	d10a      	bne.n	800df90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800df7a:	4b7f      	ldr	r3, [pc, #508]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df7e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800df82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df88:	4a7b      	ldr	r2, [pc, #492]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df8a:	430b      	orrs	r3, r1
 800df8c:	6513      	str	r3, [r2, #80]	@ 0x50
 800df8e:	e003      	b.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800df98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800dfa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dfae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	d039      	beq.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800dfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfbe:	2b03      	cmp	r3, #3
 800dfc0:	d81c      	bhi.n	800dffc <HAL_RCCEx_PeriphCLKConfig+0x794>
 800dfc2:	a201      	add	r2, pc, #4	@ (adr r2, 800dfc8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800dfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc8:	0800e005 	.word	0x0800e005
 800dfcc:	0800dfd9 	.word	0x0800dfd9
 800dfd0:	0800dfe7 	.word	0x0800dfe7
 800dfd4:	0800e005 	.word	0x0800e005
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfd8:	4b67      	ldr	r3, [pc, #412]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfdc:	4a66      	ldr	r2, [pc, #408]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800dfe4:	e00f      	b.n	800e006 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dfe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfea:	3308      	adds	r3, #8
 800dfec:	2102      	movs	r1, #2
 800dfee:	4618      	mov	r0, r3
 800dff0:	f001 ffd4 	bl	800ff9c <RCCEx_PLL2_Config>
 800dff4:	4603      	mov	r3, r0
 800dff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800dffa:	e004      	b.n	800e006 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dffc:	2301      	movs	r3, #1
 800dffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e002:	e000      	b.n	800e006 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10a      	bne.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e00e:	4b5a      	ldr	r3, [pc, #360]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e012:	f023 0103 	bic.w	r1, r3, #3
 800e016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e01a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e01c:	4a56      	ldr	r2, [pc, #344]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e01e:	430b      	orrs	r3, r1
 800e020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e022:	e003      	b.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e028:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e034:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e03c:	2300      	movs	r3, #0
 800e03e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e042:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e046:	460b      	mov	r3, r1
 800e048:	4313      	orrs	r3, r2
 800e04a:	f000 809f 	beq.w	800e18c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e04e:	4b4b      	ldr	r3, [pc, #300]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a4a      	ldr	r2, [pc, #296]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e058:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e05a:	f7f4 f933 	bl	80022c4 <HAL_GetTick>
 800e05e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e062:	e00b      	b.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e064:	f7f4 f92e 	bl	80022c4 <HAL_GetTick>
 800e068:	4602      	mov	r2, r0
 800e06a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	2b64      	cmp	r3, #100	@ 0x64
 800e072:	d903      	bls.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e074:	2303      	movs	r3, #3
 800e076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e07a:	e005      	b.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e07c:	4b3f      	ldr	r3, [pc, #252]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e084:	2b00      	cmp	r3, #0
 800e086:	d0ed      	beq.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d179      	bne.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e090:	4b39      	ldr	r3, [pc, #228]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e092:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e098:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e09c:	4053      	eors	r3, r2
 800e09e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d015      	beq.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e0a6:	4b34      	ldr	r3, [pc, #208]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e0ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e0b2:	4b31      	ldr	r3, [pc, #196]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0b6:	4a30      	ldr	r2, [pc, #192]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e0bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e0be:	4b2e      	ldr	r3, [pc, #184]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0c2:	4a2d      	ldr	r2, [pc, #180]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e0c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e0ca:	4a2b      	ldr	r2, [pc, #172]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e0d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e0da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0de:	d118      	bne.n	800e112 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0e0:	f7f4 f8f0 	bl	80022c4 <HAL_GetTick>
 800e0e4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e0e8:	e00d      	b.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0ea:	f7f4 f8eb 	bl	80022c4 <HAL_GetTick>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e0f4:	1ad2      	subs	r2, r2, r3
 800e0f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d903      	bls.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e0fe:	2303      	movs	r3, #3
 800e100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800e104:	e005      	b.n	800e112 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e106:	4b1c      	ldr	r3, [pc, #112]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e10a:	f003 0302 	and.w	r3, r3, #2
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d0eb      	beq.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e116:	2b00      	cmp	r3, #0
 800e118:	d129      	bne.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e11e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e12a:	d10e      	bne.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e12c:	4b12      	ldr	r3, [pc, #72]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e138:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e13c:	091a      	lsrs	r2, r3, #4
 800e13e:	4b10      	ldr	r3, [pc, #64]	@ (800e180 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e140:	4013      	ands	r3, r2
 800e142:	4a0d      	ldr	r2, [pc, #52]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e144:	430b      	orrs	r3, r1
 800e146:	6113      	str	r3, [r2, #16]
 800e148:	e005      	b.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e14a:	4b0b      	ldr	r3, [pc, #44]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e14c:	691b      	ldr	r3, [r3, #16]
 800e14e:	4a0a      	ldr	r2, [pc, #40]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e150:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e154:	6113      	str	r3, [r2, #16]
 800e156:	4b08      	ldr	r3, [pc, #32]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e158:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e15e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e166:	4a04      	ldr	r2, [pc, #16]	@ (800e178 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e168:	430b      	orrs	r3, r1
 800e16a:	6713      	str	r3, [r2, #112]	@ 0x70
 800e16c:	e00e      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e16e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e176:	e009      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e178:	58024400 	.word	0x58024400
 800e17c:	58024800 	.word	0x58024800
 800e180:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	f002 0301 	and.w	r3, r2, #1
 800e198:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e19c:	2300      	movs	r3, #0
 800e19e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e1a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	f000 8089 	beq.w	800e2c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1b4:	2b28      	cmp	r3, #40	@ 0x28
 800e1b6:	d86b      	bhi.n	800e290 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e1b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e1c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1be:	bf00      	nop
 800e1c0:	0800e299 	.word	0x0800e299
 800e1c4:	0800e291 	.word	0x0800e291
 800e1c8:	0800e291 	.word	0x0800e291
 800e1cc:	0800e291 	.word	0x0800e291
 800e1d0:	0800e291 	.word	0x0800e291
 800e1d4:	0800e291 	.word	0x0800e291
 800e1d8:	0800e291 	.word	0x0800e291
 800e1dc:	0800e291 	.word	0x0800e291
 800e1e0:	0800e265 	.word	0x0800e265
 800e1e4:	0800e291 	.word	0x0800e291
 800e1e8:	0800e291 	.word	0x0800e291
 800e1ec:	0800e291 	.word	0x0800e291
 800e1f0:	0800e291 	.word	0x0800e291
 800e1f4:	0800e291 	.word	0x0800e291
 800e1f8:	0800e291 	.word	0x0800e291
 800e1fc:	0800e291 	.word	0x0800e291
 800e200:	0800e27b 	.word	0x0800e27b
 800e204:	0800e291 	.word	0x0800e291
 800e208:	0800e291 	.word	0x0800e291
 800e20c:	0800e291 	.word	0x0800e291
 800e210:	0800e291 	.word	0x0800e291
 800e214:	0800e291 	.word	0x0800e291
 800e218:	0800e291 	.word	0x0800e291
 800e21c:	0800e291 	.word	0x0800e291
 800e220:	0800e299 	.word	0x0800e299
 800e224:	0800e291 	.word	0x0800e291
 800e228:	0800e291 	.word	0x0800e291
 800e22c:	0800e291 	.word	0x0800e291
 800e230:	0800e291 	.word	0x0800e291
 800e234:	0800e291 	.word	0x0800e291
 800e238:	0800e291 	.word	0x0800e291
 800e23c:	0800e291 	.word	0x0800e291
 800e240:	0800e299 	.word	0x0800e299
 800e244:	0800e291 	.word	0x0800e291
 800e248:	0800e291 	.word	0x0800e291
 800e24c:	0800e291 	.word	0x0800e291
 800e250:	0800e291 	.word	0x0800e291
 800e254:	0800e291 	.word	0x0800e291
 800e258:	0800e291 	.word	0x0800e291
 800e25c:	0800e291 	.word	0x0800e291
 800e260:	0800e299 	.word	0x0800e299
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e268:	3308      	adds	r3, #8
 800e26a:	2101      	movs	r1, #1
 800e26c:	4618      	mov	r0, r3
 800e26e:	f001 fe95 	bl	800ff9c <RCCEx_PLL2_Config>
 800e272:	4603      	mov	r3, r0
 800e274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e278:	e00f      	b.n	800e29a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e27e:	3328      	adds	r3, #40	@ 0x28
 800e280:	2101      	movs	r1, #1
 800e282:	4618      	mov	r0, r3
 800e284:	f001 ff3c 	bl	8010100 <RCCEx_PLL3_Config>
 800e288:	4603      	mov	r3, r0
 800e28a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e28e:	e004      	b.n	800e29a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e290:	2301      	movs	r3, #1
 800e292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e296:	e000      	b.n	800e29a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e29a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d10a      	bne.n	800e2b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e2a2:	4bbf      	ldr	r3, [pc, #764]	@ (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e2a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e2b0:	4abb      	ldr	r2, [pc, #748]	@ (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e2b2:	430b      	orrs	r3, r1
 800e2b4:	6553      	str	r3, [r2, #84]	@ 0x54
 800e2b6:	e003      	b.n	800e2c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c8:	f002 0302 	and.w	r3, r2, #2
 800e2cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e2d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	d041      	beq.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2e6:	2b05      	cmp	r3, #5
 800e2e8:	d824      	bhi.n	800e334 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e2ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e2f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f0:	0800e33d 	.word	0x0800e33d
 800e2f4:	0800e309 	.word	0x0800e309
 800e2f8:	0800e31f 	.word	0x0800e31f
 800e2fc:	0800e33d 	.word	0x0800e33d
 800e300:	0800e33d 	.word	0x0800e33d
 800e304:	0800e33d 	.word	0x0800e33d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e30c:	3308      	adds	r3, #8
 800e30e:	2101      	movs	r1, #1
 800e310:	4618      	mov	r0, r3
 800e312:	f001 fe43 	bl	800ff9c <RCCEx_PLL2_Config>
 800e316:	4603      	mov	r3, r0
 800e318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e31c:	e00f      	b.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e322:	3328      	adds	r3, #40	@ 0x28
 800e324:	2101      	movs	r1, #1
 800e326:	4618      	mov	r0, r3
 800e328:	f001 feea 	bl	8010100 <RCCEx_PLL3_Config>
 800e32c:	4603      	mov	r3, r0
 800e32e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e332:	e004      	b.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e33a:	e000      	b.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e33e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e342:	2b00      	cmp	r3, #0
 800e344:	d10a      	bne.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e346:	4b96      	ldr	r3, [pc, #600]	@ (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e34a:	f023 0107 	bic.w	r1, r3, #7
 800e34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e352:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e354:	4a92      	ldr	r2, [pc, #584]	@ (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e356:	430b      	orrs	r3, r1
 800e358:	6553      	str	r3, [r2, #84]	@ 0x54
 800e35a:	e003      	b.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e35c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e360:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	f002 0304 	and.w	r3, r2, #4
 800e370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e374:	2300      	movs	r3, #0
 800e376:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e37a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e37e:	460b      	mov	r3, r1
 800e380:	4313      	orrs	r3, r2
 800e382:	d044      	beq.n	800e40e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e38c:	2b05      	cmp	r3, #5
 800e38e:	d825      	bhi.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e390:	a201      	add	r2, pc, #4	@ (adr r2, 800e398 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e396:	bf00      	nop
 800e398:	0800e3e5 	.word	0x0800e3e5
 800e39c:	0800e3b1 	.word	0x0800e3b1
 800e3a0:	0800e3c7 	.word	0x0800e3c7
 800e3a4:	0800e3e5 	.word	0x0800e3e5
 800e3a8:	0800e3e5 	.word	0x0800e3e5
 800e3ac:	0800e3e5 	.word	0x0800e3e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3b4:	3308      	adds	r3, #8
 800e3b6:	2101      	movs	r1, #1
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f001 fdef 	bl	800ff9c <RCCEx_PLL2_Config>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e3c4:	e00f      	b.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3ca:	3328      	adds	r3, #40	@ 0x28
 800e3cc:	2101      	movs	r1, #1
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f001 fe96 	bl	8010100 <RCCEx_PLL3_Config>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e3da:	e004      	b.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e3e2:	e000      	b.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e3e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10b      	bne.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e3ee:	4b6c      	ldr	r3, [pc, #432]	@ (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3f2:	f023 0107 	bic.w	r1, r3, #7
 800e3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e3fe:	4a68      	ldr	r2, [pc, #416]	@ (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e400:	430b      	orrs	r3, r1
 800e402:	6593      	str	r3, [r2, #88]	@ 0x58
 800e404:	e003      	b.n	800e40e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e40a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e416:	f002 0320 	and.w	r3, r2, #32
 800e41a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e41e:	2300      	movs	r3, #0
 800e420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e424:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e428:	460b      	mov	r3, r1
 800e42a:	4313      	orrs	r3, r2
 800e42c:	d055      	beq.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e436:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e43a:	d033      	beq.n	800e4a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e43c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e440:	d82c      	bhi.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e446:	d02f      	beq.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e44c:	d826      	bhi.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e44e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e452:	d02b      	beq.n	800e4ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e454:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e458:	d820      	bhi.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e45a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e45e:	d012      	beq.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e464:	d81a      	bhi.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e466:	2b00      	cmp	r3, #0
 800e468:	d022      	beq.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e46a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e46e:	d115      	bne.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e474:	3308      	adds	r3, #8
 800e476:	2100      	movs	r1, #0
 800e478:	4618      	mov	r0, r3
 800e47a:	f001 fd8f 	bl	800ff9c <RCCEx_PLL2_Config>
 800e47e:	4603      	mov	r3, r0
 800e480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e484:	e015      	b.n	800e4b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e48a:	3328      	adds	r3, #40	@ 0x28
 800e48c:	2102      	movs	r1, #2
 800e48e:	4618      	mov	r0, r3
 800e490:	f001 fe36 	bl	8010100 <RCCEx_PLL3_Config>
 800e494:	4603      	mov	r3, r0
 800e496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e49a:	e00a      	b.n	800e4b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e49c:	2301      	movs	r3, #1
 800e49e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e4a2:	e006      	b.n	800e4b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e4a4:	bf00      	nop
 800e4a6:	e004      	b.n	800e4b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e4a8:	bf00      	nop
 800e4aa:	e002      	b.n	800e4b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e4ac:	bf00      	nop
 800e4ae:	e000      	b.n	800e4b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e4b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10b      	bne.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e4ba:	4b39      	ldr	r3, [pc, #228]	@ (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4ca:	4a35      	ldr	r2, [pc, #212]	@ (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4cc:	430b      	orrs	r3, r1
 800e4ce:	6553      	str	r3, [r2, #84]	@ 0x54
 800e4d0:	e003      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e4e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e4f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	d058      	beq.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e502:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e506:	d033      	beq.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e508:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e50c:	d82c      	bhi.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e50e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e512:	d02f      	beq.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e518:	d826      	bhi.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e51a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e51e:	d02b      	beq.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e520:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e524:	d820      	bhi.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e526:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e52a:	d012      	beq.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e52c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e530:	d81a      	bhi.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e532:	2b00      	cmp	r3, #0
 800e534:	d022      	beq.n	800e57c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e53a:	d115      	bne.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e540:	3308      	adds	r3, #8
 800e542:	2100      	movs	r1, #0
 800e544:	4618      	mov	r0, r3
 800e546:	f001 fd29 	bl	800ff9c <RCCEx_PLL2_Config>
 800e54a:	4603      	mov	r3, r0
 800e54c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e550:	e015      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e556:	3328      	adds	r3, #40	@ 0x28
 800e558:	2102      	movs	r1, #2
 800e55a:	4618      	mov	r0, r3
 800e55c:	f001 fdd0 	bl	8010100 <RCCEx_PLL3_Config>
 800e560:	4603      	mov	r3, r0
 800e562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e566:	e00a      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e56e:	e006      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e570:	bf00      	nop
 800e572:	e004      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e574:	bf00      	nop
 800e576:	e002      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e578:	bf00      	nop
 800e57a:	e000      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e57c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e57e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e582:	2b00      	cmp	r3, #0
 800e584:	d10e      	bne.n	800e5a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e586:	4b06      	ldr	r3, [pc, #24]	@ (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e58a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e592:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e596:	4a02      	ldr	r2, [pc, #8]	@ (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e598:	430b      	orrs	r3, r1
 800e59a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e59c:	e006      	b.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e59e:	bf00      	nop
 800e5a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e5b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e5bc:	2300      	movs	r3, #0
 800e5be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e5c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	d055      	beq.n	800e678 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e5d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e5d8:	d033      	beq.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e5da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e5de:	d82c      	bhi.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e5e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e5e4:	d02f      	beq.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e5e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e5ea:	d826      	bhi.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e5ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e5f0:	d02b      	beq.n	800e64a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e5f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e5f6:	d820      	bhi.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e5f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e5fc:	d012      	beq.n	800e624 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e5fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e602:	d81a      	bhi.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e604:	2b00      	cmp	r3, #0
 800e606:	d022      	beq.n	800e64e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e60c:	d115      	bne.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e612:	3308      	adds	r3, #8
 800e614:	2100      	movs	r1, #0
 800e616:	4618      	mov	r0, r3
 800e618:	f001 fcc0 	bl	800ff9c <RCCEx_PLL2_Config>
 800e61c:	4603      	mov	r3, r0
 800e61e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e622:	e015      	b.n	800e650 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e628:	3328      	adds	r3, #40	@ 0x28
 800e62a:	2102      	movs	r1, #2
 800e62c:	4618      	mov	r0, r3
 800e62e:	f001 fd67 	bl	8010100 <RCCEx_PLL3_Config>
 800e632:	4603      	mov	r3, r0
 800e634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e638:	e00a      	b.n	800e650 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e63a:	2301      	movs	r3, #1
 800e63c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e640:	e006      	b.n	800e650 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e642:	bf00      	nop
 800e644:	e004      	b.n	800e650 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e646:	bf00      	nop
 800e648:	e002      	b.n	800e650 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e64a:	bf00      	nop
 800e64c:	e000      	b.n	800e650 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e64e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e654:	2b00      	cmp	r3, #0
 800e656:	d10b      	bne.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e658:	4ba1      	ldr	r3, [pc, #644]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e65a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e65c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e664:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e668:	4a9d      	ldr	r2, [pc, #628]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e66a:	430b      	orrs	r3, r1
 800e66c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e66e:	e003      	b.n	800e678 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e680:	f002 0308 	and.w	r3, r2, #8
 800e684:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e688:	2300      	movs	r3, #0
 800e68a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e68e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e692:	460b      	mov	r3, r1
 800e694:	4313      	orrs	r3, r2
 800e696:	d01e      	beq.n	800e6d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e69c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6a4:	d10c      	bne.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6aa:	3328      	adds	r3, #40	@ 0x28
 800e6ac:	2102      	movs	r1, #2
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f001 fd26 	bl	8010100 <RCCEx_PLL3_Config>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d002      	beq.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e6c0:	4b87      	ldr	r3, [pc, #540]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6d0:	4a83      	ldr	r2, [pc, #524]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6d2:	430b      	orrs	r3, r1
 800e6d4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6de:	f002 0310 	and.w	r3, r2, #16
 800e6e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e6ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	d01e      	beq.n	800e734 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e6fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e702:	d10c      	bne.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e708:	3328      	adds	r3, #40	@ 0x28
 800e70a:	2102      	movs	r1, #2
 800e70c:	4618      	mov	r0, r3
 800e70e:	f001 fcf7 	bl	8010100 <RCCEx_PLL3_Config>
 800e712:	4603      	mov	r3, r0
 800e714:	2b00      	cmp	r3, #0
 800e716:	d002      	beq.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e718:	2301      	movs	r3, #1
 800e71a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e71e:	4b70      	ldr	r3, [pc, #448]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e722:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e72a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e72e:	4a6c      	ldr	r2, [pc, #432]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e730:	430b      	orrs	r3, r1
 800e732:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e744:	2300      	movs	r3, #0
 800e746:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e74a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e74e:	460b      	mov	r3, r1
 800e750:	4313      	orrs	r3, r2
 800e752:	d03e      	beq.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e75c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e760:	d022      	beq.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e766:	d81b      	bhi.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e76c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e770:	d00b      	beq.n	800e78a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e772:	e015      	b.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e778:	3308      	adds	r3, #8
 800e77a:	2100      	movs	r1, #0
 800e77c:	4618      	mov	r0, r3
 800e77e:	f001 fc0d 	bl	800ff9c <RCCEx_PLL2_Config>
 800e782:	4603      	mov	r3, r0
 800e784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e788:	e00f      	b.n	800e7aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e78e:	3328      	adds	r3, #40	@ 0x28
 800e790:	2102      	movs	r1, #2
 800e792:	4618      	mov	r0, r3
 800e794:	f001 fcb4 	bl	8010100 <RCCEx_PLL3_Config>
 800e798:	4603      	mov	r3, r0
 800e79a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e79e:	e004      	b.n	800e7aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e7a6:	e000      	b.n	800e7aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e7a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10b      	bne.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e7b2:	4b4b      	ldr	r3, [pc, #300]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e7c2:	4a47      	ldr	r2, [pc, #284]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7c4:	430b      	orrs	r3, r1
 800e7c6:	6593      	str	r3, [r2, #88]	@ 0x58
 800e7c8:	e003      	b.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e7de:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e7e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	d03b      	beq.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e7fa:	d01f      	beq.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e7fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e800:	d818      	bhi.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e806:	d003      	beq.n	800e810 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e808:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e80c:	d007      	beq.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e80e:	e011      	b.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e810:	4b33      	ldr	r3, [pc, #204]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e814:	4a32      	ldr	r2, [pc, #200]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e81a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e81c:	e00f      	b.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e822:	3328      	adds	r3, #40	@ 0x28
 800e824:	2101      	movs	r1, #1
 800e826:	4618      	mov	r0, r3
 800e828:	f001 fc6a 	bl	8010100 <RCCEx_PLL3_Config>
 800e82c:	4603      	mov	r3, r0
 800e82e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e832:	e004      	b.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e834:	2301      	movs	r3, #1
 800e836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e83a:	e000      	b.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e83c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e83e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10b      	bne.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e846:	4b26      	ldr	r3, [pc, #152]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e84a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e856:	4a22      	ldr	r2, [pc, #136]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e858:	430b      	orrs	r3, r1
 800e85a:	6553      	str	r3, [r2, #84]	@ 0x54
 800e85c:	e003      	b.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e85e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e872:	673b      	str	r3, [r7, #112]	@ 0x70
 800e874:	2300      	movs	r3, #0
 800e876:	677b      	str	r3, [r7, #116]	@ 0x74
 800e878:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e87c:	460b      	mov	r3, r1
 800e87e:	4313      	orrs	r3, r2
 800e880:	d034      	beq.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d003      	beq.n	800e894 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e88c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e890:	d007      	beq.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e892:	e011      	b.n	800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e894:	4b12      	ldr	r3, [pc, #72]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e898:	4a11      	ldr	r2, [pc, #68]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e89a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e89e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e8a0:	e00e      	b.n	800e8c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8a6:	3308      	adds	r3, #8
 800e8a8:	2102      	movs	r1, #2
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f001 fb76 	bl	800ff9c <RCCEx_PLL2_Config>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e8b6:	e003      	b.n	800e8c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e8be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d10d      	bne.n	800e8e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e8c8:	4b05      	ldr	r3, [pc, #20]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8d6:	4a02      	ldr	r2, [pc, #8]	@ (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8d8:	430b      	orrs	r3, r1
 800e8da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e8dc:	e006      	b.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e8de:	bf00      	nop
 800e8e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e8f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e8fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e902:	460b      	mov	r3, r1
 800e904:	4313      	orrs	r3, r2
 800e906:	d00c      	beq.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e90c:	3328      	adds	r3, #40	@ 0x28
 800e90e:	2102      	movs	r1, #2
 800e910:	4618      	mov	r0, r3
 800e912:	f001 fbf5 	bl	8010100 <RCCEx_PLL3_Config>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d002      	beq.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e91c:	2301      	movs	r3, #1
 800e91e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e92e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e930:	2300      	movs	r3, #0
 800e932:	667b      	str	r3, [r7, #100]	@ 0x64
 800e934:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e938:	460b      	mov	r3, r1
 800e93a:	4313      	orrs	r3, r2
 800e93c:	d038      	beq.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e93e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e946:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e94a:	d018      	beq.n	800e97e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e94c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e950:	d811      	bhi.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e956:	d014      	beq.n	800e982 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e95c:	d80b      	bhi.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d011      	beq.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e966:	d106      	bne.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e968:	4bc3      	ldr	r3, [pc, #780]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e96c:	4ac2      	ldr	r2, [pc, #776]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e96e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e974:	e008      	b.n	800e988 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e97c:	e004      	b.n	800e988 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e97e:	bf00      	nop
 800e980:	e002      	b.n	800e988 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e982:	bf00      	nop
 800e984:	e000      	b.n	800e988 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e986:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10b      	bne.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e990:	4bb9      	ldr	r3, [pc, #740]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e994:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e99c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9a0:	4ab5      	ldr	r2, [pc, #724]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9a2:	430b      	orrs	r3, r1
 800e9a4:	6553      	str	r3, [r2, #84]	@ 0x54
 800e9a6:	e003      	b.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e9bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9be:	2300      	movs	r3, #0
 800e9c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	d009      	beq.n	800e9e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e9cc:	4baa      	ldr	r3, [pc, #680]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9da:	4aa7      	ldr	r2, [pc, #668]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9dc:	430b      	orrs	r3, r1
 800e9de:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e9ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	657b      	str	r3, [r7, #84]	@ 0x54
 800e9f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	d00a      	beq.n	800ea12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e9fc:	4b9e      	ldr	r3, [pc, #632]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9fe:	691b      	ldr	r3, [r3, #16]
 800ea00:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ea04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ea0c:	4a9a      	ldr	r2, [pc, #616]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea0e:	430b      	orrs	r3, r1
 800ea10:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ea12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ea1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea20:	2300      	movs	r3, #0
 800ea22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ea28:	460b      	mov	r3, r1
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	d009      	beq.n	800ea42 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ea2e:	4b92      	ldr	r3, [pc, #584]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea32:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ea36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea3c:	4a8e      	ldr	r2, [pc, #568]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea3e:	430b      	orrs	r3, r1
 800ea40:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ea42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ea4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea50:	2300      	movs	r3, #0
 800ea52:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ea58:	460b      	mov	r3, r1
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	d00e      	beq.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ea5e:	4b86      	ldr	r3, [pc, #536]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea60:	691b      	ldr	r3, [r3, #16]
 800ea62:	4a85      	ldr	r2, [pc, #532]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ea68:	6113      	str	r3, [r2, #16]
 800ea6a:	4b83      	ldr	r3, [pc, #524]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea6c:	6919      	ldr	r1, [r3, #16]
 800ea6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ea76:	4a80      	ldr	r2, [pc, #512]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea78:	430b      	orrs	r3, r1
 800ea7a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ea7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea84:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ea88:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ea92:	460b      	mov	r3, r1
 800ea94:	4313      	orrs	r3, r2
 800ea96:	d009      	beq.n	800eaac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ea98:	4b77      	ldr	r3, [pc, #476]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea9c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800eaa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaa6:	4a74      	ldr	r2, [pc, #464]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eaa8:	430b      	orrs	r3, r1
 800eaaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800eaac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800eab8:	633b      	str	r3, [r7, #48]	@ 0x30
 800eaba:	2300      	movs	r3, #0
 800eabc:	637b      	str	r3, [r7, #52]	@ 0x34
 800eabe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800eac2:	460b      	mov	r3, r1
 800eac4:	4313      	orrs	r3, r2
 800eac6:	d00a      	beq.n	800eade <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800eac8:	4b6b      	ldr	r3, [pc, #428]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eaca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eacc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ead0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ead4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ead8:	4a67      	ldr	r2, [pc, #412]	@ (800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eada:	430b      	orrs	r3, r1
 800eadc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800eade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae6:	2100      	movs	r1, #0
 800eae8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800eaea:	f003 0301 	and.w	r3, r3, #1
 800eaee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eaf0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	d011      	beq.n	800eb1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eafe:	3308      	adds	r3, #8
 800eb00:	2100      	movs	r1, #0
 800eb02:	4618      	mov	r0, r3
 800eb04:	f001 fa4a 	bl	800ff9c <RCCEx_PLL2_Config>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eb0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d003      	beq.n	800eb1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800eb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb26:	2100      	movs	r1, #0
 800eb28:	6239      	str	r1, [r7, #32]
 800eb2a:	f003 0302 	and.w	r3, r3, #2
 800eb2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800eb34:	460b      	mov	r3, r1
 800eb36:	4313      	orrs	r3, r2
 800eb38:	d011      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb3e:	3308      	adds	r3, #8
 800eb40:	2101      	movs	r1, #1
 800eb42:	4618      	mov	r0, r3
 800eb44:	f001 fa2a 	bl	800ff9c <RCCEx_PLL2_Config>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eb4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d003      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800eb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb66:	2100      	movs	r1, #0
 800eb68:	61b9      	str	r1, [r7, #24]
 800eb6a:	f003 0304 	and.w	r3, r3, #4
 800eb6e:	61fb      	str	r3, [r7, #28]
 800eb70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800eb74:	460b      	mov	r3, r1
 800eb76:	4313      	orrs	r3, r2
 800eb78:	d011      	beq.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb7e:	3308      	adds	r3, #8
 800eb80:	2102      	movs	r1, #2
 800eb82:	4618      	mov	r0, r3
 800eb84:	f001 fa0a 	bl	800ff9c <RCCEx_PLL2_Config>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eb8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d003      	beq.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800eb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba6:	2100      	movs	r1, #0
 800eba8:	6139      	str	r1, [r7, #16]
 800ebaa:	f003 0308 	and.w	r3, r3, #8
 800ebae:	617b      	str	r3, [r7, #20]
 800ebb0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4313      	orrs	r3, r2
 800ebb8:	d011      	beq.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ebba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebbe:	3328      	adds	r3, #40	@ 0x28
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f001 fa9c 	bl	8010100 <RCCEx_PLL3_Config>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ebce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d003      	beq.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ebde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe6:	2100      	movs	r1, #0
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	f003 0310 	and.w	r3, r3, #16
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	d011      	beq.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ebfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebfe:	3328      	adds	r3, #40	@ 0x28
 800ec00:	2101      	movs	r1, #1
 800ec02:	4618      	mov	r0, r3
 800ec04:	f001 fa7c 	bl	8010100 <RCCEx_PLL3_Config>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ec0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d003      	beq.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ec1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec26:	2100      	movs	r1, #0
 800ec28:	6039      	str	r1, [r7, #0]
 800ec2a:	f003 0320 	and.w	r3, r3, #32
 800ec2e:	607b      	str	r3, [r7, #4]
 800ec30:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ec34:	460b      	mov	r3, r1
 800ec36:	4313      	orrs	r3, r2
 800ec38:	d011      	beq.n	800ec5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec3e:	3328      	adds	r3, #40	@ 0x28
 800ec40:	2102      	movs	r1, #2
 800ec42:	4618      	mov	r0, r3
 800ec44:	f001 fa5c 	bl	8010100 <RCCEx_PLL3_Config>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ec4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d003      	beq.n	800ec5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800ec5e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d101      	bne.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ec66:	2300      	movs	r3, #0
 800ec68:	e000      	b.n	800ec6c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ec6a:	2301      	movs	r3, #1
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800ec72:	46bd      	mov	sp, r7
 800ec74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec78:	58024400 	.word	0x58024400

0800ec7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b090      	sub	sp, #64	@ 0x40
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ec86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec8a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ec8e:	430b      	orrs	r3, r1
 800ec90:	f040 8094 	bne.w	800edbc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ec94:	4b9e      	ldr	r3, [pc, #632]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec98:	f003 0307 	and.w	r3, r3, #7
 800ec9c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca0:	2b04      	cmp	r3, #4
 800eca2:	f200 8087 	bhi.w	800edb4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800eca6:	a201      	add	r2, pc, #4	@ (adr r2, 800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800eca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecac:	0800ecc1 	.word	0x0800ecc1
 800ecb0:	0800ece9 	.word	0x0800ece9
 800ecb4:	0800ed11 	.word	0x0800ed11
 800ecb8:	0800edad 	.word	0x0800edad
 800ecbc:	0800ed39 	.word	0x0800ed39
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ecc0:	4b93      	ldr	r3, [pc, #588]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ecc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eccc:	d108      	bne.n	800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ecce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f001 f810 	bl	800fcf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecdc:	f000 bd45 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ece0:	2300      	movs	r3, #0
 800ece2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ece4:	f000 bd41 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ece8:	4b89      	ldr	r3, [pc, #548]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ecf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ecf4:	d108      	bne.n	800ed08 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecf6:	f107 0318 	add.w	r3, r7, #24
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f000 fd54 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed04:	f000 bd31 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed0c:	f000 bd2d 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed10:	4b7f      	ldr	r3, [pc, #508]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed1c:	d108      	bne.n	800ed30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed1e:	f107 030c 	add.w	r3, r7, #12
 800ed22:	4618      	mov	r0, r3
 800ed24:	f000 fe94 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed2c:	f000 bd1d 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed30:	2300      	movs	r3, #0
 800ed32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed34:	f000 bd19 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ed38:	4b75      	ldr	r3, [pc, #468]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ed40:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed42:	4b73      	ldr	r3, [pc, #460]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f003 0304 	and.w	r3, r3, #4
 800ed4a:	2b04      	cmp	r3, #4
 800ed4c:	d10c      	bne.n	800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ed4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d109      	bne.n	800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed54:	4b6e      	ldr	r3, [pc, #440]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	08db      	lsrs	r3, r3, #3
 800ed5a:	f003 0303 	and.w	r3, r3, #3
 800ed5e:	4a6d      	ldr	r2, [pc, #436]	@ (800ef14 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ed60:	fa22 f303 	lsr.w	r3, r2, r3
 800ed64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed66:	e01f      	b.n	800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed68:	4b69      	ldr	r3, [pc, #420]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed74:	d106      	bne.n	800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ed76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed7c:	d102      	bne.n	800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ed7e:	4b66      	ldr	r3, [pc, #408]	@ (800ef18 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ed80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed82:	e011      	b.n	800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ed84:	4b62      	ldr	r3, [pc, #392]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed90:	d106      	bne.n	800eda0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ed92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed98:	d102      	bne.n	800eda0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ed9a:	4b60      	ldr	r3, [pc, #384]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ed9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed9e:	e003      	b.n	800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eda0:	2300      	movs	r3, #0
 800eda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800eda4:	f000 bce1 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eda8:	f000 bcdf 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800edac:	4b5c      	ldr	r3, [pc, #368]	@ (800ef20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800edae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edb0:	f000 bcdb 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800edb4:	2300      	movs	r3, #0
 800edb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edb8:	f000 bcd7 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800edbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edc0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800edc4:	430b      	orrs	r3, r1
 800edc6:	f040 80ad 	bne.w	800ef24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800edca:	4b51      	ldr	r3, [pc, #324]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800edd2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800edd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800edda:	d056      	beq.n	800ee8a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800eddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ede2:	f200 8090 	bhi.w	800ef06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ede6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede8:	2bc0      	cmp	r3, #192	@ 0xc0
 800edea:	f000 8088 	beq.w	800eefe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800edee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf0:	2bc0      	cmp	r3, #192	@ 0xc0
 800edf2:	f200 8088 	bhi.w	800ef06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800edf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf8:	2b80      	cmp	r3, #128	@ 0x80
 800edfa:	d032      	beq.n	800ee62 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800edfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edfe:	2b80      	cmp	r3, #128	@ 0x80
 800ee00:	f200 8081 	bhi.w	800ef06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ee04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d003      	beq.n	800ee12 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0c:	2b40      	cmp	r3, #64	@ 0x40
 800ee0e:	d014      	beq.n	800ee3a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ee10:	e079      	b.n	800ef06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee12:	4b3f      	ldr	r3, [pc, #252]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee1e:	d108      	bne.n	800ee32 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee24:	4618      	mov	r0, r3
 800ee26:	f000 ff67 	bl	800fcf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee2e:	f000 bc9c 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee36:	f000 bc98 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee3a:	4b35      	ldr	r3, [pc, #212]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee46:	d108      	bne.n	800ee5a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee48:	f107 0318 	add.w	r3, r7, #24
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f000 fcab 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee56:	f000 bc88 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee5e:	f000 bc84 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee62:	4b2b      	ldr	r3, [pc, #172]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee6e:	d108      	bne.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee70:	f107 030c 	add.w	r3, r7, #12
 800ee74:	4618      	mov	r0, r3
 800ee76:	f000 fdeb 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee7e:	f000 bc74 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee82:	2300      	movs	r3, #0
 800ee84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee86:	f000 bc70 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ee8a:	4b21      	ldr	r3, [pc, #132]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ee92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ee94:	4b1e      	ldr	r3, [pc, #120]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f003 0304 	and.w	r3, r3, #4
 800ee9c:	2b04      	cmp	r3, #4
 800ee9e:	d10c      	bne.n	800eeba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800eea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d109      	bne.n	800eeba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eea6:	4b1a      	ldr	r3, [pc, #104]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	08db      	lsrs	r3, r3, #3
 800eeac:	f003 0303 	and.w	r3, r3, #3
 800eeb0:	4a18      	ldr	r2, [pc, #96]	@ (800ef14 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800eeb2:	fa22 f303 	lsr.w	r3, r2, r3
 800eeb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eeb8:	e01f      	b.n	800eefa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eeba:	4b15      	ldr	r3, [pc, #84]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eec6:	d106      	bne.n	800eed6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800eec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eece:	d102      	bne.n	800eed6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eed0:	4b11      	ldr	r3, [pc, #68]	@ (800ef18 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800eed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eed4:	e011      	b.n	800eefa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eed6:	4b0e      	ldr	r3, [pc, #56]	@ (800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eee2:	d106      	bne.n	800eef2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800eee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eeea:	d102      	bne.n	800eef2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800eeec:	4b0b      	ldr	r3, [pc, #44]	@ (800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800eeee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eef0:	e003      	b.n	800eefa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800eef6:	f000 bc38 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eefa:	f000 bc36 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800eefe:	4b08      	ldr	r3, [pc, #32]	@ (800ef20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ef00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef02:	f000 bc32 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ef06:	2300      	movs	r3, #0
 800ef08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef0a:	f000 bc2e 	b.w	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef0e:	bf00      	nop
 800ef10:	58024400 	.word	0x58024400
 800ef14:	03d09000 	.word	0x03d09000
 800ef18:	003d0900 	.word	0x003d0900
 800ef1c:	017d7840 	.word	0x017d7840
 800ef20:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ef24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef28:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ef2c:	430b      	orrs	r3, r1
 800ef2e:	f040 809c 	bne.w	800f06a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ef32:	4b9e      	ldr	r3, [pc, #632]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef36:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ef3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ef3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ef42:	d054      	beq.n	800efee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ef44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ef4a:	f200 808b 	bhi.w	800f064 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ef54:	f000 8083 	beq.w	800f05e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ef58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef5a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ef5e:	f200 8081 	bhi.w	800f064 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ef62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ef68:	d02f      	beq.n	800efca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ef6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ef70:	d878      	bhi.n	800f064 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ef72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d004      	beq.n	800ef82 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ef78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ef7e:	d012      	beq.n	800efa6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ef80:	e070      	b.n	800f064 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef82:	4b8a      	ldr	r3, [pc, #552]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef8e:	d107      	bne.n	800efa0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ef94:	4618      	mov	r0, r3
 800ef96:	f000 feaf 	bl	800fcf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ef9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef9e:	e3e4      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efa0:	2300      	movs	r3, #0
 800efa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efa4:	e3e1      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800efa6:	4b81      	ldr	r3, [pc, #516]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800efae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800efb2:	d107      	bne.n	800efc4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efb4:	f107 0318 	add.w	r3, r7, #24
 800efb8:	4618      	mov	r0, r3
 800efba:	f000 fbf5 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efc2:	e3d2      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efc4:	2300      	movs	r3, #0
 800efc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efc8:	e3cf      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800efca:	4b78      	ldr	r3, [pc, #480]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800efd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efd6:	d107      	bne.n	800efe8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efd8:	f107 030c 	add.w	r3, r7, #12
 800efdc:	4618      	mov	r0, r3
 800efde:	f000 fd37 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efe6:	e3c0      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efe8:	2300      	movs	r3, #0
 800efea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efec:	e3bd      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800efee:	4b6f      	ldr	r3, [pc, #444]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eff2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eff6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eff8:	4b6c      	ldr	r3, [pc, #432]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f003 0304 	and.w	r3, r3, #4
 800f000:	2b04      	cmp	r3, #4
 800f002:	d10c      	bne.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f006:	2b00      	cmp	r3, #0
 800f008:	d109      	bne.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f00a:	4b68      	ldr	r3, [pc, #416]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	08db      	lsrs	r3, r3, #3
 800f010:	f003 0303 	and.w	r3, r3, #3
 800f014:	4a66      	ldr	r2, [pc, #408]	@ (800f1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f016:	fa22 f303 	lsr.w	r3, r2, r3
 800f01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f01c:	e01e      	b.n	800f05c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f01e:	4b63      	ldr	r3, [pc, #396]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f02a:	d106      	bne.n	800f03a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f02e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f032:	d102      	bne.n	800f03a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f034:	4b5f      	ldr	r3, [pc, #380]	@ (800f1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f038:	e010      	b.n	800f05c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f03a:	4b5c      	ldr	r3, [pc, #368]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f046:	d106      	bne.n	800f056 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f04a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f04e:	d102      	bne.n	800f056 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f050:	4b59      	ldr	r3, [pc, #356]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f054:	e002      	b.n	800f05c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f056:	2300      	movs	r3, #0
 800f058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f05a:	e386      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f05c:	e385      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f05e:	4b57      	ldr	r3, [pc, #348]	@ (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f062:	e382      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f064:	2300      	movs	r3, #0
 800f066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f068:	e37f      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f06a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f06e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f072:	430b      	orrs	r3, r1
 800f074:	f040 80a7 	bne.w	800f1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f078:	4b4c      	ldr	r3, [pc, #304]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f07a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f07c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800f080:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f084:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f088:	d055      	beq.n	800f136 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f08c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f090:	f200 8096 	bhi.w	800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f096:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f09a:	f000 8084 	beq.w	800f1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f0a4:	f200 808c 	bhi.w	800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f0ae:	d030      	beq.n	800f112 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f0b6:	f200 8083 	bhi.w	800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d004      	beq.n	800f0ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f0c6:	d012      	beq.n	800f0ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f0c8:	e07a      	b.n	800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f0ca:	4b38      	ldr	r3, [pc, #224]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f0d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f0d6:	d107      	bne.n	800f0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f000 fe0b 	bl	800fcf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0e6:	e340      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0ec:	e33d      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0ee:	4b2f      	ldr	r3, [pc, #188]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f0f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f0fa:	d107      	bne.n	800f10c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0fc:	f107 0318 	add.w	r3, r7, #24
 800f100:	4618      	mov	r0, r3
 800f102:	f000 fb51 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f10a:	e32e      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f110:	e32b      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f112:	4b26      	ldr	r3, [pc, #152]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f11a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f11e:	d107      	bne.n	800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f120:	f107 030c 	add.w	r3, r7, #12
 800f124:	4618      	mov	r0, r3
 800f126:	f000 fc93 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f12e:	e31c      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f130:	2300      	movs	r3, #0
 800f132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f134:	e319      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f136:	4b1d      	ldr	r3, [pc, #116]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f13a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f13e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f140:	4b1a      	ldr	r3, [pc, #104]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f003 0304 	and.w	r3, r3, #4
 800f148:	2b04      	cmp	r3, #4
 800f14a:	d10c      	bne.n	800f166 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d109      	bne.n	800f166 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f152:	4b16      	ldr	r3, [pc, #88]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	08db      	lsrs	r3, r3, #3
 800f158:	f003 0303 	and.w	r3, r3, #3
 800f15c:	4a14      	ldr	r2, [pc, #80]	@ (800f1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f15e:	fa22 f303 	lsr.w	r3, r2, r3
 800f162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f164:	e01e      	b.n	800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f166:	4b11      	ldr	r3, [pc, #68]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f16e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f172:	d106      	bne.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f17a:	d102      	bne.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f17c:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f180:	e010      	b.n	800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f182:	4b0a      	ldr	r3, [pc, #40]	@ (800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f18a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f18e:	d106      	bne.n	800f19e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f196:	d102      	bne.n	800f19e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f198:	4b07      	ldr	r3, [pc, #28]	@ (800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f19c:	e002      	b.n	800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f1a2:	e2e2      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1a4:	e2e1      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f1a6:	4b05      	ldr	r3, [pc, #20]	@ (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1aa:	e2de      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1ac:	58024400 	.word	0x58024400
 800f1b0:	03d09000 	.word	0x03d09000
 800f1b4:	003d0900 	.word	0x003d0900
 800f1b8:	017d7840 	.word	0x017d7840
 800f1bc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1c4:	e2d1      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ca:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f1ce:	430b      	orrs	r3, r1
 800f1d0:	f040 809c 	bne.w	800f30c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f1d4:	4b93      	ldr	r3, [pc, #588]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1d8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f1dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f1e4:	d054      	beq.n	800f290 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f1ec:	f200 808b 	bhi.w	800f306 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f1f6:	f000 8083 	beq.w	800f300 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f200:	f200 8081 	bhi.w	800f306 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f20a:	d02f      	beq.n	800f26c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f212:	d878      	bhi.n	800f306 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f216:	2b00      	cmp	r3, #0
 800f218:	d004      	beq.n	800f224 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f220:	d012      	beq.n	800f248 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f222:	e070      	b.n	800f306 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f224:	4b7f      	ldr	r3, [pc, #508]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f22c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f230:	d107      	bne.n	800f242 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f236:	4618      	mov	r0, r3
 800f238:	f000 fd5e 	bl	800fcf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f240:	e293      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f242:	2300      	movs	r3, #0
 800f244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f246:	e290      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f248:	4b76      	ldr	r3, [pc, #472]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f254:	d107      	bne.n	800f266 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f256:	f107 0318 	add.w	r3, r7, #24
 800f25a:	4618      	mov	r0, r3
 800f25c:	f000 faa4 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f264:	e281      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f266:	2300      	movs	r3, #0
 800f268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f26a:	e27e      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f26c:	4b6d      	ldr	r3, [pc, #436]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f278:	d107      	bne.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f27a:	f107 030c 	add.w	r3, r7, #12
 800f27e:	4618      	mov	r0, r3
 800f280:	f000 fbe6 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f288:	e26f      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f28e:	e26c      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f290:	4b64      	ldr	r3, [pc, #400]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f294:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f298:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f29a:	4b62      	ldr	r3, [pc, #392]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f003 0304 	and.w	r3, r3, #4
 800f2a2:	2b04      	cmp	r3, #4
 800f2a4:	d10c      	bne.n	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d109      	bne.n	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f2ac:	4b5d      	ldr	r3, [pc, #372]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	08db      	lsrs	r3, r3, #3
 800f2b2:	f003 0303 	and.w	r3, r3, #3
 800f2b6:	4a5c      	ldr	r2, [pc, #368]	@ (800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800f2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2be:	e01e      	b.n	800f2fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f2c0:	4b58      	ldr	r3, [pc, #352]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2cc:	d106      	bne.n	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f2ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f2d4:	d102      	bne.n	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f2d6:	4b55      	ldr	r3, [pc, #340]	@ (800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2da:	e010      	b.n	800f2fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f2dc:	4b51      	ldr	r3, [pc, #324]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2e8:	d106      	bne.n	800f2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f2ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f2f0:	d102      	bne.n	800f2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f2f2:	4b4f      	ldr	r3, [pc, #316]	@ (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2f6:	e002      	b.n	800f2fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f2fc:	e235      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2fe:	e234      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f300:	4b4c      	ldr	r3, [pc, #304]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f304:	e231      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f306:	2300      	movs	r3, #0
 800f308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f30a:	e22e      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f30c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f310:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f314:	430b      	orrs	r3, r1
 800f316:	f040 808f 	bne.w	800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f31a:	4b42      	ldr	r3, [pc, #264]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f31c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f31e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f322:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f326:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f32a:	d06b      	beq.n	800f404 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f332:	d874      	bhi.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f336:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f33a:	d056      	beq.n	800f3ea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f33e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f342:	d86c      	bhi.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f346:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f34a:	d03b      	beq.n	800f3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f34e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f352:	d864      	bhi.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f356:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f35a:	d021      	beq.n	800f3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f35e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f362:	d85c      	bhi.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f366:	2b00      	cmp	r3, #0
 800f368:	d004      	beq.n	800f374 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f36c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f370:	d004      	beq.n	800f37c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f372:	e054      	b.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f374:	f7fe fa4c 	bl	800d810 <HAL_RCC_GetPCLK1Freq>
 800f378:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f37a:	e1f6      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f37c:	4b29      	ldr	r3, [pc, #164]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f388:	d107      	bne.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f38a:	f107 0318 	add.w	r3, r7, #24
 800f38e:	4618      	mov	r0, r3
 800f390:	f000 fa0a 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f398:	e1e7      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f39a:	2300      	movs	r3, #0
 800f39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f39e:	e1e4      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f3a0:	4b20      	ldr	r3, [pc, #128]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f3a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f3ac:	d107      	bne.n	800f3be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3ae:	f107 030c 	add.w	r3, r7, #12
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 fb4c 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3bc:	e1d5      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3c2:	e1d2      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f3c4:	4b17      	ldr	r3, [pc, #92]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f003 0304 	and.w	r3, r3, #4
 800f3cc:	2b04      	cmp	r3, #4
 800f3ce:	d109      	bne.n	800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f3d0:	4b14      	ldr	r3, [pc, #80]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	08db      	lsrs	r3, r3, #3
 800f3d6:	f003 0303 	and.w	r3, r3, #3
 800f3da:	4a13      	ldr	r2, [pc, #76]	@ (800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f3dc:	fa22 f303 	lsr.w	r3, r2, r3
 800f3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3e2:	e1c2      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3e8:	e1bf      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f3ea:	4b0e      	ldr	r3, [pc, #56]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f3f6:	d102      	bne.n	800f3fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f3f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3fc:	e1b5      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3fe:	2300      	movs	r3, #0
 800f400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f402:	e1b2      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f404:	4b07      	ldr	r3, [pc, #28]	@ (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f40c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f410:	d102      	bne.n	800f418 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f412:	4b07      	ldr	r3, [pc, #28]	@ (800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f416:	e1a8      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f418:	2300      	movs	r3, #0
 800f41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f41c:	e1a5      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f422:	e1a2      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f424:	58024400 	.word	0x58024400
 800f428:	03d09000 	.word	0x03d09000
 800f42c:	003d0900 	.word	0x003d0900
 800f430:	017d7840 	.word	0x017d7840
 800f434:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f43c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f440:	430b      	orrs	r3, r1
 800f442:	d173      	bne.n	800f52c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f444:	4b9c      	ldr	r3, [pc, #624]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f44c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f450:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f454:	d02f      	beq.n	800f4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f458:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f45c:	d863      	bhi.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f460:	2b00      	cmp	r3, #0
 800f462:	d004      	beq.n	800f46e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f46a:	d012      	beq.n	800f492 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f46c:	e05b      	b.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f46e:	4b92      	ldr	r3, [pc, #584]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f47a:	d107      	bne.n	800f48c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f47c:	f107 0318 	add.w	r3, r7, #24
 800f480:	4618      	mov	r0, r3
 800f482:	f000 f991 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f48a:	e16e      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f48c:	2300      	movs	r3, #0
 800f48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f490:	e16b      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f492:	4b89      	ldr	r3, [pc, #548]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f49a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f49e:	d107      	bne.n	800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4a0:	f107 030c 	add.w	r3, r7, #12
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 fad3 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4ae:	e15c      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4b4:	e159      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f4b6:	4b80      	ldr	r3, [pc, #512]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f4be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f4c0:	4b7d      	ldr	r3, [pc, #500]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f003 0304 	and.w	r3, r3, #4
 800f4c8:	2b04      	cmp	r3, #4
 800f4ca:	d10c      	bne.n	800f4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d109      	bne.n	800f4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f4d2:	4b79      	ldr	r3, [pc, #484]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	08db      	lsrs	r3, r3, #3
 800f4d8:	f003 0303 	and.w	r3, r3, #3
 800f4dc:	4a77      	ldr	r2, [pc, #476]	@ (800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f4de:	fa22 f303 	lsr.w	r3, r2, r3
 800f4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4e4:	e01e      	b.n	800f524 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f4e6:	4b74      	ldr	r3, [pc, #464]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4f2:	d106      	bne.n	800f502 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4fa:	d102      	bne.n	800f502 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f4fc:	4b70      	ldr	r3, [pc, #448]	@ (800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f500:	e010      	b.n	800f524 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f502:	4b6d      	ldr	r3, [pc, #436]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f50a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f50e:	d106      	bne.n	800f51e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f516:	d102      	bne.n	800f51e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f518:	4b6a      	ldr	r3, [pc, #424]	@ (800f6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f51c:	e002      	b.n	800f524 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f51e:	2300      	movs	r3, #0
 800f520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f522:	e122      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f524:	e121      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f526:	2300      	movs	r3, #0
 800f528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f52a:	e11e      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f52c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f530:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f534:	430b      	orrs	r3, r1
 800f536:	d133      	bne.n	800f5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f538:	4b5f      	ldr	r3, [pc, #380]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f53a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f53c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f540:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f544:	2b00      	cmp	r3, #0
 800f546:	d004      	beq.n	800f552 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f54a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f54e:	d012      	beq.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f550:	e023      	b.n	800f59a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f552:	4b59      	ldr	r3, [pc, #356]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f55a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f55e:	d107      	bne.n	800f570 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f564:	4618      	mov	r0, r3
 800f566:	f000 fbc7 	bl	800fcf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f56e:	e0fc      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f570:	2300      	movs	r3, #0
 800f572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f574:	e0f9      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f576:	4b50      	ldr	r3, [pc, #320]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f57e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f582:	d107      	bne.n	800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f584:	f107 0318 	add.w	r3, r7, #24
 800f588:	4618      	mov	r0, r3
 800f58a:	f000 f90d 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f58e:	6a3b      	ldr	r3, [r7, #32]
 800f590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f592:	e0ea      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f594:	2300      	movs	r3, #0
 800f596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f598:	e0e7      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f59e:	e0e4      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f5a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5a4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f5a8:	430b      	orrs	r3, r1
 800f5aa:	f040 808d 	bne.w	800f6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f5ae:	4b42      	ldr	r3, [pc, #264]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f5b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5b2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f5b6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f5be:	d06b      	beq.n	800f698 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f5c6:	d874      	bhi.n	800f6b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5ce:	d056      	beq.n	800f67e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5d6:	d86c      	bhi.n	800f6b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f5de:	d03b      	beq.n	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f5e6:	d864      	bhi.n	800f6b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5ee:	d021      	beq.n	800f634 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5f6:	d85c      	bhi.n	800f6b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d004      	beq.n	800f608 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f600:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f604:	d004      	beq.n	800f610 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f606:	e054      	b.n	800f6b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f608:	f000 f8b8 	bl	800f77c <HAL_RCCEx_GetD3PCLK1Freq>
 800f60c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f60e:	e0ac      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f610:	4b29      	ldr	r3, [pc, #164]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f61c:	d107      	bne.n	800f62e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f61e:	f107 0318 	add.w	r3, r7, #24
 800f622:	4618      	mov	r0, r3
 800f624:	f000 f8c0 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f62c:	e09d      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f62e:	2300      	movs	r3, #0
 800f630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f632:	e09a      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f634:	4b20      	ldr	r3, [pc, #128]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f63c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f640:	d107      	bne.n	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f642:	f107 030c 	add.w	r3, r7, #12
 800f646:	4618      	mov	r0, r3
 800f648:	f000 fa02 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f650:	e08b      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f652:	2300      	movs	r3, #0
 800f654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f656:	e088      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f658:	4b17      	ldr	r3, [pc, #92]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f003 0304 	and.w	r3, r3, #4
 800f660:	2b04      	cmp	r3, #4
 800f662:	d109      	bne.n	800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f664:	4b14      	ldr	r3, [pc, #80]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	08db      	lsrs	r3, r3, #3
 800f66a:	f003 0303 	and.w	r3, r3, #3
 800f66e:	4a13      	ldr	r2, [pc, #76]	@ (800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f670:	fa22 f303 	lsr.w	r3, r2, r3
 800f674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f676:	e078      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f678:	2300      	movs	r3, #0
 800f67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f67c:	e075      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f67e:	4b0e      	ldr	r3, [pc, #56]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f68a:	d102      	bne.n	800f692 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f68c:	4b0c      	ldr	r3, [pc, #48]	@ (800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f690:	e06b      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f692:	2300      	movs	r3, #0
 800f694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f696:	e068      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f698:	4b07      	ldr	r3, [pc, #28]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f6a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f6a4:	d102      	bne.n	800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f6a6:	4b07      	ldr	r3, [pc, #28]	@ (800f6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6aa:	e05e      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6b0:	e05b      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6b6:	e058      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f6b8:	58024400 	.word	0x58024400
 800f6bc:	03d09000 	.word	0x03d09000
 800f6c0:	003d0900 	.word	0x003d0900
 800f6c4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6cc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f6d0:	430b      	orrs	r3, r1
 800f6d2:	d148      	bne.n	800f766 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f6d4:	4b27      	ldr	r3, [pc, #156]	@ (800f774 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f6d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f6dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f6e4:	d02a      	beq.n	800f73c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f6ec:	d838      	bhi.n	800f760 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d004      	beq.n	800f6fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f6fa:	d00d      	beq.n	800f718 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f6fc:	e030      	b.n	800f760 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f6fe:	4b1d      	ldr	r3, [pc, #116]	@ (800f774 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f70a:	d102      	bne.n	800f712 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f70c:	4b1a      	ldr	r3, [pc, #104]	@ (800f778 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f710:	e02b      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f712:	2300      	movs	r3, #0
 800f714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f716:	e028      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f718:	4b16      	ldr	r3, [pc, #88]	@ (800f774 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f720:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f724:	d107      	bne.n	800f736 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f72a:	4618      	mov	r0, r3
 800f72c:	f000 fae4 	bl	800fcf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f734:	e019      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f736:	2300      	movs	r3, #0
 800f738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f73a:	e016      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f73c:	4b0d      	ldr	r3, [pc, #52]	@ (800f774 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f748:	d107      	bne.n	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f74a:	f107 0318 	add.w	r3, r7, #24
 800f74e:	4618      	mov	r0, r3
 800f750:	f000 f82a 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f758:	e007      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f75a:	2300      	movs	r3, #0
 800f75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f75e:	e004      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f760:	2300      	movs	r3, #0
 800f762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f764:	e001      	b.n	800f76a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f766:	2300      	movs	r3, #0
 800f768:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800f76a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3740      	adds	r7, #64	@ 0x40
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	58024400 	.word	0x58024400
 800f778:	017d7840 	.word	0x017d7840

0800f77c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f780:	f7fe f816 	bl	800d7b0 <HAL_RCC_GetHCLKFreq>
 800f784:	4602      	mov	r2, r0
 800f786:	4b06      	ldr	r3, [pc, #24]	@ (800f7a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f788:	6a1b      	ldr	r3, [r3, #32]
 800f78a:	091b      	lsrs	r3, r3, #4
 800f78c:	f003 0307 	and.w	r3, r3, #7
 800f790:	4904      	ldr	r1, [pc, #16]	@ (800f7a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f792:	5ccb      	ldrb	r3, [r1, r3]
 800f794:	f003 031f 	and.w	r3, r3, #31
 800f798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	58024400 	.word	0x58024400
 800f7a4:	08017768 	.word	0x08017768

0800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b089      	sub	sp, #36	@ 0x24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f7b0:	4ba1      	ldr	r3, [pc, #644]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7b4:	f003 0303 	and.w	r3, r3, #3
 800f7b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f7ba:	4b9f      	ldr	r3, [pc, #636]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7be:	0b1b      	lsrs	r3, r3, #12
 800f7c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f7c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f7c6:	4b9c      	ldr	r3, [pc, #624]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7ca:	091b      	lsrs	r3, r3, #4
 800f7cc:	f003 0301 	and.w	r3, r3, #1
 800f7d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f7d2:	4b99      	ldr	r3, [pc, #612]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7d6:	08db      	lsrs	r3, r3, #3
 800f7d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7dc:	693a      	ldr	r2, [r7, #16]
 800f7de:	fb02 f303 	mul.w	r3, r2, r3
 800f7e2:	ee07 3a90 	vmov	s15, r3
 800f7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 8111 	beq.w	800fa18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	2b02      	cmp	r3, #2
 800f7fa:	f000 8083 	beq.w	800f904 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f7fe:	69bb      	ldr	r3, [r7, #24]
 800f800:	2b02      	cmp	r3, #2
 800f802:	f200 80a1 	bhi.w	800f948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d003      	beq.n	800f814 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d056      	beq.n	800f8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f812:	e099      	b.n	800f948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f814:	4b88      	ldr	r3, [pc, #544]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f003 0320 	and.w	r3, r3, #32
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d02d      	beq.n	800f87c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f820:	4b85      	ldr	r3, [pc, #532]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	08db      	lsrs	r3, r3, #3
 800f826:	f003 0303 	and.w	r3, r3, #3
 800f82a:	4a84      	ldr	r2, [pc, #528]	@ (800fa3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f82c:	fa22 f303 	lsr.w	r3, r2, r3
 800f830:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	ee07 3a90 	vmov	s15, r3
 800f838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	ee07 3a90 	vmov	s15, r3
 800f842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f84a:	4b7b      	ldr	r3, [pc, #492]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f84c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f852:	ee07 3a90 	vmov	s15, r3
 800f856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f85a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f85e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fa40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f86a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f876:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f87a:	e087      	b.n	800f98c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	ee07 3a90 	vmov	s15, r3
 800f882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f886:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fa44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f88e:	4b6a      	ldr	r3, [pc, #424]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f896:	ee07 3a90 	vmov	s15, r3
 800f89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fa40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f8be:	e065      	b.n	800f98c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	ee07 3a90 	vmov	s15, r3
 800f8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fa48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f8ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8d2:	4b59      	ldr	r3, [pc, #356]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8da:	ee07 3a90 	vmov	s15, r3
 800f8de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fa40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f8ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f8f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f902:	e043      	b.n	800f98c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	ee07 3a90 	vmov	s15, r3
 800f90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f90e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fa4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f916:	4b48      	ldr	r3, [pc, #288]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f91e:	ee07 3a90 	vmov	s15, r3
 800f922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f926:	ed97 6a03 	vldr	s12, [r7, #12]
 800f92a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fa40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f92e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f946:	e021      	b.n	800f98c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	ee07 3a90 	vmov	s15, r3
 800f94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f952:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fa48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f95a:	4b37      	ldr	r3, [pc, #220]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f95c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f95e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f962:	ee07 3a90 	vmov	s15, r3
 800f966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f96a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f96e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fa40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f97a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f97e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f982:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f98a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f98c:	4b2a      	ldr	r3, [pc, #168]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f98e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f990:	0a5b      	lsrs	r3, r3, #9
 800f992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f996:	ee07 3a90 	vmov	s15, r3
 800f99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f99e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9b2:	ee17 2a90 	vmov	r2, s15
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f9ba:	4b1f      	ldr	r3, [pc, #124]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f9bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9be:	0c1b      	lsrs	r3, r3, #16
 800f9c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9c4:	ee07 3a90 	vmov	s15, r3
 800f9c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9e0:	ee17 2a90 	vmov	r2, s15
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f9e8:	4b13      	ldr	r3, [pc, #76]	@ (800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9ec:	0e1b      	lsrs	r3, r3, #24
 800f9ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9f2:	ee07 3a90 	vmov	s15, r3
 800f9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa02:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa0e:	ee17 2a90 	vmov	r2, s15
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800fa16:	e008      	b.n	800fa2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2200      	movs	r2, #0
 800fa22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	609a      	str	r2, [r3, #8]
}
 800fa2a:	bf00      	nop
 800fa2c:	3724      	adds	r7, #36	@ 0x24
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	58024400 	.word	0x58024400
 800fa3c:	03d09000 	.word	0x03d09000
 800fa40:	46000000 	.word	0x46000000
 800fa44:	4c742400 	.word	0x4c742400
 800fa48:	4a742400 	.word	0x4a742400
 800fa4c:	4bbebc20 	.word	0x4bbebc20

0800fa50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b089      	sub	sp, #36	@ 0x24
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fa58:	4ba1      	ldr	r3, [pc, #644]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa5c:	f003 0303 	and.w	r3, r3, #3
 800fa60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800fa62:	4b9f      	ldr	r3, [pc, #636]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa66:	0d1b      	lsrs	r3, r3, #20
 800fa68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fa6e:	4b9c      	ldr	r3, [pc, #624]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa72:	0a1b      	lsrs	r3, r3, #8
 800fa74:	f003 0301 	and.w	r3, r3, #1
 800fa78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800fa7a:	4b99      	ldr	r3, [pc, #612]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa7e:	08db      	lsrs	r3, r3, #3
 800fa80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa84:	693a      	ldr	r2, [r7, #16]
 800fa86:	fb02 f303 	mul.w	r3, r2, r3
 800fa8a:	ee07 3a90 	vmov	s15, r3
 800fa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f000 8111 	beq.w	800fcc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	2b02      	cmp	r3, #2
 800faa2:	f000 8083 	beq.w	800fbac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800faa6:	69bb      	ldr	r3, [r7, #24]
 800faa8:	2b02      	cmp	r3, #2
 800faaa:	f200 80a1 	bhi.w	800fbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d003      	beq.n	800fabc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fab4:	69bb      	ldr	r3, [r7, #24]
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d056      	beq.n	800fb68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800faba:	e099      	b.n	800fbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fabc:	4b88      	ldr	r3, [pc, #544]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f003 0320 	and.w	r3, r3, #32
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d02d      	beq.n	800fb24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fac8:	4b85      	ldr	r3, [pc, #532]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	08db      	lsrs	r3, r3, #3
 800face:	f003 0303 	and.w	r3, r3, #3
 800fad2:	4a84      	ldr	r2, [pc, #528]	@ (800fce4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fad4:	fa22 f303 	lsr.w	r3, r2, r3
 800fad8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	ee07 3a90 	vmov	s15, r3
 800fae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	ee07 3a90 	vmov	s15, r3
 800faea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800faf2:	4b7b      	ldr	r3, [pc, #492]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800faf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fafa:	ee07 3a90 	vmov	s15, r3
 800fafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb02:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fb22:	e087      	b.n	800fc34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	ee07 3a90 	vmov	s15, r3
 800fb2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fcec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fb32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb36:	4b6a      	ldr	r3, [pc, #424]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb3e:	ee07 3a90 	vmov	s15, r3
 800fb42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb46:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb66:	e065      	b.n	800fc34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	ee07 3a90 	vmov	s15, r3
 800fb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fcf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fb76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb7a:	4b59      	ldr	r3, [pc, #356]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb82:	ee07 3a90 	vmov	s15, r3
 800fb86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fbaa:	e043      	b.n	800fc34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	ee07 3a90 	vmov	s15, r3
 800fbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fcf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fbba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbbe:	4b48      	ldr	r3, [pc, #288]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fbc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbc6:	ee07 3a90 	vmov	s15, r3
 800fbca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbce:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbd2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fbd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fbe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fbee:	e021      	b.n	800fc34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	ee07 3a90 	vmov	s15, r3
 800fbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbfa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fcf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fbfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc02:	4b37      	ldr	r3, [pc, #220]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc0a:	ee07 3a90 	vmov	s15, r3
 800fc0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc12:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fc1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fc34:	4b2a      	ldr	r3, [pc, #168]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc38:	0a5b      	lsrs	r3, r3, #9
 800fc3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc3e:	ee07 3a90 	vmov	s15, r3
 800fc42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc5a:	ee17 2a90 	vmov	r2, s15
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fc62:	4b1f      	ldr	r3, [pc, #124]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc66:	0c1b      	lsrs	r3, r3, #16
 800fc68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc6c:	ee07 3a90 	vmov	s15, r3
 800fc70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc78:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc88:	ee17 2a90 	vmov	r2, s15
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fc90:	4b13      	ldr	r3, [pc, #76]	@ (800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc94:	0e1b      	lsrs	r3, r3, #24
 800fc96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc9a:	ee07 3a90 	vmov	s15, r3
 800fc9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fcaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800fcae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcb6:	ee17 2a90 	vmov	r2, s15
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fcbe:	e008      	b.n	800fcd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	609a      	str	r2, [r3, #8]
}
 800fcd2:	bf00      	nop
 800fcd4:	3724      	adds	r7, #36	@ 0x24
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	58024400 	.word	0x58024400
 800fce4:	03d09000 	.word	0x03d09000
 800fce8:	46000000 	.word	0x46000000
 800fcec:	4c742400 	.word	0x4c742400
 800fcf0:	4a742400 	.word	0x4a742400
 800fcf4:	4bbebc20 	.word	0x4bbebc20

0800fcf8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b089      	sub	sp, #36	@ 0x24
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fd00:	4ba0      	ldr	r3, [pc, #640]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd04:	f003 0303 	and.w	r3, r3, #3
 800fd08:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800fd0a:	4b9e      	ldr	r3, [pc, #632]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd0e:	091b      	lsrs	r3, r3, #4
 800fd10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fd14:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800fd16:	4b9b      	ldr	r3, [pc, #620]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd1a:	f003 0301 	and.w	r3, r3, #1
 800fd1e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fd20:	4b98      	ldr	r3, [pc, #608]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd24:	08db      	lsrs	r3, r3, #3
 800fd26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd2a:	693a      	ldr	r2, [r7, #16]
 800fd2c:	fb02 f303 	mul.w	r3, r2, r3
 800fd30:	ee07 3a90 	vmov	s15, r3
 800fd34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f000 8111 	beq.w	800ff66 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fd44:	69bb      	ldr	r3, [r7, #24]
 800fd46:	2b02      	cmp	r3, #2
 800fd48:	f000 8083 	beq.w	800fe52 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fd4c:	69bb      	ldr	r3, [r7, #24]
 800fd4e:	2b02      	cmp	r3, #2
 800fd50:	f200 80a1 	bhi.w	800fe96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d003      	beq.n	800fd62 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d056      	beq.n	800fe0e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fd60:	e099      	b.n	800fe96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd62:	4b88      	ldr	r3, [pc, #544]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f003 0320 	and.w	r3, r3, #32
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d02d      	beq.n	800fdca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd6e:	4b85      	ldr	r3, [pc, #532]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	08db      	lsrs	r3, r3, #3
 800fd74:	f003 0303 	and.w	r3, r3, #3
 800fd78:	4a83      	ldr	r2, [pc, #524]	@ (800ff88 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd7e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	ee07 3a90 	vmov	s15, r3
 800fd86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	ee07 3a90 	vmov	s15, r3
 800fd90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd98:	4b7a      	ldr	r3, [pc, #488]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fda0:	ee07 3a90 	vmov	s15, r3
 800fda4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fda8:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ff8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fdb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fdbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdc4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fdc8:	e087      	b.n	800feda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	ee07 3a90 	vmov	s15, r3
 800fdd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdd4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ff90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fdd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fddc:	4b69      	ldr	r3, [pc, #420]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fde0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fde4:	ee07 3a90 	vmov	s15, r3
 800fde8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdec:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdf0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ff8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fdf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe0c:	e065      	b.n	800feda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	ee07 3a90 	vmov	s15, r3
 800fe14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe18:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ff94 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fe1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe20:	4b58      	ldr	r3, [pc, #352]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe28:	ee07 3a90 	vmov	s15, r3
 800fe2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe30:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe34:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ff8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fe38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe50:	e043      	b.n	800feda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	ee07 3a90 	vmov	s15, r3
 800fe58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe5c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ff98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fe60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe64:	4b47      	ldr	r3, [pc, #284]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe6c:	ee07 3a90 	vmov	s15, r3
 800fe70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe74:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe78:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ff8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fe7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe94:	e021      	b.n	800feda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	ee07 3a90 	vmov	s15, r3
 800fe9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fea0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ff90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fea8:	4b36      	ldr	r3, [pc, #216]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800feaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800feac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feb0:	ee07 3a90 	vmov	s15, r3
 800feb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800febc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ff8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fed4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fed8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800feda:	4b2a      	ldr	r3, [pc, #168]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fedc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fede:	0a5b      	lsrs	r3, r3, #9
 800fee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fee4:	ee07 3a90 	vmov	s15, r3
 800fee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fef4:	edd7 6a07 	vldr	s13, [r7, #28]
 800fef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fefc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff00:	ee17 2a90 	vmov	r2, s15
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ff08:	4b1e      	ldr	r3, [pc, #120]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff0c:	0c1b      	lsrs	r3, r3, #16
 800ff0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff12:	ee07 3a90 	vmov	s15, r3
 800ff16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff2e:	ee17 2a90 	vmov	r2, s15
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ff36:	4b13      	ldr	r3, [pc, #76]	@ (800ff84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff3a:	0e1b      	lsrs	r3, r3, #24
 800ff3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff40:	ee07 3a90 	vmov	s15, r3
 800ff44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff50:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff5c:	ee17 2a90 	vmov	r2, s15
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ff64:	e008      	b.n	800ff78 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	609a      	str	r2, [r3, #8]
}
 800ff78:	bf00      	nop
 800ff7a:	3724      	adds	r7, #36	@ 0x24
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	58024400 	.word	0x58024400
 800ff88:	03d09000 	.word	0x03d09000
 800ff8c:	46000000 	.word	0x46000000
 800ff90:	4c742400 	.word	0x4c742400
 800ff94:	4a742400 	.word	0x4a742400
 800ff98:	4bbebc20 	.word	0x4bbebc20

0800ff9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ffaa:	4b53      	ldr	r3, [pc, #332]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 800ffac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffae:	f003 0303 	and.w	r3, r3, #3
 800ffb2:	2b03      	cmp	r3, #3
 800ffb4:	d101      	bne.n	800ffba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e099      	b.n	80100ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ffba:	4b4f      	ldr	r3, [pc, #316]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4a4e      	ldr	r2, [pc, #312]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 800ffc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ffc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffc6:	f7f2 f97d 	bl	80022c4 <HAL_GetTick>
 800ffca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ffcc:	e008      	b.n	800ffe0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ffce:	f7f2 f979 	bl	80022c4 <HAL_GetTick>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	2b02      	cmp	r3, #2
 800ffda:	d901      	bls.n	800ffe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ffdc:	2303      	movs	r3, #3
 800ffde:	e086      	b.n	80100ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ffe0:	4b45      	ldr	r3, [pc, #276]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1f0      	bne.n	800ffce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ffec:	4b42      	ldr	r3, [pc, #264]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 800ffee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fff0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	031b      	lsls	r3, r3, #12
 800fffa:	493f      	ldr	r1, [pc, #252]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 800fffc:	4313      	orrs	r3, r2
 800fffe:	628b      	str	r3, [r1, #40]	@ 0x28
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	3b01      	subs	r3, #1
 8010006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	3b01      	subs	r3, #1
 8010010:	025b      	lsls	r3, r3, #9
 8010012:	b29b      	uxth	r3, r3
 8010014:	431a      	orrs	r2, r3
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	3b01      	subs	r3, #1
 801001c:	041b      	lsls	r3, r3, #16
 801001e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010022:	431a      	orrs	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	691b      	ldr	r3, [r3, #16]
 8010028:	3b01      	subs	r3, #1
 801002a:	061b      	lsls	r3, r3, #24
 801002c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010030:	4931      	ldr	r1, [pc, #196]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 8010032:	4313      	orrs	r3, r2
 8010034:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010036:	4b30      	ldr	r3, [pc, #192]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 8010038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801003a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	695b      	ldr	r3, [r3, #20]
 8010042:	492d      	ldr	r1, [pc, #180]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 8010044:	4313      	orrs	r3, r2
 8010046:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010048:	4b2b      	ldr	r3, [pc, #172]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 801004a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801004c:	f023 0220 	bic.w	r2, r3, #32
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	699b      	ldr	r3, [r3, #24]
 8010054:	4928      	ldr	r1, [pc, #160]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 8010056:	4313      	orrs	r3, r2
 8010058:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801005a:	4b27      	ldr	r3, [pc, #156]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 801005c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801005e:	4a26      	ldr	r2, [pc, #152]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 8010060:	f023 0310 	bic.w	r3, r3, #16
 8010064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010066:	4b24      	ldr	r3, [pc, #144]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 8010068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801006a:	4b24      	ldr	r3, [pc, #144]	@ (80100fc <RCCEx_PLL2_Config+0x160>)
 801006c:	4013      	ands	r3, r2
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	69d2      	ldr	r2, [r2, #28]
 8010072:	00d2      	lsls	r2, r2, #3
 8010074:	4920      	ldr	r1, [pc, #128]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 8010076:	4313      	orrs	r3, r2
 8010078:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801007a:	4b1f      	ldr	r3, [pc, #124]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 801007c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801007e:	4a1e      	ldr	r2, [pc, #120]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 8010080:	f043 0310 	orr.w	r3, r3, #16
 8010084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d106      	bne.n	801009a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801008c:	4b1a      	ldr	r3, [pc, #104]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 801008e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010090:	4a19      	ldr	r2, [pc, #100]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 8010092:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010096:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010098:	e00f      	b.n	80100ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	2b01      	cmp	r3, #1
 801009e:	d106      	bne.n	80100ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80100a0:	4b15      	ldr	r3, [pc, #84]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 80100a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a4:	4a14      	ldr	r2, [pc, #80]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 80100a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80100aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80100ac:	e005      	b.n	80100ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80100ae:	4b12      	ldr	r3, [pc, #72]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 80100b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100b2:	4a11      	ldr	r2, [pc, #68]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 80100b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80100b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80100ba:	4b0f      	ldr	r3, [pc, #60]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4a0e      	ldr	r2, [pc, #56]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 80100c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80100c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80100c6:	f7f2 f8fd 	bl	80022c4 <HAL_GetTick>
 80100ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80100cc:	e008      	b.n	80100e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80100ce:	f7f2 f8f9 	bl	80022c4 <HAL_GetTick>
 80100d2:	4602      	mov	r2, r0
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	2b02      	cmp	r3, #2
 80100da:	d901      	bls.n	80100e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80100dc:	2303      	movs	r3, #3
 80100de:	e006      	b.n	80100ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80100e0:	4b05      	ldr	r3, [pc, #20]	@ (80100f8 <RCCEx_PLL2_Config+0x15c>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d0f0      	beq.n	80100ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80100ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	58024400 	.word	0x58024400
 80100fc:	ffff0007 	.word	0xffff0007

08010100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801010a:	2300      	movs	r3, #0
 801010c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801010e:	4b53      	ldr	r3, [pc, #332]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010112:	f003 0303 	and.w	r3, r3, #3
 8010116:	2b03      	cmp	r3, #3
 8010118:	d101      	bne.n	801011e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	e099      	b.n	8010252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801011e:	4b4f      	ldr	r3, [pc, #316]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a4e      	ldr	r2, [pc, #312]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801012a:	f7f2 f8cb 	bl	80022c4 <HAL_GetTick>
 801012e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010130:	e008      	b.n	8010144 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010132:	f7f2 f8c7 	bl	80022c4 <HAL_GetTick>
 8010136:	4602      	mov	r2, r0
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	2b02      	cmp	r3, #2
 801013e:	d901      	bls.n	8010144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010140:	2303      	movs	r3, #3
 8010142:	e086      	b.n	8010252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010144:	4b45      	ldr	r3, [pc, #276]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1f0      	bne.n	8010132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010150:	4b42      	ldr	r3, [pc, #264]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010154:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	051b      	lsls	r3, r3, #20
 801015e:	493f      	ldr	r1, [pc, #252]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010160:	4313      	orrs	r3, r2
 8010162:	628b      	str	r3, [r1, #40]	@ 0x28
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	3b01      	subs	r3, #1
 801016a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	689b      	ldr	r3, [r3, #8]
 8010172:	3b01      	subs	r3, #1
 8010174:	025b      	lsls	r3, r3, #9
 8010176:	b29b      	uxth	r3, r3
 8010178:	431a      	orrs	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	68db      	ldr	r3, [r3, #12]
 801017e:	3b01      	subs	r3, #1
 8010180:	041b      	lsls	r3, r3, #16
 8010182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010186:	431a      	orrs	r2, r3
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	691b      	ldr	r3, [r3, #16]
 801018c:	3b01      	subs	r3, #1
 801018e:	061b      	lsls	r3, r3, #24
 8010190:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010194:	4931      	ldr	r1, [pc, #196]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010196:	4313      	orrs	r3, r2
 8010198:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801019a:	4b30      	ldr	r3, [pc, #192]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 801019c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801019e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	695b      	ldr	r3, [r3, #20]
 80101a6:	492d      	ldr	r1, [pc, #180]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101a8:	4313      	orrs	r3, r2
 80101aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80101ac:	4b2b      	ldr	r3, [pc, #172]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	699b      	ldr	r3, [r3, #24]
 80101b8:	4928      	ldr	r1, [pc, #160]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101ba:	4313      	orrs	r3, r2
 80101bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80101be:	4b27      	ldr	r3, [pc, #156]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101c2:	4a26      	ldr	r2, [pc, #152]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80101c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80101ca:	4b24      	ldr	r3, [pc, #144]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80101ce:	4b24      	ldr	r3, [pc, #144]	@ (8010260 <RCCEx_PLL3_Config+0x160>)
 80101d0:	4013      	ands	r3, r2
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	69d2      	ldr	r2, [r2, #28]
 80101d6:	00d2      	lsls	r2, r2, #3
 80101d8:	4920      	ldr	r1, [pc, #128]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101da:	4313      	orrs	r3, r2
 80101dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80101de:	4b1f      	ldr	r3, [pc, #124]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101e2:	4a1e      	ldr	r2, [pc, #120]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80101e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d106      	bne.n	80101fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80101f0:	4b1a      	ldr	r3, [pc, #104]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101f4:	4a19      	ldr	r2, [pc, #100]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 80101f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80101fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80101fc:	e00f      	b.n	801021e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d106      	bne.n	8010212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010204:	4b15      	ldr	r3, [pc, #84]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010208:	4a14      	ldr	r2, [pc, #80]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 801020a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801020e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010210:	e005      	b.n	801021e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010212:	4b12      	ldr	r3, [pc, #72]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010216:	4a11      	ldr	r2, [pc, #68]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010218:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801021c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801021e:	4b0f      	ldr	r3, [pc, #60]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	4a0e      	ldr	r2, [pc, #56]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801022a:	f7f2 f84b 	bl	80022c4 <HAL_GetTick>
 801022e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010230:	e008      	b.n	8010244 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010232:	f7f2 f847 	bl	80022c4 <HAL_GetTick>
 8010236:	4602      	mov	r2, r0
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	2b02      	cmp	r3, #2
 801023e:	d901      	bls.n	8010244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010240:	2303      	movs	r3, #3
 8010242:	e006      	b.n	8010252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010244:	4b05      	ldr	r3, [pc, #20]	@ (801025c <RCCEx_PLL3_Config+0x15c>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801024c:	2b00      	cmp	r3, #0
 801024e:	d0f0      	beq.n	8010232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010250:	7bfb      	ldrb	r3, [r7, #15]
}
 8010252:	4618      	mov	r0, r3
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	58024400 	.word	0x58024400
 8010260:	ffff0007 	.word	0xffff0007

08010264 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d101      	bne.n	8010276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010272:	2301      	movs	r3, #1
 8010274:	e10f      	b.n	8010496 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2200      	movs	r2, #0
 801027a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	4a87      	ldr	r2, [pc, #540]	@ (80104a0 <HAL_SPI_Init+0x23c>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d00f      	beq.n	80102a6 <HAL_SPI_Init+0x42>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4a86      	ldr	r2, [pc, #536]	@ (80104a4 <HAL_SPI_Init+0x240>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d00a      	beq.n	80102a6 <HAL_SPI_Init+0x42>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a84      	ldr	r2, [pc, #528]	@ (80104a8 <HAL_SPI_Init+0x244>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d005      	beq.n	80102a6 <HAL_SPI_Init+0x42>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	2b0f      	cmp	r3, #15
 80102a0:	d901      	bls.n	80102a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80102a2:	2301      	movs	r3, #1
 80102a4:	e0f7      	b.n	8010496 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 ff6c 	bl	8011184 <SPI_GetPacketSize>
 80102ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	4a7b      	ldr	r2, [pc, #492]	@ (80104a0 <HAL_SPI_Init+0x23c>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d00c      	beq.n	80102d2 <HAL_SPI_Init+0x6e>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	4a79      	ldr	r2, [pc, #484]	@ (80104a4 <HAL_SPI_Init+0x240>)
 80102be:	4293      	cmp	r3, r2
 80102c0:	d007      	beq.n	80102d2 <HAL_SPI_Init+0x6e>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	4a78      	ldr	r2, [pc, #480]	@ (80104a8 <HAL_SPI_Init+0x244>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d002      	beq.n	80102d2 <HAL_SPI_Init+0x6e>
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2b08      	cmp	r3, #8
 80102d0:	d811      	bhi.n	80102f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80102d6:	4a72      	ldr	r2, [pc, #456]	@ (80104a0 <HAL_SPI_Init+0x23c>)
 80102d8:	4293      	cmp	r3, r2
 80102da:	d009      	beq.n	80102f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a70      	ldr	r2, [pc, #448]	@ (80104a4 <HAL_SPI_Init+0x240>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d004      	beq.n	80102f0 <HAL_SPI_Init+0x8c>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a6f      	ldr	r2, [pc, #444]	@ (80104a8 <HAL_SPI_Init+0x244>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d104      	bne.n	80102fa <HAL_SPI_Init+0x96>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2b10      	cmp	r3, #16
 80102f4:	d901      	bls.n	80102fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80102f6:	2301      	movs	r3, #1
 80102f8:	e0cd      	b.n	8010496 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010300:	b2db      	uxtb	r3, r3
 8010302:	2b00      	cmp	r3, #0
 8010304:	d106      	bne.n	8010314 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2200      	movs	r2, #0
 801030a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f7f1 fa3a 	bl	8001788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2202      	movs	r2, #2
 8010318:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f022 0201 	bic.w	r2, r2, #1
 801032a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	689b      	ldr	r3, [r3, #8]
 8010332:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8010336:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	699b      	ldr	r3, [r3, #24]
 801033c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010340:	d119      	bne.n	8010376 <HAL_SPI_Init+0x112>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801034a:	d103      	bne.n	8010354 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010350:	2b00      	cmp	r3, #0
 8010352:	d008      	beq.n	8010366 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010358:	2b00      	cmp	r3, #0
 801035a:	d10c      	bne.n	8010376 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010364:	d107      	bne.n	8010376 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010374:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00f      	beq.n	80103a2 <HAL_SPI_Init+0x13e>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	2b06      	cmp	r3, #6
 8010388:	d90b      	bls.n	80103a2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	430a      	orrs	r2, r1
 801039e:	601a      	str	r2, [r3, #0]
 80103a0:	e007      	b.n	80103b2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80103b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	69da      	ldr	r2, [r3, #28]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103ba:	431a      	orrs	r2, r3
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	431a      	orrs	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103c4:	ea42 0103 	orr.w	r1, r2, r3
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	68da      	ldr	r2, [r3, #12]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	430a      	orrs	r2, r1
 80103d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103dc:	431a      	orrs	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103e2:	431a      	orrs	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	699b      	ldr	r3, [r3, #24]
 80103e8:	431a      	orrs	r2, r3
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	691b      	ldr	r3, [r3, #16]
 80103ee:	431a      	orrs	r2, r3
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	695b      	ldr	r3, [r3, #20]
 80103f4:	431a      	orrs	r2, r3
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6a1b      	ldr	r3, [r3, #32]
 80103fa:	431a      	orrs	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	431a      	orrs	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010406:	431a      	orrs	r2, r3
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	689b      	ldr	r3, [r3, #8]
 801040c:	431a      	orrs	r2, r3
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010412:	ea42 0103 	orr.w	r1, r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	430a      	orrs	r2, r1
 8010420:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d113      	bne.n	8010452 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	689b      	ldr	r3, [r3, #8]
 8010430:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801043c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010450:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f022 0201 	bic.w	r2, r2, #1
 8010460:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00a      	beq.n	8010484 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	68db      	ldr	r3, [r3, #12]
 8010474:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	430a      	orrs	r2, r1
 8010482:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2201      	movs	r2, #1
 8010490:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010494:	2300      	movs	r3, #0
}
 8010496:	4618      	mov	r0, r3
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	40013000 	.word	0x40013000
 80104a4:	40003800 	.word	0x40003800
 80104a8:	40003c00 	.word	0x40003c00

080104ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b088      	sub	sp, #32
 80104b0:	af02      	add	r7, sp, #8
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	603b      	str	r3, [r7, #0]
 80104b8:	4613      	mov	r3, r2
 80104ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	3320      	adds	r3, #32
 80104c2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80104c4:	f7f1 fefe 	bl	80022c4 <HAL_GetTick>
 80104c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d001      	beq.n	80104da <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80104d6:	2302      	movs	r3, #2
 80104d8:	e1d1      	b.n	801087e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d002      	beq.n	80104e6 <HAL_SPI_Transmit+0x3a>
 80104e0:	88fb      	ldrh	r3, [r7, #6]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d101      	bne.n	80104ea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80104e6:	2301      	movs	r3, #1
 80104e8:	e1c9      	b.n	801087e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d101      	bne.n	80104f8 <HAL_SPI_Transmit+0x4c>
 80104f4:	2302      	movs	r3, #2
 80104f6:	e1c2      	b.n	801087e <HAL_SPI_Transmit+0x3d2>
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2201      	movs	r2, #1
 80104fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	2203      	movs	r2, #3
 8010504:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2200      	movs	r2, #0
 801050c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	68ba      	ldr	r2, [r7, #8]
 8010514:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	88fa      	ldrh	r2, [r7, #6]
 801051a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	88fa      	ldrh	r2, [r7, #6]
 8010522:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	2200      	movs	r2, #0
 801052a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2200      	movs	r2, #0
 8010530:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2200      	movs	r2, #0
 8010538:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2200      	movs	r2, #0
 8010540:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	2200      	movs	r2, #0
 8010546:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010550:	d108      	bne.n	8010564 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010560:	601a      	str	r2, [r3, #0]
 8010562:	e009      	b.n	8010578 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	68db      	ldr	r3, [r3, #12]
 801056a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010576:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	685a      	ldr	r2, [r3, #4]
 801057e:	4b96      	ldr	r3, [pc, #600]	@ (80107d8 <HAL_SPI_Transmit+0x32c>)
 8010580:	4013      	ands	r3, r2
 8010582:	88f9      	ldrh	r1, [r7, #6]
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	6812      	ldr	r2, [r2, #0]
 8010588:	430b      	orrs	r3, r1
 801058a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f042 0201 	orr.w	r2, r2, #1
 801059a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	685b      	ldr	r3, [r3, #4]
 80105a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80105a4:	d107      	bne.n	80105b6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80105b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	2b0f      	cmp	r3, #15
 80105bc:	d947      	bls.n	801064e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80105be:	e03f      	b.n	8010640 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	695b      	ldr	r3, [r3, #20]
 80105c6:	f003 0302 	and.w	r3, r3, #2
 80105ca:	2b02      	cmp	r3, #2
 80105cc:	d114      	bne.n	80105f8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	6812      	ldr	r2, [r2, #0]
 80105d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105de:	1d1a      	adds	r2, r3, #4
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	3b01      	subs	r3, #1
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80105f6:	e023      	b.n	8010640 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80105f8:	f7f1 fe64 	bl	80022c4 <HAL_GetTick>
 80105fc:	4602      	mov	r2, r0
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	683a      	ldr	r2, [r7, #0]
 8010604:	429a      	cmp	r2, r3
 8010606:	d803      	bhi.n	8010610 <HAL_SPI_Transmit+0x164>
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060e:	d102      	bne.n	8010616 <HAL_SPI_Transmit+0x16a>
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d114      	bne.n	8010640 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f000 fce6 	bl	8010fe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010622:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2201      	movs	r2, #1
 8010630:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	2200      	movs	r2, #0
 8010638:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801063c:	2303      	movs	r3, #3
 801063e:	e11e      	b.n	801087e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010646:	b29b      	uxth	r3, r3
 8010648:	2b00      	cmp	r3, #0
 801064a:	d1b9      	bne.n	80105c0 <HAL_SPI_Transmit+0x114>
 801064c:	e0f1      	b.n	8010832 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	68db      	ldr	r3, [r3, #12]
 8010652:	2b07      	cmp	r3, #7
 8010654:	f240 80e6 	bls.w	8010824 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010658:	e05d      	b.n	8010716 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	695b      	ldr	r3, [r3, #20]
 8010660:	f003 0302 	and.w	r3, r3, #2
 8010664:	2b02      	cmp	r3, #2
 8010666:	d132      	bne.n	80106ce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801066e:	b29b      	uxth	r3, r3
 8010670:	2b01      	cmp	r3, #1
 8010672:	d918      	bls.n	80106a6 <HAL_SPI_Transmit+0x1fa>
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010678:	2b00      	cmp	r3, #0
 801067a:	d014      	beq.n	80106a6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	6812      	ldr	r2, [r2, #0]
 8010686:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801068c:	1d1a      	adds	r2, r3, #4
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010698:	b29b      	uxth	r3, r3
 801069a:	3b02      	subs	r3, #2
 801069c:	b29a      	uxth	r2, r3
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80106a4:	e037      	b.n	8010716 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80106aa:	881a      	ldrh	r2, [r3, #0]
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80106b4:	1c9a      	adds	r2, r3, #2
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	3b01      	subs	r3, #1
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80106cc:	e023      	b.n	8010716 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106ce:	f7f1 fdf9 	bl	80022c4 <HAL_GetTick>
 80106d2:	4602      	mov	r2, r0
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	1ad3      	subs	r3, r2, r3
 80106d8:	683a      	ldr	r2, [r7, #0]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d803      	bhi.n	80106e6 <HAL_SPI_Transmit+0x23a>
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e4:	d102      	bne.n	80106ec <HAL_SPI_Transmit+0x240>
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d114      	bne.n	8010716 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f000 fc7b 	bl	8010fe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	2201      	movs	r2, #1
 8010706:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2200      	movs	r2, #0
 801070e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010712:	2303      	movs	r3, #3
 8010714:	e0b3      	b.n	801087e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801071c:	b29b      	uxth	r3, r3
 801071e:	2b00      	cmp	r3, #0
 8010720:	d19b      	bne.n	801065a <HAL_SPI_Transmit+0x1ae>
 8010722:	e086      	b.n	8010832 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	695b      	ldr	r3, [r3, #20]
 801072a:	f003 0302 	and.w	r3, r3, #2
 801072e:	2b02      	cmp	r3, #2
 8010730:	d154      	bne.n	80107dc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010738:	b29b      	uxth	r3, r3
 801073a:	2b03      	cmp	r3, #3
 801073c:	d918      	bls.n	8010770 <HAL_SPI_Transmit+0x2c4>
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010742:	2b40      	cmp	r3, #64	@ 0x40
 8010744:	d914      	bls.n	8010770 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	6812      	ldr	r2, [r2, #0]
 8010750:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010756:	1d1a      	adds	r2, r3, #4
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010762:	b29b      	uxth	r3, r3
 8010764:	3b04      	subs	r3, #4
 8010766:	b29a      	uxth	r2, r3
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801076e:	e059      	b.n	8010824 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010776:	b29b      	uxth	r3, r3
 8010778:	2b01      	cmp	r3, #1
 801077a:	d917      	bls.n	80107ac <HAL_SPI_Transmit+0x300>
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010780:	2b00      	cmp	r3, #0
 8010782:	d013      	beq.n	80107ac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010788:	881a      	ldrh	r2, [r3, #0]
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010792:	1c9a      	adds	r2, r3, #2
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801079e:	b29b      	uxth	r3, r3
 80107a0:	3b02      	subs	r3, #2
 80107a2:	b29a      	uxth	r2, r3
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80107aa:	e03b      	b.n	8010824 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	3320      	adds	r3, #32
 80107b6:	7812      	ldrb	r2, [r2, #0]
 80107b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	3b01      	subs	r3, #1
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80107d6:	e025      	b.n	8010824 <HAL_SPI_Transmit+0x378>
 80107d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80107dc:	f7f1 fd72 	bl	80022c4 <HAL_GetTick>
 80107e0:	4602      	mov	r2, r0
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	683a      	ldr	r2, [r7, #0]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d803      	bhi.n	80107f4 <HAL_SPI_Transmit+0x348>
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107f2:	d102      	bne.n	80107fa <HAL_SPI_Transmit+0x34e>
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d114      	bne.n	8010824 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80107fa:	68f8      	ldr	r0, [r7, #12]
 80107fc:	f000 fbf4 	bl	8010fe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010806:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2201      	movs	r2, #1
 8010814:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2200      	movs	r2, #0
 801081c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010820:	2303      	movs	r3, #3
 8010822:	e02c      	b.n	801087e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801082a:	b29b      	uxth	r3, r3
 801082c:	2b00      	cmp	r3, #0
 801082e:	f47f af79 	bne.w	8010724 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	2200      	movs	r2, #0
 801083a:	2108      	movs	r1, #8
 801083c:	68f8      	ldr	r0, [r7, #12]
 801083e:	f000 fc73 	bl	8011128 <SPI_WaitOnFlagUntilTimeout>
 8010842:	4603      	mov	r3, r0
 8010844:	2b00      	cmp	r3, #0
 8010846:	d007      	beq.n	8010858 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801084e:	f043 0220 	orr.w	r2, r3, #32
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f000 fbc5 	bl	8010fe8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2201      	movs	r2, #1
 8010862:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2200      	movs	r2, #0
 801086a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010874:	2b00      	cmp	r3, #0
 8010876:	d001      	beq.n	801087c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010878:	2301      	movs	r3, #1
 801087a:	e000      	b.n	801087e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 801087c:	2300      	movs	r3, #0
  }
}
 801087e:	4618      	mov	r0, r3
 8010880:	3718      	adds	r7, #24
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop

08010888 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	4613      	mov	r3, r2
 8010894:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801089c:	b2db      	uxtb	r3, r3
 801089e:	2b01      	cmp	r3, #1
 80108a0:	d001      	beq.n	80108a6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80108a2:	2302      	movs	r3, #2
 80108a4:	e126      	b.n	8010af4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d002      	beq.n	80108b2 <HAL_SPI_Transmit_DMA+0x2a>
 80108ac:	88fb      	ldrh	r3, [r7, #6]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d101      	bne.n	80108b6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80108b2:	2301      	movs	r3, #1
 80108b4:	e11e      	b.n	8010af4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d101      	bne.n	80108c4 <HAL_SPI_Transmit_DMA+0x3c>
 80108c0:	2302      	movs	r3, #2
 80108c2:	e117      	b.n	8010af4 <HAL_SPI_Transmit_DMA+0x26c>
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2201      	movs	r2, #1
 80108c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2203      	movs	r2, #3
 80108d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2200      	movs	r2, #0
 80108d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	68ba      	ldr	r2, [r7, #8]
 80108e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	88fa      	ldrh	r2, [r7, #6]
 80108e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	88fa      	ldrh	r2, [r7, #6]
 80108ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2200      	movs	r2, #0
 80108f6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	2200      	movs	r2, #0
 8010902:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2200      	movs	r2, #0
 8010908:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2200      	movs	r2, #0
 8010910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801091c:	d108      	bne.n	8010930 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801092c:	601a      	str	r2, [r3, #0]
 801092e:	e009      	b.n	8010944 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	68db      	ldr	r3, [r3, #12]
 8010936:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010942:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	68db      	ldr	r3, [r3, #12]
 8010948:	2b0f      	cmp	r3, #15
 801094a:	d905      	bls.n	8010958 <HAL_SPI_Transmit_DMA+0xd0>
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010950:	699b      	ldr	r3, [r3, #24]
 8010952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010956:	d10f      	bne.n	8010978 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801095c:	2b07      	cmp	r3, #7
 801095e:	d911      	bls.n	8010984 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010964:	699b      	ldr	r3, [r3, #24]
 8010966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801096a:	d00b      	beq.n	8010984 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010970:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8010972:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010976:	d005      	beq.n	8010984 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2200      	movs	r2, #0
 801097c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8010980:	2301      	movs	r3, #1
 8010982:	e0b7      	b.n	8010af4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	2b07      	cmp	r3, #7
 801098a:	d820      	bhi.n	80109ce <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010990:	699b      	ldr	r3, [r3, #24]
 8010992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010996:	d109      	bne.n	80109ac <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801099e:	b29b      	uxth	r3, r3
 80109a0:	3301      	adds	r3, #1
 80109a2:	105b      	asrs	r3, r3, #1
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80109b6:	d11e      	bne.n	80109f6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80109be:	b29b      	uxth	r3, r3
 80109c0:	3303      	adds	r3, #3
 80109c2:	109b      	asrs	r3, r3, #2
 80109c4:	b29a      	uxth	r2, r3
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80109cc:	e013      	b.n	80109f6 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	68db      	ldr	r3, [r3, #12]
 80109d2:	2b0f      	cmp	r3, #15
 80109d4:	d80f      	bhi.n	80109f6 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109da:	699b      	ldr	r3, [r3, #24]
 80109dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80109e0:	d109      	bne.n	80109f6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	3301      	adds	r3, #1
 80109ec:	105b      	asrs	r3, r3, #1
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109fa:	4a40      	ldr	r2, [pc, #256]	@ (8010afc <HAL_SPI_Transmit_DMA+0x274>)
 80109fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a02:	4a3f      	ldr	r2, [pc, #252]	@ (8010b00 <HAL_SPI_Transmit_DMA+0x278>)
 8010a04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a0a:	4a3e      	ldr	r2, [pc, #248]	@ (8010b04 <HAL_SPI_Transmit_DMA+0x27c>)
 8010a0c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a12:	2200      	movs	r2, #0
 8010a14:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	689a      	ldr	r2, [r3, #8]
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010a24:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a2e:	4619      	mov	r1, r3
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	3320      	adds	r3, #32
 8010a36:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8010a40:	f7f3 fc12 	bl	8004268 <HAL_DMA_Start_IT>
 8010a44:	4603      	mov	r3, r0
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d011      	beq.n	8010a6e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a50:	f043 0210 	orr.w	r2, r3, #16
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2200      	movs	r2, #0
 8010a66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e042      	b.n	8010af4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a72:	69db      	ldr	r3, [r3, #28]
 8010a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a78:	d108      	bne.n	8010a8c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	6859      	ldr	r1, [r3, #4]
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681a      	ldr	r2, [r3, #0]
 8010a84:	4b20      	ldr	r3, [pc, #128]	@ (8010b08 <HAL_SPI_Transmit_DMA+0x280>)
 8010a86:	400b      	ands	r3, r1
 8010a88:	6053      	str	r3, [r2, #4]
 8010a8a:	e009      	b.n	8010aa0 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	685a      	ldr	r2, [r3, #4]
 8010a92:	4b1d      	ldr	r3, [pc, #116]	@ (8010b08 <HAL_SPI_Transmit_DMA+0x280>)
 8010a94:	4013      	ands	r3, r2
 8010a96:	88f9      	ldrh	r1, [r7, #6]
 8010a98:	68fa      	ldr	r2, [r7, #12]
 8010a9a:	6812      	ldr	r2, [r2, #0]
 8010a9c:	430b      	orrs	r3, r1
 8010a9e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	689a      	ldr	r2, [r3, #8]
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010aae:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	691a      	ldr	r2, [r3, #16]
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8010abe:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f042 0201 	orr.w	r2, r2, #1
 8010ace:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010ad8:	d107      	bne.n	8010aea <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010ae8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2200      	movs	r2, #0
 8010aee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010af2:	2300      	movs	r3, #0
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3710      	adds	r7, #16
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	08010f53 	.word	0x08010f53
 8010b00:	08010f0d 	.word	0x08010f0d
 8010b04:	08010f6f 	.word	0x08010f6f
 8010b08:	ffff0000 	.word	0xffff0000

08010b0c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b08a      	sub	sp, #40	@ 0x28
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	691b      	ldr	r3, [r3, #16]
 8010b1a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	695b      	ldr	r3, [r3, #20]
 8010b22:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8010b24:	6a3a      	ldr	r2, [r7, #32]
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	4013      	ands	r3, r2
 8010b2a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	689b      	ldr	r3, [r3, #8]
 8010b32:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8010b34:	2300      	movs	r3, #0
 8010b36:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010b3e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	3330      	adds	r3, #48	@ 0x30
 8010b46:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d010      	beq.n	8010b74 <HAL_SPI_IRQHandler+0x68>
 8010b52:	6a3b      	ldr	r3, [r7, #32]
 8010b54:	f003 0308 	and.w	r3, r3, #8
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d00b      	beq.n	8010b74 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	699a      	ldr	r2, [r3, #24]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010b6a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f000 f9c3 	bl	8010ef8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8010b72:	e192      	b.n	8010e9a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010b74:	69bb      	ldr	r3, [r7, #24]
 8010b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d113      	bne.n	8010ba6 <HAL_SPI_IRQHandler+0x9a>
 8010b7e:	69bb      	ldr	r3, [r7, #24]
 8010b80:	f003 0320 	and.w	r3, r3, #32
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d10e      	bne.n	8010ba6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d009      	beq.n	8010ba6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	4798      	blx	r3
    hspi->RxISR(hspi);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	4798      	blx	r3
    handled = 1UL;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d10f      	bne.n	8010bd0 <HAL_SPI_IRQHandler+0xc4>
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	f003 0301 	and.w	r3, r3, #1
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00a      	beq.n	8010bd0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010bba:	69bb      	ldr	r3, [r7, #24]
 8010bbc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d105      	bne.n	8010bd0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	4798      	blx	r3
    handled = 1UL;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010bd0:	69bb      	ldr	r3, [r7, #24]
 8010bd2:	f003 0320 	and.w	r3, r3, #32
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d10f      	bne.n	8010bfa <HAL_SPI_IRQHandler+0xee>
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	f003 0302 	and.w	r3, r3, #2
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00a      	beq.n	8010bfa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010be4:	69bb      	ldr	r3, [r7, #24]
 8010be6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d105      	bne.n	8010bfa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	4798      	blx	r3
    handled = 1UL;
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8010bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	f040 8147 	bne.w	8010e90 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	f003 0308 	and.w	r3, r3, #8
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	f000 808b 	beq.w	8010d24 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	699a      	ldr	r2, [r3, #24]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f042 0208 	orr.w	r2, r2, #8
 8010c1c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	699a      	ldr	r2, [r3, #24]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f042 0210 	orr.w	r2, r2, #16
 8010c2c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	699a      	ldr	r2, [r3, #24]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010c3c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	691a      	ldr	r2, [r3, #16]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	f022 0208 	bic.w	r2, r2, #8
 8010c4c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	689b      	ldr	r3, [r3, #8]
 8010c54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d13d      	bne.n	8010cd8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8010c5c:	e036      	b.n	8010ccc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	2b0f      	cmp	r3, #15
 8010c64:	d90b      	bls.n	8010c7e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010c70:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c76:	1d1a      	adds	r2, r3, #4
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	665a      	str	r2, [r3, #100]	@ 0x64
 8010c7c:	e01d      	b.n	8010cba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	2b07      	cmp	r3, #7
 8010c84:	d90b      	bls.n	8010c9e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c8a:	68fa      	ldr	r2, [r7, #12]
 8010c8c:	8812      	ldrh	r2, [r2, #0]
 8010c8e:	b292      	uxth	r2, r2
 8010c90:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c96:	1c9a      	adds	r2, r3, #2
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	665a      	str	r2, [r3, #100]	@ 0x64
 8010c9c:	e00d      	b.n	8010cba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010caa:	7812      	ldrb	r2, [r2, #0]
 8010cac:	b2d2      	uxtb	r2, r2
 8010cae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cb4:	1c5a      	adds	r2, r3, #1
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cd2:	b29b      	uxth	r3, r3
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d1c2      	bne.n	8010c5e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f000 f985 	bl	8010fe8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d003      	beq.n	8010cf8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 f8f7 	bl	8010ee4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010cf6:	e0d0      	b.n	8010e9a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8010cf8:	7cfb      	ldrb	r3, [r7, #19]
 8010cfa:	2b05      	cmp	r3, #5
 8010cfc:	d103      	bne.n	8010d06 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f8dc 	bl	8010ebc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8010d04:	e0c6      	b.n	8010e94 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8010d06:	7cfb      	ldrb	r3, [r7, #19]
 8010d08:	2b04      	cmp	r3, #4
 8010d0a:	d103      	bne.n	8010d14 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f000 f8cb 	bl	8010ea8 <HAL_SPI_RxCpltCallback>
    return;
 8010d12:	e0bf      	b.n	8010e94 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8010d14:	7cfb      	ldrb	r3, [r7, #19]
 8010d16:	2b03      	cmp	r3, #3
 8010d18:	f040 80bc 	bne.w	8010e94 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7f0 f981 	bl	8001024 <HAL_SPI_TxCpltCallback>
    return;
 8010d22:	e0b7      	b.n	8010e94 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8010d24:	69bb      	ldr	r3, [r7, #24]
 8010d26:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	f000 80b5 	beq.w	8010e9a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8010d30:	69bb      	ldr	r3, [r7, #24]
 8010d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00f      	beq.n	8010d5a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d40:	f043 0204 	orr.w	r2, r3, #4
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	699a      	ldr	r2, [r3, #24]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010d58:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8010d5a:	69bb      	ldr	r3, [r7, #24]
 8010d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00f      	beq.n	8010d84 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d6a:	f043 0201 	orr.w	r2, r3, #1
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	699a      	ldr	r2, [r3, #24]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010d82:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d00f      	beq.n	8010dae <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d94:	f043 0208 	orr.w	r2, r3, #8
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	699a      	ldr	r2, [r3, #24]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010dac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8010dae:	69bb      	ldr	r3, [r7, #24]
 8010db0:	f003 0320 	and.w	r3, r3, #32
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d00f      	beq.n	8010dd8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010dbe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	699a      	ldr	r2, [r3, #24]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f042 0220 	orr.w	r2, r2, #32
 8010dd6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d05a      	beq.n	8010e98 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	681a      	ldr	r2, [r3, #0]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f022 0201 	bic.w	r2, r2, #1
 8010df0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	6919      	ldr	r1, [r3, #16]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	4b28      	ldr	r3, [pc, #160]	@ (8010ea0 <HAL_SPI_IRQHandler+0x394>)
 8010dfe:	400b      	ands	r3, r1
 8010e00:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010e08:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010e0c:	d138      	bne.n	8010e80 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	689a      	ldr	r2, [r3, #8]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010e1c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d013      	beq.n	8010e4e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8010ea4 <HAL_SPI_IRQHandler+0x398>)
 8010e2c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7f3 ffa0 	bl	8004d78 <HAL_DMA_Abort_IT>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d007      	beq.n	8010e4e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d020      	beq.n	8010e98 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e5a:	4a12      	ldr	r2, [pc, #72]	@ (8010ea4 <HAL_SPI_IRQHandler+0x398>)
 8010e5c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7f3 ff88 	bl	8004d78 <HAL_DMA_Abort_IT>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d014      	beq.n	8010e98 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010e7e:	e00b      	b.n	8010e98 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2201      	movs	r2, #1
 8010e84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f000 f82b 	bl	8010ee4 <HAL_SPI_ErrorCallback>
    return;
 8010e8e:	e003      	b.n	8010e98 <HAL_SPI_IRQHandler+0x38c>
    return;
 8010e90:	bf00      	nop
 8010e92:	e002      	b.n	8010e9a <HAL_SPI_IRQHandler+0x38e>
    return;
 8010e94:	bf00      	nop
 8010e96:	e000      	b.n	8010e9a <HAL_SPI_IRQHandler+0x38e>
    return;
 8010e98:	bf00      	nop
  }
}
 8010e9a:	3728      	adds	r7, #40	@ 0x28
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	fffffc94 	.word	0xfffffc94
 8010ea4:	08010fb5 	.word	0x08010fb5

08010ea8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010eb0:	bf00      	nop
 8010eb2:	370c      	adds	r7, #12
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eba:	4770      	bx	lr

08010ebc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b083      	sub	sp, #12
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8010ec4:	bf00      	nop
 8010ec6:	370c      	adds	r7, #12
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr

08010ed0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8010ed8:	bf00      	nop
 8010eda:	370c      	adds	r7, #12
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr

08010ee4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010eec:	bf00      	nop
 8010eee:	370c      	adds	r7, #12
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr

08010ef8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8010f00:	bf00      	nop
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b084      	sub	sp, #16
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f18:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	2b07      	cmp	r3, #7
 8010f24:	d011      	beq.n	8010f4a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f2a:	69db      	ldr	r3, [r3, #28]
 8010f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f30:	d103      	bne.n	8010f3a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8010f32:	68f8      	ldr	r0, [r7, #12]
 8010f34:	f7f0 f876 	bl	8001024 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8010f38:	e007      	b.n	8010f4a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	691a      	ldr	r2, [r3, #16]
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	f042 0208 	orr.w	r2, r2, #8
 8010f48:	611a      	str	r2, [r3, #16]
}
 8010f4a:	bf00      	nop
 8010f4c:	3710      	adds	r7, #16
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}

08010f52 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b084      	sub	sp, #16
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f5e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f7ff ffb5 	bl	8010ed0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010f66:	bf00      	nop
 8010f68:	3710      	adds	r7, #16
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b084      	sub	sp, #16
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f7a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f7f5 f879 	bl	8006074 <HAL_DMA_GetError>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b02      	cmp	r3, #2
 8010f86:	d011      	beq.n	8010fac <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f000 f82d 	bl	8010fe8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f94:	f043 0210 	orr.w	r2, r3, #16
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8010fa6:	68f8      	ldr	r0, [r7, #12]
 8010fa8:	f7ff ff9c 	bl	8010ee4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8010fac:	bf00      	nop
 8010fae:	3710      	adds	r7, #16
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b084      	sub	sp, #16
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2201      	movs	r2, #1
 8010fd6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f7ff ff82 	bl	8010ee4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010fe0:	bf00      	nop
 8010fe2:	3710      	adds	r7, #16
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b085      	sub	sp, #20
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	695b      	ldr	r3, [r3, #20]
 8010ff6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	699a      	ldr	r2, [r3, #24]
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	f042 0208 	orr.w	r2, r2, #8
 8011006:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	699a      	ldr	r2, [r3, #24]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f042 0210 	orr.w	r2, r2, #16
 8011016:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	681a      	ldr	r2, [r3, #0]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f022 0201 	bic.w	r2, r2, #1
 8011026:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	6919      	ldr	r1, [r3, #16]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	4b3c      	ldr	r3, [pc, #240]	@ (8011124 <SPI_CloseTransfer+0x13c>)
 8011034:	400b      	ands	r3, r1
 8011036:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	689a      	ldr	r2, [r3, #8]
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011046:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801104e:	b2db      	uxtb	r3, r3
 8011050:	2b04      	cmp	r3, #4
 8011052:	d014      	beq.n	801107e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f003 0320 	and.w	r3, r3, #32
 801105a:	2b00      	cmp	r3, #0
 801105c:	d00f      	beq.n	801107e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011064:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	699a      	ldr	r2, [r3, #24]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f042 0220 	orr.w	r2, r2, #32
 801107c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011084:	b2db      	uxtb	r3, r3
 8011086:	2b03      	cmp	r3, #3
 8011088:	d014      	beq.n	80110b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011090:	2b00      	cmp	r3, #0
 8011092:	d00f      	beq.n	80110b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801109a:	f043 0204 	orr.w	r2, r3, #4
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	699a      	ldr	r2, [r3, #24]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80110b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d00f      	beq.n	80110de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80110c4:	f043 0201 	orr.w	r2, r3, #1
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	699a      	ldr	r2, [r3, #24]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80110dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d00f      	beq.n	8011108 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80110ee:	f043 0208 	orr.w	r2, r3, #8
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	699a      	ldr	r2, [r3, #24]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011106:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2200      	movs	r2, #0
 801110c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2200      	movs	r2, #0
 8011114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8011118:	bf00      	nop
 801111a:	3714      	adds	r7, #20
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr
 8011124:	fffffc90 	.word	0xfffffc90

08011128 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	603b      	str	r3, [r7, #0]
 8011134:	4613      	mov	r3, r2
 8011136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011138:	e010      	b.n	801115c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801113a:	f7f1 f8c3 	bl	80022c4 <HAL_GetTick>
 801113e:	4602      	mov	r2, r0
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	1ad3      	subs	r3, r2, r3
 8011144:	683a      	ldr	r2, [r7, #0]
 8011146:	429a      	cmp	r2, r3
 8011148:	d803      	bhi.n	8011152 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011150:	d102      	bne.n	8011158 <SPI_WaitOnFlagUntilTimeout+0x30>
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d101      	bne.n	801115c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011158:	2303      	movs	r3, #3
 801115a:	e00f      	b.n	801117c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	695a      	ldr	r2, [r3, #20]
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	4013      	ands	r3, r2
 8011166:	68ba      	ldr	r2, [r7, #8]
 8011168:	429a      	cmp	r2, r3
 801116a:	bf0c      	ite	eq
 801116c:	2301      	moveq	r3, #1
 801116e:	2300      	movne	r3, #0
 8011170:	b2db      	uxtb	r3, r3
 8011172:	461a      	mov	r2, r3
 8011174:	79fb      	ldrb	r3, [r7, #7]
 8011176:	429a      	cmp	r2, r3
 8011178:	d0df      	beq.n	801113a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801117a:	2300      	movs	r3, #0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3710      	adds	r7, #16
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011190:	095b      	lsrs	r3, r3, #5
 8011192:	3301      	adds	r3, #1
 8011194:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	3301      	adds	r3, #1
 801119c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	3307      	adds	r3, #7
 80111a2:	08db      	lsrs	r3, r3, #3
 80111a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	68fa      	ldr	r2, [r7, #12]
 80111aa:	fb02 f303 	mul.w	r3, r2, r3
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3714      	adds	r7, #20
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr

080111ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b082      	sub	sp, #8
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d101      	bne.n	80111cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80111c8:	2301      	movs	r3, #1
 80111ca:	e042      	b.n	8011252 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d106      	bne.n	80111e4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2200      	movs	r2, #0
 80111da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f7f0 fb66 	bl	80018b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2224      	movs	r2, #36	@ 0x24
 80111e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	681a      	ldr	r2, [r3, #0]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f022 0201 	bic.w	r2, r2, #1
 80111fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011200:	2b00      	cmp	r3, #0
 8011202:	d002      	beq.n	801120a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f001 f987 	bl	8012518 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 fc1c 	bl	8011a48 <UART_SetConfig>
 8011210:	4603      	mov	r3, r0
 8011212:	2b01      	cmp	r3, #1
 8011214:	d101      	bne.n	801121a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011216:	2301      	movs	r3, #1
 8011218:	e01b      	b.n	8011252 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	685a      	ldr	r2, [r3, #4]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011228:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	689a      	ldr	r2, [r3, #8]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011238:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	f042 0201 	orr.w	r2, r2, #1
 8011248:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f001 fa06 	bl	801265c <UART_CheckIdleState>
 8011250:	4603      	mov	r3, r0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3708      	adds	r7, #8
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
	...

0801125c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b0ba      	sub	sp, #232	@ 0xe8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	69db      	ldr	r3, [r3, #28]
 801126a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	689b      	ldr	r3, [r3, #8]
 801127e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011282:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8011286:	f640 030f 	movw	r3, #2063	@ 0x80f
 801128a:	4013      	ands	r3, r2
 801128c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8011290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011294:	2b00      	cmp	r3, #0
 8011296:	d11b      	bne.n	80112d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801129c:	f003 0320 	and.w	r3, r3, #32
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d015      	beq.n	80112d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80112a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112a8:	f003 0320 	and.w	r3, r3, #32
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d105      	bne.n	80112bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80112b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80112b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d009      	beq.n	80112d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 8393 	beq.w	80119ec <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	4798      	blx	r3
      }
      return;
 80112ce:	e38d      	b.n	80119ec <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80112d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	f000 8123 	beq.w	8011520 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80112da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80112de:	4b8d      	ldr	r3, [pc, #564]	@ (8011514 <HAL_UART_IRQHandler+0x2b8>)
 80112e0:	4013      	ands	r3, r2
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d106      	bne.n	80112f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80112e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80112ea:	4b8b      	ldr	r3, [pc, #556]	@ (8011518 <HAL_UART_IRQHandler+0x2bc>)
 80112ec:	4013      	ands	r3, r2
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	f000 8116 	beq.w	8011520 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80112f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112f8:	f003 0301 	and.w	r3, r3, #1
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d011      	beq.n	8011324 <HAL_UART_IRQHandler+0xc8>
 8011300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00b      	beq.n	8011324 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	2201      	movs	r2, #1
 8011312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801131a:	f043 0201 	orr.w	r2, r3, #1
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011328:	f003 0302 	and.w	r3, r3, #2
 801132c:	2b00      	cmp	r3, #0
 801132e:	d011      	beq.n	8011354 <HAL_UART_IRQHandler+0xf8>
 8011330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011334:	f003 0301 	and.w	r3, r3, #1
 8011338:	2b00      	cmp	r3, #0
 801133a:	d00b      	beq.n	8011354 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2202      	movs	r2, #2
 8011342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801134a:	f043 0204 	orr.w	r2, r3, #4
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011358:	f003 0304 	and.w	r3, r3, #4
 801135c:	2b00      	cmp	r3, #0
 801135e:	d011      	beq.n	8011384 <HAL_UART_IRQHandler+0x128>
 8011360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011364:	f003 0301 	and.w	r3, r3, #1
 8011368:	2b00      	cmp	r3, #0
 801136a:	d00b      	beq.n	8011384 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2204      	movs	r2, #4
 8011372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801137a:	f043 0202 	orr.w	r2, r3, #2
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011388:	f003 0308 	and.w	r3, r3, #8
 801138c:	2b00      	cmp	r3, #0
 801138e:	d017      	beq.n	80113c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011394:	f003 0320 	and.w	r3, r3, #32
 8011398:	2b00      	cmp	r3, #0
 801139a:	d105      	bne.n	80113a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801139c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80113a0:	4b5c      	ldr	r3, [pc, #368]	@ (8011514 <HAL_UART_IRQHandler+0x2b8>)
 80113a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d00b      	beq.n	80113c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	2208      	movs	r2, #8
 80113ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80113b6:	f043 0208 	orr.w	r2, r3, #8
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80113c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80113c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d012      	beq.n	80113f2 <HAL_UART_IRQHandler+0x196>
 80113cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80113d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d00c      	beq.n	80113f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80113e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80113e8:	f043 0220 	orr.w	r2, r3, #32
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f000 82f9 	beq.w	80119f0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80113fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011402:	f003 0320 	and.w	r3, r3, #32
 8011406:	2b00      	cmp	r3, #0
 8011408:	d013      	beq.n	8011432 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801140a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801140e:	f003 0320 	and.w	r3, r3, #32
 8011412:	2b00      	cmp	r3, #0
 8011414:	d105      	bne.n	8011422 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801141a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801141e:	2b00      	cmp	r3, #0
 8011420:	d007      	beq.n	8011432 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011426:	2b00      	cmp	r3, #0
 8011428:	d003      	beq.n	8011432 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011438:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	689b      	ldr	r3, [r3, #8]
 8011442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011446:	2b40      	cmp	r3, #64	@ 0x40
 8011448:	d005      	beq.n	8011456 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801144a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801144e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011452:	2b00      	cmp	r3, #0
 8011454:	d054      	beq.n	8011500 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f001 fa18 	bl	801288c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	689b      	ldr	r3, [r3, #8]
 8011462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011466:	2b40      	cmp	r3, #64	@ 0x40
 8011468:	d146      	bne.n	80114f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	3308      	adds	r3, #8
 8011470:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011474:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011478:	e853 3f00 	ldrex	r3, [r3]
 801147c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011480:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011488:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	3308      	adds	r3, #8
 8011492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8011496:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801149a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801149e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80114a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80114a6:	e841 2300 	strex	r3, r2, [r1]
 80114aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80114ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d1d9      	bne.n	801146a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d017      	beq.n	80114f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80114c6:	4a15      	ldr	r2, [pc, #84]	@ (801151c <HAL_UART_IRQHandler+0x2c0>)
 80114c8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7f3 fc51 	bl	8004d78 <HAL_DMA_Abort_IT>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d019      	beq.n	8011510 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80114e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80114ea:	4610      	mov	r0, r2
 80114ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114ee:	e00f      	b.n	8011510 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f000 fa93 	bl	8011a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114f6:	e00b      	b.n	8011510 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 fa8f 	bl	8011a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114fe:	e007      	b.n	8011510 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f000 fa8b 	bl	8011a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2200      	movs	r2, #0
 801150a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801150e:	e26f      	b.n	80119f0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011510:	bf00      	nop
    return;
 8011512:	e26d      	b.n	80119f0 <HAL_UART_IRQHandler+0x794>
 8011514:	10000001 	.word	0x10000001
 8011518:	04000120 	.word	0x04000120
 801151c:	08012959 	.word	0x08012959

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011524:	2b01      	cmp	r3, #1
 8011526:	f040 8203 	bne.w	8011930 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801152a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801152e:	f003 0310 	and.w	r3, r3, #16
 8011532:	2b00      	cmp	r3, #0
 8011534:	f000 81fc 	beq.w	8011930 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801153c:	f003 0310 	and.w	r3, r3, #16
 8011540:	2b00      	cmp	r3, #0
 8011542:	f000 81f5 	beq.w	8011930 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2210      	movs	r2, #16
 801154c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	689b      	ldr	r3, [r3, #8]
 8011554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011558:	2b40      	cmp	r3, #64	@ 0x40
 801155a:	f040 816d 	bne.w	8011838 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	4aa4      	ldr	r2, [pc, #656]	@ (80117f8 <HAL_UART_IRQHandler+0x59c>)
 8011568:	4293      	cmp	r3, r2
 801156a:	d068      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	4aa1      	ldr	r2, [pc, #644]	@ (80117fc <HAL_UART_IRQHandler+0x5a0>)
 8011576:	4293      	cmp	r3, r2
 8011578:	d061      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	4a9f      	ldr	r2, [pc, #636]	@ (8011800 <HAL_UART_IRQHandler+0x5a4>)
 8011584:	4293      	cmp	r3, r2
 8011586:	d05a      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	4a9c      	ldr	r2, [pc, #624]	@ (8011804 <HAL_UART_IRQHandler+0x5a8>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d053      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	4a9a      	ldr	r2, [pc, #616]	@ (8011808 <HAL_UART_IRQHandler+0x5ac>)
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d04c      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	4a97      	ldr	r2, [pc, #604]	@ (801180c <HAL_UART_IRQHandler+0x5b0>)
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d045      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	4a95      	ldr	r2, [pc, #596]	@ (8011810 <HAL_UART_IRQHandler+0x5b4>)
 80115bc:	4293      	cmp	r3, r2
 80115be:	d03e      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4a92      	ldr	r2, [pc, #584]	@ (8011814 <HAL_UART_IRQHandler+0x5b8>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d037      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4a90      	ldr	r2, [pc, #576]	@ (8011818 <HAL_UART_IRQHandler+0x5bc>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d030      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	4a8d      	ldr	r2, [pc, #564]	@ (801181c <HAL_UART_IRQHandler+0x5c0>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d029      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	4a8b      	ldr	r2, [pc, #556]	@ (8011820 <HAL_UART_IRQHandler+0x5c4>)
 80115f4:	4293      	cmp	r3, r2
 80115f6:	d022      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	4a88      	ldr	r2, [pc, #544]	@ (8011824 <HAL_UART_IRQHandler+0x5c8>)
 8011602:	4293      	cmp	r3, r2
 8011604:	d01b      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	4a86      	ldr	r2, [pc, #536]	@ (8011828 <HAL_UART_IRQHandler+0x5cc>)
 8011610:	4293      	cmp	r3, r2
 8011612:	d014      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	4a83      	ldr	r2, [pc, #524]	@ (801182c <HAL_UART_IRQHandler+0x5d0>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d00d      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	4a81      	ldr	r2, [pc, #516]	@ (8011830 <HAL_UART_IRQHandler+0x5d4>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d006      	beq.n	801163e <HAL_UART_IRQHandler+0x3e2>
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	4a7e      	ldr	r2, [pc, #504]	@ (8011834 <HAL_UART_IRQHandler+0x5d8>)
 801163a:	4293      	cmp	r3, r2
 801163c:	d106      	bne.n	801164c <HAL_UART_IRQHandler+0x3f0>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	b29b      	uxth	r3, r3
 801164a:	e005      	b.n	8011658 <HAL_UART_IRQHandler+0x3fc>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	b29b      	uxth	r3, r3
 8011658:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801165c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011660:	2b00      	cmp	r3, #0
 8011662:	f000 80ad 	beq.w	80117c0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801166c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011670:	429a      	cmp	r2, r3
 8011672:	f080 80a5 	bcs.w	80117c0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801167c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011686:	69db      	ldr	r3, [r3, #28]
 8011688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801168c:	f000 8087 	beq.w	801179e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011698:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801169c:	e853 3f00 	ldrex	r3, [r3]
 80116a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80116a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80116a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80116ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	461a      	mov	r2, r3
 80116b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80116ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80116be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80116c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80116ca:	e841 2300 	strex	r3, r2, [r1]
 80116ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80116d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d1da      	bne.n	8011690 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	3308      	adds	r3, #8
 80116e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80116e4:	e853 3f00 	ldrex	r3, [r3]
 80116e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80116ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80116ec:	f023 0301 	bic.w	r3, r3, #1
 80116f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	3308      	adds	r3, #8
 80116fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80116fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011702:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011704:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011706:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801170a:	e841 2300 	strex	r3, r2, [r1]
 801170e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011712:	2b00      	cmp	r3, #0
 8011714:	d1e1      	bne.n	80116da <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	3308      	adds	r3, #8
 801171c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801171e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011720:	e853 3f00 	ldrex	r3, [r3]
 8011724:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801172c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	3308      	adds	r3, #8
 8011736:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801173a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801173c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801173e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011740:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011742:	e841 2300 	strex	r3, r2, [r1]
 8011746:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011748:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801174a:	2b00      	cmp	r3, #0
 801174c:	d1e3      	bne.n	8011716 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2220      	movs	r2, #32
 8011752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2200      	movs	r2, #0
 801175a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011764:	e853 3f00 	ldrex	r3, [r3]
 8011768:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801176a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801176c:	f023 0310 	bic.w	r3, r3, #16
 8011770:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	461a      	mov	r2, r3
 801177a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801177e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011780:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011782:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011784:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011786:	e841 2300 	strex	r3, r2, [r1]
 801178a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801178c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801178e:	2b00      	cmp	r3, #0
 8011790:	d1e4      	bne.n	801175c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011798:	4618      	mov	r0, r3
 801179a:	f7f2 ffcf 	bl	800473c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2202      	movs	r2, #2
 80117a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	1ad3      	subs	r3, r2, r3
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	4619      	mov	r1, r3
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f000 f939 	bl	8011a30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80117be:	e119      	b.n	80119f4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80117c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80117ca:	429a      	cmp	r2, r3
 80117cc:	f040 8112 	bne.w	80119f4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117d6:	69db      	ldr	r3, [r3, #28]
 80117d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117dc:	f040 810a 	bne.w	80119f4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2202      	movs	r2, #2
 80117e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80117ec:	4619      	mov	r1, r3
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 f91e 	bl	8011a30 <HAL_UARTEx_RxEventCallback>
      return;
 80117f4:	e0fe      	b.n	80119f4 <HAL_UART_IRQHandler+0x798>
 80117f6:	bf00      	nop
 80117f8:	40020010 	.word	0x40020010
 80117fc:	40020028 	.word	0x40020028
 8011800:	40020040 	.word	0x40020040
 8011804:	40020058 	.word	0x40020058
 8011808:	40020070 	.word	0x40020070
 801180c:	40020088 	.word	0x40020088
 8011810:	400200a0 	.word	0x400200a0
 8011814:	400200b8 	.word	0x400200b8
 8011818:	40020410 	.word	0x40020410
 801181c:	40020428 	.word	0x40020428
 8011820:	40020440 	.word	0x40020440
 8011824:	40020458 	.word	0x40020458
 8011828:	40020470 	.word	0x40020470
 801182c:	40020488 	.word	0x40020488
 8011830:	400204a0 	.word	0x400204a0
 8011834:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011844:	b29b      	uxth	r3, r3
 8011846:	1ad3      	subs	r3, r2, r3
 8011848:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011852:	b29b      	uxth	r3, r3
 8011854:	2b00      	cmp	r3, #0
 8011856:	f000 80cf 	beq.w	80119f8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801185a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801185e:	2b00      	cmp	r3, #0
 8011860:	f000 80ca 	beq.w	80119f8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801186a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801186c:	e853 3f00 	ldrex	r3, [r3]
 8011870:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011878:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	461a      	mov	r2, r3
 8011882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011886:	647b      	str	r3, [r7, #68]	@ 0x44
 8011888:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801188a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801188c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801188e:	e841 2300 	strex	r3, r2, [r1]
 8011892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011896:	2b00      	cmp	r3, #0
 8011898:	d1e4      	bne.n	8011864 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	3308      	adds	r3, #8
 80118a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a4:	e853 3f00 	ldrex	r3, [r3]
 80118a8:	623b      	str	r3, [r7, #32]
   return(result);
 80118aa:	6a3a      	ldr	r2, [r7, #32]
 80118ac:	4b55      	ldr	r3, [pc, #340]	@ (8011a04 <HAL_UART_IRQHandler+0x7a8>)
 80118ae:	4013      	ands	r3, r2
 80118b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	3308      	adds	r3, #8
 80118ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80118be:	633a      	str	r2, [r7, #48]	@ 0x30
 80118c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80118c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118c6:	e841 2300 	strex	r3, r2, [r1]
 80118ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80118cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1e3      	bne.n	801189a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2220      	movs	r2, #32
 80118d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2200      	movs	r2, #0
 80118de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	e853 3f00 	ldrex	r3, [r3]
 80118f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f023 0310 	bic.w	r3, r3, #16
 80118fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	461a      	mov	r2, r3
 8011904:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011908:	61fb      	str	r3, [r7, #28]
 801190a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801190c:	69b9      	ldr	r1, [r7, #24]
 801190e:	69fa      	ldr	r2, [r7, #28]
 8011910:	e841 2300 	strex	r3, r2, [r1]
 8011914:	617b      	str	r3, [r7, #20]
   return(result);
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d1e4      	bne.n	80118e6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2202      	movs	r2, #2
 8011920:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011922:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011926:	4619      	mov	r1, r3
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f000 f881 	bl	8011a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801192e:	e063      	b.n	80119f8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011934:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011938:	2b00      	cmp	r3, #0
 801193a:	d00e      	beq.n	801195a <HAL_UART_IRQHandler+0x6fe>
 801193c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011944:	2b00      	cmp	r3, #0
 8011946:	d008      	beq.n	801195a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011950:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f001 f83d 	bl	80129d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011958:	e051      	b.n	80119fe <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801195a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801195e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011962:	2b00      	cmp	r3, #0
 8011964:	d014      	beq.n	8011990 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801196a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801196e:	2b00      	cmp	r3, #0
 8011970:	d105      	bne.n	801197e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801197a:	2b00      	cmp	r3, #0
 801197c:	d008      	beq.n	8011990 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011982:	2b00      	cmp	r3, #0
 8011984:	d03a      	beq.n	80119fc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	4798      	blx	r3
    }
    return;
 801198e:	e035      	b.n	80119fc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011998:	2b00      	cmp	r3, #0
 801199a:	d009      	beq.n	80119b0 <HAL_UART_IRQHandler+0x754>
 801199c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80119a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d003      	beq.n	80119b0 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f000 ffe7 	bl	801297c <UART_EndTransmit_IT>
    return;
 80119ae:	e026      	b.n	80119fe <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80119b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80119b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d009      	beq.n	80119d0 <HAL_UART_IRQHandler+0x774>
 80119bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80119c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d003      	beq.n	80119d0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f001 f816 	bl	80129fa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80119ce:	e016      	b.n	80119fe <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80119d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80119d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d010      	beq.n	80119fe <HAL_UART_IRQHandler+0x7a2>
 80119dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	da0c      	bge.n	80119fe <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f000 fffe 	bl	80129e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80119ea:	e008      	b.n	80119fe <HAL_UART_IRQHandler+0x7a2>
      return;
 80119ec:	bf00      	nop
 80119ee:	e006      	b.n	80119fe <HAL_UART_IRQHandler+0x7a2>
    return;
 80119f0:	bf00      	nop
 80119f2:	e004      	b.n	80119fe <HAL_UART_IRQHandler+0x7a2>
      return;
 80119f4:	bf00      	nop
 80119f6:	e002      	b.n	80119fe <HAL_UART_IRQHandler+0x7a2>
      return;
 80119f8:	bf00      	nop
 80119fa:	e000      	b.n	80119fe <HAL_UART_IRQHandler+0x7a2>
    return;
 80119fc:	bf00      	nop
  }
}
 80119fe:	37e8      	adds	r7, #232	@ 0xe8
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}
 8011a04:	effffffe 	.word	0xeffffffe

08011a08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b083      	sub	sp, #12
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011a10:	bf00      	nop
 8011a12:	370c      	adds	r7, #12
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr

08011a1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b083      	sub	sp, #12
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011a24:	bf00      	nop
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr

08011a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011a30:	b480      	push	{r7}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	460b      	mov	r3, r1
 8011a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011a3c:	bf00      	nop
 8011a3e:	370c      	adds	r7, #12
 8011a40:	46bd      	mov	sp, r7
 8011a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a46:	4770      	bx	lr

08011a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a4c:	b092      	sub	sp, #72	@ 0x48
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011a52:	2300      	movs	r3, #0
 8011a54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	689a      	ldr	r2, [r3, #8]
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	691b      	ldr	r3, [r3, #16]
 8011a60:	431a      	orrs	r2, r3
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	695b      	ldr	r3, [r3, #20]
 8011a66:	431a      	orrs	r2, r3
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	69db      	ldr	r3, [r3, #28]
 8011a6c:	4313      	orrs	r3, r2
 8011a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011a70:	697b      	ldr	r3, [r7, #20]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	4bbe      	ldr	r3, [pc, #760]	@ (8011d70 <UART_SetConfig+0x328>)
 8011a78:	4013      	ands	r3, r2
 8011a7a:	697a      	ldr	r2, [r7, #20]
 8011a7c:	6812      	ldr	r2, [r2, #0]
 8011a7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011a80:	430b      	orrs	r3, r1
 8011a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	68da      	ldr	r2, [r3, #12]
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	430a      	orrs	r2, r1
 8011a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	699b      	ldr	r3, [r3, #24]
 8011a9e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4ab3      	ldr	r2, [pc, #716]	@ (8011d74 <UART_SetConfig+0x32c>)
 8011aa6:	4293      	cmp	r3, r2
 8011aa8:	d004      	beq.n	8011ab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	6a1b      	ldr	r3, [r3, #32]
 8011aae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ab0:	4313      	orrs	r3, r2
 8011ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	689a      	ldr	r2, [r3, #8]
 8011aba:	4baf      	ldr	r3, [pc, #700]	@ (8011d78 <UART_SetConfig+0x330>)
 8011abc:	4013      	ands	r3, r2
 8011abe:	697a      	ldr	r2, [r7, #20]
 8011ac0:	6812      	ldr	r2, [r2, #0]
 8011ac2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011ac4:	430b      	orrs	r3, r1
 8011ac6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ace:	f023 010f 	bic.w	r1, r3, #15
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	430a      	orrs	r2, r1
 8011adc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	4aa6      	ldr	r2, [pc, #664]	@ (8011d7c <UART_SetConfig+0x334>)
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d177      	bne.n	8011bd8 <UART_SetConfig+0x190>
 8011ae8:	4ba5      	ldr	r3, [pc, #660]	@ (8011d80 <UART_SetConfig+0x338>)
 8011aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011aec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011af0:	2b28      	cmp	r3, #40	@ 0x28
 8011af2:	d86d      	bhi.n	8011bd0 <UART_SetConfig+0x188>
 8011af4:	a201      	add	r2, pc, #4	@ (adr r2, 8011afc <UART_SetConfig+0xb4>)
 8011af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011afa:	bf00      	nop
 8011afc:	08011ba1 	.word	0x08011ba1
 8011b00:	08011bd1 	.word	0x08011bd1
 8011b04:	08011bd1 	.word	0x08011bd1
 8011b08:	08011bd1 	.word	0x08011bd1
 8011b0c:	08011bd1 	.word	0x08011bd1
 8011b10:	08011bd1 	.word	0x08011bd1
 8011b14:	08011bd1 	.word	0x08011bd1
 8011b18:	08011bd1 	.word	0x08011bd1
 8011b1c:	08011ba9 	.word	0x08011ba9
 8011b20:	08011bd1 	.word	0x08011bd1
 8011b24:	08011bd1 	.word	0x08011bd1
 8011b28:	08011bd1 	.word	0x08011bd1
 8011b2c:	08011bd1 	.word	0x08011bd1
 8011b30:	08011bd1 	.word	0x08011bd1
 8011b34:	08011bd1 	.word	0x08011bd1
 8011b38:	08011bd1 	.word	0x08011bd1
 8011b3c:	08011bb1 	.word	0x08011bb1
 8011b40:	08011bd1 	.word	0x08011bd1
 8011b44:	08011bd1 	.word	0x08011bd1
 8011b48:	08011bd1 	.word	0x08011bd1
 8011b4c:	08011bd1 	.word	0x08011bd1
 8011b50:	08011bd1 	.word	0x08011bd1
 8011b54:	08011bd1 	.word	0x08011bd1
 8011b58:	08011bd1 	.word	0x08011bd1
 8011b5c:	08011bb9 	.word	0x08011bb9
 8011b60:	08011bd1 	.word	0x08011bd1
 8011b64:	08011bd1 	.word	0x08011bd1
 8011b68:	08011bd1 	.word	0x08011bd1
 8011b6c:	08011bd1 	.word	0x08011bd1
 8011b70:	08011bd1 	.word	0x08011bd1
 8011b74:	08011bd1 	.word	0x08011bd1
 8011b78:	08011bd1 	.word	0x08011bd1
 8011b7c:	08011bc1 	.word	0x08011bc1
 8011b80:	08011bd1 	.word	0x08011bd1
 8011b84:	08011bd1 	.word	0x08011bd1
 8011b88:	08011bd1 	.word	0x08011bd1
 8011b8c:	08011bd1 	.word	0x08011bd1
 8011b90:	08011bd1 	.word	0x08011bd1
 8011b94:	08011bd1 	.word	0x08011bd1
 8011b98:	08011bd1 	.word	0x08011bd1
 8011b9c:	08011bc9 	.word	0x08011bc9
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ba6:	e222      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011ba8:	2304      	movs	r3, #4
 8011baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bae:	e21e      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011bb0:	2308      	movs	r3, #8
 8011bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bb6:	e21a      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011bb8:	2310      	movs	r3, #16
 8011bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bbe:	e216      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011bc0:	2320      	movs	r3, #32
 8011bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bc6:	e212      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011bc8:	2340      	movs	r3, #64	@ 0x40
 8011bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bce:	e20e      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011bd0:	2380      	movs	r3, #128	@ 0x80
 8011bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bd6:	e20a      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	4a69      	ldr	r2, [pc, #420]	@ (8011d84 <UART_SetConfig+0x33c>)
 8011bde:	4293      	cmp	r3, r2
 8011be0:	d130      	bne.n	8011c44 <UART_SetConfig+0x1fc>
 8011be2:	4b67      	ldr	r3, [pc, #412]	@ (8011d80 <UART_SetConfig+0x338>)
 8011be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011be6:	f003 0307 	and.w	r3, r3, #7
 8011bea:	2b05      	cmp	r3, #5
 8011bec:	d826      	bhi.n	8011c3c <UART_SetConfig+0x1f4>
 8011bee:	a201      	add	r2, pc, #4	@ (adr r2, 8011bf4 <UART_SetConfig+0x1ac>)
 8011bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf4:	08011c0d 	.word	0x08011c0d
 8011bf8:	08011c15 	.word	0x08011c15
 8011bfc:	08011c1d 	.word	0x08011c1d
 8011c00:	08011c25 	.word	0x08011c25
 8011c04:	08011c2d 	.word	0x08011c2d
 8011c08:	08011c35 	.word	0x08011c35
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c12:	e1ec      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c14:	2304      	movs	r3, #4
 8011c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c1a:	e1e8      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c1c:	2308      	movs	r3, #8
 8011c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c22:	e1e4      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c24:	2310      	movs	r3, #16
 8011c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c2a:	e1e0      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c2c:	2320      	movs	r3, #32
 8011c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c32:	e1dc      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c34:	2340      	movs	r3, #64	@ 0x40
 8011c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c3a:	e1d8      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c3c:	2380      	movs	r3, #128	@ 0x80
 8011c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c42:	e1d4      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	4a4f      	ldr	r2, [pc, #316]	@ (8011d88 <UART_SetConfig+0x340>)
 8011c4a:	4293      	cmp	r3, r2
 8011c4c:	d130      	bne.n	8011cb0 <UART_SetConfig+0x268>
 8011c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8011d80 <UART_SetConfig+0x338>)
 8011c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c52:	f003 0307 	and.w	r3, r3, #7
 8011c56:	2b05      	cmp	r3, #5
 8011c58:	d826      	bhi.n	8011ca8 <UART_SetConfig+0x260>
 8011c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8011c60 <UART_SetConfig+0x218>)
 8011c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c60:	08011c79 	.word	0x08011c79
 8011c64:	08011c81 	.word	0x08011c81
 8011c68:	08011c89 	.word	0x08011c89
 8011c6c:	08011c91 	.word	0x08011c91
 8011c70:	08011c99 	.word	0x08011c99
 8011c74:	08011ca1 	.word	0x08011ca1
 8011c78:	2300      	movs	r3, #0
 8011c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c7e:	e1b6      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c80:	2304      	movs	r3, #4
 8011c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c86:	e1b2      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c88:	2308      	movs	r3, #8
 8011c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c8e:	e1ae      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c90:	2310      	movs	r3, #16
 8011c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c96:	e1aa      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011c98:	2320      	movs	r3, #32
 8011c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c9e:	e1a6      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011ca0:	2340      	movs	r3, #64	@ 0x40
 8011ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ca6:	e1a2      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011ca8:	2380      	movs	r3, #128	@ 0x80
 8011caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cae:	e19e      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4a35      	ldr	r2, [pc, #212]	@ (8011d8c <UART_SetConfig+0x344>)
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	d130      	bne.n	8011d1c <UART_SetConfig+0x2d4>
 8011cba:	4b31      	ldr	r3, [pc, #196]	@ (8011d80 <UART_SetConfig+0x338>)
 8011cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011cbe:	f003 0307 	and.w	r3, r3, #7
 8011cc2:	2b05      	cmp	r3, #5
 8011cc4:	d826      	bhi.n	8011d14 <UART_SetConfig+0x2cc>
 8011cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8011ccc <UART_SetConfig+0x284>)
 8011cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ccc:	08011ce5 	.word	0x08011ce5
 8011cd0:	08011ced 	.word	0x08011ced
 8011cd4:	08011cf5 	.word	0x08011cf5
 8011cd8:	08011cfd 	.word	0x08011cfd
 8011cdc:	08011d05 	.word	0x08011d05
 8011ce0:	08011d0d 	.word	0x08011d0d
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cea:	e180      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011cec:	2304      	movs	r3, #4
 8011cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cf2:	e17c      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011cf4:	2308      	movs	r3, #8
 8011cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cfa:	e178      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011cfc:	2310      	movs	r3, #16
 8011cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d02:	e174      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011d04:	2320      	movs	r3, #32
 8011d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d0a:	e170      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011d0c:	2340      	movs	r3, #64	@ 0x40
 8011d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d12:	e16c      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011d14:	2380      	movs	r3, #128	@ 0x80
 8011d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d1a:	e168      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	4a1b      	ldr	r2, [pc, #108]	@ (8011d90 <UART_SetConfig+0x348>)
 8011d22:	4293      	cmp	r3, r2
 8011d24:	d142      	bne.n	8011dac <UART_SetConfig+0x364>
 8011d26:	4b16      	ldr	r3, [pc, #88]	@ (8011d80 <UART_SetConfig+0x338>)
 8011d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d2a:	f003 0307 	and.w	r3, r3, #7
 8011d2e:	2b05      	cmp	r3, #5
 8011d30:	d838      	bhi.n	8011da4 <UART_SetConfig+0x35c>
 8011d32:	a201      	add	r2, pc, #4	@ (adr r2, 8011d38 <UART_SetConfig+0x2f0>)
 8011d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d38:	08011d51 	.word	0x08011d51
 8011d3c:	08011d59 	.word	0x08011d59
 8011d40:	08011d61 	.word	0x08011d61
 8011d44:	08011d69 	.word	0x08011d69
 8011d48:	08011d95 	.word	0x08011d95
 8011d4c:	08011d9d 	.word	0x08011d9d
 8011d50:	2300      	movs	r3, #0
 8011d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d56:	e14a      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011d58:	2304      	movs	r3, #4
 8011d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d5e:	e146      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011d60:	2308      	movs	r3, #8
 8011d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d66:	e142      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011d68:	2310      	movs	r3, #16
 8011d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d6e:	e13e      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011d70:	cfff69f3 	.word	0xcfff69f3
 8011d74:	58000c00 	.word	0x58000c00
 8011d78:	11fff4ff 	.word	0x11fff4ff
 8011d7c:	40011000 	.word	0x40011000
 8011d80:	58024400 	.word	0x58024400
 8011d84:	40004400 	.word	0x40004400
 8011d88:	40004800 	.word	0x40004800
 8011d8c:	40004c00 	.word	0x40004c00
 8011d90:	40005000 	.word	0x40005000
 8011d94:	2320      	movs	r3, #32
 8011d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d9a:	e128      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011d9c:	2340      	movs	r3, #64	@ 0x40
 8011d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011da2:	e124      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011da4:	2380      	movs	r3, #128	@ 0x80
 8011da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011daa:	e120      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	4acb      	ldr	r2, [pc, #812]	@ (80120e0 <UART_SetConfig+0x698>)
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d176      	bne.n	8011ea4 <UART_SetConfig+0x45c>
 8011db6:	4bcb      	ldr	r3, [pc, #812]	@ (80120e4 <UART_SetConfig+0x69c>)
 8011db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011dba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011dbe:	2b28      	cmp	r3, #40	@ 0x28
 8011dc0:	d86c      	bhi.n	8011e9c <UART_SetConfig+0x454>
 8011dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8011dc8 <UART_SetConfig+0x380>)
 8011dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dc8:	08011e6d 	.word	0x08011e6d
 8011dcc:	08011e9d 	.word	0x08011e9d
 8011dd0:	08011e9d 	.word	0x08011e9d
 8011dd4:	08011e9d 	.word	0x08011e9d
 8011dd8:	08011e9d 	.word	0x08011e9d
 8011ddc:	08011e9d 	.word	0x08011e9d
 8011de0:	08011e9d 	.word	0x08011e9d
 8011de4:	08011e9d 	.word	0x08011e9d
 8011de8:	08011e75 	.word	0x08011e75
 8011dec:	08011e9d 	.word	0x08011e9d
 8011df0:	08011e9d 	.word	0x08011e9d
 8011df4:	08011e9d 	.word	0x08011e9d
 8011df8:	08011e9d 	.word	0x08011e9d
 8011dfc:	08011e9d 	.word	0x08011e9d
 8011e00:	08011e9d 	.word	0x08011e9d
 8011e04:	08011e9d 	.word	0x08011e9d
 8011e08:	08011e7d 	.word	0x08011e7d
 8011e0c:	08011e9d 	.word	0x08011e9d
 8011e10:	08011e9d 	.word	0x08011e9d
 8011e14:	08011e9d 	.word	0x08011e9d
 8011e18:	08011e9d 	.word	0x08011e9d
 8011e1c:	08011e9d 	.word	0x08011e9d
 8011e20:	08011e9d 	.word	0x08011e9d
 8011e24:	08011e9d 	.word	0x08011e9d
 8011e28:	08011e85 	.word	0x08011e85
 8011e2c:	08011e9d 	.word	0x08011e9d
 8011e30:	08011e9d 	.word	0x08011e9d
 8011e34:	08011e9d 	.word	0x08011e9d
 8011e38:	08011e9d 	.word	0x08011e9d
 8011e3c:	08011e9d 	.word	0x08011e9d
 8011e40:	08011e9d 	.word	0x08011e9d
 8011e44:	08011e9d 	.word	0x08011e9d
 8011e48:	08011e8d 	.word	0x08011e8d
 8011e4c:	08011e9d 	.word	0x08011e9d
 8011e50:	08011e9d 	.word	0x08011e9d
 8011e54:	08011e9d 	.word	0x08011e9d
 8011e58:	08011e9d 	.word	0x08011e9d
 8011e5c:	08011e9d 	.word	0x08011e9d
 8011e60:	08011e9d 	.word	0x08011e9d
 8011e64:	08011e9d 	.word	0x08011e9d
 8011e68:	08011e95 	.word	0x08011e95
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e72:	e0bc      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011e74:	2304      	movs	r3, #4
 8011e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e7a:	e0b8      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011e7c:	2308      	movs	r3, #8
 8011e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e82:	e0b4      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011e84:	2310      	movs	r3, #16
 8011e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e8a:	e0b0      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011e8c:	2320      	movs	r3, #32
 8011e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e92:	e0ac      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011e94:	2340      	movs	r3, #64	@ 0x40
 8011e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e9a:	e0a8      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011e9c:	2380      	movs	r3, #128	@ 0x80
 8011e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ea2:	e0a4      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4a8f      	ldr	r2, [pc, #572]	@ (80120e8 <UART_SetConfig+0x6a0>)
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	d130      	bne.n	8011f10 <UART_SetConfig+0x4c8>
 8011eae:	4b8d      	ldr	r3, [pc, #564]	@ (80120e4 <UART_SetConfig+0x69c>)
 8011eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011eb2:	f003 0307 	and.w	r3, r3, #7
 8011eb6:	2b05      	cmp	r3, #5
 8011eb8:	d826      	bhi.n	8011f08 <UART_SetConfig+0x4c0>
 8011eba:	a201      	add	r2, pc, #4	@ (adr r2, 8011ec0 <UART_SetConfig+0x478>)
 8011ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec0:	08011ed9 	.word	0x08011ed9
 8011ec4:	08011ee1 	.word	0x08011ee1
 8011ec8:	08011ee9 	.word	0x08011ee9
 8011ecc:	08011ef1 	.word	0x08011ef1
 8011ed0:	08011ef9 	.word	0x08011ef9
 8011ed4:	08011f01 	.word	0x08011f01
 8011ed8:	2300      	movs	r3, #0
 8011eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ede:	e086      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011ee0:	2304      	movs	r3, #4
 8011ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ee6:	e082      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011ee8:	2308      	movs	r3, #8
 8011eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011eee:	e07e      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011ef0:	2310      	movs	r3, #16
 8011ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ef6:	e07a      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011ef8:	2320      	movs	r3, #32
 8011efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011efe:	e076      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011f00:	2340      	movs	r3, #64	@ 0x40
 8011f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f06:	e072      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011f08:	2380      	movs	r3, #128	@ 0x80
 8011f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f0e:	e06e      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4a75      	ldr	r2, [pc, #468]	@ (80120ec <UART_SetConfig+0x6a4>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d130      	bne.n	8011f7c <UART_SetConfig+0x534>
 8011f1a:	4b72      	ldr	r3, [pc, #456]	@ (80120e4 <UART_SetConfig+0x69c>)
 8011f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f1e:	f003 0307 	and.w	r3, r3, #7
 8011f22:	2b05      	cmp	r3, #5
 8011f24:	d826      	bhi.n	8011f74 <UART_SetConfig+0x52c>
 8011f26:	a201      	add	r2, pc, #4	@ (adr r2, 8011f2c <UART_SetConfig+0x4e4>)
 8011f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f2c:	08011f45 	.word	0x08011f45
 8011f30:	08011f4d 	.word	0x08011f4d
 8011f34:	08011f55 	.word	0x08011f55
 8011f38:	08011f5d 	.word	0x08011f5d
 8011f3c:	08011f65 	.word	0x08011f65
 8011f40:	08011f6d 	.word	0x08011f6d
 8011f44:	2300      	movs	r3, #0
 8011f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f4a:	e050      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011f4c:	2304      	movs	r3, #4
 8011f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f52:	e04c      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011f54:	2308      	movs	r3, #8
 8011f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f5a:	e048      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011f5c:	2310      	movs	r3, #16
 8011f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f62:	e044      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011f64:	2320      	movs	r3, #32
 8011f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f6a:	e040      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011f6c:	2340      	movs	r3, #64	@ 0x40
 8011f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f72:	e03c      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011f74:	2380      	movs	r3, #128	@ 0x80
 8011f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f7a:	e038      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	4a5b      	ldr	r2, [pc, #364]	@ (80120f0 <UART_SetConfig+0x6a8>)
 8011f82:	4293      	cmp	r3, r2
 8011f84:	d130      	bne.n	8011fe8 <UART_SetConfig+0x5a0>
 8011f86:	4b57      	ldr	r3, [pc, #348]	@ (80120e4 <UART_SetConfig+0x69c>)
 8011f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f8a:	f003 0307 	and.w	r3, r3, #7
 8011f8e:	2b05      	cmp	r3, #5
 8011f90:	d826      	bhi.n	8011fe0 <UART_SetConfig+0x598>
 8011f92:	a201      	add	r2, pc, #4	@ (adr r2, 8011f98 <UART_SetConfig+0x550>)
 8011f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f98:	08011fb1 	.word	0x08011fb1
 8011f9c:	08011fb9 	.word	0x08011fb9
 8011fa0:	08011fc1 	.word	0x08011fc1
 8011fa4:	08011fc9 	.word	0x08011fc9
 8011fa8:	08011fd1 	.word	0x08011fd1
 8011fac:	08011fd9 	.word	0x08011fd9
 8011fb0:	2302      	movs	r3, #2
 8011fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fb6:	e01a      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011fb8:	2304      	movs	r3, #4
 8011fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fbe:	e016      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011fc0:	2308      	movs	r3, #8
 8011fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fc6:	e012      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011fc8:	2310      	movs	r3, #16
 8011fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fce:	e00e      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011fd0:	2320      	movs	r3, #32
 8011fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fd6:	e00a      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011fd8:	2340      	movs	r3, #64	@ 0x40
 8011fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fde:	e006      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011fe0:	2380      	movs	r3, #128	@ 0x80
 8011fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fe6:	e002      	b.n	8011fee <UART_SetConfig+0x5a6>
 8011fe8:	2380      	movs	r3, #128	@ 0x80
 8011fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80120f0 <UART_SetConfig+0x6a8>)
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	f040 80f8 	bne.w	80121ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011ffa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011ffe:	2b20      	cmp	r3, #32
 8012000:	dc46      	bgt.n	8012090 <UART_SetConfig+0x648>
 8012002:	2b02      	cmp	r3, #2
 8012004:	f2c0 8082 	blt.w	801210c <UART_SetConfig+0x6c4>
 8012008:	3b02      	subs	r3, #2
 801200a:	2b1e      	cmp	r3, #30
 801200c:	d87e      	bhi.n	801210c <UART_SetConfig+0x6c4>
 801200e:	a201      	add	r2, pc, #4	@ (adr r2, 8012014 <UART_SetConfig+0x5cc>)
 8012010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012014:	08012097 	.word	0x08012097
 8012018:	0801210d 	.word	0x0801210d
 801201c:	0801209f 	.word	0x0801209f
 8012020:	0801210d 	.word	0x0801210d
 8012024:	0801210d 	.word	0x0801210d
 8012028:	0801210d 	.word	0x0801210d
 801202c:	080120af 	.word	0x080120af
 8012030:	0801210d 	.word	0x0801210d
 8012034:	0801210d 	.word	0x0801210d
 8012038:	0801210d 	.word	0x0801210d
 801203c:	0801210d 	.word	0x0801210d
 8012040:	0801210d 	.word	0x0801210d
 8012044:	0801210d 	.word	0x0801210d
 8012048:	0801210d 	.word	0x0801210d
 801204c:	080120bf 	.word	0x080120bf
 8012050:	0801210d 	.word	0x0801210d
 8012054:	0801210d 	.word	0x0801210d
 8012058:	0801210d 	.word	0x0801210d
 801205c:	0801210d 	.word	0x0801210d
 8012060:	0801210d 	.word	0x0801210d
 8012064:	0801210d 	.word	0x0801210d
 8012068:	0801210d 	.word	0x0801210d
 801206c:	0801210d 	.word	0x0801210d
 8012070:	0801210d 	.word	0x0801210d
 8012074:	0801210d 	.word	0x0801210d
 8012078:	0801210d 	.word	0x0801210d
 801207c:	0801210d 	.word	0x0801210d
 8012080:	0801210d 	.word	0x0801210d
 8012084:	0801210d 	.word	0x0801210d
 8012088:	0801210d 	.word	0x0801210d
 801208c:	080120ff 	.word	0x080120ff
 8012090:	2b40      	cmp	r3, #64	@ 0x40
 8012092:	d037      	beq.n	8012104 <UART_SetConfig+0x6bc>
 8012094:	e03a      	b.n	801210c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012096:	f7fd fb71 	bl	800f77c <HAL_RCCEx_GetD3PCLK1Freq>
 801209a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801209c:	e03c      	b.n	8012118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801209e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7fd fb80 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80120a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80120ac:	e034      	b.n	8012118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80120ae:	f107 0318 	add.w	r3, r7, #24
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7fd fccc 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80120b8:	69fb      	ldr	r3, [r7, #28]
 80120ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80120bc:	e02c      	b.n	8012118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80120be:	4b09      	ldr	r3, [pc, #36]	@ (80120e4 <UART_SetConfig+0x69c>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f003 0320 	and.w	r3, r3, #32
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d016      	beq.n	80120f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80120ca:	4b06      	ldr	r3, [pc, #24]	@ (80120e4 <UART_SetConfig+0x69c>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	08db      	lsrs	r3, r3, #3
 80120d0:	f003 0303 	and.w	r3, r3, #3
 80120d4:	4a07      	ldr	r2, [pc, #28]	@ (80120f4 <UART_SetConfig+0x6ac>)
 80120d6:	fa22 f303 	lsr.w	r3, r2, r3
 80120da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80120dc:	e01c      	b.n	8012118 <UART_SetConfig+0x6d0>
 80120de:	bf00      	nop
 80120e0:	40011400 	.word	0x40011400
 80120e4:	58024400 	.word	0x58024400
 80120e8:	40007800 	.word	0x40007800
 80120ec:	40007c00 	.word	0x40007c00
 80120f0:	58000c00 	.word	0x58000c00
 80120f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80120f8:	4b9d      	ldr	r3, [pc, #628]	@ (8012370 <UART_SetConfig+0x928>)
 80120fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80120fc:	e00c      	b.n	8012118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80120fe:	4b9d      	ldr	r3, [pc, #628]	@ (8012374 <UART_SetConfig+0x92c>)
 8012100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012102:	e009      	b.n	8012118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012104:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801210a:	e005      	b.n	8012118 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801210c:	2300      	movs	r3, #0
 801210e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012110:	2301      	movs	r3, #1
 8012112:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012116:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801211a:	2b00      	cmp	r3, #0
 801211c:	f000 81de 	beq.w	80124dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012124:	4a94      	ldr	r2, [pc, #592]	@ (8012378 <UART_SetConfig+0x930>)
 8012126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801212a:	461a      	mov	r2, r3
 801212c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801212e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012132:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	685a      	ldr	r2, [r3, #4]
 8012138:	4613      	mov	r3, r2
 801213a:	005b      	lsls	r3, r3, #1
 801213c:	4413      	add	r3, r2
 801213e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012140:	429a      	cmp	r2, r3
 8012142:	d305      	bcc.n	8012150 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801214a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801214c:	429a      	cmp	r2, r3
 801214e:	d903      	bls.n	8012158 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8012150:	2301      	movs	r3, #1
 8012152:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012156:	e1c1      	b.n	80124dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801215a:	2200      	movs	r2, #0
 801215c:	60bb      	str	r3, [r7, #8]
 801215e:	60fa      	str	r2, [r7, #12]
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012164:	4a84      	ldr	r2, [pc, #528]	@ (8012378 <UART_SetConfig+0x930>)
 8012166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801216a:	b29b      	uxth	r3, r3
 801216c:	2200      	movs	r2, #0
 801216e:	603b      	str	r3, [r7, #0]
 8012170:	607a      	str	r2, [r7, #4]
 8012172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801217a:	f7ee f909 	bl	8000390 <__aeabi_uldivmod>
 801217e:	4602      	mov	r2, r0
 8012180:	460b      	mov	r3, r1
 8012182:	4610      	mov	r0, r2
 8012184:	4619      	mov	r1, r3
 8012186:	f04f 0200 	mov.w	r2, #0
 801218a:	f04f 0300 	mov.w	r3, #0
 801218e:	020b      	lsls	r3, r1, #8
 8012190:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012194:	0202      	lsls	r2, r0, #8
 8012196:	6979      	ldr	r1, [r7, #20]
 8012198:	6849      	ldr	r1, [r1, #4]
 801219a:	0849      	lsrs	r1, r1, #1
 801219c:	2000      	movs	r0, #0
 801219e:	460c      	mov	r4, r1
 80121a0:	4605      	mov	r5, r0
 80121a2:	eb12 0804 	adds.w	r8, r2, r4
 80121a6:	eb43 0905 	adc.w	r9, r3, r5
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	469a      	mov	sl, r3
 80121b2:	4693      	mov	fp, r2
 80121b4:	4652      	mov	r2, sl
 80121b6:	465b      	mov	r3, fp
 80121b8:	4640      	mov	r0, r8
 80121ba:	4649      	mov	r1, r9
 80121bc:	f7ee f8e8 	bl	8000390 <__aeabi_uldivmod>
 80121c0:	4602      	mov	r2, r0
 80121c2:	460b      	mov	r3, r1
 80121c4:	4613      	mov	r3, r2
 80121c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80121c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80121ce:	d308      	bcc.n	80121e2 <UART_SetConfig+0x79a>
 80121d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80121d6:	d204      	bcs.n	80121e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80121de:	60da      	str	r2, [r3, #12]
 80121e0:	e17c      	b.n	80124dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80121e2:	2301      	movs	r3, #1
 80121e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80121e8:	e178      	b.n	80124dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	69db      	ldr	r3, [r3, #28]
 80121ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80121f2:	f040 80c5 	bne.w	8012380 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80121f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80121fa:	2b20      	cmp	r3, #32
 80121fc:	dc48      	bgt.n	8012290 <UART_SetConfig+0x848>
 80121fe:	2b00      	cmp	r3, #0
 8012200:	db7b      	blt.n	80122fa <UART_SetConfig+0x8b2>
 8012202:	2b20      	cmp	r3, #32
 8012204:	d879      	bhi.n	80122fa <UART_SetConfig+0x8b2>
 8012206:	a201      	add	r2, pc, #4	@ (adr r2, 801220c <UART_SetConfig+0x7c4>)
 8012208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801220c:	08012297 	.word	0x08012297
 8012210:	0801229f 	.word	0x0801229f
 8012214:	080122fb 	.word	0x080122fb
 8012218:	080122fb 	.word	0x080122fb
 801221c:	080122a7 	.word	0x080122a7
 8012220:	080122fb 	.word	0x080122fb
 8012224:	080122fb 	.word	0x080122fb
 8012228:	080122fb 	.word	0x080122fb
 801222c:	080122b7 	.word	0x080122b7
 8012230:	080122fb 	.word	0x080122fb
 8012234:	080122fb 	.word	0x080122fb
 8012238:	080122fb 	.word	0x080122fb
 801223c:	080122fb 	.word	0x080122fb
 8012240:	080122fb 	.word	0x080122fb
 8012244:	080122fb 	.word	0x080122fb
 8012248:	080122fb 	.word	0x080122fb
 801224c:	080122c7 	.word	0x080122c7
 8012250:	080122fb 	.word	0x080122fb
 8012254:	080122fb 	.word	0x080122fb
 8012258:	080122fb 	.word	0x080122fb
 801225c:	080122fb 	.word	0x080122fb
 8012260:	080122fb 	.word	0x080122fb
 8012264:	080122fb 	.word	0x080122fb
 8012268:	080122fb 	.word	0x080122fb
 801226c:	080122fb 	.word	0x080122fb
 8012270:	080122fb 	.word	0x080122fb
 8012274:	080122fb 	.word	0x080122fb
 8012278:	080122fb 	.word	0x080122fb
 801227c:	080122fb 	.word	0x080122fb
 8012280:	080122fb 	.word	0x080122fb
 8012284:	080122fb 	.word	0x080122fb
 8012288:	080122fb 	.word	0x080122fb
 801228c:	080122ed 	.word	0x080122ed
 8012290:	2b40      	cmp	r3, #64	@ 0x40
 8012292:	d02e      	beq.n	80122f2 <UART_SetConfig+0x8aa>
 8012294:	e031      	b.n	80122fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012296:	f7fb fabb 	bl	800d810 <HAL_RCC_GetPCLK1Freq>
 801229a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801229c:	e033      	b.n	8012306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801229e:	f7fb facd 	bl	800d83c <HAL_RCC_GetPCLK2Freq>
 80122a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80122a4:	e02f      	b.n	8012306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80122a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7fd fa7c 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80122b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80122b4:	e027      	b.n	8012306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80122b6:	f107 0318 	add.w	r3, r7, #24
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7fd fbc8 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80122c0:	69fb      	ldr	r3, [r7, #28]
 80122c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80122c4:	e01f      	b.n	8012306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80122c6:	4b2d      	ldr	r3, [pc, #180]	@ (801237c <UART_SetConfig+0x934>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f003 0320 	and.w	r3, r3, #32
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d009      	beq.n	80122e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80122d2:	4b2a      	ldr	r3, [pc, #168]	@ (801237c <UART_SetConfig+0x934>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	08db      	lsrs	r3, r3, #3
 80122d8:	f003 0303 	and.w	r3, r3, #3
 80122dc:	4a24      	ldr	r2, [pc, #144]	@ (8012370 <UART_SetConfig+0x928>)
 80122de:	fa22 f303 	lsr.w	r3, r2, r3
 80122e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80122e4:	e00f      	b.n	8012306 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80122e6:	4b22      	ldr	r3, [pc, #136]	@ (8012370 <UART_SetConfig+0x928>)
 80122e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80122ea:	e00c      	b.n	8012306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80122ec:	4b21      	ldr	r3, [pc, #132]	@ (8012374 <UART_SetConfig+0x92c>)
 80122ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80122f0:	e009      	b.n	8012306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80122f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80122f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80122f8:	e005      	b.n	8012306 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80122fa:	2300      	movs	r3, #0
 80122fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80122fe:	2301      	movs	r3, #1
 8012300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012308:	2b00      	cmp	r3, #0
 801230a:	f000 80e7 	beq.w	80124dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012312:	4a19      	ldr	r2, [pc, #100]	@ (8012378 <UART_SetConfig+0x930>)
 8012314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012318:	461a      	mov	r2, r3
 801231a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801231c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012320:	005a      	lsls	r2, r3, #1
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	085b      	lsrs	r3, r3, #1
 8012328:	441a      	add	r2, r3
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012332:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012336:	2b0f      	cmp	r3, #15
 8012338:	d916      	bls.n	8012368 <UART_SetConfig+0x920>
 801233a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801233c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012340:	d212      	bcs.n	8012368 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012344:	b29b      	uxth	r3, r3
 8012346:	f023 030f 	bic.w	r3, r3, #15
 801234a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801234c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801234e:	085b      	lsrs	r3, r3, #1
 8012350:	b29b      	uxth	r3, r3
 8012352:	f003 0307 	and.w	r3, r3, #7
 8012356:	b29a      	uxth	r2, r3
 8012358:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801235a:	4313      	orrs	r3, r2
 801235c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012364:	60da      	str	r2, [r3, #12]
 8012366:	e0b9      	b.n	80124dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8012368:	2301      	movs	r3, #1
 801236a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801236e:	e0b5      	b.n	80124dc <UART_SetConfig+0xa94>
 8012370:	03d09000 	.word	0x03d09000
 8012374:	003d0900 	.word	0x003d0900
 8012378:	08017c98 	.word	0x08017c98
 801237c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8012380:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012384:	2b20      	cmp	r3, #32
 8012386:	dc49      	bgt.n	801241c <UART_SetConfig+0x9d4>
 8012388:	2b00      	cmp	r3, #0
 801238a:	db7c      	blt.n	8012486 <UART_SetConfig+0xa3e>
 801238c:	2b20      	cmp	r3, #32
 801238e:	d87a      	bhi.n	8012486 <UART_SetConfig+0xa3e>
 8012390:	a201      	add	r2, pc, #4	@ (adr r2, 8012398 <UART_SetConfig+0x950>)
 8012392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012396:	bf00      	nop
 8012398:	08012423 	.word	0x08012423
 801239c:	0801242b 	.word	0x0801242b
 80123a0:	08012487 	.word	0x08012487
 80123a4:	08012487 	.word	0x08012487
 80123a8:	08012433 	.word	0x08012433
 80123ac:	08012487 	.word	0x08012487
 80123b0:	08012487 	.word	0x08012487
 80123b4:	08012487 	.word	0x08012487
 80123b8:	08012443 	.word	0x08012443
 80123bc:	08012487 	.word	0x08012487
 80123c0:	08012487 	.word	0x08012487
 80123c4:	08012487 	.word	0x08012487
 80123c8:	08012487 	.word	0x08012487
 80123cc:	08012487 	.word	0x08012487
 80123d0:	08012487 	.word	0x08012487
 80123d4:	08012487 	.word	0x08012487
 80123d8:	08012453 	.word	0x08012453
 80123dc:	08012487 	.word	0x08012487
 80123e0:	08012487 	.word	0x08012487
 80123e4:	08012487 	.word	0x08012487
 80123e8:	08012487 	.word	0x08012487
 80123ec:	08012487 	.word	0x08012487
 80123f0:	08012487 	.word	0x08012487
 80123f4:	08012487 	.word	0x08012487
 80123f8:	08012487 	.word	0x08012487
 80123fc:	08012487 	.word	0x08012487
 8012400:	08012487 	.word	0x08012487
 8012404:	08012487 	.word	0x08012487
 8012408:	08012487 	.word	0x08012487
 801240c:	08012487 	.word	0x08012487
 8012410:	08012487 	.word	0x08012487
 8012414:	08012487 	.word	0x08012487
 8012418:	08012479 	.word	0x08012479
 801241c:	2b40      	cmp	r3, #64	@ 0x40
 801241e:	d02e      	beq.n	801247e <UART_SetConfig+0xa36>
 8012420:	e031      	b.n	8012486 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012422:	f7fb f9f5 	bl	800d810 <HAL_RCC_GetPCLK1Freq>
 8012426:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012428:	e033      	b.n	8012492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801242a:	f7fb fa07 	bl	800d83c <HAL_RCC_GetPCLK2Freq>
 801242e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012430:	e02f      	b.n	8012492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012436:	4618      	mov	r0, r3
 8012438:	f7fd f9b6 	bl	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801243c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801243e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012440:	e027      	b.n	8012492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012442:	f107 0318 	add.w	r3, r7, #24
 8012446:	4618      	mov	r0, r3
 8012448:	f7fd fb02 	bl	800fa50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012450:	e01f      	b.n	8012492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012452:	4b2d      	ldr	r3, [pc, #180]	@ (8012508 <UART_SetConfig+0xac0>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f003 0320 	and.w	r3, r3, #32
 801245a:	2b00      	cmp	r3, #0
 801245c:	d009      	beq.n	8012472 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801245e:	4b2a      	ldr	r3, [pc, #168]	@ (8012508 <UART_SetConfig+0xac0>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	08db      	lsrs	r3, r3, #3
 8012464:	f003 0303 	and.w	r3, r3, #3
 8012468:	4a28      	ldr	r2, [pc, #160]	@ (801250c <UART_SetConfig+0xac4>)
 801246a:	fa22 f303 	lsr.w	r3, r2, r3
 801246e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012470:	e00f      	b.n	8012492 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8012472:	4b26      	ldr	r3, [pc, #152]	@ (801250c <UART_SetConfig+0xac4>)
 8012474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012476:	e00c      	b.n	8012492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012478:	4b25      	ldr	r3, [pc, #148]	@ (8012510 <UART_SetConfig+0xac8>)
 801247a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801247c:	e009      	b.n	8012492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801247e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012484:	e005      	b.n	8012492 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8012486:	2300      	movs	r3, #0
 8012488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801248a:	2301      	movs	r3, #1
 801248c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012490:	bf00      	nop
    }

    if (pclk != 0U)
 8012492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012494:	2b00      	cmp	r3, #0
 8012496:	d021      	beq.n	80124dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801249c:	4a1d      	ldr	r2, [pc, #116]	@ (8012514 <UART_SetConfig+0xacc>)
 801249e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80124a2:	461a      	mov	r2, r3
 80124a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80124aa:	697b      	ldr	r3, [r7, #20]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	085b      	lsrs	r3, r3, #1
 80124b0:	441a      	add	r2, r3
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80124ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80124bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124be:	2b0f      	cmp	r3, #15
 80124c0:	d909      	bls.n	80124d6 <UART_SetConfig+0xa8e>
 80124c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124c8:	d205      	bcs.n	80124d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80124ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124cc:	b29a      	uxth	r2, r3
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	60da      	str	r2, [r3, #12]
 80124d4:	e002      	b.n	80124dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80124d6:	2301      	movs	r3, #1
 80124d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	2201      	movs	r2, #1
 80124e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	2201      	movs	r2, #1
 80124e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	2200      	movs	r2, #0
 80124f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	2200      	movs	r2, #0
 80124f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80124f8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3748      	adds	r7, #72	@ 0x48
 8012500:	46bd      	mov	sp, r7
 8012502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012506:	bf00      	nop
 8012508:	58024400 	.word	0x58024400
 801250c:	03d09000 	.word	0x03d09000
 8012510:	003d0900 	.word	0x003d0900
 8012514:	08017c98 	.word	0x08017c98

08012518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012518:	b480      	push	{r7}
 801251a:	b083      	sub	sp, #12
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012524:	f003 0308 	and.w	r3, r3, #8
 8012528:	2b00      	cmp	r3, #0
 801252a:	d00a      	beq.n	8012542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	430a      	orrs	r2, r1
 8012540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012546:	f003 0301 	and.w	r3, r3, #1
 801254a:	2b00      	cmp	r3, #0
 801254c:	d00a      	beq.n	8012564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	430a      	orrs	r2, r1
 8012562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012568:	f003 0302 	and.w	r3, r3, #2
 801256c:	2b00      	cmp	r3, #0
 801256e:	d00a      	beq.n	8012586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	430a      	orrs	r2, r1
 8012584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801258a:	f003 0304 	and.w	r3, r3, #4
 801258e:	2b00      	cmp	r3, #0
 8012590:	d00a      	beq.n	80125a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	430a      	orrs	r2, r1
 80125a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125ac:	f003 0310 	and.w	r3, r3, #16
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d00a      	beq.n	80125ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	689b      	ldr	r3, [r3, #8]
 80125ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	430a      	orrs	r2, r1
 80125c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125ce:	f003 0320 	and.w	r3, r3, #32
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d00a      	beq.n	80125ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	689b      	ldr	r3, [r3, #8]
 80125dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	430a      	orrs	r2, r1
 80125ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d01a      	beq.n	801262e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	430a      	orrs	r2, r1
 801260c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012616:	d10a      	bne.n	801262e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	430a      	orrs	r2, r1
 801262c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00a      	beq.n	8012650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	685b      	ldr	r3, [r3, #4]
 8012640:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	430a      	orrs	r2, r1
 801264e:	605a      	str	r2, [r3, #4]
  }
}
 8012650:	bf00      	nop
 8012652:	370c      	adds	r7, #12
 8012654:	46bd      	mov	sp, r7
 8012656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265a:	4770      	bx	lr

0801265c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b098      	sub	sp, #96	@ 0x60
 8012660:	af02      	add	r7, sp, #8
 8012662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801266c:	f7ef fe2a 	bl	80022c4 <HAL_GetTick>
 8012670:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	f003 0308 	and.w	r3, r3, #8
 801267c:	2b08      	cmp	r3, #8
 801267e:	d12f      	bne.n	80126e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012680:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012684:	9300      	str	r3, [sp, #0]
 8012686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012688:	2200      	movs	r2, #0
 801268a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f000 f88e 	bl	80127b0 <UART_WaitOnFlagUntilTimeout>
 8012694:	4603      	mov	r3, r0
 8012696:	2b00      	cmp	r3, #0
 8012698:	d022      	beq.n	80126e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126a2:	e853 3f00 	ldrex	r3, [r3]
 80126a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80126a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80126ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	461a      	mov	r2, r3
 80126b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80126ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80126be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80126c0:	e841 2300 	strex	r3, r2, [r1]
 80126c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80126c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d1e6      	bne.n	801269a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2220      	movs	r2, #32
 80126d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2200      	movs	r2, #0
 80126d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80126dc:	2303      	movs	r3, #3
 80126de:	e063      	b.n	80127a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	f003 0304 	and.w	r3, r3, #4
 80126ea:	2b04      	cmp	r3, #4
 80126ec:	d149      	bne.n	8012782 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80126ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126f6:	2200      	movs	r2, #0
 80126f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 f857 	bl	80127b0 <UART_WaitOnFlagUntilTimeout>
 8012702:	4603      	mov	r3, r0
 8012704:	2b00      	cmp	r3, #0
 8012706:	d03c      	beq.n	8012782 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012710:	e853 3f00 	ldrex	r3, [r3]
 8012714:	623b      	str	r3, [r7, #32]
   return(result);
 8012716:	6a3b      	ldr	r3, [r7, #32]
 8012718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801271c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	461a      	mov	r2, r3
 8012724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012726:	633b      	str	r3, [r7, #48]	@ 0x30
 8012728:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801272a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801272c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801272e:	e841 2300 	strex	r3, r2, [r1]
 8012732:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012736:	2b00      	cmp	r3, #0
 8012738:	d1e6      	bne.n	8012708 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	3308      	adds	r3, #8
 8012740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	e853 3f00 	ldrex	r3, [r3]
 8012748:	60fb      	str	r3, [r7, #12]
   return(result);
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f023 0301 	bic.w	r3, r3, #1
 8012750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	3308      	adds	r3, #8
 8012758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801275a:	61fa      	str	r2, [r7, #28]
 801275c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801275e:	69b9      	ldr	r1, [r7, #24]
 8012760:	69fa      	ldr	r2, [r7, #28]
 8012762:	e841 2300 	strex	r3, r2, [r1]
 8012766:	617b      	str	r3, [r7, #20]
   return(result);
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d1e5      	bne.n	801273a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2220      	movs	r2, #32
 8012772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2200      	movs	r2, #0
 801277a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801277e:	2303      	movs	r3, #3
 8012780:	e012      	b.n	80127a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2220      	movs	r2, #32
 8012786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2220      	movs	r2, #32
 801278e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2200      	movs	r2, #0
 8012796:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2200      	movs	r2, #0
 801279c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2200      	movs	r2, #0
 80127a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80127a6:	2300      	movs	r3, #0
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3758      	adds	r7, #88	@ 0x58
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b084      	sub	sp, #16
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	60f8      	str	r0, [r7, #12]
 80127b8:	60b9      	str	r1, [r7, #8]
 80127ba:	603b      	str	r3, [r7, #0]
 80127bc:	4613      	mov	r3, r2
 80127be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80127c0:	e04f      	b.n	8012862 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80127c2:	69bb      	ldr	r3, [r7, #24]
 80127c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c8:	d04b      	beq.n	8012862 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80127ca:	f7ef fd7b 	bl	80022c4 <HAL_GetTick>
 80127ce:	4602      	mov	r2, r0
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	1ad3      	subs	r3, r2, r3
 80127d4:	69ba      	ldr	r2, [r7, #24]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d302      	bcc.n	80127e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80127da:	69bb      	ldr	r3, [r7, #24]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d101      	bne.n	80127e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80127e0:	2303      	movs	r3, #3
 80127e2:	e04e      	b.n	8012882 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	f003 0304 	and.w	r3, r3, #4
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d037      	beq.n	8012862 <UART_WaitOnFlagUntilTimeout+0xb2>
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	2b80      	cmp	r3, #128	@ 0x80
 80127f6:	d034      	beq.n	8012862 <UART_WaitOnFlagUntilTimeout+0xb2>
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	2b40      	cmp	r3, #64	@ 0x40
 80127fc:	d031      	beq.n	8012862 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	69db      	ldr	r3, [r3, #28]
 8012804:	f003 0308 	and.w	r3, r3, #8
 8012808:	2b08      	cmp	r3, #8
 801280a:	d110      	bne.n	801282e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2208      	movs	r2, #8
 8012812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f000 f839 	bl	801288c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	2208      	movs	r2, #8
 801281e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	2200      	movs	r2, #0
 8012826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801282a:	2301      	movs	r3, #1
 801282c:	e029      	b.n	8012882 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	69db      	ldr	r3, [r3, #28]
 8012834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801283c:	d111      	bne.n	8012862 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012848:	68f8      	ldr	r0, [r7, #12]
 801284a:	f000 f81f 	bl	801288c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2220      	movs	r2, #32
 8012852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	2200      	movs	r2, #0
 801285a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801285e:	2303      	movs	r3, #3
 8012860:	e00f      	b.n	8012882 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	69da      	ldr	r2, [r3, #28]
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	4013      	ands	r3, r2
 801286c:	68ba      	ldr	r2, [r7, #8]
 801286e:	429a      	cmp	r2, r3
 8012870:	bf0c      	ite	eq
 8012872:	2301      	moveq	r3, #1
 8012874:	2300      	movne	r3, #0
 8012876:	b2db      	uxtb	r3, r3
 8012878:	461a      	mov	r2, r3
 801287a:	79fb      	ldrb	r3, [r7, #7]
 801287c:	429a      	cmp	r2, r3
 801287e:	d0a0      	beq.n	80127c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012880:	2300      	movs	r3, #0
}
 8012882:	4618      	mov	r0, r3
 8012884:	3710      	adds	r7, #16
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
	...

0801288c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801288c:	b480      	push	{r7}
 801288e:	b095      	sub	sp, #84	@ 0x54
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801289a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801289c:	e853 3f00 	ldrex	r3, [r3]
 80128a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80128a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80128a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	461a      	mov	r2, r3
 80128b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80128b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80128b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80128ba:	e841 2300 	strex	r3, r2, [r1]
 80128be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80128c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d1e6      	bne.n	8012894 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	3308      	adds	r3, #8
 80128cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ce:	6a3b      	ldr	r3, [r7, #32]
 80128d0:	e853 3f00 	ldrex	r3, [r3]
 80128d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80128d6:	69fa      	ldr	r2, [r7, #28]
 80128d8:	4b1e      	ldr	r3, [pc, #120]	@ (8012954 <UART_EndRxTransfer+0xc8>)
 80128da:	4013      	ands	r3, r2
 80128dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	3308      	adds	r3, #8
 80128e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80128e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80128e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80128ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80128ee:	e841 2300 	strex	r3, r2, [r1]
 80128f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80128f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1e5      	bne.n	80128c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d118      	bne.n	8012934 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	e853 3f00 	ldrex	r3, [r3]
 801290e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	f023 0310 	bic.w	r3, r3, #16
 8012916:	647b      	str	r3, [r7, #68]	@ 0x44
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	461a      	mov	r2, r3
 801291e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012920:	61bb      	str	r3, [r7, #24]
 8012922:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012924:	6979      	ldr	r1, [r7, #20]
 8012926:	69ba      	ldr	r2, [r7, #24]
 8012928:	e841 2300 	strex	r3, r2, [r1]
 801292c:	613b      	str	r3, [r7, #16]
   return(result);
 801292e:	693b      	ldr	r3, [r7, #16]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d1e6      	bne.n	8012902 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2220      	movs	r2, #32
 8012938:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2200      	movs	r2, #0
 8012940:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8012948:	bf00      	nop
 801294a:	3754      	adds	r7, #84	@ 0x54
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr
 8012954:	effffffe 	.word	0xeffffffe

08012958 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012964:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2200      	movs	r2, #0
 801296a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801296e:	68f8      	ldr	r0, [r7, #12]
 8012970:	f7ff f854 	bl	8011a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012974:	bf00      	nop
 8012976:	3710      	adds	r7, #16
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b088      	sub	sp, #32
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	e853 3f00 	ldrex	r3, [r3]
 8012990:	60bb      	str	r3, [r7, #8]
   return(result);
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012998:	61fb      	str	r3, [r7, #28]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	461a      	mov	r2, r3
 80129a0:	69fb      	ldr	r3, [r7, #28]
 80129a2:	61bb      	str	r3, [r7, #24]
 80129a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a6:	6979      	ldr	r1, [r7, #20]
 80129a8:	69ba      	ldr	r2, [r7, #24]
 80129aa:	e841 2300 	strex	r3, r2, [r1]
 80129ae:	613b      	str	r3, [r7, #16]
   return(result);
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d1e6      	bne.n	8012984 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2220      	movs	r2, #32
 80129ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2200      	movs	r2, #0
 80129c2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f7ff f81f 	bl	8011a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80129ca:	bf00      	nop
 80129cc:	3720      	adds	r7, #32
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}

080129d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80129d2:	b480      	push	{r7}
 80129d4:	b083      	sub	sp, #12
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80129da:	bf00      	nop
 80129dc:	370c      	adds	r7, #12
 80129de:	46bd      	mov	sp, r7
 80129e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e4:	4770      	bx	lr

080129e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80129e6:	b480      	push	{r7}
 80129e8:	b083      	sub	sp, #12
 80129ea:	af00      	add	r7, sp, #0
 80129ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80129ee:	bf00      	nop
 80129f0:	370c      	adds	r7, #12
 80129f2:	46bd      	mov	sp, r7
 80129f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f8:	4770      	bx	lr

080129fa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80129fa:	b480      	push	{r7}
 80129fc:	b083      	sub	sp, #12
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012a02:	bf00      	nop
 8012a04:	370c      	adds	r7, #12
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr

08012a0e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b084      	sub	sp, #16
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d101      	bne.n	8012a24 <HAL_UARTEx_EnableFifoMode+0x16>
 8012a20:	2302      	movs	r3, #2
 8012a22:	e02b      	b.n	8012a7c <HAL_UARTEx_EnableFifoMode+0x6e>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2201      	movs	r2, #1
 8012a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2224      	movs	r2, #36	@ 0x24
 8012a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	681a      	ldr	r2, [r3, #0]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f022 0201 	bic.w	r2, r2, #1
 8012a4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012a52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8012a5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	68fa      	ldr	r2, [r7, #12]
 8012a62:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f000 f889 	bl	8012b7c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2220      	movs	r2, #32
 8012a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2200      	movs	r2, #0
 8012a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012a7a:	2300      	movs	r3, #0
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3710      	adds	r7, #16
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}

08012a84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b084      	sub	sp, #16
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
 8012a8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d101      	bne.n	8012a9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012a98:	2302      	movs	r3, #2
 8012a9a:	e02d      	b.n	8012af8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2201      	movs	r2, #1
 8012aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2224      	movs	r2, #36	@ 0x24
 8012aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	681a      	ldr	r2, [r3, #0]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	f022 0201 	bic.w	r2, r2, #1
 8012ac2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	689b      	ldr	r3, [r3, #8]
 8012aca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	683a      	ldr	r2, [r7, #0]
 8012ad4:	430a      	orrs	r2, r1
 8012ad6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f000 f84f 	bl	8012b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	68fa      	ldr	r2, [r7, #12]
 8012ae4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2220      	movs	r2, #32
 8012aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2200      	movs	r2, #0
 8012af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012af6:	2300      	movs	r3, #0
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	3710      	adds	r7, #16
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d101      	bne.n	8012b18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012b14:	2302      	movs	r3, #2
 8012b16:	e02d      	b.n	8012b74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2224      	movs	r2, #36	@ 0x24
 8012b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	681a      	ldr	r2, [r3, #0]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	f022 0201 	bic.w	r2, r2, #1
 8012b3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	689b      	ldr	r3, [r3, #8]
 8012b46:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	683a      	ldr	r2, [r7, #0]
 8012b50:	430a      	orrs	r2, r1
 8012b52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f000 f811 	bl	8012b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	68fa      	ldr	r2, [r7, #12]
 8012b60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2220      	movs	r2, #32
 8012b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012b72:	2300      	movs	r3, #0
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3710      	adds	r7, #16
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}

08012b7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b085      	sub	sp, #20
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d108      	bne.n	8012b9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2201      	movs	r2, #1
 8012b90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2201      	movs	r2, #1
 8012b98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012b9c:	e031      	b.n	8012c02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012b9e:	2310      	movs	r3, #16
 8012ba0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012ba2:	2310      	movs	r3, #16
 8012ba4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	689b      	ldr	r3, [r3, #8]
 8012bac:	0e5b      	lsrs	r3, r3, #25
 8012bae:	b2db      	uxtb	r3, r3
 8012bb0:	f003 0307 	and.w	r3, r3, #7
 8012bb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	689b      	ldr	r3, [r3, #8]
 8012bbc:	0f5b      	lsrs	r3, r3, #29
 8012bbe:	b2db      	uxtb	r3, r3
 8012bc0:	f003 0307 	and.w	r3, r3, #7
 8012bc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012bc6:	7bbb      	ldrb	r3, [r7, #14]
 8012bc8:	7b3a      	ldrb	r2, [r7, #12]
 8012bca:	4911      	ldr	r1, [pc, #68]	@ (8012c10 <UARTEx_SetNbDataToProcess+0x94>)
 8012bcc:	5c8a      	ldrb	r2, [r1, r2]
 8012bce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012bd2:	7b3a      	ldrb	r2, [r7, #12]
 8012bd4:	490f      	ldr	r1, [pc, #60]	@ (8012c14 <UARTEx_SetNbDataToProcess+0x98>)
 8012bd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012bd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012bdc:	b29a      	uxth	r2, r3
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012be4:	7bfb      	ldrb	r3, [r7, #15]
 8012be6:	7b7a      	ldrb	r2, [r7, #13]
 8012be8:	4909      	ldr	r1, [pc, #36]	@ (8012c10 <UARTEx_SetNbDataToProcess+0x94>)
 8012bea:	5c8a      	ldrb	r2, [r1, r2]
 8012bec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012bf0:	7b7a      	ldrb	r2, [r7, #13]
 8012bf2:	4908      	ldr	r1, [pc, #32]	@ (8012c14 <UARTEx_SetNbDataToProcess+0x98>)
 8012bf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012bf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8012bfa:	b29a      	uxth	r2, r3
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012c02:	bf00      	nop
 8012c04:	3714      	adds	r7, #20
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr
 8012c0e:	bf00      	nop
 8012c10:	08017cb0 	.word	0x08017cb0
 8012c14:	08017cb8 	.word	0x08017cb8

08012c18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012c18:	b084      	sub	sp, #16
 8012c1a:	b580      	push	{r7, lr}
 8012c1c:	b084      	sub	sp, #16
 8012c1e:	af00      	add	r7, sp, #0
 8012c20:	6078      	str	r0, [r7, #4]
 8012c22:	f107 001c 	add.w	r0, r7, #28
 8012c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012c2a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012c2e:	2b01      	cmp	r3, #1
 8012c30:	d121      	bne.n	8012c76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	68da      	ldr	r2, [r3, #12]
 8012c42:	4b2c      	ldr	r3, [pc, #176]	@ (8012cf4 <USB_CoreInit+0xdc>)
 8012c44:	4013      	ands	r3, r2
 8012c46:	687a      	ldr	r2, [r7, #4]
 8012c48:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012c56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d105      	bne.n	8012c6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f001 fafa 	bl	8014264 <USB_CoreReset>
 8012c70:	4603      	mov	r3, r0
 8012c72:	73fb      	strb	r3, [r7, #15]
 8012c74:	e01b      	b.n	8012cae <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	68db      	ldr	r3, [r3, #12]
 8012c7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f001 faee 	bl	8014264 <USB_CoreReset>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012c8c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d106      	bne.n	8012ca2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8012ca0:	e005      	b.n	8012cae <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ca6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012cae:	7fbb      	ldrb	r3, [r7, #30]
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d116      	bne.n	8012ce2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012cb8:	b29a      	uxth	r2, r3
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012cf8 <USB_CoreInit+0xe0>)
 8012cc4:	4313      	orrs	r3, r2
 8012cc6:	687a      	ldr	r2, [r7, #4]
 8012cc8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	689b      	ldr	r3, [r3, #8]
 8012cce:	f043 0206 	orr.w	r2, r3, #6
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	689b      	ldr	r3, [r3, #8]
 8012cda:	f043 0220 	orr.w	r2, r3, #32
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3710      	adds	r7, #16
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012cee:	b004      	add	sp, #16
 8012cf0:	4770      	bx	lr
 8012cf2:	bf00      	nop
 8012cf4:	ffbdffbf 	.word	0xffbdffbf
 8012cf8:	03ee0000 	.word	0x03ee0000

08012cfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b087      	sub	sp, #28
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	60b9      	str	r1, [r7, #8]
 8012d06:	4613      	mov	r3, r2
 8012d08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012d0a:	79fb      	ldrb	r3, [r7, #7]
 8012d0c:	2b02      	cmp	r3, #2
 8012d0e:	d165      	bne.n	8012ddc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	4a41      	ldr	r2, [pc, #260]	@ (8012e18 <USB_SetTurnaroundTime+0x11c>)
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d906      	bls.n	8012d26 <USB_SetTurnaroundTime+0x2a>
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	4a40      	ldr	r2, [pc, #256]	@ (8012e1c <USB_SetTurnaroundTime+0x120>)
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d202      	bcs.n	8012d26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012d20:	230f      	movs	r3, #15
 8012d22:	617b      	str	r3, [r7, #20]
 8012d24:	e062      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	4a3c      	ldr	r2, [pc, #240]	@ (8012e1c <USB_SetTurnaroundTime+0x120>)
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d306      	bcc.n	8012d3c <USB_SetTurnaroundTime+0x40>
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	4a3b      	ldr	r2, [pc, #236]	@ (8012e20 <USB_SetTurnaroundTime+0x124>)
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d202      	bcs.n	8012d3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012d36:	230e      	movs	r3, #14
 8012d38:	617b      	str	r3, [r7, #20]
 8012d3a:	e057      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	4a38      	ldr	r2, [pc, #224]	@ (8012e20 <USB_SetTurnaroundTime+0x124>)
 8012d40:	4293      	cmp	r3, r2
 8012d42:	d306      	bcc.n	8012d52 <USB_SetTurnaroundTime+0x56>
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	4a37      	ldr	r2, [pc, #220]	@ (8012e24 <USB_SetTurnaroundTime+0x128>)
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	d202      	bcs.n	8012d52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012d4c:	230d      	movs	r3, #13
 8012d4e:	617b      	str	r3, [r7, #20]
 8012d50:	e04c      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	4a33      	ldr	r2, [pc, #204]	@ (8012e24 <USB_SetTurnaroundTime+0x128>)
 8012d56:	4293      	cmp	r3, r2
 8012d58:	d306      	bcc.n	8012d68 <USB_SetTurnaroundTime+0x6c>
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	4a32      	ldr	r2, [pc, #200]	@ (8012e28 <USB_SetTurnaroundTime+0x12c>)
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	d802      	bhi.n	8012d68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012d62:	230c      	movs	r3, #12
 8012d64:	617b      	str	r3, [r7, #20]
 8012d66:	e041      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8012e28 <USB_SetTurnaroundTime+0x12c>)
 8012d6c:	4293      	cmp	r3, r2
 8012d6e:	d906      	bls.n	8012d7e <USB_SetTurnaroundTime+0x82>
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	4a2e      	ldr	r2, [pc, #184]	@ (8012e2c <USB_SetTurnaroundTime+0x130>)
 8012d74:	4293      	cmp	r3, r2
 8012d76:	d802      	bhi.n	8012d7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012d78:	230b      	movs	r3, #11
 8012d7a:	617b      	str	r3, [r7, #20]
 8012d7c:	e036      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	4a2a      	ldr	r2, [pc, #168]	@ (8012e2c <USB_SetTurnaroundTime+0x130>)
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d906      	bls.n	8012d94 <USB_SetTurnaroundTime+0x98>
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	4a29      	ldr	r2, [pc, #164]	@ (8012e30 <USB_SetTurnaroundTime+0x134>)
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d802      	bhi.n	8012d94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012d8e:	230a      	movs	r3, #10
 8012d90:	617b      	str	r3, [r7, #20]
 8012d92:	e02b      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	4a26      	ldr	r2, [pc, #152]	@ (8012e30 <USB_SetTurnaroundTime+0x134>)
 8012d98:	4293      	cmp	r3, r2
 8012d9a:	d906      	bls.n	8012daa <USB_SetTurnaroundTime+0xae>
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	4a25      	ldr	r2, [pc, #148]	@ (8012e34 <USB_SetTurnaroundTime+0x138>)
 8012da0:	4293      	cmp	r3, r2
 8012da2:	d202      	bcs.n	8012daa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012da4:	2309      	movs	r3, #9
 8012da6:	617b      	str	r3, [r7, #20]
 8012da8:	e020      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	4a21      	ldr	r2, [pc, #132]	@ (8012e34 <USB_SetTurnaroundTime+0x138>)
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d306      	bcc.n	8012dc0 <USB_SetTurnaroundTime+0xc4>
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	4a20      	ldr	r2, [pc, #128]	@ (8012e38 <USB_SetTurnaroundTime+0x13c>)
 8012db6:	4293      	cmp	r3, r2
 8012db8:	d802      	bhi.n	8012dc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012dba:	2308      	movs	r3, #8
 8012dbc:	617b      	str	r3, [r7, #20]
 8012dbe:	e015      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8012e38 <USB_SetTurnaroundTime+0x13c>)
 8012dc4:	4293      	cmp	r3, r2
 8012dc6:	d906      	bls.n	8012dd6 <USB_SetTurnaroundTime+0xda>
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	4a1c      	ldr	r2, [pc, #112]	@ (8012e3c <USB_SetTurnaroundTime+0x140>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d202      	bcs.n	8012dd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012dd0:	2307      	movs	r3, #7
 8012dd2:	617b      	str	r3, [r7, #20]
 8012dd4:	e00a      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012dd6:	2306      	movs	r3, #6
 8012dd8:	617b      	str	r3, [r7, #20]
 8012dda:	e007      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012ddc:	79fb      	ldrb	r3, [r7, #7]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d102      	bne.n	8012de8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012de2:	2309      	movs	r3, #9
 8012de4:	617b      	str	r3, [r7, #20]
 8012de6:	e001      	b.n	8012dec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012de8:	2309      	movs	r3, #9
 8012dea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	68da      	ldr	r2, [r3, #12]
 8012dfc:	697b      	ldr	r3, [r7, #20]
 8012dfe:	029b      	lsls	r3, r3, #10
 8012e00:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8012e04:	431a      	orrs	r2, r3
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012e0a:	2300      	movs	r3, #0
}
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	371c      	adds	r7, #28
 8012e10:	46bd      	mov	sp, r7
 8012e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e16:	4770      	bx	lr
 8012e18:	00d8acbf 	.word	0x00d8acbf
 8012e1c:	00e4e1c0 	.word	0x00e4e1c0
 8012e20:	00f42400 	.word	0x00f42400
 8012e24:	01067380 	.word	0x01067380
 8012e28:	011a499f 	.word	0x011a499f
 8012e2c:	01312cff 	.word	0x01312cff
 8012e30:	014ca43f 	.word	0x014ca43f
 8012e34:	016e3600 	.word	0x016e3600
 8012e38:	01a6ab1f 	.word	0x01a6ab1f
 8012e3c:	01e84800 	.word	0x01e84800

08012e40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b083      	sub	sp, #12
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	689b      	ldr	r3, [r3, #8]
 8012e4c:	f043 0201 	orr.w	r2, r3, #1
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	370c      	adds	r7, #12
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr

08012e62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012e62:	b480      	push	{r7}
 8012e64:	b083      	sub	sp, #12
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	689b      	ldr	r3, [r3, #8]
 8012e6e:	f023 0201 	bic.w	r2, r3, #1
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012e76:	2300      	movs	r3, #0
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	370c      	adds	r7, #12
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr

08012e84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b084      	sub	sp, #16
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012e90:	2300      	movs	r3, #0
 8012e92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012ea0:	78fb      	ldrb	r3, [r7, #3]
 8012ea2:	2b01      	cmp	r3, #1
 8012ea4:	d115      	bne.n	8012ed2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	68db      	ldr	r3, [r3, #12]
 8012eaa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012eb2:	200a      	movs	r0, #10
 8012eb4:	f7ef fa12 	bl	80022dc <HAL_Delay>
      ms += 10U;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	330a      	adds	r3, #10
 8012ebc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f001 f93f 	bl	8014142 <USB_GetMode>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d01e      	beq.n	8012f08 <USB_SetCurrentMode+0x84>
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	2bc7      	cmp	r3, #199	@ 0xc7
 8012ece:	d9f0      	bls.n	8012eb2 <USB_SetCurrentMode+0x2e>
 8012ed0:	e01a      	b.n	8012f08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012ed2:	78fb      	ldrb	r3, [r7, #3]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d115      	bne.n	8012f04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	68db      	ldr	r3, [r3, #12]
 8012edc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012ee4:	200a      	movs	r0, #10
 8012ee6:	f7ef f9f9 	bl	80022dc <HAL_Delay>
      ms += 10U;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	330a      	adds	r3, #10
 8012eee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f001 f926 	bl	8014142 <USB_GetMode>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d005      	beq.n	8012f08 <USB_SetCurrentMode+0x84>
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	2bc7      	cmp	r3, #199	@ 0xc7
 8012f00:	d9f0      	bls.n	8012ee4 <USB_SetCurrentMode+0x60>
 8012f02:	e001      	b.n	8012f08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012f04:	2301      	movs	r3, #1
 8012f06:	e005      	b.n	8012f14 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	2bc8      	cmp	r3, #200	@ 0xc8
 8012f0c:	d101      	bne.n	8012f12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012f0e:	2301      	movs	r3, #1
 8012f10:	e000      	b.n	8012f14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012f12:	2300      	movs	r3, #0
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3710      	adds	r7, #16
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012f1c:	b084      	sub	sp, #16
 8012f1e:	b580      	push	{r7, lr}
 8012f20:	b086      	sub	sp, #24
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	6078      	str	r0, [r7, #4]
 8012f26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012f36:	2300      	movs	r3, #0
 8012f38:	613b      	str	r3, [r7, #16]
 8012f3a:	e009      	b.n	8012f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012f3c:	687a      	ldr	r2, [r7, #4]
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	3340      	adds	r3, #64	@ 0x40
 8012f42:	009b      	lsls	r3, r3, #2
 8012f44:	4413      	add	r3, r2
 8012f46:	2200      	movs	r2, #0
 8012f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	613b      	str	r3, [r7, #16]
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	2b0e      	cmp	r3, #14
 8012f54:	d9f2      	bls.n	8012f3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012f56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d11c      	bne.n	8012f98 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012f64:	685b      	ldr	r3, [r3, #4]
 8012f66:	68fa      	ldr	r2, [r7, #12]
 8012f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012f6c:	f043 0302 	orr.w	r3, r3, #2
 8012f70:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f76:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	601a      	str	r2, [r3, #0]
 8012f96:	e005      	b.n	8012fa4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012faa:	461a      	mov	r2, r3
 8012fac:	2300      	movs	r3, #0
 8012fae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012fb0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d10d      	bne.n	8012fd4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d104      	bne.n	8012fca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012fc0:	2100      	movs	r1, #0
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f000 f968 	bl	8013298 <USB_SetDevSpeed>
 8012fc8:	e008      	b.n	8012fdc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012fca:	2101      	movs	r1, #1
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f000 f963 	bl	8013298 <USB_SetDevSpeed>
 8012fd2:	e003      	b.n	8012fdc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012fd4:	2103      	movs	r1, #3
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f000 f95e 	bl	8013298 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012fdc:	2110      	movs	r1, #16
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f000 f8fa 	bl	80131d8 <USB_FlushTxFifo>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d001      	beq.n	8012fee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8012fea:	2301      	movs	r3, #1
 8012fec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f000 f924 	bl	801323c <USB_FlushRxFifo>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d001      	beq.n	8012ffe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013004:	461a      	mov	r2, r3
 8013006:	2300      	movs	r3, #0
 8013008:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013010:	461a      	mov	r2, r3
 8013012:	2300      	movs	r3, #0
 8013014:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801301c:	461a      	mov	r2, r3
 801301e:	2300      	movs	r3, #0
 8013020:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013022:	2300      	movs	r3, #0
 8013024:	613b      	str	r3, [r7, #16]
 8013026:	e043      	b.n	80130b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	015a      	lsls	r2, r3, #5
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	4413      	add	r3, r2
 8013030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801303a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801303e:	d118      	bne.n	8013072 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d10a      	bne.n	801305c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	015a      	lsls	r2, r3, #5
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	4413      	add	r3, r2
 801304e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013052:	461a      	mov	r2, r3
 8013054:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8013058:	6013      	str	r3, [r2, #0]
 801305a:	e013      	b.n	8013084 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	015a      	lsls	r2, r3, #5
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	4413      	add	r3, r2
 8013064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013068:	461a      	mov	r2, r3
 801306a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801306e:	6013      	str	r3, [r2, #0]
 8013070:	e008      	b.n	8013084 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	015a      	lsls	r2, r3, #5
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	4413      	add	r3, r2
 801307a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801307e:	461a      	mov	r2, r3
 8013080:	2300      	movs	r3, #0
 8013082:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	015a      	lsls	r2, r3, #5
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	4413      	add	r3, r2
 801308c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013090:	461a      	mov	r2, r3
 8013092:	2300      	movs	r3, #0
 8013094:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	015a      	lsls	r2, r3, #5
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	4413      	add	r3, r2
 801309e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80130a2:	461a      	mov	r2, r3
 80130a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80130a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	3301      	adds	r3, #1
 80130ae:	613b      	str	r3, [r7, #16]
 80130b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80130b4:	461a      	mov	r2, r3
 80130b6:	693b      	ldr	r3, [r7, #16]
 80130b8:	4293      	cmp	r3, r2
 80130ba:	d3b5      	bcc.n	8013028 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80130bc:	2300      	movs	r3, #0
 80130be:	613b      	str	r3, [r7, #16]
 80130c0:	e043      	b.n	801314a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	015a      	lsls	r2, r3, #5
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	4413      	add	r3, r2
 80130ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80130d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80130d8:	d118      	bne.n	801310c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d10a      	bne.n	80130f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	015a      	lsls	r2, r3, #5
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	4413      	add	r3, r2
 80130e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130ec:	461a      	mov	r2, r3
 80130ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80130f2:	6013      	str	r3, [r2, #0]
 80130f4:	e013      	b.n	801311e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	015a      	lsls	r2, r3, #5
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	4413      	add	r3, r2
 80130fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013102:	461a      	mov	r2, r3
 8013104:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8013108:	6013      	str	r3, [r2, #0]
 801310a:	e008      	b.n	801311e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	015a      	lsls	r2, r3, #5
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	4413      	add	r3, r2
 8013114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013118:	461a      	mov	r2, r3
 801311a:	2300      	movs	r3, #0
 801311c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801311e:	693b      	ldr	r3, [r7, #16]
 8013120:	015a      	lsls	r2, r3, #5
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	4413      	add	r3, r2
 8013126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801312a:	461a      	mov	r2, r3
 801312c:	2300      	movs	r3, #0
 801312e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013130:	693b      	ldr	r3, [r7, #16]
 8013132:	015a      	lsls	r2, r3, #5
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	4413      	add	r3, r2
 8013138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801313c:	461a      	mov	r2, r3
 801313e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8013142:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	3301      	adds	r3, #1
 8013148:	613b      	str	r3, [r7, #16]
 801314a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801314e:	461a      	mov	r2, r3
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	4293      	cmp	r3, r2
 8013154:	d3b5      	bcc.n	80130c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801315c:	691b      	ldr	r3, [r3, #16]
 801315e:	68fa      	ldr	r2, [r7, #12]
 8013160:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013168:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2200      	movs	r2, #0
 801316e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8013176:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013178:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801317c:	2b00      	cmp	r3, #0
 801317e:	d105      	bne.n	801318c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	699b      	ldr	r3, [r3, #24]
 8013184:	f043 0210 	orr.w	r2, r3, #16
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	699a      	ldr	r2, [r3, #24]
 8013190:	4b0f      	ldr	r3, [pc, #60]	@ (80131d0 <USB_DevInit+0x2b4>)
 8013192:	4313      	orrs	r3, r2
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013198:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801319c:	2b00      	cmp	r3, #0
 801319e:	d005      	beq.n	80131ac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	699b      	ldr	r3, [r3, #24]
 80131a4:	f043 0208 	orr.w	r2, r3, #8
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80131ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	d105      	bne.n	80131c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	699a      	ldr	r2, [r3, #24]
 80131b8:	4b06      	ldr	r3, [pc, #24]	@ (80131d4 <USB_DevInit+0x2b8>)
 80131ba:	4313      	orrs	r3, r2
 80131bc:	687a      	ldr	r2, [r7, #4]
 80131be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80131c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80131c2:	4618      	mov	r0, r3
 80131c4:	3718      	adds	r7, #24
 80131c6:	46bd      	mov	sp, r7
 80131c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80131cc:	b004      	add	sp, #16
 80131ce:	4770      	bx	lr
 80131d0:	803c3800 	.word	0x803c3800
 80131d4:	40000004 	.word	0x40000004

080131d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80131d8:	b480      	push	{r7}
 80131da:	b085      	sub	sp, #20
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80131e2:	2300      	movs	r3, #0
 80131e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	3301      	adds	r3, #1
 80131ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80131f2:	d901      	bls.n	80131f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80131f4:	2303      	movs	r3, #3
 80131f6:	e01b      	b.n	8013230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	691b      	ldr	r3, [r3, #16]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	daf2      	bge.n	80131e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013200:	2300      	movs	r3, #0
 8013202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	019b      	lsls	r3, r3, #6
 8013208:	f043 0220 	orr.w	r2, r3, #32
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	3301      	adds	r3, #1
 8013214:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801321c:	d901      	bls.n	8013222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801321e:	2303      	movs	r3, #3
 8013220:	e006      	b.n	8013230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	691b      	ldr	r3, [r3, #16]
 8013226:	f003 0320 	and.w	r3, r3, #32
 801322a:	2b20      	cmp	r3, #32
 801322c:	d0f0      	beq.n	8013210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801322e:	2300      	movs	r3, #0
}
 8013230:	4618      	mov	r0, r3
 8013232:	3714      	adds	r7, #20
 8013234:	46bd      	mov	sp, r7
 8013236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323a:	4770      	bx	lr

0801323c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801323c:	b480      	push	{r7}
 801323e:	b085      	sub	sp, #20
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013244:	2300      	movs	r3, #0
 8013246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	3301      	adds	r3, #1
 801324c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013254:	d901      	bls.n	801325a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013256:	2303      	movs	r3, #3
 8013258:	e018      	b.n	801328c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	691b      	ldr	r3, [r3, #16]
 801325e:	2b00      	cmp	r3, #0
 8013260:	daf2      	bge.n	8013248 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013262:	2300      	movs	r3, #0
 8013264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2210      	movs	r2, #16
 801326a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	3301      	adds	r3, #1
 8013270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013278:	d901      	bls.n	801327e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801327a:	2303      	movs	r3, #3
 801327c:	e006      	b.n	801328c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	691b      	ldr	r3, [r3, #16]
 8013282:	f003 0310 	and.w	r3, r3, #16
 8013286:	2b10      	cmp	r3, #16
 8013288:	d0f0      	beq.n	801326c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801328a:	2300      	movs	r3, #0
}
 801328c:	4618      	mov	r0, r3
 801328e:	3714      	adds	r7, #20
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013298:	b480      	push	{r7}
 801329a:	b085      	sub	sp, #20
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	460b      	mov	r3, r1
 80132a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80132ae:	681a      	ldr	r2, [r3, #0]
 80132b0:	78fb      	ldrb	r3, [r7, #3]
 80132b2:	68f9      	ldr	r1, [r7, #12]
 80132b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80132b8:	4313      	orrs	r3, r2
 80132ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80132bc:	2300      	movs	r3, #0
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3714      	adds	r7, #20
 80132c2:	46bd      	mov	sp, r7
 80132c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c8:	4770      	bx	lr

080132ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80132ca:	b480      	push	{r7}
 80132cc:	b087      	sub	sp, #28
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80132dc:	689b      	ldr	r3, [r3, #8]
 80132de:	f003 0306 	and.w	r3, r3, #6
 80132e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d102      	bne.n	80132f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80132ea:	2300      	movs	r3, #0
 80132ec:	75fb      	strb	r3, [r7, #23]
 80132ee:	e00a      	b.n	8013306 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	2b02      	cmp	r3, #2
 80132f4:	d002      	beq.n	80132fc <USB_GetDevSpeed+0x32>
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2b06      	cmp	r3, #6
 80132fa:	d102      	bne.n	8013302 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80132fc:	2302      	movs	r3, #2
 80132fe:	75fb      	strb	r3, [r7, #23]
 8013300:	e001      	b.n	8013306 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013302:	230f      	movs	r3, #15
 8013304:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013306:	7dfb      	ldrb	r3, [r7, #23]
}
 8013308:	4618      	mov	r0, r3
 801330a:	371c      	adds	r7, #28
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr

08013314 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013314:	b480      	push	{r7}
 8013316:	b085      	sub	sp, #20
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	785b      	ldrb	r3, [r3, #1]
 801332c:	2b01      	cmp	r3, #1
 801332e:	d139      	bne.n	80133a4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013336:	69da      	ldr	r2, [r3, #28]
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	f003 030f 	and.w	r3, r3, #15
 8013340:	2101      	movs	r1, #1
 8013342:	fa01 f303 	lsl.w	r3, r1, r3
 8013346:	b29b      	uxth	r3, r3
 8013348:	68f9      	ldr	r1, [r7, #12]
 801334a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801334e:	4313      	orrs	r3, r2
 8013350:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	015a      	lsls	r2, r3, #5
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	4413      	add	r3, r2
 801335a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013364:	2b00      	cmp	r3, #0
 8013366:	d153      	bne.n	8013410 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	015a      	lsls	r2, r3, #5
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	4413      	add	r3, r2
 8013370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013374:	681a      	ldr	r2, [r3, #0]
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	689b      	ldr	r3, [r3, #8]
 801337a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	791b      	ldrb	r3, [r3, #4]
 8013382:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013384:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	059b      	lsls	r3, r3, #22
 801338a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801338c:	431a      	orrs	r2, r3
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	0159      	lsls	r1, r3, #5
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	440b      	add	r3, r1
 8013396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801339a:	4619      	mov	r1, r3
 801339c:	4b20      	ldr	r3, [pc, #128]	@ (8013420 <USB_ActivateEndpoint+0x10c>)
 801339e:	4313      	orrs	r3, r2
 80133a0:	600b      	str	r3, [r1, #0]
 80133a2:	e035      	b.n	8013410 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80133aa:	69da      	ldr	r2, [r3, #28]
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	f003 030f 	and.w	r3, r3, #15
 80133b4:	2101      	movs	r1, #1
 80133b6:	fa01 f303 	lsl.w	r3, r1, r3
 80133ba:	041b      	lsls	r3, r3, #16
 80133bc:	68f9      	ldr	r1, [r7, #12]
 80133be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80133c2:	4313      	orrs	r3, r2
 80133c4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	015a      	lsls	r2, r3, #5
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	4413      	add	r3, r2
 80133ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d119      	bne.n	8013410 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	015a      	lsls	r2, r3, #5
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	4413      	add	r3, r2
 80133e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80133e8:	681a      	ldr	r2, [r3, #0]
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	689b      	ldr	r3, [r3, #8]
 80133ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	791b      	ldrb	r3, [r3, #4]
 80133f6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80133f8:	430b      	orrs	r3, r1
 80133fa:	431a      	orrs	r2, r3
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	0159      	lsls	r1, r3, #5
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	440b      	add	r3, r1
 8013404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013408:	4619      	mov	r1, r3
 801340a:	4b05      	ldr	r3, [pc, #20]	@ (8013420 <USB_ActivateEndpoint+0x10c>)
 801340c:	4313      	orrs	r3, r2
 801340e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013410:	2300      	movs	r3, #0
}
 8013412:	4618      	mov	r0, r3
 8013414:	3714      	adds	r7, #20
 8013416:	46bd      	mov	sp, r7
 8013418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341c:	4770      	bx	lr
 801341e:	bf00      	nop
 8013420:	10008000 	.word	0x10008000

08013424 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013424:	b480      	push	{r7}
 8013426:	b085      	sub	sp, #20
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	781b      	ldrb	r3, [r3, #0]
 8013436:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	785b      	ldrb	r3, [r3, #1]
 801343c:	2b01      	cmp	r3, #1
 801343e:	d161      	bne.n	8013504 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	015a      	lsls	r2, r3, #5
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	4413      	add	r3, r2
 8013448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013456:	d11f      	bne.n	8013498 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	015a      	lsls	r2, r3, #5
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	4413      	add	r3, r2
 8013460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	68ba      	ldr	r2, [r7, #8]
 8013468:	0151      	lsls	r1, r2, #5
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	440a      	add	r2, r1
 801346e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013472:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013476:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	015a      	lsls	r2, r3, #5
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	4413      	add	r3, r2
 8013480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	68ba      	ldr	r2, [r7, #8]
 8013488:	0151      	lsls	r1, r2, #5
 801348a:	68fa      	ldr	r2, [r7, #12]
 801348c:	440a      	add	r2, r1
 801348e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013492:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013496:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801349e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	f003 030f 	and.w	r3, r3, #15
 80134a8:	2101      	movs	r1, #1
 80134aa:	fa01 f303 	lsl.w	r3, r1, r3
 80134ae:	b29b      	uxth	r3, r3
 80134b0:	43db      	mvns	r3, r3
 80134b2:	68f9      	ldr	r1, [r7, #12]
 80134b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80134b8:	4013      	ands	r3, r2
 80134ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80134c2:	69da      	ldr	r2, [r3, #28]
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	f003 030f 	and.w	r3, r3, #15
 80134cc:	2101      	movs	r1, #1
 80134ce:	fa01 f303 	lsl.w	r3, r1, r3
 80134d2:	b29b      	uxth	r3, r3
 80134d4:	43db      	mvns	r3, r3
 80134d6:	68f9      	ldr	r1, [r7, #12]
 80134d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80134dc:	4013      	ands	r3, r2
 80134de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	015a      	lsls	r2, r3, #5
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	4413      	add	r3, r2
 80134e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	0159      	lsls	r1, r3, #5
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	440b      	add	r3, r1
 80134f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134fa:	4619      	mov	r1, r3
 80134fc:	4b35      	ldr	r3, [pc, #212]	@ (80135d4 <USB_DeactivateEndpoint+0x1b0>)
 80134fe:	4013      	ands	r3, r2
 8013500:	600b      	str	r3, [r1, #0]
 8013502:	e060      	b.n	80135c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	015a      	lsls	r2, r3, #5
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	4413      	add	r3, r2
 801350c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013516:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801351a:	d11f      	bne.n	801355c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	015a      	lsls	r2, r3, #5
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	4413      	add	r3, r2
 8013524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	68ba      	ldr	r2, [r7, #8]
 801352c:	0151      	lsls	r1, r2, #5
 801352e:	68fa      	ldr	r2, [r7, #12]
 8013530:	440a      	add	r2, r1
 8013532:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013536:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801353a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	015a      	lsls	r2, r3, #5
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	4413      	add	r3, r2
 8013544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	68ba      	ldr	r2, [r7, #8]
 801354c:	0151      	lsls	r1, r2, #5
 801354e:	68fa      	ldr	r2, [r7, #12]
 8013550:	440a      	add	r2, r1
 8013552:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013556:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801355a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	f003 030f 	and.w	r3, r3, #15
 801356c:	2101      	movs	r1, #1
 801356e:	fa01 f303 	lsl.w	r3, r1, r3
 8013572:	041b      	lsls	r3, r3, #16
 8013574:	43db      	mvns	r3, r3
 8013576:	68f9      	ldr	r1, [r7, #12]
 8013578:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801357c:	4013      	ands	r3, r2
 801357e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013586:	69da      	ldr	r2, [r3, #28]
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	f003 030f 	and.w	r3, r3, #15
 8013590:	2101      	movs	r1, #1
 8013592:	fa01 f303 	lsl.w	r3, r1, r3
 8013596:	041b      	lsls	r3, r3, #16
 8013598:	43db      	mvns	r3, r3
 801359a:	68f9      	ldr	r1, [r7, #12]
 801359c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80135a0:	4013      	ands	r3, r2
 80135a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	015a      	lsls	r2, r3, #5
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	4413      	add	r3, r2
 80135ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80135b0:	681a      	ldr	r2, [r3, #0]
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	0159      	lsls	r1, r3, #5
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	440b      	add	r3, r1
 80135ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80135be:	4619      	mov	r1, r3
 80135c0:	4b05      	ldr	r3, [pc, #20]	@ (80135d8 <USB_DeactivateEndpoint+0x1b4>)
 80135c2:	4013      	ands	r3, r2
 80135c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80135c6:	2300      	movs	r3, #0
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3714      	adds	r7, #20
 80135cc:	46bd      	mov	sp, r7
 80135ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d2:	4770      	bx	lr
 80135d4:	ec337800 	.word	0xec337800
 80135d8:	eff37800 	.word	0xeff37800

080135dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b08a      	sub	sp, #40	@ 0x28
 80135e0:	af02      	add	r7, sp, #8
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	4613      	mov	r3, r2
 80135e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	785b      	ldrb	r3, [r3, #1]
 80135f8:	2b01      	cmp	r3, #1
 80135fa:	f040 8185 	bne.w	8013908 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	691b      	ldr	r3, [r3, #16]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d132      	bne.n	801366c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	015a      	lsls	r2, r3, #5
 801360a:	69fb      	ldr	r3, [r7, #28]
 801360c:	4413      	add	r3, r2
 801360e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013612:	691a      	ldr	r2, [r3, #16]
 8013614:	69bb      	ldr	r3, [r7, #24]
 8013616:	0159      	lsls	r1, r3, #5
 8013618:	69fb      	ldr	r3, [r7, #28]
 801361a:	440b      	add	r3, r1
 801361c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013620:	4619      	mov	r1, r3
 8013622:	4ba7      	ldr	r3, [pc, #668]	@ (80138c0 <USB_EPStartXfer+0x2e4>)
 8013624:	4013      	ands	r3, r2
 8013626:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013628:	69bb      	ldr	r3, [r7, #24]
 801362a:	015a      	lsls	r2, r3, #5
 801362c:	69fb      	ldr	r3, [r7, #28]
 801362e:	4413      	add	r3, r2
 8013630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013634:	691b      	ldr	r3, [r3, #16]
 8013636:	69ba      	ldr	r2, [r7, #24]
 8013638:	0151      	lsls	r1, r2, #5
 801363a:	69fa      	ldr	r2, [r7, #28]
 801363c:	440a      	add	r2, r1
 801363e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013642:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	015a      	lsls	r2, r3, #5
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	4413      	add	r3, r2
 8013650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013654:	691a      	ldr	r2, [r3, #16]
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	0159      	lsls	r1, r3, #5
 801365a:	69fb      	ldr	r3, [r7, #28]
 801365c:	440b      	add	r3, r1
 801365e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013662:	4619      	mov	r1, r3
 8013664:	4b97      	ldr	r3, [pc, #604]	@ (80138c4 <USB_EPStartXfer+0x2e8>)
 8013666:	4013      	ands	r3, r2
 8013668:	610b      	str	r3, [r1, #16]
 801366a:	e097      	b.n	801379c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801366c:	69bb      	ldr	r3, [r7, #24]
 801366e:	015a      	lsls	r2, r3, #5
 8013670:	69fb      	ldr	r3, [r7, #28]
 8013672:	4413      	add	r3, r2
 8013674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013678:	691a      	ldr	r2, [r3, #16]
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	0159      	lsls	r1, r3, #5
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	440b      	add	r3, r1
 8013682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013686:	4619      	mov	r1, r3
 8013688:	4b8e      	ldr	r3, [pc, #568]	@ (80138c4 <USB_EPStartXfer+0x2e8>)
 801368a:	4013      	ands	r3, r2
 801368c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	015a      	lsls	r2, r3, #5
 8013692:	69fb      	ldr	r3, [r7, #28]
 8013694:	4413      	add	r3, r2
 8013696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801369a:	691a      	ldr	r2, [r3, #16]
 801369c:	69bb      	ldr	r3, [r7, #24]
 801369e:	0159      	lsls	r1, r3, #5
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	440b      	add	r3, r1
 80136a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136a8:	4619      	mov	r1, r3
 80136aa:	4b85      	ldr	r3, [pc, #532]	@ (80138c0 <USB_EPStartXfer+0x2e4>)
 80136ac:	4013      	ands	r3, r2
 80136ae:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80136b0:	69bb      	ldr	r3, [r7, #24]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d11a      	bne.n	80136ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	691a      	ldr	r2, [r3, #16]
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	689b      	ldr	r3, [r3, #8]
 80136be:	429a      	cmp	r2, r3
 80136c0:	d903      	bls.n	80136ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	689a      	ldr	r2, [r3, #8]
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80136ca:	69bb      	ldr	r3, [r7, #24]
 80136cc:	015a      	lsls	r2, r3, #5
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	4413      	add	r3, r2
 80136d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136d6:	691b      	ldr	r3, [r3, #16]
 80136d8:	69ba      	ldr	r2, [r7, #24]
 80136da:	0151      	lsls	r1, r2, #5
 80136dc:	69fa      	ldr	r2, [r7, #28]
 80136de:	440a      	add	r2, r1
 80136e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80136e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80136e8:	6113      	str	r3, [r2, #16]
 80136ea:	e044      	b.n	8013776 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	691a      	ldr	r2, [r3, #16]
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	689b      	ldr	r3, [r3, #8]
 80136f4:	4413      	add	r3, r2
 80136f6:	1e5a      	subs	r2, r3, #1
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	689b      	ldr	r3, [r3, #8]
 80136fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8013700:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8013702:	69bb      	ldr	r3, [r7, #24]
 8013704:	015a      	lsls	r2, r3, #5
 8013706:	69fb      	ldr	r3, [r7, #28]
 8013708:	4413      	add	r3, r2
 801370a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801370e:	691a      	ldr	r2, [r3, #16]
 8013710:	8afb      	ldrh	r3, [r7, #22]
 8013712:	04d9      	lsls	r1, r3, #19
 8013714:	4b6c      	ldr	r3, [pc, #432]	@ (80138c8 <USB_EPStartXfer+0x2ec>)
 8013716:	400b      	ands	r3, r1
 8013718:	69b9      	ldr	r1, [r7, #24]
 801371a:	0148      	lsls	r0, r1, #5
 801371c:	69f9      	ldr	r1, [r7, #28]
 801371e:	4401      	add	r1, r0
 8013720:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013724:	4313      	orrs	r3, r2
 8013726:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	791b      	ldrb	r3, [r3, #4]
 801372c:	2b01      	cmp	r3, #1
 801372e:	d122      	bne.n	8013776 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013730:	69bb      	ldr	r3, [r7, #24]
 8013732:	015a      	lsls	r2, r3, #5
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	4413      	add	r3, r2
 8013738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801373c:	691b      	ldr	r3, [r3, #16]
 801373e:	69ba      	ldr	r2, [r7, #24]
 8013740:	0151      	lsls	r1, r2, #5
 8013742:	69fa      	ldr	r2, [r7, #28]
 8013744:	440a      	add	r2, r1
 8013746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801374a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801374e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	015a      	lsls	r2, r3, #5
 8013754:	69fb      	ldr	r3, [r7, #28]
 8013756:	4413      	add	r3, r2
 8013758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801375c:	691a      	ldr	r2, [r3, #16]
 801375e:	8afb      	ldrh	r3, [r7, #22]
 8013760:	075b      	lsls	r3, r3, #29
 8013762:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8013766:	69b9      	ldr	r1, [r7, #24]
 8013768:	0148      	lsls	r0, r1, #5
 801376a:	69f9      	ldr	r1, [r7, #28]
 801376c:	4401      	add	r1, r0
 801376e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013772:	4313      	orrs	r3, r2
 8013774:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013776:	69bb      	ldr	r3, [r7, #24]
 8013778:	015a      	lsls	r2, r3, #5
 801377a:	69fb      	ldr	r3, [r7, #28]
 801377c:	4413      	add	r3, r2
 801377e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013782:	691a      	ldr	r2, [r3, #16]
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	691b      	ldr	r3, [r3, #16]
 8013788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801378c:	69b9      	ldr	r1, [r7, #24]
 801378e:	0148      	lsls	r0, r1, #5
 8013790:	69f9      	ldr	r1, [r7, #28]
 8013792:	4401      	add	r1, r0
 8013794:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013798:	4313      	orrs	r3, r2
 801379a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801379c:	79fb      	ldrb	r3, [r7, #7]
 801379e:	2b01      	cmp	r3, #1
 80137a0:	d14b      	bne.n	801383a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	69db      	ldr	r3, [r3, #28]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d009      	beq.n	80137be <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80137aa:	69bb      	ldr	r3, [r7, #24]
 80137ac:	015a      	lsls	r2, r3, #5
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	4413      	add	r3, r2
 80137b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137b6:	461a      	mov	r2, r3
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	69db      	ldr	r3, [r3, #28]
 80137bc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	791b      	ldrb	r3, [r3, #4]
 80137c2:	2b01      	cmp	r3, #1
 80137c4:	d128      	bne.n	8013818 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80137cc:	689b      	ldr	r3, [r3, #8]
 80137ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d110      	bne.n	80137f8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80137d6:	69bb      	ldr	r3, [r7, #24]
 80137d8:	015a      	lsls	r2, r3, #5
 80137da:	69fb      	ldr	r3, [r7, #28]
 80137dc:	4413      	add	r3, r2
 80137de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	69ba      	ldr	r2, [r7, #24]
 80137e6:	0151      	lsls	r1, r2, #5
 80137e8:	69fa      	ldr	r2, [r7, #28]
 80137ea:	440a      	add	r2, r1
 80137ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80137f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80137f4:	6013      	str	r3, [r2, #0]
 80137f6:	e00f      	b.n	8013818 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	015a      	lsls	r2, r3, #5
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	4413      	add	r3, r2
 8013800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	69ba      	ldr	r2, [r7, #24]
 8013808:	0151      	lsls	r1, r2, #5
 801380a:	69fa      	ldr	r2, [r7, #28]
 801380c:	440a      	add	r2, r1
 801380e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013816:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013818:	69bb      	ldr	r3, [r7, #24]
 801381a:	015a      	lsls	r2, r3, #5
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	4413      	add	r3, r2
 8013820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	69ba      	ldr	r2, [r7, #24]
 8013828:	0151      	lsls	r1, r2, #5
 801382a:	69fa      	ldr	r2, [r7, #28]
 801382c:	440a      	add	r2, r1
 801382e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013832:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013836:	6013      	str	r3, [r2, #0]
 8013838:	e169      	b.n	8013b0e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	015a      	lsls	r2, r3, #5
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	4413      	add	r3, r2
 8013842:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	69ba      	ldr	r2, [r7, #24]
 801384a:	0151      	lsls	r1, r2, #5
 801384c:	69fa      	ldr	r2, [r7, #28]
 801384e:	440a      	add	r2, r1
 8013850:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013854:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013858:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	791b      	ldrb	r3, [r3, #4]
 801385e:	2b01      	cmp	r3, #1
 8013860:	d015      	beq.n	801388e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	691b      	ldr	r3, [r3, #16]
 8013866:	2b00      	cmp	r3, #0
 8013868:	f000 8151 	beq.w	8013b0e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801386c:	69fb      	ldr	r3, [r7, #28]
 801386e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	781b      	ldrb	r3, [r3, #0]
 8013878:	f003 030f 	and.w	r3, r3, #15
 801387c:	2101      	movs	r1, #1
 801387e:	fa01 f303 	lsl.w	r3, r1, r3
 8013882:	69f9      	ldr	r1, [r7, #28]
 8013884:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013888:	4313      	orrs	r3, r2
 801388a:	634b      	str	r3, [r1, #52]	@ 0x34
 801388c:	e13f      	b.n	8013b0e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801388e:	69fb      	ldr	r3, [r7, #28]
 8013890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013894:	689b      	ldr	r3, [r3, #8]
 8013896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801389a:	2b00      	cmp	r3, #0
 801389c:	d116      	bne.n	80138cc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	015a      	lsls	r2, r3, #5
 80138a2:	69fb      	ldr	r3, [r7, #28]
 80138a4:	4413      	add	r3, r2
 80138a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	69ba      	ldr	r2, [r7, #24]
 80138ae:	0151      	lsls	r1, r2, #5
 80138b0:	69fa      	ldr	r2, [r7, #28]
 80138b2:	440a      	add	r2, r1
 80138b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80138b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80138bc:	6013      	str	r3, [r2, #0]
 80138be:	e015      	b.n	80138ec <USB_EPStartXfer+0x310>
 80138c0:	e007ffff 	.word	0xe007ffff
 80138c4:	fff80000 	.word	0xfff80000
 80138c8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	015a      	lsls	r2, r3, #5
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	4413      	add	r3, r2
 80138d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	69ba      	ldr	r2, [r7, #24]
 80138dc:	0151      	lsls	r1, r2, #5
 80138de:	69fa      	ldr	r2, [r7, #28]
 80138e0:	440a      	add	r2, r1
 80138e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80138e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80138ea:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	68d9      	ldr	r1, [r3, #12]
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	781a      	ldrb	r2, [r3, #0]
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	691b      	ldr	r3, [r3, #16]
 80138f8:	b298      	uxth	r0, r3
 80138fa:	79fb      	ldrb	r3, [r7, #7]
 80138fc:	9300      	str	r3, [sp, #0]
 80138fe:	4603      	mov	r3, r0
 8013900:	68f8      	ldr	r0, [r7, #12]
 8013902:	f000 f9b9 	bl	8013c78 <USB_WritePacket>
 8013906:	e102      	b.n	8013b0e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	015a      	lsls	r2, r3, #5
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	4413      	add	r3, r2
 8013910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013914:	691a      	ldr	r2, [r3, #16]
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	0159      	lsls	r1, r3, #5
 801391a:	69fb      	ldr	r3, [r7, #28]
 801391c:	440b      	add	r3, r1
 801391e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013922:	4619      	mov	r1, r3
 8013924:	4b7c      	ldr	r3, [pc, #496]	@ (8013b18 <USB_EPStartXfer+0x53c>)
 8013926:	4013      	ands	r3, r2
 8013928:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	015a      	lsls	r2, r3, #5
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	4413      	add	r3, r2
 8013932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013936:	691a      	ldr	r2, [r3, #16]
 8013938:	69bb      	ldr	r3, [r7, #24]
 801393a:	0159      	lsls	r1, r3, #5
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	440b      	add	r3, r1
 8013940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013944:	4619      	mov	r1, r3
 8013946:	4b75      	ldr	r3, [pc, #468]	@ (8013b1c <USB_EPStartXfer+0x540>)
 8013948:	4013      	ands	r3, r2
 801394a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801394c:	69bb      	ldr	r3, [r7, #24]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d12f      	bne.n	80139b2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	691b      	ldr	r3, [r3, #16]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d003      	beq.n	8013962 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	689a      	ldr	r2, [r3, #8]
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	689a      	ldr	r2, [r3, #8]
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801396a:	69bb      	ldr	r3, [r7, #24]
 801396c:	015a      	lsls	r2, r3, #5
 801396e:	69fb      	ldr	r3, [r7, #28]
 8013970:	4413      	add	r3, r2
 8013972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013976:	691a      	ldr	r2, [r3, #16]
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	6a1b      	ldr	r3, [r3, #32]
 801397c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013980:	69b9      	ldr	r1, [r7, #24]
 8013982:	0148      	lsls	r0, r1, #5
 8013984:	69f9      	ldr	r1, [r7, #28]
 8013986:	4401      	add	r1, r0
 8013988:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801398c:	4313      	orrs	r3, r2
 801398e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	015a      	lsls	r2, r3, #5
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	4413      	add	r3, r2
 8013998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801399c:	691b      	ldr	r3, [r3, #16]
 801399e:	69ba      	ldr	r2, [r7, #24]
 80139a0:	0151      	lsls	r1, r2, #5
 80139a2:	69fa      	ldr	r2, [r7, #28]
 80139a4:	440a      	add	r2, r1
 80139a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80139aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80139ae:	6113      	str	r3, [r2, #16]
 80139b0:	e05f      	b.n	8013a72 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	691b      	ldr	r3, [r3, #16]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d123      	bne.n	8013a02 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80139ba:	69bb      	ldr	r3, [r7, #24]
 80139bc:	015a      	lsls	r2, r3, #5
 80139be:	69fb      	ldr	r3, [r7, #28]
 80139c0:	4413      	add	r3, r2
 80139c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80139c6:	691a      	ldr	r2, [r3, #16]
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	689b      	ldr	r3, [r3, #8]
 80139cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80139d0:	69b9      	ldr	r1, [r7, #24]
 80139d2:	0148      	lsls	r0, r1, #5
 80139d4:	69f9      	ldr	r1, [r7, #28]
 80139d6:	4401      	add	r1, r0
 80139d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80139dc:	4313      	orrs	r3, r2
 80139de:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80139e0:	69bb      	ldr	r3, [r7, #24]
 80139e2:	015a      	lsls	r2, r3, #5
 80139e4:	69fb      	ldr	r3, [r7, #28]
 80139e6:	4413      	add	r3, r2
 80139e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80139ec:	691b      	ldr	r3, [r3, #16]
 80139ee:	69ba      	ldr	r2, [r7, #24]
 80139f0:	0151      	lsls	r1, r2, #5
 80139f2:	69fa      	ldr	r2, [r7, #28]
 80139f4:	440a      	add	r2, r1
 80139f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80139fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80139fe:	6113      	str	r3, [r2, #16]
 8013a00:	e037      	b.n	8013a72 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	691a      	ldr	r2, [r3, #16]
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	689b      	ldr	r3, [r3, #8]
 8013a0a:	4413      	add	r3, r2
 8013a0c:	1e5a      	subs	r2, r3, #1
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	689b      	ldr	r3, [r3, #8]
 8013a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a16:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	689b      	ldr	r3, [r3, #8]
 8013a1c:	8afa      	ldrh	r2, [r7, #22]
 8013a1e:	fb03 f202 	mul.w	r2, r3, r2
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013a26:	69bb      	ldr	r3, [r7, #24]
 8013a28:	015a      	lsls	r2, r3, #5
 8013a2a:	69fb      	ldr	r3, [r7, #28]
 8013a2c:	4413      	add	r3, r2
 8013a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a32:	691a      	ldr	r2, [r3, #16]
 8013a34:	8afb      	ldrh	r3, [r7, #22]
 8013a36:	04d9      	lsls	r1, r3, #19
 8013a38:	4b39      	ldr	r3, [pc, #228]	@ (8013b20 <USB_EPStartXfer+0x544>)
 8013a3a:	400b      	ands	r3, r1
 8013a3c:	69b9      	ldr	r1, [r7, #24]
 8013a3e:	0148      	lsls	r0, r1, #5
 8013a40:	69f9      	ldr	r1, [r7, #28]
 8013a42:	4401      	add	r1, r0
 8013a44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013a48:	4313      	orrs	r3, r2
 8013a4a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013a4c:	69bb      	ldr	r3, [r7, #24]
 8013a4e:	015a      	lsls	r2, r3, #5
 8013a50:	69fb      	ldr	r3, [r7, #28]
 8013a52:	4413      	add	r3, r2
 8013a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a58:	691a      	ldr	r2, [r3, #16]
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	6a1b      	ldr	r3, [r3, #32]
 8013a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013a62:	69b9      	ldr	r1, [r7, #24]
 8013a64:	0148      	lsls	r0, r1, #5
 8013a66:	69f9      	ldr	r1, [r7, #28]
 8013a68:	4401      	add	r1, r0
 8013a6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013a72:	79fb      	ldrb	r3, [r7, #7]
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	d10d      	bne.n	8013a94 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	68db      	ldr	r3, [r3, #12]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d009      	beq.n	8013a94 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	68d9      	ldr	r1, [r3, #12]
 8013a84:	69bb      	ldr	r3, [r7, #24]
 8013a86:	015a      	lsls	r2, r3, #5
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	4413      	add	r3, r2
 8013a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a90:	460a      	mov	r2, r1
 8013a92:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	791b      	ldrb	r3, [r3, #4]
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d128      	bne.n	8013aee <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013aa2:	689b      	ldr	r3, [r3, #8]
 8013aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d110      	bne.n	8013ace <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013aac:	69bb      	ldr	r3, [r7, #24]
 8013aae:	015a      	lsls	r2, r3, #5
 8013ab0:	69fb      	ldr	r3, [r7, #28]
 8013ab2:	4413      	add	r3, r2
 8013ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	69ba      	ldr	r2, [r7, #24]
 8013abc:	0151      	lsls	r1, r2, #5
 8013abe:	69fa      	ldr	r2, [r7, #28]
 8013ac0:	440a      	add	r2, r1
 8013ac2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ac6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013aca:	6013      	str	r3, [r2, #0]
 8013acc:	e00f      	b.n	8013aee <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013ace:	69bb      	ldr	r3, [r7, #24]
 8013ad0:	015a      	lsls	r2, r3, #5
 8013ad2:	69fb      	ldr	r3, [r7, #28]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	69ba      	ldr	r2, [r7, #24]
 8013ade:	0151      	lsls	r1, r2, #5
 8013ae0:	69fa      	ldr	r2, [r7, #28]
 8013ae2:	440a      	add	r2, r1
 8013ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013aec:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013aee:	69bb      	ldr	r3, [r7, #24]
 8013af0:	015a      	lsls	r2, r3, #5
 8013af2:	69fb      	ldr	r3, [r7, #28]
 8013af4:	4413      	add	r3, r2
 8013af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	69ba      	ldr	r2, [r7, #24]
 8013afe:	0151      	lsls	r1, r2, #5
 8013b00:	69fa      	ldr	r2, [r7, #28]
 8013b02:	440a      	add	r2, r1
 8013b04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013b0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b0e:	2300      	movs	r3, #0
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	3720      	adds	r7, #32
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bd80      	pop	{r7, pc}
 8013b18:	fff80000 	.word	0xfff80000
 8013b1c:	e007ffff 	.word	0xe007ffff
 8013b20:	1ff80000 	.word	0x1ff80000

08013b24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b24:	b480      	push	{r7}
 8013b26:	b087      	sub	sp, #28
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013b32:	2300      	movs	r3, #0
 8013b34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	785b      	ldrb	r3, [r3, #1]
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d14a      	bne.n	8013bd8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	015a      	lsls	r2, r3, #5
 8013b48:	693b      	ldr	r3, [r7, #16]
 8013b4a:	4413      	add	r3, r2
 8013b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013b56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013b5a:	f040 8086 	bne.w	8013c6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	781b      	ldrb	r3, [r3, #0]
 8013b62:	015a      	lsls	r2, r3, #5
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	4413      	add	r3, r2
 8013b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	683a      	ldr	r2, [r7, #0]
 8013b70:	7812      	ldrb	r2, [r2, #0]
 8013b72:	0151      	lsls	r1, r2, #5
 8013b74:	693a      	ldr	r2, [r7, #16]
 8013b76:	440a      	add	r2, r1
 8013b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013b7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013b80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	015a      	lsls	r2, r3, #5
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	683a      	ldr	r2, [r7, #0]
 8013b94:	7812      	ldrb	r2, [r2, #0]
 8013b96:	0151      	lsls	r1, r2, #5
 8013b98:	693a      	ldr	r2, [r7, #16]
 8013b9a:	440a      	add	r2, r1
 8013b9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013ba0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013ba4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	3301      	adds	r3, #1
 8013baa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013bb2:	4293      	cmp	r3, r2
 8013bb4:	d902      	bls.n	8013bbc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8013bba:	e056      	b.n	8013c6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	015a      	lsls	r2, r3, #5
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	4413      	add	r3, r2
 8013bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013bd4:	d0e7      	beq.n	8013ba6 <USB_EPStopXfer+0x82>
 8013bd6:	e048      	b.n	8013c6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	015a      	lsls	r2, r3, #5
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	4413      	add	r3, r2
 8013be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013bf0:	d13b      	bne.n	8013c6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	781b      	ldrb	r3, [r3, #0]
 8013bf6:	015a      	lsls	r2, r3, #5
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	4413      	add	r3, r2
 8013bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	683a      	ldr	r2, [r7, #0]
 8013c04:	7812      	ldrb	r2, [r2, #0]
 8013c06:	0151      	lsls	r1, r2, #5
 8013c08:	693a      	ldr	r2, [r7, #16]
 8013c0a:	440a      	add	r2, r1
 8013c0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013c14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	015a      	lsls	r2, r3, #5
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	4413      	add	r3, r2
 8013c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	683a      	ldr	r2, [r7, #0]
 8013c28:	7812      	ldrb	r2, [r2, #0]
 8013c2a:	0151      	lsls	r1, r2, #5
 8013c2c:	693a      	ldr	r2, [r7, #16]
 8013c2e:	440a      	add	r2, r1
 8013c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013c38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	3301      	adds	r3, #1
 8013c3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013c46:	4293      	cmp	r3, r2
 8013c48:	d902      	bls.n	8013c50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8013c4e:	e00c      	b.n	8013c6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	015a      	lsls	r2, r3, #5
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	4413      	add	r3, r2
 8013c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013c64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013c68:	d0e7      	beq.n	8013c3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	371c      	adds	r7, #28
 8013c70:	46bd      	mov	sp, r7
 8013c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c76:	4770      	bx	lr

08013c78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b089      	sub	sp, #36	@ 0x24
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	60f8      	str	r0, [r7, #12]
 8013c80:	60b9      	str	r1, [r7, #8]
 8013c82:	4611      	mov	r1, r2
 8013c84:	461a      	mov	r2, r3
 8013c86:	460b      	mov	r3, r1
 8013c88:	71fb      	strb	r3, [r7, #7]
 8013c8a:	4613      	mov	r3, r2
 8013c8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013c96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d123      	bne.n	8013ce6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013c9e:	88bb      	ldrh	r3, [r7, #4]
 8013ca0:	3303      	adds	r3, #3
 8013ca2:	089b      	lsrs	r3, r3, #2
 8013ca4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	61bb      	str	r3, [r7, #24]
 8013caa:	e018      	b.n	8013cde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013cac:	79fb      	ldrb	r3, [r7, #7]
 8013cae:	031a      	lsls	r2, r3, #12
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	4413      	add	r3, r2
 8013cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013cb8:	461a      	mov	r2, r3
 8013cba:	69fb      	ldr	r3, [r7, #28]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013cc0:	69fb      	ldr	r3, [r7, #28]
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013cc6:	69fb      	ldr	r3, [r7, #28]
 8013cc8:	3301      	adds	r3, #1
 8013cca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013ccc:	69fb      	ldr	r3, [r7, #28]
 8013cce:	3301      	adds	r3, #1
 8013cd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013cd2:	69fb      	ldr	r3, [r7, #28]
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013cd8:	69bb      	ldr	r3, [r7, #24]
 8013cda:	3301      	adds	r3, #1
 8013cdc:	61bb      	str	r3, [r7, #24]
 8013cde:	69ba      	ldr	r2, [r7, #24]
 8013ce0:	693b      	ldr	r3, [r7, #16]
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d3e2      	bcc.n	8013cac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013ce6:	2300      	movs	r3, #0
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3724      	adds	r7, #36	@ 0x24
 8013cec:	46bd      	mov	sp, r7
 8013cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf2:	4770      	bx	lr

08013cf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013cf4:	b480      	push	{r7}
 8013cf6:	b08b      	sub	sp, #44	@ 0x2c
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	60f8      	str	r0, [r7, #12]
 8013cfc:	60b9      	str	r1, [r7, #8]
 8013cfe:	4613      	mov	r3, r2
 8013d00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013d0a:	88fb      	ldrh	r3, [r7, #6]
 8013d0c:	089b      	lsrs	r3, r3, #2
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013d12:	88fb      	ldrh	r3, [r7, #6]
 8013d14:	f003 0303 	and.w	r3, r3, #3
 8013d18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	623b      	str	r3, [r7, #32]
 8013d1e:	e014      	b.n	8013d4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8013d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d2e:	3301      	adds	r3, #1
 8013d30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d34:	3301      	adds	r3, #1
 8013d36:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d40:	3301      	adds	r3, #1
 8013d42:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8013d44:	6a3b      	ldr	r3, [r7, #32]
 8013d46:	3301      	adds	r3, #1
 8013d48:	623b      	str	r3, [r7, #32]
 8013d4a:	6a3a      	ldr	r2, [r7, #32]
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d3e6      	bcc.n	8013d20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013d52:	8bfb      	ldrh	r3, [r7, #30]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d01e      	beq.n	8013d96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013d58:	2300      	movs	r3, #0
 8013d5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013d5c:	69bb      	ldr	r3, [r7, #24]
 8013d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013d62:	461a      	mov	r2, r3
 8013d64:	f107 0310 	add.w	r3, r7, #16
 8013d68:	6812      	ldr	r2, [r2, #0]
 8013d6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013d6c:	693a      	ldr	r2, [r7, #16]
 8013d6e:	6a3b      	ldr	r3, [r7, #32]
 8013d70:	b2db      	uxtb	r3, r3
 8013d72:	00db      	lsls	r3, r3, #3
 8013d74:	fa22 f303 	lsr.w	r3, r2, r3
 8013d78:	b2da      	uxtb	r2, r3
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d7c:	701a      	strb	r2, [r3, #0]
      i++;
 8013d7e:	6a3b      	ldr	r3, [r7, #32]
 8013d80:	3301      	adds	r3, #1
 8013d82:	623b      	str	r3, [r7, #32]
      pDest++;
 8013d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d86:	3301      	adds	r3, #1
 8013d88:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8013d8a:	8bfb      	ldrh	r3, [r7, #30]
 8013d8c:	3b01      	subs	r3, #1
 8013d8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013d90:	8bfb      	ldrh	r3, [r7, #30]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d1ea      	bne.n	8013d6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	372c      	adds	r7, #44	@ 0x2c
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr

08013da4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013da4:	b480      	push	{r7}
 8013da6:	b085      	sub	sp, #20
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	781b      	ldrb	r3, [r3, #0]
 8013db6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	785b      	ldrb	r3, [r3, #1]
 8013dbc:	2b01      	cmp	r3, #1
 8013dbe:	d12c      	bne.n	8013e1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	015a      	lsls	r2, r3, #5
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	4413      	add	r3, r2
 8013dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	db12      	blt.n	8013df8 <USB_EPSetStall+0x54>
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d00f      	beq.n	8013df8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	015a      	lsls	r2, r3, #5
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	4413      	add	r3, r2
 8013de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	68ba      	ldr	r2, [r7, #8]
 8013de8:	0151      	lsls	r1, r2, #5
 8013dea:	68fa      	ldr	r2, [r7, #12]
 8013dec:	440a      	add	r2, r1
 8013dee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013df2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013df6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	015a      	lsls	r2, r3, #5
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	4413      	add	r3, r2
 8013e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	68ba      	ldr	r2, [r7, #8]
 8013e08:	0151      	lsls	r1, r2, #5
 8013e0a:	68fa      	ldr	r2, [r7, #12]
 8013e0c:	440a      	add	r2, r1
 8013e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013e12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013e16:	6013      	str	r3, [r2, #0]
 8013e18:	e02b      	b.n	8013e72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	015a      	lsls	r2, r3, #5
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	4413      	add	r3, r2
 8013e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	db12      	blt.n	8013e52 <USB_EPSetStall+0xae>
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d00f      	beq.n	8013e52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	015a      	lsls	r2, r3, #5
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	4413      	add	r3, r2
 8013e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	68ba      	ldr	r2, [r7, #8]
 8013e42:	0151      	lsls	r1, r2, #5
 8013e44:	68fa      	ldr	r2, [r7, #12]
 8013e46:	440a      	add	r2, r1
 8013e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013e4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013e50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	015a      	lsls	r2, r3, #5
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	4413      	add	r3, r2
 8013e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	68ba      	ldr	r2, [r7, #8]
 8013e62:	0151      	lsls	r1, r2, #5
 8013e64:	68fa      	ldr	r2, [r7, #12]
 8013e66:	440a      	add	r2, r1
 8013e68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013e6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013e70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3714      	adds	r7, #20
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013e80:	b480      	push	{r7}
 8013e82:	b085      	sub	sp, #20
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	785b      	ldrb	r3, [r3, #1]
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d128      	bne.n	8013eee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	015a      	lsls	r2, r3, #5
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	4413      	add	r3, r2
 8013ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	68ba      	ldr	r2, [r7, #8]
 8013eac:	0151      	lsls	r1, r2, #5
 8013eae:	68fa      	ldr	r2, [r7, #12]
 8013eb0:	440a      	add	r2, r1
 8013eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013eb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013eba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	791b      	ldrb	r3, [r3, #4]
 8013ec0:	2b03      	cmp	r3, #3
 8013ec2:	d003      	beq.n	8013ecc <USB_EPClearStall+0x4c>
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	791b      	ldrb	r3, [r3, #4]
 8013ec8:	2b02      	cmp	r3, #2
 8013eca:	d138      	bne.n	8013f3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	015a      	lsls	r2, r3, #5
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	68ba      	ldr	r2, [r7, #8]
 8013edc:	0151      	lsls	r1, r2, #5
 8013ede:	68fa      	ldr	r2, [r7, #12]
 8013ee0:	440a      	add	r2, r1
 8013ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013eea:	6013      	str	r3, [r2, #0]
 8013eec:	e027      	b.n	8013f3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	015a      	lsls	r2, r3, #5
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	4413      	add	r3, r2
 8013ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	68ba      	ldr	r2, [r7, #8]
 8013efe:	0151      	lsls	r1, r2, #5
 8013f00:	68fa      	ldr	r2, [r7, #12]
 8013f02:	440a      	add	r2, r1
 8013f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013f08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013f0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	791b      	ldrb	r3, [r3, #4]
 8013f12:	2b03      	cmp	r3, #3
 8013f14:	d003      	beq.n	8013f1e <USB_EPClearStall+0x9e>
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	791b      	ldrb	r3, [r3, #4]
 8013f1a:	2b02      	cmp	r3, #2
 8013f1c:	d10f      	bne.n	8013f3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	015a      	lsls	r2, r3, #5
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	4413      	add	r3, r2
 8013f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	68ba      	ldr	r2, [r7, #8]
 8013f2e:	0151      	lsls	r1, r2, #5
 8013f30:	68fa      	ldr	r2, [r7, #12]
 8013f32:	440a      	add	r2, r1
 8013f34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013f3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013f3e:	2300      	movs	r3, #0
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3714      	adds	r7, #20
 8013f44:	46bd      	mov	sp, r7
 8013f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4a:	4770      	bx	lr

08013f4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013f4c:	b480      	push	{r7}
 8013f4e:	b085      	sub	sp, #20
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	460b      	mov	r3, r1
 8013f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	68fa      	ldr	r2, [r7, #12]
 8013f66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013f6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8013f6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	78fb      	ldrb	r3, [r7, #3]
 8013f7a:	011b      	lsls	r3, r3, #4
 8013f7c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8013f80:	68f9      	ldr	r1, [r7, #12]
 8013f82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013f86:	4313      	orrs	r3, r2
 8013f88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013f8a:	2300      	movs	r3, #0
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3714      	adds	r7, #20
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr

08013f98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b085      	sub	sp, #20
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	68fa      	ldr	r2, [r7, #12]
 8013fae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013fb2:	f023 0303 	bic.w	r3, r3, #3
 8013fb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013fc6:	f023 0302 	bic.w	r3, r3, #2
 8013fca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013fcc:	2300      	movs	r3, #0
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3714      	adds	r7, #20
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd8:	4770      	bx	lr

08013fda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8013fda:	b480      	push	{r7}
 8013fdc:	b085      	sub	sp, #20
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	68fa      	ldr	r2, [r7, #12]
 8013ff0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013ff4:	f023 0303 	bic.w	r3, r3, #3
 8013ff8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	68fa      	ldr	r2, [r7, #12]
 8014004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014008:	f043 0302 	orr.w	r3, r3, #2
 801400c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801400e:	2300      	movs	r3, #0
}
 8014010:	4618      	mov	r0, r3
 8014012:	3714      	adds	r7, #20
 8014014:	46bd      	mov	sp, r7
 8014016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401a:	4770      	bx	lr

0801401c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801401c:	b480      	push	{r7}
 801401e:	b085      	sub	sp, #20
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	695b      	ldr	r3, [r3, #20]
 8014028:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	699b      	ldr	r3, [r3, #24]
 801402e:	68fa      	ldr	r2, [r7, #12]
 8014030:	4013      	ands	r3, r2
 8014032:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014034:	68fb      	ldr	r3, [r7, #12]
}
 8014036:	4618      	mov	r0, r3
 8014038:	3714      	adds	r7, #20
 801403a:	46bd      	mov	sp, r7
 801403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014040:	4770      	bx	lr

08014042 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8014042:	b480      	push	{r7}
 8014044:	b085      	sub	sp, #20
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014054:	699b      	ldr	r3, [r3, #24]
 8014056:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801405e:	69db      	ldr	r3, [r3, #28]
 8014060:	68ba      	ldr	r2, [r7, #8]
 8014062:	4013      	ands	r3, r2
 8014064:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	0c1b      	lsrs	r3, r3, #16
}
 801406a:	4618      	mov	r0, r3
 801406c:	3714      	adds	r7, #20
 801406e:	46bd      	mov	sp, r7
 8014070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014074:	4770      	bx	lr

08014076 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8014076:	b480      	push	{r7}
 8014078:	b085      	sub	sp, #20
 801407a:	af00      	add	r7, sp, #0
 801407c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014088:	699b      	ldr	r3, [r3, #24]
 801408a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014092:	69db      	ldr	r3, [r3, #28]
 8014094:	68ba      	ldr	r2, [r7, #8]
 8014096:	4013      	ands	r3, r2
 8014098:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	b29b      	uxth	r3, r3
}
 801409e:	4618      	mov	r0, r3
 80140a0:	3714      	adds	r7, #20
 80140a2:	46bd      	mov	sp, r7
 80140a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a8:	4770      	bx	lr

080140aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80140aa:	b480      	push	{r7}
 80140ac:	b085      	sub	sp, #20
 80140ae:	af00      	add	r7, sp, #0
 80140b0:	6078      	str	r0, [r7, #4]
 80140b2:	460b      	mov	r3, r1
 80140b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80140ba:	78fb      	ldrb	r3, [r7, #3]
 80140bc:	015a      	lsls	r2, r3, #5
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	4413      	add	r3, r2
 80140c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80140c6:	689b      	ldr	r3, [r3, #8]
 80140c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80140d0:	695b      	ldr	r3, [r3, #20]
 80140d2:	68ba      	ldr	r2, [r7, #8]
 80140d4:	4013      	ands	r3, r2
 80140d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80140d8:	68bb      	ldr	r3, [r7, #8]
}
 80140da:	4618      	mov	r0, r3
 80140dc:	3714      	adds	r7, #20
 80140de:	46bd      	mov	sp, r7
 80140e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e4:	4770      	bx	lr

080140e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80140e6:	b480      	push	{r7}
 80140e8:	b087      	sub	sp, #28
 80140ea:	af00      	add	r7, sp, #0
 80140ec:	6078      	str	r0, [r7, #4]
 80140ee:	460b      	mov	r3, r1
 80140f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80140fc:	691b      	ldr	r3, [r3, #16]
 80140fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014108:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801410a:	78fb      	ldrb	r3, [r7, #3]
 801410c:	f003 030f 	and.w	r3, r3, #15
 8014110:	68fa      	ldr	r2, [r7, #12]
 8014112:	fa22 f303 	lsr.w	r3, r2, r3
 8014116:	01db      	lsls	r3, r3, #7
 8014118:	b2db      	uxtb	r3, r3
 801411a:	693a      	ldr	r2, [r7, #16]
 801411c:	4313      	orrs	r3, r2
 801411e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014120:	78fb      	ldrb	r3, [r7, #3]
 8014122:	015a      	lsls	r2, r3, #5
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	4413      	add	r3, r2
 8014128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801412c:	689b      	ldr	r3, [r3, #8]
 801412e:	693a      	ldr	r2, [r7, #16]
 8014130:	4013      	ands	r3, r2
 8014132:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014134:	68bb      	ldr	r3, [r7, #8]
}
 8014136:	4618      	mov	r0, r3
 8014138:	371c      	adds	r7, #28
 801413a:	46bd      	mov	sp, r7
 801413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014140:	4770      	bx	lr

08014142 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8014142:	b480      	push	{r7}
 8014144:	b083      	sub	sp, #12
 8014146:	af00      	add	r7, sp, #0
 8014148:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	695b      	ldr	r3, [r3, #20]
 801414e:	f003 0301 	and.w	r3, r3, #1
}
 8014152:	4618      	mov	r0, r3
 8014154:	370c      	adds	r7, #12
 8014156:	46bd      	mov	sp, r7
 8014158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415c:	4770      	bx	lr
	...

08014160 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8014160:	b480      	push	{r7}
 8014162:	b085      	sub	sp, #20
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014172:	681a      	ldr	r2, [r3, #0]
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801417a:	4619      	mov	r1, r3
 801417c:	4b09      	ldr	r3, [pc, #36]	@ (80141a4 <USB_ActivateSetup+0x44>)
 801417e:	4013      	ands	r3, r2
 8014180:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	68fa      	ldr	r2, [r7, #12]
 801418c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014194:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014196:	2300      	movs	r3, #0
}
 8014198:	4618      	mov	r0, r3
 801419a:	3714      	adds	r7, #20
 801419c:	46bd      	mov	sp, r7
 801419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a2:	4770      	bx	lr
 80141a4:	fffff800 	.word	0xfffff800

080141a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80141a8:	b480      	push	{r7}
 80141aa:	b087      	sub	sp, #28
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	460b      	mov	r3, r1
 80141b2:	607a      	str	r2, [r7, #4]
 80141b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	333c      	adds	r3, #60	@ 0x3c
 80141be:	3304      	adds	r3, #4
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80141c4:	693b      	ldr	r3, [r7, #16]
 80141c6:	4a26      	ldr	r2, [pc, #152]	@ (8014260 <USB_EP0_OutStart+0xb8>)
 80141c8:	4293      	cmp	r3, r2
 80141ca:	d90a      	bls.n	80141e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80141d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80141dc:	d101      	bne.n	80141e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80141de:	2300      	movs	r3, #0
 80141e0:	e037      	b.n	8014252 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80141e8:	461a      	mov	r2, r3
 80141ea:	2300      	movs	r3, #0
 80141ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80141f4:	691b      	ldr	r3, [r3, #16]
 80141f6:	697a      	ldr	r2, [r7, #20]
 80141f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80141fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014208:	691b      	ldr	r3, [r3, #16]
 801420a:	697a      	ldr	r2, [r7, #20]
 801420c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014210:	f043 0318 	orr.w	r3, r3, #24
 8014214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801421c:	691b      	ldr	r3, [r3, #16]
 801421e:	697a      	ldr	r2, [r7, #20]
 8014220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014224:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8014228:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801422a:	7afb      	ldrb	r3, [r7, #11]
 801422c:	2b01      	cmp	r3, #1
 801422e:	d10f      	bne.n	8014250 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014236:	461a      	mov	r2, r3
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	697a      	ldr	r2, [r7, #20]
 8014246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801424a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801424e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014250:	2300      	movs	r3, #0
}
 8014252:	4618      	mov	r0, r3
 8014254:	371c      	adds	r7, #28
 8014256:	46bd      	mov	sp, r7
 8014258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425c:	4770      	bx	lr
 801425e:	bf00      	nop
 8014260:	4f54300a 	.word	0x4f54300a

08014264 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014264:	b480      	push	{r7}
 8014266:	b085      	sub	sp, #20
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801426c:	2300      	movs	r3, #0
 801426e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	3301      	adds	r3, #1
 8014274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801427c:	d901      	bls.n	8014282 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801427e:	2303      	movs	r3, #3
 8014280:	e01b      	b.n	80142ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	691b      	ldr	r3, [r3, #16]
 8014286:	2b00      	cmp	r3, #0
 8014288:	daf2      	bge.n	8014270 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801428a:	2300      	movs	r3, #0
 801428c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	691b      	ldr	r3, [r3, #16]
 8014292:	f043 0201 	orr.w	r2, r3, #1
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	3301      	adds	r3, #1
 801429e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80142a6:	d901      	bls.n	80142ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80142a8:	2303      	movs	r3, #3
 80142aa:	e006      	b.n	80142ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	691b      	ldr	r3, [r3, #16]
 80142b0:	f003 0301 	and.w	r3, r3, #1
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d0f0      	beq.n	801429a <USB_CoreReset+0x36>

  return HAL_OK;
 80142b8:	2300      	movs	r3, #0
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3714      	adds	r7, #20
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr
	...

080142c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	460b      	mov	r3, r1
 80142d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80142d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80142d8:	f002 fcfe 	bl	8016cd8 <USBD_static_malloc>
 80142dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d109      	bne.n	80142f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	32b0      	adds	r2, #176	@ 0xb0
 80142ee:	2100      	movs	r1, #0
 80142f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80142f4:	2302      	movs	r3, #2
 80142f6:	e0d4      	b.n	80144a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80142f8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80142fc:	2100      	movs	r1, #0
 80142fe:	68f8      	ldr	r0, [r7, #12]
 8014300:	f002 fd50 	bl	8016da4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	32b0      	adds	r2, #176	@ 0xb0
 801430e:	68f9      	ldr	r1, [r7, #12]
 8014310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	32b0      	adds	r2, #176	@ 0xb0
 801431e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	7c1b      	ldrb	r3, [r3, #16]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d138      	bne.n	80143a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014330:	4b5e      	ldr	r3, [pc, #376]	@ (80144ac <USBD_CDC_Init+0x1e4>)
 8014332:	7819      	ldrb	r1, [r3, #0]
 8014334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014338:	2202      	movs	r2, #2
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f002 fba9 	bl	8016a92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014340:	4b5a      	ldr	r3, [pc, #360]	@ (80144ac <USBD_CDC_Init+0x1e4>)
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	f003 020f 	and.w	r2, r3, #15
 8014348:	6879      	ldr	r1, [r7, #4]
 801434a:	4613      	mov	r3, r2
 801434c:	009b      	lsls	r3, r3, #2
 801434e:	4413      	add	r3, r2
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	440b      	add	r3, r1
 8014354:	3324      	adds	r3, #36	@ 0x24
 8014356:	2201      	movs	r2, #1
 8014358:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801435a:	4b55      	ldr	r3, [pc, #340]	@ (80144b0 <USBD_CDC_Init+0x1e8>)
 801435c:	7819      	ldrb	r1, [r3, #0]
 801435e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014362:	2202      	movs	r2, #2
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f002 fb94 	bl	8016a92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801436a:	4b51      	ldr	r3, [pc, #324]	@ (80144b0 <USBD_CDC_Init+0x1e8>)
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	f003 020f 	and.w	r2, r3, #15
 8014372:	6879      	ldr	r1, [r7, #4]
 8014374:	4613      	mov	r3, r2
 8014376:	009b      	lsls	r3, r3, #2
 8014378:	4413      	add	r3, r2
 801437a:	009b      	lsls	r3, r3, #2
 801437c:	440b      	add	r3, r1
 801437e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014382:	2201      	movs	r2, #1
 8014384:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014386:	4b4b      	ldr	r3, [pc, #300]	@ (80144b4 <USBD_CDC_Init+0x1ec>)
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	f003 020f 	and.w	r2, r3, #15
 801438e:	6879      	ldr	r1, [r7, #4]
 8014390:	4613      	mov	r3, r2
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	4413      	add	r3, r2
 8014396:	009b      	lsls	r3, r3, #2
 8014398:	440b      	add	r3, r1
 801439a:	3326      	adds	r3, #38	@ 0x26
 801439c:	2210      	movs	r2, #16
 801439e:	801a      	strh	r2, [r3, #0]
 80143a0:	e035      	b.n	801440e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80143a2:	4b42      	ldr	r3, [pc, #264]	@ (80144ac <USBD_CDC_Init+0x1e4>)
 80143a4:	7819      	ldrb	r1, [r3, #0]
 80143a6:	2340      	movs	r3, #64	@ 0x40
 80143a8:	2202      	movs	r2, #2
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f002 fb71 	bl	8016a92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80143b0:	4b3e      	ldr	r3, [pc, #248]	@ (80144ac <USBD_CDC_Init+0x1e4>)
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	f003 020f 	and.w	r2, r3, #15
 80143b8:	6879      	ldr	r1, [r7, #4]
 80143ba:	4613      	mov	r3, r2
 80143bc:	009b      	lsls	r3, r3, #2
 80143be:	4413      	add	r3, r2
 80143c0:	009b      	lsls	r3, r3, #2
 80143c2:	440b      	add	r3, r1
 80143c4:	3324      	adds	r3, #36	@ 0x24
 80143c6:	2201      	movs	r2, #1
 80143c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80143ca:	4b39      	ldr	r3, [pc, #228]	@ (80144b0 <USBD_CDC_Init+0x1e8>)
 80143cc:	7819      	ldrb	r1, [r3, #0]
 80143ce:	2340      	movs	r3, #64	@ 0x40
 80143d0:	2202      	movs	r2, #2
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f002 fb5d 	bl	8016a92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80143d8:	4b35      	ldr	r3, [pc, #212]	@ (80144b0 <USBD_CDC_Init+0x1e8>)
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	f003 020f 	and.w	r2, r3, #15
 80143e0:	6879      	ldr	r1, [r7, #4]
 80143e2:	4613      	mov	r3, r2
 80143e4:	009b      	lsls	r3, r3, #2
 80143e6:	4413      	add	r3, r2
 80143e8:	009b      	lsls	r3, r3, #2
 80143ea:	440b      	add	r3, r1
 80143ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80143f0:	2201      	movs	r2, #1
 80143f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80143f4:	4b2f      	ldr	r3, [pc, #188]	@ (80144b4 <USBD_CDC_Init+0x1ec>)
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	f003 020f 	and.w	r2, r3, #15
 80143fc:	6879      	ldr	r1, [r7, #4]
 80143fe:	4613      	mov	r3, r2
 8014400:	009b      	lsls	r3, r3, #2
 8014402:	4413      	add	r3, r2
 8014404:	009b      	lsls	r3, r3, #2
 8014406:	440b      	add	r3, r1
 8014408:	3326      	adds	r3, #38	@ 0x26
 801440a:	2210      	movs	r2, #16
 801440c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801440e:	4b29      	ldr	r3, [pc, #164]	@ (80144b4 <USBD_CDC_Init+0x1ec>)
 8014410:	7819      	ldrb	r1, [r3, #0]
 8014412:	2308      	movs	r3, #8
 8014414:	2203      	movs	r2, #3
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	f002 fb3b 	bl	8016a92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801441c:	4b25      	ldr	r3, [pc, #148]	@ (80144b4 <USBD_CDC_Init+0x1ec>)
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	f003 020f 	and.w	r2, r3, #15
 8014424:	6879      	ldr	r1, [r7, #4]
 8014426:	4613      	mov	r3, r2
 8014428:	009b      	lsls	r3, r3, #2
 801442a:	4413      	add	r3, r2
 801442c:	009b      	lsls	r3, r3, #2
 801442e:	440b      	add	r3, r1
 8014430:	3324      	adds	r3, #36	@ 0x24
 8014432:	2201      	movs	r2, #1
 8014434:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	2200      	movs	r2, #0
 801443a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014444:	687a      	ldr	r2, [r7, #4]
 8014446:	33b0      	adds	r3, #176	@ 0xb0
 8014448:	009b      	lsls	r3, r3, #2
 801444a:	4413      	add	r3, r2
 801444c:	685b      	ldr	r3, [r3, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	2200      	movs	r2, #0
 8014456:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2200      	movs	r2, #0
 801445e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8014468:	2b00      	cmp	r3, #0
 801446a:	d101      	bne.n	8014470 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801446c:	2302      	movs	r3, #2
 801446e:	e018      	b.n	80144a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	7c1b      	ldrb	r3, [r3, #16]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d10a      	bne.n	801448e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014478:	4b0d      	ldr	r3, [pc, #52]	@ (80144b0 <USBD_CDC_Init+0x1e8>)
 801447a:	7819      	ldrb	r1, [r3, #0]
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014482:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f002 fbf2 	bl	8016c70 <USBD_LL_PrepareReceive>
 801448c:	e008      	b.n	80144a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801448e:	4b08      	ldr	r3, [pc, #32]	@ (80144b0 <USBD_CDC_Init+0x1e8>)
 8014490:	7819      	ldrb	r1, [r3, #0]
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014498:	2340      	movs	r3, #64	@ 0x40
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f002 fbe8 	bl	8016c70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80144a0:	2300      	movs	r3, #0
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3710      	adds	r7, #16
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	bf00      	nop
 80144ac:	2400009b 	.word	0x2400009b
 80144b0:	2400009c 	.word	0x2400009c
 80144b4:	2400009d 	.word	0x2400009d

080144b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	460b      	mov	r3, r1
 80144c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80144c4:	4b3a      	ldr	r3, [pc, #232]	@ (80145b0 <USBD_CDC_DeInit+0xf8>)
 80144c6:	781b      	ldrb	r3, [r3, #0]
 80144c8:	4619      	mov	r1, r3
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f002 fb07 	bl	8016ade <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80144d0:	4b37      	ldr	r3, [pc, #220]	@ (80145b0 <USBD_CDC_DeInit+0xf8>)
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	f003 020f 	and.w	r2, r3, #15
 80144d8:	6879      	ldr	r1, [r7, #4]
 80144da:	4613      	mov	r3, r2
 80144dc:	009b      	lsls	r3, r3, #2
 80144de:	4413      	add	r3, r2
 80144e0:	009b      	lsls	r3, r3, #2
 80144e2:	440b      	add	r3, r1
 80144e4:	3324      	adds	r3, #36	@ 0x24
 80144e6:	2200      	movs	r2, #0
 80144e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80144ea:	4b32      	ldr	r3, [pc, #200]	@ (80145b4 <USBD_CDC_DeInit+0xfc>)
 80144ec:	781b      	ldrb	r3, [r3, #0]
 80144ee:	4619      	mov	r1, r3
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f002 faf4 	bl	8016ade <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80144f6:	4b2f      	ldr	r3, [pc, #188]	@ (80145b4 <USBD_CDC_DeInit+0xfc>)
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	f003 020f 	and.w	r2, r3, #15
 80144fe:	6879      	ldr	r1, [r7, #4]
 8014500:	4613      	mov	r3, r2
 8014502:	009b      	lsls	r3, r3, #2
 8014504:	4413      	add	r3, r2
 8014506:	009b      	lsls	r3, r3, #2
 8014508:	440b      	add	r3, r1
 801450a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801450e:	2200      	movs	r2, #0
 8014510:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014512:	4b29      	ldr	r3, [pc, #164]	@ (80145b8 <USBD_CDC_DeInit+0x100>)
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	4619      	mov	r1, r3
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f002 fae0 	bl	8016ade <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801451e:	4b26      	ldr	r3, [pc, #152]	@ (80145b8 <USBD_CDC_DeInit+0x100>)
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	f003 020f 	and.w	r2, r3, #15
 8014526:	6879      	ldr	r1, [r7, #4]
 8014528:	4613      	mov	r3, r2
 801452a:	009b      	lsls	r3, r3, #2
 801452c:	4413      	add	r3, r2
 801452e:	009b      	lsls	r3, r3, #2
 8014530:	440b      	add	r3, r1
 8014532:	3324      	adds	r3, #36	@ 0x24
 8014534:	2200      	movs	r2, #0
 8014536:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014538:	4b1f      	ldr	r3, [pc, #124]	@ (80145b8 <USBD_CDC_DeInit+0x100>)
 801453a:	781b      	ldrb	r3, [r3, #0]
 801453c:	f003 020f 	and.w	r2, r3, #15
 8014540:	6879      	ldr	r1, [r7, #4]
 8014542:	4613      	mov	r3, r2
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	4413      	add	r3, r2
 8014548:	009b      	lsls	r3, r3, #2
 801454a:	440b      	add	r3, r1
 801454c:	3326      	adds	r3, #38	@ 0x26
 801454e:	2200      	movs	r2, #0
 8014550:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	32b0      	adds	r2, #176	@ 0xb0
 801455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d01f      	beq.n	80145a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801456a:	687a      	ldr	r2, [r7, #4]
 801456c:	33b0      	adds	r3, #176	@ 0xb0
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	4413      	add	r3, r2
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	32b0      	adds	r2, #176	@ 0xb0
 8014582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014586:	4618      	mov	r0, r3
 8014588:	f002 fbb4 	bl	8016cf4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	32b0      	adds	r2, #176	@ 0xb0
 8014596:	2100      	movs	r1, #0
 8014598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2200      	movs	r2, #0
 80145a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80145a4:	2300      	movs	r3, #0
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3708      	adds	r7, #8
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	2400009b 	.word	0x2400009b
 80145b4:	2400009c 	.word	0x2400009c
 80145b8:	2400009d 	.word	0x2400009d

080145bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b086      	sub	sp, #24
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	32b0      	adds	r2, #176	@ 0xb0
 80145d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80145d6:	2300      	movs	r3, #0
 80145d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80145da:	2300      	movs	r3, #0
 80145dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80145de:	2300      	movs	r3, #0
 80145e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80145e2:	693b      	ldr	r3, [r7, #16]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d101      	bne.n	80145ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80145e8:	2303      	movs	r3, #3
 80145ea:	e0bf      	b.n	801476c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d050      	beq.n	801469a <USBD_CDC_Setup+0xde>
 80145f8:	2b20      	cmp	r3, #32
 80145fa:	f040 80af 	bne.w	801475c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80145fe:	683b      	ldr	r3, [r7, #0]
 8014600:	88db      	ldrh	r3, [r3, #6]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d03a      	beq.n	801467c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	b25b      	sxtb	r3, r3
 801460c:	2b00      	cmp	r3, #0
 801460e:	da1b      	bge.n	8014648 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	33b0      	adds	r3, #176	@ 0xb0
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	4413      	add	r3, r2
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	689b      	ldr	r3, [r3, #8]
 8014622:	683a      	ldr	r2, [r7, #0]
 8014624:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014626:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014628:	683a      	ldr	r2, [r7, #0]
 801462a:	88d2      	ldrh	r2, [r2, #6]
 801462c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	88db      	ldrh	r3, [r3, #6]
 8014632:	2b07      	cmp	r3, #7
 8014634:	bf28      	it	cs
 8014636:	2307      	movcs	r3, #7
 8014638:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801463a:	693b      	ldr	r3, [r7, #16]
 801463c:	89fa      	ldrh	r2, [r7, #14]
 801463e:	4619      	mov	r1, r3
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f001 fdbd 	bl	80161c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014646:	e090      	b.n	801476a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	785a      	ldrb	r2, [r3, #1]
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	88db      	ldrh	r3, [r3, #6]
 8014656:	2b3f      	cmp	r3, #63	@ 0x3f
 8014658:	d803      	bhi.n	8014662 <USBD_CDC_Setup+0xa6>
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	88db      	ldrh	r3, [r3, #6]
 801465e:	b2da      	uxtb	r2, r3
 8014660:	e000      	b.n	8014664 <USBD_CDC_Setup+0xa8>
 8014662:	2240      	movs	r2, #64	@ 0x40
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801466a:	6939      	ldr	r1, [r7, #16]
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8014672:	461a      	mov	r2, r3
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f001 fdcf 	bl	8016218 <USBD_CtlPrepareRx>
      break;
 801467a:	e076      	b.n	801476a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014682:	687a      	ldr	r2, [r7, #4]
 8014684:	33b0      	adds	r3, #176	@ 0xb0
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	4413      	add	r3, r2
 801468a:	685b      	ldr	r3, [r3, #4]
 801468c:	689b      	ldr	r3, [r3, #8]
 801468e:	683a      	ldr	r2, [r7, #0]
 8014690:	7850      	ldrb	r0, [r2, #1]
 8014692:	2200      	movs	r2, #0
 8014694:	6839      	ldr	r1, [r7, #0]
 8014696:	4798      	blx	r3
      break;
 8014698:	e067      	b.n	801476a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	785b      	ldrb	r3, [r3, #1]
 801469e:	2b0b      	cmp	r3, #11
 80146a0:	d851      	bhi.n	8014746 <USBD_CDC_Setup+0x18a>
 80146a2:	a201      	add	r2, pc, #4	@ (adr r2, 80146a8 <USBD_CDC_Setup+0xec>)
 80146a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146a8:	080146d9 	.word	0x080146d9
 80146ac:	08014755 	.word	0x08014755
 80146b0:	08014747 	.word	0x08014747
 80146b4:	08014747 	.word	0x08014747
 80146b8:	08014747 	.word	0x08014747
 80146bc:	08014747 	.word	0x08014747
 80146c0:	08014747 	.word	0x08014747
 80146c4:	08014747 	.word	0x08014747
 80146c8:	08014747 	.word	0x08014747
 80146cc:	08014747 	.word	0x08014747
 80146d0:	08014703 	.word	0x08014703
 80146d4:	0801472d 	.word	0x0801472d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80146de:	b2db      	uxtb	r3, r3
 80146e0:	2b03      	cmp	r3, #3
 80146e2:	d107      	bne.n	80146f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80146e4:	f107 030a 	add.w	r3, r7, #10
 80146e8:	2202      	movs	r2, #2
 80146ea:	4619      	mov	r1, r3
 80146ec:	6878      	ldr	r0, [r7, #4]
 80146ee:	f001 fd67 	bl	80161c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80146f2:	e032      	b.n	801475a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80146f4:	6839      	ldr	r1, [r7, #0]
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f001 fce5 	bl	80160c6 <USBD_CtlError>
            ret = USBD_FAIL;
 80146fc:	2303      	movs	r3, #3
 80146fe:	75fb      	strb	r3, [r7, #23]
          break;
 8014700:	e02b      	b.n	801475a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014708:	b2db      	uxtb	r3, r3
 801470a:	2b03      	cmp	r3, #3
 801470c:	d107      	bne.n	801471e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801470e:	f107 030d 	add.w	r3, r7, #13
 8014712:	2201      	movs	r2, #1
 8014714:	4619      	mov	r1, r3
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	f001 fd52 	bl	80161c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801471c:	e01d      	b.n	801475a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801471e:	6839      	ldr	r1, [r7, #0]
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f001 fcd0 	bl	80160c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014726:	2303      	movs	r3, #3
 8014728:	75fb      	strb	r3, [r7, #23]
          break;
 801472a:	e016      	b.n	801475a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014732:	b2db      	uxtb	r3, r3
 8014734:	2b03      	cmp	r3, #3
 8014736:	d00f      	beq.n	8014758 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014738:	6839      	ldr	r1, [r7, #0]
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f001 fcc3 	bl	80160c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014740:	2303      	movs	r3, #3
 8014742:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014744:	e008      	b.n	8014758 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014746:	6839      	ldr	r1, [r7, #0]
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f001 fcbc 	bl	80160c6 <USBD_CtlError>
          ret = USBD_FAIL;
 801474e:	2303      	movs	r3, #3
 8014750:	75fb      	strb	r3, [r7, #23]
          break;
 8014752:	e002      	b.n	801475a <USBD_CDC_Setup+0x19e>
          break;
 8014754:	bf00      	nop
 8014756:	e008      	b.n	801476a <USBD_CDC_Setup+0x1ae>
          break;
 8014758:	bf00      	nop
      }
      break;
 801475a:	e006      	b.n	801476a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801475c:	6839      	ldr	r1, [r7, #0]
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f001 fcb1 	bl	80160c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8014764:	2303      	movs	r3, #3
 8014766:	75fb      	strb	r3, [r7, #23]
      break;
 8014768:	bf00      	nop
  }

  return (uint8_t)ret;
 801476a:	7dfb      	ldrb	r3, [r7, #23]
}
 801476c:	4618      	mov	r0, r3
 801476e:	3718      	adds	r7, #24
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b084      	sub	sp, #16
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	460b      	mov	r3, r1
 801477e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014786:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	32b0      	adds	r2, #176	@ 0xb0
 8014792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d101      	bne.n	801479e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801479a:	2303      	movs	r3, #3
 801479c:	e065      	b.n	801486a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	32b0      	adds	r2, #176	@ 0xb0
 80147a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80147ae:	78fb      	ldrb	r3, [r7, #3]
 80147b0:	f003 020f 	and.w	r2, r3, #15
 80147b4:	6879      	ldr	r1, [r7, #4]
 80147b6:	4613      	mov	r3, r2
 80147b8:	009b      	lsls	r3, r3, #2
 80147ba:	4413      	add	r3, r2
 80147bc:	009b      	lsls	r3, r3, #2
 80147be:	440b      	add	r3, r1
 80147c0:	3318      	adds	r3, #24
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d02f      	beq.n	8014828 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80147c8:	78fb      	ldrb	r3, [r7, #3]
 80147ca:	f003 020f 	and.w	r2, r3, #15
 80147ce:	6879      	ldr	r1, [r7, #4]
 80147d0:	4613      	mov	r3, r2
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	4413      	add	r3, r2
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	440b      	add	r3, r1
 80147da:	3318      	adds	r3, #24
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	78fb      	ldrb	r3, [r7, #3]
 80147e0:	f003 010f 	and.w	r1, r3, #15
 80147e4:	68f8      	ldr	r0, [r7, #12]
 80147e6:	460b      	mov	r3, r1
 80147e8:	00db      	lsls	r3, r3, #3
 80147ea:	440b      	add	r3, r1
 80147ec:	009b      	lsls	r3, r3, #2
 80147ee:	4403      	add	r3, r0
 80147f0:	331c      	adds	r3, #28
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80147f8:	fb01 f303 	mul.w	r3, r1, r3
 80147fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d112      	bne.n	8014828 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014802:	78fb      	ldrb	r3, [r7, #3]
 8014804:	f003 020f 	and.w	r2, r3, #15
 8014808:	6879      	ldr	r1, [r7, #4]
 801480a:	4613      	mov	r3, r2
 801480c:	009b      	lsls	r3, r3, #2
 801480e:	4413      	add	r3, r2
 8014810:	009b      	lsls	r3, r3, #2
 8014812:	440b      	add	r3, r1
 8014814:	3318      	adds	r3, #24
 8014816:	2200      	movs	r2, #0
 8014818:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801481a:	78f9      	ldrb	r1, [r7, #3]
 801481c:	2300      	movs	r3, #0
 801481e:	2200      	movs	r2, #0
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f002 fa04 	bl	8016c2e <USBD_LL_Transmit>
 8014826:	e01f      	b.n	8014868 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	2200      	movs	r2, #0
 801482c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	33b0      	adds	r3, #176	@ 0xb0
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	4413      	add	r3, r2
 801483e:	685b      	ldr	r3, [r3, #4]
 8014840:	691b      	ldr	r3, [r3, #16]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d010      	beq.n	8014868 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	33b0      	adds	r3, #176	@ 0xb0
 8014850:	009b      	lsls	r3, r3, #2
 8014852:	4413      	add	r3, r2
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	691b      	ldr	r3, [r3, #16]
 8014858:	68ba      	ldr	r2, [r7, #8]
 801485a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801485e:	68ba      	ldr	r2, [r7, #8]
 8014860:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8014864:	78fa      	ldrb	r2, [r7, #3]
 8014866:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014868:	2300      	movs	r3, #0
}
 801486a:	4618      	mov	r0, r3
 801486c:	3710      	adds	r7, #16
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}

08014872 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014872:	b580      	push	{r7, lr}
 8014874:	b084      	sub	sp, #16
 8014876:	af00      	add	r7, sp, #0
 8014878:	6078      	str	r0, [r7, #4]
 801487a:	460b      	mov	r3, r1
 801487c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	32b0      	adds	r2, #176	@ 0xb0
 8014888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801488c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	32b0      	adds	r2, #176	@ 0xb0
 8014898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d101      	bne.n	80148a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80148a0:	2303      	movs	r3, #3
 80148a2:	e01a      	b.n	80148da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80148a4:	78fb      	ldrb	r3, [r7, #3]
 80148a6:	4619      	mov	r1, r3
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f002 fa02 	bl	8016cb2 <USBD_LL_GetRxDataSize>
 80148ae:	4602      	mov	r2, r0
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80148bc:	687a      	ldr	r2, [r7, #4]
 80148be:	33b0      	adds	r3, #176	@ 0xb0
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	4413      	add	r3, r2
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	68db      	ldr	r3, [r3, #12]
 80148c8:	68fa      	ldr	r2, [r7, #12]
 80148ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80148ce:	68fa      	ldr	r2, [r7, #12]
 80148d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80148d4:	4611      	mov	r1, r2
 80148d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80148d8:	2300      	movs	r3, #0
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3710      	adds	r7, #16
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80148e2:	b580      	push	{r7, lr}
 80148e4:	b084      	sub	sp, #16
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	32b0      	adds	r2, #176	@ 0xb0
 80148f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d101      	bne.n	8014904 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014900:	2303      	movs	r3, #3
 8014902:	e024      	b.n	801494e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	33b0      	adds	r3, #176	@ 0xb0
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	4413      	add	r3, r2
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d019      	beq.n	801494c <USBD_CDC_EP0_RxReady+0x6a>
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801491e:	2bff      	cmp	r3, #255	@ 0xff
 8014920:	d014      	beq.n	801494c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014928:	687a      	ldr	r2, [r7, #4]
 801492a:	33b0      	adds	r3, #176	@ 0xb0
 801492c:	009b      	lsls	r3, r3, #2
 801492e:	4413      	add	r3, r2
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	689b      	ldr	r3, [r3, #8]
 8014934:	68fa      	ldr	r2, [r7, #12]
 8014936:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801493a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801493c:	68fa      	ldr	r2, [r7, #12]
 801493e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014942:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	22ff      	movs	r2, #255	@ 0xff
 8014948:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801494c:	2300      	movs	r3, #0
}
 801494e:	4618      	mov	r0, r3
 8014950:	3710      	adds	r7, #16
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
	...

08014958 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b086      	sub	sp, #24
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014960:	2182      	movs	r1, #130	@ 0x82
 8014962:	4818      	ldr	r0, [pc, #96]	@ (80149c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014964:	f000 fd4f 	bl	8015406 <USBD_GetEpDesc>
 8014968:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801496a:	2101      	movs	r1, #1
 801496c:	4815      	ldr	r0, [pc, #84]	@ (80149c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801496e:	f000 fd4a 	bl	8015406 <USBD_GetEpDesc>
 8014972:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014974:	2181      	movs	r1, #129	@ 0x81
 8014976:	4813      	ldr	r0, [pc, #76]	@ (80149c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014978:	f000 fd45 	bl	8015406 <USBD_GetEpDesc>
 801497c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d002      	beq.n	801498a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	2210      	movs	r2, #16
 8014988:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801498a:	693b      	ldr	r3, [r7, #16]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d006      	beq.n	801499e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014990:	693b      	ldr	r3, [r7, #16]
 8014992:	2200      	movs	r2, #0
 8014994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014998:	711a      	strb	r2, [r3, #4]
 801499a:	2200      	movs	r2, #0
 801499c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d006      	beq.n	80149b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2200      	movs	r2, #0
 80149a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80149ac:	711a      	strb	r2, [r3, #4]
 80149ae:	2200      	movs	r2, #0
 80149b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	2243      	movs	r2, #67	@ 0x43
 80149b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80149b8:	4b02      	ldr	r3, [pc, #8]	@ (80149c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3718      	adds	r7, #24
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}
 80149c2:	bf00      	nop
 80149c4:	24000058 	.word	0x24000058

080149c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b086      	sub	sp, #24
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80149d0:	2182      	movs	r1, #130	@ 0x82
 80149d2:	4818      	ldr	r0, [pc, #96]	@ (8014a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80149d4:	f000 fd17 	bl	8015406 <USBD_GetEpDesc>
 80149d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80149da:	2101      	movs	r1, #1
 80149dc:	4815      	ldr	r0, [pc, #84]	@ (8014a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80149de:	f000 fd12 	bl	8015406 <USBD_GetEpDesc>
 80149e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80149e4:	2181      	movs	r1, #129	@ 0x81
 80149e6:	4813      	ldr	r0, [pc, #76]	@ (8014a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80149e8:	f000 fd0d 	bl	8015406 <USBD_GetEpDesc>
 80149ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d002      	beq.n	80149fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	2210      	movs	r2, #16
 80149f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80149fa:	693b      	ldr	r3, [r7, #16]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d006      	beq.n	8014a0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	2200      	movs	r2, #0
 8014a04:	711a      	strb	r2, [r3, #4]
 8014a06:	2200      	movs	r2, #0
 8014a08:	f042 0202 	orr.w	r2, r2, #2
 8014a0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d006      	beq.n	8014a22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2200      	movs	r2, #0
 8014a18:	711a      	strb	r2, [r3, #4]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	f042 0202 	orr.w	r2, r2, #2
 8014a20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2243      	movs	r2, #67	@ 0x43
 8014a26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014a28:	4b02      	ldr	r3, [pc, #8]	@ (8014a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	3718      	adds	r7, #24
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}
 8014a32:	bf00      	nop
 8014a34:	24000058 	.word	0x24000058

08014a38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014a40:	2182      	movs	r1, #130	@ 0x82
 8014a42:	4818      	ldr	r0, [pc, #96]	@ (8014aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014a44:	f000 fcdf 	bl	8015406 <USBD_GetEpDesc>
 8014a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014a4a:	2101      	movs	r1, #1
 8014a4c:	4815      	ldr	r0, [pc, #84]	@ (8014aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014a4e:	f000 fcda 	bl	8015406 <USBD_GetEpDesc>
 8014a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014a54:	2181      	movs	r1, #129	@ 0x81
 8014a56:	4813      	ldr	r0, [pc, #76]	@ (8014aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014a58:	f000 fcd5 	bl	8015406 <USBD_GetEpDesc>
 8014a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d002      	beq.n	8014a6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014a64:	697b      	ldr	r3, [r7, #20]
 8014a66:	2210      	movs	r2, #16
 8014a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014a6a:	693b      	ldr	r3, [r7, #16]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d006      	beq.n	8014a7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014a70:	693b      	ldr	r3, [r7, #16]
 8014a72:	2200      	movs	r2, #0
 8014a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014a78:	711a      	strb	r2, [r3, #4]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d006      	beq.n	8014a92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	2200      	movs	r2, #0
 8014a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014a8c:	711a      	strb	r2, [r3, #4]
 8014a8e:	2200      	movs	r2, #0
 8014a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2243      	movs	r2, #67	@ 0x43
 8014a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014a98:	4b02      	ldr	r3, [pc, #8]	@ (8014aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	3718      	adds	r7, #24
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}
 8014aa2:	bf00      	nop
 8014aa4:	24000058 	.word	0x24000058

08014aa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b083      	sub	sp, #12
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	220a      	movs	r2, #10
 8014ab4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014ab6:	4b03      	ldr	r3, [pc, #12]	@ (8014ac4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	370c      	adds	r7, #12
 8014abc:	46bd      	mov	sp, r7
 8014abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac2:	4770      	bx	lr
 8014ac4:	24000014 	.word	0x24000014

08014ac8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014ac8:	b480      	push	{r7}
 8014aca:	b083      	sub	sp, #12
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d101      	bne.n	8014adc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014ad8:	2303      	movs	r3, #3
 8014ada:	e009      	b.n	8014af0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014ae2:	687a      	ldr	r2, [r7, #4]
 8014ae4:	33b0      	adds	r3, #176	@ 0xb0
 8014ae6:	009b      	lsls	r3, r3, #2
 8014ae8:	4413      	add	r3, r2
 8014aea:	683a      	ldr	r2, [r7, #0]
 8014aec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014aee:	2300      	movs	r3, #0
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	370c      	adds	r7, #12
 8014af4:	46bd      	mov	sp, r7
 8014af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afa:	4770      	bx	lr

08014afc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014afc:	b480      	push	{r7}
 8014afe:	b087      	sub	sp, #28
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	60f8      	str	r0, [r7, #12]
 8014b04:	60b9      	str	r1, [r7, #8]
 8014b06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	32b0      	adds	r2, #176	@ 0xb0
 8014b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b16:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d101      	bne.n	8014b22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014b1e:	2303      	movs	r3, #3
 8014b20:	e008      	b.n	8014b34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014b22:	697b      	ldr	r3, [r7, #20]
 8014b24:	68ba      	ldr	r2, [r7, #8]
 8014b26:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8014b32:	2300      	movs	r3, #0
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	371c      	adds	r7, #28
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3e:	4770      	bx	lr

08014b40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014b40:	b480      	push	{r7}
 8014b42:	b085      	sub	sp, #20
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
 8014b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	32b0      	adds	r2, #176	@ 0xb0
 8014b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d101      	bne.n	8014b64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014b60:	2303      	movs	r3, #3
 8014b62:	e004      	b.n	8014b6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	683a      	ldr	r2, [r7, #0]
 8014b68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8014b6c:	2300      	movs	r3, #0
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3714      	adds	r7, #20
 8014b72:	46bd      	mov	sp, r7
 8014b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b78:	4770      	bx	lr
	...

08014b7c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b084      	sub	sp, #16
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	32b0      	adds	r2, #176	@ 0xb0
 8014b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b92:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014b94:	2301      	movs	r3, #1
 8014b96:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d101      	bne.n	8014ba2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014b9e:	2303      	movs	r3, #3
 8014ba0:	e025      	b.n	8014bee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d11f      	bne.n	8014bec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	2201      	movs	r2, #1
 8014bb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014bb4:	4b10      	ldr	r3, [pc, #64]	@ (8014bf8 <USBD_CDC_TransmitPacket+0x7c>)
 8014bb6:	781b      	ldrb	r3, [r3, #0]
 8014bb8:	f003 020f 	and.w	r2, r3, #15
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	4613      	mov	r3, r2
 8014bc6:	009b      	lsls	r3, r3, #2
 8014bc8:	4413      	add	r3, r2
 8014bca:	009b      	lsls	r3, r3, #2
 8014bcc:	4403      	add	r3, r0
 8014bce:	3318      	adds	r3, #24
 8014bd0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014bd2:	4b09      	ldr	r3, [pc, #36]	@ (8014bf8 <USBD_CDC_TransmitPacket+0x7c>)
 8014bd4:	7819      	ldrb	r1, [r3, #0]
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f002 f823 	bl	8016c2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8014be8:	2300      	movs	r3, #0
 8014bea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3710      	adds	r7, #16
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	2400009b 	.word	0x2400009b

08014bfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b084      	sub	sp, #16
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	32b0      	adds	r2, #176	@ 0xb0
 8014c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c12:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	32b0      	adds	r2, #176	@ 0xb0
 8014c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d101      	bne.n	8014c2a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014c26:	2303      	movs	r3, #3
 8014c28:	e018      	b.n	8014c5c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	7c1b      	ldrb	r3, [r3, #16]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d10a      	bne.n	8014c48 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014c32:	4b0c      	ldr	r3, [pc, #48]	@ (8014c64 <USBD_CDC_ReceivePacket+0x68>)
 8014c34:	7819      	ldrb	r1, [r3, #0]
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f002 f815 	bl	8016c70 <USBD_LL_PrepareReceive>
 8014c46:	e008      	b.n	8014c5a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014c48:	4b06      	ldr	r3, [pc, #24]	@ (8014c64 <USBD_CDC_ReceivePacket+0x68>)
 8014c4a:	7819      	ldrb	r1, [r3, #0]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014c52:	2340      	movs	r3, #64	@ 0x40
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f002 f80b 	bl	8016c70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014c5a:	2300      	movs	r3, #0
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3710      	adds	r7, #16
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	2400009c 	.word	0x2400009c

08014c68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b086      	sub	sp, #24
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	60f8      	str	r0, [r7, #12]
 8014c70:	60b9      	str	r1, [r7, #8]
 8014c72:	4613      	mov	r3, r2
 8014c74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d101      	bne.n	8014c80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014c7c:	2303      	movs	r3, #3
 8014c7e:	e01f      	b.n	8014cc0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	2200      	movs	r2, #0
 8014c84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2200      	movs	r2, #0
 8014c94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d003      	beq.n	8014ca6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	68ba      	ldr	r2, [r7, #8]
 8014ca2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	2201      	movs	r2, #1
 8014caa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	79fa      	ldrb	r2, [r7, #7]
 8014cb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014cb4:	68f8      	ldr	r0, [r7, #12]
 8014cb6:	f001 fe81 	bl	80169bc <USBD_LL_Init>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3718      	adds	r7, #24
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b084      	sub	sp, #16
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d101      	bne.n	8014ce0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014cdc:	2303      	movs	r3, #3
 8014cde:	e025      	b.n	8014d2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	683a      	ldr	r2, [r7, #0]
 8014ce4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	32ae      	adds	r2, #174	@ 0xae
 8014cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d00f      	beq.n	8014d1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	32ae      	adds	r2, #174	@ 0xae
 8014d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d0c:	f107 020e 	add.w	r2, r7, #14
 8014d10:	4610      	mov	r0, r2
 8014d12:	4798      	blx	r3
 8014d14:	4602      	mov	r2, r0
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014d22:	1c5a      	adds	r2, r3, #1
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8014d2a:	2300      	movs	r3, #0
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3710      	adds	r7, #16
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f001 fe8d 	bl	8016a5c <USBD_LL_Start>
 8014d42:	4603      	mov	r3, r0
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	3708      	adds	r7, #8
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}

08014d4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014d54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	370c      	adds	r7, #12
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr

08014d62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d62:	b580      	push	{r7, lr}
 8014d64:	b084      	sub	sp, #16
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	6078      	str	r0, [r7, #4]
 8014d6a:	460b      	mov	r3, r1
 8014d6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d009      	beq.n	8014d90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	78fa      	ldrb	r2, [r7, #3]
 8014d86:	4611      	mov	r1, r2
 8014d88:	6878      	ldr	r0, [r7, #4]
 8014d8a:	4798      	blx	r3
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3710      	adds	r7, #16
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}

08014d9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d9a:	b580      	push	{r7, lr}
 8014d9c:	b084      	sub	sp, #16
 8014d9e:	af00      	add	r7, sp, #0
 8014da0:	6078      	str	r0, [r7, #4]
 8014da2:	460b      	mov	r3, r1
 8014da4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014da6:	2300      	movs	r3, #0
 8014da8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014db0:	685b      	ldr	r3, [r3, #4]
 8014db2:	78fa      	ldrb	r2, [r7, #3]
 8014db4:	4611      	mov	r1, r2
 8014db6:	6878      	ldr	r0, [r7, #4]
 8014db8:	4798      	blx	r3
 8014dba:	4603      	mov	r3, r0
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d001      	beq.n	8014dc4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014dc0:	2303      	movs	r3, #3
 8014dc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3710      	adds	r7, #16
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}

08014dce <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014dce:	b580      	push	{r7, lr}
 8014dd0:	b084      	sub	sp, #16
 8014dd2:	af00      	add	r7, sp, #0
 8014dd4:	6078      	str	r0, [r7, #4]
 8014dd6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014dde:	6839      	ldr	r1, [r7, #0]
 8014de0:	4618      	mov	r0, r3
 8014de2:	f001 f936 	bl	8016052 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	2201      	movs	r2, #1
 8014dea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014df4:	461a      	mov	r2, r3
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014e02:	f003 031f 	and.w	r3, r3, #31
 8014e06:	2b02      	cmp	r3, #2
 8014e08:	d01a      	beq.n	8014e40 <USBD_LL_SetupStage+0x72>
 8014e0a:	2b02      	cmp	r3, #2
 8014e0c:	d822      	bhi.n	8014e54 <USBD_LL_SetupStage+0x86>
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d002      	beq.n	8014e18 <USBD_LL_SetupStage+0x4a>
 8014e12:	2b01      	cmp	r3, #1
 8014e14:	d00a      	beq.n	8014e2c <USBD_LL_SetupStage+0x5e>
 8014e16:	e01d      	b.n	8014e54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014e1e:	4619      	mov	r1, r3
 8014e20:	6878      	ldr	r0, [r7, #4]
 8014e22:	f000 fb63 	bl	80154ec <USBD_StdDevReq>
 8014e26:	4603      	mov	r3, r0
 8014e28:	73fb      	strb	r3, [r7, #15]
      break;
 8014e2a:	e020      	b.n	8014e6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014e32:	4619      	mov	r1, r3
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f000 fbcb 	bl	80155d0 <USBD_StdItfReq>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8014e3e:	e016      	b.n	8014e6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014e46:	4619      	mov	r1, r3
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f000 fc2d 	bl	80156a8 <USBD_StdEPReq>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	73fb      	strb	r3, [r7, #15]
      break;
 8014e52:	e00c      	b.n	8014e6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014e5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014e5e:	b2db      	uxtb	r3, r3
 8014e60:	4619      	mov	r1, r3
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	f001 fe5a 	bl	8016b1c <USBD_LL_StallEP>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8014e6c:	bf00      	nop
  }

  return ret;
 8014e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	3710      	adds	r7, #16
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b086      	sub	sp, #24
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	60f8      	str	r0, [r7, #12]
 8014e80:	460b      	mov	r3, r1
 8014e82:	607a      	str	r2, [r7, #4]
 8014e84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014e86:	2300      	movs	r3, #0
 8014e88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014e8a:	7afb      	ldrb	r3, [r7, #11]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d16e      	bne.n	8014f6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8014e96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014e9e:	2b03      	cmp	r3, #3
 8014ea0:	f040 8098 	bne.w	8014fd4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	689a      	ldr	r2, [r3, #8]
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	68db      	ldr	r3, [r3, #12]
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d913      	bls.n	8014ed8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014eb0:	693b      	ldr	r3, [r7, #16]
 8014eb2:	689a      	ldr	r2, [r3, #8]
 8014eb4:	693b      	ldr	r3, [r7, #16]
 8014eb6:	68db      	ldr	r3, [r3, #12]
 8014eb8:	1ad2      	subs	r2, r2, r3
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014ebe:	693b      	ldr	r3, [r7, #16]
 8014ec0:	68da      	ldr	r2, [r3, #12]
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	689b      	ldr	r3, [r3, #8]
 8014ec6:	4293      	cmp	r3, r2
 8014ec8:	bf28      	it	cs
 8014eca:	4613      	movcs	r3, r2
 8014ecc:	461a      	mov	r2, r3
 8014ece:	6879      	ldr	r1, [r7, #4]
 8014ed0:	68f8      	ldr	r0, [r7, #12]
 8014ed2:	f001 f9be 	bl	8016252 <USBD_CtlContinueRx>
 8014ed6:	e07d      	b.n	8014fd4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014ede:	f003 031f 	and.w	r3, r3, #31
 8014ee2:	2b02      	cmp	r3, #2
 8014ee4:	d014      	beq.n	8014f10 <USBD_LL_DataOutStage+0x98>
 8014ee6:	2b02      	cmp	r3, #2
 8014ee8:	d81d      	bhi.n	8014f26 <USBD_LL_DataOutStage+0xae>
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d002      	beq.n	8014ef4 <USBD_LL_DataOutStage+0x7c>
 8014eee:	2b01      	cmp	r3, #1
 8014ef0:	d003      	beq.n	8014efa <USBD_LL_DataOutStage+0x82>
 8014ef2:	e018      	b.n	8014f26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	75bb      	strb	r3, [r7, #22]
            break;
 8014ef8:	e018      	b.n	8014f2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014f00:	b2db      	uxtb	r3, r3
 8014f02:	4619      	mov	r1, r3
 8014f04:	68f8      	ldr	r0, [r7, #12]
 8014f06:	f000 fa64 	bl	80153d2 <USBD_CoreFindIF>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	75bb      	strb	r3, [r7, #22]
            break;
 8014f0e:	e00d      	b.n	8014f2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	4619      	mov	r1, r3
 8014f1a:	68f8      	ldr	r0, [r7, #12]
 8014f1c:	f000 fa66 	bl	80153ec <USBD_CoreFindEP>
 8014f20:	4603      	mov	r3, r0
 8014f22:	75bb      	strb	r3, [r7, #22]
            break;
 8014f24:	e002      	b.n	8014f2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014f26:	2300      	movs	r3, #0
 8014f28:	75bb      	strb	r3, [r7, #22]
            break;
 8014f2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014f2c:	7dbb      	ldrb	r3, [r7, #22]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d119      	bne.n	8014f66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014f38:	b2db      	uxtb	r3, r3
 8014f3a:	2b03      	cmp	r3, #3
 8014f3c:	d113      	bne.n	8014f66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014f3e:	7dba      	ldrb	r2, [r7, #22]
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	32ae      	adds	r2, #174	@ 0xae
 8014f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f48:	691b      	ldr	r3, [r3, #16]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d00b      	beq.n	8014f66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014f4e:	7dba      	ldrb	r2, [r7, #22]
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014f56:	7dba      	ldrb	r2, [r7, #22]
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	32ae      	adds	r2, #174	@ 0xae
 8014f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f60:	691b      	ldr	r3, [r3, #16]
 8014f62:	68f8      	ldr	r0, [r7, #12]
 8014f64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014f66:	68f8      	ldr	r0, [r7, #12]
 8014f68:	f001 f984 	bl	8016274 <USBD_CtlSendStatus>
 8014f6c:	e032      	b.n	8014fd4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014f6e:	7afb      	ldrb	r3, [r7, #11]
 8014f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014f74:	b2db      	uxtb	r3, r3
 8014f76:	4619      	mov	r1, r3
 8014f78:	68f8      	ldr	r0, [r7, #12]
 8014f7a:	f000 fa37 	bl	80153ec <USBD_CoreFindEP>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014f82:	7dbb      	ldrb	r3, [r7, #22]
 8014f84:	2bff      	cmp	r3, #255	@ 0xff
 8014f86:	d025      	beq.n	8014fd4 <USBD_LL_DataOutStage+0x15c>
 8014f88:	7dbb      	ldrb	r3, [r7, #22]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d122      	bne.n	8014fd4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014f94:	b2db      	uxtb	r3, r3
 8014f96:	2b03      	cmp	r3, #3
 8014f98:	d117      	bne.n	8014fca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014f9a:	7dba      	ldrb	r2, [r7, #22]
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	32ae      	adds	r2, #174	@ 0xae
 8014fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fa4:	699b      	ldr	r3, [r3, #24]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d00f      	beq.n	8014fca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014faa:	7dba      	ldrb	r2, [r7, #22]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014fb2:	7dba      	ldrb	r2, [r7, #22]
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	32ae      	adds	r2, #174	@ 0xae
 8014fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fbc:	699b      	ldr	r3, [r3, #24]
 8014fbe:	7afa      	ldrb	r2, [r7, #11]
 8014fc0:	4611      	mov	r1, r2
 8014fc2:	68f8      	ldr	r0, [r7, #12]
 8014fc4:	4798      	blx	r3
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014fca:	7dfb      	ldrb	r3, [r7, #23]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d001      	beq.n	8014fd4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014fd0:	7dfb      	ldrb	r3, [r7, #23]
 8014fd2:	e000      	b.n	8014fd6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014fd4:	2300      	movs	r3, #0
}
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	3718      	adds	r7, #24
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014fde:	b580      	push	{r7, lr}
 8014fe0:	b086      	sub	sp, #24
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	60f8      	str	r0, [r7, #12]
 8014fe6:	460b      	mov	r3, r1
 8014fe8:	607a      	str	r2, [r7, #4]
 8014fea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014fec:	7afb      	ldrb	r3, [r7, #11]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d16f      	bne.n	80150d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	3314      	adds	r3, #20
 8014ff6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014ffe:	2b02      	cmp	r3, #2
 8015000:	d15a      	bne.n	80150b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	689a      	ldr	r2, [r3, #8]
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	68db      	ldr	r3, [r3, #12]
 801500a:	429a      	cmp	r2, r3
 801500c:	d914      	bls.n	8015038 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	689a      	ldr	r2, [r3, #8]
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	68db      	ldr	r3, [r3, #12]
 8015016:	1ad2      	subs	r2, r2, r3
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	689b      	ldr	r3, [r3, #8]
 8015020:	461a      	mov	r2, r3
 8015022:	6879      	ldr	r1, [r7, #4]
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f001 f8e6 	bl	80161f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801502a:	2300      	movs	r3, #0
 801502c:	2200      	movs	r2, #0
 801502e:	2100      	movs	r1, #0
 8015030:	68f8      	ldr	r0, [r7, #12]
 8015032:	f001 fe1d 	bl	8016c70 <USBD_LL_PrepareReceive>
 8015036:	e03f      	b.n	80150b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	68da      	ldr	r2, [r3, #12]
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	689b      	ldr	r3, [r3, #8]
 8015040:	429a      	cmp	r2, r3
 8015042:	d11c      	bne.n	801507e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015044:	693b      	ldr	r3, [r7, #16]
 8015046:	685a      	ldr	r2, [r3, #4]
 8015048:	693b      	ldr	r3, [r7, #16]
 801504a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801504c:	429a      	cmp	r2, r3
 801504e:	d316      	bcc.n	801507e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015050:	693b      	ldr	r3, [r7, #16]
 8015052:	685a      	ldr	r2, [r3, #4]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801505a:	429a      	cmp	r2, r3
 801505c:	d20f      	bcs.n	801507e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801505e:	2200      	movs	r2, #0
 8015060:	2100      	movs	r1, #0
 8015062:	68f8      	ldr	r0, [r7, #12]
 8015064:	f001 f8c7 	bl	80161f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	2200      	movs	r2, #0
 801506c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015070:	2300      	movs	r3, #0
 8015072:	2200      	movs	r2, #0
 8015074:	2100      	movs	r1, #0
 8015076:	68f8      	ldr	r0, [r7, #12]
 8015078:	f001 fdfa 	bl	8016c70 <USBD_LL_PrepareReceive>
 801507c:	e01c      	b.n	80150b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015084:	b2db      	uxtb	r3, r3
 8015086:	2b03      	cmp	r3, #3
 8015088:	d10f      	bne.n	80150aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015090:	68db      	ldr	r3, [r3, #12]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d009      	beq.n	80150aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2200      	movs	r2, #0
 801509a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80150a4:	68db      	ldr	r3, [r3, #12]
 80150a6:	68f8      	ldr	r0, [r7, #12]
 80150a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80150aa:	2180      	movs	r1, #128	@ 0x80
 80150ac:	68f8      	ldr	r0, [r7, #12]
 80150ae:	f001 fd35 	bl	8016b1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80150b2:	68f8      	ldr	r0, [r7, #12]
 80150b4:	f001 f8f1 	bl	801629a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d03a      	beq.n	8015138 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80150c2:	68f8      	ldr	r0, [r7, #12]
 80150c4:	f7ff fe42 	bl	8014d4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2200      	movs	r2, #0
 80150cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80150d0:	e032      	b.n	8015138 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80150d2:	7afb      	ldrb	r3, [r7, #11]
 80150d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80150d8:	b2db      	uxtb	r3, r3
 80150da:	4619      	mov	r1, r3
 80150dc:	68f8      	ldr	r0, [r7, #12]
 80150de:	f000 f985 	bl	80153ec <USBD_CoreFindEP>
 80150e2:	4603      	mov	r3, r0
 80150e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80150e6:	7dfb      	ldrb	r3, [r7, #23]
 80150e8:	2bff      	cmp	r3, #255	@ 0xff
 80150ea:	d025      	beq.n	8015138 <USBD_LL_DataInStage+0x15a>
 80150ec:	7dfb      	ldrb	r3, [r7, #23]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d122      	bne.n	8015138 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80150f8:	b2db      	uxtb	r3, r3
 80150fa:	2b03      	cmp	r3, #3
 80150fc:	d11c      	bne.n	8015138 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80150fe:	7dfa      	ldrb	r2, [r7, #23]
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	32ae      	adds	r2, #174	@ 0xae
 8015104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015108:	695b      	ldr	r3, [r3, #20]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d014      	beq.n	8015138 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801510e:	7dfa      	ldrb	r2, [r7, #23]
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015116:	7dfa      	ldrb	r2, [r7, #23]
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	32ae      	adds	r2, #174	@ 0xae
 801511c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015120:	695b      	ldr	r3, [r3, #20]
 8015122:	7afa      	ldrb	r2, [r7, #11]
 8015124:	4611      	mov	r1, r2
 8015126:	68f8      	ldr	r0, [r7, #12]
 8015128:	4798      	blx	r3
 801512a:	4603      	mov	r3, r0
 801512c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801512e:	7dbb      	ldrb	r3, [r7, #22]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d001      	beq.n	8015138 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015134:	7dbb      	ldrb	r3, [r7, #22]
 8015136:	e000      	b.n	801513a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015138:	2300      	movs	r3, #0
}
 801513a:	4618      	mov	r0, r3
 801513c:	3718      	adds	r7, #24
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}

08015142 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015142:	b580      	push	{r7, lr}
 8015144:	b084      	sub	sp, #16
 8015146:	af00      	add	r7, sp, #0
 8015148:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801514a:	2300      	movs	r3, #0
 801514c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	2201      	movs	r2, #1
 8015152:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2200      	movs	r2, #0
 801515a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	2200      	movs	r2, #0
 8015162:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2200      	movs	r2, #0
 8015168:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	2200      	movs	r2, #0
 8015170:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801517a:	2b00      	cmp	r3, #0
 801517c:	d014      	beq.n	80151a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d00e      	beq.n	80151a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015190:	685b      	ldr	r3, [r3, #4]
 8015192:	687a      	ldr	r2, [r7, #4]
 8015194:	6852      	ldr	r2, [r2, #4]
 8015196:	b2d2      	uxtb	r2, r2
 8015198:	4611      	mov	r1, r2
 801519a:	6878      	ldr	r0, [r7, #4]
 801519c:	4798      	blx	r3
 801519e:	4603      	mov	r3, r0
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d001      	beq.n	80151a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80151a4:	2303      	movs	r3, #3
 80151a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80151a8:	2340      	movs	r3, #64	@ 0x40
 80151aa:	2200      	movs	r2, #0
 80151ac:	2100      	movs	r1, #0
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f001 fc6f 	bl	8016a92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	2201      	movs	r2, #1
 80151b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2240      	movs	r2, #64	@ 0x40
 80151c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80151c4:	2340      	movs	r3, #64	@ 0x40
 80151c6:	2200      	movs	r2, #0
 80151c8:	2180      	movs	r1, #128	@ 0x80
 80151ca:	6878      	ldr	r0, [r7, #4]
 80151cc:	f001 fc61 	bl	8016a92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2201      	movs	r2, #1
 80151d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2240      	movs	r2, #64	@ 0x40
 80151da:	621a      	str	r2, [r3, #32]

  return ret;
 80151dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80151de:	4618      	mov	r0, r3
 80151e0:	3710      	adds	r7, #16
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}

080151e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80151e6:	b480      	push	{r7}
 80151e8:	b083      	sub	sp, #12
 80151ea:	af00      	add	r7, sp, #0
 80151ec:	6078      	str	r0, [r7, #4]
 80151ee:	460b      	mov	r3, r1
 80151f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	78fa      	ldrb	r2, [r7, #3]
 80151f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80151f8:	2300      	movs	r3, #0
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	370c      	adds	r7, #12
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr

08015206 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015206:	b480      	push	{r7}
 8015208:	b083      	sub	sp, #12
 801520a:	af00      	add	r7, sp, #0
 801520c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015214:	b2db      	uxtb	r3, r3
 8015216:	2b04      	cmp	r3, #4
 8015218:	d006      	beq.n	8015228 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015220:	b2da      	uxtb	r2, r3
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2204      	movs	r2, #4
 801522c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8015230:	2300      	movs	r3, #0
}
 8015232:	4618      	mov	r0, r3
 8015234:	370c      	adds	r7, #12
 8015236:	46bd      	mov	sp, r7
 8015238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523c:	4770      	bx	lr

0801523e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801523e:	b480      	push	{r7}
 8015240:	b083      	sub	sp, #12
 8015242:	af00      	add	r7, sp, #0
 8015244:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801524c:	b2db      	uxtb	r3, r3
 801524e:	2b04      	cmp	r3, #4
 8015250:	d106      	bne.n	8015260 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8015258:	b2da      	uxtb	r2, r3
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8015260:	2300      	movs	r3, #0
}
 8015262:	4618      	mov	r0, r3
 8015264:	370c      	adds	r7, #12
 8015266:	46bd      	mov	sp, r7
 8015268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526c:	4770      	bx	lr

0801526e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801526e:	b580      	push	{r7, lr}
 8015270:	b082      	sub	sp, #8
 8015272:	af00      	add	r7, sp, #0
 8015274:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801527c:	b2db      	uxtb	r3, r3
 801527e:	2b03      	cmp	r3, #3
 8015280:	d110      	bne.n	80152a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015288:	2b00      	cmp	r3, #0
 801528a:	d00b      	beq.n	80152a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015292:	69db      	ldr	r3, [r3, #28]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d005      	beq.n	80152a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801529e:	69db      	ldr	r3, [r3, #28]
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80152a4:	2300      	movs	r3, #0
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	3708      	adds	r7, #8
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80152ae:	b580      	push	{r7, lr}
 80152b0:	b082      	sub	sp, #8
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
 80152b6:	460b      	mov	r3, r1
 80152b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	32ae      	adds	r2, #174	@ 0xae
 80152c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d101      	bne.n	80152d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80152cc:	2303      	movs	r3, #3
 80152ce:	e01c      	b.n	801530a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80152d6:	b2db      	uxtb	r3, r3
 80152d8:	2b03      	cmp	r3, #3
 80152da:	d115      	bne.n	8015308 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	32ae      	adds	r2, #174	@ 0xae
 80152e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152ea:	6a1b      	ldr	r3, [r3, #32]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d00b      	beq.n	8015308 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	32ae      	adds	r2, #174	@ 0xae
 80152fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152fe:	6a1b      	ldr	r3, [r3, #32]
 8015300:	78fa      	ldrb	r2, [r7, #3]
 8015302:	4611      	mov	r1, r2
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015308:	2300      	movs	r3, #0
}
 801530a:	4618      	mov	r0, r3
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015312:	b580      	push	{r7, lr}
 8015314:	b082      	sub	sp, #8
 8015316:	af00      	add	r7, sp, #0
 8015318:	6078      	str	r0, [r7, #4]
 801531a:	460b      	mov	r3, r1
 801531c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	32ae      	adds	r2, #174	@ 0xae
 8015328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d101      	bne.n	8015334 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015330:	2303      	movs	r3, #3
 8015332:	e01c      	b.n	801536e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801533a:	b2db      	uxtb	r3, r3
 801533c:	2b03      	cmp	r3, #3
 801533e:	d115      	bne.n	801536c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	32ae      	adds	r2, #174	@ 0xae
 801534a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015350:	2b00      	cmp	r3, #0
 8015352:	d00b      	beq.n	801536c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	32ae      	adds	r2, #174	@ 0xae
 801535e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015364:	78fa      	ldrb	r2, [r7, #3]
 8015366:	4611      	mov	r1, r2
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801536c:	2300      	movs	r3, #0
}
 801536e:	4618      	mov	r0, r3
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}

08015376 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015376:	b480      	push	{r7}
 8015378:	b083      	sub	sp, #12
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801537e:	2300      	movs	r3, #0
}
 8015380:	4618      	mov	r0, r3
 8015382:	370c      	adds	r7, #12
 8015384:	46bd      	mov	sp, r7
 8015386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538a:	4770      	bx	lr

0801538c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b084      	sub	sp, #16
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015394:	2300      	movs	r3, #0
 8015396:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2201      	movs	r2, #1
 801539c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d00e      	beq.n	80153c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80153b0:	685b      	ldr	r3, [r3, #4]
 80153b2:	687a      	ldr	r2, [r7, #4]
 80153b4:	6852      	ldr	r2, [r2, #4]
 80153b6:	b2d2      	uxtb	r2, r2
 80153b8:	4611      	mov	r1, r2
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	4798      	blx	r3
 80153be:	4603      	mov	r3, r0
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d001      	beq.n	80153c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80153c4:	2303      	movs	r3, #3
 80153c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80153c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	3710      	adds	r7, #16
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80153d2:	b480      	push	{r7}
 80153d4:	b083      	sub	sp, #12
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
 80153da:	460b      	mov	r3, r1
 80153dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80153de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	370c      	adds	r7, #12
 80153e4:	46bd      	mov	sp, r7
 80153e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ea:	4770      	bx	lr

080153ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80153ec:	b480      	push	{r7}
 80153ee:	b083      	sub	sp, #12
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	460b      	mov	r3, r1
 80153f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80153f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80153fa:	4618      	mov	r0, r3
 80153fc:	370c      	adds	r7, #12
 80153fe:	46bd      	mov	sp, r7
 8015400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015404:	4770      	bx	lr

08015406 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015406:	b580      	push	{r7, lr}
 8015408:	b086      	sub	sp, #24
 801540a:	af00      	add	r7, sp, #0
 801540c:	6078      	str	r0, [r7, #4]
 801540e:	460b      	mov	r3, r1
 8015410:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801541a:	2300      	movs	r3, #0
 801541c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	885b      	ldrh	r3, [r3, #2]
 8015422:	b29b      	uxth	r3, r3
 8015424:	68fa      	ldr	r2, [r7, #12]
 8015426:	7812      	ldrb	r2, [r2, #0]
 8015428:	4293      	cmp	r3, r2
 801542a:	d91f      	bls.n	801546c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	781b      	ldrb	r3, [r3, #0]
 8015430:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015432:	e013      	b.n	801545c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015434:	f107 030a 	add.w	r3, r7, #10
 8015438:	4619      	mov	r1, r3
 801543a:	6978      	ldr	r0, [r7, #20]
 801543c:	f000 f81b 	bl	8015476 <USBD_GetNextDesc>
 8015440:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015442:	697b      	ldr	r3, [r7, #20]
 8015444:	785b      	ldrb	r3, [r3, #1]
 8015446:	2b05      	cmp	r3, #5
 8015448:	d108      	bne.n	801545c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801544e:	693b      	ldr	r3, [r7, #16]
 8015450:	789b      	ldrb	r3, [r3, #2]
 8015452:	78fa      	ldrb	r2, [r7, #3]
 8015454:	429a      	cmp	r2, r3
 8015456:	d008      	beq.n	801546a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015458:	2300      	movs	r3, #0
 801545a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	885b      	ldrh	r3, [r3, #2]
 8015460:	b29a      	uxth	r2, r3
 8015462:	897b      	ldrh	r3, [r7, #10]
 8015464:	429a      	cmp	r2, r3
 8015466:	d8e5      	bhi.n	8015434 <USBD_GetEpDesc+0x2e>
 8015468:	e000      	b.n	801546c <USBD_GetEpDesc+0x66>
          break;
 801546a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801546c:	693b      	ldr	r3, [r7, #16]
}
 801546e:	4618      	mov	r0, r3
 8015470:	3718      	adds	r7, #24
 8015472:	46bd      	mov	sp, r7
 8015474:	bd80      	pop	{r7, pc}

08015476 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015476:	b480      	push	{r7}
 8015478:	b085      	sub	sp, #20
 801547a:	af00      	add	r7, sp, #0
 801547c:	6078      	str	r0, [r7, #4]
 801547e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	881b      	ldrh	r3, [r3, #0]
 8015488:	68fa      	ldr	r2, [r7, #12]
 801548a:	7812      	ldrb	r2, [r2, #0]
 801548c:	4413      	add	r3, r2
 801548e:	b29a      	uxth	r2, r3
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	461a      	mov	r2, r3
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	4413      	add	r3, r2
 801549e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80154a0:	68fb      	ldr	r3, [r7, #12]
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3714      	adds	r7, #20
 80154a6:	46bd      	mov	sp, r7
 80154a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ac:	4770      	bx	lr

080154ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80154ae:	b480      	push	{r7}
 80154b0:	b087      	sub	sp, #28
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	3301      	adds	r3, #1
 80154c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	781b      	ldrb	r3, [r3, #0]
 80154ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80154cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80154d0:	021b      	lsls	r3, r3, #8
 80154d2:	b21a      	sxth	r2, r3
 80154d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80154d8:	4313      	orrs	r3, r2
 80154da:	b21b      	sxth	r3, r3
 80154dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80154de:	89fb      	ldrh	r3, [r7, #14]
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	371c      	adds	r7, #28
 80154e4:	46bd      	mov	sp, r7
 80154e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ea:	4770      	bx	lr

080154ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
 80154f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80154f6:	2300      	movs	r3, #0
 80154f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015502:	2b40      	cmp	r3, #64	@ 0x40
 8015504:	d005      	beq.n	8015512 <USBD_StdDevReq+0x26>
 8015506:	2b40      	cmp	r3, #64	@ 0x40
 8015508:	d857      	bhi.n	80155ba <USBD_StdDevReq+0xce>
 801550a:	2b00      	cmp	r3, #0
 801550c:	d00f      	beq.n	801552e <USBD_StdDevReq+0x42>
 801550e:	2b20      	cmp	r3, #32
 8015510:	d153      	bne.n	80155ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	32ae      	adds	r2, #174	@ 0xae
 801551c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015520:	689b      	ldr	r3, [r3, #8]
 8015522:	6839      	ldr	r1, [r7, #0]
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	4798      	blx	r3
 8015528:	4603      	mov	r3, r0
 801552a:	73fb      	strb	r3, [r7, #15]
      break;
 801552c:	e04a      	b.n	80155c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	785b      	ldrb	r3, [r3, #1]
 8015532:	2b09      	cmp	r3, #9
 8015534:	d83b      	bhi.n	80155ae <USBD_StdDevReq+0xc2>
 8015536:	a201      	add	r2, pc, #4	@ (adr r2, 801553c <USBD_StdDevReq+0x50>)
 8015538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801553c:	08015591 	.word	0x08015591
 8015540:	080155a5 	.word	0x080155a5
 8015544:	080155af 	.word	0x080155af
 8015548:	0801559b 	.word	0x0801559b
 801554c:	080155af 	.word	0x080155af
 8015550:	0801556f 	.word	0x0801556f
 8015554:	08015565 	.word	0x08015565
 8015558:	080155af 	.word	0x080155af
 801555c:	08015587 	.word	0x08015587
 8015560:	08015579 	.word	0x08015579
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015564:	6839      	ldr	r1, [r7, #0]
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f000 fa3c 	bl	80159e4 <USBD_GetDescriptor>
          break;
 801556c:	e024      	b.n	80155b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801556e:	6839      	ldr	r1, [r7, #0]
 8015570:	6878      	ldr	r0, [r7, #4]
 8015572:	f000 fbcb 	bl	8015d0c <USBD_SetAddress>
          break;
 8015576:	e01f      	b.n	80155b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015578:	6839      	ldr	r1, [r7, #0]
 801557a:	6878      	ldr	r0, [r7, #4]
 801557c:	f000 fc0a 	bl	8015d94 <USBD_SetConfig>
 8015580:	4603      	mov	r3, r0
 8015582:	73fb      	strb	r3, [r7, #15]
          break;
 8015584:	e018      	b.n	80155b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015586:	6839      	ldr	r1, [r7, #0]
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f000 fcad 	bl	8015ee8 <USBD_GetConfig>
          break;
 801558e:	e013      	b.n	80155b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015590:	6839      	ldr	r1, [r7, #0]
 8015592:	6878      	ldr	r0, [r7, #4]
 8015594:	f000 fcde 	bl	8015f54 <USBD_GetStatus>
          break;
 8015598:	e00e      	b.n	80155b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801559a:	6839      	ldr	r1, [r7, #0]
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f000 fd0d 	bl	8015fbc <USBD_SetFeature>
          break;
 80155a2:	e009      	b.n	80155b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80155a4:	6839      	ldr	r1, [r7, #0]
 80155a6:	6878      	ldr	r0, [r7, #4]
 80155a8:	f000 fd31 	bl	801600e <USBD_ClrFeature>
          break;
 80155ac:	e004      	b.n	80155b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80155ae:	6839      	ldr	r1, [r7, #0]
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f000 fd88 	bl	80160c6 <USBD_CtlError>
          break;
 80155b6:	bf00      	nop
      }
      break;
 80155b8:	e004      	b.n	80155c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80155ba:	6839      	ldr	r1, [r7, #0]
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f000 fd82 	bl	80160c6 <USBD_CtlError>
      break;
 80155c2:	bf00      	nop
  }

  return ret;
 80155c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3710      	adds	r7, #16
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop

080155d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b084      	sub	sp, #16
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
 80155d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80155da:	2300      	movs	r3, #0
 80155dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80155e6:	2b40      	cmp	r3, #64	@ 0x40
 80155e8:	d005      	beq.n	80155f6 <USBD_StdItfReq+0x26>
 80155ea:	2b40      	cmp	r3, #64	@ 0x40
 80155ec:	d852      	bhi.n	8015694 <USBD_StdItfReq+0xc4>
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d001      	beq.n	80155f6 <USBD_StdItfReq+0x26>
 80155f2:	2b20      	cmp	r3, #32
 80155f4:	d14e      	bne.n	8015694 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80155fc:	b2db      	uxtb	r3, r3
 80155fe:	3b01      	subs	r3, #1
 8015600:	2b02      	cmp	r3, #2
 8015602:	d840      	bhi.n	8015686 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	889b      	ldrh	r3, [r3, #4]
 8015608:	b2db      	uxtb	r3, r3
 801560a:	2b01      	cmp	r3, #1
 801560c:	d836      	bhi.n	801567c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	889b      	ldrh	r3, [r3, #4]
 8015612:	b2db      	uxtb	r3, r3
 8015614:	4619      	mov	r1, r3
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f7ff fedb 	bl	80153d2 <USBD_CoreFindIF>
 801561c:	4603      	mov	r3, r0
 801561e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015620:	7bbb      	ldrb	r3, [r7, #14]
 8015622:	2bff      	cmp	r3, #255	@ 0xff
 8015624:	d01d      	beq.n	8015662 <USBD_StdItfReq+0x92>
 8015626:	7bbb      	ldrb	r3, [r7, #14]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d11a      	bne.n	8015662 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801562c:	7bba      	ldrb	r2, [r7, #14]
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	32ae      	adds	r2, #174	@ 0xae
 8015632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015636:	689b      	ldr	r3, [r3, #8]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d00f      	beq.n	801565c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801563c:	7bba      	ldrb	r2, [r7, #14]
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015644:	7bba      	ldrb	r2, [r7, #14]
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	32ae      	adds	r2, #174	@ 0xae
 801564a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801564e:	689b      	ldr	r3, [r3, #8]
 8015650:	6839      	ldr	r1, [r7, #0]
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	4798      	blx	r3
 8015656:	4603      	mov	r3, r0
 8015658:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801565a:	e004      	b.n	8015666 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801565c:	2303      	movs	r3, #3
 801565e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015660:	e001      	b.n	8015666 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015662:	2303      	movs	r3, #3
 8015664:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	88db      	ldrh	r3, [r3, #6]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d110      	bne.n	8015690 <USBD_StdItfReq+0xc0>
 801566e:	7bfb      	ldrb	r3, [r7, #15]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d10d      	bne.n	8015690 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f000 fdfd 	bl	8016274 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801567a:	e009      	b.n	8015690 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801567c:	6839      	ldr	r1, [r7, #0]
 801567e:	6878      	ldr	r0, [r7, #4]
 8015680:	f000 fd21 	bl	80160c6 <USBD_CtlError>
          break;
 8015684:	e004      	b.n	8015690 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015686:	6839      	ldr	r1, [r7, #0]
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	f000 fd1c 	bl	80160c6 <USBD_CtlError>
          break;
 801568e:	e000      	b.n	8015692 <USBD_StdItfReq+0xc2>
          break;
 8015690:	bf00      	nop
      }
      break;
 8015692:	e004      	b.n	801569e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015694:	6839      	ldr	r1, [r7, #0]
 8015696:	6878      	ldr	r0, [r7, #4]
 8015698:	f000 fd15 	bl	80160c6 <USBD_CtlError>
      break;
 801569c:	bf00      	nop
  }

  return ret;
 801569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3710      	adds	r7, #16
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}

080156a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b084      	sub	sp, #16
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80156b2:	2300      	movs	r3, #0
 80156b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	889b      	ldrh	r3, [r3, #4]
 80156ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80156c4:	2b40      	cmp	r3, #64	@ 0x40
 80156c6:	d007      	beq.n	80156d8 <USBD_StdEPReq+0x30>
 80156c8:	2b40      	cmp	r3, #64	@ 0x40
 80156ca:	f200 817f 	bhi.w	80159cc <USBD_StdEPReq+0x324>
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d02a      	beq.n	8015728 <USBD_StdEPReq+0x80>
 80156d2:	2b20      	cmp	r3, #32
 80156d4:	f040 817a 	bne.w	80159cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80156d8:	7bbb      	ldrb	r3, [r7, #14]
 80156da:	4619      	mov	r1, r3
 80156dc:	6878      	ldr	r0, [r7, #4]
 80156de:	f7ff fe85 	bl	80153ec <USBD_CoreFindEP>
 80156e2:	4603      	mov	r3, r0
 80156e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80156e6:	7b7b      	ldrb	r3, [r7, #13]
 80156e8:	2bff      	cmp	r3, #255	@ 0xff
 80156ea:	f000 8174 	beq.w	80159d6 <USBD_StdEPReq+0x32e>
 80156ee:	7b7b      	ldrb	r3, [r7, #13]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	f040 8170 	bne.w	80159d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80156f6:	7b7a      	ldrb	r2, [r7, #13]
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80156fe:	7b7a      	ldrb	r2, [r7, #13]
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	32ae      	adds	r2, #174	@ 0xae
 8015704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015708:	689b      	ldr	r3, [r3, #8]
 801570a:	2b00      	cmp	r3, #0
 801570c:	f000 8163 	beq.w	80159d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015710:	7b7a      	ldrb	r2, [r7, #13]
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	32ae      	adds	r2, #174	@ 0xae
 8015716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801571a:	689b      	ldr	r3, [r3, #8]
 801571c:	6839      	ldr	r1, [r7, #0]
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	4798      	blx	r3
 8015722:	4603      	mov	r3, r0
 8015724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015726:	e156      	b.n	80159d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	785b      	ldrb	r3, [r3, #1]
 801572c:	2b03      	cmp	r3, #3
 801572e:	d008      	beq.n	8015742 <USBD_StdEPReq+0x9a>
 8015730:	2b03      	cmp	r3, #3
 8015732:	f300 8145 	bgt.w	80159c0 <USBD_StdEPReq+0x318>
 8015736:	2b00      	cmp	r3, #0
 8015738:	f000 809b 	beq.w	8015872 <USBD_StdEPReq+0x1ca>
 801573c:	2b01      	cmp	r3, #1
 801573e:	d03c      	beq.n	80157ba <USBD_StdEPReq+0x112>
 8015740:	e13e      	b.n	80159c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015748:	b2db      	uxtb	r3, r3
 801574a:	2b02      	cmp	r3, #2
 801574c:	d002      	beq.n	8015754 <USBD_StdEPReq+0xac>
 801574e:	2b03      	cmp	r3, #3
 8015750:	d016      	beq.n	8015780 <USBD_StdEPReq+0xd8>
 8015752:	e02c      	b.n	80157ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015754:	7bbb      	ldrb	r3, [r7, #14]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d00d      	beq.n	8015776 <USBD_StdEPReq+0xce>
 801575a:	7bbb      	ldrb	r3, [r7, #14]
 801575c:	2b80      	cmp	r3, #128	@ 0x80
 801575e:	d00a      	beq.n	8015776 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015760:	7bbb      	ldrb	r3, [r7, #14]
 8015762:	4619      	mov	r1, r3
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f001 f9d9 	bl	8016b1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801576a:	2180      	movs	r1, #128	@ 0x80
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f001 f9d5 	bl	8016b1c <USBD_LL_StallEP>
 8015772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015774:	e020      	b.n	80157b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015776:	6839      	ldr	r1, [r7, #0]
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	f000 fca4 	bl	80160c6 <USBD_CtlError>
              break;
 801577e:	e01b      	b.n	80157b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	885b      	ldrh	r3, [r3, #2]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d10e      	bne.n	80157a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015788:	7bbb      	ldrb	r3, [r7, #14]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d00b      	beq.n	80157a6 <USBD_StdEPReq+0xfe>
 801578e:	7bbb      	ldrb	r3, [r7, #14]
 8015790:	2b80      	cmp	r3, #128	@ 0x80
 8015792:	d008      	beq.n	80157a6 <USBD_StdEPReq+0xfe>
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	88db      	ldrh	r3, [r3, #6]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d104      	bne.n	80157a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801579c:	7bbb      	ldrb	r3, [r7, #14]
 801579e:	4619      	mov	r1, r3
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f001 f9bb 	bl	8016b1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f000 fd64 	bl	8016274 <USBD_CtlSendStatus>

              break;
 80157ac:	e004      	b.n	80157b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80157ae:	6839      	ldr	r1, [r7, #0]
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	f000 fc88 	bl	80160c6 <USBD_CtlError>
              break;
 80157b6:	bf00      	nop
          }
          break;
 80157b8:	e107      	b.n	80159ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80157c0:	b2db      	uxtb	r3, r3
 80157c2:	2b02      	cmp	r3, #2
 80157c4:	d002      	beq.n	80157cc <USBD_StdEPReq+0x124>
 80157c6:	2b03      	cmp	r3, #3
 80157c8:	d016      	beq.n	80157f8 <USBD_StdEPReq+0x150>
 80157ca:	e04b      	b.n	8015864 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80157cc:	7bbb      	ldrb	r3, [r7, #14]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d00d      	beq.n	80157ee <USBD_StdEPReq+0x146>
 80157d2:	7bbb      	ldrb	r3, [r7, #14]
 80157d4:	2b80      	cmp	r3, #128	@ 0x80
 80157d6:	d00a      	beq.n	80157ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80157d8:	7bbb      	ldrb	r3, [r7, #14]
 80157da:	4619      	mov	r1, r3
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f001 f99d 	bl	8016b1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80157e2:	2180      	movs	r1, #128	@ 0x80
 80157e4:	6878      	ldr	r0, [r7, #4]
 80157e6:	f001 f999 	bl	8016b1c <USBD_LL_StallEP>
 80157ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80157ec:	e040      	b.n	8015870 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80157ee:	6839      	ldr	r1, [r7, #0]
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f000 fc68 	bl	80160c6 <USBD_CtlError>
              break;
 80157f6:	e03b      	b.n	8015870 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	885b      	ldrh	r3, [r3, #2]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d136      	bne.n	801586e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015800:	7bbb      	ldrb	r3, [r7, #14]
 8015802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015806:	2b00      	cmp	r3, #0
 8015808:	d004      	beq.n	8015814 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801580a:	7bbb      	ldrb	r3, [r7, #14]
 801580c:	4619      	mov	r1, r3
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f001 f9a3 	bl	8016b5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f000 fd2d 	bl	8016274 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801581a:	7bbb      	ldrb	r3, [r7, #14]
 801581c:	4619      	mov	r1, r3
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f7ff fde4 	bl	80153ec <USBD_CoreFindEP>
 8015824:	4603      	mov	r3, r0
 8015826:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015828:	7b7b      	ldrb	r3, [r7, #13]
 801582a:	2bff      	cmp	r3, #255	@ 0xff
 801582c:	d01f      	beq.n	801586e <USBD_StdEPReq+0x1c6>
 801582e:	7b7b      	ldrb	r3, [r7, #13]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d11c      	bne.n	801586e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015834:	7b7a      	ldrb	r2, [r7, #13]
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801583c:	7b7a      	ldrb	r2, [r7, #13]
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	32ae      	adds	r2, #174	@ 0xae
 8015842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015846:	689b      	ldr	r3, [r3, #8]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d010      	beq.n	801586e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801584c:	7b7a      	ldrb	r2, [r7, #13]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	32ae      	adds	r2, #174	@ 0xae
 8015852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015856:	689b      	ldr	r3, [r3, #8]
 8015858:	6839      	ldr	r1, [r7, #0]
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	4798      	blx	r3
 801585e:	4603      	mov	r3, r0
 8015860:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015862:	e004      	b.n	801586e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015864:	6839      	ldr	r1, [r7, #0]
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f000 fc2d 	bl	80160c6 <USBD_CtlError>
              break;
 801586c:	e000      	b.n	8015870 <USBD_StdEPReq+0x1c8>
              break;
 801586e:	bf00      	nop
          }
          break;
 8015870:	e0ab      	b.n	80159ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015878:	b2db      	uxtb	r3, r3
 801587a:	2b02      	cmp	r3, #2
 801587c:	d002      	beq.n	8015884 <USBD_StdEPReq+0x1dc>
 801587e:	2b03      	cmp	r3, #3
 8015880:	d032      	beq.n	80158e8 <USBD_StdEPReq+0x240>
 8015882:	e097      	b.n	80159b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015884:	7bbb      	ldrb	r3, [r7, #14]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d007      	beq.n	801589a <USBD_StdEPReq+0x1f2>
 801588a:	7bbb      	ldrb	r3, [r7, #14]
 801588c:	2b80      	cmp	r3, #128	@ 0x80
 801588e:	d004      	beq.n	801589a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015890:	6839      	ldr	r1, [r7, #0]
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f000 fc17 	bl	80160c6 <USBD_CtlError>
                break;
 8015898:	e091      	b.n	80159be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801589a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	da0b      	bge.n	80158ba <USBD_StdEPReq+0x212>
 80158a2:	7bbb      	ldrb	r3, [r7, #14]
 80158a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80158a8:	4613      	mov	r3, r2
 80158aa:	009b      	lsls	r3, r3, #2
 80158ac:	4413      	add	r3, r2
 80158ae:	009b      	lsls	r3, r3, #2
 80158b0:	3310      	adds	r3, #16
 80158b2:	687a      	ldr	r2, [r7, #4]
 80158b4:	4413      	add	r3, r2
 80158b6:	3304      	adds	r3, #4
 80158b8:	e00b      	b.n	80158d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80158ba:	7bbb      	ldrb	r3, [r7, #14]
 80158bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80158c0:	4613      	mov	r3, r2
 80158c2:	009b      	lsls	r3, r3, #2
 80158c4:	4413      	add	r3, r2
 80158c6:	009b      	lsls	r3, r3, #2
 80158c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80158cc:	687a      	ldr	r2, [r7, #4]
 80158ce:	4413      	add	r3, r2
 80158d0:	3304      	adds	r3, #4
 80158d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80158d4:	68bb      	ldr	r3, [r7, #8]
 80158d6:	2200      	movs	r2, #0
 80158d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	2202      	movs	r2, #2
 80158de:	4619      	mov	r1, r3
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f000 fc6d 	bl	80161c0 <USBD_CtlSendData>
              break;
 80158e6:	e06a      	b.n	80159be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80158e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	da11      	bge.n	8015914 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80158f0:	7bbb      	ldrb	r3, [r7, #14]
 80158f2:	f003 020f 	and.w	r2, r3, #15
 80158f6:	6879      	ldr	r1, [r7, #4]
 80158f8:	4613      	mov	r3, r2
 80158fa:	009b      	lsls	r3, r3, #2
 80158fc:	4413      	add	r3, r2
 80158fe:	009b      	lsls	r3, r3, #2
 8015900:	440b      	add	r3, r1
 8015902:	3324      	adds	r3, #36	@ 0x24
 8015904:	881b      	ldrh	r3, [r3, #0]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d117      	bne.n	801593a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801590a:	6839      	ldr	r1, [r7, #0]
 801590c:	6878      	ldr	r0, [r7, #4]
 801590e:	f000 fbda 	bl	80160c6 <USBD_CtlError>
                  break;
 8015912:	e054      	b.n	80159be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015914:	7bbb      	ldrb	r3, [r7, #14]
 8015916:	f003 020f 	and.w	r2, r3, #15
 801591a:	6879      	ldr	r1, [r7, #4]
 801591c:	4613      	mov	r3, r2
 801591e:	009b      	lsls	r3, r3, #2
 8015920:	4413      	add	r3, r2
 8015922:	009b      	lsls	r3, r3, #2
 8015924:	440b      	add	r3, r1
 8015926:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801592a:	881b      	ldrh	r3, [r3, #0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d104      	bne.n	801593a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015930:	6839      	ldr	r1, [r7, #0]
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f000 fbc7 	bl	80160c6 <USBD_CtlError>
                  break;
 8015938:	e041      	b.n	80159be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801593a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801593e:	2b00      	cmp	r3, #0
 8015940:	da0b      	bge.n	801595a <USBD_StdEPReq+0x2b2>
 8015942:	7bbb      	ldrb	r3, [r7, #14]
 8015944:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015948:	4613      	mov	r3, r2
 801594a:	009b      	lsls	r3, r3, #2
 801594c:	4413      	add	r3, r2
 801594e:	009b      	lsls	r3, r3, #2
 8015950:	3310      	adds	r3, #16
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	4413      	add	r3, r2
 8015956:	3304      	adds	r3, #4
 8015958:	e00b      	b.n	8015972 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801595a:	7bbb      	ldrb	r3, [r7, #14]
 801595c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015960:	4613      	mov	r3, r2
 8015962:	009b      	lsls	r3, r3, #2
 8015964:	4413      	add	r3, r2
 8015966:	009b      	lsls	r3, r3, #2
 8015968:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801596c:	687a      	ldr	r2, [r7, #4]
 801596e:	4413      	add	r3, r2
 8015970:	3304      	adds	r3, #4
 8015972:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015974:	7bbb      	ldrb	r3, [r7, #14]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d002      	beq.n	8015980 <USBD_StdEPReq+0x2d8>
 801597a:	7bbb      	ldrb	r3, [r7, #14]
 801597c:	2b80      	cmp	r3, #128	@ 0x80
 801597e:	d103      	bne.n	8015988 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	2200      	movs	r2, #0
 8015984:	601a      	str	r2, [r3, #0]
 8015986:	e00e      	b.n	80159a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015988:	7bbb      	ldrb	r3, [r7, #14]
 801598a:	4619      	mov	r1, r3
 801598c:	6878      	ldr	r0, [r7, #4]
 801598e:	f001 f903 	bl	8016b98 <USBD_LL_IsStallEP>
 8015992:	4603      	mov	r3, r0
 8015994:	2b00      	cmp	r3, #0
 8015996:	d003      	beq.n	80159a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	2201      	movs	r2, #1
 801599c:	601a      	str	r2, [r3, #0]
 801599e:	e002      	b.n	80159a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	2200      	movs	r2, #0
 80159a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80159a6:	68bb      	ldr	r3, [r7, #8]
 80159a8:	2202      	movs	r2, #2
 80159aa:	4619      	mov	r1, r3
 80159ac:	6878      	ldr	r0, [r7, #4]
 80159ae:	f000 fc07 	bl	80161c0 <USBD_CtlSendData>
              break;
 80159b2:	e004      	b.n	80159be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80159b4:	6839      	ldr	r1, [r7, #0]
 80159b6:	6878      	ldr	r0, [r7, #4]
 80159b8:	f000 fb85 	bl	80160c6 <USBD_CtlError>
              break;
 80159bc:	bf00      	nop
          }
          break;
 80159be:	e004      	b.n	80159ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80159c0:	6839      	ldr	r1, [r7, #0]
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f000 fb7f 	bl	80160c6 <USBD_CtlError>
          break;
 80159c8:	bf00      	nop
      }
      break;
 80159ca:	e005      	b.n	80159d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80159cc:	6839      	ldr	r1, [r7, #0]
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f000 fb79 	bl	80160c6 <USBD_CtlError>
      break;
 80159d4:	e000      	b.n	80159d8 <USBD_StdEPReq+0x330>
      break;
 80159d6:	bf00      	nop
  }

  return ret;
 80159d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80159da:	4618      	mov	r0, r3
 80159dc:	3710      	adds	r7, #16
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
	...

080159e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b084      	sub	sp, #16
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
 80159ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80159ee:	2300      	movs	r3, #0
 80159f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80159f2:	2300      	movs	r3, #0
 80159f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80159f6:	2300      	movs	r3, #0
 80159f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80159fa:	683b      	ldr	r3, [r7, #0]
 80159fc:	885b      	ldrh	r3, [r3, #2]
 80159fe:	0a1b      	lsrs	r3, r3, #8
 8015a00:	b29b      	uxth	r3, r3
 8015a02:	3b01      	subs	r3, #1
 8015a04:	2b0e      	cmp	r3, #14
 8015a06:	f200 8152 	bhi.w	8015cae <USBD_GetDescriptor+0x2ca>
 8015a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8015a10 <USBD_GetDescriptor+0x2c>)
 8015a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a10:	08015a81 	.word	0x08015a81
 8015a14:	08015a99 	.word	0x08015a99
 8015a18:	08015ad9 	.word	0x08015ad9
 8015a1c:	08015caf 	.word	0x08015caf
 8015a20:	08015caf 	.word	0x08015caf
 8015a24:	08015c4f 	.word	0x08015c4f
 8015a28:	08015c7b 	.word	0x08015c7b
 8015a2c:	08015caf 	.word	0x08015caf
 8015a30:	08015caf 	.word	0x08015caf
 8015a34:	08015caf 	.word	0x08015caf
 8015a38:	08015caf 	.word	0x08015caf
 8015a3c:	08015caf 	.word	0x08015caf
 8015a40:	08015caf 	.word	0x08015caf
 8015a44:	08015caf 	.word	0x08015caf
 8015a48:	08015a4d 	.word	0x08015a4d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a52:	69db      	ldr	r3, [r3, #28]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d00b      	beq.n	8015a70 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a5e:	69db      	ldr	r3, [r3, #28]
 8015a60:	687a      	ldr	r2, [r7, #4]
 8015a62:	7c12      	ldrb	r2, [r2, #16]
 8015a64:	f107 0108 	add.w	r1, r7, #8
 8015a68:	4610      	mov	r0, r2
 8015a6a:	4798      	blx	r3
 8015a6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015a6e:	e126      	b.n	8015cbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015a70:	6839      	ldr	r1, [r7, #0]
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f000 fb27 	bl	80160c6 <USBD_CtlError>
        err++;
 8015a78:	7afb      	ldrb	r3, [r7, #11]
 8015a7a:	3301      	adds	r3, #1
 8015a7c:	72fb      	strb	r3, [r7, #11]
      break;
 8015a7e:	e11e      	b.n	8015cbe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	687a      	ldr	r2, [r7, #4]
 8015a8a:	7c12      	ldrb	r2, [r2, #16]
 8015a8c:	f107 0108 	add.w	r1, r7, #8
 8015a90:	4610      	mov	r0, r2
 8015a92:	4798      	blx	r3
 8015a94:	60f8      	str	r0, [r7, #12]
      break;
 8015a96:	e112      	b.n	8015cbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	7c1b      	ldrb	r3, [r3, #16]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d10d      	bne.n	8015abc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015aa8:	f107 0208 	add.w	r2, r7, #8
 8015aac:	4610      	mov	r0, r2
 8015aae:	4798      	blx	r3
 8015ab0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	3301      	adds	r3, #1
 8015ab6:	2202      	movs	r2, #2
 8015ab8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015aba:	e100      	b.n	8015cbe <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ac4:	f107 0208 	add.w	r2, r7, #8
 8015ac8:	4610      	mov	r0, r2
 8015aca:	4798      	blx	r3
 8015acc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	2202      	movs	r2, #2
 8015ad4:	701a      	strb	r2, [r3, #0]
      break;
 8015ad6:	e0f2      	b.n	8015cbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	885b      	ldrh	r3, [r3, #2]
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	2b05      	cmp	r3, #5
 8015ae0:	f200 80ac 	bhi.w	8015c3c <USBD_GetDescriptor+0x258>
 8015ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8015aec <USBD_GetDescriptor+0x108>)
 8015ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015aea:	bf00      	nop
 8015aec:	08015b05 	.word	0x08015b05
 8015af0:	08015b39 	.word	0x08015b39
 8015af4:	08015b6d 	.word	0x08015b6d
 8015af8:	08015ba1 	.word	0x08015ba1
 8015afc:	08015bd5 	.word	0x08015bd5
 8015b00:	08015c09 	.word	0x08015c09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b0a:	685b      	ldr	r3, [r3, #4]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d00b      	beq.n	8015b28 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b16:	685b      	ldr	r3, [r3, #4]
 8015b18:	687a      	ldr	r2, [r7, #4]
 8015b1a:	7c12      	ldrb	r2, [r2, #16]
 8015b1c:	f107 0108 	add.w	r1, r7, #8
 8015b20:	4610      	mov	r0, r2
 8015b22:	4798      	blx	r3
 8015b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b26:	e091      	b.n	8015c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015b28:	6839      	ldr	r1, [r7, #0]
 8015b2a:	6878      	ldr	r0, [r7, #4]
 8015b2c:	f000 facb 	bl	80160c6 <USBD_CtlError>
            err++;
 8015b30:	7afb      	ldrb	r3, [r7, #11]
 8015b32:	3301      	adds	r3, #1
 8015b34:	72fb      	strb	r3, [r7, #11]
          break;
 8015b36:	e089      	b.n	8015c4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b3e:	689b      	ldr	r3, [r3, #8]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d00b      	beq.n	8015b5c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b4a:	689b      	ldr	r3, [r3, #8]
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	7c12      	ldrb	r2, [r2, #16]
 8015b50:	f107 0108 	add.w	r1, r7, #8
 8015b54:	4610      	mov	r0, r2
 8015b56:	4798      	blx	r3
 8015b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b5a:	e077      	b.n	8015c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015b5c:	6839      	ldr	r1, [r7, #0]
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f000 fab1 	bl	80160c6 <USBD_CtlError>
            err++;
 8015b64:	7afb      	ldrb	r3, [r7, #11]
 8015b66:	3301      	adds	r3, #1
 8015b68:	72fb      	strb	r3, [r7, #11]
          break;
 8015b6a:	e06f      	b.n	8015c4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b72:	68db      	ldr	r3, [r3, #12]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d00b      	beq.n	8015b90 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b7e:	68db      	ldr	r3, [r3, #12]
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	7c12      	ldrb	r2, [r2, #16]
 8015b84:	f107 0108 	add.w	r1, r7, #8
 8015b88:	4610      	mov	r0, r2
 8015b8a:	4798      	blx	r3
 8015b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b8e:	e05d      	b.n	8015c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015b90:	6839      	ldr	r1, [r7, #0]
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f000 fa97 	bl	80160c6 <USBD_CtlError>
            err++;
 8015b98:	7afb      	ldrb	r3, [r7, #11]
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8015b9e:	e055      	b.n	8015c4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015ba6:	691b      	ldr	r3, [r3, #16]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d00b      	beq.n	8015bc4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015bb2:	691b      	ldr	r3, [r3, #16]
 8015bb4:	687a      	ldr	r2, [r7, #4]
 8015bb6:	7c12      	ldrb	r2, [r2, #16]
 8015bb8:	f107 0108 	add.w	r1, r7, #8
 8015bbc:	4610      	mov	r0, r2
 8015bbe:	4798      	blx	r3
 8015bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015bc2:	e043      	b.n	8015c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015bc4:	6839      	ldr	r1, [r7, #0]
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f000 fa7d 	bl	80160c6 <USBD_CtlError>
            err++;
 8015bcc:	7afb      	ldrb	r3, [r7, #11]
 8015bce:	3301      	adds	r3, #1
 8015bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8015bd2:	e03b      	b.n	8015c4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015bda:	695b      	ldr	r3, [r3, #20]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d00b      	beq.n	8015bf8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015be6:	695b      	ldr	r3, [r3, #20]
 8015be8:	687a      	ldr	r2, [r7, #4]
 8015bea:	7c12      	ldrb	r2, [r2, #16]
 8015bec:	f107 0108 	add.w	r1, r7, #8
 8015bf0:	4610      	mov	r0, r2
 8015bf2:	4798      	blx	r3
 8015bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015bf6:	e029      	b.n	8015c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015bf8:	6839      	ldr	r1, [r7, #0]
 8015bfa:	6878      	ldr	r0, [r7, #4]
 8015bfc:	f000 fa63 	bl	80160c6 <USBD_CtlError>
            err++;
 8015c00:	7afb      	ldrb	r3, [r7, #11]
 8015c02:	3301      	adds	r3, #1
 8015c04:	72fb      	strb	r3, [r7, #11]
          break;
 8015c06:	e021      	b.n	8015c4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015c0e:	699b      	ldr	r3, [r3, #24]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d00b      	beq.n	8015c2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015c1a:	699b      	ldr	r3, [r3, #24]
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	7c12      	ldrb	r2, [r2, #16]
 8015c20:	f107 0108 	add.w	r1, r7, #8
 8015c24:	4610      	mov	r0, r2
 8015c26:	4798      	blx	r3
 8015c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c2a:	e00f      	b.n	8015c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015c2c:	6839      	ldr	r1, [r7, #0]
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f000 fa49 	bl	80160c6 <USBD_CtlError>
            err++;
 8015c34:	7afb      	ldrb	r3, [r7, #11]
 8015c36:	3301      	adds	r3, #1
 8015c38:	72fb      	strb	r3, [r7, #11]
          break;
 8015c3a:	e007      	b.n	8015c4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015c3c:	6839      	ldr	r1, [r7, #0]
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f000 fa41 	bl	80160c6 <USBD_CtlError>
          err++;
 8015c44:	7afb      	ldrb	r3, [r7, #11]
 8015c46:	3301      	adds	r3, #1
 8015c48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015c4a:	bf00      	nop
      }
      break;
 8015c4c:	e037      	b.n	8015cbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	7c1b      	ldrb	r3, [r3, #16]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d109      	bne.n	8015c6a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015c5e:	f107 0208 	add.w	r2, r7, #8
 8015c62:	4610      	mov	r0, r2
 8015c64:	4798      	blx	r3
 8015c66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015c68:	e029      	b.n	8015cbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015c6a:	6839      	ldr	r1, [r7, #0]
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f000 fa2a 	bl	80160c6 <USBD_CtlError>
        err++;
 8015c72:	7afb      	ldrb	r3, [r7, #11]
 8015c74:	3301      	adds	r3, #1
 8015c76:	72fb      	strb	r3, [r7, #11]
      break;
 8015c78:	e021      	b.n	8015cbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	7c1b      	ldrb	r3, [r3, #16]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d10d      	bne.n	8015c9e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015c8a:	f107 0208 	add.w	r2, r7, #8
 8015c8e:	4610      	mov	r0, r2
 8015c90:	4798      	blx	r3
 8015c92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	3301      	adds	r3, #1
 8015c98:	2207      	movs	r2, #7
 8015c9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015c9c:	e00f      	b.n	8015cbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015c9e:	6839      	ldr	r1, [r7, #0]
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f000 fa10 	bl	80160c6 <USBD_CtlError>
        err++;
 8015ca6:	7afb      	ldrb	r3, [r7, #11]
 8015ca8:	3301      	adds	r3, #1
 8015caa:	72fb      	strb	r3, [r7, #11]
      break;
 8015cac:	e007      	b.n	8015cbe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015cae:	6839      	ldr	r1, [r7, #0]
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f000 fa08 	bl	80160c6 <USBD_CtlError>
      err++;
 8015cb6:	7afb      	ldrb	r3, [r7, #11]
 8015cb8:	3301      	adds	r3, #1
 8015cba:	72fb      	strb	r3, [r7, #11]
      break;
 8015cbc:	bf00      	nop
  }

  if (err != 0U)
 8015cbe:	7afb      	ldrb	r3, [r7, #11]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d11e      	bne.n	8015d02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	88db      	ldrh	r3, [r3, #6]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d016      	beq.n	8015cfa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015ccc:	893b      	ldrh	r3, [r7, #8]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d00e      	beq.n	8015cf0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	88da      	ldrh	r2, [r3, #6]
 8015cd6:	893b      	ldrh	r3, [r7, #8]
 8015cd8:	4293      	cmp	r3, r2
 8015cda:	bf28      	it	cs
 8015cdc:	4613      	movcs	r3, r2
 8015cde:	b29b      	uxth	r3, r3
 8015ce0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015ce2:	893b      	ldrh	r3, [r7, #8]
 8015ce4:	461a      	mov	r2, r3
 8015ce6:	68f9      	ldr	r1, [r7, #12]
 8015ce8:	6878      	ldr	r0, [r7, #4]
 8015cea:	f000 fa69 	bl	80161c0 <USBD_CtlSendData>
 8015cee:	e009      	b.n	8015d04 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015cf0:	6839      	ldr	r1, [r7, #0]
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 f9e7 	bl	80160c6 <USBD_CtlError>
 8015cf8:	e004      	b.n	8015d04 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f000 faba 	bl	8016274 <USBD_CtlSendStatus>
 8015d00:	e000      	b.n	8015d04 <USBD_GetDescriptor+0x320>
    return;
 8015d02:	bf00      	nop
  }
}
 8015d04:	3710      	adds	r7, #16
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}
 8015d0a:	bf00      	nop

08015d0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015d16:	683b      	ldr	r3, [r7, #0]
 8015d18:	889b      	ldrh	r3, [r3, #4]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d131      	bne.n	8015d82 <USBD_SetAddress+0x76>
 8015d1e:	683b      	ldr	r3, [r7, #0]
 8015d20:	88db      	ldrh	r3, [r3, #6]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d12d      	bne.n	8015d82 <USBD_SetAddress+0x76>
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	885b      	ldrh	r3, [r3, #2]
 8015d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8015d2c:	d829      	bhi.n	8015d82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	885b      	ldrh	r3, [r3, #2]
 8015d32:	b2db      	uxtb	r3, r3
 8015d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015d38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015d40:	b2db      	uxtb	r3, r3
 8015d42:	2b03      	cmp	r3, #3
 8015d44:	d104      	bne.n	8015d50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015d46:	6839      	ldr	r1, [r7, #0]
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f000 f9bc 	bl	80160c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d4e:	e01d      	b.n	8015d8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	7bfa      	ldrb	r2, [r7, #15]
 8015d54:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015d58:	7bfb      	ldrb	r3, [r7, #15]
 8015d5a:	4619      	mov	r1, r3
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	f000 ff47 	bl	8016bf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f000 fa86 	bl	8016274 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015d68:	7bfb      	ldrb	r3, [r7, #15]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d004      	beq.n	8015d78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	2202      	movs	r2, #2
 8015d72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d76:	e009      	b.n	8015d8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2201      	movs	r2, #1
 8015d7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d80:	e004      	b.n	8015d8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015d82:	6839      	ldr	r1, [r7, #0]
 8015d84:	6878      	ldr	r0, [r7, #4]
 8015d86:	f000 f99e 	bl	80160c6 <USBD_CtlError>
  }
}
 8015d8a:	bf00      	nop
 8015d8c:	bf00      	nop
 8015d8e:	3710      	adds	r7, #16
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	885b      	ldrh	r3, [r3, #2]
 8015da6:	b2da      	uxtb	r2, r3
 8015da8:	4b4e      	ldr	r3, [pc, #312]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015daa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015dac:	4b4d      	ldr	r3, [pc, #308]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015dae:	781b      	ldrb	r3, [r3, #0]
 8015db0:	2b01      	cmp	r3, #1
 8015db2:	d905      	bls.n	8015dc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015db4:	6839      	ldr	r1, [r7, #0]
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f000 f985 	bl	80160c6 <USBD_CtlError>
    return USBD_FAIL;
 8015dbc:	2303      	movs	r3, #3
 8015dbe:	e08c      	b.n	8015eda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	d002      	beq.n	8015dd2 <USBD_SetConfig+0x3e>
 8015dcc:	2b03      	cmp	r3, #3
 8015dce:	d029      	beq.n	8015e24 <USBD_SetConfig+0x90>
 8015dd0:	e075      	b.n	8015ebe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015dd2:	4b44      	ldr	r3, [pc, #272]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015dd4:	781b      	ldrb	r3, [r3, #0]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d020      	beq.n	8015e1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015dda:	4b42      	ldr	r3, [pc, #264]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	461a      	mov	r2, r3
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015de4:	4b3f      	ldr	r3, [pc, #252]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015de6:	781b      	ldrb	r3, [r3, #0]
 8015de8:	4619      	mov	r1, r3
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f7fe ffb9 	bl	8014d62 <USBD_SetClassConfig>
 8015df0:	4603      	mov	r3, r0
 8015df2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015df4:	7bfb      	ldrb	r3, [r7, #15]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d008      	beq.n	8015e0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015dfa:	6839      	ldr	r1, [r7, #0]
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f000 f962 	bl	80160c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2202      	movs	r2, #2
 8015e06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015e0a:	e065      	b.n	8015ed8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f000 fa31 	bl	8016274 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	2203      	movs	r2, #3
 8015e16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015e1a:	e05d      	b.n	8015ed8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f000 fa29 	bl	8016274 <USBD_CtlSendStatus>
      break;
 8015e22:	e059      	b.n	8015ed8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015e24:	4b2f      	ldr	r3, [pc, #188]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d112      	bne.n	8015e52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2202      	movs	r2, #2
 8015e30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8015e34:	4b2b      	ldr	r3, [pc, #172]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015e36:	781b      	ldrb	r3, [r3, #0]
 8015e38:	461a      	mov	r2, r3
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015e3e:	4b29      	ldr	r3, [pc, #164]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	4619      	mov	r1, r3
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	f7fe ffa8 	bl	8014d9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f000 fa12 	bl	8016274 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015e50:	e042      	b.n	8015ed8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015e52:	4b24      	ldr	r3, [pc, #144]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015e54:	781b      	ldrb	r3, [r3, #0]
 8015e56:	461a      	mov	r2, r3
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	685b      	ldr	r3, [r3, #4]
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d02a      	beq.n	8015eb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	685b      	ldr	r3, [r3, #4]
 8015e64:	b2db      	uxtb	r3, r3
 8015e66:	4619      	mov	r1, r3
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f7fe ff96 	bl	8014d9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	461a      	mov	r2, r3
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015e78:	4b1a      	ldr	r3, [pc, #104]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f7fe ff6f 	bl	8014d62 <USBD_SetClassConfig>
 8015e84:	4603      	mov	r3, r0
 8015e86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015e88:	7bfb      	ldrb	r3, [r7, #15]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d00f      	beq.n	8015eae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015e8e:	6839      	ldr	r1, [r7, #0]
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f000 f918 	bl	80160c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	b2db      	uxtb	r3, r3
 8015e9c:	4619      	mov	r1, r3
 8015e9e:	6878      	ldr	r0, [r7, #4]
 8015ea0:	f7fe ff7b 	bl	8014d9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	2202      	movs	r2, #2
 8015ea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015eac:	e014      	b.n	8015ed8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f000 f9e0 	bl	8016274 <USBD_CtlSendStatus>
      break;
 8015eb4:	e010      	b.n	8015ed8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015eb6:	6878      	ldr	r0, [r7, #4]
 8015eb8:	f000 f9dc 	bl	8016274 <USBD_CtlSendStatus>
      break;
 8015ebc:	e00c      	b.n	8015ed8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015ebe:	6839      	ldr	r1, [r7, #0]
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f000 f900 	bl	80160c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015ec6:	4b07      	ldr	r3, [pc, #28]	@ (8015ee4 <USBD_SetConfig+0x150>)
 8015ec8:	781b      	ldrb	r3, [r3, #0]
 8015eca:	4619      	mov	r1, r3
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	f7fe ff64 	bl	8014d9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015ed2:	2303      	movs	r3, #3
 8015ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8015ed6:	bf00      	nop
  }

  return ret;
 8015ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3710      	adds	r7, #16
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	240267ec 	.word	0x240267ec

08015ee8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b082      	sub	sp, #8
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
 8015ef0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	88db      	ldrh	r3, [r3, #6]
 8015ef6:	2b01      	cmp	r3, #1
 8015ef8:	d004      	beq.n	8015f04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015efa:	6839      	ldr	r1, [r7, #0]
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f000 f8e2 	bl	80160c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015f02:	e023      	b.n	8015f4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f0a:	b2db      	uxtb	r3, r3
 8015f0c:	2b02      	cmp	r3, #2
 8015f0e:	dc02      	bgt.n	8015f16 <USBD_GetConfig+0x2e>
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	dc03      	bgt.n	8015f1c <USBD_GetConfig+0x34>
 8015f14:	e015      	b.n	8015f42 <USBD_GetConfig+0x5a>
 8015f16:	2b03      	cmp	r3, #3
 8015f18:	d00b      	beq.n	8015f32 <USBD_GetConfig+0x4a>
 8015f1a:	e012      	b.n	8015f42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	3308      	adds	r3, #8
 8015f26:	2201      	movs	r2, #1
 8015f28:	4619      	mov	r1, r3
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f000 f948 	bl	80161c0 <USBD_CtlSendData>
        break;
 8015f30:	e00c      	b.n	8015f4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	3304      	adds	r3, #4
 8015f36:	2201      	movs	r2, #1
 8015f38:	4619      	mov	r1, r3
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	f000 f940 	bl	80161c0 <USBD_CtlSendData>
        break;
 8015f40:	e004      	b.n	8015f4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015f42:	6839      	ldr	r1, [r7, #0]
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f000 f8be 	bl	80160c6 <USBD_CtlError>
        break;
 8015f4a:	bf00      	nop
}
 8015f4c:	bf00      	nop
 8015f4e:	3708      	adds	r7, #8
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b082      	sub	sp, #8
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f64:	b2db      	uxtb	r3, r3
 8015f66:	3b01      	subs	r3, #1
 8015f68:	2b02      	cmp	r3, #2
 8015f6a:	d81e      	bhi.n	8015faa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	88db      	ldrh	r3, [r3, #6]
 8015f70:	2b02      	cmp	r3, #2
 8015f72:	d004      	beq.n	8015f7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015f74:	6839      	ldr	r1, [r7, #0]
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f000 f8a5 	bl	80160c6 <USBD_CtlError>
        break;
 8015f7c:	e01a      	b.n	8015fb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2201      	movs	r2, #1
 8015f82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d005      	beq.n	8015f9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	68db      	ldr	r3, [r3, #12]
 8015f92:	f043 0202 	orr.w	r2, r3, #2
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	330c      	adds	r3, #12
 8015f9e:	2202      	movs	r2, #2
 8015fa0:	4619      	mov	r1, r3
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f000 f90c 	bl	80161c0 <USBD_CtlSendData>
      break;
 8015fa8:	e004      	b.n	8015fb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015faa:	6839      	ldr	r1, [r7, #0]
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f000 f88a 	bl	80160c6 <USBD_CtlError>
      break;
 8015fb2:	bf00      	nop
  }
}
 8015fb4:	bf00      	nop
 8015fb6:	3708      	adds	r7, #8
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}

08015fbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	885b      	ldrh	r3, [r3, #2]
 8015fca:	2b01      	cmp	r3, #1
 8015fcc:	d107      	bne.n	8015fde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2201      	movs	r2, #1
 8015fd2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015fd6:	6878      	ldr	r0, [r7, #4]
 8015fd8:	f000 f94c 	bl	8016274 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015fdc:	e013      	b.n	8016006 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	885b      	ldrh	r3, [r3, #2]
 8015fe2:	2b02      	cmp	r3, #2
 8015fe4:	d10b      	bne.n	8015ffe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	889b      	ldrh	r3, [r3, #4]
 8015fea:	0a1b      	lsrs	r3, r3, #8
 8015fec:	b29b      	uxth	r3, r3
 8015fee:	b2da      	uxtb	r2, r3
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015ff6:	6878      	ldr	r0, [r7, #4]
 8015ff8:	f000 f93c 	bl	8016274 <USBD_CtlSendStatus>
}
 8015ffc:	e003      	b.n	8016006 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015ffe:	6839      	ldr	r1, [r7, #0]
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f000 f860 	bl	80160c6 <USBD_CtlError>
}
 8016006:	bf00      	nop
 8016008:	3708      	adds	r7, #8
 801600a:	46bd      	mov	sp, r7
 801600c:	bd80      	pop	{r7, pc}

0801600e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801600e:	b580      	push	{r7, lr}
 8016010:	b082      	sub	sp, #8
 8016012:	af00      	add	r7, sp, #0
 8016014:	6078      	str	r0, [r7, #4]
 8016016:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801601e:	b2db      	uxtb	r3, r3
 8016020:	3b01      	subs	r3, #1
 8016022:	2b02      	cmp	r3, #2
 8016024:	d80b      	bhi.n	801603e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	885b      	ldrh	r3, [r3, #2]
 801602a:	2b01      	cmp	r3, #1
 801602c:	d10c      	bne.n	8016048 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	2200      	movs	r2, #0
 8016032:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f000 f91c 	bl	8016274 <USBD_CtlSendStatus>
      }
      break;
 801603c:	e004      	b.n	8016048 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801603e:	6839      	ldr	r1, [r7, #0]
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f000 f840 	bl	80160c6 <USBD_CtlError>
      break;
 8016046:	e000      	b.n	801604a <USBD_ClrFeature+0x3c>
      break;
 8016048:	bf00      	nop
  }
}
 801604a:	bf00      	nop
 801604c:	3708      	adds	r7, #8
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}

08016052 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016052:	b580      	push	{r7, lr}
 8016054:	b084      	sub	sp, #16
 8016056:	af00      	add	r7, sp, #0
 8016058:	6078      	str	r0, [r7, #4]
 801605a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801605c:	683b      	ldr	r3, [r7, #0]
 801605e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	781a      	ldrb	r2, [r3, #0]
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	3301      	adds	r3, #1
 801606c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	781a      	ldrb	r2, [r3, #0]
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	3301      	adds	r3, #1
 801607a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801607c:	68f8      	ldr	r0, [r7, #12]
 801607e:	f7ff fa16 	bl	80154ae <SWAPBYTE>
 8016082:	4603      	mov	r3, r0
 8016084:	461a      	mov	r2, r3
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	3301      	adds	r3, #1
 801608e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	3301      	adds	r3, #1
 8016094:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016096:	68f8      	ldr	r0, [r7, #12]
 8016098:	f7ff fa09 	bl	80154ae <SWAPBYTE>
 801609c:	4603      	mov	r3, r0
 801609e:	461a      	mov	r2, r3
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	3301      	adds	r3, #1
 80160a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	3301      	adds	r3, #1
 80160ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80160b0:	68f8      	ldr	r0, [r7, #12]
 80160b2:	f7ff f9fc 	bl	80154ae <SWAPBYTE>
 80160b6:	4603      	mov	r3, r0
 80160b8:	461a      	mov	r2, r3
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	80da      	strh	r2, [r3, #6]
}
 80160be:	bf00      	nop
 80160c0:	3710      	adds	r7, #16
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bd80      	pop	{r7, pc}

080160c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160c6:	b580      	push	{r7, lr}
 80160c8:	b082      	sub	sp, #8
 80160ca:	af00      	add	r7, sp, #0
 80160cc:	6078      	str	r0, [r7, #4]
 80160ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80160d0:	2180      	movs	r1, #128	@ 0x80
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f000 fd22 	bl	8016b1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80160d8:	2100      	movs	r1, #0
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f000 fd1e 	bl	8016b1c <USBD_LL_StallEP>
}
 80160e0:	bf00      	nop
 80160e2:	3708      	adds	r7, #8
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}

080160e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b086      	sub	sp, #24
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	60f8      	str	r0, [r7, #12]
 80160f0:	60b9      	str	r1, [r7, #8]
 80160f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80160f4:	2300      	movs	r3, #0
 80160f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d042      	beq.n	8016184 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8016102:	6938      	ldr	r0, [r7, #16]
 8016104:	f000 f842 	bl	801618c <USBD_GetLen>
 8016108:	4603      	mov	r3, r0
 801610a:	3301      	adds	r3, #1
 801610c:	005b      	lsls	r3, r3, #1
 801610e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016112:	d808      	bhi.n	8016126 <USBD_GetString+0x3e>
 8016114:	6938      	ldr	r0, [r7, #16]
 8016116:	f000 f839 	bl	801618c <USBD_GetLen>
 801611a:	4603      	mov	r3, r0
 801611c:	3301      	adds	r3, #1
 801611e:	b29b      	uxth	r3, r3
 8016120:	005b      	lsls	r3, r3, #1
 8016122:	b29a      	uxth	r2, r3
 8016124:	e001      	b.n	801612a <USBD_GetString+0x42>
 8016126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801612e:	7dfb      	ldrb	r3, [r7, #23]
 8016130:	68ba      	ldr	r2, [r7, #8]
 8016132:	4413      	add	r3, r2
 8016134:	687a      	ldr	r2, [r7, #4]
 8016136:	7812      	ldrb	r2, [r2, #0]
 8016138:	701a      	strb	r2, [r3, #0]
  idx++;
 801613a:	7dfb      	ldrb	r3, [r7, #23]
 801613c:	3301      	adds	r3, #1
 801613e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016140:	7dfb      	ldrb	r3, [r7, #23]
 8016142:	68ba      	ldr	r2, [r7, #8]
 8016144:	4413      	add	r3, r2
 8016146:	2203      	movs	r2, #3
 8016148:	701a      	strb	r2, [r3, #0]
  idx++;
 801614a:	7dfb      	ldrb	r3, [r7, #23]
 801614c:	3301      	adds	r3, #1
 801614e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016150:	e013      	b.n	801617a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8016152:	7dfb      	ldrb	r3, [r7, #23]
 8016154:	68ba      	ldr	r2, [r7, #8]
 8016156:	4413      	add	r3, r2
 8016158:	693a      	ldr	r2, [r7, #16]
 801615a:	7812      	ldrb	r2, [r2, #0]
 801615c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	3301      	adds	r3, #1
 8016162:	613b      	str	r3, [r7, #16]
    idx++;
 8016164:	7dfb      	ldrb	r3, [r7, #23]
 8016166:	3301      	adds	r3, #1
 8016168:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801616a:	7dfb      	ldrb	r3, [r7, #23]
 801616c:	68ba      	ldr	r2, [r7, #8]
 801616e:	4413      	add	r3, r2
 8016170:	2200      	movs	r2, #0
 8016172:	701a      	strb	r2, [r3, #0]
    idx++;
 8016174:	7dfb      	ldrb	r3, [r7, #23]
 8016176:	3301      	adds	r3, #1
 8016178:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801617a:	693b      	ldr	r3, [r7, #16]
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d1e7      	bne.n	8016152 <USBD_GetString+0x6a>
 8016182:	e000      	b.n	8016186 <USBD_GetString+0x9e>
    return;
 8016184:	bf00      	nop
  }
}
 8016186:	3718      	adds	r7, #24
 8016188:	46bd      	mov	sp, r7
 801618a:	bd80      	pop	{r7, pc}

0801618c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801618c:	b480      	push	{r7}
 801618e:	b085      	sub	sp, #20
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016194:	2300      	movs	r3, #0
 8016196:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801619c:	e005      	b.n	80161aa <USBD_GetLen+0x1e>
  {
    len++;
 801619e:	7bfb      	ldrb	r3, [r7, #15]
 80161a0:	3301      	adds	r3, #1
 80161a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	3301      	adds	r3, #1
 80161a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80161aa:	68bb      	ldr	r3, [r7, #8]
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d1f5      	bne.n	801619e <USBD_GetLen+0x12>
  }

  return len;
 80161b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80161b4:	4618      	mov	r0, r3
 80161b6:	3714      	adds	r7, #20
 80161b8:	46bd      	mov	sp, r7
 80161ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161be:	4770      	bx	lr

080161c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b084      	sub	sp, #16
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	60b9      	str	r1, [r7, #8]
 80161ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	2202      	movs	r2, #2
 80161d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	687a      	ldr	r2, [r7, #4]
 80161d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	687a      	ldr	r2, [r7, #4]
 80161de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	68ba      	ldr	r2, [r7, #8]
 80161e4:	2100      	movs	r1, #0
 80161e6:	68f8      	ldr	r0, [r7, #12]
 80161e8:	f000 fd21 	bl	8016c2e <USBD_LL_Transmit>

  return USBD_OK;
 80161ec:	2300      	movs	r3, #0
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	3710      	adds	r7, #16
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}

080161f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80161f6:	b580      	push	{r7, lr}
 80161f8:	b084      	sub	sp, #16
 80161fa:	af00      	add	r7, sp, #0
 80161fc:	60f8      	str	r0, [r7, #12]
 80161fe:	60b9      	str	r1, [r7, #8]
 8016200:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	68ba      	ldr	r2, [r7, #8]
 8016206:	2100      	movs	r1, #0
 8016208:	68f8      	ldr	r0, [r7, #12]
 801620a:	f000 fd10 	bl	8016c2e <USBD_LL_Transmit>

  return USBD_OK;
 801620e:	2300      	movs	r3, #0
}
 8016210:	4618      	mov	r0, r3
 8016212:	3710      	adds	r7, #16
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b084      	sub	sp, #16
 801621c:	af00      	add	r7, sp, #0
 801621e:	60f8      	str	r0, [r7, #12]
 8016220:	60b9      	str	r1, [r7, #8]
 8016222:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	2203      	movs	r2, #3
 8016228:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	687a      	ldr	r2, [r7, #4]
 8016230:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	687a      	ldr	r2, [r7, #4]
 8016238:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	68ba      	ldr	r2, [r7, #8]
 8016240:	2100      	movs	r1, #0
 8016242:	68f8      	ldr	r0, [r7, #12]
 8016244:	f000 fd14 	bl	8016c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016248:	2300      	movs	r3, #0
}
 801624a:	4618      	mov	r0, r3
 801624c:	3710      	adds	r7, #16
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}

08016252 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016252:	b580      	push	{r7, lr}
 8016254:	b084      	sub	sp, #16
 8016256:	af00      	add	r7, sp, #0
 8016258:	60f8      	str	r0, [r7, #12]
 801625a:	60b9      	str	r1, [r7, #8]
 801625c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	68ba      	ldr	r2, [r7, #8]
 8016262:	2100      	movs	r1, #0
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f000 fd03 	bl	8016c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801626a:	2300      	movs	r3, #0
}
 801626c:	4618      	mov	r0, r3
 801626e:	3710      	adds	r7, #16
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}

08016274 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b082      	sub	sp, #8
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	2204      	movs	r2, #4
 8016280:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016284:	2300      	movs	r3, #0
 8016286:	2200      	movs	r2, #0
 8016288:	2100      	movs	r1, #0
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f000 fccf 	bl	8016c2e <USBD_LL_Transmit>

  return USBD_OK;
 8016290:	2300      	movs	r3, #0
}
 8016292:	4618      	mov	r0, r3
 8016294:	3708      	adds	r7, #8
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}

0801629a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801629a:	b580      	push	{r7, lr}
 801629c:	b082      	sub	sp, #8
 801629e:	af00      	add	r7, sp, #0
 80162a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2205      	movs	r2, #5
 80162a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80162aa:	2300      	movs	r3, #0
 80162ac:	2200      	movs	r2, #0
 80162ae:	2100      	movs	r1, #0
 80162b0:	6878      	ldr	r0, [r7, #4]
 80162b2:	f000 fcdd 	bl	8016c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80162b6:	2300      	movs	r3, #0
}
 80162b8:	4618      	mov	r0, r3
 80162ba:	3708      	adds	r7, #8
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}

080162c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80162c4:	2200      	movs	r2, #0
 80162c6:	4918      	ldr	r1, [pc, #96]	@ (8016328 <MX_USB_DEVICE_Init+0x68>)
 80162c8:	4818      	ldr	r0, [pc, #96]	@ (801632c <MX_USB_DEVICE_Init+0x6c>)
 80162ca:	f7fe fccd 	bl	8014c68 <USBD_Init>
 80162ce:	4603      	mov	r3, r0
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d001      	beq.n	80162d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80162d4:	f7ea ffdc 	bl	8001290 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80162d8:	4915      	ldr	r1, [pc, #84]	@ (8016330 <MX_USB_DEVICE_Init+0x70>)
 80162da:	4814      	ldr	r0, [pc, #80]	@ (801632c <MX_USB_DEVICE_Init+0x6c>)
 80162dc:	f7fe fcf4 	bl	8014cc8 <USBD_RegisterClass>
 80162e0:	4603      	mov	r3, r0
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d001      	beq.n	80162ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80162e6:	f7ea ffd3 	bl	8001290 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80162ea:	4912      	ldr	r1, [pc, #72]	@ (8016334 <MX_USB_DEVICE_Init+0x74>)
 80162ec:	480f      	ldr	r0, [pc, #60]	@ (801632c <MX_USB_DEVICE_Init+0x6c>)
 80162ee:	f7fe fbeb 	bl	8014ac8 <USBD_CDC_RegisterInterface>
 80162f2:	4603      	mov	r3, r0
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d001      	beq.n	80162fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80162f8:	f7ea ffca 	bl	8001290 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80162fc:	480b      	ldr	r0, [pc, #44]	@ (801632c <MX_USB_DEVICE_Init+0x6c>)
 80162fe:	f7fe fd19 	bl	8014d34 <USBD_Start>
 8016302:	4603      	mov	r3, r0
 8016304:	2b00      	cmp	r3, #0
 8016306:	d001      	beq.n	801630c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016308:	f7ea ffc2 	bl	8001290 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801630c:	f7f6 fab6 	bl	800c87c <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8016310:	4b06      	ldr	r3, [pc, #24]	@ (801632c <MX_USB_DEVICE_Init+0x6c>)
 8016312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016316:	4a05      	ldr	r2, [pc, #20]	@ (801632c <MX_USB_DEVICE_Init+0x6c>)
 8016318:	33b0      	adds	r3, #176	@ 0xb0
 801631a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801631e:	4a06      	ldr	r2, [pc, #24]	@ (8016338 <MX_USB_DEVICE_Init+0x78>)
 8016320:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016322:	bf00      	nop
 8016324:	bd80      	pop	{r7, pc}
 8016326:	bf00      	nop
 8016328:	240000b4 	.word	0x240000b4
 801632c:	240267f0 	.word	0x240267f0
 8016330:	24000020 	.word	0x24000020
 8016334:	240000a0 	.word	0x240000a0
 8016338:	24026acc 	.word	0x24026acc

0801633c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016340:	2200      	movs	r2, #0
 8016342:	4905      	ldr	r1, [pc, #20]	@ (8016358 <CDC_Init_FS+0x1c>)
 8016344:	4805      	ldr	r0, [pc, #20]	@ (801635c <CDC_Init_FS+0x20>)
 8016346:	f7fe fbd9 	bl	8014afc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801634a:	4905      	ldr	r1, [pc, #20]	@ (8016360 <CDC_Init_FS+0x24>)
 801634c:	4803      	ldr	r0, [pc, #12]	@ (801635c <CDC_Init_FS+0x20>)
 801634e:	f7fe fbf7 	bl	8014b40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016352:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016354:	4618      	mov	r0, r3
 8016356:	bd80      	pop	{r7, pc}
 8016358:	240272d0 	.word	0x240272d0
 801635c:	240267f0 	.word	0x240267f0
 8016360:	24026ad0 	.word	0x24026ad0

08016364 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016364:	b480      	push	{r7}
 8016366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016368:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801636a:	4618      	mov	r0, r3
 801636c:	46bd      	mov	sp, r7
 801636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016372:	4770      	bx	lr

08016374 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016374:	b480      	push	{r7}
 8016376:	b083      	sub	sp, #12
 8016378:	af00      	add	r7, sp, #0
 801637a:	4603      	mov	r3, r0
 801637c:	6039      	str	r1, [r7, #0]
 801637e:	71fb      	strb	r3, [r7, #7]
 8016380:	4613      	mov	r3, r2
 8016382:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016384:	79fb      	ldrb	r3, [r7, #7]
 8016386:	2b23      	cmp	r3, #35	@ 0x23
 8016388:	d84a      	bhi.n	8016420 <CDC_Control_FS+0xac>
 801638a:	a201      	add	r2, pc, #4	@ (adr r2, 8016390 <CDC_Control_FS+0x1c>)
 801638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016390:	08016421 	.word	0x08016421
 8016394:	08016421 	.word	0x08016421
 8016398:	08016421 	.word	0x08016421
 801639c:	08016421 	.word	0x08016421
 80163a0:	08016421 	.word	0x08016421
 80163a4:	08016421 	.word	0x08016421
 80163a8:	08016421 	.word	0x08016421
 80163ac:	08016421 	.word	0x08016421
 80163b0:	08016421 	.word	0x08016421
 80163b4:	08016421 	.word	0x08016421
 80163b8:	08016421 	.word	0x08016421
 80163bc:	08016421 	.word	0x08016421
 80163c0:	08016421 	.word	0x08016421
 80163c4:	08016421 	.word	0x08016421
 80163c8:	08016421 	.word	0x08016421
 80163cc:	08016421 	.word	0x08016421
 80163d0:	08016421 	.word	0x08016421
 80163d4:	08016421 	.word	0x08016421
 80163d8:	08016421 	.word	0x08016421
 80163dc:	08016421 	.word	0x08016421
 80163e0:	08016421 	.word	0x08016421
 80163e4:	08016421 	.word	0x08016421
 80163e8:	08016421 	.word	0x08016421
 80163ec:	08016421 	.word	0x08016421
 80163f0:	08016421 	.word	0x08016421
 80163f4:	08016421 	.word	0x08016421
 80163f8:	08016421 	.word	0x08016421
 80163fc:	08016421 	.word	0x08016421
 8016400:	08016421 	.word	0x08016421
 8016404:	08016421 	.word	0x08016421
 8016408:	08016421 	.word	0x08016421
 801640c:	08016421 	.word	0x08016421
 8016410:	08016421 	.word	0x08016421
 8016414:	08016421 	.word	0x08016421
 8016418:	08016421 	.word	0x08016421
 801641c:	08016421 	.word	0x08016421
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016420:	bf00      	nop
  }

  return (USBD_OK);
 8016422:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016424:	4618      	mov	r0, r3
 8016426:	370c      	adds	r7, #12
 8016428:	46bd      	mov	sp, r7
 801642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642e:	4770      	bx	lr

08016430 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b082      	sub	sp, #8
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
 8016438:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801643a:	6879      	ldr	r1, [r7, #4]
 801643c:	4806      	ldr	r0, [pc, #24]	@ (8016458 <CDC_Receive_FS+0x28>)
 801643e:	f7fe fb7f 	bl	8014b40 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016442:	4805      	ldr	r0, [pc, #20]	@ (8016458 <CDC_Receive_FS+0x28>)
 8016444:	f7fe fbda 	bl	8014bfc <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8016448:	4b04      	ldr	r3, [pc, #16]	@ (801645c <CDC_Receive_FS+0x2c>)
 801644a:	2201      	movs	r2, #1
 801644c:	701a      	strb	r2, [r3, #0]
	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 801644e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016450:	4618      	mov	r0, r3
 8016452:	3708      	adds	r7, #8
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}
 8016458:	240267f0 	.word	0x240267f0
 801645c:	240267e2 	.word	0x240267e2

08016460 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	460b      	mov	r3, r1
 801646a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801646c:	2300      	movs	r3, #0
 801646e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016470:	4b0d      	ldr	r3, [pc, #52]	@ (80164a8 <CDC_Transmit_FS+0x48>)
 8016472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016476:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801647e:	2b00      	cmp	r3, #0
 8016480:	d001      	beq.n	8016486 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016482:	2301      	movs	r3, #1
 8016484:	e00b      	b.n	801649e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016486:	887b      	ldrh	r3, [r7, #2]
 8016488:	461a      	mov	r2, r3
 801648a:	6879      	ldr	r1, [r7, #4]
 801648c:	4806      	ldr	r0, [pc, #24]	@ (80164a8 <CDC_Transmit_FS+0x48>)
 801648e:	f7fe fb35 	bl	8014afc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016492:	4805      	ldr	r0, [pc, #20]	@ (80164a8 <CDC_Transmit_FS+0x48>)
 8016494:	f7fe fb72 	bl	8014b7c <USBD_CDC_TransmitPacket>
 8016498:	4603      	mov	r3, r0
 801649a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801649c:	7bfb      	ldrb	r3, [r7, #15]
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3710      	adds	r7, #16
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}
 80164a6:	bf00      	nop
 80164a8:	240267f0 	.word	0x240267f0

080164ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80164ac:	b480      	push	{r7}
 80164ae:	b087      	sub	sp, #28
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	60f8      	str	r0, [r7, #12]
 80164b4:	60b9      	str	r1, [r7, #8]
 80164b6:	4613      	mov	r3, r2
 80164b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80164ba:	2300      	movs	r3, #0
 80164bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80164be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	371c      	adds	r7, #28
 80164c6:	46bd      	mov	sp, r7
 80164c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164cc:	4770      	bx	lr
	...

080164d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164d0:	b480      	push	{r7}
 80164d2:	b083      	sub	sp, #12
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	4603      	mov	r3, r0
 80164d8:	6039      	str	r1, [r7, #0]
 80164da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	2212      	movs	r2, #18
 80164e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80164e2:	4b03      	ldr	r3, [pc, #12]	@ (80164f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80164e4:	4618      	mov	r0, r3
 80164e6:	370c      	adds	r7, #12
 80164e8:	46bd      	mov	sp, r7
 80164ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ee:	4770      	bx	lr
 80164f0:	240000d4 	.word	0x240000d4

080164f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164f4:	b480      	push	{r7}
 80164f6:	b083      	sub	sp, #12
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	4603      	mov	r3, r0
 80164fc:	6039      	str	r1, [r7, #0]
 80164fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016500:	683b      	ldr	r3, [r7, #0]
 8016502:	2204      	movs	r2, #4
 8016504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016506:	4b03      	ldr	r3, [pc, #12]	@ (8016514 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016508:	4618      	mov	r0, r3
 801650a:	370c      	adds	r7, #12
 801650c:	46bd      	mov	sp, r7
 801650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016512:	4770      	bx	lr
 8016514:	240000e8 	.word	0x240000e8

08016518 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b082      	sub	sp, #8
 801651c:	af00      	add	r7, sp, #0
 801651e:	4603      	mov	r3, r0
 8016520:	6039      	str	r1, [r7, #0]
 8016522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016524:	79fb      	ldrb	r3, [r7, #7]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d105      	bne.n	8016536 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801652a:	683a      	ldr	r2, [r7, #0]
 801652c:	4907      	ldr	r1, [pc, #28]	@ (801654c <USBD_FS_ProductStrDescriptor+0x34>)
 801652e:	4808      	ldr	r0, [pc, #32]	@ (8016550 <USBD_FS_ProductStrDescriptor+0x38>)
 8016530:	f7ff fdda 	bl	80160e8 <USBD_GetString>
 8016534:	e004      	b.n	8016540 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016536:	683a      	ldr	r2, [r7, #0]
 8016538:	4904      	ldr	r1, [pc, #16]	@ (801654c <USBD_FS_ProductStrDescriptor+0x34>)
 801653a:	4805      	ldr	r0, [pc, #20]	@ (8016550 <USBD_FS_ProductStrDescriptor+0x38>)
 801653c:	f7ff fdd4 	bl	80160e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016540:	4b02      	ldr	r3, [pc, #8]	@ (801654c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016542:	4618      	mov	r0, r3
 8016544:	3708      	adds	r7, #8
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
 801654a:	bf00      	nop
 801654c:	24027ad0 	.word	0x24027ad0
 8016550:	08017720 	.word	0x08017720

08016554 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b082      	sub	sp, #8
 8016558:	af00      	add	r7, sp, #0
 801655a:	4603      	mov	r3, r0
 801655c:	6039      	str	r1, [r7, #0]
 801655e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016560:	683a      	ldr	r2, [r7, #0]
 8016562:	4904      	ldr	r1, [pc, #16]	@ (8016574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016564:	4804      	ldr	r0, [pc, #16]	@ (8016578 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016566:	f7ff fdbf 	bl	80160e8 <USBD_GetString>
  return USBD_StrDesc;
 801656a:	4b02      	ldr	r3, [pc, #8]	@ (8016574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801656c:	4618      	mov	r0, r3
 801656e:	3708      	adds	r7, #8
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	24027ad0 	.word	0x24027ad0
 8016578:	08017738 	.word	0x08017738

0801657c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b082      	sub	sp, #8
 8016580:	af00      	add	r7, sp, #0
 8016582:	4603      	mov	r3, r0
 8016584:	6039      	str	r1, [r7, #0]
 8016586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	221a      	movs	r2, #26
 801658c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801658e:	f000 f843 	bl	8016618 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016592:	4b02      	ldr	r3, [pc, #8]	@ (801659c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016594:	4618      	mov	r0, r3
 8016596:	3708      	adds	r7, #8
 8016598:	46bd      	mov	sp, r7
 801659a:	bd80      	pop	{r7, pc}
 801659c:	240000ec 	.word	0x240000ec

080165a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	4603      	mov	r3, r0
 80165a8:	6039      	str	r1, [r7, #0]
 80165aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80165ac:	79fb      	ldrb	r3, [r7, #7]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d105      	bne.n	80165be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80165b2:	683a      	ldr	r2, [r7, #0]
 80165b4:	4907      	ldr	r1, [pc, #28]	@ (80165d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80165b6:	4808      	ldr	r0, [pc, #32]	@ (80165d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80165b8:	f7ff fd96 	bl	80160e8 <USBD_GetString>
 80165bc:	e004      	b.n	80165c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80165be:	683a      	ldr	r2, [r7, #0]
 80165c0:	4904      	ldr	r1, [pc, #16]	@ (80165d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80165c2:	4805      	ldr	r0, [pc, #20]	@ (80165d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80165c4:	f7ff fd90 	bl	80160e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80165c8:	4b02      	ldr	r3, [pc, #8]	@ (80165d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3708      	adds	r7, #8
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}
 80165d2:	bf00      	nop
 80165d4:	24027ad0 	.word	0x24027ad0
 80165d8:	0801774c 	.word	0x0801774c

080165dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b082      	sub	sp, #8
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	4603      	mov	r3, r0
 80165e4:	6039      	str	r1, [r7, #0]
 80165e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80165e8:	79fb      	ldrb	r3, [r7, #7]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d105      	bne.n	80165fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80165ee:	683a      	ldr	r2, [r7, #0]
 80165f0:	4907      	ldr	r1, [pc, #28]	@ (8016610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80165f2:	4808      	ldr	r0, [pc, #32]	@ (8016614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80165f4:	f7ff fd78 	bl	80160e8 <USBD_GetString>
 80165f8:	e004      	b.n	8016604 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80165fa:	683a      	ldr	r2, [r7, #0]
 80165fc:	4904      	ldr	r1, [pc, #16]	@ (8016610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80165fe:	4805      	ldr	r0, [pc, #20]	@ (8016614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016600:	f7ff fd72 	bl	80160e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016604:	4b02      	ldr	r3, [pc, #8]	@ (8016610 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016606:	4618      	mov	r0, r3
 8016608:	3708      	adds	r7, #8
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	24027ad0 	.word	0x24027ad0
 8016614:	08017758 	.word	0x08017758

08016618 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b084      	sub	sp, #16
 801661c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801661e:	4b0f      	ldr	r3, [pc, #60]	@ (801665c <Get_SerialNum+0x44>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016624:	4b0e      	ldr	r3, [pc, #56]	@ (8016660 <Get_SerialNum+0x48>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801662a:	4b0e      	ldr	r3, [pc, #56]	@ (8016664 <Get_SerialNum+0x4c>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016630:	68fa      	ldr	r2, [r7, #12]
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	4413      	add	r3, r2
 8016636:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d009      	beq.n	8016652 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801663e:	2208      	movs	r2, #8
 8016640:	4909      	ldr	r1, [pc, #36]	@ (8016668 <Get_SerialNum+0x50>)
 8016642:	68f8      	ldr	r0, [r7, #12]
 8016644:	f000 f814 	bl	8016670 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016648:	2204      	movs	r2, #4
 801664a:	4908      	ldr	r1, [pc, #32]	@ (801666c <Get_SerialNum+0x54>)
 801664c:	68b8      	ldr	r0, [r7, #8]
 801664e:	f000 f80f 	bl	8016670 <IntToUnicode>
  }
}
 8016652:	bf00      	nop
 8016654:	3710      	adds	r7, #16
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	1ff1e800 	.word	0x1ff1e800
 8016660:	1ff1e804 	.word	0x1ff1e804
 8016664:	1ff1e808 	.word	0x1ff1e808
 8016668:	240000ee 	.word	0x240000ee
 801666c:	240000fe 	.word	0x240000fe

08016670 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016670:	b480      	push	{r7}
 8016672:	b087      	sub	sp, #28
 8016674:	af00      	add	r7, sp, #0
 8016676:	60f8      	str	r0, [r7, #12]
 8016678:	60b9      	str	r1, [r7, #8]
 801667a:	4613      	mov	r3, r2
 801667c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801667e:	2300      	movs	r3, #0
 8016680:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016682:	2300      	movs	r3, #0
 8016684:	75fb      	strb	r3, [r7, #23]
 8016686:	e027      	b.n	80166d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	0f1b      	lsrs	r3, r3, #28
 801668c:	2b09      	cmp	r3, #9
 801668e:	d80b      	bhi.n	80166a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	0f1b      	lsrs	r3, r3, #28
 8016694:	b2da      	uxtb	r2, r3
 8016696:	7dfb      	ldrb	r3, [r7, #23]
 8016698:	005b      	lsls	r3, r3, #1
 801669a:	4619      	mov	r1, r3
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	440b      	add	r3, r1
 80166a0:	3230      	adds	r2, #48	@ 0x30
 80166a2:	b2d2      	uxtb	r2, r2
 80166a4:	701a      	strb	r2, [r3, #0]
 80166a6:	e00a      	b.n	80166be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	0f1b      	lsrs	r3, r3, #28
 80166ac:	b2da      	uxtb	r2, r3
 80166ae:	7dfb      	ldrb	r3, [r7, #23]
 80166b0:	005b      	lsls	r3, r3, #1
 80166b2:	4619      	mov	r1, r3
 80166b4:	68bb      	ldr	r3, [r7, #8]
 80166b6:	440b      	add	r3, r1
 80166b8:	3237      	adds	r2, #55	@ 0x37
 80166ba:	b2d2      	uxtb	r2, r2
 80166bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	011b      	lsls	r3, r3, #4
 80166c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80166c4:	7dfb      	ldrb	r3, [r7, #23]
 80166c6:	005b      	lsls	r3, r3, #1
 80166c8:	3301      	adds	r3, #1
 80166ca:	68ba      	ldr	r2, [r7, #8]
 80166cc:	4413      	add	r3, r2
 80166ce:	2200      	movs	r2, #0
 80166d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80166d2:	7dfb      	ldrb	r3, [r7, #23]
 80166d4:	3301      	adds	r3, #1
 80166d6:	75fb      	strb	r3, [r7, #23]
 80166d8:	7dfa      	ldrb	r2, [r7, #23]
 80166da:	79fb      	ldrb	r3, [r7, #7]
 80166dc:	429a      	cmp	r2, r3
 80166de:	d3d3      	bcc.n	8016688 <IntToUnicode+0x18>
  }
}
 80166e0:	bf00      	nop
 80166e2:	bf00      	nop
 80166e4:	371c      	adds	r7, #28
 80166e6:	46bd      	mov	sp, r7
 80166e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ec:	4770      	bx	lr
	...

080166f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b0ba      	sub	sp, #232	@ 0xe8
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80166f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80166fc:	2200      	movs	r2, #0
 80166fe:	601a      	str	r2, [r3, #0]
 8016700:	605a      	str	r2, [r3, #4]
 8016702:	609a      	str	r2, [r3, #8]
 8016704:	60da      	str	r2, [r3, #12]
 8016706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016708:	f107 0310 	add.w	r3, r7, #16
 801670c:	22c0      	movs	r2, #192	@ 0xc0
 801670e:	2100      	movs	r1, #0
 8016710:	4618      	mov	r0, r3
 8016712:	f000 fb47 	bl	8016da4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	4a2c      	ldr	r2, [pc, #176]	@ (80167cc <HAL_PCD_MspInit+0xdc>)
 801671c:	4293      	cmp	r3, r2
 801671e:	d151      	bne.n	80167c4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016720:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8016724:	f04f 0300 	mov.w	r3, #0
 8016728:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801672c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016734:	f107 0310 	add.w	r3, r7, #16
 8016738:	4618      	mov	r0, r3
 801673a:	f7f7 f895 	bl	800d868 <HAL_RCCEx_PeriphCLKConfig>
 801673e:	4603      	mov	r3, r0
 8016740:	2b00      	cmp	r3, #0
 8016742:	d001      	beq.n	8016748 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8016744:	f7ea fda4 	bl	8001290 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016748:	f7f6 f898 	bl	800c87c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801674c:	4b20      	ldr	r3, [pc, #128]	@ (80167d0 <HAL_PCD_MspInit+0xe0>)
 801674e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016752:	4a1f      	ldr	r2, [pc, #124]	@ (80167d0 <HAL_PCD_MspInit+0xe0>)
 8016754:	f043 0301 	orr.w	r3, r3, #1
 8016758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801675c:	4b1c      	ldr	r3, [pc, #112]	@ (80167d0 <HAL_PCD_MspInit+0xe0>)
 801675e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016762:	f003 0301 	and.w	r3, r3, #1
 8016766:	60fb      	str	r3, [r7, #12]
 8016768:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801676a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801676e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016772:	2302      	movs	r3, #2
 8016774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016778:	2300      	movs	r3, #0
 801677a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801677e:	2300      	movs	r3, #0
 8016780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8016784:	230a      	movs	r3, #10
 8016786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801678a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801678e:	4619      	mov	r1, r3
 8016790:	4810      	ldr	r0, [pc, #64]	@ (80167d4 <HAL_PCD_MspInit+0xe4>)
 8016792:	f7f0 f863 	bl	800685c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016796:	4b0e      	ldr	r3, [pc, #56]	@ (80167d0 <HAL_PCD_MspInit+0xe0>)
 8016798:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801679c:	4a0c      	ldr	r2, [pc, #48]	@ (80167d0 <HAL_PCD_MspInit+0xe0>)
 801679e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80167a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80167a6:	4b0a      	ldr	r3, [pc, #40]	@ (80167d0 <HAL_PCD_MspInit+0xe0>)
 80167a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80167ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80167b0:	60bb      	str	r3, [r7, #8]
 80167b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80167b4:	2200      	movs	r2, #0
 80167b6:	2100      	movs	r1, #0
 80167b8:	2065      	movs	r0, #101	@ 0x65
 80167ba:	f7ed f94c 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80167be:	2065      	movs	r0, #101	@ 0x65
 80167c0:	f7ed f963 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80167c4:	bf00      	nop
 80167c6:	37e8      	adds	r7, #232	@ 0xe8
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	40080000 	.word	0x40080000
 80167d0:	58024400 	.word	0x58024400
 80167d4:	58020000 	.word	0x58020000

080167d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b082      	sub	sp, #8
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80167ec:	4619      	mov	r1, r3
 80167ee:	4610      	mov	r0, r2
 80167f0:	f7fe faed 	bl	8014dce <USBD_LL_SetupStage>
}
 80167f4:	bf00      	nop
 80167f6:	3708      	adds	r7, #8
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}

080167fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	460b      	mov	r3, r1
 8016806:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801680e:	78fa      	ldrb	r2, [r7, #3]
 8016810:	6879      	ldr	r1, [r7, #4]
 8016812:	4613      	mov	r3, r2
 8016814:	00db      	lsls	r3, r3, #3
 8016816:	4413      	add	r3, r2
 8016818:	009b      	lsls	r3, r3, #2
 801681a:	440b      	add	r3, r1
 801681c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016820:	681a      	ldr	r2, [r3, #0]
 8016822:	78fb      	ldrb	r3, [r7, #3]
 8016824:	4619      	mov	r1, r3
 8016826:	f7fe fb27 	bl	8014e78 <USBD_LL_DataOutStage>
}
 801682a:	bf00      	nop
 801682c:	3708      	adds	r7, #8
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}

08016832 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016832:	b580      	push	{r7, lr}
 8016834:	b082      	sub	sp, #8
 8016836:	af00      	add	r7, sp, #0
 8016838:	6078      	str	r0, [r7, #4]
 801683a:	460b      	mov	r3, r1
 801683c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8016844:	78fa      	ldrb	r2, [r7, #3]
 8016846:	6879      	ldr	r1, [r7, #4]
 8016848:	4613      	mov	r3, r2
 801684a:	00db      	lsls	r3, r3, #3
 801684c:	4413      	add	r3, r2
 801684e:	009b      	lsls	r3, r3, #2
 8016850:	440b      	add	r3, r1
 8016852:	3320      	adds	r3, #32
 8016854:	681a      	ldr	r2, [r3, #0]
 8016856:	78fb      	ldrb	r3, [r7, #3]
 8016858:	4619      	mov	r1, r3
 801685a:	f7fe fbc0 	bl	8014fde <USBD_LL_DataInStage>
}
 801685e:	bf00      	nop
 8016860:	3708      	adds	r7, #8
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}

08016866 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016866:	b580      	push	{r7, lr}
 8016868:	b082      	sub	sp, #8
 801686a:	af00      	add	r7, sp, #0
 801686c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016874:	4618      	mov	r0, r3
 8016876:	f7fe fcfa 	bl	801526e <USBD_LL_SOF>
}
 801687a:	bf00      	nop
 801687c:	3708      	adds	r7, #8
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}

08016882 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016882:	b580      	push	{r7, lr}
 8016884:	b084      	sub	sp, #16
 8016886:	af00      	add	r7, sp, #0
 8016888:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801688a:	2301      	movs	r3, #1
 801688c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	79db      	ldrb	r3, [r3, #7]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d102      	bne.n	801689c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016896:	2300      	movs	r3, #0
 8016898:	73fb      	strb	r3, [r7, #15]
 801689a:	e008      	b.n	80168ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	79db      	ldrb	r3, [r3, #7]
 80168a0:	2b02      	cmp	r3, #2
 80168a2:	d102      	bne.n	80168aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80168a4:	2301      	movs	r3, #1
 80168a6:	73fb      	strb	r3, [r7, #15]
 80168a8:	e001      	b.n	80168ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80168aa:	f7ea fcf1 	bl	8001290 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80168b4:	7bfa      	ldrb	r2, [r7, #15]
 80168b6:	4611      	mov	r1, r2
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7fe fc94 	bl	80151e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7fe fc3c 	bl	8015142 <USBD_LL_Reset>
}
 80168ca:	bf00      	nop
 80168cc:	3710      	adds	r7, #16
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}
	...

080168d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7fe fc8f 	bl	8015206 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	687a      	ldr	r2, [r7, #4]
 80168f4:	6812      	ldr	r2, [r2, #0]
 80168f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80168fa:	f043 0301 	orr.w	r3, r3, #1
 80168fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	7adb      	ldrb	r3, [r3, #11]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d005      	beq.n	8016914 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016908:	4b04      	ldr	r3, [pc, #16]	@ (801691c <HAL_PCD_SuspendCallback+0x48>)
 801690a:	691b      	ldr	r3, [r3, #16]
 801690c:	4a03      	ldr	r2, [pc, #12]	@ (801691c <HAL_PCD_SuspendCallback+0x48>)
 801690e:	f043 0306 	orr.w	r3, r3, #6
 8016912:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016914:	bf00      	nop
 8016916:	3708      	adds	r7, #8
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}
 801691c:	e000ed00 	.word	0xe000ed00

08016920 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801692e:	4618      	mov	r0, r3
 8016930:	f7fe fc85 	bl	801523e <USBD_LL_Resume>
}
 8016934:	bf00      	nop
 8016936:	3708      	adds	r7, #8
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}

0801693c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b082      	sub	sp, #8
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	460b      	mov	r3, r1
 8016946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801694e:	78fa      	ldrb	r2, [r7, #3]
 8016950:	4611      	mov	r1, r2
 8016952:	4618      	mov	r0, r3
 8016954:	f7fe fcdd 	bl	8015312 <USBD_LL_IsoOUTIncomplete>
}
 8016958:	bf00      	nop
 801695a:	3708      	adds	r7, #8
 801695c:	46bd      	mov	sp, r7
 801695e:	bd80      	pop	{r7, pc}

08016960 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b082      	sub	sp, #8
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
 8016968:	460b      	mov	r3, r1
 801696a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016972:	78fa      	ldrb	r2, [r7, #3]
 8016974:	4611      	mov	r1, r2
 8016976:	4618      	mov	r0, r3
 8016978:	f7fe fc99 	bl	80152ae <USBD_LL_IsoINIncomplete>
}
 801697c:	bf00      	nop
 801697e:	3708      	adds	r7, #8
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}

08016984 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b082      	sub	sp, #8
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016992:	4618      	mov	r0, r3
 8016994:	f7fe fcef 	bl	8015376 <USBD_LL_DevConnected>
}
 8016998:	bf00      	nop
 801699a:	3708      	adds	r7, #8
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}

080169a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80169ae:	4618      	mov	r0, r3
 80169b0:	f7fe fcec 	bl	801538c <USBD_LL_DevDisconnected>
}
 80169b4:	bf00      	nop
 80169b6:	3708      	adds	r7, #8
 80169b8:	46bd      	mov	sp, r7
 80169ba:	bd80      	pop	{r7, pc}

080169bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d13e      	bne.n	8016a4a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80169cc:	4a21      	ldr	r2, [pc, #132]	@ (8016a54 <USBD_LL_Init+0x98>)
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	4a1f      	ldr	r2, [pc, #124]	@ (8016a54 <USBD_LL_Init+0x98>)
 80169d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80169dc:	4b1d      	ldr	r3, [pc, #116]	@ (8016a54 <USBD_LL_Init+0x98>)
 80169de:	4a1e      	ldr	r2, [pc, #120]	@ (8016a58 <USBD_LL_Init+0x9c>)
 80169e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80169e2:	4b1c      	ldr	r3, [pc, #112]	@ (8016a54 <USBD_LL_Init+0x98>)
 80169e4:	2209      	movs	r2, #9
 80169e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80169e8:	4b1a      	ldr	r3, [pc, #104]	@ (8016a54 <USBD_LL_Init+0x98>)
 80169ea:	2202      	movs	r2, #2
 80169ec:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80169ee:	4b19      	ldr	r3, [pc, #100]	@ (8016a54 <USBD_LL_Init+0x98>)
 80169f0:	2200      	movs	r2, #0
 80169f2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80169f4:	4b17      	ldr	r3, [pc, #92]	@ (8016a54 <USBD_LL_Init+0x98>)
 80169f6:	2202      	movs	r2, #2
 80169f8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80169fa:	4b16      	ldr	r3, [pc, #88]	@ (8016a54 <USBD_LL_Init+0x98>)
 80169fc:	2200      	movs	r2, #0
 80169fe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016a00:	4b14      	ldr	r3, [pc, #80]	@ (8016a54 <USBD_LL_Init+0x98>)
 8016a02:	2200      	movs	r2, #0
 8016a04:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016a06:	4b13      	ldr	r3, [pc, #76]	@ (8016a54 <USBD_LL_Init+0x98>)
 8016a08:	2200      	movs	r2, #0
 8016a0a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016a0c:	4b11      	ldr	r3, [pc, #68]	@ (8016a54 <USBD_LL_Init+0x98>)
 8016a0e:	2200      	movs	r2, #0
 8016a10:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016a12:	4b10      	ldr	r3, [pc, #64]	@ (8016a54 <USBD_LL_Init+0x98>)
 8016a14:	2200      	movs	r2, #0
 8016a16:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016a18:	4b0e      	ldr	r3, [pc, #56]	@ (8016a54 <USBD_LL_Init+0x98>)
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016a1e:	480d      	ldr	r0, [pc, #52]	@ (8016a54 <USBD_LL_Init+0x98>)
 8016a20:	f7f4 fc52 	bl	800b2c8 <HAL_PCD_Init>
 8016a24:	4603      	mov	r3, r0
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d001      	beq.n	8016a2e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016a2a:	f7ea fc31 	bl	8001290 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016a2e:	2180      	movs	r1, #128	@ 0x80
 8016a30:	4808      	ldr	r0, [pc, #32]	@ (8016a54 <USBD_LL_Init+0x98>)
 8016a32:	f7f5 fea8 	bl	800c786 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016a36:	2240      	movs	r2, #64	@ 0x40
 8016a38:	2100      	movs	r1, #0
 8016a3a:	4806      	ldr	r0, [pc, #24]	@ (8016a54 <USBD_LL_Init+0x98>)
 8016a3c:	f7f5 fe5c 	bl	800c6f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016a40:	2280      	movs	r2, #128	@ 0x80
 8016a42:	2101      	movs	r1, #1
 8016a44:	4803      	ldr	r0, [pc, #12]	@ (8016a54 <USBD_LL_Init+0x98>)
 8016a46:	f7f5 fe57 	bl	800c6f8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8016a4a:	2300      	movs	r3, #0
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3708      	adds	r7, #8
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bd80      	pop	{r7, pc}
 8016a54:	24027cd0 	.word	0x24027cd0
 8016a58:	40080000 	.word	0x40080000

08016a5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b084      	sub	sp, #16
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a64:	2300      	movs	r3, #0
 8016a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7f4 fd34 	bl	800b4e0 <HAL_PCD_Start>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a7c:	7bfb      	ldrb	r3, [r7, #15]
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f000 f942 	bl	8016d08 <USBD_Get_USB_Status>
 8016a84:	4603      	mov	r3, r0
 8016a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	3710      	adds	r7, #16
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}

08016a92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a92:	b580      	push	{r7, lr}
 8016a94:	b084      	sub	sp, #16
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	6078      	str	r0, [r7, #4]
 8016a9a:	4608      	mov	r0, r1
 8016a9c:	4611      	mov	r1, r2
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	70fb      	strb	r3, [r7, #3]
 8016aa4:	460b      	mov	r3, r1
 8016aa6:	70bb      	strb	r3, [r7, #2]
 8016aa8:	4613      	mov	r3, r2
 8016aaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aac:	2300      	movs	r3, #0
 8016aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016aba:	78bb      	ldrb	r3, [r7, #2]
 8016abc:	883a      	ldrh	r2, [r7, #0]
 8016abe:	78f9      	ldrb	r1, [r7, #3]
 8016ac0:	f7f5 fa35 	bl	800bf2e <HAL_PCD_EP_Open>
 8016ac4:	4603      	mov	r3, r0
 8016ac6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ac8:	7bfb      	ldrb	r3, [r7, #15]
 8016aca:	4618      	mov	r0, r3
 8016acc:	f000 f91c 	bl	8016d08 <USBD_Get_USB_Status>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ad4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3710      	adds	r7, #16
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}

08016ade <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ade:	b580      	push	{r7, lr}
 8016ae0:	b084      	sub	sp, #16
 8016ae2:	af00      	add	r7, sp, #0
 8016ae4:	6078      	str	r0, [r7, #4]
 8016ae6:	460b      	mov	r3, r1
 8016ae8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aea:	2300      	movs	r3, #0
 8016aec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016aee:	2300      	movs	r3, #0
 8016af0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016af8:	78fa      	ldrb	r2, [r7, #3]
 8016afa:	4611      	mov	r1, r2
 8016afc:	4618      	mov	r0, r3
 8016afe:	f7f5 fa80 	bl	800c002 <HAL_PCD_EP_Close>
 8016b02:	4603      	mov	r3, r0
 8016b04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b06:	7bfb      	ldrb	r3, [r7, #15]
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f000 f8fd 	bl	8016d08 <USBD_Get_USB_Status>
 8016b0e:	4603      	mov	r3, r0
 8016b10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b12:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	3710      	adds	r7, #16
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}

08016b1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b084      	sub	sp, #16
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	460b      	mov	r3, r1
 8016b26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b28:	2300      	movs	r3, #0
 8016b2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016b36:	78fa      	ldrb	r2, [r7, #3]
 8016b38:	4611      	mov	r1, r2
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7f5 fb38 	bl	800c1b0 <HAL_PCD_EP_SetStall>
 8016b40:	4603      	mov	r3, r0
 8016b42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b44:	7bfb      	ldrb	r3, [r7, #15]
 8016b46:	4618      	mov	r0, r3
 8016b48:	f000 f8de 	bl	8016d08 <USBD_Get_USB_Status>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3710      	adds	r7, #16
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}

08016b5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b5a:	b580      	push	{r7, lr}
 8016b5c:	b084      	sub	sp, #16
 8016b5e:	af00      	add	r7, sp, #0
 8016b60:	6078      	str	r0, [r7, #4]
 8016b62:	460b      	mov	r3, r1
 8016b64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b66:	2300      	movs	r3, #0
 8016b68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016b74:	78fa      	ldrb	r2, [r7, #3]
 8016b76:	4611      	mov	r1, r2
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7f5 fb7c 	bl	800c276 <HAL_PCD_EP_ClrStall>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b82:	7bfb      	ldrb	r3, [r7, #15]
 8016b84:	4618      	mov	r0, r3
 8016b86:	f000 f8bf 	bl	8016d08 <USBD_Get_USB_Status>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b90:	4618      	mov	r0, r3
 8016b92:	3710      	adds	r7, #16
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}

08016b98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b98:	b480      	push	{r7}
 8016b9a:	b085      	sub	sp, #20
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
 8016ba0:	460b      	mov	r3, r1
 8016ba2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016baa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	da0b      	bge.n	8016bcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016bb4:	78fb      	ldrb	r3, [r7, #3]
 8016bb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016bba:	68f9      	ldr	r1, [r7, #12]
 8016bbc:	4613      	mov	r3, r2
 8016bbe:	00db      	lsls	r3, r3, #3
 8016bc0:	4413      	add	r3, r2
 8016bc2:	009b      	lsls	r3, r3, #2
 8016bc4:	440b      	add	r3, r1
 8016bc6:	3316      	adds	r3, #22
 8016bc8:	781b      	ldrb	r3, [r3, #0]
 8016bca:	e00b      	b.n	8016be4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016bcc:	78fb      	ldrb	r3, [r7, #3]
 8016bce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016bd2:	68f9      	ldr	r1, [r7, #12]
 8016bd4:	4613      	mov	r3, r2
 8016bd6:	00db      	lsls	r3, r3, #3
 8016bd8:	4413      	add	r3, r2
 8016bda:	009b      	lsls	r3, r3, #2
 8016bdc:	440b      	add	r3, r1
 8016bde:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8016be2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016be4:	4618      	mov	r0, r3
 8016be6:	3714      	adds	r7, #20
 8016be8:	46bd      	mov	sp, r7
 8016bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bee:	4770      	bx	lr

08016bf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b084      	sub	sp, #16
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c00:	2300      	movs	r3, #0
 8016c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016c0a:	78fa      	ldrb	r2, [r7, #3]
 8016c0c:	4611      	mov	r1, r2
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f7f5 f969 	bl	800bee6 <HAL_PCD_SetAddress>
 8016c14:	4603      	mov	r3, r0
 8016c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c18:	7bfb      	ldrb	r3, [r7, #15]
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f000 f874 	bl	8016d08 <USBD_Get_USB_Status>
 8016c20:	4603      	mov	r3, r0
 8016c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c26:	4618      	mov	r0, r3
 8016c28:	3710      	adds	r7, #16
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	bd80      	pop	{r7, pc}

08016c2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c2e:	b580      	push	{r7, lr}
 8016c30:	b086      	sub	sp, #24
 8016c32:	af00      	add	r7, sp, #0
 8016c34:	60f8      	str	r0, [r7, #12]
 8016c36:	607a      	str	r2, [r7, #4]
 8016c38:	603b      	str	r3, [r7, #0]
 8016c3a:	460b      	mov	r3, r1
 8016c3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c42:	2300      	movs	r3, #0
 8016c44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016c4c:	7af9      	ldrb	r1, [r7, #11]
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	687a      	ldr	r2, [r7, #4]
 8016c52:	f7f5 fa73 	bl	800c13c <HAL_PCD_EP_Transmit>
 8016c56:	4603      	mov	r3, r0
 8016c58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c5a:	7dfb      	ldrb	r3, [r7, #23]
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f000 f853 	bl	8016d08 <USBD_Get_USB_Status>
 8016c62:	4603      	mov	r3, r0
 8016c64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c66:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3718      	adds	r7, #24
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b086      	sub	sp, #24
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	607a      	str	r2, [r7, #4]
 8016c7a:	603b      	str	r3, [r7, #0]
 8016c7c:	460b      	mov	r3, r1
 8016c7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c80:	2300      	movs	r3, #0
 8016c82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c84:	2300      	movs	r3, #0
 8016c86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016c8e:	7af9      	ldrb	r1, [r7, #11]
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	687a      	ldr	r2, [r7, #4]
 8016c94:	f7f5 f9ff 	bl	800c096 <HAL_PCD_EP_Receive>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c9c:	7dfb      	ldrb	r3, [r7, #23]
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f000 f832 	bl	8016d08 <USBD_Get_USB_Status>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016ca8:	7dbb      	ldrb	r3, [r7, #22]
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3718      	adds	r7, #24
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}

08016cb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cb2:	b580      	push	{r7, lr}
 8016cb4:	b082      	sub	sp, #8
 8016cb6:	af00      	add	r7, sp, #0
 8016cb8:	6078      	str	r0, [r7, #4]
 8016cba:	460b      	mov	r3, r1
 8016cbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016cc4:	78fa      	ldrb	r2, [r7, #3]
 8016cc6:	4611      	mov	r1, r2
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7f5 fa1f 	bl	800c10c <HAL_PCD_EP_GetRxCount>
 8016cce:	4603      	mov	r3, r0
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3708      	adds	r7, #8
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}

08016cd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016cd8:	b480      	push	{r7}
 8016cda:	b083      	sub	sp, #12
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016ce0:	4b03      	ldr	r3, [pc, #12]	@ (8016cf0 <USBD_static_malloc+0x18>)
}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	370c      	adds	r7, #12
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cec:	4770      	bx	lr
 8016cee:	bf00      	nop
 8016cf0:	240281b4 	.word	0x240281b4

08016cf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016cf4:	b480      	push	{r7}
 8016cf6:	b083      	sub	sp, #12
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016cfc:	bf00      	nop
 8016cfe:	370c      	adds	r7, #12
 8016d00:	46bd      	mov	sp, r7
 8016d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d06:	4770      	bx	lr

08016d08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016d08:	b480      	push	{r7}
 8016d0a:	b085      	sub	sp, #20
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	4603      	mov	r3, r0
 8016d10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d12:	2300      	movs	r3, #0
 8016d14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016d16:	79fb      	ldrb	r3, [r7, #7]
 8016d18:	2b03      	cmp	r3, #3
 8016d1a:	d817      	bhi.n	8016d4c <USBD_Get_USB_Status+0x44>
 8016d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8016d24 <USBD_Get_USB_Status+0x1c>)
 8016d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d22:	bf00      	nop
 8016d24:	08016d35 	.word	0x08016d35
 8016d28:	08016d3b 	.word	0x08016d3b
 8016d2c:	08016d41 	.word	0x08016d41
 8016d30:	08016d47 	.word	0x08016d47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016d34:	2300      	movs	r3, #0
 8016d36:	73fb      	strb	r3, [r7, #15]
    break;
 8016d38:	e00b      	b.n	8016d52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016d3a:	2303      	movs	r3, #3
 8016d3c:	73fb      	strb	r3, [r7, #15]
    break;
 8016d3e:	e008      	b.n	8016d52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016d40:	2301      	movs	r3, #1
 8016d42:	73fb      	strb	r3, [r7, #15]
    break;
 8016d44:	e005      	b.n	8016d52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016d46:	2303      	movs	r3, #3
 8016d48:	73fb      	strb	r3, [r7, #15]
    break;
 8016d4a:	e002      	b.n	8016d52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016d4c:	2303      	movs	r3, #3
 8016d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8016d50:	bf00      	nop
  }
  return usb_status;
 8016d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d54:	4618      	mov	r0, r3
 8016d56:	3714      	adds	r7, #20
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5e:	4770      	bx	lr

08016d60 <siprintf>:
 8016d60:	b40e      	push	{r1, r2, r3}
 8016d62:	b510      	push	{r4, lr}
 8016d64:	b09d      	sub	sp, #116	@ 0x74
 8016d66:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016d68:	9002      	str	r0, [sp, #8]
 8016d6a:	9006      	str	r0, [sp, #24]
 8016d6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016d70:	480a      	ldr	r0, [pc, #40]	@ (8016d9c <siprintf+0x3c>)
 8016d72:	9107      	str	r1, [sp, #28]
 8016d74:	9104      	str	r1, [sp, #16]
 8016d76:	490a      	ldr	r1, [pc, #40]	@ (8016da0 <siprintf+0x40>)
 8016d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d7c:	9105      	str	r1, [sp, #20]
 8016d7e:	2400      	movs	r4, #0
 8016d80:	a902      	add	r1, sp, #8
 8016d82:	6800      	ldr	r0, [r0, #0]
 8016d84:	9301      	str	r3, [sp, #4]
 8016d86:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016d88:	f000 f9a2 	bl	80170d0 <_svfiprintf_r>
 8016d8c:	9b02      	ldr	r3, [sp, #8]
 8016d8e:	701c      	strb	r4, [r3, #0]
 8016d90:	b01d      	add	sp, #116	@ 0x74
 8016d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d96:	b003      	add	sp, #12
 8016d98:	4770      	bx	lr
 8016d9a:	bf00      	nop
 8016d9c:	24000108 	.word	0x24000108
 8016da0:	ffff0208 	.word	0xffff0208

08016da4 <memset>:
 8016da4:	4402      	add	r2, r0
 8016da6:	4603      	mov	r3, r0
 8016da8:	4293      	cmp	r3, r2
 8016daa:	d100      	bne.n	8016dae <memset+0xa>
 8016dac:	4770      	bx	lr
 8016dae:	f803 1b01 	strb.w	r1, [r3], #1
 8016db2:	e7f9      	b.n	8016da8 <memset+0x4>

08016db4 <__errno>:
 8016db4:	4b01      	ldr	r3, [pc, #4]	@ (8016dbc <__errno+0x8>)
 8016db6:	6818      	ldr	r0, [r3, #0]
 8016db8:	4770      	bx	lr
 8016dba:	bf00      	nop
 8016dbc:	24000108 	.word	0x24000108

08016dc0 <__libc_init_array>:
 8016dc0:	b570      	push	{r4, r5, r6, lr}
 8016dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8016df8 <__libc_init_array+0x38>)
 8016dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8016dfc <__libc_init_array+0x3c>)
 8016dc6:	1b64      	subs	r4, r4, r5
 8016dc8:	10a4      	asrs	r4, r4, #2
 8016dca:	2600      	movs	r6, #0
 8016dcc:	42a6      	cmp	r6, r4
 8016dce:	d109      	bne.n	8016de4 <__libc_init_array+0x24>
 8016dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8016e00 <__libc_init_array+0x40>)
 8016dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8016e04 <__libc_init_array+0x44>)
 8016dd4:	f000 fc64 	bl	80176a0 <_init>
 8016dd8:	1b64      	subs	r4, r4, r5
 8016dda:	10a4      	asrs	r4, r4, #2
 8016ddc:	2600      	movs	r6, #0
 8016dde:	42a6      	cmp	r6, r4
 8016de0:	d105      	bne.n	8016dee <__libc_init_array+0x2e>
 8016de2:	bd70      	pop	{r4, r5, r6, pc}
 8016de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8016de8:	4798      	blx	r3
 8016dea:	3601      	adds	r6, #1
 8016dec:	e7ee      	b.n	8016dcc <__libc_init_array+0xc>
 8016dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8016df2:	4798      	blx	r3
 8016df4:	3601      	adds	r6, #1
 8016df6:	e7f2      	b.n	8016dde <__libc_init_array+0x1e>
 8016df8:	08017cfc 	.word	0x08017cfc
 8016dfc:	08017cfc 	.word	0x08017cfc
 8016e00:	08017cfc 	.word	0x08017cfc
 8016e04:	08017d00 	.word	0x08017d00

08016e08 <__retarget_lock_acquire_recursive>:
 8016e08:	4770      	bx	lr

08016e0a <__retarget_lock_release_recursive>:
 8016e0a:	4770      	bx	lr

08016e0c <memcpy>:
 8016e0c:	440a      	add	r2, r1
 8016e0e:	4291      	cmp	r1, r2
 8016e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e14:	d100      	bne.n	8016e18 <memcpy+0xc>
 8016e16:	4770      	bx	lr
 8016e18:	b510      	push	{r4, lr}
 8016e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e22:	4291      	cmp	r1, r2
 8016e24:	d1f9      	bne.n	8016e1a <memcpy+0xe>
 8016e26:	bd10      	pop	{r4, pc}

08016e28 <_free_r>:
 8016e28:	b538      	push	{r3, r4, r5, lr}
 8016e2a:	4605      	mov	r5, r0
 8016e2c:	2900      	cmp	r1, #0
 8016e2e:	d041      	beq.n	8016eb4 <_free_r+0x8c>
 8016e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e34:	1f0c      	subs	r4, r1, #4
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	bfb8      	it	lt
 8016e3a:	18e4      	addlt	r4, r4, r3
 8016e3c:	f000 f8e0 	bl	8017000 <__malloc_lock>
 8016e40:	4a1d      	ldr	r2, [pc, #116]	@ (8016eb8 <_free_r+0x90>)
 8016e42:	6813      	ldr	r3, [r2, #0]
 8016e44:	b933      	cbnz	r3, 8016e54 <_free_r+0x2c>
 8016e46:	6063      	str	r3, [r4, #4]
 8016e48:	6014      	str	r4, [r2, #0]
 8016e4a:	4628      	mov	r0, r5
 8016e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016e50:	f000 b8dc 	b.w	801700c <__malloc_unlock>
 8016e54:	42a3      	cmp	r3, r4
 8016e56:	d908      	bls.n	8016e6a <_free_r+0x42>
 8016e58:	6820      	ldr	r0, [r4, #0]
 8016e5a:	1821      	adds	r1, r4, r0
 8016e5c:	428b      	cmp	r3, r1
 8016e5e:	bf01      	itttt	eq
 8016e60:	6819      	ldreq	r1, [r3, #0]
 8016e62:	685b      	ldreq	r3, [r3, #4]
 8016e64:	1809      	addeq	r1, r1, r0
 8016e66:	6021      	streq	r1, [r4, #0]
 8016e68:	e7ed      	b.n	8016e46 <_free_r+0x1e>
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	685b      	ldr	r3, [r3, #4]
 8016e6e:	b10b      	cbz	r3, 8016e74 <_free_r+0x4c>
 8016e70:	42a3      	cmp	r3, r4
 8016e72:	d9fa      	bls.n	8016e6a <_free_r+0x42>
 8016e74:	6811      	ldr	r1, [r2, #0]
 8016e76:	1850      	adds	r0, r2, r1
 8016e78:	42a0      	cmp	r0, r4
 8016e7a:	d10b      	bne.n	8016e94 <_free_r+0x6c>
 8016e7c:	6820      	ldr	r0, [r4, #0]
 8016e7e:	4401      	add	r1, r0
 8016e80:	1850      	adds	r0, r2, r1
 8016e82:	4283      	cmp	r3, r0
 8016e84:	6011      	str	r1, [r2, #0]
 8016e86:	d1e0      	bne.n	8016e4a <_free_r+0x22>
 8016e88:	6818      	ldr	r0, [r3, #0]
 8016e8a:	685b      	ldr	r3, [r3, #4]
 8016e8c:	6053      	str	r3, [r2, #4]
 8016e8e:	4408      	add	r0, r1
 8016e90:	6010      	str	r0, [r2, #0]
 8016e92:	e7da      	b.n	8016e4a <_free_r+0x22>
 8016e94:	d902      	bls.n	8016e9c <_free_r+0x74>
 8016e96:	230c      	movs	r3, #12
 8016e98:	602b      	str	r3, [r5, #0]
 8016e9a:	e7d6      	b.n	8016e4a <_free_r+0x22>
 8016e9c:	6820      	ldr	r0, [r4, #0]
 8016e9e:	1821      	adds	r1, r4, r0
 8016ea0:	428b      	cmp	r3, r1
 8016ea2:	bf04      	itt	eq
 8016ea4:	6819      	ldreq	r1, [r3, #0]
 8016ea6:	685b      	ldreq	r3, [r3, #4]
 8016ea8:	6063      	str	r3, [r4, #4]
 8016eaa:	bf04      	itt	eq
 8016eac:	1809      	addeq	r1, r1, r0
 8016eae:	6021      	streq	r1, [r4, #0]
 8016eb0:	6054      	str	r4, [r2, #4]
 8016eb2:	e7ca      	b.n	8016e4a <_free_r+0x22>
 8016eb4:	bd38      	pop	{r3, r4, r5, pc}
 8016eb6:	bf00      	nop
 8016eb8:	24028518 	.word	0x24028518

08016ebc <sbrk_aligned>:
 8016ebc:	b570      	push	{r4, r5, r6, lr}
 8016ebe:	4e0f      	ldr	r6, [pc, #60]	@ (8016efc <sbrk_aligned+0x40>)
 8016ec0:	460c      	mov	r4, r1
 8016ec2:	6831      	ldr	r1, [r6, #0]
 8016ec4:	4605      	mov	r5, r0
 8016ec6:	b911      	cbnz	r1, 8016ece <sbrk_aligned+0x12>
 8016ec8:	f000 fba4 	bl	8017614 <_sbrk_r>
 8016ecc:	6030      	str	r0, [r6, #0]
 8016ece:	4621      	mov	r1, r4
 8016ed0:	4628      	mov	r0, r5
 8016ed2:	f000 fb9f 	bl	8017614 <_sbrk_r>
 8016ed6:	1c43      	adds	r3, r0, #1
 8016ed8:	d103      	bne.n	8016ee2 <sbrk_aligned+0x26>
 8016eda:	f04f 34ff 	mov.w	r4, #4294967295
 8016ede:	4620      	mov	r0, r4
 8016ee0:	bd70      	pop	{r4, r5, r6, pc}
 8016ee2:	1cc4      	adds	r4, r0, #3
 8016ee4:	f024 0403 	bic.w	r4, r4, #3
 8016ee8:	42a0      	cmp	r0, r4
 8016eea:	d0f8      	beq.n	8016ede <sbrk_aligned+0x22>
 8016eec:	1a21      	subs	r1, r4, r0
 8016eee:	4628      	mov	r0, r5
 8016ef0:	f000 fb90 	bl	8017614 <_sbrk_r>
 8016ef4:	3001      	adds	r0, #1
 8016ef6:	d1f2      	bne.n	8016ede <sbrk_aligned+0x22>
 8016ef8:	e7ef      	b.n	8016eda <sbrk_aligned+0x1e>
 8016efa:	bf00      	nop
 8016efc:	24028514 	.word	0x24028514

08016f00 <_malloc_r>:
 8016f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f04:	1ccd      	adds	r5, r1, #3
 8016f06:	f025 0503 	bic.w	r5, r5, #3
 8016f0a:	3508      	adds	r5, #8
 8016f0c:	2d0c      	cmp	r5, #12
 8016f0e:	bf38      	it	cc
 8016f10:	250c      	movcc	r5, #12
 8016f12:	2d00      	cmp	r5, #0
 8016f14:	4606      	mov	r6, r0
 8016f16:	db01      	blt.n	8016f1c <_malloc_r+0x1c>
 8016f18:	42a9      	cmp	r1, r5
 8016f1a:	d904      	bls.n	8016f26 <_malloc_r+0x26>
 8016f1c:	230c      	movs	r3, #12
 8016f1e:	6033      	str	r3, [r6, #0]
 8016f20:	2000      	movs	r0, #0
 8016f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016ffc <_malloc_r+0xfc>
 8016f2a:	f000 f869 	bl	8017000 <__malloc_lock>
 8016f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8016f32:	461c      	mov	r4, r3
 8016f34:	bb44      	cbnz	r4, 8016f88 <_malloc_r+0x88>
 8016f36:	4629      	mov	r1, r5
 8016f38:	4630      	mov	r0, r6
 8016f3a:	f7ff ffbf 	bl	8016ebc <sbrk_aligned>
 8016f3e:	1c43      	adds	r3, r0, #1
 8016f40:	4604      	mov	r4, r0
 8016f42:	d158      	bne.n	8016ff6 <_malloc_r+0xf6>
 8016f44:	f8d8 4000 	ldr.w	r4, [r8]
 8016f48:	4627      	mov	r7, r4
 8016f4a:	2f00      	cmp	r7, #0
 8016f4c:	d143      	bne.n	8016fd6 <_malloc_r+0xd6>
 8016f4e:	2c00      	cmp	r4, #0
 8016f50:	d04b      	beq.n	8016fea <_malloc_r+0xea>
 8016f52:	6823      	ldr	r3, [r4, #0]
 8016f54:	4639      	mov	r1, r7
 8016f56:	4630      	mov	r0, r6
 8016f58:	eb04 0903 	add.w	r9, r4, r3
 8016f5c:	f000 fb5a 	bl	8017614 <_sbrk_r>
 8016f60:	4581      	cmp	r9, r0
 8016f62:	d142      	bne.n	8016fea <_malloc_r+0xea>
 8016f64:	6821      	ldr	r1, [r4, #0]
 8016f66:	1a6d      	subs	r5, r5, r1
 8016f68:	4629      	mov	r1, r5
 8016f6a:	4630      	mov	r0, r6
 8016f6c:	f7ff ffa6 	bl	8016ebc <sbrk_aligned>
 8016f70:	3001      	adds	r0, #1
 8016f72:	d03a      	beq.n	8016fea <_malloc_r+0xea>
 8016f74:	6823      	ldr	r3, [r4, #0]
 8016f76:	442b      	add	r3, r5
 8016f78:	6023      	str	r3, [r4, #0]
 8016f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8016f7e:	685a      	ldr	r2, [r3, #4]
 8016f80:	bb62      	cbnz	r2, 8016fdc <_malloc_r+0xdc>
 8016f82:	f8c8 7000 	str.w	r7, [r8]
 8016f86:	e00f      	b.n	8016fa8 <_malloc_r+0xa8>
 8016f88:	6822      	ldr	r2, [r4, #0]
 8016f8a:	1b52      	subs	r2, r2, r5
 8016f8c:	d420      	bmi.n	8016fd0 <_malloc_r+0xd0>
 8016f8e:	2a0b      	cmp	r2, #11
 8016f90:	d917      	bls.n	8016fc2 <_malloc_r+0xc2>
 8016f92:	1961      	adds	r1, r4, r5
 8016f94:	42a3      	cmp	r3, r4
 8016f96:	6025      	str	r5, [r4, #0]
 8016f98:	bf18      	it	ne
 8016f9a:	6059      	strne	r1, [r3, #4]
 8016f9c:	6863      	ldr	r3, [r4, #4]
 8016f9e:	bf08      	it	eq
 8016fa0:	f8c8 1000 	streq.w	r1, [r8]
 8016fa4:	5162      	str	r2, [r4, r5]
 8016fa6:	604b      	str	r3, [r1, #4]
 8016fa8:	4630      	mov	r0, r6
 8016faa:	f000 f82f 	bl	801700c <__malloc_unlock>
 8016fae:	f104 000b 	add.w	r0, r4, #11
 8016fb2:	1d23      	adds	r3, r4, #4
 8016fb4:	f020 0007 	bic.w	r0, r0, #7
 8016fb8:	1ac2      	subs	r2, r0, r3
 8016fba:	bf1c      	itt	ne
 8016fbc:	1a1b      	subne	r3, r3, r0
 8016fbe:	50a3      	strne	r3, [r4, r2]
 8016fc0:	e7af      	b.n	8016f22 <_malloc_r+0x22>
 8016fc2:	6862      	ldr	r2, [r4, #4]
 8016fc4:	42a3      	cmp	r3, r4
 8016fc6:	bf0c      	ite	eq
 8016fc8:	f8c8 2000 	streq.w	r2, [r8]
 8016fcc:	605a      	strne	r2, [r3, #4]
 8016fce:	e7eb      	b.n	8016fa8 <_malloc_r+0xa8>
 8016fd0:	4623      	mov	r3, r4
 8016fd2:	6864      	ldr	r4, [r4, #4]
 8016fd4:	e7ae      	b.n	8016f34 <_malloc_r+0x34>
 8016fd6:	463c      	mov	r4, r7
 8016fd8:	687f      	ldr	r7, [r7, #4]
 8016fda:	e7b6      	b.n	8016f4a <_malloc_r+0x4a>
 8016fdc:	461a      	mov	r2, r3
 8016fde:	685b      	ldr	r3, [r3, #4]
 8016fe0:	42a3      	cmp	r3, r4
 8016fe2:	d1fb      	bne.n	8016fdc <_malloc_r+0xdc>
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	6053      	str	r3, [r2, #4]
 8016fe8:	e7de      	b.n	8016fa8 <_malloc_r+0xa8>
 8016fea:	230c      	movs	r3, #12
 8016fec:	6033      	str	r3, [r6, #0]
 8016fee:	4630      	mov	r0, r6
 8016ff0:	f000 f80c 	bl	801700c <__malloc_unlock>
 8016ff4:	e794      	b.n	8016f20 <_malloc_r+0x20>
 8016ff6:	6005      	str	r5, [r0, #0]
 8016ff8:	e7d6      	b.n	8016fa8 <_malloc_r+0xa8>
 8016ffa:	bf00      	nop
 8016ffc:	24028518 	.word	0x24028518

08017000 <__malloc_lock>:
 8017000:	4801      	ldr	r0, [pc, #4]	@ (8017008 <__malloc_lock+0x8>)
 8017002:	f7ff bf01 	b.w	8016e08 <__retarget_lock_acquire_recursive>
 8017006:	bf00      	nop
 8017008:	24028510 	.word	0x24028510

0801700c <__malloc_unlock>:
 801700c:	4801      	ldr	r0, [pc, #4]	@ (8017014 <__malloc_unlock+0x8>)
 801700e:	f7ff befc 	b.w	8016e0a <__retarget_lock_release_recursive>
 8017012:	bf00      	nop
 8017014:	24028510 	.word	0x24028510

08017018 <__ssputs_r>:
 8017018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801701c:	688e      	ldr	r6, [r1, #8]
 801701e:	461f      	mov	r7, r3
 8017020:	42be      	cmp	r6, r7
 8017022:	680b      	ldr	r3, [r1, #0]
 8017024:	4682      	mov	sl, r0
 8017026:	460c      	mov	r4, r1
 8017028:	4690      	mov	r8, r2
 801702a:	d82d      	bhi.n	8017088 <__ssputs_r+0x70>
 801702c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017030:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017034:	d026      	beq.n	8017084 <__ssputs_r+0x6c>
 8017036:	6965      	ldr	r5, [r4, #20]
 8017038:	6909      	ldr	r1, [r1, #16]
 801703a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801703e:	eba3 0901 	sub.w	r9, r3, r1
 8017042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017046:	1c7b      	adds	r3, r7, #1
 8017048:	444b      	add	r3, r9
 801704a:	106d      	asrs	r5, r5, #1
 801704c:	429d      	cmp	r5, r3
 801704e:	bf38      	it	cc
 8017050:	461d      	movcc	r5, r3
 8017052:	0553      	lsls	r3, r2, #21
 8017054:	d527      	bpl.n	80170a6 <__ssputs_r+0x8e>
 8017056:	4629      	mov	r1, r5
 8017058:	f7ff ff52 	bl	8016f00 <_malloc_r>
 801705c:	4606      	mov	r6, r0
 801705e:	b360      	cbz	r0, 80170ba <__ssputs_r+0xa2>
 8017060:	6921      	ldr	r1, [r4, #16]
 8017062:	464a      	mov	r2, r9
 8017064:	f7ff fed2 	bl	8016e0c <memcpy>
 8017068:	89a3      	ldrh	r3, [r4, #12]
 801706a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801706e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017072:	81a3      	strh	r3, [r4, #12]
 8017074:	6126      	str	r6, [r4, #16]
 8017076:	6165      	str	r5, [r4, #20]
 8017078:	444e      	add	r6, r9
 801707a:	eba5 0509 	sub.w	r5, r5, r9
 801707e:	6026      	str	r6, [r4, #0]
 8017080:	60a5      	str	r5, [r4, #8]
 8017082:	463e      	mov	r6, r7
 8017084:	42be      	cmp	r6, r7
 8017086:	d900      	bls.n	801708a <__ssputs_r+0x72>
 8017088:	463e      	mov	r6, r7
 801708a:	6820      	ldr	r0, [r4, #0]
 801708c:	4632      	mov	r2, r6
 801708e:	4641      	mov	r1, r8
 8017090:	f000 faa6 	bl	80175e0 <memmove>
 8017094:	68a3      	ldr	r3, [r4, #8]
 8017096:	1b9b      	subs	r3, r3, r6
 8017098:	60a3      	str	r3, [r4, #8]
 801709a:	6823      	ldr	r3, [r4, #0]
 801709c:	4433      	add	r3, r6
 801709e:	6023      	str	r3, [r4, #0]
 80170a0:	2000      	movs	r0, #0
 80170a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170a6:	462a      	mov	r2, r5
 80170a8:	f000 fac4 	bl	8017634 <_realloc_r>
 80170ac:	4606      	mov	r6, r0
 80170ae:	2800      	cmp	r0, #0
 80170b0:	d1e0      	bne.n	8017074 <__ssputs_r+0x5c>
 80170b2:	6921      	ldr	r1, [r4, #16]
 80170b4:	4650      	mov	r0, sl
 80170b6:	f7ff feb7 	bl	8016e28 <_free_r>
 80170ba:	230c      	movs	r3, #12
 80170bc:	f8ca 3000 	str.w	r3, [sl]
 80170c0:	89a3      	ldrh	r3, [r4, #12]
 80170c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80170c6:	81a3      	strh	r3, [r4, #12]
 80170c8:	f04f 30ff 	mov.w	r0, #4294967295
 80170cc:	e7e9      	b.n	80170a2 <__ssputs_r+0x8a>
	...

080170d0 <_svfiprintf_r>:
 80170d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d4:	4698      	mov	r8, r3
 80170d6:	898b      	ldrh	r3, [r1, #12]
 80170d8:	061b      	lsls	r3, r3, #24
 80170da:	b09d      	sub	sp, #116	@ 0x74
 80170dc:	4607      	mov	r7, r0
 80170de:	460d      	mov	r5, r1
 80170e0:	4614      	mov	r4, r2
 80170e2:	d510      	bpl.n	8017106 <_svfiprintf_r+0x36>
 80170e4:	690b      	ldr	r3, [r1, #16]
 80170e6:	b973      	cbnz	r3, 8017106 <_svfiprintf_r+0x36>
 80170e8:	2140      	movs	r1, #64	@ 0x40
 80170ea:	f7ff ff09 	bl	8016f00 <_malloc_r>
 80170ee:	6028      	str	r0, [r5, #0]
 80170f0:	6128      	str	r0, [r5, #16]
 80170f2:	b930      	cbnz	r0, 8017102 <_svfiprintf_r+0x32>
 80170f4:	230c      	movs	r3, #12
 80170f6:	603b      	str	r3, [r7, #0]
 80170f8:	f04f 30ff 	mov.w	r0, #4294967295
 80170fc:	b01d      	add	sp, #116	@ 0x74
 80170fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017102:	2340      	movs	r3, #64	@ 0x40
 8017104:	616b      	str	r3, [r5, #20]
 8017106:	2300      	movs	r3, #0
 8017108:	9309      	str	r3, [sp, #36]	@ 0x24
 801710a:	2320      	movs	r3, #32
 801710c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017110:	f8cd 800c 	str.w	r8, [sp, #12]
 8017114:	2330      	movs	r3, #48	@ 0x30
 8017116:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80172b4 <_svfiprintf_r+0x1e4>
 801711a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801711e:	f04f 0901 	mov.w	r9, #1
 8017122:	4623      	mov	r3, r4
 8017124:	469a      	mov	sl, r3
 8017126:	f813 2b01 	ldrb.w	r2, [r3], #1
 801712a:	b10a      	cbz	r2, 8017130 <_svfiprintf_r+0x60>
 801712c:	2a25      	cmp	r2, #37	@ 0x25
 801712e:	d1f9      	bne.n	8017124 <_svfiprintf_r+0x54>
 8017130:	ebba 0b04 	subs.w	fp, sl, r4
 8017134:	d00b      	beq.n	801714e <_svfiprintf_r+0x7e>
 8017136:	465b      	mov	r3, fp
 8017138:	4622      	mov	r2, r4
 801713a:	4629      	mov	r1, r5
 801713c:	4638      	mov	r0, r7
 801713e:	f7ff ff6b 	bl	8017018 <__ssputs_r>
 8017142:	3001      	adds	r0, #1
 8017144:	f000 80a7 	beq.w	8017296 <_svfiprintf_r+0x1c6>
 8017148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801714a:	445a      	add	r2, fp
 801714c:	9209      	str	r2, [sp, #36]	@ 0x24
 801714e:	f89a 3000 	ldrb.w	r3, [sl]
 8017152:	2b00      	cmp	r3, #0
 8017154:	f000 809f 	beq.w	8017296 <_svfiprintf_r+0x1c6>
 8017158:	2300      	movs	r3, #0
 801715a:	f04f 32ff 	mov.w	r2, #4294967295
 801715e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017162:	f10a 0a01 	add.w	sl, sl, #1
 8017166:	9304      	str	r3, [sp, #16]
 8017168:	9307      	str	r3, [sp, #28]
 801716a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801716e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017170:	4654      	mov	r4, sl
 8017172:	2205      	movs	r2, #5
 8017174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017178:	484e      	ldr	r0, [pc, #312]	@ (80172b4 <_svfiprintf_r+0x1e4>)
 801717a:	f7e9 f8b9 	bl	80002f0 <memchr>
 801717e:	9a04      	ldr	r2, [sp, #16]
 8017180:	b9d8      	cbnz	r0, 80171ba <_svfiprintf_r+0xea>
 8017182:	06d0      	lsls	r0, r2, #27
 8017184:	bf44      	itt	mi
 8017186:	2320      	movmi	r3, #32
 8017188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801718c:	0711      	lsls	r1, r2, #28
 801718e:	bf44      	itt	mi
 8017190:	232b      	movmi	r3, #43	@ 0x2b
 8017192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017196:	f89a 3000 	ldrb.w	r3, [sl]
 801719a:	2b2a      	cmp	r3, #42	@ 0x2a
 801719c:	d015      	beq.n	80171ca <_svfiprintf_r+0xfa>
 801719e:	9a07      	ldr	r2, [sp, #28]
 80171a0:	4654      	mov	r4, sl
 80171a2:	2000      	movs	r0, #0
 80171a4:	f04f 0c0a 	mov.w	ip, #10
 80171a8:	4621      	mov	r1, r4
 80171aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171ae:	3b30      	subs	r3, #48	@ 0x30
 80171b0:	2b09      	cmp	r3, #9
 80171b2:	d94b      	bls.n	801724c <_svfiprintf_r+0x17c>
 80171b4:	b1b0      	cbz	r0, 80171e4 <_svfiprintf_r+0x114>
 80171b6:	9207      	str	r2, [sp, #28]
 80171b8:	e014      	b.n	80171e4 <_svfiprintf_r+0x114>
 80171ba:	eba0 0308 	sub.w	r3, r0, r8
 80171be:	fa09 f303 	lsl.w	r3, r9, r3
 80171c2:	4313      	orrs	r3, r2
 80171c4:	9304      	str	r3, [sp, #16]
 80171c6:	46a2      	mov	sl, r4
 80171c8:	e7d2      	b.n	8017170 <_svfiprintf_r+0xa0>
 80171ca:	9b03      	ldr	r3, [sp, #12]
 80171cc:	1d19      	adds	r1, r3, #4
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	9103      	str	r1, [sp, #12]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	bfbb      	ittet	lt
 80171d6:	425b      	neglt	r3, r3
 80171d8:	f042 0202 	orrlt.w	r2, r2, #2
 80171dc:	9307      	strge	r3, [sp, #28]
 80171de:	9307      	strlt	r3, [sp, #28]
 80171e0:	bfb8      	it	lt
 80171e2:	9204      	strlt	r2, [sp, #16]
 80171e4:	7823      	ldrb	r3, [r4, #0]
 80171e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80171e8:	d10a      	bne.n	8017200 <_svfiprintf_r+0x130>
 80171ea:	7863      	ldrb	r3, [r4, #1]
 80171ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80171ee:	d132      	bne.n	8017256 <_svfiprintf_r+0x186>
 80171f0:	9b03      	ldr	r3, [sp, #12]
 80171f2:	1d1a      	adds	r2, r3, #4
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	9203      	str	r2, [sp, #12]
 80171f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80171fc:	3402      	adds	r4, #2
 80171fe:	9305      	str	r3, [sp, #20]
 8017200:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80172c4 <_svfiprintf_r+0x1f4>
 8017204:	7821      	ldrb	r1, [r4, #0]
 8017206:	2203      	movs	r2, #3
 8017208:	4650      	mov	r0, sl
 801720a:	f7e9 f871 	bl	80002f0 <memchr>
 801720e:	b138      	cbz	r0, 8017220 <_svfiprintf_r+0x150>
 8017210:	9b04      	ldr	r3, [sp, #16]
 8017212:	eba0 000a 	sub.w	r0, r0, sl
 8017216:	2240      	movs	r2, #64	@ 0x40
 8017218:	4082      	lsls	r2, r0
 801721a:	4313      	orrs	r3, r2
 801721c:	3401      	adds	r4, #1
 801721e:	9304      	str	r3, [sp, #16]
 8017220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017224:	4824      	ldr	r0, [pc, #144]	@ (80172b8 <_svfiprintf_r+0x1e8>)
 8017226:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801722a:	2206      	movs	r2, #6
 801722c:	f7e9 f860 	bl	80002f0 <memchr>
 8017230:	2800      	cmp	r0, #0
 8017232:	d036      	beq.n	80172a2 <_svfiprintf_r+0x1d2>
 8017234:	4b21      	ldr	r3, [pc, #132]	@ (80172bc <_svfiprintf_r+0x1ec>)
 8017236:	bb1b      	cbnz	r3, 8017280 <_svfiprintf_r+0x1b0>
 8017238:	9b03      	ldr	r3, [sp, #12]
 801723a:	3307      	adds	r3, #7
 801723c:	f023 0307 	bic.w	r3, r3, #7
 8017240:	3308      	adds	r3, #8
 8017242:	9303      	str	r3, [sp, #12]
 8017244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017246:	4433      	add	r3, r6
 8017248:	9309      	str	r3, [sp, #36]	@ 0x24
 801724a:	e76a      	b.n	8017122 <_svfiprintf_r+0x52>
 801724c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017250:	460c      	mov	r4, r1
 8017252:	2001      	movs	r0, #1
 8017254:	e7a8      	b.n	80171a8 <_svfiprintf_r+0xd8>
 8017256:	2300      	movs	r3, #0
 8017258:	3401      	adds	r4, #1
 801725a:	9305      	str	r3, [sp, #20]
 801725c:	4619      	mov	r1, r3
 801725e:	f04f 0c0a 	mov.w	ip, #10
 8017262:	4620      	mov	r0, r4
 8017264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017268:	3a30      	subs	r2, #48	@ 0x30
 801726a:	2a09      	cmp	r2, #9
 801726c:	d903      	bls.n	8017276 <_svfiprintf_r+0x1a6>
 801726e:	2b00      	cmp	r3, #0
 8017270:	d0c6      	beq.n	8017200 <_svfiprintf_r+0x130>
 8017272:	9105      	str	r1, [sp, #20]
 8017274:	e7c4      	b.n	8017200 <_svfiprintf_r+0x130>
 8017276:	fb0c 2101 	mla	r1, ip, r1, r2
 801727a:	4604      	mov	r4, r0
 801727c:	2301      	movs	r3, #1
 801727e:	e7f0      	b.n	8017262 <_svfiprintf_r+0x192>
 8017280:	ab03      	add	r3, sp, #12
 8017282:	9300      	str	r3, [sp, #0]
 8017284:	462a      	mov	r2, r5
 8017286:	4b0e      	ldr	r3, [pc, #56]	@ (80172c0 <_svfiprintf_r+0x1f0>)
 8017288:	a904      	add	r1, sp, #16
 801728a:	4638      	mov	r0, r7
 801728c:	f3af 8000 	nop.w
 8017290:	1c42      	adds	r2, r0, #1
 8017292:	4606      	mov	r6, r0
 8017294:	d1d6      	bne.n	8017244 <_svfiprintf_r+0x174>
 8017296:	89ab      	ldrh	r3, [r5, #12]
 8017298:	065b      	lsls	r3, r3, #25
 801729a:	f53f af2d 	bmi.w	80170f8 <_svfiprintf_r+0x28>
 801729e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80172a0:	e72c      	b.n	80170fc <_svfiprintf_r+0x2c>
 80172a2:	ab03      	add	r3, sp, #12
 80172a4:	9300      	str	r3, [sp, #0]
 80172a6:	462a      	mov	r2, r5
 80172a8:	4b05      	ldr	r3, [pc, #20]	@ (80172c0 <_svfiprintf_r+0x1f0>)
 80172aa:	a904      	add	r1, sp, #16
 80172ac:	4638      	mov	r0, r7
 80172ae:	f000 f879 	bl	80173a4 <_printf_i>
 80172b2:	e7ed      	b.n	8017290 <_svfiprintf_r+0x1c0>
 80172b4:	08017cc0 	.word	0x08017cc0
 80172b8:	08017cca 	.word	0x08017cca
 80172bc:	00000000 	.word	0x00000000
 80172c0:	08017019 	.word	0x08017019
 80172c4:	08017cc6 	.word	0x08017cc6

080172c8 <_printf_common>:
 80172c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172cc:	4616      	mov	r6, r2
 80172ce:	4698      	mov	r8, r3
 80172d0:	688a      	ldr	r2, [r1, #8]
 80172d2:	690b      	ldr	r3, [r1, #16]
 80172d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80172d8:	4293      	cmp	r3, r2
 80172da:	bfb8      	it	lt
 80172dc:	4613      	movlt	r3, r2
 80172de:	6033      	str	r3, [r6, #0]
 80172e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80172e4:	4607      	mov	r7, r0
 80172e6:	460c      	mov	r4, r1
 80172e8:	b10a      	cbz	r2, 80172ee <_printf_common+0x26>
 80172ea:	3301      	adds	r3, #1
 80172ec:	6033      	str	r3, [r6, #0]
 80172ee:	6823      	ldr	r3, [r4, #0]
 80172f0:	0699      	lsls	r1, r3, #26
 80172f2:	bf42      	ittt	mi
 80172f4:	6833      	ldrmi	r3, [r6, #0]
 80172f6:	3302      	addmi	r3, #2
 80172f8:	6033      	strmi	r3, [r6, #0]
 80172fa:	6825      	ldr	r5, [r4, #0]
 80172fc:	f015 0506 	ands.w	r5, r5, #6
 8017300:	d106      	bne.n	8017310 <_printf_common+0x48>
 8017302:	f104 0a19 	add.w	sl, r4, #25
 8017306:	68e3      	ldr	r3, [r4, #12]
 8017308:	6832      	ldr	r2, [r6, #0]
 801730a:	1a9b      	subs	r3, r3, r2
 801730c:	42ab      	cmp	r3, r5
 801730e:	dc26      	bgt.n	801735e <_printf_common+0x96>
 8017310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017314:	6822      	ldr	r2, [r4, #0]
 8017316:	3b00      	subs	r3, #0
 8017318:	bf18      	it	ne
 801731a:	2301      	movne	r3, #1
 801731c:	0692      	lsls	r2, r2, #26
 801731e:	d42b      	bmi.n	8017378 <_printf_common+0xb0>
 8017320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017324:	4641      	mov	r1, r8
 8017326:	4638      	mov	r0, r7
 8017328:	47c8      	blx	r9
 801732a:	3001      	adds	r0, #1
 801732c:	d01e      	beq.n	801736c <_printf_common+0xa4>
 801732e:	6823      	ldr	r3, [r4, #0]
 8017330:	6922      	ldr	r2, [r4, #16]
 8017332:	f003 0306 	and.w	r3, r3, #6
 8017336:	2b04      	cmp	r3, #4
 8017338:	bf02      	ittt	eq
 801733a:	68e5      	ldreq	r5, [r4, #12]
 801733c:	6833      	ldreq	r3, [r6, #0]
 801733e:	1aed      	subeq	r5, r5, r3
 8017340:	68a3      	ldr	r3, [r4, #8]
 8017342:	bf0c      	ite	eq
 8017344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017348:	2500      	movne	r5, #0
 801734a:	4293      	cmp	r3, r2
 801734c:	bfc4      	itt	gt
 801734e:	1a9b      	subgt	r3, r3, r2
 8017350:	18ed      	addgt	r5, r5, r3
 8017352:	2600      	movs	r6, #0
 8017354:	341a      	adds	r4, #26
 8017356:	42b5      	cmp	r5, r6
 8017358:	d11a      	bne.n	8017390 <_printf_common+0xc8>
 801735a:	2000      	movs	r0, #0
 801735c:	e008      	b.n	8017370 <_printf_common+0xa8>
 801735e:	2301      	movs	r3, #1
 8017360:	4652      	mov	r2, sl
 8017362:	4641      	mov	r1, r8
 8017364:	4638      	mov	r0, r7
 8017366:	47c8      	blx	r9
 8017368:	3001      	adds	r0, #1
 801736a:	d103      	bne.n	8017374 <_printf_common+0xac>
 801736c:	f04f 30ff 	mov.w	r0, #4294967295
 8017370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017374:	3501      	adds	r5, #1
 8017376:	e7c6      	b.n	8017306 <_printf_common+0x3e>
 8017378:	18e1      	adds	r1, r4, r3
 801737a:	1c5a      	adds	r2, r3, #1
 801737c:	2030      	movs	r0, #48	@ 0x30
 801737e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017382:	4422      	add	r2, r4
 8017384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801738c:	3302      	adds	r3, #2
 801738e:	e7c7      	b.n	8017320 <_printf_common+0x58>
 8017390:	2301      	movs	r3, #1
 8017392:	4622      	mov	r2, r4
 8017394:	4641      	mov	r1, r8
 8017396:	4638      	mov	r0, r7
 8017398:	47c8      	blx	r9
 801739a:	3001      	adds	r0, #1
 801739c:	d0e6      	beq.n	801736c <_printf_common+0xa4>
 801739e:	3601      	adds	r6, #1
 80173a0:	e7d9      	b.n	8017356 <_printf_common+0x8e>
	...

080173a4 <_printf_i>:
 80173a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80173a8:	7e0f      	ldrb	r7, [r1, #24]
 80173aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80173ac:	2f78      	cmp	r7, #120	@ 0x78
 80173ae:	4691      	mov	r9, r2
 80173b0:	4680      	mov	r8, r0
 80173b2:	460c      	mov	r4, r1
 80173b4:	469a      	mov	sl, r3
 80173b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80173ba:	d807      	bhi.n	80173cc <_printf_i+0x28>
 80173bc:	2f62      	cmp	r7, #98	@ 0x62
 80173be:	d80a      	bhi.n	80173d6 <_printf_i+0x32>
 80173c0:	2f00      	cmp	r7, #0
 80173c2:	f000 80d1 	beq.w	8017568 <_printf_i+0x1c4>
 80173c6:	2f58      	cmp	r7, #88	@ 0x58
 80173c8:	f000 80b8 	beq.w	801753c <_printf_i+0x198>
 80173cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80173d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80173d4:	e03a      	b.n	801744c <_printf_i+0xa8>
 80173d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80173da:	2b15      	cmp	r3, #21
 80173dc:	d8f6      	bhi.n	80173cc <_printf_i+0x28>
 80173de:	a101      	add	r1, pc, #4	@ (adr r1, 80173e4 <_printf_i+0x40>)
 80173e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80173e4:	0801743d 	.word	0x0801743d
 80173e8:	08017451 	.word	0x08017451
 80173ec:	080173cd 	.word	0x080173cd
 80173f0:	080173cd 	.word	0x080173cd
 80173f4:	080173cd 	.word	0x080173cd
 80173f8:	080173cd 	.word	0x080173cd
 80173fc:	08017451 	.word	0x08017451
 8017400:	080173cd 	.word	0x080173cd
 8017404:	080173cd 	.word	0x080173cd
 8017408:	080173cd 	.word	0x080173cd
 801740c:	080173cd 	.word	0x080173cd
 8017410:	0801754f 	.word	0x0801754f
 8017414:	0801747b 	.word	0x0801747b
 8017418:	08017509 	.word	0x08017509
 801741c:	080173cd 	.word	0x080173cd
 8017420:	080173cd 	.word	0x080173cd
 8017424:	08017571 	.word	0x08017571
 8017428:	080173cd 	.word	0x080173cd
 801742c:	0801747b 	.word	0x0801747b
 8017430:	080173cd 	.word	0x080173cd
 8017434:	080173cd 	.word	0x080173cd
 8017438:	08017511 	.word	0x08017511
 801743c:	6833      	ldr	r3, [r6, #0]
 801743e:	1d1a      	adds	r2, r3, #4
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	6032      	str	r2, [r6, #0]
 8017444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801744c:	2301      	movs	r3, #1
 801744e:	e09c      	b.n	801758a <_printf_i+0x1e6>
 8017450:	6833      	ldr	r3, [r6, #0]
 8017452:	6820      	ldr	r0, [r4, #0]
 8017454:	1d19      	adds	r1, r3, #4
 8017456:	6031      	str	r1, [r6, #0]
 8017458:	0606      	lsls	r6, r0, #24
 801745a:	d501      	bpl.n	8017460 <_printf_i+0xbc>
 801745c:	681d      	ldr	r5, [r3, #0]
 801745e:	e003      	b.n	8017468 <_printf_i+0xc4>
 8017460:	0645      	lsls	r5, r0, #25
 8017462:	d5fb      	bpl.n	801745c <_printf_i+0xb8>
 8017464:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017468:	2d00      	cmp	r5, #0
 801746a:	da03      	bge.n	8017474 <_printf_i+0xd0>
 801746c:	232d      	movs	r3, #45	@ 0x2d
 801746e:	426d      	negs	r5, r5
 8017470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017474:	4858      	ldr	r0, [pc, #352]	@ (80175d8 <_printf_i+0x234>)
 8017476:	230a      	movs	r3, #10
 8017478:	e011      	b.n	801749e <_printf_i+0xfa>
 801747a:	6821      	ldr	r1, [r4, #0]
 801747c:	6833      	ldr	r3, [r6, #0]
 801747e:	0608      	lsls	r0, r1, #24
 8017480:	f853 5b04 	ldr.w	r5, [r3], #4
 8017484:	d402      	bmi.n	801748c <_printf_i+0xe8>
 8017486:	0649      	lsls	r1, r1, #25
 8017488:	bf48      	it	mi
 801748a:	b2ad      	uxthmi	r5, r5
 801748c:	2f6f      	cmp	r7, #111	@ 0x6f
 801748e:	4852      	ldr	r0, [pc, #328]	@ (80175d8 <_printf_i+0x234>)
 8017490:	6033      	str	r3, [r6, #0]
 8017492:	bf14      	ite	ne
 8017494:	230a      	movne	r3, #10
 8017496:	2308      	moveq	r3, #8
 8017498:	2100      	movs	r1, #0
 801749a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801749e:	6866      	ldr	r6, [r4, #4]
 80174a0:	60a6      	str	r6, [r4, #8]
 80174a2:	2e00      	cmp	r6, #0
 80174a4:	db05      	blt.n	80174b2 <_printf_i+0x10e>
 80174a6:	6821      	ldr	r1, [r4, #0]
 80174a8:	432e      	orrs	r6, r5
 80174aa:	f021 0104 	bic.w	r1, r1, #4
 80174ae:	6021      	str	r1, [r4, #0]
 80174b0:	d04b      	beq.n	801754a <_printf_i+0x1a6>
 80174b2:	4616      	mov	r6, r2
 80174b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80174b8:	fb03 5711 	mls	r7, r3, r1, r5
 80174bc:	5dc7      	ldrb	r7, [r0, r7]
 80174be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80174c2:	462f      	mov	r7, r5
 80174c4:	42bb      	cmp	r3, r7
 80174c6:	460d      	mov	r5, r1
 80174c8:	d9f4      	bls.n	80174b4 <_printf_i+0x110>
 80174ca:	2b08      	cmp	r3, #8
 80174cc:	d10b      	bne.n	80174e6 <_printf_i+0x142>
 80174ce:	6823      	ldr	r3, [r4, #0]
 80174d0:	07df      	lsls	r7, r3, #31
 80174d2:	d508      	bpl.n	80174e6 <_printf_i+0x142>
 80174d4:	6923      	ldr	r3, [r4, #16]
 80174d6:	6861      	ldr	r1, [r4, #4]
 80174d8:	4299      	cmp	r1, r3
 80174da:	bfde      	ittt	le
 80174dc:	2330      	movle	r3, #48	@ 0x30
 80174de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80174e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80174e6:	1b92      	subs	r2, r2, r6
 80174e8:	6122      	str	r2, [r4, #16]
 80174ea:	f8cd a000 	str.w	sl, [sp]
 80174ee:	464b      	mov	r3, r9
 80174f0:	aa03      	add	r2, sp, #12
 80174f2:	4621      	mov	r1, r4
 80174f4:	4640      	mov	r0, r8
 80174f6:	f7ff fee7 	bl	80172c8 <_printf_common>
 80174fa:	3001      	adds	r0, #1
 80174fc:	d14a      	bne.n	8017594 <_printf_i+0x1f0>
 80174fe:	f04f 30ff 	mov.w	r0, #4294967295
 8017502:	b004      	add	sp, #16
 8017504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017508:	6823      	ldr	r3, [r4, #0]
 801750a:	f043 0320 	orr.w	r3, r3, #32
 801750e:	6023      	str	r3, [r4, #0]
 8017510:	4832      	ldr	r0, [pc, #200]	@ (80175dc <_printf_i+0x238>)
 8017512:	2778      	movs	r7, #120	@ 0x78
 8017514:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017518:	6823      	ldr	r3, [r4, #0]
 801751a:	6831      	ldr	r1, [r6, #0]
 801751c:	061f      	lsls	r7, r3, #24
 801751e:	f851 5b04 	ldr.w	r5, [r1], #4
 8017522:	d402      	bmi.n	801752a <_printf_i+0x186>
 8017524:	065f      	lsls	r7, r3, #25
 8017526:	bf48      	it	mi
 8017528:	b2ad      	uxthmi	r5, r5
 801752a:	6031      	str	r1, [r6, #0]
 801752c:	07d9      	lsls	r1, r3, #31
 801752e:	bf44      	itt	mi
 8017530:	f043 0320 	orrmi.w	r3, r3, #32
 8017534:	6023      	strmi	r3, [r4, #0]
 8017536:	b11d      	cbz	r5, 8017540 <_printf_i+0x19c>
 8017538:	2310      	movs	r3, #16
 801753a:	e7ad      	b.n	8017498 <_printf_i+0xf4>
 801753c:	4826      	ldr	r0, [pc, #152]	@ (80175d8 <_printf_i+0x234>)
 801753e:	e7e9      	b.n	8017514 <_printf_i+0x170>
 8017540:	6823      	ldr	r3, [r4, #0]
 8017542:	f023 0320 	bic.w	r3, r3, #32
 8017546:	6023      	str	r3, [r4, #0]
 8017548:	e7f6      	b.n	8017538 <_printf_i+0x194>
 801754a:	4616      	mov	r6, r2
 801754c:	e7bd      	b.n	80174ca <_printf_i+0x126>
 801754e:	6833      	ldr	r3, [r6, #0]
 8017550:	6825      	ldr	r5, [r4, #0]
 8017552:	6961      	ldr	r1, [r4, #20]
 8017554:	1d18      	adds	r0, r3, #4
 8017556:	6030      	str	r0, [r6, #0]
 8017558:	062e      	lsls	r6, r5, #24
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	d501      	bpl.n	8017562 <_printf_i+0x1be>
 801755e:	6019      	str	r1, [r3, #0]
 8017560:	e002      	b.n	8017568 <_printf_i+0x1c4>
 8017562:	0668      	lsls	r0, r5, #25
 8017564:	d5fb      	bpl.n	801755e <_printf_i+0x1ba>
 8017566:	8019      	strh	r1, [r3, #0]
 8017568:	2300      	movs	r3, #0
 801756a:	6123      	str	r3, [r4, #16]
 801756c:	4616      	mov	r6, r2
 801756e:	e7bc      	b.n	80174ea <_printf_i+0x146>
 8017570:	6833      	ldr	r3, [r6, #0]
 8017572:	1d1a      	adds	r2, r3, #4
 8017574:	6032      	str	r2, [r6, #0]
 8017576:	681e      	ldr	r6, [r3, #0]
 8017578:	6862      	ldr	r2, [r4, #4]
 801757a:	2100      	movs	r1, #0
 801757c:	4630      	mov	r0, r6
 801757e:	f7e8 feb7 	bl	80002f0 <memchr>
 8017582:	b108      	cbz	r0, 8017588 <_printf_i+0x1e4>
 8017584:	1b80      	subs	r0, r0, r6
 8017586:	6060      	str	r0, [r4, #4]
 8017588:	6863      	ldr	r3, [r4, #4]
 801758a:	6123      	str	r3, [r4, #16]
 801758c:	2300      	movs	r3, #0
 801758e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017592:	e7aa      	b.n	80174ea <_printf_i+0x146>
 8017594:	6923      	ldr	r3, [r4, #16]
 8017596:	4632      	mov	r2, r6
 8017598:	4649      	mov	r1, r9
 801759a:	4640      	mov	r0, r8
 801759c:	47d0      	blx	sl
 801759e:	3001      	adds	r0, #1
 80175a0:	d0ad      	beq.n	80174fe <_printf_i+0x15a>
 80175a2:	6823      	ldr	r3, [r4, #0]
 80175a4:	079b      	lsls	r3, r3, #30
 80175a6:	d413      	bmi.n	80175d0 <_printf_i+0x22c>
 80175a8:	68e0      	ldr	r0, [r4, #12]
 80175aa:	9b03      	ldr	r3, [sp, #12]
 80175ac:	4298      	cmp	r0, r3
 80175ae:	bfb8      	it	lt
 80175b0:	4618      	movlt	r0, r3
 80175b2:	e7a6      	b.n	8017502 <_printf_i+0x15e>
 80175b4:	2301      	movs	r3, #1
 80175b6:	4632      	mov	r2, r6
 80175b8:	4649      	mov	r1, r9
 80175ba:	4640      	mov	r0, r8
 80175bc:	47d0      	blx	sl
 80175be:	3001      	adds	r0, #1
 80175c0:	d09d      	beq.n	80174fe <_printf_i+0x15a>
 80175c2:	3501      	adds	r5, #1
 80175c4:	68e3      	ldr	r3, [r4, #12]
 80175c6:	9903      	ldr	r1, [sp, #12]
 80175c8:	1a5b      	subs	r3, r3, r1
 80175ca:	42ab      	cmp	r3, r5
 80175cc:	dcf2      	bgt.n	80175b4 <_printf_i+0x210>
 80175ce:	e7eb      	b.n	80175a8 <_printf_i+0x204>
 80175d0:	2500      	movs	r5, #0
 80175d2:	f104 0619 	add.w	r6, r4, #25
 80175d6:	e7f5      	b.n	80175c4 <_printf_i+0x220>
 80175d8:	08017cd1 	.word	0x08017cd1
 80175dc:	08017ce2 	.word	0x08017ce2

080175e0 <memmove>:
 80175e0:	4288      	cmp	r0, r1
 80175e2:	b510      	push	{r4, lr}
 80175e4:	eb01 0402 	add.w	r4, r1, r2
 80175e8:	d902      	bls.n	80175f0 <memmove+0x10>
 80175ea:	4284      	cmp	r4, r0
 80175ec:	4623      	mov	r3, r4
 80175ee:	d807      	bhi.n	8017600 <memmove+0x20>
 80175f0:	1e43      	subs	r3, r0, #1
 80175f2:	42a1      	cmp	r1, r4
 80175f4:	d008      	beq.n	8017608 <memmove+0x28>
 80175f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80175fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80175fe:	e7f8      	b.n	80175f2 <memmove+0x12>
 8017600:	4402      	add	r2, r0
 8017602:	4601      	mov	r1, r0
 8017604:	428a      	cmp	r2, r1
 8017606:	d100      	bne.n	801760a <memmove+0x2a>
 8017608:	bd10      	pop	{r4, pc}
 801760a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801760e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017612:	e7f7      	b.n	8017604 <memmove+0x24>

08017614 <_sbrk_r>:
 8017614:	b538      	push	{r3, r4, r5, lr}
 8017616:	4d06      	ldr	r5, [pc, #24]	@ (8017630 <_sbrk_r+0x1c>)
 8017618:	2300      	movs	r3, #0
 801761a:	4604      	mov	r4, r0
 801761c:	4608      	mov	r0, r1
 801761e:	602b      	str	r3, [r5, #0]
 8017620:	f7ea fa6e 	bl	8001b00 <_sbrk>
 8017624:	1c43      	adds	r3, r0, #1
 8017626:	d102      	bne.n	801762e <_sbrk_r+0x1a>
 8017628:	682b      	ldr	r3, [r5, #0]
 801762a:	b103      	cbz	r3, 801762e <_sbrk_r+0x1a>
 801762c:	6023      	str	r3, [r4, #0]
 801762e:	bd38      	pop	{r3, r4, r5, pc}
 8017630:	2402850c 	.word	0x2402850c

08017634 <_realloc_r>:
 8017634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017638:	4607      	mov	r7, r0
 801763a:	4614      	mov	r4, r2
 801763c:	460d      	mov	r5, r1
 801763e:	b921      	cbnz	r1, 801764a <_realloc_r+0x16>
 8017640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017644:	4611      	mov	r1, r2
 8017646:	f7ff bc5b 	b.w	8016f00 <_malloc_r>
 801764a:	b92a      	cbnz	r2, 8017658 <_realloc_r+0x24>
 801764c:	f7ff fbec 	bl	8016e28 <_free_r>
 8017650:	4625      	mov	r5, r4
 8017652:	4628      	mov	r0, r5
 8017654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017658:	f000 f81a 	bl	8017690 <_malloc_usable_size_r>
 801765c:	4284      	cmp	r4, r0
 801765e:	4606      	mov	r6, r0
 8017660:	d802      	bhi.n	8017668 <_realloc_r+0x34>
 8017662:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017666:	d8f4      	bhi.n	8017652 <_realloc_r+0x1e>
 8017668:	4621      	mov	r1, r4
 801766a:	4638      	mov	r0, r7
 801766c:	f7ff fc48 	bl	8016f00 <_malloc_r>
 8017670:	4680      	mov	r8, r0
 8017672:	b908      	cbnz	r0, 8017678 <_realloc_r+0x44>
 8017674:	4645      	mov	r5, r8
 8017676:	e7ec      	b.n	8017652 <_realloc_r+0x1e>
 8017678:	42b4      	cmp	r4, r6
 801767a:	4622      	mov	r2, r4
 801767c:	4629      	mov	r1, r5
 801767e:	bf28      	it	cs
 8017680:	4632      	movcs	r2, r6
 8017682:	f7ff fbc3 	bl	8016e0c <memcpy>
 8017686:	4629      	mov	r1, r5
 8017688:	4638      	mov	r0, r7
 801768a:	f7ff fbcd 	bl	8016e28 <_free_r>
 801768e:	e7f1      	b.n	8017674 <_realloc_r+0x40>

08017690 <_malloc_usable_size_r>:
 8017690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017694:	1f18      	subs	r0, r3, #4
 8017696:	2b00      	cmp	r3, #0
 8017698:	bfbc      	itt	lt
 801769a:	580b      	ldrlt	r3, [r1, r0]
 801769c:	18c0      	addlt	r0, r0, r3
 801769e:	4770      	bx	lr

080176a0 <_init>:
 80176a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176a2:	bf00      	nop
 80176a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176a6:	bc08      	pop	{r3}
 80176a8:	469e      	mov	lr, r3
 80176aa:	4770      	bx	lr

080176ac <_fini>:
 80176ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ae:	bf00      	nop
 80176b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176b2:	bc08      	pop	{r3}
 80176b4:	469e      	mov	lr, r3
 80176b6:	4770      	bx	lr
