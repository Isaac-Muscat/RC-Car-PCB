
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000175a4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08017844  08017844  00018844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017e74  08017e74  00018e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017e7c  08017e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017e80  08017e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08017e84  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00028364  24000158  08017fdc  00019158  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240284bc  08017fdc  000194bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019158  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bc53  00000000  00000000  00019186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000052c3  00000000  00000000  00044dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ef8  00000000  00000000  0004a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017f3  00000000  00000000  0004bf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dba6  00000000  00000000  0004d78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d2aa  00000000  00000000  0008b331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178543  00000000  00000000  000b85db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00230b1e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000898c  00000000  00000000  00230b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  002394f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801782c 	.word	0x0801782c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	0801782c 	.word	0x0801782c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 fe9b 	bl	80013fc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fe33 	bl	8002330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f8e5 	bl	8000898 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ce:	f000 f95d 	bl	800098c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fbd3 	bl	8000e7c <MX_GPIO_Init>
  MX_MDMA_Init();
 80006d6:	f000 fbb1 	bl	8000e3c <MX_MDMA_Init>
  MX_DMA_Init();
 80006da:	f000 fb67 	bl	8000dac <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006de:	f000 fb17 	bl	8000d10 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006e2:	f015 feb3 	bl	801644c <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 80006e6:	f000 faa7 	bl	8000c38 <MX_JPEG_Init>
  MX_I2C1_Init();
 80006ea:	f000 fa25 	bl	8000b38 <MX_I2C1_Init>
  MX_SPI4_Init();
 80006ee:	f000 fab7 	bl	8000c60 <MX_SPI4_Init>
  MX_ADC1_Init();
 80006f2:	f000 f995 	bl	8000a20 <MX_ADC1_Init>
  MX_I2C2_Init();
 80006f6:	f000 fa5f 	bl	8000bb8 <MX_I2C2_Init>

  //HAL_Delay(3000);

  // ------------------------------------------------------------ SETUP ADC DMA -- //

  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 80006fa:	2214      	movs	r2, #20
 80006fc:	4956      	ldr	r1, [pc, #344]	@ (8000858 <main+0x19c>)
 80006fe:	4857      	ldr	r0, [pc, #348]	@ (800085c <main+0x1a0>)
 8000700:	f002 fa94 	bl	8002c2c <HAL_ADC_Start_DMA>

  // ------------------------------------------------------------ SETUP SSD1306 -- //

  uint8_t init_result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	75bb      	strb	r3, [r7, #22]

  hssd1.i2c_handle = &hi2c2;
 8000708:	4b55      	ldr	r3, [pc, #340]	@ (8000860 <main+0x1a4>)
 800070a:	4a56      	ldr	r2, [pc, #344]	@ (8000864 <main+0x1a8>)
 800070c:	601a      	str	r2, [r3, #0]
  hssd1.address = OLED_ADDR;
 800070e:	4b54      	ldr	r3, [pc, #336]	@ (8000860 <main+0x1a4>)
 8000710:	223c      	movs	r2, #60	@ 0x3c
 8000712:	711a      	strb	r2, [r3, #4]
  hssd1.vram_full = ssd1_vram;
 8000714:	4b52      	ldr	r3, [pc, #328]	@ (8000860 <main+0x1a4>)
 8000716:	4a54      	ldr	r2, [pc, #336]	@ (8000868 <main+0x1ac>)
 8000718:	609a      	str	r2, [r3, #8]
  init_result = SSD1306_Init(&hssd1);
 800071a:	4851      	ldr	r0, [pc, #324]	@ (8000860 <main+0x1a4>)
 800071c:	f001 fbfc 	bl	8001f18 <SSD1306_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	75bb      	strb	r3, [r7, #22]
  if (init_result) {
 8000724:	7dbb      	ldrb	r3, [r7, #22]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d013      	beq.n	8000752 <main+0x96>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 800072a:	7dbb      	ldrb	r3, [r7, #22]
 800072c:	461a      	mov	r2, r3
 800072e:	494f      	ldr	r1, [pc, #316]	@ (800086c <main+0x1b0>)
 8000730:	484f      	ldr	r0, [pc, #316]	@ (8000870 <main+0x1b4>)
 8000732:	f016 fbdb 	bl	8016eec <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000736:	484e      	ldr	r0, [pc, #312]	@ (8000870 <main+0x1b4>)
 8000738:	f7ff fdd2 	bl	80002e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	4619      	mov	r1, r3
 8000740:	484b      	ldr	r0, [pc, #300]	@ (8000870 <main+0x1b4>)
 8000742:	f015 ff53 	bl	80165ec <CDC_Transmit_FS>
		  HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f001 fe83 	bl	8002454 <HAL_Delay>
	  while (1) {
 800074e:	bf00      	nop
 8000750:	e7eb      	b.n	800072a <main+0x6e>
	  }
  }

  hssd2.i2c_handle = &hi2c1;
 8000752:	4b48      	ldr	r3, [pc, #288]	@ (8000874 <main+0x1b8>)
 8000754:	4a48      	ldr	r2, [pc, #288]	@ (8000878 <main+0x1bc>)
 8000756:	601a      	str	r2, [r3, #0]
  hssd2.address = OLED_ADDR;
 8000758:	4b46      	ldr	r3, [pc, #280]	@ (8000874 <main+0x1b8>)
 800075a:	223c      	movs	r2, #60	@ 0x3c
 800075c:	711a      	strb	r2, [r3, #4]
  hssd2.vram_full = ssd2_vram;
 800075e:	4b45      	ldr	r3, [pc, #276]	@ (8000874 <main+0x1b8>)
 8000760:	4a46      	ldr	r2, [pc, #280]	@ (800087c <main+0x1c0>)
 8000762:	609a      	str	r2, [r3, #8]
  init_result = SSD1306_Init(&hssd2);
 8000764:	4843      	ldr	r0, [pc, #268]	@ (8000874 <main+0x1b8>)
 8000766:	f001 fbd7 	bl	8001f18 <SSD1306_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	75bb      	strb	r3, [r7, #22]
  if (init_result) {
 800076e:	7dbb      	ldrb	r3, [r7, #22]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <main+0xe0>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 8000774:	7dbb      	ldrb	r3, [r7, #22]
 8000776:	461a      	mov	r2, r3
 8000778:	4941      	ldr	r1, [pc, #260]	@ (8000880 <main+0x1c4>)
 800077a:	483d      	ldr	r0, [pc, #244]	@ (8000870 <main+0x1b4>)
 800077c:	f016 fbb6 	bl	8016eec <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000780:	483b      	ldr	r0, [pc, #236]	@ (8000870 <main+0x1b4>)
 8000782:	f7ff fdad 	bl	80002e0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	4839      	ldr	r0, [pc, #228]	@ (8000870 <main+0x1b4>)
 800078c:	f015 ff2e 	bl	80165ec <CDC_Transmit_FS>
		  HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000794:	f001 fe5e 	bl	8002454 <HAL_Delay>
	  while (1) {
 8000798:	bf00      	nop
 800079a:	e7eb      	b.n	8000774 <main+0xb8>
	  }
  }

  HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007a0:	f001 fe58 	bl	8002454 <HAL_Delay>

  // ------------------------------------------------------------ SETUP ST7789 -- //
  hst7789.spi_handle = &hspi4;
 80007a4:	4b37      	ldr	r3, [pc, #220]	@ (8000884 <main+0x1c8>)
 80007a6:	4a38      	ldr	r2, [pc, #224]	@ (8000888 <main+0x1cc>)
 80007a8:	601a      	str	r2, [r3, #0]
  hst7789.cs_gpio_handle = SPI4_CS_GPIO_Port;
 80007aa:	4b36      	ldr	r3, [pc, #216]	@ (8000884 <main+0x1c8>)
 80007ac:	4a37      	ldr	r2, [pc, #220]	@ (800088c <main+0x1d0>)
 80007ae:	605a      	str	r2, [r3, #4]
  hst7789.cs_gpio_pin = SPI4_CS_Pin;
 80007b0:	4b34      	ldr	r3, [pc, #208]	@ (8000884 <main+0x1c8>)
 80007b2:	2210      	movs	r2, #16
 80007b4:	811a      	strh	r2, [r3, #8]
  hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 80007b6:	4b33      	ldr	r3, [pc, #204]	@ (8000884 <main+0x1c8>)
 80007b8:	4a34      	ldr	r2, [pc, #208]	@ (800088c <main+0x1d0>)
 80007ba:	60da      	str	r2, [r3, #12]
  hst7789.dc_gpio_pin = SPI4_DC_Pin;
 80007bc:	4b31      	ldr	r3, [pc, #196]	@ (8000884 <main+0x1c8>)
 80007be:	2220      	movs	r2, #32
 80007c0:	821a      	strh	r2, [r3, #16]
  hst7789.vram = st7789_vram;
 80007c2:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <main+0x1c8>)
 80007c4:	4a32      	ldr	r2, [pc, #200]	@ (8000890 <main+0x1d4>)
 80007c6:	615a      	str	r2, [r3, #20]
  init_result = ST7789_Init(&hst7789);
 80007c8:	482e      	ldr	r0, [pc, #184]	@ (8000884 <main+0x1c8>)
 80007ca:	f001 fce1 	bl	8002190 <ST7789_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	75bb      	strb	r3, [r7, #22]
  if (init_result) {
 80007d2:	7dbb      	ldrb	r3, [r7, #22]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d013      	beq.n	8000800 <main+0x144>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 80007d8:	7dbb      	ldrb	r3, [r7, #22]
 80007da:	461a      	mov	r2, r3
 80007dc:	492d      	ldr	r1, [pc, #180]	@ (8000894 <main+0x1d8>)
 80007de:	4824      	ldr	r0, [pc, #144]	@ (8000870 <main+0x1b4>)
 80007e0:	f016 fb84 	bl	8016eec <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007e4:	4822      	ldr	r0, [pc, #136]	@ (8000870 <main+0x1b4>)
 80007e6:	f7ff fd7b 	bl	80002e0 <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4619      	mov	r1, r3
 80007ee:	4820      	ldr	r0, [pc, #128]	@ (8000870 <main+0x1b4>)
 80007f0:	f015 fefc 	bl	80165ec <CDC_Transmit_FS>
		  HAL_Delay(1000);
 80007f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f8:	f001 fe2c 	bl	8002454 <HAL_Delay>
	  while (1) {
 80007fc:	bf00      	nop
 80007fe:	e7eb      	b.n	80007d8 <main+0x11c>
	  }
  }

  // ------------------------------------------------------------ PROGRAM THE XBEE -- //
  uint8_t at_buffer[20] = {0};	// Reserve 20 bytes for writing AT commands
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
//	}
//	WriteDebug(ssd_msg, strlen(ssd_msg));
//
//	while (1) { }

  uint8_t col = 0x00;
 800080e:	2300      	movs	r3, #0
 8000810:	75fb      	strb	r3, [r7, #23]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  SSD1306_Clear(&hssd1);
 8000812:	4813      	ldr	r0, [pc, #76]	@ (8000860 <main+0x1a4>)
 8000814:	f001 fbca 	bl	8001fac <SSD1306_Clear>
	  SSD1306_Clear(&hssd2);
 8000818:	4816      	ldr	r0, [pc, #88]	@ (8000874 <main+0x1b8>)
 800081a:	f001 fbc7 	bl	8001fac <SSD1306_Clear>
	  Draw_Slider(0);
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fca2 	bl	8001168 <Draw_Slider>
	  Draw_Slider(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f000 fc9f 	bl	8001168 <Draw_Slider>
	  SSD1306_Update(&hssd1);
 800082a:	480d      	ldr	r0, [pc, #52]	@ (8000860 <main+0x1a4>)
 800082c:	f001 fbd2 	bl	8001fd4 <SSD1306_Update>
	  SSD1306_Update(&hssd2);
 8000830:	4810      	ldr	r0, [pc, #64]	@ (8000874 <main+0x1b8>)
 8000832:	f001 fbcf 	bl	8001fd4 <SSD1306_Update>

	  HAL_Delay(200);
 8000836:	20c8      	movs	r0, #200	@ 0xc8
 8000838:	f001 fe0c 	bl	8002454 <HAL_Delay>

	  ST7789_Clear(&hst7789, col);
 800083c:	7dfb      	ldrb	r3, [r7, #23]
 800083e:	4619      	mov	r1, r3
 8000840:	4810      	ldr	r0, [pc, #64]	@ (8000884 <main+0x1c8>)
 8000842:	f001 fd40 	bl	80022c6 <ST7789_Clear>
	  if (col == 0xFF)
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	2bff      	cmp	r3, #255	@ 0xff
 800084a:	d102      	bne.n	8000852 <main+0x196>
		  col = 0x00;
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
 8000850:	e7df      	b.n	8000812 <main+0x156>
	  else
		  col = 0xFF;
 8000852:	23ff      	movs	r3, #255	@ 0xff
 8000854:	75fb      	strb	r3, [r7, #23]
	  SSD1306_Clear(&hssd1);
 8000856:	e7dc      	b.n	8000812 <main+0x156>
 8000858:	24026750 	.word	0x24026750
 800085c:	24000174 	.word	0x24000174
 8000860:	240006ac 	.word	0x240006ac
 8000864:	240002a4 	.word	0x240002a4
 8000868:	240006d4 	.word	0x240006d4
 800086c:	08017844 	.word	0x08017844
 8000870:	24000ed4 	.word	0x24000ed4
 8000874:	240006c0 	.word	0x240006c0
 8000878:	24000250 	.word	0x24000250
 800087c:	24000ad4 	.word	0x24000ad4
 8000880:	08017860 	.word	0x08017860
 8000884:	24000f38 	.word	0x24000f38
 8000888:	24000518 	.word	0x24000518
 800088c:	58021000 	.word	0x58021000
 8000890:	24000f50 	.word	0x24000f50
 8000894:	0801787c 	.word	0x0801787c

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09c      	sub	sp, #112	@ 0x70
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a2:	224c      	movs	r2, #76	@ 0x4c
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f016 fb42 	bl	8016f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2220      	movs	r2, #32
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f016 fb3c 	bl	8016f30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008b8:	2002      	movs	r0, #2
 80008ba:	f00c f861 	bl	800c980 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b30      	ldr	r3, [pc, #192]	@ (8000984 <SystemClock_Config+0xec>)
 80008c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000984 <SystemClock_Config+0xec>)
 80008c8:	f023 0301 	bic.w	r3, r3, #1
 80008cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000984 <SystemClock_Config+0xec>)
 80008d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <SystemClock_Config+0xf0>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000988 <SystemClock_Config+0xf0>)
 80008de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <SystemClock_Config+0xf0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f0:	bf00      	nop
 80008f2:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SystemClock_Config+0xf0>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008fe:	d1f8      	bne.n	80008f2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000900:	2301      	movs	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000904:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	2302      	movs	r3, #2
 8000910:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000916:	2318      	movs	r3, #24
 8000918:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800091e:	2306      	movs	r3, #6
 8000920:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000926:	230c      	movs	r3, #12
 8000928:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800092a:	2300      	movs	r3, #0
 800092c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000936:	4618      	mov	r0, r3
 8000938:	f00c f86c 	bl	800ca14 <HAL_RCC_OscConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000942:	f000 fd87 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	233f      	movs	r3, #63	@ 0x3f
 8000948:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2303      	movs	r3, #3
 800094c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000956:	2340      	movs	r3, #64	@ 0x40
 8000958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2102      	movs	r1, #2
 800096c:	4618      	mov	r0, r3
 800096e:	f00c fcab 	bl	800d2c8 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000978:	f000 fd6c 	bl	8001454 <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3770      	adds	r7, #112	@ 0x70
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	58000400 	.word	0x58000400
 8000988:	58024800 	.word	0x58024800

0800098c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0b0      	sub	sp, #192	@ 0xc0
 8000990:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000992:	463b      	mov	r3, r7
 8000994:	22c0      	movs	r2, #192	@ 0xc0
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f016 fac9 	bl	8016f30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C2
 800099e:	4a1f      	ldr	r2, [pc, #124]	@ (8000a1c <PeriphCommonClock_Config+0x90>)
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 16;
 80009a8:	2310      	movs	r3, #16
 80009aa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 80009ac:	2380      	movs	r3, #128	@ 0x80
 80009ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 20;
 80009b0:	2314      	movs	r3, #20
 80009b2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 80009cc:	230c      	movs	r3, #12
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 80009d8:	2303      	movs	r3, #3
 80009da:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80009dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80009e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009e6:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80009ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009f0:	667b      	str	r3, [r7, #100]	@ 0x64
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80009f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4618      	mov	r0, r3
 8000a04:	f00c ffec 	bl	800d9e0 <HAL_RCCEx_PeriphCLKConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <PeriphCommonClock_Config+0x86>
  {
    Error_Handler();
 8000a0e:	f000 fd21 	bl	8001454 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	37c0      	adds	r7, #192	@ 0xc0
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	00082008 	.word	0x00082008

08000a20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a44:	4b38      	ldr	r3, [pc, #224]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a46:	4a39      	ldr	r2, [pc, #228]	@ (8000b2c <MX_ADC1_Init+0x10c>)
 8000a48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000a4a:	4b37      	ldr	r3, [pc, #220]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a4c:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000a50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a52:	4b35      	ldr	r3, [pc, #212]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a58:	4b33      	ldr	r3, [pc, #204]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a5e:	4b32      	ldr	r3, [pc, #200]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a60:	2208      	movs	r2, #8
 8000a62:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a64:	4b30      	ldr	r3, [pc, #192]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000a70:	4b2d      	ldr	r3, [pc, #180]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a76:	4b2c      	ldr	r3, [pc, #176]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a82:	4b29      	ldr	r3, [pc, #164]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a88:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a94:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa8:	481f      	ldr	r0, [pc, #124]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000aaa:	f001 ff1d 	bl	80028e8 <HAL_ADC_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ab4:	f000 fcce 	bl	8001454 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4819      	ldr	r0, [pc, #100]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000ac4:	f002 feca 	bl	800385c <HAL_ADCEx_MultiModeConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ace:	f000 fcc1 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_ADC1_Init+0x110>)
 8000ad4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000ada:	2307      	movs	r3, #7
 8000adc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ade:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ae2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	4619      	mov	r1, r3
 8000af4:	480c      	ldr	r0, [pc, #48]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000af6:	f002 f971 	bl	8002ddc <HAL_ADC_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b00:	f000 fca8 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <MX_ADC1_Init+0x114>)
 8000b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_ADC1_Init+0x108>)
 8000b12:	f002 f963 	bl	8002ddc <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b1c:	f000 fc9a 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	@ 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	24000174 	.word	0x24000174
 8000b2c:	40022000 	.word	0x40022000
 8000b30:	0c900008 	.word	0x0c900008
 8000b34:	10c00010 	.word	0x10c00010

08000b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb0 <MX_I2C1_Init+0x78>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b44:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb4 <MX_I2C1_Init+0x7c>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b48:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b72:	480e      	ldr	r0, [pc, #56]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b74:	f006 f8f8 	bl	8006d68 <HAL_I2C_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b7e:	f000 fc69 	bl	8001454 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4809      	ldr	r0, [pc, #36]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b86:	f008 fd29 	bl	80095dc <HAL_I2CEx_ConfigAnalogFilter>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b90:	f000 fc60 	bl	8001454 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b94:	2100      	movs	r1, #0
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_I2C1_Init+0x74>)
 8000b98:	f008 fd6b 	bl	8009672 <HAL_I2CEx_ConfigDigitalFilter>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ba2:	f000 fc57 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	24000250 	.word	0x24000250
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	00401959 	.word	0x00401959

08000bb8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c30 <MX_I2C2_Init+0x78>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <MX_I2C2_Init+0x7c>)
 8000bc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bf2:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000bf4:	f006 f8b8 	bl	8006d68 <HAL_I2C_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bfe:	f000 fc29 	bl	8001454 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c02:	2100      	movs	r1, #0
 8000c04:	4809      	ldr	r0, [pc, #36]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000c06:	f008 fce9 	bl	80095dc <HAL_I2CEx_ConfigAnalogFilter>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c10:	f000 fc20 	bl	8001454 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_I2C2_Init+0x74>)
 8000c18:	f008 fd2b 	bl	8009672 <HAL_I2CEx_ConfigDigitalFilter>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c22:	f000 fc17 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	240002a4 	.word	0x240002a4
 8000c30:	40005800 	.word	0x40005800
 8000c34:	00401959 	.word	0x00401959

08000c38 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_JPEG_Init+0x20>)
 8000c3e:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <MX_JPEG_Init+0x24>)
 8000c40:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_JPEG_Init+0x20>)
 8000c44:	f008 fd62 	bl	800970c <HAL_JPEG_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000c4e:	f000 fc01 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	240003e8 	.word	0x240003e8
 8000c5c:	52003000 	.word	0x52003000

08000c60 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c64:	4b28      	ldr	r3, [pc, #160]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000c66:	4a29      	ldr	r2, [pc, #164]	@ (8000d0c <MX_SPI4_Init+0xac>)
 8000c68:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c6a:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000c6c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c70:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000c72:	4b25      	ldr	r3, [pc, #148]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000c74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c78:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c7a:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c86:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000c8e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c92:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c94:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c9a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000cae:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000cb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cba:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000cf4:	f00f fb72 	bl	80103dc <HAL_SPI_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8000cfe:	f000 fba9 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000518 	.word	0x24000518
 8000d0c:	40013400 	.word	0x40013400

08000d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d14:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d16:	4a23      	ldr	r2, [pc, #140]	@ (8000da4 <MX_USART1_UART_Init+0x94>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d1c:	4a22      	ldr	r2, [pc, #136]	@ (8000da8 <MX_USART1_UART_Init+0x98>)
 8000d1e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d34:	220c      	movs	r2, #12
 8000d36:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d56:	4812      	ldr	r0, [pc, #72]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d58:	f010 faf5 	bl	8011346 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000d62:	f000 fb77 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d6a:	f011 ff51 	bl	8012c10 <HAL_UARTEx_SetTxFifoThreshold>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000d74:	f000 fb6e 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4809      	ldr	r0, [pc, #36]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d7c:	f011 ff86 	bl	8012c8c <HAL_UARTEx_SetRxFifoThreshold>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000d86:	f000 fb65 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_USART1_UART_Init+0x90>)
 8000d8c:	f011 ff05 	bl	8012b9a <HAL_UARTEx_EnableFifoMode>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000d96:	f000 fb5d 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24000618 	.word	0x24000618
 8000da4:	40011000 	.word	0x40011000
 8000da8:	0001b207 	.word	0x0001b207

08000dac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <MX_DMA_Init+0x8c>)
 8000db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e38 <MX_DMA_Init+0x8c>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <MX_DMA_Init+0x8c>)
 8000dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dd0:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <MX_DMA_Init+0x8c>)
 8000dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd6:	4a18      	ldr	r2, [pc, #96]	@ (8000e38 <MX_DMA_Init+0x8c>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_DMA_Init+0x8c>)
 8000de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	200b      	movs	r0, #11
 8000df4:	f002 feeb 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000df8:	200b      	movs	r0, #11
 8000dfa:	f002 ff02 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	200c      	movs	r0, #12
 8000e04:	f002 fee3 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e08:	200c      	movs	r0, #12
 8000e0a:	f002 fefa 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	200d      	movs	r0, #13
 8000e14:	f002 fedb 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e18:	200d      	movs	r0, #13
 8000e1a:	f002 fef2 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2038      	movs	r0, #56	@ 0x38
 8000e24:	f002 fed3 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e28:	2038      	movs	r0, #56	@ 0x38
 8000e2a:	f002 feea 	bl	8003c02 <HAL_NVIC_EnableIRQ>

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	58024400 	.word	0x58024400

08000e3c <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <MX_MDMA_Init+0x3c>)
 8000e44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e48:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <MX_MDMA_Init+0x3c>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <MX_MDMA_Init+0x3c>)
 8000e54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	207a      	movs	r0, #122	@ 0x7a
 8000e66:	f002 feb2 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e6a:	207a      	movs	r0, #122	@ 0x7a
 8000e6c:	f002 fec9 	bl	8003c02 <HAL_NVIC_EnableIRQ>

}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e92:	4b44      	ldr	r3, [pc, #272]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e98:	4a42      	ldr	r2, [pc, #264]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000e9a:	f043 0310 	orr.w	r3, r3, #16
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea2:	4b40      	ldr	r3, [pc, #256]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea8:	f003 0310 	and.w	r3, r3, #16
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec0:	4b38      	ldr	r3, [pc, #224]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b35      	ldr	r3, [pc, #212]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed4:	4a33      	ldr	r2, [pc, #204]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ede:	4b31      	ldr	r3, [pc, #196]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eec:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efc:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b26      	ldr	r3, [pc, #152]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f10:	4a24      	ldr	r2, [pc, #144]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1a:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <MX_GPIO_Init+0x128>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|SPI4_DC_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2130      	movs	r1, #48	@ 0x30
 8000f2c:	481e      	ldr	r0, [pc, #120]	@ (8000fa8 <MX_GPIO_Init+0x12c>)
 8000f2e:	f005 ff01 	bl	8006d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8000f32:	2310      	movs	r3, #16
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4817      	ldr	r0, [pc, #92]	@ (8000fa8 <MX_GPIO_Init+0x12c>)
 8000f4a:	f005 fd43 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_DC_Pin */
  GPIO_InitStruct.Pin = SPI4_DC_Pin;
 8000f4e:	2320      	movs	r3, #32
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4810      	ldr	r0, [pc, #64]	@ (8000fa8 <MX_GPIO_Init+0x12c>)
 8000f66:	f005 fd35 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_L_Pin */
  GPIO_InitStruct.Pin = BTN_L_Pin;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_L_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480b      	ldr	r0, [pc, #44]	@ (8000fac <MX_GPIO_Init+0x130>)
 8000f7e:	f005 fd29 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_R_Pin */
  GPIO_InitStruct.Pin = BTN_R_Pin;
 8000f82:	2320      	movs	r3, #32
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000f96:	f005 fd1d 	bl	80069d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	@ 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58021000 	.word	0x58021000
 8000fac:	58020000 	.word	0x58020000
 8000fb0:	58020800 	.word	0x58020800
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	// Roll the blunt (rolling average)
	//adc_average[0] = 0;
	//adc_average[1] = 0;
	uint16_t adc_newavg[2] = {0, 0};
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	81bb      	strh	r3, [r7, #12]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 20; i++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e01f      	b.n	800100e <HAL_ADC_ConvCpltCallback+0x56>
		// Accumulate the samples
		// Have to pre-divide so the result fits in a uint16
		adc_newavg[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	bfb8      	it	lt
 8000fd8:	425b      	neglt	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	0053      	lsls	r3, r2, #1
 8000fde:	3318      	adds	r3, #24
 8000fe0:	443b      	add	r3, r7
 8000fe2:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8000fe6:	4858      	ldr	r0, [pc, #352]	@ (8001148 <HAL_ADC_ConvCpltCallback+0x190>)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000fee:	4857      	ldr	r0, [pc, #348]	@ (800114c <HAL_ADC_ConvCpltCallback+0x194>)
 8000ff0:	fba0 0303 	umull	r0, r3, r0, r3
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	0053      	lsls	r3, r2, #1
 8000ffe:	3318      	adds	r3, #24
 8001000:	443b      	add	r3, r7
 8001002:	460a      	mov	r2, r1
 8001004:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (int i = 0; i < 20; i++) {
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2b13      	cmp	r3, #19
 8001012:	dddc      	ble.n	8000fce <HAL_ADC_ConvCpltCallback+0x16>
	}

	for (int i = 0; i < 2; i++) {
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	e081      	b.n	800111e <HAL_ADC_ConvCpltCallback+0x166>
		// Interpolate for smoother control
		adc_average[i] *= 0.4;
 800101a:	4a4d      	ldr	r2, [pc, #308]	@ (8001150 <HAL_ADC_ConvCpltCallback+0x198>)
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800102a:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8001138 <HAL_ADC_ConvCpltCallback+0x180>
 800102e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001032:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001036:	ee17 3a90 	vmov	r3, s15
 800103a:	b299      	uxth	r1, r3
 800103c:	4a44      	ldr	r2, [pc, #272]	@ (8001150 <HAL_ADC_ConvCpltCallback+0x198>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_average[i] += adc_newavg[i]*0.6;
 8001044:	4a42      	ldr	r2, [pc, #264]	@ (8001150 <HAL_ADC_ConvCpltCallback+0x198>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	3318      	adds	r3, #24
 800105a:	443b      	add	r3, r7
 800105c:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001068:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8001140 <HAL_ADC_ConvCpltCallback+0x188>
 800106c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001070:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001074:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001078:	ee17 3a90 	vmov	r3, s15
 800107c:	b299      	uxth	r1, r3
 800107e:	4a34      	ldr	r2, [pc, #208]	@ (8001150 <HAL_ADC_ConvCpltCallback+0x198>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 8001086:	4a32      	ldr	r2, [pc, #200]	@ (8001150 <HAL_ADC_ConvCpltCallback+0x198>)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800108e:	b21b      	sxth	r3, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	b29b      	uxth	r3, r3
 8001094:	0bdb      	lsrs	r3, r3, #15
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4619      	mov	r1, r3
 800109a:	4a2e      	ldr	r2, [pc, #184]	@ (8001154 <HAL_ADC_ConvCpltCallback+0x19c>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4413      	add	r3, r2
 80010a0:	460a      	mov	r2, r1
 80010a2:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 80010a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001150 <HAL_ADC_ConvCpltCallback+0x198>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ac:	09db      	lsrs	r3, r3, #7
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	b2d9      	uxtb	r1, r3
 80010b2:	4a29      	ldr	r2, [pc, #164]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4413      	add	r3, r2
 80010b8:	460a      	mov	r2, r1
 80010ba:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 80010bc:	4a25      	ldr	r2, [pc, #148]	@ (8001154 <HAL_ADC_ConvCpltCallback+0x19c>)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00a      	beq.n	80010de <HAL_ADC_ConvCpltCallback+0x126>
 80010c8:	4a23      	ldr	r2, [pc, #140]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	b2d9      	uxtb	r1, r3
 80010d4:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4413      	add	r3, r2
 80010da:	460a      	mov	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 80010de:	4a1e      	ldr	r2, [pc, #120]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4413      	add	r3, r2
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <HAL_ADC_ConvCpltCallback+0x1a4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d204      	bcs.n	80010f8 <HAL_ADC_ConvCpltCallback+0x140>
			slider_magnitude[i] = 0;
 80010ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4413      	add	r3, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 80010f8:	4a17      	ldr	r2, [pc, #92]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4413      	add	r3, r2
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800110a:	429a      	cmp	r2, r3
 800110c:	dd04      	ble.n	8001118 <HAL_ADC_ConvCpltCallback+0x160>
				slider_magnitude[i] = 0xFF;
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4413      	add	r3, r2
 8001114:	22ff      	movs	r2, #255	@ 0xff
 8001116:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	3301      	adds	r3, #1
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	2b01      	cmp	r3, #1
 8001122:	f77f af7a 	ble.w	800101a <HAL_ADC_ConvCpltCallback+0x62>

	}
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	f3af 8000 	nop.w
 8001138:	9999999a 	.word	0x9999999a
 800113c:	3fd99999 	.word	0x3fd99999
 8001140:	33333333 	.word	0x33333333
 8001144:	3fe33333 	.word	0x3fe33333
 8001148:	24026750 	.word	0x24026750
 800114c:	cccccccd 	.word	0xcccccccd
 8001150:	24026778 	.word	0x24026778
 8001154:	24026780 	.word	0x24026780
 8001158:	2402677c 	.word	0x2402677c
 800115c:	24000000 	.word	0x24000000
 8001160:	24000001 	.word	0x24000001
 8001164:	00000000 	.word	0x00000000

08001168 <Draw_Slider>:

// ------------------------------------------------------------ DRAW COMMANDS -- //
void Draw_Slider(uint8_t slider_id) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b08e      	sub	sp, #56	@ 0x38
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	uint8_t byte_sel = slider_magnitude[slider_id] >> 5;					// Byte threshold
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4a9a      	ldr	r2, [pc, #616]	@ (80013e0 <Draw_Slider+0x278>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	095b      	lsrs	r3, r3, #5
 800117a:	77fb      	strb	r3, [r7, #31]
	uint8_t bit_sel = (slider_magnitude[slider_id] >> 2) & 0b00000111;		// Partial byte threshold
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4a98      	ldr	r2, [pc, #608]	@ (80013e0 <Draw_Slider+0x278>)
 8001180:	5cd3      	ldrb	r3, [r2, r3]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	77bb      	strb	r3, [r7, #30]
	uint8_t subbit_sel = (slider_magnitude[slider_id]) & 0b00000111;	// Fine control display
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4a94      	ldr	r2, [pc, #592]	@ (80013e0 <Draw_Slider+0x278>)
 8001190:	5cd3      	ldrb	r3, [r2, r3]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	777b      	strb	r3, [r7, #29]

	uint8_t slider_vram[8] = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]

	if (slider_direction[slider_id]) {
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4a8f      	ldr	r2, [pc, #572]	@ (80013e4 <Draw_Slider+0x27c>)
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d032      	beq.n	8001212 <Draw_Slider+0xaa>
		for (int i = 0; i < 8; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80011b0:	e02b      	b.n	800120a <Draw_Slider+0xa2>
			if (i < byte_sel) slider_vram[7-i] = 0xFF;	// Before partial byte, fill
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011b6:	429a      	cmp	r2, r3
 80011b8:	da07      	bge.n	80011ca <Draw_Slider+0x62>
 80011ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011bc:	f1c3 0307 	rsb	r3, r3, #7
 80011c0:	3338      	adds	r3, #56	@ 0x38
 80011c2:	443b      	add	r3, r7
 80011c4:	22ff      	movs	r2, #255	@ 0xff
 80011c6:	f803 2c28 	strb.w	r2, [r3, #-40]
			if (i > byte_sel) slider_vram[7-i] = 0x00;	// After partial byte, empty
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dd07      	ble.n	80011e2 <Draw_Slider+0x7a>
 80011d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d4:	f1c3 0307 	rsb	r3, r3, #7
 80011d8:	3338      	adds	r3, #56	@ 0x38
 80011da:	443b      	add	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	f803 2c28 	strb.w	r2, [r3, #-40]
			if (i == byte_sel) slider_vram[7-i] = 0xFF << (7-bit_sel);	// Partial byte
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d10c      	bne.n	8001204 <Draw_Slider+0x9c>
 80011ea:	7fbb      	ldrb	r3, [r7, #30]
 80011ec:	f1c3 0307 	rsb	r3, r3, #7
 80011f0:	22ff      	movs	r2, #255	@ 0xff
 80011f2:	409a      	lsls	r2, r3
 80011f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	3338      	adds	r3, #56	@ 0x38
 80011fe:	443b      	add	r3, r7
 8001200:	f803 2c28 	strb.w	r2, [r3, #-40]
		for (int i = 0; i < 8; i++) {
 8001204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001206:	3301      	adds	r3, #1
 8001208:	637b      	str	r3, [r7, #52]	@ 0x34
 800120a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800120c:	2b07      	cmp	r3, #7
 800120e:	ddd0      	ble.n	80011b2 <Draw_Slider+0x4a>
 8001210:	e02d      	b.n	800126e <Draw_Slider+0x106>
		}
	} else {
		for (int i = 0; i < 8; i++) {
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	@ 0x30
 8001216:	e027      	b.n	8001268 <Draw_Slider+0x100>
			if (i < byte_sel) slider_vram[i] = 0xFF;
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800121c:	429a      	cmp	r2, r3
 800121e:	da05      	bge.n	800122c <Draw_Slider+0xc4>
 8001220:	f107 0210 	add.w	r2, r7, #16
 8001224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001226:	4413      	add	r3, r2
 8001228:	22ff      	movs	r2, #255	@ 0xff
 800122a:	701a      	strb	r2, [r3, #0]
			if (i > byte_sel) slider_vram[i] = 0x00;
 800122c:	7ffb      	ldrb	r3, [r7, #31]
 800122e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001230:	429a      	cmp	r2, r3
 8001232:	dd05      	ble.n	8001240 <Draw_Slider+0xd8>
 8001234:	f107 0210 	add.w	r2, r7, #16
 8001238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800123a:	4413      	add	r3, r2
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
			if (i == byte_sel) slider_vram[i] = 0xFF >> (7-bit_sel);
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001244:	429a      	cmp	r2, r3
 8001246:	d10c      	bne.n	8001262 <Draw_Slider+0xfa>
 8001248:	7fbb      	ldrb	r3, [r7, #30]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	22ff      	movs	r2, #255	@ 0xff
 8001250:	fa42 f303 	asr.w	r3, r2, r3
 8001254:	b2d9      	uxtb	r1, r3
 8001256:	f107 0210 	add.w	r2, r7, #16
 800125a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800125c:	4413      	add	r3, r2
 800125e:	460a      	mov	r2, r1
 8001260:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8001262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001264:	3301      	adds	r3, #1
 8001266:	633b      	str	r3, [r7, #48]	@ 0x30
 8001268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800126a:	2b07      	cmp	r3, #7
 800126c:	ddd4      	ble.n	8001218 <Draw_Slider+0xb0>
		}
	}

	uint8_t slider_str[4] = {0};
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
	sprintf(slider_str, "%03d", (uint8_t)(slider_magnitude[slider_id] / 2.55));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4a5a      	ldr	r2, [pc, #360]	@ (80013e0 <Draw_Slider+0x278>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001280:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 80013d8 <Draw_Slider+0x270>
 8001284:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001288:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800128c:	edc7 7a00 	vstr	s15, [r7]
 8001290:	783b      	ldrb	r3, [r7, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4953      	ldr	r1, [pc, #332]	@ (80013e8 <Draw_Slider+0x280>)
 800129c:	4618      	mov	r0, r3
 800129e:	f015 fe25 	bl	8016eec <siprintf>

	if (slider_id == 0) {
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d148      	bne.n	800133a <Draw_Slider+0x1d2>
		uint16_t curs = 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	833b      	strh	r3, [r7, #24]
		for (int y = 0; y < 8; y++) {
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012b0:	e02f      	b.n	8001312 <Draw_Slider+0x1aa>
			for (int x = 3; x < 8; x++)
 80012b2:	2303      	movs	r3, #3
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012b6:	e00f      	b.n	80012d8 <Draw_Slider+0x170>
				ssd1_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 80012b8:	8b3a      	ldrh	r2, [r7, #24]
 80012ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012bc:	01db      	lsls	r3, r3, #7
 80012be:	441a      	add	r2, r3
 80012c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c2:	4413      	add	r3, r2
 80012c4:	f107 0110 	add.w	r1, r7, #16
 80012c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ca:	440a      	add	r2, r1
 80012cc:	7811      	ldrb	r1, [r2, #0]
 80012ce:	4a47      	ldr	r2, [pc, #284]	@ (80013ec <Draw_Slider+0x284>)
 80012d0:	54d1      	strb	r1, [r2, r3]
			for (int x = 3; x < 8; x++)
 80012d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d4:	3301      	adds	r3, #1
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012da:	2b07      	cmp	r3, #7
 80012dc:	ddec      	ble.n	80012b8 <Draw_Slider+0x150>
			ssd1_vram[curs + y*128 + 0] = 0xC0 >> subbit_sel;	// Set the fine control disp.
 80012de:	7f7b      	ldrb	r3, [r7, #29]
 80012e0:	22c0      	movs	r2, #192	@ 0xc0
 80012e2:	fa42 f103 	asr.w	r1, r2, r3
 80012e6:	8b3a      	ldrh	r2, [r7, #24]
 80012e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ea:	01db      	lsls	r3, r3, #7
 80012ec:	4413      	add	r3, r2
 80012ee:	b2c9      	uxtb	r1, r1
 80012f0:	4a3e      	ldr	r2, [pc, #248]	@ (80013ec <Draw_Slider+0x284>)
 80012f2:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[curs + y*128 + 1] = 0xC0 >> subbit_sel;
 80012f4:	7f7b      	ldrb	r3, [r7, #29]
 80012f6:	22c0      	movs	r2, #192	@ 0xc0
 80012f8:	fa42 f103 	asr.w	r1, r2, r3
 80012fc:	8b3a      	ldrh	r2, [r7, #24]
 80012fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001300:	01db      	lsls	r3, r3, #7
 8001302:	4413      	add	r3, r2
 8001304:	3301      	adds	r3, #1
 8001306:	b2c9      	uxtb	r1, r1
 8001308:	4a38      	ldr	r2, [pc, #224]	@ (80013ec <Draw_Slider+0x284>)
 800130a:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 800130c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800130e:	3301      	adds	r3, #1
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001314:	2b07      	cmp	r3, #7
 8001316:	ddcc      	ble.n	80012b2 <Draw_Slider+0x14a>
		}
		hssd1.str_cursor = 9;
 8001318:	4b35      	ldr	r3, [pc, #212]	@ (80013f0 <Draw_Slider+0x288>)
 800131a:	2209      	movs	r2, #9
 800131c:	821a      	strh	r2, [r3, #16]
		SSD1306_DrawString(&hssd1, slider_str, strlen(slider_str));
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ffdc 	bl	80002e0 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	b2da      	uxtb	r2, r3
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	4619      	mov	r1, r3
 8001332:	482f      	ldr	r0, [pc, #188]	@ (80013f0 <Draw_Slider+0x288>)
 8001334:	f000 feac 	bl	8002090 <SSD1306_DrawString>
			ssd2_vram[curs + y*128 + 7] = 0xC0 >> subbit_sel;
		}
		hssd2.str_cursor = 100;
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
	}
}
 8001338:	e048      	b.n	80013cc <Draw_Slider+0x264>
		uint16_t curs = 120;
 800133a:	2378      	movs	r3, #120	@ 0x78
 800133c:	837b      	strh	r3, [r7, #26]
		for (int y = 0; y < 8; y++) {
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
 8001342:	e030      	b.n	80013a6 <Draw_Slider+0x23e>
			for (int x = 0; x < 5; x++)
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
 8001348:	e00f      	b.n	800136a <Draw_Slider+0x202>
				ssd2_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 800134a:	8b7a      	ldrh	r2, [r7, #26]
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	01db      	lsls	r3, r3, #7
 8001350:	441a      	add	r2, r3
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	4413      	add	r3, r2
 8001356:	f107 0110 	add.w	r1, r7, #16
 800135a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800135c:	440a      	add	r2, r1
 800135e:	7811      	ldrb	r1, [r2, #0]
 8001360:	4a24      	ldr	r2, [pc, #144]	@ (80013f4 <Draw_Slider+0x28c>)
 8001362:	54d1      	strb	r1, [r2, r3]
			for (int x = 0; x < 5; x++)
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	3301      	adds	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	2b04      	cmp	r3, #4
 800136e:	ddec      	ble.n	800134a <Draw_Slider+0x1e2>
			ssd2_vram[curs + y*128 + 6] = 0xC0 >> subbit_sel;	// Set the fine control disp.
 8001370:	7f7b      	ldrb	r3, [r7, #29]
 8001372:	22c0      	movs	r2, #192	@ 0xc0
 8001374:	fa42 f103 	asr.w	r1, r2, r3
 8001378:	8b7a      	ldrh	r2, [r7, #26]
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	01db      	lsls	r3, r3, #7
 800137e:	4413      	add	r3, r2
 8001380:	3306      	adds	r3, #6
 8001382:	b2c9      	uxtb	r1, r1
 8001384:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <Draw_Slider+0x28c>)
 8001386:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[curs + y*128 + 7] = 0xC0 >> subbit_sel;
 8001388:	7f7b      	ldrb	r3, [r7, #29]
 800138a:	22c0      	movs	r2, #192	@ 0xc0
 800138c:	fa42 f103 	asr.w	r1, r2, r3
 8001390:	8b7a      	ldrh	r2, [r7, #26]
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	01db      	lsls	r3, r3, #7
 8001396:	4413      	add	r3, r2
 8001398:	3307      	adds	r3, #7
 800139a:	b2c9      	uxtb	r1, r1
 800139c:	4a15      	ldr	r2, [pc, #84]	@ (80013f4 <Draw_Slider+0x28c>)
 800139e:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	3301      	adds	r3, #1
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	ddcb      	ble.n	8001344 <Draw_Slider+0x1dc>
		hssd2.str_cursor = 100;
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <Draw_Slider+0x290>)
 80013ae:	2264      	movs	r2, #100	@ 0x64
 80013b0:	821a      	strh	r2, [r3, #16]
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7fe ff92 	bl	80002e0 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <Draw_Slider+0x290>)
 80013c8:	f000 fe62 	bl	8002090 <SSD1306_DrawString>
}
 80013cc:	bf00      	nop
 80013ce:	3738      	adds	r7, #56	@ 0x38
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	f3af 8000 	nop.w
 80013d8:	66666666 	.word	0x66666666
 80013dc:	40046666 	.word	0x40046666
 80013e0:	2402677c 	.word	0x2402677c
 80013e4:	24026780 	.word	0x24026780
 80013e8:	08017898 	.word	0x08017898
 80013ec:	240006d4 	.word	0x240006d4
 80013f0:	240006ac 	.word	0x240006ac
 80013f4:	24000ad4 	.word	0x24000ad4
 80013f8:	240006c0 	.word	0x240006c0

080013fc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800140e:	f002 fc13 	bl	8003c38 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001412:	2301      	movs	r3, #1
 8001414:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001416:	2300      	movs	r3, #0
 8001418:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800141e:	231f      	movs	r3, #31
 8001420:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001422:	2387      	movs	r3, #135	@ 0x87
 8001424:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001426:	2300      	movs	r3, #0
 8001428:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800142a:	2300      	movs	r3, #0
 800142c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800142e:	2301      	movs	r3, #1
 8001430:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001432:	2301      	movs	r3, #1
 8001434:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800143e:	463b      	mov	r3, r7
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fc31 	bl	8003ca8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001446:	2004      	movs	r0, #4
 8001448:	f002 fc0e 	bl	8003c68 <HAL_MPU_Enable>

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <Error_Handler+0x8>

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_MspInit+0x30>)
 8001468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800146c:	4a08      	ldr	r2, [pc, #32]	@ (8001490 <HAL_MspInit+0x30>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_MspInit+0x30>)
 8001478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	58024400 	.word	0x58024400

08001494 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a3e      	ldr	r2, [pc, #248]	@ (80015ac <HAL_ADC_MspInit+0x118>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d175      	bne.n	80015a2 <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014b6:	4b3e      	ldr	r3, [pc, #248]	@ (80015b0 <HAL_ADC_MspInit+0x11c>)
 80014b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014bc:	4a3c      	ldr	r2, [pc, #240]	@ (80015b0 <HAL_ADC_MspInit+0x11c>)
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014c6:	4b3a      	ldr	r3, [pc, #232]	@ (80015b0 <HAL_ADC_MspInit+0x11c>)
 80014c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b36      	ldr	r3, [pc, #216]	@ (80015b0 <HAL_ADC_MspInit+0x11c>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014da:	4a35      	ldr	r2, [pc, #212]	@ (80015b0 <HAL_ADC_MspInit+0x11c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e4:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <HAL_ADC_MspInit+0x11c>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	4b2f      	ldr	r3, [pc, #188]	@ (80015b0 <HAL_ADC_MspInit+0x11c>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f8:	4a2d      	ldr	r2, [pc, #180]	@ (80015b0 <HAL_ADC_MspInit+0x11c>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001502:	4b2b      	ldr	r3, [pc, #172]	@ (80015b0 <HAL_ADC_MspInit+0x11c>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 8001510:	2340      	movs	r3, #64	@ 0x40
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001514:	2303      	movs	r3, #3
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4824      	ldr	r0, [pc, #144]	@ (80015b4 <HAL_ADC_MspInit+0x120>)
 8001524:	f005 fa56 	bl	80069d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8001528:	2310      	movs	r3, #16
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152c:	2303      	movs	r3, #3
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	481f      	ldr	r0, [pc, #124]	@ (80015b8 <HAL_ADC_MspInit+0x124>)
 800153c:	f005 fa4a 	bl	80069d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001540:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 8001542:	4a1f      	ldr	r2, [pc, #124]	@ (80015c0 <HAL_ADC_MspInit+0x12c>)
 8001544:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001546:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 8001548:	2209      	movs	r2, #9
 800154a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154c:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001552:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001558:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 800155a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800155e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 8001562:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001566:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 800156a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800156e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001570:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 8001572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001576:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 800157a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800157e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001580:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001586:	480d      	ldr	r0, [pc, #52]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 8001588:	f002 fbce 	bl	8003d28 <HAL_DMA_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001592:	f7ff ff5f 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a08      	ldr	r2, [pc, #32]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 800159a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800159c:	4a07      	ldr	r2, [pc, #28]	@ (80015bc <HAL_ADC_MspInit+0x128>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	@ 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40022000 	.word	0x40022000
 80015b0:	58024400 	.word	0x58024400
 80015b4:	58020000 	.word	0x58020000
 80015b8:	58020800 	.word	0x58020800
 80015bc:	240001d8 	.word	0x240001d8
 80015c0:	40020010 	.word	0x40020010

080015c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a73      	ldr	r2, [pc, #460]	@ (80017b0 <HAL_I2C_MspInit+0x1ec>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d16d      	bne.n	80016c2 <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4b73      	ldr	r3, [pc, #460]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ec:	4a71      	ldr	r2, [pc, #452]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015f6:	4b6f      	ldr	r3, [pc, #444]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001604:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160a:	2312      	movs	r3, #18
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001616:	2304      	movs	r3, #4
 8001618:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4865      	ldr	r0, [pc, #404]	@ (80017b8 <HAL_I2C_MspInit+0x1f4>)
 8001622:	f005 f9d7 	bl	80069d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001626:	4b63      	ldr	r3, [pc, #396]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 8001628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800162c:	4a61      	ldr	r2, [pc, #388]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 800162e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001632:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001636:	4b5f      	ldr	r3, [pc, #380]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 8001638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800163c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001644:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 8001646:	4a5e      	ldr	r2, [pc, #376]	@ (80017c0 <HAL_I2C_MspInit+0x1fc>)
 8001648:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800164a:	4b5c      	ldr	r3, [pc, #368]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 800164c:	2222      	movs	r2, #34	@ 0x22
 800164e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001650:	4b5a      	ldr	r3, [pc, #360]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 8001652:	2240      	movs	r2, #64	@ 0x40
 8001654:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001656:	4b59      	ldr	r3, [pc, #356]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 8001658:	2200      	movs	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800165c:	4b57      	ldr	r3, [pc, #348]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 800165e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001662:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001664:	4b55      	ldr	r3, [pc, #340]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800166a:	4b54      	ldr	r3, [pc, #336]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001670:	4b52      	ldr	r3, [pc, #328]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001676:	4b51      	ldr	r3, [pc, #324]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 8001678:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800167c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800167e:	4b4f      	ldr	r3, [pc, #316]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001684:	484d      	ldr	r0, [pc, #308]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 8001686:	f002 fb4f 	bl	8003d28 <HAL_DMA_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001690:	f7ff fee0 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a49      	ldr	r2, [pc, #292]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 8001698:	639a      	str	r2, [r3, #56]	@ 0x38
 800169a:	4a48      	ldr	r2, [pc, #288]	@ (80017bc <HAL_I2C_MspInit+0x1f8>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	201f      	movs	r0, #31
 80016a6:	f002 fa92 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016aa:	201f      	movs	r0, #31
 80016ac:	f002 faa9 	bl	8003c02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2020      	movs	r0, #32
 80016b6:	f002 fa8a 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016ba:	2020      	movs	r0, #32
 80016bc:	f002 faa1 	bl	8003c02 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016c0:	e071      	b.n	80017a6 <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a3f      	ldr	r2, [pc, #252]	@ (80017c4 <HAL_I2C_MspInit+0x200>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d16c      	bne.n	80017a6 <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b39      	ldr	r3, [pc, #228]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d2:	4a38      	ldr	r2, [pc, #224]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016dc:	4b35      	ldr	r3, [pc, #212]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f0:	2312      	movs	r3, #18
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016fc:	2304      	movs	r3, #4
 80016fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	482c      	ldr	r0, [pc, #176]	@ (80017b8 <HAL_I2C_MspInit+0x1f4>)
 8001708:	f005 f964 	bl	80069d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800170c:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 800170e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001712:	4a28      	ldr	r2, [pc, #160]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 8001714:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001718:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800171c:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <HAL_I2C_MspInit+0x1f0>)
 800171e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 800172a:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 800172c:	4a27      	ldr	r2, [pc, #156]	@ (80017cc <HAL_I2C_MspInit+0x208>)
 800172e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001730:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 8001732:	2224      	movs	r2, #36	@ 0x24
 8001734:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001736:	4b24      	ldr	r3, [pc, #144]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 8001738:	2240      	movs	r2, #64	@ 0x40
 800173a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800173c:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001742:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 8001744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001748:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800174a:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001750:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800175c:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 800175e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001762:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800176a:	4817      	ldr	r0, [pc, #92]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 800176c:	f002 fadc 	bl	8003d28 <HAL_DMA_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 8001776:	f7ff fe6d 	bl	8001454 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 800177e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001780:	4a11      	ldr	r2, [pc, #68]	@ (80017c8 <HAL_I2C_MspInit+0x204>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2021      	movs	r0, #33	@ 0x21
 800178c:	f002 fa1f 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001790:	2021      	movs	r0, #33	@ 0x21
 8001792:	f002 fa36 	bl	8003c02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2022      	movs	r0, #34	@ 0x22
 800179c:	f002 fa17 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80017a0:	2022      	movs	r0, #34	@ 0x22
 80017a2:	f002 fa2e 	bl	8003c02 <HAL_NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3730      	adds	r7, #48	@ 0x30
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40005400 	.word	0x40005400
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58020400 	.word	0x58020400
 80017bc:	240002f8 	.word	0x240002f8
 80017c0:	40020040 	.word	0x40020040
 80017c4:	40005800 	.word	0x40005800
 80017c8:	24000370 	.word	0x24000370
 80017cc:	40020028 	.word	0x40020028

080017d0 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a55      	ldr	r2, [pc, #340]	@ (8001934 <HAL_JPEG_MspInit+0x164>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	f040 80a3 	bne.w	800192a <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80017e4:	4b54      	ldr	r3, [pc, #336]	@ (8001938 <HAL_JPEG_MspInit+0x168>)
 80017e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017ea:	4a53      	ldr	r2, [pc, #332]	@ (8001938 <HAL_JPEG_MspInit+0x168>)
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80017f4:	4b50      	ldr	r3, [pc, #320]	@ (8001938 <HAL_JPEG_MspInit+0x168>)
 80017f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001802:	4b4e      	ldr	r3, [pc, #312]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001804:	4a4e      	ldr	r2, [pc, #312]	@ (8001940 <HAL_JPEG_MspInit+0x170>)
 8001806:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001808:	4b4c      	ldr	r3, [pc, #304]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 800180a:	2211      	movs	r2, #17
 800180c:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800180e:	4b4b      	ldr	r3, [pc, #300]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001814:	4b49      	ldr	r3, [pc, #292]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001816:	2240      	movs	r2, #64	@ 0x40
 8001818:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800181a:	4b48      	ldr	r3, [pc, #288]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001820:	4b46      	ldr	r3, [pc, #280]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001822:	2202      	movs	r2, #2
 8001824:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001826:	4b45      	ldr	r3, [pc, #276]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 800182c:	4b43      	ldr	r3, [pc, #268]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001832:	4b42      	ldr	r3, [pc, #264]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001834:	2280      	movs	r2, #128	@ 0x80
 8001836:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001838:	4b40      	ldr	r3, [pc, #256]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 800183a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800183e:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001840:	4b3e      	ldr	r3, [pc, #248]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001842:	2220      	movs	r2, #32
 8001844:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001846:	4b3d      	ldr	r3, [pc, #244]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001848:	2200      	movs	r2, #0
 800184a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800184c:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 800184e:	2200      	movs	r2, #0
 8001850:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001852:	4b3a      	ldr	r3, [pc, #232]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001854:	2200      	movs	r2, #0
 8001856:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001858:	4b38      	ldr	r3, [pc, #224]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 800185a:	2200      	movs	r2, #0
 800185c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800185e:	4837      	ldr	r0, [pc, #220]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001860:	f009 fb3c 	bl	800aedc <HAL_MDMA_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 800186a:	f7ff fdf3 	bl	8001454 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	4832      	ldr	r0, [pc, #200]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001874:	f009 fb7e 	bl	800af74 <HAL_MDMA_ConfigPostRequestMask>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 800187e:	f7ff fde9 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a2d      	ldr	r2, [pc, #180]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 8001886:	631a      	str	r2, [r3, #48]	@ 0x30
 8001888:	4a2c      	ldr	r2, [pc, #176]	@ (800193c <HAL_JPEG_MspInit+0x16c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 800188e:	4b2d      	ldr	r3, [pc, #180]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 8001890:	4a2d      	ldr	r2, [pc, #180]	@ (8001948 <HAL_JPEG_MspInit+0x178>)
 8001892:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001894:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 8001896:	2214      	movs	r2, #20
 8001898:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800189a:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80018a0:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018a2:	2240      	movs	r2, #64	@ 0x40
 80018a4:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80018a6:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80018ac:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80018b2:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018b4:	2208      	movs	r2, #8
 80018b6:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80018b8:	4b22      	ldr	r3, [pc, #136]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018ba:	2220      	movs	r2, #32
 80018bc:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80018be:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80018c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018ce:	2204      	movs	r2, #4
 80018d0:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80018d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018da:	2200      	movs	r2, #0
 80018dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 80018de:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 80018e4:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 80018ea:	4816      	ldr	r0, [pc, #88]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 80018ec:	f009 faf6 	bl	800aedc <HAL_MDMA_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 80018f6:	f7ff fdad 	bl	8001454 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	4811      	ldr	r0, [pc, #68]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 8001900:	f009 fb38 	bl	800af74 <HAL_MDMA_ConfigPostRequestMask>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 800190a:	f7ff fda3 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 8001912:	635a      	str	r2, [r3, #52]	@ 0x34
 8001914:	4a0b      	ldr	r2, [pc, #44]	@ (8001944 <HAL_JPEG_MspInit+0x174>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2079      	movs	r0, #121	@ 0x79
 8001920:	f002 f955 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001924:	2079      	movs	r0, #121	@ 0x79
 8001926:	f002 f96c 	bl	8003c02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	52003000 	.word	0x52003000
 8001938:	58024400 	.word	0x58024400
 800193c:	24000440 	.word	0x24000440
 8001940:	52000040 	.word	0x52000040
 8001944:	240004ac 	.word	0x240004ac
 8001948:	52000080 	.word	0x52000080

0800194c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	@ 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a35      	ldr	r2, [pc, #212]	@ (8001a40 <HAL_SPI_MspInit+0xf4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d163      	bne.n	8001a36 <HAL_SPI_MspInit+0xea>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800196e:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <HAL_SPI_MspInit+0xf8>)
 8001970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001974:	4a33      	ldr	r2, [pc, #204]	@ (8001a44 <HAL_SPI_MspInit+0xf8>)
 8001976:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800197a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <HAL_SPI_MspInit+0xf8>)
 8001980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800198c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <HAL_SPI_MspInit+0xf8>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001992:	4a2c      	ldr	r2, [pc, #176]	@ (8001a44 <HAL_SPI_MspInit+0xf8>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800199c:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <HAL_SPI_MspInit+0xf8>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80019aa:	2344      	movs	r3, #68	@ 0x44
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80019ba:	2305      	movs	r3, #5
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4820      	ldr	r0, [pc, #128]	@ (8001a48 <HAL_SPI_MspInit+0xfc>)
 80019c6:	f005 f805 	bl	80069d4 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream0;
 80019ca:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 80019cc:	4a20      	ldr	r2, [pc, #128]	@ (8001a50 <HAL_SPI_MspInit+0x104>)
 80019ce:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80019d0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 80019d2:	2254      	movs	r2, #84	@ 0x54
 80019d4:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 80019d8:	2240      	movs	r2, #64	@ 0x40
 80019da:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 80019e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e8:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ea:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f0:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 80019fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a02:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001a0a:	4810      	ldr	r0, [pc, #64]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 8001a0c:	f002 f98c 	bl	8003d28 <HAL_DMA_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001a16:	f7ff fd1d 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 8001a1e:	679a      	str	r2, [r3, #120]	@ 0x78
 8001a20:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <HAL_SPI_MspInit+0x100>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2054      	movs	r0, #84	@ 0x54
 8001a2c:	f002 f8cf 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001a30:	2054      	movs	r0, #84	@ 0x54
 8001a32:	f002 f8e6 	bl	8003c02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	@ 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40013400 	.word	0x40013400
 8001a44:	58024400 	.word	0x58024400
 8001a48:	58021000 	.word	0x58021000
 8001a4c:	240005a0 	.word	0x240005a0
 8001a50:	40020410 	.word	0x40020410

08001a54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b0ba      	sub	sp, #232	@ 0xe8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	22c0      	movs	r2, #192	@ 0xc0
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f015 fa5b 	bl	8016f30 <memset>
  if(huart->Instance==USART1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001b2c <HAL_UART_MspInit+0xd8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d14e      	bne.n	8001b22 <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a84:	f04f 0201 	mov.w	r2, #1
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00b ffa0 	bl	800d9e0 <HAL_RCCEx_PeriphCLKConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001aa6:	f7ff fcd5 	bl	8001454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aaa:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <HAL_UART_MspInit+0xdc>)
 8001aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b30 <HAL_UART_MspInit+0xdc>)
 8001ab2:	f043 0310 	orr.w	r3, r3, #16
 8001ab6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001aba:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <HAL_UART_MspInit+0xdc>)
 8001abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_UART_MspInit+0xdc>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ace:	4a18      	ldr	r2, [pc, #96]	@ (8001b30 <HAL_UART_MspInit+0xdc>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad8:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <HAL_UART_MspInit+0xdc>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ae6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001aea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001b00:	2304      	movs	r3, #4
 8001b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4809      	ldr	r0, [pc, #36]	@ (8001b34 <HAL_UART_MspInit+0xe0>)
 8001b0e:	f004 ff61 	bl	80069d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2025      	movs	r0, #37	@ 0x25
 8001b18:	f002 f859 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b1c:	2025      	movs	r0, #37	@ 0x25
 8001b1e:	f002 f870 	bl	8003c02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b22:	bf00      	nop
 8001b24:	37e8      	adds	r7, #232	@ 0xe8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40011000 	.word	0x40011000
 8001b30:	58024400 	.word	0x58024400
 8001b34:	58020400 	.word	0x58020400

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8e:	f000 fc41 	bl	8002414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <DMA1_Stream0_IRQHandler+0x10>)
 8001b9e:	f003 fbed 	bl	800537c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	240001d8 	.word	0x240001d8

08001bac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <DMA1_Stream1_IRQHandler+0x10>)
 8001bb2:	f003 fbe3 	bl	800537c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	24000370 	.word	0x24000370

08001bc0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001bc4:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <DMA1_Stream2_IRQHandler+0x10>)
 8001bc6:	f003 fbd9 	bl	800537c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	240002f8 	.word	0x240002f8

08001bd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <I2C1_EV_IRQHandler+0x10>)
 8001bda:	f005 fb8d 	bl	80072f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	24000250 	.word	0x24000250

08001be8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <I2C1_ER_IRQHandler+0x10>)
 8001bee:	f005 fb9d 	bl	800732c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	24000250 	.word	0x24000250

08001bfc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001c00:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <I2C2_EV_IRQHandler+0x10>)
 8001c02:	f005 fb79 	bl	80072f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	240002a4 	.word	0x240002a4

08001c10 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <I2C2_ER_IRQHandler+0x10>)
 8001c16:	f005 fb89 	bl	800732c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	240002a4 	.word	0x240002a4

08001c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <USART1_IRQHandler+0x10>)
 8001c2a:	f00f fbdd 	bl	80113e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	24000618 	.word	0x24000618

08001c38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <DMA2_Stream0_IRQHandler+0x10>)
 8001c3e:	f003 fb9d 	bl	800537c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	240005a0 	.word	0x240005a0

08001c4c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <SPI4_IRQHandler+0x10>)
 8001c52:	f00f f817 	bl	8010c84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	24000518 	.word	0x24000518

08001c60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <OTG_FS_IRQHandler+0x10>)
 8001c66:	f009 fd2c 	bl	800b6c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	24027c70 	.word	0x24027c70

08001c74 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <JPEG_IRQHandler+0x10>)
 8001c7a:	f007 feec 	bl	8009a56 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	240003e8 	.word	0x240003e8

08001c88 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001c8c:	4803      	ldr	r0, [pc, #12]	@ (8001c9c <MDMA_IRQHandler+0x14>)
 8001c8e:	f009 f9eb 	bl	800b068 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8001c92:	4803      	ldr	r0, [pc, #12]	@ (8001ca0 <MDMA_IRQHandler+0x18>)
 8001c94:	f009 f9e8 	bl	800b068 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	24000440 	.word	0x24000440
 8001ca0:	240004ac 	.word	0x240004ac

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <_sbrk+0x5c>)
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <_sbrk+0x60>)
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <_sbrk+0x64>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <_sbrk+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d207      	bcs.n	8001ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd4:	f015 f934 	bl	8016f40 <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	220c      	movs	r2, #12
 8001cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	e009      	b.n	8001cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a05      	ldr	r2, [pc, #20]	@ (8001d08 <_sbrk+0x64>)
 8001cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	24080000 	.word	0x24080000
 8001d04:	00000400 	.word	0x00000400
 8001d08:	24026784 	.word	0x24026784
 8001d0c:	240284c0 	.word	0x240284c0

08001d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d14:	4b43      	ldr	r3, [pc, #268]	@ (8001e24 <SystemInit+0x114>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d1a:	4a42      	ldr	r2, [pc, #264]	@ (8001e24 <SystemInit+0x114>)
 8001d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d24:	4b40      	ldr	r3, [pc, #256]	@ (8001e28 <SystemInit+0x118>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	2b06      	cmp	r3, #6
 8001d2e:	d807      	bhi.n	8001d40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d30:	4b3d      	ldr	r3, [pc, #244]	@ (8001e28 <SystemInit+0x118>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 030f 	bic.w	r3, r3, #15
 8001d38:	4a3b      	ldr	r2, [pc, #236]	@ (8001e28 <SystemInit+0x118>)
 8001d3a:	f043 0307 	orr.w	r3, r3, #7
 8001d3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d40:	4b3a      	ldr	r3, [pc, #232]	@ (8001e2c <SystemInit+0x11c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a39      	ldr	r2, [pc, #228]	@ (8001e2c <SystemInit+0x11c>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d4c:	4b37      	ldr	r3, [pc, #220]	@ (8001e2c <SystemInit+0x11c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d52:	4b36      	ldr	r3, [pc, #216]	@ (8001e2c <SystemInit+0x11c>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4935      	ldr	r1, [pc, #212]	@ (8001e2c <SystemInit+0x11c>)
 8001d58:	4b35      	ldr	r3, [pc, #212]	@ (8001e30 <SystemInit+0x120>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d5e:	4b32      	ldr	r3, [pc, #200]	@ (8001e28 <SystemInit+0x118>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e28 <SystemInit+0x118>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 030f 	bic.w	r3, r3, #15
 8001d72:	4a2d      	ldr	r2, [pc, #180]	@ (8001e28 <SystemInit+0x118>)
 8001d74:	f043 0307 	orr.w	r3, r3, #7
 8001d78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e2c <SystemInit+0x11c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d80:	4b2a      	ldr	r3, [pc, #168]	@ (8001e2c <SystemInit+0x11c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d86:	4b29      	ldr	r3, [pc, #164]	@ (8001e2c <SystemInit+0x11c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d8c:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <SystemInit+0x11c>)
 8001d8e:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <SystemInit+0x124>)
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d92:	4b26      	ldr	r3, [pc, #152]	@ (8001e2c <SystemInit+0x11c>)
 8001d94:	4a28      	ldr	r2, [pc, #160]	@ (8001e38 <SystemInit+0x128>)
 8001d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d98:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <SystemInit+0x11c>)
 8001d9a:	4a28      	ldr	r2, [pc, #160]	@ (8001e3c <SystemInit+0x12c>)
 8001d9c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d9e:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <SystemInit+0x11c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001da4:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <SystemInit+0x11c>)
 8001da6:	4a25      	ldr	r2, [pc, #148]	@ (8001e3c <SystemInit+0x12c>)
 8001da8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <SystemInit+0x11c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001db0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <SystemInit+0x11c>)
 8001db2:	4a22      	ldr	r2, [pc, #136]	@ (8001e3c <SystemInit+0x12c>)
 8001db4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001db6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e2c <SystemInit+0x11c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <SystemInit+0x11c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e2c <SystemInit+0x11c>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <SystemInit+0x11c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <SystemInit+0x130>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <SystemInit+0x134>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dda:	d202      	bcs.n	8001de2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <SystemInit+0x138>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001de2:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <SystemInit+0x11c>)
 8001de4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d113      	bne.n	8001e18 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <SystemInit+0x11c>)
 8001df2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001df6:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <SystemInit+0x11c>)
 8001df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dfc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <SystemInit+0x13c>)
 8001e02:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e06:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <SystemInit+0x11c>)
 8001e0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e0e:	4a07      	ldr	r2, [pc, #28]	@ (8001e2c <SystemInit+0x11c>)
 8001e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e14:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00
 8001e28:	52002000 	.word	0x52002000
 8001e2c:	58024400 	.word	0x58024400
 8001e30:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e34:	02020200 	.word	0x02020200
 8001e38:	01ff0000 	.word	0x01ff0000
 8001e3c:	01010280 	.word	0x01010280
 8001e40:	5c001000 	.word	0x5c001000
 8001e44:	ffff0000 	.word	0xffff0000
 8001e48:	51008108 	.word	0x51008108
 8001e4c:	52004000 	.word	0x52004000

08001e50 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001e54:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <ExitRun0Mode+0x2c>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a08      	ldr	r2, [pc, #32]	@ (8001e7c <ExitRun0Mode+0x2c>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001e60:	bf00      	nop
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <ExitRun0Mode+0x2c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f9      	beq.n	8001e62 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	58024800 	.word	0x58024800

08001e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e80:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001ebc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001e84:	f7ff ffe4 	bl	8001e50 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e88:	f7ff ff42 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e8c:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e8e:	490d      	ldr	r1, [pc, #52]	@ (8001ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f015 f84b 	bl	8016f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eb6:	f7fe fc01 	bl	80006bc <main>
  bx  lr
 8001eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ebc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ec0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ec4:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 8001ec8:	08017e84 	.word	0x08017e84
  ldr r2, =_sbss
 8001ecc:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8001ed0:	240284bc 	.word	0x240284bc

08001ed4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC3_IRQHandler>

08001ed6 <SSD1306_SendCommand>:
    0x06, 0x00, 0b00010000, 0b00001000, 0b00010000, 0b00100000, 0b00010000, 0x00  // ------ 126 - ~
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af02      	add	r7, sp, #8
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	733b      	strb	r3, [r7, #12]
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	791b      	ldrb	r3, [r3, #4]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	b299      	uxth	r1, r3
 8001ef6:	f107 020c 	add.w	r2, r7, #12
 8001efa:	2364      	movs	r3, #100	@ 0x64
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2302      	movs	r3, #2
 8001f00:	f004 ffce 	bl	8006ea0 <HAL_I2C_Master_Transmit>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <SSD1306_SendCommand+0x38>
		return ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8001f30:	2312      	movs	r3, #18
 8001f32:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8001f34:	2301      	movs	r3, #1
 8001f36:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8001f38:	e02c      	b.n	8001f94 <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8001f3a:	897b      	ldrh	r3, [r7, #10]
 8001f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa8 <SSD1306_Init+0x90>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 8001f42:	897b      	ldrh	r3, [r7, #10]
 8001f44:	3301      	adds	r3, #1
 8001f46:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8001f48:	897b      	ldrh	r3, [r7, #10]
 8001f4a:	4a17      	ldr	r2, [pc, #92]	@ (8001fa8 <SSD1306_Init+0x90>)
 8001f4c:	5cd3      	ldrb	r3, [r2, r3]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ffc0 	bl	8001ed6 <SSD1306_SendCommand>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <SSD1306_Init+0x4a>
 8001f5c:	897b      	ldrh	r3, [r7, #10]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	e01e      	b.n	8001fa0 <SSD1306_Init+0x88>
	        cmd_idx++;
 8001f62:	897b      	ldrh	r3, [r7, #10]
 8001f64:	3301      	adds	r3, #1
 8001f66:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8001f68:	e00f      	b.n	8001f8a <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8001f6a:	897b      	ldrh	r3, [r7, #10]
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa8 <SSD1306_Init+0x90>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffaf 	bl	8001ed6 <SSD1306_SendCommand>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <SSD1306_Init+0x6c>
 8001f7e:	897b      	ldrh	r3, [r7, #10]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e00d      	b.n	8001fa0 <SSD1306_Init+0x88>
	            cmd_idx++;
 8001f84:	897b      	ldrh	r3, [r7, #10]
 8001f86:	3301      	adds	r3, #1
 8001f88:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 8001f8a:	89bb      	ldrh	r3, [r7, #12]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	81ba      	strh	r2, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ea      	bne.n	8001f6a <SSD1306_Init+0x52>
	while (n_commands--) {
 8001f94:	89fb      	ldrh	r3, [r7, #14]
 8001f96:	1e5a      	subs	r2, r3, #1
 8001f98:	81fa      	strh	r2, [r7, #14]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1cd      	bne.n	8001f3a <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	080178f8 	.word	0x080178f8

08001fac <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f014 ffb3 	bl	8016f30 <memset>
	return 0;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2240      	movs	r2, #64	@ 0x40
 8001fe2:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	791b      	ldrb	r3, [r3, #4]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	b299      	uxth	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	f240 4301 	movw	r3, #1025	@ 0x401
 8001ff8:	f005 f86a 	bl	80070d0 <HAL_I2C_Master_Transmit_DMA>
 8001ffc:	4603      	mov	r3, r0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
	if (ch < 32 || ch > 126) return ERROR;	// char is unable to be rendered
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	2b1f      	cmp	r3, #31
 8002018:	d902      	bls.n	8002020 <SSD1306_DrawChar+0x18>
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	2b7e      	cmp	r3, #126	@ 0x7e
 800201e:	d901      	bls.n	8002024 <SSD1306_DrawChar+0x1c>
 8002020:	2301      	movs	r3, #1
 8002022:	e02e      	b.n	8002082 <SSD1306_DrawChar+0x7a>
	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	3b20      	subs	r3, #32
 8002028:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	2b60      	cmp	r3, #96	@ 0x60
 800202e:	d906      	bls.n	800203e <SSD1306_DrawChar+0x36>
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	2b7a      	cmp	r3, #122	@ 0x7a
 8002034:	d803      	bhi.n	800203e <SSD1306_DrawChar+0x36>
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	3b20      	subs	r3, #32
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e005      	b.n	800204a <SSD1306_DrawChar+0x42>
	else if (ch >= 123) newC -= 26;			// remap the brace set to align with the font table
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	2b7a      	cmp	r3, #122	@ 0x7a
 8002042:	d902      	bls.n	800204a <SSD1306_DrawChar+0x42>
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	3b1a      	subs	r3, #26
 8002048:	73fb      	strb	r3, [r7, #15]

	uint8_t len = ALPHNUM[newC*8];
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4a0f      	ldr	r2, [pc, #60]	@ (800208c <SSD1306_DrawChar+0x84>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	73bb      	strb	r3, [r7, #14]
	memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	8a12      	ldrh	r2, [r2, #16]
 800205c:	1898      	adds	r0, r3, r2
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	3301      	adds	r3, #1
 8002064:	4a09      	ldr	r2, [pc, #36]	@ (800208c <SSD1306_DrawChar+0x84>)
 8002066:	4413      	add	r3, r2
 8002068:	7bba      	ldrb	r2, [r7, #14]
 800206a:	4619      	mov	r1, r3
 800206c:	f014 ff94 	bl	8016f98 <memcpy>
	hssd->str_cursor += len;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	8a1a      	ldrh	r2, [r3, #16]
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4413      	add	r3, r2
 800207a:	b29a      	uxth	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	0801792c 	.word	0x0801792c

08002090 <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	4613      	mov	r3, r2
 800209c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < length; i++) {
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]
 80020a2:	e013      	b.n	80020cc <SSD1306_DrawString+0x3c>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x06;
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	4413      	add	r3, r2
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f7ff ffaa 	bl	8002008 <SSD1306_DrawChar>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <SSD1306_DrawString+0x36>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8a1b      	ldrh	r3, [r3, #16]
 80020be:	3306      	adds	r3, #6
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	3301      	adds	r3, #1
 80020ca:	75fb      	strb	r3, [r7, #23]
 80020cc:	7dfa      	ldrb	r2, [r7, #23]
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3e7      	bcc.n	80020a4 <SSD1306_DrawString+0x14>
	}

	return SUCCESS;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->cs_gpio_handle, hst7789->cs_gpio_pin, GPIO_PIN_RESET);	// assert CS LO
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6858      	ldr	r0, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	891b      	ldrh	r3, [r3, #8]
 80020f2:	2200      	movs	r2, #0
 80020f4:	4619      	mov	r1, r3
 80020f6:	f004 fe1d 	bl	8006d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68d8      	ldr	r0, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8a1b      	ldrh	r3, [r3, #16]
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	f004 fe15 	bl	8006d34 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	1cf9      	adds	r1, r7, #3
 8002110:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002114:	2201      	movs	r2, #1
 8002116:	f00e fa85 	bl	8010624 <HAL_SPI_Transmit>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <ST7789_SendByte_Command+0x46>
		return ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <ST7789_SendByte_Command+0x48>
	return SUCCESS;
 8002124:	2300      	movs	r3, #0

	// Don't reassert CS (This is how it's done in the example code)
	// See: https://www.waveshare.com/wiki/2inch_LCD_Module#Software_description
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->cs_gpio_handle, hst7789->cs_gpio_pin, GPIO_PIN_RESET);	// assert CS LO
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6858      	ldr	r0, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	891b      	ldrh	r3, [r3, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	4619      	mov	r1, r3
 8002146:	f004 fdf5 	bl	8006d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68d8      	ldr	r0, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8a1b      	ldrh	r3, [r3, #16]
 8002152:	2201      	movs	r2, #1
 8002154:	4619      	mov	r1, r3
 8002156:	f004 fded 	bl	8006d34 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	1cf9      	adds	r1, r7, #3
 8002160:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002164:	2201      	movs	r2, #1
 8002166:	f00e fa5d 	bl	8010624 <HAL_SPI_Transmit>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <ST7789_SendByte_Data+0x46>
		return ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e008      	b.n	8002186 <ST7789_SendByte_Data+0x58>

	HAL_GPIO_WritePin(hst7789->cs_gpio_handle, hst7789->cs_gpio_pin, GPIO_PIN_SET);	// assert CS HI
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6858      	ldr	r0, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	891b      	ldrh	r3, [r3, #8]
 800217c:	2201      	movs	r2, #1
 800217e:	4619      	mov	r1, r3
 8002180:	f004 fdd8 	bl	8006d34 <HAL_GPIO_WritePin>
	return SUCCESS;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <ST7789_Init>:

	HAL_GPIO_WritePin(hst7789->cs_gpio_handle, hst7789->cs_gpio_pin, GPIO_PIN_SET);	// assert CS HI
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 8002198:	2313      	movs	r3, #19
 800219a:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 800219c:	2301      	movs	r3, #1
 800219e:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 80021a0:	e02c      	b.n	80021fc <ST7789_Init+0x6c>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 80021a2:	897b      	ldrh	r3, [r7, #10]
 80021a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002210 <ST7789_Init+0x80>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 80021aa:	897b      	ldrh	r3, [r7, #10]
 80021ac:	3301      	adds	r3, #1
 80021ae:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 80021b0:	897b      	ldrh	r3, [r7, #10]
 80021b2:	4a17      	ldr	r2, [pc, #92]	@ (8002210 <ST7789_Init+0x80>)
 80021b4:	5cd3      	ldrb	r3, [r2, r3]
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ff90 	bl	80020de <ST7789_SendByte_Command>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <ST7789_Init+0x3a>
 80021c4:	897b      	ldrh	r3, [r7, #10]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	e01e      	b.n	8002208 <ST7789_Init+0x78>
	    cmd_idx++;
 80021ca:	897b      	ldrh	r3, [r7, #10]
 80021cc:	3301      	adds	r3, #1
 80021ce:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 80021d0:	e00f      	b.n	80021f2 <ST7789_Init+0x62>
	    if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 80021d2:	897b      	ldrh	r3, [r7, #10]
 80021d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002210 <ST7789_Init+0x80>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffa7 	bl	800212e <ST7789_SendByte_Data>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <ST7789_Init+0x5c>
 80021e6:	897b      	ldrh	r3, [r7, #10]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e00d      	b.n	8002208 <ST7789_Init+0x78>
	        cmd_idx++;
 80021ec:	897b      	ldrh	r3, [r7, #10]
 80021ee:	3301      	adds	r3, #1
 80021f0:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 80021f2:	89bb      	ldrh	r3, [r7, #12]
 80021f4:	1e5a      	subs	r2, r3, #1
 80021f6:	81ba      	strh	r2, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ea      	bne.n	80021d2 <ST7789_Init+0x42>
	while (n_commands--) {
 80021fc:	89fb      	ldrh	r3, [r7, #14]
 80021fe:	1e5a      	subs	r2, r3, #1
 8002200:	81fa      	strh	r2, [r7, #14]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1cd      	bne.n	80021a2 <ST7789_Init+0x12>
	    }
	}
	return SUCCESS;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	08017b54 	.word	0x08017b54

08002214 <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	460b      	mov	r3, r1
 8002228:	813b      	strh	r3, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 800222e:	212a      	movs	r1, #42	@ 0x2a
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff ff54 	bl	80020de <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 8002236:	897b      	ldrh	r3, [r7, #10]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	b29b      	uxth	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	4619      	mov	r1, r3
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7ff ff74 	bl	800212e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 8002246:	897b      	ldrh	r3, [r7, #10]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4619      	mov	r1, r3
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7ff ff6e 	bl	800212e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	3b01      	subs	r3, #1
 8002256:	121b      	asrs	r3, r3, #8
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4619      	mov	r1, r3
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7ff ff66 	bl	800212e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7ff ff5e 	bl	800212e <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 8002272:	212b      	movs	r1, #43	@ 0x2b
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff ff32 	bl	80020de <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 800227a:	893b      	ldrh	r3, [r7, #8]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	b29b      	uxth	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4619      	mov	r1, r3
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff ff52 	bl	800212e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 800228a:	893b      	ldrh	r3, [r7, #8]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	4619      	mov	r1, r3
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7ff ff4c 	bl	800212e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 8002296:	8b3b      	ldrh	r3, [r7, #24]
 8002298:	3b01      	subs	r3, #1
 800229a:	121b      	asrs	r3, r3, #8
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff ff44 	bl	800212e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 80022a6:	8b3b      	ldrh	r3, [r7, #24]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7ff ff3c 	bl	800212e <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 80022b6:	212c      	movs	r1, #44	@ 0x2c
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7ff ff10 	bl	80020de <ST7789_SendByte_Command>
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789, uint8_t col) {
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af02      	add	r7, sp, #8
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	70fb      	strb	r3, [r7, #3]
	// fill VRAM with white
	memset(hst7789->vram, col, LCD_WIDTH*LCD_HEIGHT*4);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	78f9      	ldrb	r1, [r7, #3]
 80022d8:	f44f 2296 	mov.w	r2, #307200	@ 0x4b000
 80022dc:	4618      	mov	r0, r3
 80022de:	f014 fe27 	bl	8016f30 <memset>

	ST7789_SetWindow(hst7789, 0, 0, LCD_WIDTH, LCD_HEIGHT);
 80022e2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	23f0      	movs	r3, #240	@ 0xf0
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff90 	bl	8002214 <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);	// assert DC HI (~CMD)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68d8      	ldr	r0, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8a1b      	ldrh	r3, [r3, #16]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4619      	mov	r1, r3
 8002300:	f004 fd18 	bl	8006d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hst7789->cs_gpio_handle, hst7789->cs_gpio_pin, GPIO_PIN_RESET);	// assert CS LO
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6858      	ldr	r0, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	891b      	ldrh	r3, [r3, #8]
 800230c:	2200      	movs	r2, #0
 800230e:	4619      	mov	r1, r3
 8002310:	f004 fd10 	bl	8006d34 <HAL_GPIO_WritePin>

	// Push the screen
	//HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram, LCD_WIDTH*LCD_HEIGHT*2);
	//for(uint16_t i = 0; i < LCD_HEIGHT/64; i++){
		//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram + i*LCD_WIDTH*8, LCD_WIDTH*8, 1000);
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram, 0xFFFF);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002320:	4619      	mov	r1, r3
 8002322:	f00e fb6d 	bl	8010a00 <HAL_SPI_Transmit_DMA>
		//HAL_Delay(10);
	 //}

	//HAL_GPIO_WritePin(hst7789->cs_gpio_handle, hst7789->cs_gpio_pin, GPIO_PIN_SET);	// assert CS HI
}
 8002326:	bf00      	nop
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002336:	2003      	movs	r0, #3
 8002338:	f001 fc3e 	bl	8003bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800233c:	f00b f97a 	bl	800d634 <HAL_RCC_GetSysClockFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_Init+0x68>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	4913      	ldr	r1, [pc, #76]	@ (800239c <HAL_Init+0x6c>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800235a:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <HAL_Init+0x68>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4a0e      	ldr	r2, [pc, #56]	@ (800239c <HAL_Init+0x6c>)
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	4a0b      	ldr	r2, [pc, #44]	@ (80023a0 <HAL_Init+0x70>)
 8002372:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002374:	4a0b      	ldr	r2, [pc, #44]	@ (80023a4 <HAL_Init+0x74>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800237a:	200f      	movs	r0, #15
 800237c:	f000 f814 	bl	80023a8 <HAL_InitTick>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e002      	b.n	8002390 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800238a:	f7ff f869 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	58024400 	.word	0x58024400
 800239c:	080178e8 	.word	0x080178e8
 80023a0:	24000008 	.word	0x24000008
 80023a4:	24000004 	.word	0x24000004

080023a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023b0:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <HAL_InitTick+0x60>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e021      	b.n	8002400 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023bc:	4b13      	ldr	r3, [pc, #76]	@ (800240c <HAL_InitTick+0x64>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <HAL_InitTick+0x60>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fc23 	bl	8003c1e <HAL_SYSTICK_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e00e      	b.n	8002400 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d80a      	bhi.n	80023fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f001 fbed 	bl	8003bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f4:	4a06      	ldr	r2, [pc, #24]	@ (8002410 <HAL_InitTick+0x68>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	24000010 	.word	0x24000010
 800240c:	24000004 	.word	0x24000004
 8002410:	2400000c 	.word	0x2400000c

08002414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_IncTick+0x20>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_IncTick+0x24>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <HAL_IncTick+0x24>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	24000010 	.word	0x24000010
 8002438:	24026788 	.word	0x24026788

0800243c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <HAL_GetTick+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	24026788 	.word	0x24026788

08002454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff ffee 	bl	800243c <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d005      	beq.n	800247a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <HAL_Delay+0x44>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800247a:	bf00      	nop
 800247c:	f7ff ffde 	bl	800243c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d8f7      	bhi.n	800247c <HAL_Delay+0x28>
  {
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	24000010 	.word	0x24000010

0800249c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024a0:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <HAL_GetREVID+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0c1b      	lsrs	r3, r3, #16
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	5c001000 	.word	0x5c001000

080024b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	609a      	str	r2, [r3, #8]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	609a      	str	r2, [r3, #8]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <LL_ADC_SetChannelPreselection+0x24>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	0e9b      	lsrs	r3, r3, #26
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2201      	movs	r2, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	e015      	b.n	800256c <LL_ADC_SetChannelPreselection+0x50>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002556:	2320      	movs	r3, #32
 8002558:	e003      	b.n	8002562 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2201      	movs	r2, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	69d2      	ldr	r2, [r2, #28]
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002582:	b480      	push	{r7}
 8002584:	b087      	sub	sp, #28
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3360      	adds	r3, #96	@ 0x60
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	430b      	orrs	r3, r1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	431a      	orrs	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	611a      	str	r2, [r3, #16]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3360      	adds	r3, #96	@ 0x60
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	431a      	orrs	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	601a      	str	r2, [r3, #0]
  }
}
 800261e:	bf00      	nop
 8002620:	371c      	adds	r7, #28
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3330      	adds	r3, #48	@ 0x30
 8002660:	461a      	mov	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	4413      	add	r3, r2
 800266e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	211f      	movs	r1, #31
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	401a      	ands	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	f003 011f 	and.w	r1, r3, #31
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	431a      	orrs	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60da      	str	r2, [r3, #12]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b087      	sub	sp, #28
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3314      	adds	r3, #20
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	0e5b      	lsrs	r3, r3, #25
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	4413      	add	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	0d1b      	lsrs	r3, r3, #20
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	2107      	movs	r1, #7
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	0d1b      	lsrs	r3, r3, #20
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	431a      	orrs	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800273c:	43db      	mvns	r3, r3
 800273e:	401a      	ands	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0318 	and.w	r3, r3, #24
 8002746:	4908      	ldr	r1, [pc, #32]	@ (8002768 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002748:	40d9      	lsrs	r1, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	400b      	ands	r3, r1
 800274e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002752:	431a      	orrs	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	000fffff 	.word	0x000fffff

0800276c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 031f 	and.w	r3, r3, #31
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6093      	str	r3, [r2, #8]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	5fffffc0 	.word	0x5fffffc0

080027ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027c0:	d101      	bne.n	80027c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	6fffffc0 	.word	0x6fffffc0

080027fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002810:	d101      	bne.n	8002816 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <LL_ADC_Enable+0x24>)
 8002832:	4013      	ands	r3, r2
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	7fffffc0 	.word	0x7fffffc0

0800284c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <LL_ADC_IsEnabled+0x18>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <LL_ADC_IsEnabled+0x1a>
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <LL_ADC_REG_StartConversion+0x24>)
 8002882:	4013      	ands	r3, r2
 8002884:	f043 0204 	orr.w	r2, r3, #4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	7fffffc0 	.word	0x7fffffc0

0800289c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d101      	bne.n	80028b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d101      	bne.n	80028da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b089      	sub	sp, #36	@ 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e18f      	b.n	8002c22 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe fdbf 	bl	8001494 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff3f 	bl	80027ac <LL_ADC_IsDeepPowerDownEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff25 	bl	8002788 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ff5a 	bl	80027fc <LL_ADC_IsInternalRegulatorEnabled>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d114      	bne.n	8002978 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff3e 	bl	80027d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002958:	4b87      	ldr	r3, [pc, #540]	@ (8002b78 <HAL_ADC_Init+0x290>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	4a87      	ldr	r2, [pc, #540]	@ (8002b7c <HAL_ADC_Init+0x294>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	3301      	adds	r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800296a:	e002      	b.n	8002972 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3b01      	subs	r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f9      	bne.n	800296c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff3d 	bl	80027fc <LL_ADC_IsInternalRegulatorEnabled>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10d      	bne.n	80029a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	f043 0210 	orr.w	r2, r3, #16
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff77 	bl	800289c <LL_ADC_REG_IsConversionOngoing>
 80029ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 8129 	bne.w	8002c10 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f040 8125 	bne.w	8002c10 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029ce:	f043 0202 	orr.w	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff36 	bl	800284c <LL_ADC_IsEnabled>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d136      	bne.n	8002a54 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a65      	ldr	r2, [pc, #404]	@ (8002b80 <HAL_ADC_Init+0x298>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <HAL_ADC_Init+0x112>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a63      	ldr	r2, [pc, #396]	@ (8002b84 <HAL_ADC_Init+0x29c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d10e      	bne.n	8002a18 <HAL_ADC_Init+0x130>
 80029fa:	4861      	ldr	r0, [pc, #388]	@ (8002b80 <HAL_ADC_Init+0x298>)
 80029fc:	f7ff ff26 	bl	800284c <LL_ADC_IsEnabled>
 8002a00:	4604      	mov	r4, r0
 8002a02:	4860      	ldr	r0, [pc, #384]	@ (8002b84 <HAL_ADC_Init+0x29c>)
 8002a04:	f7ff ff22 	bl	800284c <LL_ADC_IsEnabled>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e008      	b.n	8002a2a <HAL_ADC_Init+0x142>
 8002a18:	485b      	ldr	r0, [pc, #364]	@ (8002b88 <HAL_ADC_Init+0x2a0>)
 8002a1a:	f7ff ff17 	bl	800284c <LL_ADC_IsEnabled>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a53      	ldr	r2, [pc, #332]	@ (8002b80 <HAL_ADC_Init+0x298>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <HAL_ADC_Init+0x15a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a51      	ldr	r2, [pc, #324]	@ (8002b84 <HAL_ADC_Init+0x29c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_Init+0x15e>
 8002a42:	4a52      	ldr	r2, [pc, #328]	@ (8002b8c <HAL_ADC_Init+0x2a4>)
 8002a44:	e000      	b.n	8002a48 <HAL_ADC_Init+0x160>
 8002a46:	4a52      	ldr	r2, [pc, #328]	@ (8002b90 <HAL_ADC_Init+0x2a8>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f7ff fd30 	bl	80024b4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a54:	f7ff fd22 	bl	800249c <HAL_GetREVID>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d914      	bls.n	8002a8c <HAL_ADC_Init+0x1a4>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d110      	bne.n	8002a8c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7d5b      	ldrb	r3, [r3, #21]
 8002a6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7f1b      	ldrb	r3, [r3, #28]
 8002a80:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a82:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a84:	f043 030c 	orr.w	r3, r3, #12
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e00d      	b.n	8002aa8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7d5b      	ldrb	r3, [r3, #21]
 8002a90:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a96:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a9c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7f1b      	ldrb	r3, [r3, #28]
 8002aa2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7f1b      	ldrb	r3, [r3, #28]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	045b      	lsls	r3, r3, #17
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8002b94 <HAL_ADC_Init+0x2ac>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	430b      	orrs	r3, r1
 8002aec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fed2 	bl	800289c <LL_ADC_REG_IsConversionOngoing>
 8002af8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fedf 	bl	80028c2 <LL_ADC_INJ_IsConversionOngoing>
 8002b04:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d15f      	bne.n	8002bcc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d15c      	bne.n	8002bcc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7d1b      	ldrb	r3, [r3, #20]
 8002b16:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <HAL_ADC_Init+0x2b0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d130      	bne.n	8002ba0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <HAL_ADC_Init+0x2b4>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0411      	lsls	r1, r2, #16
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b5a:	4311      	orrs	r1, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b60:	4311      	orrs	r1, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b66:	430a      	orrs	r2, r1
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	611a      	str	r2, [r3, #16]
 8002b74:	e01c      	b.n	8002bb0 <HAL_ADC_Init+0x2c8>
 8002b76:	bf00      	nop
 8002b78:	24000004 	.word	0x24000004
 8002b7c:	053e2d63 	.word	0x053e2d63
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40022100 	.word	0x40022100
 8002b88:	58026000 	.word	0x58026000
 8002b8c:	40022300 	.word	0x40022300
 8002b90:	58026300 	.word	0x58026300
 8002b94:	fff0c003 	.word	0xfff0c003
 8002b98:	ffffbffc 	.word	0xffffbffc
 8002b9c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fd16 	bl	80035f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10c      	bne.n	8002bee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	f023 010f 	bic.w	r1, r3, #15
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	1e5a      	subs	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bec:	e007      	b.n	8002bfe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 020f 	bic.w	r2, r2, #15
 8002bfc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c0e:	e007      	b.n	8002c20 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c14:	f043 0210 	orr.w	r2, r3, #16
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	@ 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	bf00      	nop

08002c2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a55      	ldr	r2, [pc, #340]	@ (8002d94 <HAL_ADC_Start_DMA+0x168>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_ADC_Start_DMA+0x20>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a54      	ldr	r2, [pc, #336]	@ (8002d98 <HAL_ADC_Start_DMA+0x16c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_Start_DMA+0x24>
 8002c4c:	4b53      	ldr	r3, [pc, #332]	@ (8002d9c <HAL_ADC_Start_DMA+0x170>)
 8002c4e:	e000      	b.n	8002c52 <HAL_ADC_Start_DMA+0x26>
 8002c50:	4b53      	ldr	r3, [pc, #332]	@ (8002da0 <HAL_ADC_Start_DMA+0x174>)
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fd8a 	bl	800276c <LL_ADC_GetMultimode>
 8002c58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fe1c 	bl	800289c <LL_ADC_REG_IsConversionOngoing>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 808c 	bne.w	8002d84 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_Start_DMA+0x4e>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e087      	b.n	8002d8a <HAL_ADC_Start_DMA+0x15e>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d002      	beq.n	8002c94 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b09      	cmp	r3, #9
 8002c92:	d170      	bne.n	8002d76 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fb91 	bl	80033bc <ADC_Enable>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d163      	bne.n	8002d6c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8002da4 <HAL_ADC_Start_DMA+0x178>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a37      	ldr	r2, [pc, #220]	@ (8002d98 <HAL_ADC_Start_DMA+0x16c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d002      	beq.n	8002cc4 <HAL_ADC_Start_DMA+0x98>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	e000      	b.n	8002cc6 <HAL_ADC_Start_DMA+0x9a>
 8002cc4:	4b33      	ldr	r3, [pc, #204]	@ (8002d94 <HAL_ADC_Start_DMA+0x168>)
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d002      	beq.n	8002cd4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf0:	f023 0206 	bic.w	r2, r3, #6
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cf8:	e002      	b.n	8002d00 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d04:	4a28      	ldr	r2, [pc, #160]	@ (8002da8 <HAL_ADC_Start_DMA+0x17c>)
 8002d06:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0c:	4a27      	ldr	r2, [pc, #156]	@ (8002dac <HAL_ADC_Start_DMA+0x180>)
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d14:	4a26      	ldr	r2, [pc, #152]	@ (8002db0 <HAL_ADC_Start_DMA+0x184>)
 8002d16:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	221c      	movs	r2, #28
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0210 	orr.w	r2, r2, #16
 8002d36:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f7ff fcb0 	bl	80026a8 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3340      	adds	r3, #64	@ 0x40
 8002d52:	4619      	mov	r1, r3
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f001 fb42 	bl	80043e0 <HAL_DMA_Start_IT>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fd85 	bl	8002874 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d6a:	e00d      	b.n	8002d88 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002d74:	e008      	b.n	8002d88 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d82:	e001      	b.n	8002d88 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
 8002d86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40022000 	.word	0x40022000
 8002d98:	40022100 	.word	0x40022100
 8002d9c:	40022300 	.word	0x40022300
 8002da0:	58026300 	.word	0x58026300
 8002da4:	fffff0fe 	.word	0xfffff0fe
 8002da8:	080034d1 	.word	0x080034d1
 8002dac:	080035a9 	.word	0x080035a9
 8002db0:	080035c5 	.word	0x080035c5

08002db4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b08d      	sub	sp, #52	@ 0x34
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a65      	ldr	r2, [pc, #404]	@ (8002f8c <HAL_ADC_ConfigChannel+0x1b0>)
 8002df6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x2a>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e2c7      	b.n	8003396 <HAL_ADC_ConfigChannel+0x5ba>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fd42 	bl	800289c <LL_ADC_REG_IsConversionOngoing>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 82ac 	bne.w	8003378 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db2c      	blt.n	8002e82 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d108      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x6a>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2201      	movs	r2, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	e016      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x98>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	613b      	str	r3, [r7, #16]
  return result;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e003      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2201      	movs	r2, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	69d1      	ldr	r1, [r2, #28]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f7ff fbde 	bl	8002650 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fcff 	bl	800289c <LL_ADC_REG_IsConversionOngoing>
 8002e9e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fd0c 	bl	80028c2 <LL_ADC_INJ_IsConversionOngoing>
 8002eaa:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 80b8 	bne.w	8003024 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 80b4 	bne.w	8003024 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f7ff fc00 	bl	80026ce <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ece:	4b30      	ldr	r3, [pc, #192]	@ (8002f90 <HAL_ADC_ConfigChannel+0x1b4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002eda:	d10b      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x118>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	e01d      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x154>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x13e>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	e00a      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x154>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d02c      	beq.n	8002f94 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6919      	ldr	r1, [r3, #16]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	f7ff fb1b 	bl	8002582 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6919      	ldr	r1, [r3, #16]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	7e5b      	ldrb	r3, [r3, #25]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d102      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x186>
 8002f5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002f60:	e000      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x188>
 8002f62:	2300      	movs	r3, #0
 8002f64:	461a      	mov	r2, r3
 8002f66:	f7ff fb45 	bl	80025f4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6919      	ldr	r1, [r3, #16]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	7e1b      	ldrb	r3, [r3, #24]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d102      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1a4>
 8002f7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f7e:	e000      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1a6>
 8002f80:	2300      	movs	r3, #0
 8002f82:	461a      	mov	r2, r3
 8002f84:	f7ff fb1d 	bl	80025c2 <LL_ADC_SetDataRightShift>
 8002f88:	e04c      	b.n	8003024 <HAL_ADC_ConfigChannel+0x248>
 8002f8a:	bf00      	nop
 8002f8c:	47ff0000 	.word	0x47ff0000
 8002f90:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	069b      	lsls	r3, r3, #26
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002fb6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	069b      	lsls	r3, r3, #26
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d107      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002fda:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fe2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	069b      	lsls	r3, r3, #26
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d107      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ffe:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003006:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	069b      	lsls	r3, r3, #26
 8003010:	429a      	cmp	r2, r3
 8003012:	d107      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003022:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fc0f 	bl	800284c <LL_ADC_IsEnabled>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	f040 81aa 	bne.w	800338a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	461a      	mov	r2, r3
 8003044:	f7ff fb6e 	bl	8002724 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a87      	ldr	r2, [pc, #540]	@ (800326c <HAL_ADC_ConfigChannel+0x490>)
 800304e:	4293      	cmp	r3, r2
 8003050:	f040 809a 	bne.w	8003188 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4984      	ldr	r1, [pc, #528]	@ (8003270 <HAL_ADC_ConfigChannel+0x494>)
 800305e:	428b      	cmp	r3, r1
 8003060:	d147      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x316>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4983      	ldr	r1, [pc, #524]	@ (8003274 <HAL_ADC_ConfigChannel+0x498>)
 8003068:	428b      	cmp	r3, r1
 800306a:	d040      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x312>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4981      	ldr	r1, [pc, #516]	@ (8003278 <HAL_ADC_ConfigChannel+0x49c>)
 8003072:	428b      	cmp	r3, r1
 8003074:	d039      	beq.n	80030ea <HAL_ADC_ConfigChannel+0x30e>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4980      	ldr	r1, [pc, #512]	@ (800327c <HAL_ADC_ConfigChannel+0x4a0>)
 800307c:	428b      	cmp	r3, r1
 800307e:	d032      	beq.n	80030e6 <HAL_ADC_ConfigChannel+0x30a>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	497e      	ldr	r1, [pc, #504]	@ (8003280 <HAL_ADC_ConfigChannel+0x4a4>)
 8003086:	428b      	cmp	r3, r1
 8003088:	d02b      	beq.n	80030e2 <HAL_ADC_ConfigChannel+0x306>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	497d      	ldr	r1, [pc, #500]	@ (8003284 <HAL_ADC_ConfigChannel+0x4a8>)
 8003090:	428b      	cmp	r3, r1
 8003092:	d024      	beq.n	80030de <HAL_ADC_ConfigChannel+0x302>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	497b      	ldr	r1, [pc, #492]	@ (8003288 <HAL_ADC_ConfigChannel+0x4ac>)
 800309a:	428b      	cmp	r3, r1
 800309c:	d01d      	beq.n	80030da <HAL_ADC_ConfigChannel+0x2fe>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	497a      	ldr	r1, [pc, #488]	@ (800328c <HAL_ADC_ConfigChannel+0x4b0>)
 80030a4:	428b      	cmp	r3, r1
 80030a6:	d016      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x2fa>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4978      	ldr	r1, [pc, #480]	@ (8003290 <HAL_ADC_ConfigChannel+0x4b4>)
 80030ae:	428b      	cmp	r3, r1
 80030b0:	d00f      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x2f6>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4977      	ldr	r1, [pc, #476]	@ (8003294 <HAL_ADC_ConfigChannel+0x4b8>)
 80030b8:	428b      	cmp	r3, r1
 80030ba:	d008      	beq.n	80030ce <HAL_ADC_ConfigChannel+0x2f2>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4975      	ldr	r1, [pc, #468]	@ (8003298 <HAL_ADC_ConfigChannel+0x4bc>)
 80030c2:	428b      	cmp	r3, r1
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x2ee>
 80030c6:	4b75      	ldr	r3, [pc, #468]	@ (800329c <HAL_ADC_ConfigChannel+0x4c0>)
 80030c8:	e05a      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030ca:	2300      	movs	r3, #0
 80030cc:	e058      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030ce:	4b74      	ldr	r3, [pc, #464]	@ (80032a0 <HAL_ADC_ConfigChannel+0x4c4>)
 80030d0:	e056      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030d2:	4b74      	ldr	r3, [pc, #464]	@ (80032a4 <HAL_ADC_ConfigChannel+0x4c8>)
 80030d4:	e054      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003290 <HAL_ADC_ConfigChannel+0x4b4>)
 80030d8:	e052      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030da:	4b6c      	ldr	r3, [pc, #432]	@ (800328c <HAL_ADC_ConfigChannel+0x4b0>)
 80030dc:	e050      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030de:	4b72      	ldr	r3, [pc, #456]	@ (80032a8 <HAL_ADC_ConfigChannel+0x4cc>)
 80030e0:	e04e      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030e2:	4b72      	ldr	r3, [pc, #456]	@ (80032ac <HAL_ADC_ConfigChannel+0x4d0>)
 80030e4:	e04c      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030e6:	4b72      	ldr	r3, [pc, #456]	@ (80032b0 <HAL_ADC_ConfigChannel+0x4d4>)
 80030e8:	e04a      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030ea:	4b72      	ldr	r3, [pc, #456]	@ (80032b4 <HAL_ADC_ConfigChannel+0x4d8>)
 80030ec:	e048      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e046      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4970      	ldr	r1, [pc, #448]	@ (80032b8 <HAL_ADC_ConfigChannel+0x4dc>)
 80030f8:	428b      	cmp	r3, r1
 80030fa:	d140      	bne.n	800317e <HAL_ADC_ConfigChannel+0x3a2>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	495c      	ldr	r1, [pc, #368]	@ (8003274 <HAL_ADC_ConfigChannel+0x498>)
 8003102:	428b      	cmp	r3, r1
 8003104:	d039      	beq.n	800317a <HAL_ADC_ConfigChannel+0x39e>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	495b      	ldr	r1, [pc, #364]	@ (8003278 <HAL_ADC_ConfigChannel+0x49c>)
 800310c:	428b      	cmp	r3, r1
 800310e:	d032      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x39a>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4959      	ldr	r1, [pc, #356]	@ (800327c <HAL_ADC_ConfigChannel+0x4a0>)
 8003116:	428b      	cmp	r3, r1
 8003118:	d02b      	beq.n	8003172 <HAL_ADC_ConfigChannel+0x396>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4958      	ldr	r1, [pc, #352]	@ (8003280 <HAL_ADC_ConfigChannel+0x4a4>)
 8003120:	428b      	cmp	r3, r1
 8003122:	d024      	beq.n	800316e <HAL_ADC_ConfigChannel+0x392>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4956      	ldr	r1, [pc, #344]	@ (8003284 <HAL_ADC_ConfigChannel+0x4a8>)
 800312a:	428b      	cmp	r3, r1
 800312c:	d01d      	beq.n	800316a <HAL_ADC_ConfigChannel+0x38e>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4955      	ldr	r1, [pc, #340]	@ (8003288 <HAL_ADC_ConfigChannel+0x4ac>)
 8003134:	428b      	cmp	r3, r1
 8003136:	d016      	beq.n	8003166 <HAL_ADC_ConfigChannel+0x38a>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4953      	ldr	r1, [pc, #332]	@ (800328c <HAL_ADC_ConfigChannel+0x4b0>)
 800313e:	428b      	cmp	r3, r1
 8003140:	d00f      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x386>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4952      	ldr	r1, [pc, #328]	@ (8003290 <HAL_ADC_ConfigChannel+0x4b4>)
 8003148:	428b      	cmp	r3, r1
 800314a:	d008      	beq.n	800315e <HAL_ADC_ConfigChannel+0x382>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4951      	ldr	r1, [pc, #324]	@ (8003298 <HAL_ADC_ConfigChannel+0x4bc>)
 8003152:	428b      	cmp	r3, r1
 8003154:	d101      	bne.n	800315a <HAL_ADC_ConfigChannel+0x37e>
 8003156:	4b51      	ldr	r3, [pc, #324]	@ (800329c <HAL_ADC_ConfigChannel+0x4c0>)
 8003158:	e012      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 800315a:	2300      	movs	r3, #0
 800315c:	e010      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 800315e:	4b51      	ldr	r3, [pc, #324]	@ (80032a4 <HAL_ADC_ConfigChannel+0x4c8>)
 8003160:	e00e      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 8003162:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <HAL_ADC_ConfigChannel+0x4b4>)
 8003164:	e00c      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 8003166:	4b49      	ldr	r3, [pc, #292]	@ (800328c <HAL_ADC_ConfigChannel+0x4b0>)
 8003168:	e00a      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 800316a:	4b4f      	ldr	r3, [pc, #316]	@ (80032a8 <HAL_ADC_ConfigChannel+0x4cc>)
 800316c:	e008      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 800316e:	4b4f      	ldr	r3, [pc, #316]	@ (80032ac <HAL_ADC_ConfigChannel+0x4d0>)
 8003170:	e006      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 8003172:	4b4f      	ldr	r3, [pc, #316]	@ (80032b0 <HAL_ADC_ConfigChannel+0x4d4>)
 8003174:	e004      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 8003176:	4b4f      	ldr	r3, [pc, #316]	@ (80032b4 <HAL_ADC_ConfigChannel+0x4d8>)
 8003178:	e002      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_ADC_ConfigChannel+0x3a4>
 800317e:	2300      	movs	r3, #0
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f7ff f9ca 	bl	800251c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f280 80fc 	bge.w	800338a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a36      	ldr	r2, [pc, #216]	@ (8003270 <HAL_ADC_ConfigChannel+0x494>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_ADC_ConfigChannel+0x3ca>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a45      	ldr	r2, [pc, #276]	@ (80032b8 <HAL_ADC_ConfigChannel+0x4dc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x3ce>
 80031a6:	4b45      	ldr	r3, [pc, #276]	@ (80032bc <HAL_ADC_ConfigChannel+0x4e0>)
 80031a8:	e000      	b.n	80031ac <HAL_ADC_ConfigChannel+0x3d0>
 80031aa:	4b45      	ldr	r3, [pc, #276]	@ (80032c0 <HAL_ADC_ConfigChannel+0x4e4>)
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f9a7 	bl	8002500 <LL_ADC_GetCommonPathInternalCh>
 80031b2:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003270 <HAL_ADC_ConfigChannel+0x494>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x3ec>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a3d      	ldr	r2, [pc, #244]	@ (80032b8 <HAL_ADC_ConfigChannel+0x4dc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d10e      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x40a>
 80031c8:	4829      	ldr	r0, [pc, #164]	@ (8003270 <HAL_ADC_ConfigChannel+0x494>)
 80031ca:	f7ff fb3f 	bl	800284c <LL_ADC_IsEnabled>
 80031ce:	4604      	mov	r4, r0
 80031d0:	4839      	ldr	r0, [pc, #228]	@ (80032b8 <HAL_ADC_ConfigChannel+0x4dc>)
 80031d2:	f7ff fb3b 	bl	800284c <LL_ADC_IsEnabled>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4323      	orrs	r3, r4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf0c      	ite	eq
 80031de:	2301      	moveq	r3, #1
 80031e0:	2300      	movne	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	e008      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x41c>
 80031e6:	4837      	ldr	r0, [pc, #220]	@ (80032c4 <HAL_ADC_ConfigChannel+0x4e8>)
 80031e8:	f7ff fb30 	bl	800284c <LL_ADC_IsEnabled>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf0c      	ite	eq
 80031f2:	2301      	moveq	r3, #1
 80031f4:	2300      	movne	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80b3 	beq.w	8003364 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a31      	ldr	r2, [pc, #196]	@ (80032c8 <HAL_ADC_ConfigChannel+0x4ec>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d165      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x4f8>
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d160      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2b      	ldr	r2, [pc, #172]	@ (80032c4 <HAL_ADC_ConfigChannel+0x4e8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	f040 80b6 	bne.w	800338a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <HAL_ADC_ConfigChannel+0x494>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_ADC_ConfigChannel+0x456>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a22      	ldr	r2, [pc, #136]	@ (80032b8 <HAL_ADC_ConfigChannel+0x4dc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x45a>
 8003232:	4a22      	ldr	r2, [pc, #136]	@ (80032bc <HAL_ADC_ConfigChannel+0x4e0>)
 8003234:	e000      	b.n	8003238 <HAL_ADC_ConfigChannel+0x45c>
 8003236:	4a22      	ldr	r2, [pc, #136]	@ (80032c0 <HAL_ADC_ConfigChannel+0x4e4>)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f7ff f94a 	bl	80024da <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003246:	4b21      	ldr	r3, [pc, #132]	@ (80032cc <HAL_ADC_ConfigChannel+0x4f0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	4a20      	ldr	r2, [pc, #128]	@ (80032d0 <HAL_ADC_ConfigChannel+0x4f4>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	3301      	adds	r3, #1
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800325a:	e002      	b.n	8003262 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3b01      	subs	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f9      	bne.n	800325c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003268:	e08f      	b.n	800338a <HAL_ADC_ConfigChannel+0x5ae>
 800326a:	bf00      	nop
 800326c:	47ff0000 	.word	0x47ff0000
 8003270:	40022000 	.word	0x40022000
 8003274:	04300002 	.word	0x04300002
 8003278:	08600004 	.word	0x08600004
 800327c:	0c900008 	.word	0x0c900008
 8003280:	10c00010 	.word	0x10c00010
 8003284:	14f00020 	.word	0x14f00020
 8003288:	2a000400 	.word	0x2a000400
 800328c:	2e300800 	.word	0x2e300800
 8003290:	32601000 	.word	0x32601000
 8003294:	43210000 	.word	0x43210000
 8003298:	4b840000 	.word	0x4b840000
 800329c:	4fb80000 	.word	0x4fb80000
 80032a0:	47520000 	.word	0x47520000
 80032a4:	36902000 	.word	0x36902000
 80032a8:	25b00200 	.word	0x25b00200
 80032ac:	21800100 	.word	0x21800100
 80032b0:	1d500080 	.word	0x1d500080
 80032b4:	19200040 	.word	0x19200040
 80032b8:	40022100 	.word	0x40022100
 80032bc:	40022300 	.word	0x40022300
 80032c0:	58026300 	.word	0x58026300
 80032c4:	58026000 	.word	0x58026000
 80032c8:	cb840000 	.word	0xcb840000
 80032cc:	24000004 	.word	0x24000004
 80032d0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a31      	ldr	r2, [pc, #196]	@ (80033a0 <HAL_ADC_ConfigChannel+0x5c4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d11e      	bne.n	800331c <HAL_ADC_ConfigChannel+0x540>
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d119      	bne.n	800331c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2d      	ldr	r2, [pc, #180]	@ (80033a4 <HAL_ADC_ConfigChannel+0x5c8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d14b      	bne.n	800338a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2c      	ldr	r2, [pc, #176]	@ (80033a8 <HAL_ADC_ConfigChannel+0x5cc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_ADC_ConfigChannel+0x52a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2a      	ldr	r2, [pc, #168]	@ (80033ac <HAL_ADC_ConfigChannel+0x5d0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x52e>
 8003306:	4a2a      	ldr	r2, [pc, #168]	@ (80033b0 <HAL_ADC_ConfigChannel+0x5d4>)
 8003308:	e000      	b.n	800330c <HAL_ADC_ConfigChannel+0x530>
 800330a:	4a2a      	ldr	r2, [pc, #168]	@ (80033b4 <HAL_ADC_ConfigChannel+0x5d8>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f7ff f8e0 	bl	80024da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800331a:	e036      	b.n	800338a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a25      	ldr	r2, [pc, #148]	@ (80033b8 <HAL_ADC_ConfigChannel+0x5dc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d131      	bne.n	800338a <HAL_ADC_ConfigChannel+0x5ae>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d12c      	bne.n	800338a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1b      	ldr	r2, [pc, #108]	@ (80033a4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d127      	bne.n	800338a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1a      	ldr	r2, [pc, #104]	@ (80033a8 <HAL_ADC_ConfigChannel+0x5cc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_ADC_ConfigChannel+0x572>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a18      	ldr	r2, [pc, #96]	@ (80033ac <HAL_ADC_ConfigChannel+0x5d0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x576>
 800334e:	4a18      	ldr	r2, [pc, #96]	@ (80033b0 <HAL_ADC_ConfigChannel+0x5d4>)
 8003350:	e000      	b.n	8003354 <HAL_ADC_ConfigChannel+0x578>
 8003352:	4a18      	ldr	r2, [pc, #96]	@ (80033b4 <HAL_ADC_ConfigChannel+0x5d8>)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f7ff f8bc 	bl	80024da <LL_ADC_SetCommonPathInternalCh>
 8003362:	e012      	b.n	800338a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003376:	e008      	b.n	800338a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003392:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003396:	4618      	mov	r0, r3
 8003398:	3734      	adds	r7, #52	@ 0x34
 800339a:	46bd      	mov	sp, r7
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	bf00      	nop
 80033a0:	c7520000 	.word	0xc7520000
 80033a4:	58026000 	.word	0x58026000
 80033a8:	40022000 	.word	0x40022000
 80033ac:	40022100 	.word	0x40022100
 80033b0:	40022300 	.word	0x40022300
 80033b4:	58026300 	.word	0x58026300
 80033b8:	cfb80000 	.word	0xcfb80000

080033bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fa3f 	bl	800284c <LL_ADC_IsEnabled>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d16e      	bne.n	80034b2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	4b38      	ldr	r3, [pc, #224]	@ (80034bc <ADC_Enable+0x100>)
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e6:	f043 0210 	orr.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e05a      	b.n	80034b4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fa0e 	bl	8002824 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003408:	f7ff f818 	bl	800243c <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2b      	ldr	r2, [pc, #172]	@ (80034c0 <ADC_Enable+0x104>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <ADC_Enable+0x66>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a29      	ldr	r2, [pc, #164]	@ (80034c4 <ADC_Enable+0x108>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <ADC_Enable+0x6a>
 8003422:	4b29      	ldr	r3, [pc, #164]	@ (80034c8 <ADC_Enable+0x10c>)
 8003424:	e000      	b.n	8003428 <ADC_Enable+0x6c>
 8003426:	4b29      	ldr	r3, [pc, #164]	@ (80034cc <ADC_Enable+0x110>)
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff f99f 	bl	800276c <LL_ADC_GetMultimode>
 800342e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a23      	ldr	r2, [pc, #140]	@ (80034c4 <ADC_Enable+0x108>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d002      	beq.n	8003440 <ADC_Enable+0x84>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	e000      	b.n	8003442 <ADC_Enable+0x86>
 8003440:	4b1f      	ldr	r3, [pc, #124]	@ (80034c0 <ADC_Enable+0x104>)
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	4293      	cmp	r3, r2
 8003448:	d02c      	beq.n	80034a4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d130      	bne.n	80034b2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003450:	e028      	b.n	80034a4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff f9f8 	bl	800284c <LL_ADC_IsEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d104      	bne.n	800346c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff f9dc 	bl	8002824 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800346c:	f7fe ffe6 	bl	800243c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d914      	bls.n	80034a4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d00d      	beq.n	80034a4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348c:	f043 0210 	orr.w	r2, r3, #16
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d1cf      	bne.n	8003452 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	8000003f 	.word	0x8000003f
 80034c0:	40022000 	.word	0x40022000
 80034c4:	40022100 	.word	0x40022100
 80034c8:	40022300 	.word	0x40022300
 80034cc:	58026300 	.word	0x58026300

080034d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d14b      	bne.n	8003582 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d021      	beq.n	8003548 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff f88e 	bl	800262a <LL_ADC_REG_IsTriggerSourceSWStart>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d032      	beq.n	800357a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d12b      	bne.n	800357a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003526:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11f      	bne.n	800357a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	f043 0201 	orr.w	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54
 8003546:	e018      	b.n	800357a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d111      	bne.n	800357a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d105      	bne.n	800357a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f7fd fd1c 	bl	8000fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003580:	e00e      	b.n	80035a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f7ff fc1a 	bl	8002dc8 <HAL_ADC_ErrorCallback>
}
 8003594:	e004      	b.n	80035a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4798      	blx	r3
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f7ff fbfc 	bl	8002db4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e2:	f043 0204 	orr.w	r2, r3, #4
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f7ff fbec 	bl	8002dc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a7a      	ldr	r2, [pc, #488]	@ (80037f0 <ADC_ConfigureBoostMode+0x1f8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d004      	beq.n	8003614 <ADC_ConfigureBoostMode+0x1c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a79      	ldr	r2, [pc, #484]	@ (80037f4 <ADC_ConfigureBoostMode+0x1fc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d109      	bne.n	8003628 <ADC_ConfigureBoostMode+0x30>
 8003614:	4b78      	ldr	r3, [pc, #480]	@ (80037f8 <ADC_ConfigureBoostMode+0x200>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	e008      	b.n	800363a <ADC_ConfigureBoostMode+0x42>
 8003628:	4b74      	ldr	r3, [pc, #464]	@ (80037fc <ADC_ConfigureBoostMode+0x204>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01c      	beq.n	8003678 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800363e:	f00a f973 	bl	800d928 <HAL_RCC_GetHCLKFreq>
 8003642:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800364c:	d010      	beq.n	8003670 <ADC_ConfigureBoostMode+0x78>
 800364e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003652:	d873      	bhi.n	800373c <ADC_ConfigureBoostMode+0x144>
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003658:	d002      	beq.n	8003660 <ADC_ConfigureBoostMode+0x68>
 800365a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800365e:	d16d      	bne.n	800373c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	60fb      	str	r3, [r7, #12]
        break;
 800366e:	e068      	b.n	8003742 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	60fb      	str	r3, [r7, #12]
        break;
 8003676:	e064      	b.n	8003742 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003678:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	f00b fbb8 	bl	800edf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003684:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800368e:	d051      	beq.n	8003734 <ADC_ConfigureBoostMode+0x13c>
 8003690:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003694:	d854      	bhi.n	8003740 <ADC_ConfigureBoostMode+0x148>
 8003696:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800369a:	d047      	beq.n	800372c <ADC_ConfigureBoostMode+0x134>
 800369c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80036a0:	d84e      	bhi.n	8003740 <ADC_ConfigureBoostMode+0x148>
 80036a2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80036a6:	d03d      	beq.n	8003724 <ADC_ConfigureBoostMode+0x12c>
 80036a8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80036ac:	d848      	bhi.n	8003740 <ADC_ConfigureBoostMode+0x148>
 80036ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036b2:	d033      	beq.n	800371c <ADC_ConfigureBoostMode+0x124>
 80036b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036b8:	d842      	bhi.n	8003740 <ADC_ConfigureBoostMode+0x148>
 80036ba:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80036be:	d029      	beq.n	8003714 <ADC_ConfigureBoostMode+0x11c>
 80036c0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80036c4:	d83c      	bhi.n	8003740 <ADC_ConfigureBoostMode+0x148>
 80036c6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80036ca:	d01a      	beq.n	8003702 <ADC_ConfigureBoostMode+0x10a>
 80036cc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80036d0:	d836      	bhi.n	8003740 <ADC_ConfigureBoostMode+0x148>
 80036d2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80036d6:	d014      	beq.n	8003702 <ADC_ConfigureBoostMode+0x10a>
 80036d8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80036dc:	d830      	bhi.n	8003740 <ADC_ConfigureBoostMode+0x148>
 80036de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036e2:	d00e      	beq.n	8003702 <ADC_ConfigureBoostMode+0x10a>
 80036e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036e8:	d82a      	bhi.n	8003740 <ADC_ConfigureBoostMode+0x148>
 80036ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80036ee:	d008      	beq.n	8003702 <ADC_ConfigureBoostMode+0x10a>
 80036f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80036f4:	d824      	bhi.n	8003740 <ADC_ConfigureBoostMode+0x148>
 80036f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036fa:	d002      	beq.n	8003702 <ADC_ConfigureBoostMode+0x10a>
 80036fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003700:	d11e      	bne.n	8003740 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	0c9b      	lsrs	r3, r3, #18
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	60fb      	str	r3, [r7, #12]
        break;
 8003712:	e016      	b.n	8003742 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
        break;
 800371a:	e012      	b.n	8003742 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	60fb      	str	r3, [r7, #12]
        break;
 8003722:	e00e      	b.n	8003742 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	099b      	lsrs	r3, r3, #6
 8003728:	60fb      	str	r3, [r7, #12]
        break;
 800372a:	e00a      	b.n	8003742 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	09db      	lsrs	r3, r3, #7
 8003730:	60fb      	str	r3, [r7, #12]
        break;
 8003732:	e006      	b.n	8003742 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	60fb      	str	r3, [r7, #12]
        break;
 800373a:	e002      	b.n	8003742 <ADC_ConfigureBoostMode+0x14a>
        break;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003740:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003742:	f7fe feab 	bl	800249c <HAL_GetREVID>
 8003746:	4603      	mov	r3, r0
 8003748:	f241 0203 	movw	r2, #4099	@ 0x1003
 800374c:	4293      	cmp	r3, r2
 800374e:	d815      	bhi.n	800377c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a2b      	ldr	r2, [pc, #172]	@ (8003800 <ADC_ConfigureBoostMode+0x208>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d908      	bls.n	800376a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003766:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003768:	e03e      	b.n	80037e8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003778:	609a      	str	r2, [r3, #8]
}
 800377a:	e035      	b.n	80037e8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a1f      	ldr	r2, [pc, #124]	@ (8003804 <ADC_ConfigureBoostMode+0x20c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d808      	bhi.n	800379c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003798:	609a      	str	r2, [r3, #8]
}
 800379a:	e025      	b.n	80037e8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a1a      	ldr	r2, [pc, #104]	@ (8003808 <ADC_ConfigureBoostMode+0x210>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d80a      	bhi.n	80037ba <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037b6:	609a      	str	r2, [r3, #8]
}
 80037b8:	e016      	b.n	80037e8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a13      	ldr	r2, [pc, #76]	@ (800380c <ADC_ConfigureBoostMode+0x214>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d80a      	bhi.n	80037d8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d4:	609a      	str	r2, [r3, #8]
}
 80037d6:	e007      	b.n	80037e8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40022000 	.word	0x40022000
 80037f4:	40022100 	.word	0x40022100
 80037f8:	40022300 	.word	0x40022300
 80037fc:	58026300 	.word	0x58026300
 8003800:	01312d00 	.word	0x01312d00
 8003804:	005f5e10 	.word	0x005f5e10
 8003808:	00bebc20 	.word	0x00bebc20
 800380c:	017d7840 	.word	0x017d7840

08003810 <LL_ADC_IsEnabled>:
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <LL_ADC_IsEnabled+0x18>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <LL_ADC_IsEnabled+0x1a>
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <LL_ADC_REG_IsConversionOngoing>:
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d101      	bne.n	800384e <LL_ADC_REG_IsConversionOngoing+0x18>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b09f      	sub	sp, #124	@ 0x7c
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003876:	2302      	movs	r3, #2
 8003878:	e0be      	b.n	80039f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003886:	2300      	movs	r3, #0
 8003888:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a5c      	ldr	r2, [pc, #368]	@ (8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d102      	bne.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003894:	4b5b      	ldr	r3, [pc, #364]	@ (8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	e001      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e09d      	b.n	80039f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ffb9 	bl	8003836 <LL_ADC_REG_IsConversionOngoing>
 80038c4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ffb3 	bl	8003836 <LL_ADC_REG_IsConversionOngoing>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d17f      	bne.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80038d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d17c      	bne.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a47      	ldr	r2, [pc, #284]	@ (8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a46      	ldr	r2, [pc, #280]	@ (8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80038f0:	4b45      	ldr	r3, [pc, #276]	@ (8003a08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038f2:	e000      	b.n	80038f6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80038f4:	4b45      	ldr	r3, [pc, #276]	@ (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d039      	beq.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	431a      	orrs	r2, r3
 800390e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003910:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a3a      	ldr	r2, [pc, #232]	@ (8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a38      	ldr	r2, [pc, #224]	@ (8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d10e      	bne.n	8003944 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003926:	4836      	ldr	r0, [pc, #216]	@ (8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003928:	f7ff ff72 	bl	8003810 <LL_ADC_IsEnabled>
 800392c:	4604      	mov	r4, r0
 800392e:	4835      	ldr	r0, [pc, #212]	@ (8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003930:	f7ff ff6e 	bl	8003810 <LL_ADC_IsEnabled>
 8003934:	4603      	mov	r3, r0
 8003936:	4323      	orrs	r3, r4
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e008      	b.n	8003956 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003944:	4832      	ldr	r0, [pc, #200]	@ (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003946:	f7ff ff63 	bl	8003810 <LL_ADC_IsEnabled>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d047      	beq.n	80039ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800395a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003960:	4013      	ands	r3, r2
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	6892      	ldr	r2, [r2, #8]
 800396a:	430a      	orrs	r2, r1
 800396c:	431a      	orrs	r2, r3
 800396e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003970:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003972:	e03a      	b.n	80039ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800397c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800397e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1e      	ldr	r2, [pc, #120]	@ (8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d10e      	bne.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003994:	481a      	ldr	r0, [pc, #104]	@ (8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003996:	f7ff ff3b 	bl	8003810 <LL_ADC_IsEnabled>
 800399a:	4604      	mov	r4, r0
 800399c:	4819      	ldr	r0, [pc, #100]	@ (8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800399e:	f7ff ff37 	bl	8003810 <LL_ADC_IsEnabled>
 80039a2:	4603      	mov	r3, r0
 80039a4:	4323      	orrs	r3, r4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e008      	b.n	80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80039b2:	4817      	ldr	r0, [pc, #92]	@ (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80039b4:	f7ff ff2c 	bl	8003810 <LL_ADC_IsEnabled>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d010      	beq.n	80039ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039d2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039d4:	e009      	b.n	80039ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80039e8:	e000      	b.n	80039ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80039f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	377c      	adds	r7, #124	@ 0x7c
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd90      	pop	{r4, r7, pc}
 8003a00:	40022000 	.word	0x40022000
 8003a04:	40022100 	.word	0x40022100
 8003a08:	40022300 	.word	0x40022300
 8003a0c:	58026300 	.word	0x58026300
 8003a10:	58026000 	.word	0x58026000
 8003a14:	fffff0e0 	.word	0xfffff0e0

08003a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <__NVIC_SetPriorityGrouping+0x40>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a34:	4013      	ands	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a40:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <__NVIC_SetPriorityGrouping+0x44>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	@ (8003a58 <__NVIC_SetPriorityGrouping+0x40>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00
 8003a5c:	05fa0000 	.word	0x05fa0000

08003a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a64:	4b04      	ldr	r3, [pc, #16]	@ (8003a78 <__NVIC_GetPriorityGrouping+0x18>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	f003 0307 	and.w	r3, r3, #7
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	db0b      	blt.n	8003aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	f003 021f 	and.w	r2, r3, #31
 8003a94:	4907      	ldr	r1, [pc, #28]	@ (8003ab4 <__NVIC_EnableIRQ+0x38>)
 8003a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	db0a      	blt.n	8003ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	490c      	ldr	r1, [pc, #48]	@ (8003b04 <__NVIC_SetPriority+0x4c>)
 8003ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	440b      	add	r3, r1
 8003adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae0:	e00a      	b.n	8003af8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4908      	ldr	r1, [pc, #32]	@ (8003b08 <__NVIC_SetPriority+0x50>)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	3b04      	subs	r3, #4
 8003af0:	0112      	lsls	r2, r2, #4
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	440b      	add	r3, r1
 8003af6:	761a      	strb	r2, [r3, #24]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000e100 	.word	0xe000e100
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	@ 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f1c3 0307 	rsb	r3, r3, #7
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	bf28      	it	cs
 8003b2a:	2304      	movcs	r3, #4
 8003b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d902      	bls.n	8003b3c <NVIC_EncodePriority+0x30>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3b03      	subs	r3, #3
 8003b3a:	e000      	b.n	8003b3e <NVIC_EncodePriority+0x32>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	401a      	ands	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b54:	f04f 31ff 	mov.w	r1, #4294967295
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	43d9      	mvns	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	4313      	orrs	r3, r2
         );
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b84:	d301      	bcc.n	8003b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00f      	b.n	8003baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <SysTick_Config+0x40>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b92:	210f      	movs	r1, #15
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	f7ff ff8e 	bl	8003ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <SysTick_Config+0x40>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba2:	4b04      	ldr	r3, [pc, #16]	@ (8003bb4 <SysTick_Config+0x40>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	e000e010 	.word	0xe000e010

08003bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff29 	bl	8003a18 <__NVIC_SetPriorityGrouping>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bdc:	f7ff ff40 	bl	8003a60 <__NVIC_GetPriorityGrouping>
 8003be0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f7ff ff90 	bl	8003b0c <NVIC_EncodePriority>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff5f 	bl	8003ab8 <__NVIC_SetPriority>
}
 8003bfa:	bf00      	nop
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ff33 	bl	8003a7c <__NVIC_EnableIRQ>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ffa4 	bl	8003b74 <SysTick_Config>
 8003c2c:	4603      	mov	r3, r0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003c3c:	f3bf 8f5f 	dmb	sy
}
 8003c40:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003c42:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <HAL_MPU_Disable+0x28>)
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	4a06      	ldr	r2, [pc, #24]	@ (8003c60 <HAL_MPU_Disable+0x28>)
 8003c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c4c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003c4e:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <HAL_MPU_Disable+0x2c>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000ed00 	.word	0xe000ed00
 8003c64:	e000ed90 	.word	0xe000ed90

08003c68 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003c70:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca0 <HAL_MPU_Enable+0x38>)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <HAL_MPU_Enable+0x3c>)
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ca4 <HAL_MPU_Enable+0x3c>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c84:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003c86:	f3bf 8f4f 	dsb	sy
}
 8003c8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c8c:	f3bf 8f6f 	isb	sy
}
 8003c90:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000ed90 	.word	0xe000ed90
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	785a      	ldrb	r2, [r3, #1]
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_MPU_ConfigRegion+0x7c>)
 8003cb6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d24 <HAL_MPU_ConfigRegion+0x7c>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	4a19      	ldr	r2, [pc, #100]	@ (8003d24 <HAL_MPU_ConfigRegion+0x7c>)
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003cc4:	4a17      	ldr	r2, [pc, #92]	@ (8003d24 <HAL_MPU_ConfigRegion+0x7c>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7b1b      	ldrb	r3, [r3, #12]
 8003cd0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	7adb      	ldrb	r3, [r3, #11]
 8003cd6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003cd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7a9b      	ldrb	r3, [r3, #10]
 8003cde:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ce0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7b5b      	ldrb	r3, [r3, #13]
 8003ce6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ce8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7b9b      	ldrb	r3, [r3, #14]
 8003cee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003cf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7bdb      	ldrb	r3, [r3, #15]
 8003cf6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003cf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7a5b      	ldrb	r3, [r3, #9]
 8003cfe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	7a1b      	ldrb	r3, [r3, #8]
 8003d06:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d08:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	7812      	ldrb	r2, [r2, #0]
 8003d0e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d10:	4a04      	ldr	r2, [pc, #16]	@ (8003d24 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d12:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d14:	6113      	str	r3, [r2, #16]
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000ed90 	.word	0xe000ed90

08003d28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d30:	f7fe fb84 	bl	800243c <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e316      	b.n	800436e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a66      	ldr	r2, [pc, #408]	@ (8003ee0 <HAL_DMA_Init+0x1b8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d04a      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a65      	ldr	r2, [pc, #404]	@ (8003ee4 <HAL_DMA_Init+0x1bc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d045      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a63      	ldr	r2, [pc, #396]	@ (8003ee8 <HAL_DMA_Init+0x1c0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d040      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a62      	ldr	r2, [pc, #392]	@ (8003eec <HAL_DMA_Init+0x1c4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d03b      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a60      	ldr	r2, [pc, #384]	@ (8003ef0 <HAL_DMA_Init+0x1c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d036      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a5f      	ldr	r2, [pc, #380]	@ (8003ef4 <HAL_DMA_Init+0x1cc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d031      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef8 <HAL_DMA_Init+0x1d0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d02c      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003efc <HAL_DMA_Init+0x1d4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d027      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5a      	ldr	r2, [pc, #360]	@ (8003f00 <HAL_DMA_Init+0x1d8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d022      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a59      	ldr	r2, [pc, #356]	@ (8003f04 <HAL_DMA_Init+0x1dc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d01d      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a57      	ldr	r2, [pc, #348]	@ (8003f08 <HAL_DMA_Init+0x1e0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d018      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a56      	ldr	r2, [pc, #344]	@ (8003f0c <HAL_DMA_Init+0x1e4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a54      	ldr	r2, [pc, #336]	@ (8003f10 <HAL_DMA_Init+0x1e8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a53      	ldr	r2, [pc, #332]	@ (8003f14 <HAL_DMA_Init+0x1ec>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a51      	ldr	r2, [pc, #324]	@ (8003f18 <HAL_DMA_Init+0x1f0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a50      	ldr	r2, [pc, #320]	@ (8003f1c <HAL_DMA_Init+0x1f4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d101      	bne.n	8003de4 <HAL_DMA_Init+0xbc>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_DMA_Init+0xbe>
 8003de4:	2300      	movs	r3, #0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 813b 	beq.w	8004062 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a37      	ldr	r2, [pc, #220]	@ (8003ee0 <HAL_DMA_Init+0x1b8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d04a      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a36      	ldr	r2, [pc, #216]	@ (8003ee4 <HAL_DMA_Init+0x1bc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d045      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a34      	ldr	r2, [pc, #208]	@ (8003ee8 <HAL_DMA_Init+0x1c0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d040      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a33      	ldr	r2, [pc, #204]	@ (8003eec <HAL_DMA_Init+0x1c4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d03b      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a31      	ldr	r2, [pc, #196]	@ (8003ef0 <HAL_DMA_Init+0x1c8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d036      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a30      	ldr	r2, [pc, #192]	@ (8003ef4 <HAL_DMA_Init+0x1cc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d031      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ef8 <HAL_DMA_Init+0x1d0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d02c      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2d      	ldr	r2, [pc, #180]	@ (8003efc <HAL_DMA_Init+0x1d4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d027      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a2b      	ldr	r2, [pc, #172]	@ (8003f00 <HAL_DMA_Init+0x1d8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d022      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f04 <HAL_DMA_Init+0x1dc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d01d      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a28      	ldr	r2, [pc, #160]	@ (8003f08 <HAL_DMA_Init+0x1e0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d018      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a27      	ldr	r2, [pc, #156]	@ (8003f0c <HAL_DMA_Init+0x1e4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a25      	ldr	r2, [pc, #148]	@ (8003f10 <HAL_DMA_Init+0x1e8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a24      	ldr	r2, [pc, #144]	@ (8003f14 <HAL_DMA_Init+0x1ec>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a22      	ldr	r2, [pc, #136]	@ (8003f18 <HAL_DMA_Init+0x1f0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a21      	ldr	r2, [pc, #132]	@ (8003f1c <HAL_DMA_Init+0x1f4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <HAL_DMA_Init+0x186>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e007      	b.n	8003ebe <HAL_DMA_Init+0x196>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ebe:	e02f      	b.n	8003f20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ec0:	f7fe fabc 	bl	800243c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d928      	bls.n	8003f20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e246      	b.n	800436e <HAL_DMA_Init+0x646>
 8003ee0:	40020010 	.word	0x40020010
 8003ee4:	40020028 	.word	0x40020028
 8003ee8:	40020040 	.word	0x40020040
 8003eec:	40020058 	.word	0x40020058
 8003ef0:	40020070 	.word	0x40020070
 8003ef4:	40020088 	.word	0x40020088
 8003ef8:	400200a0 	.word	0x400200a0
 8003efc:	400200b8 	.word	0x400200b8
 8003f00:	40020410 	.word	0x40020410
 8003f04:	40020428 	.word	0x40020428
 8003f08:	40020440 	.word	0x40020440
 8003f0c:	40020458 	.word	0x40020458
 8003f10:	40020470 	.word	0x40020470
 8003f14:	40020488 	.word	0x40020488
 8003f18:	400204a0 	.word	0x400204a0
 8003f1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1c8      	bne.n	8003ec0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4b83      	ldr	r3, [pc, #524]	@ (8004148 <HAL_DMA_Init+0x420>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d107      	bne.n	8003f84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f84:	4b71      	ldr	r3, [pc, #452]	@ (800414c <HAL_DMA_Init+0x424>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b71      	ldr	r3, [pc, #452]	@ (8004150 <HAL_DMA_Init+0x428>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f90:	d328      	bcc.n	8003fe4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b28      	cmp	r3, #40	@ 0x28
 8003f98:	d903      	bls.n	8003fa2 <HAL_DMA_Init+0x27a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fa0:	d917      	bls.n	8003fd2 <HAL_DMA_Init+0x2aa>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fa8:	d903      	bls.n	8003fb2 <HAL_DMA_Init+0x28a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b42      	cmp	r3, #66	@ 0x42
 8003fb0:	d90f      	bls.n	8003fd2 <HAL_DMA_Init+0x2aa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b46      	cmp	r3, #70	@ 0x46
 8003fb8:	d903      	bls.n	8003fc2 <HAL_DMA_Init+0x29a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b48      	cmp	r3, #72	@ 0x48
 8003fc0:	d907      	bls.n	8003fd2 <HAL_DMA_Init+0x2aa>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b4e      	cmp	r3, #78	@ 0x4e
 8003fc8:	d905      	bls.n	8003fd6 <HAL_DMA_Init+0x2ae>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b52      	cmp	r3, #82	@ 0x52
 8003fd0:	d801      	bhi.n	8003fd6 <HAL_DMA_Init+0x2ae>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <HAL_DMA_Init+0x2b0>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fe2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0307 	bic.w	r3, r3, #7
 8003ffa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	2b04      	cmp	r3, #4
 800400c:	d117      	bne.n	800403e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00e      	beq.n	800403e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f002 fb4d 	bl	80066c0 <DMA_CheckFifoParam>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2240      	movs	r2, #64	@ 0x40
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e197      	b.n	800436e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f002 fa88 	bl	800655c <DMA_CalcBaseAndBitshift>
 800404c:	4603      	mov	r3, r0
 800404e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	223f      	movs	r2, #63	@ 0x3f
 800405a:	409a      	lsls	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	e0cd      	b.n	80041fe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a3b      	ldr	r2, [pc, #236]	@ (8004154 <HAL_DMA_Init+0x42c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a39      	ldr	r2, [pc, #228]	@ (8004158 <HAL_DMA_Init+0x430>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a38      	ldr	r2, [pc, #224]	@ (800415c <HAL_DMA_Init+0x434>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a36      	ldr	r2, [pc, #216]	@ (8004160 <HAL_DMA_Init+0x438>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a35      	ldr	r2, [pc, #212]	@ (8004164 <HAL_DMA_Init+0x43c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a33      	ldr	r2, [pc, #204]	@ (8004168 <HAL_DMA_Init+0x440>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a32      	ldr	r2, [pc, #200]	@ (800416c <HAL_DMA_Init+0x444>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a30      	ldr	r2, [pc, #192]	@ (8004170 <HAL_DMA_Init+0x448>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <HAL_DMA_Init+0x38e>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_DMA_Init+0x390>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8097 	beq.w	80041ec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a24      	ldr	r2, [pc, #144]	@ (8004154 <HAL_DMA_Init+0x42c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d021      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a22      	ldr	r2, [pc, #136]	@ (8004158 <HAL_DMA_Init+0x430>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01c      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a21      	ldr	r2, [pc, #132]	@ (800415c <HAL_DMA_Init+0x434>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d017      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004160 <HAL_DMA_Init+0x438>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d012      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004164 <HAL_DMA_Init+0x43c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00d      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004168 <HAL_DMA_Init+0x440>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d008      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1b      	ldr	r2, [pc, #108]	@ (800416c <HAL_DMA_Init+0x444>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a19      	ldr	r2, [pc, #100]	@ (8004170 <HAL_DMA_Init+0x448>)
 800410a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4b13      	ldr	r3, [pc, #76]	@ (8004174 <HAL_DMA_Init+0x44c>)
 8004128:	4013      	ands	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b40      	cmp	r3, #64	@ 0x40
 8004132:	d021      	beq.n	8004178 <HAL_DMA_Init+0x450>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b80      	cmp	r3, #128	@ 0x80
 800413a:	d102      	bne.n	8004142 <HAL_DMA_Init+0x41a>
 800413c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004140:	e01b      	b.n	800417a <HAL_DMA_Init+0x452>
 8004142:	2300      	movs	r3, #0
 8004144:	e019      	b.n	800417a <HAL_DMA_Init+0x452>
 8004146:	bf00      	nop
 8004148:	fe10803f 	.word	0xfe10803f
 800414c:	5c001000 	.word	0x5c001000
 8004150:	ffff0000 	.word	0xffff0000
 8004154:	58025408 	.word	0x58025408
 8004158:	5802541c 	.word	0x5802541c
 800415c:	58025430 	.word	0x58025430
 8004160:	58025444 	.word	0x58025444
 8004164:	58025458 	.word	0x58025458
 8004168:	5802546c 	.word	0x5802546c
 800416c:	58025480 	.word	0x58025480
 8004170:	58025494 	.word	0x58025494
 8004174:	fffe000f 	.word	0xfffe000f
 8004178:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68d2      	ldr	r2, [r2, #12]
 800417e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	4b6e      	ldr	r3, [pc, #440]	@ (8004378 <HAL_DMA_Init+0x650>)
 80041c0:	4413      	add	r3, r2
 80041c2:	4a6e      	ldr	r2, [pc, #440]	@ (800437c <HAL_DMA_Init+0x654>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f002 f9c3 	bl	800655c <DMA_CalcBaseAndBitshift>
 80041d6:	4603      	mov	r3, r0
 80041d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2201      	movs	r2, #1
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	e008      	b.n	80041fe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2240      	movs	r2, #64	@ 0x40
 80041f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2203      	movs	r2, #3
 80041f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0b7      	b.n	800436e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a5f      	ldr	r2, [pc, #380]	@ (8004380 <HAL_DMA_Init+0x658>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d072      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a5d      	ldr	r2, [pc, #372]	@ (8004384 <HAL_DMA_Init+0x65c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d06d      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a5c      	ldr	r2, [pc, #368]	@ (8004388 <HAL_DMA_Init+0x660>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d068      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a5a      	ldr	r2, [pc, #360]	@ (800438c <HAL_DMA_Init+0x664>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d063      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a59      	ldr	r2, [pc, #356]	@ (8004390 <HAL_DMA_Init+0x668>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d05e      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a57      	ldr	r2, [pc, #348]	@ (8004394 <HAL_DMA_Init+0x66c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d059      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a56      	ldr	r2, [pc, #344]	@ (8004398 <HAL_DMA_Init+0x670>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d054      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a54      	ldr	r2, [pc, #336]	@ (800439c <HAL_DMA_Init+0x674>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d04f      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a53      	ldr	r2, [pc, #332]	@ (80043a0 <HAL_DMA_Init+0x678>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d04a      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a51      	ldr	r2, [pc, #324]	@ (80043a4 <HAL_DMA_Init+0x67c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d045      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a50      	ldr	r2, [pc, #320]	@ (80043a8 <HAL_DMA_Init+0x680>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d040      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a4e      	ldr	r2, [pc, #312]	@ (80043ac <HAL_DMA_Init+0x684>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d03b      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a4d      	ldr	r2, [pc, #308]	@ (80043b0 <HAL_DMA_Init+0x688>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d036      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a4b      	ldr	r2, [pc, #300]	@ (80043b4 <HAL_DMA_Init+0x68c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d031      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a4a      	ldr	r2, [pc, #296]	@ (80043b8 <HAL_DMA_Init+0x690>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d02c      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a48      	ldr	r2, [pc, #288]	@ (80043bc <HAL_DMA_Init+0x694>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d027      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a47      	ldr	r2, [pc, #284]	@ (80043c0 <HAL_DMA_Init+0x698>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a45      	ldr	r2, [pc, #276]	@ (80043c4 <HAL_DMA_Init+0x69c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01d      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a44      	ldr	r2, [pc, #272]	@ (80043c8 <HAL_DMA_Init+0x6a0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a42      	ldr	r2, [pc, #264]	@ (80043cc <HAL_DMA_Init+0x6a4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a41      	ldr	r2, [pc, #260]	@ (80043d0 <HAL_DMA_Init+0x6a8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3f      	ldr	r2, [pc, #252]	@ (80043d4 <HAL_DMA_Init+0x6ac>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3e      	ldr	r2, [pc, #248]	@ (80043d8 <HAL_DMA_Init+0x6b0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a3c      	ldr	r2, [pc, #240]	@ (80043dc <HAL_DMA_Init+0x6b4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <HAL_DMA_Init+0x5ca>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_DMA_Init+0x5cc>
 80042f2:	2300      	movs	r3, #0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d032      	beq.n	800435e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f002 fa5d 	bl	80067b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b80      	cmp	r3, #128	@ 0x80
 8004304:	d102      	bne.n	800430c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004320:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d010      	beq.n	800434c <HAL_DMA_Init+0x624>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b08      	cmp	r3, #8
 8004330:	d80c      	bhi.n	800434c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f002 fada 	bl	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	e008      	b.n	800435e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	a7fdabf8 	.word	0xa7fdabf8
 800437c:	cccccccd 	.word	0xcccccccd
 8004380:	40020010 	.word	0x40020010
 8004384:	40020028 	.word	0x40020028
 8004388:	40020040 	.word	0x40020040
 800438c:	40020058 	.word	0x40020058
 8004390:	40020070 	.word	0x40020070
 8004394:	40020088 	.word	0x40020088
 8004398:	400200a0 	.word	0x400200a0
 800439c:	400200b8 	.word	0x400200b8
 80043a0:	40020410 	.word	0x40020410
 80043a4:	40020428 	.word	0x40020428
 80043a8:	40020440 	.word	0x40020440
 80043ac:	40020458 	.word	0x40020458
 80043b0:	40020470 	.word	0x40020470
 80043b4:	40020488 	.word	0x40020488
 80043b8:	400204a0 	.word	0x400204a0
 80043bc:	400204b8 	.word	0x400204b8
 80043c0:	58025408 	.word	0x58025408
 80043c4:	5802541c 	.word	0x5802541c
 80043c8:	58025430 	.word	0x58025430
 80043cc:	58025444 	.word	0x58025444
 80043d0:	58025458 	.word	0x58025458
 80043d4:	5802546c 	.word	0x5802546c
 80043d8:	58025480 	.word	0x58025480
 80043dc:	58025494 	.word	0x58025494

080043e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e226      	b.n	800484a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_DMA_Start_IT+0x2a>
 8004406:	2302      	movs	r3, #2
 8004408:	e21f      	b.n	800484a <HAL_DMA_Start_IT+0x46a>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	f040 820a 	bne.w	8004834 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a68      	ldr	r2, [pc, #416]	@ (80045d4 <HAL_DMA_Start_IT+0x1f4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d04a      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a66      	ldr	r2, [pc, #408]	@ (80045d8 <HAL_DMA_Start_IT+0x1f8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d045      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a65      	ldr	r2, [pc, #404]	@ (80045dc <HAL_DMA_Start_IT+0x1fc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d040      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a63      	ldr	r2, [pc, #396]	@ (80045e0 <HAL_DMA_Start_IT+0x200>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d03b      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a62      	ldr	r2, [pc, #392]	@ (80045e4 <HAL_DMA_Start_IT+0x204>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d036      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a60      	ldr	r2, [pc, #384]	@ (80045e8 <HAL_DMA_Start_IT+0x208>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d031      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a5f      	ldr	r2, [pc, #380]	@ (80045ec <HAL_DMA_Start_IT+0x20c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d02c      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a5d      	ldr	r2, [pc, #372]	@ (80045f0 <HAL_DMA_Start_IT+0x210>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d027      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a5c      	ldr	r2, [pc, #368]	@ (80045f4 <HAL_DMA_Start_IT+0x214>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d022      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a5a      	ldr	r2, [pc, #360]	@ (80045f8 <HAL_DMA_Start_IT+0x218>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01d      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a59      	ldr	r2, [pc, #356]	@ (80045fc <HAL_DMA_Start_IT+0x21c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d018      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a57      	ldr	r2, [pc, #348]	@ (8004600 <HAL_DMA_Start_IT+0x220>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a56      	ldr	r2, [pc, #344]	@ (8004604 <HAL_DMA_Start_IT+0x224>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00e      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a54      	ldr	r2, [pc, #336]	@ (8004608 <HAL_DMA_Start_IT+0x228>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d009      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a53      	ldr	r2, [pc, #332]	@ (800460c <HAL_DMA_Start_IT+0x22c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d004      	beq.n	80044ce <HAL_DMA_Start_IT+0xee>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a51      	ldr	r2, [pc, #324]	@ (8004610 <HAL_DMA_Start_IT+0x230>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d108      	bne.n	80044e0 <HAL_DMA_Start_IT+0x100>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e007      	b.n	80044f0 <HAL_DMA_Start_IT+0x110>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f001 fe84 	bl	8006204 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a34      	ldr	r2, [pc, #208]	@ (80045d4 <HAL_DMA_Start_IT+0x1f4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d04a      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a33      	ldr	r2, [pc, #204]	@ (80045d8 <HAL_DMA_Start_IT+0x1f8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d045      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a31      	ldr	r2, [pc, #196]	@ (80045dc <HAL_DMA_Start_IT+0x1fc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d040      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a30      	ldr	r2, [pc, #192]	@ (80045e0 <HAL_DMA_Start_IT+0x200>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d03b      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2e      	ldr	r2, [pc, #184]	@ (80045e4 <HAL_DMA_Start_IT+0x204>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d036      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2d      	ldr	r2, [pc, #180]	@ (80045e8 <HAL_DMA_Start_IT+0x208>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d031      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a2b      	ldr	r2, [pc, #172]	@ (80045ec <HAL_DMA_Start_IT+0x20c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d02c      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a2a      	ldr	r2, [pc, #168]	@ (80045f0 <HAL_DMA_Start_IT+0x210>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d027      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a28      	ldr	r2, [pc, #160]	@ (80045f4 <HAL_DMA_Start_IT+0x214>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d022      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a27      	ldr	r2, [pc, #156]	@ (80045f8 <HAL_DMA_Start_IT+0x218>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d01d      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a25      	ldr	r2, [pc, #148]	@ (80045fc <HAL_DMA_Start_IT+0x21c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d018      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a24      	ldr	r2, [pc, #144]	@ (8004600 <HAL_DMA_Start_IT+0x220>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a22      	ldr	r2, [pc, #136]	@ (8004604 <HAL_DMA_Start_IT+0x224>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a21      	ldr	r2, [pc, #132]	@ (8004608 <HAL_DMA_Start_IT+0x228>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1f      	ldr	r2, [pc, #124]	@ (800460c <HAL_DMA_Start_IT+0x22c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_DMA_Start_IT+0x1bc>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1e      	ldr	r2, [pc, #120]	@ (8004610 <HAL_DMA_Start_IT+0x230>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d101      	bne.n	80045a0 <HAL_DMA_Start_IT+0x1c0>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <HAL_DMA_Start_IT+0x1c2>
 80045a0:	2300      	movs	r3, #0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d036      	beq.n	8004614 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 021e 	bic.w	r2, r3, #30
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0216 	orr.w	r2, r2, #22
 80045b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d03e      	beq.n	8004640 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0208 	orr.w	r2, r2, #8
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	e035      	b.n	8004640 <HAL_DMA_Start_IT+0x260>
 80045d4:	40020010 	.word	0x40020010
 80045d8:	40020028 	.word	0x40020028
 80045dc:	40020040 	.word	0x40020040
 80045e0:	40020058 	.word	0x40020058
 80045e4:	40020070 	.word	0x40020070
 80045e8:	40020088 	.word	0x40020088
 80045ec:	400200a0 	.word	0x400200a0
 80045f0:	400200b8 	.word	0x400200b8
 80045f4:	40020410 	.word	0x40020410
 80045f8:	40020428 	.word	0x40020428
 80045fc:	40020440 	.word	0x40020440
 8004600:	40020458 	.word	0x40020458
 8004604:	40020470 	.word	0x40020470
 8004608:	40020488 	.word	0x40020488
 800460c:	400204a0 	.word	0x400204a0
 8004610:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 020e 	bic.w	r2, r3, #14
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 020a 	orr.w	r2, r2, #10
 8004626:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0204 	orr.w	r2, r2, #4
 800463e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a83      	ldr	r2, [pc, #524]	@ (8004854 <HAL_DMA_Start_IT+0x474>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d072      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a82      	ldr	r2, [pc, #520]	@ (8004858 <HAL_DMA_Start_IT+0x478>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d06d      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a80      	ldr	r2, [pc, #512]	@ (800485c <HAL_DMA_Start_IT+0x47c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d068      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a7f      	ldr	r2, [pc, #508]	@ (8004860 <HAL_DMA_Start_IT+0x480>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d063      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a7d      	ldr	r2, [pc, #500]	@ (8004864 <HAL_DMA_Start_IT+0x484>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d05e      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a7c      	ldr	r2, [pc, #496]	@ (8004868 <HAL_DMA_Start_IT+0x488>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d059      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a7a      	ldr	r2, [pc, #488]	@ (800486c <HAL_DMA_Start_IT+0x48c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d054      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a79      	ldr	r2, [pc, #484]	@ (8004870 <HAL_DMA_Start_IT+0x490>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d04f      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a77      	ldr	r2, [pc, #476]	@ (8004874 <HAL_DMA_Start_IT+0x494>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d04a      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a76      	ldr	r2, [pc, #472]	@ (8004878 <HAL_DMA_Start_IT+0x498>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d045      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a74      	ldr	r2, [pc, #464]	@ (800487c <HAL_DMA_Start_IT+0x49c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d040      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a73      	ldr	r2, [pc, #460]	@ (8004880 <HAL_DMA_Start_IT+0x4a0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d03b      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a71      	ldr	r2, [pc, #452]	@ (8004884 <HAL_DMA_Start_IT+0x4a4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d036      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a70      	ldr	r2, [pc, #448]	@ (8004888 <HAL_DMA_Start_IT+0x4a8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d031      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a6e      	ldr	r2, [pc, #440]	@ (800488c <HAL_DMA_Start_IT+0x4ac>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d02c      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6d      	ldr	r2, [pc, #436]	@ (8004890 <HAL_DMA_Start_IT+0x4b0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d027      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004894 <HAL_DMA_Start_IT+0x4b4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d022      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6a      	ldr	r2, [pc, #424]	@ (8004898 <HAL_DMA_Start_IT+0x4b8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d01d      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a68      	ldr	r2, [pc, #416]	@ (800489c <HAL_DMA_Start_IT+0x4bc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a67      	ldr	r2, [pc, #412]	@ (80048a0 <HAL_DMA_Start_IT+0x4c0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a65      	ldr	r2, [pc, #404]	@ (80048a4 <HAL_DMA_Start_IT+0x4c4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a64      	ldr	r2, [pc, #400]	@ (80048a8 <HAL_DMA_Start_IT+0x4c8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a62      	ldr	r2, [pc, #392]	@ (80048ac <HAL_DMA_Start_IT+0x4cc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_DMA_Start_IT+0x350>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a61      	ldr	r2, [pc, #388]	@ (80048b0 <HAL_DMA_Start_IT+0x4d0>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <HAL_DMA_Start_IT+0x354>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_DMA_Start_IT+0x356>
 8004734:	2300      	movs	r3, #0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01a      	beq.n	8004770 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004756:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800476e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a37      	ldr	r2, [pc, #220]	@ (8004854 <HAL_DMA_Start_IT+0x474>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d04a      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a36      	ldr	r2, [pc, #216]	@ (8004858 <HAL_DMA_Start_IT+0x478>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d045      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a34      	ldr	r2, [pc, #208]	@ (800485c <HAL_DMA_Start_IT+0x47c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d040      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a33      	ldr	r2, [pc, #204]	@ (8004860 <HAL_DMA_Start_IT+0x480>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d03b      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a31      	ldr	r2, [pc, #196]	@ (8004864 <HAL_DMA_Start_IT+0x484>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d036      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a30      	ldr	r2, [pc, #192]	@ (8004868 <HAL_DMA_Start_IT+0x488>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d031      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2e      	ldr	r2, [pc, #184]	@ (800486c <HAL_DMA_Start_IT+0x48c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02c      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004870 <HAL_DMA_Start_IT+0x490>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d027      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004874 <HAL_DMA_Start_IT+0x494>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004878 <HAL_DMA_Start_IT+0x498>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01d      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a28      	ldr	r2, [pc, #160]	@ (800487c <HAL_DMA_Start_IT+0x49c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a27      	ldr	r2, [pc, #156]	@ (8004880 <HAL_DMA_Start_IT+0x4a0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a25      	ldr	r2, [pc, #148]	@ (8004884 <HAL_DMA_Start_IT+0x4a4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a24      	ldr	r2, [pc, #144]	@ (8004888 <HAL_DMA_Start_IT+0x4a8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a22      	ldr	r2, [pc, #136]	@ (800488c <HAL_DMA_Start_IT+0x4ac>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_DMA_Start_IT+0x430>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a21      	ldr	r2, [pc, #132]	@ (8004890 <HAL_DMA_Start_IT+0x4b0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <HAL_DMA_Start_IT+0x442>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e012      	b.n	8004848 <HAL_DMA_Start_IT+0x468>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e009      	b.n	8004848 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800483a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004848:	7dfb      	ldrb	r3, [r7, #23]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40020010 	.word	0x40020010
 8004858:	40020028 	.word	0x40020028
 800485c:	40020040 	.word	0x40020040
 8004860:	40020058 	.word	0x40020058
 8004864:	40020070 	.word	0x40020070
 8004868:	40020088 	.word	0x40020088
 800486c:	400200a0 	.word	0x400200a0
 8004870:	400200b8 	.word	0x400200b8
 8004874:	40020410 	.word	0x40020410
 8004878:	40020428 	.word	0x40020428
 800487c:	40020440 	.word	0x40020440
 8004880:	40020458 	.word	0x40020458
 8004884:	40020470 	.word	0x40020470
 8004888:	40020488 	.word	0x40020488
 800488c:	400204a0 	.word	0x400204a0
 8004890:	400204b8 	.word	0x400204b8
 8004894:	58025408 	.word	0x58025408
 8004898:	5802541c 	.word	0x5802541c
 800489c:	58025430 	.word	0x58025430
 80048a0:	58025444 	.word	0x58025444
 80048a4:	58025458 	.word	0x58025458
 80048a8:	5802546c 	.word	0x5802546c
 80048ac:	58025480 	.word	0x58025480
 80048b0:	58025494 	.word	0x58025494

080048b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80048bc:	f7fd fdbe 	bl	800243c <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e2dc      	b.n	8004e86 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d008      	beq.n	80048ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2280      	movs	r2, #128	@ 0x80
 80048dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e2cd      	b.n	8004e86 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a76      	ldr	r2, [pc, #472]	@ (8004ac8 <HAL_DMA_Abort+0x214>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d04a      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a74      	ldr	r2, [pc, #464]	@ (8004acc <HAL_DMA_Abort+0x218>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d045      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a73      	ldr	r2, [pc, #460]	@ (8004ad0 <HAL_DMA_Abort+0x21c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d040      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a71      	ldr	r2, [pc, #452]	@ (8004ad4 <HAL_DMA_Abort+0x220>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d03b      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a70      	ldr	r2, [pc, #448]	@ (8004ad8 <HAL_DMA_Abort+0x224>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d036      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a6e      	ldr	r2, [pc, #440]	@ (8004adc <HAL_DMA_Abort+0x228>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d031      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6d      	ldr	r2, [pc, #436]	@ (8004ae0 <HAL_DMA_Abort+0x22c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d02c      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a6b      	ldr	r2, [pc, #428]	@ (8004ae4 <HAL_DMA_Abort+0x230>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d027      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a6a      	ldr	r2, [pc, #424]	@ (8004ae8 <HAL_DMA_Abort+0x234>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a68      	ldr	r2, [pc, #416]	@ (8004aec <HAL_DMA_Abort+0x238>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01d      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a67      	ldr	r2, [pc, #412]	@ (8004af0 <HAL_DMA_Abort+0x23c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a65      	ldr	r2, [pc, #404]	@ (8004af4 <HAL_DMA_Abort+0x240>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a64      	ldr	r2, [pc, #400]	@ (8004af8 <HAL_DMA_Abort+0x244>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a62      	ldr	r2, [pc, #392]	@ (8004afc <HAL_DMA_Abort+0x248>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a61      	ldr	r2, [pc, #388]	@ (8004b00 <HAL_DMA_Abort+0x24c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_DMA_Abort+0xd6>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a5f      	ldr	r2, [pc, #380]	@ (8004b04 <HAL_DMA_Abort+0x250>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d101      	bne.n	800498e <HAL_DMA_Abort+0xda>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <HAL_DMA_Abort+0xdc>
 800498e:	2300      	movs	r3, #0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d013      	beq.n	80049bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 021e 	bic.w	r2, r2, #30
 80049a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e00a      	b.n	80049d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 020e 	bic.w	r2, r2, #14
 80049ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac8 <HAL_DMA_Abort+0x214>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d072      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a3a      	ldr	r2, [pc, #232]	@ (8004acc <HAL_DMA_Abort+0x218>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d06d      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a39      	ldr	r2, [pc, #228]	@ (8004ad0 <HAL_DMA_Abort+0x21c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d068      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a37      	ldr	r2, [pc, #220]	@ (8004ad4 <HAL_DMA_Abort+0x220>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d063      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a36      	ldr	r2, [pc, #216]	@ (8004ad8 <HAL_DMA_Abort+0x224>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d05e      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a34      	ldr	r2, [pc, #208]	@ (8004adc <HAL_DMA_Abort+0x228>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d059      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a33      	ldr	r2, [pc, #204]	@ (8004ae0 <HAL_DMA_Abort+0x22c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d054      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a31      	ldr	r2, [pc, #196]	@ (8004ae4 <HAL_DMA_Abort+0x230>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d04f      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a30      	ldr	r2, [pc, #192]	@ (8004ae8 <HAL_DMA_Abort+0x234>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d04a      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2e      	ldr	r2, [pc, #184]	@ (8004aec <HAL_DMA_Abort+0x238>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d045      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8004af0 <HAL_DMA_Abort+0x23c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d040      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a2b      	ldr	r2, [pc, #172]	@ (8004af4 <HAL_DMA_Abort+0x240>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d03b      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004af8 <HAL_DMA_Abort+0x244>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d036      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a28      	ldr	r2, [pc, #160]	@ (8004afc <HAL_DMA_Abort+0x248>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d031      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a27      	ldr	r2, [pc, #156]	@ (8004b00 <HAL_DMA_Abort+0x24c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d02c      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a25      	ldr	r2, [pc, #148]	@ (8004b04 <HAL_DMA_Abort+0x250>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d027      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a24      	ldr	r2, [pc, #144]	@ (8004b08 <HAL_DMA_Abort+0x254>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d022      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a22      	ldr	r2, [pc, #136]	@ (8004b0c <HAL_DMA_Abort+0x258>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01d      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a21      	ldr	r2, [pc, #132]	@ (8004b10 <HAL_DMA_Abort+0x25c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d018      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	@ (8004b14 <HAL_DMA_Abort+0x260>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b18 <HAL_DMA_Abort+0x264>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b1c <HAL_DMA_Abort+0x268>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b20 <HAL_DMA_Abort+0x26c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_DMA_Abort+0x20e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a19      	ldr	r2, [pc, #100]	@ (8004b24 <HAL_DMA_Abort+0x270>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d132      	bne.n	8004b28 <HAL_DMA_Abort+0x274>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e031      	b.n	8004b2a <HAL_DMA_Abort+0x276>
 8004ac6:	bf00      	nop
 8004ac8:	40020010 	.word	0x40020010
 8004acc:	40020028 	.word	0x40020028
 8004ad0:	40020040 	.word	0x40020040
 8004ad4:	40020058 	.word	0x40020058
 8004ad8:	40020070 	.word	0x40020070
 8004adc:	40020088 	.word	0x40020088
 8004ae0:	400200a0 	.word	0x400200a0
 8004ae4:	400200b8 	.word	0x400200b8
 8004ae8:	40020410 	.word	0x40020410
 8004aec:	40020428 	.word	0x40020428
 8004af0:	40020440 	.word	0x40020440
 8004af4:	40020458 	.word	0x40020458
 8004af8:	40020470 	.word	0x40020470
 8004afc:	40020488 	.word	0x40020488
 8004b00:	400204a0 	.word	0x400204a0
 8004b04:	400204b8 	.word	0x400204b8
 8004b08:	58025408 	.word	0x58025408
 8004b0c:	5802541c 	.word	0x5802541c
 8004b10:	58025430 	.word	0x58025430
 8004b14:	58025444 	.word	0x58025444
 8004b18:	58025458 	.word	0x58025458
 8004b1c:	5802546c 	.word	0x5802546c
 8004b20:	58025480 	.word	0x58025480
 8004b24:	58025494 	.word	0x58025494
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a6d      	ldr	r2, [pc, #436]	@ (8004cf8 <HAL_DMA_Abort+0x444>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d04a      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8004cfc <HAL_DMA_Abort+0x448>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d045      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a6a      	ldr	r2, [pc, #424]	@ (8004d00 <HAL_DMA_Abort+0x44c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d040      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a68      	ldr	r2, [pc, #416]	@ (8004d04 <HAL_DMA_Abort+0x450>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d03b      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a67      	ldr	r2, [pc, #412]	@ (8004d08 <HAL_DMA_Abort+0x454>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d036      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a65      	ldr	r2, [pc, #404]	@ (8004d0c <HAL_DMA_Abort+0x458>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d031      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a64      	ldr	r2, [pc, #400]	@ (8004d10 <HAL_DMA_Abort+0x45c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d02c      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a62      	ldr	r2, [pc, #392]	@ (8004d14 <HAL_DMA_Abort+0x460>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d027      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a61      	ldr	r2, [pc, #388]	@ (8004d18 <HAL_DMA_Abort+0x464>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d022      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a5f      	ldr	r2, [pc, #380]	@ (8004d1c <HAL_DMA_Abort+0x468>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01d      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a5e      	ldr	r2, [pc, #376]	@ (8004d20 <HAL_DMA_Abort+0x46c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d018      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5c      	ldr	r2, [pc, #368]	@ (8004d24 <HAL_DMA_Abort+0x470>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5b      	ldr	r2, [pc, #364]	@ (8004d28 <HAL_DMA_Abort+0x474>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a59      	ldr	r2, [pc, #356]	@ (8004d2c <HAL_DMA_Abort+0x478>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a58      	ldr	r2, [pc, #352]	@ (8004d30 <HAL_DMA_Abort+0x47c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_DMA_Abort+0x32a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a56      	ldr	r2, [pc, #344]	@ (8004d34 <HAL_DMA_Abort+0x480>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d108      	bne.n	8004bf0 <HAL_DMA_Abort+0x33c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e007      	b.n	8004c00 <HAL_DMA_Abort+0x34c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c00:	e013      	b.n	8004c2a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c02:	f7fd fc1b 	bl	800243c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d90c      	bls.n	8004c2a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2203      	movs	r2, #3
 8004c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e12d      	b.n	8004e86 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e5      	bne.n	8004c02 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf8 <HAL_DMA_Abort+0x444>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d04a      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2d      	ldr	r2, [pc, #180]	@ (8004cfc <HAL_DMA_Abort+0x448>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d045      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d00 <HAL_DMA_Abort+0x44c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d040      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a2a      	ldr	r2, [pc, #168]	@ (8004d04 <HAL_DMA_Abort+0x450>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d03b      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a29      	ldr	r2, [pc, #164]	@ (8004d08 <HAL_DMA_Abort+0x454>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d036      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a27      	ldr	r2, [pc, #156]	@ (8004d0c <HAL_DMA_Abort+0x458>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d031      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a26      	ldr	r2, [pc, #152]	@ (8004d10 <HAL_DMA_Abort+0x45c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d02c      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a24      	ldr	r2, [pc, #144]	@ (8004d14 <HAL_DMA_Abort+0x460>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d027      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a23      	ldr	r2, [pc, #140]	@ (8004d18 <HAL_DMA_Abort+0x464>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d022      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a21      	ldr	r2, [pc, #132]	@ (8004d1c <HAL_DMA_Abort+0x468>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01d      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a20      	ldr	r2, [pc, #128]	@ (8004d20 <HAL_DMA_Abort+0x46c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d018      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d24 <HAL_DMA_Abort+0x470>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d013      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <HAL_DMA_Abort+0x474>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00e      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <HAL_DMA_Abort+0x478>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d009      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d30 <HAL_DMA_Abort+0x47c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d004      	beq.n	8004cd6 <HAL_DMA_Abort+0x422>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a18      	ldr	r2, [pc, #96]	@ (8004d34 <HAL_DMA_Abort+0x480>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_DMA_Abort+0x426>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <HAL_DMA_Abort+0x428>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d02b      	beq.n	8004d38 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	223f      	movs	r2, #63	@ 0x3f
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	609a      	str	r2, [r3, #8]
 8004cf6:	e02a      	b.n	8004d4e <HAL_DMA_Abort+0x49a>
 8004cf8:	40020010 	.word	0x40020010
 8004cfc:	40020028 	.word	0x40020028
 8004d00:	40020040 	.word	0x40020040
 8004d04:	40020058 	.word	0x40020058
 8004d08:	40020070 	.word	0x40020070
 8004d0c:	40020088 	.word	0x40020088
 8004d10:	400200a0 	.word	0x400200a0
 8004d14:	400200b8 	.word	0x400200b8
 8004d18:	40020410 	.word	0x40020410
 8004d1c:	40020428 	.word	0x40020428
 8004d20:	40020440 	.word	0x40020440
 8004d24:	40020458 	.word	0x40020458
 8004d28:	40020470 	.word	0x40020470
 8004d2c:	40020488 	.word	0x40020488
 8004d30:	400204a0 	.word	0x400204a0
 8004d34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	2201      	movs	r2, #1
 8004d48:	409a      	lsls	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a4f      	ldr	r2, [pc, #316]	@ (8004e90 <HAL_DMA_Abort+0x5dc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d072      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a4d      	ldr	r2, [pc, #308]	@ (8004e94 <HAL_DMA_Abort+0x5e0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d06d      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a4c      	ldr	r2, [pc, #304]	@ (8004e98 <HAL_DMA_Abort+0x5e4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d068      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a4a      	ldr	r2, [pc, #296]	@ (8004e9c <HAL_DMA_Abort+0x5e8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d063      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a49      	ldr	r2, [pc, #292]	@ (8004ea0 <HAL_DMA_Abort+0x5ec>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d05e      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a47      	ldr	r2, [pc, #284]	@ (8004ea4 <HAL_DMA_Abort+0x5f0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d059      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a46      	ldr	r2, [pc, #280]	@ (8004ea8 <HAL_DMA_Abort+0x5f4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d054      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a44      	ldr	r2, [pc, #272]	@ (8004eac <HAL_DMA_Abort+0x5f8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d04f      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a43      	ldr	r2, [pc, #268]	@ (8004eb0 <HAL_DMA_Abort+0x5fc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d04a      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a41      	ldr	r2, [pc, #260]	@ (8004eb4 <HAL_DMA_Abort+0x600>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d045      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a40      	ldr	r2, [pc, #256]	@ (8004eb8 <HAL_DMA_Abort+0x604>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d040      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3e      	ldr	r2, [pc, #248]	@ (8004ebc <HAL_DMA_Abort+0x608>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d03b      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a3d      	ldr	r2, [pc, #244]	@ (8004ec0 <HAL_DMA_Abort+0x60c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d036      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ec4 <HAL_DMA_Abort+0x610>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d031      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec8 <HAL_DMA_Abort+0x614>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d02c      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a38      	ldr	r2, [pc, #224]	@ (8004ecc <HAL_DMA_Abort+0x618>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d027      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a37      	ldr	r2, [pc, #220]	@ (8004ed0 <HAL_DMA_Abort+0x61c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a35      	ldr	r2, [pc, #212]	@ (8004ed4 <HAL_DMA_Abort+0x620>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01d      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a34      	ldr	r2, [pc, #208]	@ (8004ed8 <HAL_DMA_Abort+0x624>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a32      	ldr	r2, [pc, #200]	@ (8004edc <HAL_DMA_Abort+0x628>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a31      	ldr	r2, [pc, #196]	@ (8004ee0 <HAL_DMA_Abort+0x62c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a2f      	ldr	r2, [pc, #188]	@ (8004ee4 <HAL_DMA_Abort+0x630>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee8 <HAL_DMA_Abort+0x634>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_DMA_Abort+0x58a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2c      	ldr	r2, [pc, #176]	@ (8004eec <HAL_DMA_Abort+0x638>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d101      	bne.n	8004e42 <HAL_DMA_Abort+0x58e>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_DMA_Abort+0x590>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d015      	beq.n	8004e74 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e50:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00c      	beq.n	8004e74 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e68:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e72:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40020010 	.word	0x40020010
 8004e94:	40020028 	.word	0x40020028
 8004e98:	40020040 	.word	0x40020040
 8004e9c:	40020058 	.word	0x40020058
 8004ea0:	40020070 	.word	0x40020070
 8004ea4:	40020088 	.word	0x40020088
 8004ea8:	400200a0 	.word	0x400200a0
 8004eac:	400200b8 	.word	0x400200b8
 8004eb0:	40020410 	.word	0x40020410
 8004eb4:	40020428 	.word	0x40020428
 8004eb8:	40020440 	.word	0x40020440
 8004ebc:	40020458 	.word	0x40020458
 8004ec0:	40020470 	.word	0x40020470
 8004ec4:	40020488 	.word	0x40020488
 8004ec8:	400204a0 	.word	0x400204a0
 8004ecc:	400204b8 	.word	0x400204b8
 8004ed0:	58025408 	.word	0x58025408
 8004ed4:	5802541c 	.word	0x5802541c
 8004ed8:	58025430 	.word	0x58025430
 8004edc:	58025444 	.word	0x58025444
 8004ee0:	58025458 	.word	0x58025458
 8004ee4:	5802546c 	.word	0x5802546c
 8004ee8:	58025480 	.word	0x58025480
 8004eec:	58025494 	.word	0x58025494

08004ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e237      	b.n	8005372 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d004      	beq.n	8004f18 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2280      	movs	r2, #128	@ 0x80
 8004f12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e22c      	b.n	8005372 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5c      	ldr	r2, [pc, #368]	@ (8005090 <HAL_DMA_Abort_IT+0x1a0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d04a      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5b      	ldr	r2, [pc, #364]	@ (8005094 <HAL_DMA_Abort_IT+0x1a4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d045      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a59      	ldr	r2, [pc, #356]	@ (8005098 <HAL_DMA_Abort_IT+0x1a8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d040      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a58      	ldr	r2, [pc, #352]	@ (800509c <HAL_DMA_Abort_IT+0x1ac>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d03b      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a56      	ldr	r2, [pc, #344]	@ (80050a0 <HAL_DMA_Abort_IT+0x1b0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d036      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a55      	ldr	r2, [pc, #340]	@ (80050a4 <HAL_DMA_Abort_IT+0x1b4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d031      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a53      	ldr	r2, [pc, #332]	@ (80050a8 <HAL_DMA_Abort_IT+0x1b8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d02c      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a52      	ldr	r2, [pc, #328]	@ (80050ac <HAL_DMA_Abort_IT+0x1bc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d027      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a50      	ldr	r2, [pc, #320]	@ (80050b0 <HAL_DMA_Abort_IT+0x1c0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d022      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a4f      	ldr	r2, [pc, #316]	@ (80050b4 <HAL_DMA_Abort_IT+0x1c4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d01d      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a4d      	ldr	r2, [pc, #308]	@ (80050b8 <HAL_DMA_Abort_IT+0x1c8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a4c      	ldr	r2, [pc, #304]	@ (80050bc <HAL_DMA_Abort_IT+0x1cc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a4a      	ldr	r2, [pc, #296]	@ (80050c0 <HAL_DMA_Abort_IT+0x1d0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a49      	ldr	r2, [pc, #292]	@ (80050c4 <HAL_DMA_Abort_IT+0x1d4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a47      	ldr	r2, [pc, #284]	@ (80050c8 <HAL_DMA_Abort_IT+0x1d8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0xc8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a46      	ldr	r2, [pc, #280]	@ (80050cc <HAL_DMA_Abort_IT+0x1dc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <HAL_DMA_Abort_IT+0xcc>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_DMA_Abort_IT+0xce>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8086 	beq.w	80050d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8005090 <HAL_DMA_Abort_IT+0x1a0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d04a      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a2e      	ldr	r2, [pc, #184]	@ (8005094 <HAL_DMA_Abort_IT+0x1a4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d045      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8005098 <HAL_DMA_Abort_IT+0x1a8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d040      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2b      	ldr	r2, [pc, #172]	@ (800509c <HAL_DMA_Abort_IT+0x1ac>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d03b      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a29      	ldr	r2, [pc, #164]	@ (80050a0 <HAL_DMA_Abort_IT+0x1b0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d036      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a28      	ldr	r2, [pc, #160]	@ (80050a4 <HAL_DMA_Abort_IT+0x1b4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d031      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a26      	ldr	r2, [pc, #152]	@ (80050a8 <HAL_DMA_Abort_IT+0x1b8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d02c      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a25      	ldr	r2, [pc, #148]	@ (80050ac <HAL_DMA_Abort_IT+0x1bc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d027      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a23      	ldr	r2, [pc, #140]	@ (80050b0 <HAL_DMA_Abort_IT+0x1c0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d022      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a22      	ldr	r2, [pc, #136]	@ (80050b4 <HAL_DMA_Abort_IT+0x1c4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d01d      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a20      	ldr	r2, [pc, #128]	@ (80050b8 <HAL_DMA_Abort_IT+0x1c8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d018      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1f      	ldr	r2, [pc, #124]	@ (80050bc <HAL_DMA_Abort_IT+0x1cc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d013      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1d      	ldr	r2, [pc, #116]	@ (80050c0 <HAL_DMA_Abort_IT+0x1d0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00e      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1c      	ldr	r2, [pc, #112]	@ (80050c4 <HAL_DMA_Abort_IT+0x1d4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d009      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1a      	ldr	r2, [pc, #104]	@ (80050c8 <HAL_DMA_Abort_IT+0x1d8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_DMA_Abort_IT+0x17c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a19      	ldr	r2, [pc, #100]	@ (80050cc <HAL_DMA_Abort_IT+0x1dc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d108      	bne.n	800507e <HAL_DMA_Abort_IT+0x18e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0201 	bic.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e178      	b.n	8005370 <HAL_DMA_Abort_IT+0x480>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e16f      	b.n	8005370 <HAL_DMA_Abort_IT+0x480>
 8005090:	40020010 	.word	0x40020010
 8005094:	40020028 	.word	0x40020028
 8005098:	40020040 	.word	0x40020040
 800509c:	40020058 	.word	0x40020058
 80050a0:	40020070 	.word	0x40020070
 80050a4:	40020088 	.word	0x40020088
 80050a8:	400200a0 	.word	0x400200a0
 80050ac:	400200b8 	.word	0x400200b8
 80050b0:	40020410 	.word	0x40020410
 80050b4:	40020428 	.word	0x40020428
 80050b8:	40020440 	.word	0x40020440
 80050bc:	40020458 	.word	0x40020458
 80050c0:	40020470 	.word	0x40020470
 80050c4:	40020488 	.word	0x40020488
 80050c8:	400204a0 	.word	0x400204a0
 80050cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 020e 	bic.w	r2, r2, #14
 80050de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a6c      	ldr	r2, [pc, #432]	@ (8005298 <HAL_DMA_Abort_IT+0x3a8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d04a      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a6b      	ldr	r2, [pc, #428]	@ (800529c <HAL_DMA_Abort_IT+0x3ac>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d045      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a69      	ldr	r2, [pc, #420]	@ (80052a0 <HAL_DMA_Abort_IT+0x3b0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d040      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a68      	ldr	r2, [pc, #416]	@ (80052a4 <HAL_DMA_Abort_IT+0x3b4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d03b      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a66      	ldr	r2, [pc, #408]	@ (80052a8 <HAL_DMA_Abort_IT+0x3b8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d036      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a65      	ldr	r2, [pc, #404]	@ (80052ac <HAL_DMA_Abort_IT+0x3bc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d031      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a63      	ldr	r2, [pc, #396]	@ (80052b0 <HAL_DMA_Abort_IT+0x3c0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d02c      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a62      	ldr	r2, [pc, #392]	@ (80052b4 <HAL_DMA_Abort_IT+0x3c4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d027      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a60      	ldr	r2, [pc, #384]	@ (80052b8 <HAL_DMA_Abort_IT+0x3c8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d022      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a5f      	ldr	r2, [pc, #380]	@ (80052bc <HAL_DMA_Abort_IT+0x3cc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d01d      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a5d      	ldr	r2, [pc, #372]	@ (80052c0 <HAL_DMA_Abort_IT+0x3d0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a5c      	ldr	r2, [pc, #368]	@ (80052c4 <HAL_DMA_Abort_IT+0x3d4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a5a      	ldr	r2, [pc, #360]	@ (80052c8 <HAL_DMA_Abort_IT+0x3d8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a59      	ldr	r2, [pc, #356]	@ (80052cc <HAL_DMA_Abort_IT+0x3dc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a57      	ldr	r2, [pc, #348]	@ (80052d0 <HAL_DMA_Abort_IT+0x3e0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_DMA_Abort_IT+0x290>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a56      	ldr	r2, [pc, #344]	@ (80052d4 <HAL_DMA_Abort_IT+0x3e4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d108      	bne.n	8005192 <HAL_DMA_Abort_IT+0x2a2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e007      	b.n	80051a2 <HAL_DMA_Abort_IT+0x2b2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a3c      	ldr	r2, [pc, #240]	@ (8005298 <HAL_DMA_Abort_IT+0x3a8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d072      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3a      	ldr	r2, [pc, #232]	@ (800529c <HAL_DMA_Abort_IT+0x3ac>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d06d      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a39      	ldr	r2, [pc, #228]	@ (80052a0 <HAL_DMA_Abort_IT+0x3b0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d068      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a37      	ldr	r2, [pc, #220]	@ (80052a4 <HAL_DMA_Abort_IT+0x3b4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d063      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a36      	ldr	r2, [pc, #216]	@ (80052a8 <HAL_DMA_Abort_IT+0x3b8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d05e      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a34      	ldr	r2, [pc, #208]	@ (80052ac <HAL_DMA_Abort_IT+0x3bc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d059      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a33      	ldr	r2, [pc, #204]	@ (80052b0 <HAL_DMA_Abort_IT+0x3c0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d054      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a31      	ldr	r2, [pc, #196]	@ (80052b4 <HAL_DMA_Abort_IT+0x3c4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d04f      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a30      	ldr	r2, [pc, #192]	@ (80052b8 <HAL_DMA_Abort_IT+0x3c8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d04a      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2e      	ldr	r2, [pc, #184]	@ (80052bc <HAL_DMA_Abort_IT+0x3cc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d045      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a2d      	ldr	r2, [pc, #180]	@ (80052c0 <HAL_DMA_Abort_IT+0x3d0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d040      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2b      	ldr	r2, [pc, #172]	@ (80052c4 <HAL_DMA_Abort_IT+0x3d4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d03b      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2a      	ldr	r2, [pc, #168]	@ (80052c8 <HAL_DMA_Abort_IT+0x3d8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d036      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a28      	ldr	r2, [pc, #160]	@ (80052cc <HAL_DMA_Abort_IT+0x3dc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d031      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a27      	ldr	r2, [pc, #156]	@ (80052d0 <HAL_DMA_Abort_IT+0x3e0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d02c      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a25      	ldr	r2, [pc, #148]	@ (80052d4 <HAL_DMA_Abort_IT+0x3e4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d027      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a24      	ldr	r2, [pc, #144]	@ (80052d8 <HAL_DMA_Abort_IT+0x3e8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d022      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a22      	ldr	r2, [pc, #136]	@ (80052dc <HAL_DMA_Abort_IT+0x3ec>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01d      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a21      	ldr	r2, [pc, #132]	@ (80052e0 <HAL_DMA_Abort_IT+0x3f0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d018      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1f      	ldr	r2, [pc, #124]	@ (80052e4 <HAL_DMA_Abort_IT+0x3f4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1e      	ldr	r2, [pc, #120]	@ (80052e8 <HAL_DMA_Abort_IT+0x3f8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00e      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1c      	ldr	r2, [pc, #112]	@ (80052ec <HAL_DMA_Abort_IT+0x3fc>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d009      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1b      	ldr	r2, [pc, #108]	@ (80052f0 <HAL_DMA_Abort_IT+0x400>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_DMA_Abort_IT+0x3a2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a19      	ldr	r2, [pc, #100]	@ (80052f4 <HAL_DMA_Abort_IT+0x404>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d132      	bne.n	80052f8 <HAL_DMA_Abort_IT+0x408>
 8005292:	2301      	movs	r3, #1
 8005294:	e031      	b.n	80052fa <HAL_DMA_Abort_IT+0x40a>
 8005296:	bf00      	nop
 8005298:	40020010 	.word	0x40020010
 800529c:	40020028 	.word	0x40020028
 80052a0:	40020040 	.word	0x40020040
 80052a4:	40020058 	.word	0x40020058
 80052a8:	40020070 	.word	0x40020070
 80052ac:	40020088 	.word	0x40020088
 80052b0:	400200a0 	.word	0x400200a0
 80052b4:	400200b8 	.word	0x400200b8
 80052b8:	40020410 	.word	0x40020410
 80052bc:	40020428 	.word	0x40020428
 80052c0:	40020440 	.word	0x40020440
 80052c4:	40020458 	.word	0x40020458
 80052c8:	40020470 	.word	0x40020470
 80052cc:	40020488 	.word	0x40020488
 80052d0:	400204a0 	.word	0x400204a0
 80052d4:	400204b8 	.word	0x400204b8
 80052d8:	58025408 	.word	0x58025408
 80052dc:	5802541c 	.word	0x5802541c
 80052e0:	58025430 	.word	0x58025430
 80052e4:	58025444 	.word	0x58025444
 80052e8:	58025458 	.word	0x58025458
 80052ec:	5802546c 	.word	0x5802546c
 80052f0:	58025480 	.word	0x58025480
 80052f4:	58025494 	.word	0x58025494
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d028      	beq.n	8005350 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800530c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005312:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2201      	movs	r2, #1
 800531e:	409a      	lsls	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800532c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00c      	beq.n	8005350 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005344:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800534e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop

0800537c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	@ 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005388:	4b67      	ldr	r3, [pc, #412]	@ (8005528 <HAL_DMA_IRQHandler+0x1ac>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a67      	ldr	r2, [pc, #412]	@ (800552c <HAL_DMA_IRQHandler+0x1b0>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	0a9b      	lsrs	r3, r3, #10
 8005394:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a5f      	ldr	r2, [pc, #380]	@ (8005530 <HAL_DMA_IRQHandler+0x1b4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d04a      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5d      	ldr	r2, [pc, #372]	@ (8005534 <HAL_DMA_IRQHandler+0x1b8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d045      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a5c      	ldr	r2, [pc, #368]	@ (8005538 <HAL_DMA_IRQHandler+0x1bc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d040      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a5a      	ldr	r2, [pc, #360]	@ (800553c <HAL_DMA_IRQHandler+0x1c0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d03b      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a59      	ldr	r2, [pc, #356]	@ (8005540 <HAL_DMA_IRQHandler+0x1c4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d036      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a57      	ldr	r2, [pc, #348]	@ (8005544 <HAL_DMA_IRQHandler+0x1c8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d031      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a56      	ldr	r2, [pc, #344]	@ (8005548 <HAL_DMA_IRQHandler+0x1cc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d02c      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a54      	ldr	r2, [pc, #336]	@ (800554c <HAL_DMA_IRQHandler+0x1d0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d027      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a53      	ldr	r2, [pc, #332]	@ (8005550 <HAL_DMA_IRQHandler+0x1d4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d022      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a51      	ldr	r2, [pc, #324]	@ (8005554 <HAL_DMA_IRQHandler+0x1d8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d01d      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a50      	ldr	r2, [pc, #320]	@ (8005558 <HAL_DMA_IRQHandler+0x1dc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d018      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a4e      	ldr	r2, [pc, #312]	@ (800555c <HAL_DMA_IRQHandler+0x1e0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a4d      	ldr	r2, [pc, #308]	@ (8005560 <HAL_DMA_IRQHandler+0x1e4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a4b      	ldr	r2, [pc, #300]	@ (8005564 <HAL_DMA_IRQHandler+0x1e8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a4a      	ldr	r2, [pc, #296]	@ (8005568 <HAL_DMA_IRQHandler+0x1ec>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_DMA_IRQHandler+0xd2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a48      	ldr	r2, [pc, #288]	@ (800556c <HAL_DMA_IRQHandler+0x1f0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d101      	bne.n	8005452 <HAL_DMA_IRQHandler+0xd6>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_DMA_IRQHandler+0xd8>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 842b 	beq.w	8005cb0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	2208      	movs	r2, #8
 8005464:	409a      	lsls	r2, r3
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80a2 	beq.w	80055b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2e      	ldr	r2, [pc, #184]	@ (8005530 <HAL_DMA_IRQHandler+0x1b4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d04a      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a2d      	ldr	r2, [pc, #180]	@ (8005534 <HAL_DMA_IRQHandler+0x1b8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d045      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a2b      	ldr	r2, [pc, #172]	@ (8005538 <HAL_DMA_IRQHandler+0x1bc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d040      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a2a      	ldr	r2, [pc, #168]	@ (800553c <HAL_DMA_IRQHandler+0x1c0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d03b      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a28      	ldr	r2, [pc, #160]	@ (8005540 <HAL_DMA_IRQHandler+0x1c4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d036      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a27      	ldr	r2, [pc, #156]	@ (8005544 <HAL_DMA_IRQHandler+0x1c8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d031      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a25      	ldr	r2, [pc, #148]	@ (8005548 <HAL_DMA_IRQHandler+0x1cc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d02c      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a24      	ldr	r2, [pc, #144]	@ (800554c <HAL_DMA_IRQHandler+0x1d0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d027      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a22      	ldr	r2, [pc, #136]	@ (8005550 <HAL_DMA_IRQHandler+0x1d4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d022      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a21      	ldr	r2, [pc, #132]	@ (8005554 <HAL_DMA_IRQHandler+0x1d8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d01d      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005558 <HAL_DMA_IRQHandler+0x1dc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d018      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1e      	ldr	r2, [pc, #120]	@ (800555c <HAL_DMA_IRQHandler+0x1e0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <HAL_DMA_IRQHandler+0x1e4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00e      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005564 <HAL_DMA_IRQHandler+0x1e8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d009      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a19      	ldr	r2, [pc, #100]	@ (8005568 <HAL_DMA_IRQHandler+0x1ec>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d004      	beq.n	8005510 <HAL_DMA_IRQHandler+0x194>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a18      	ldr	r2, [pc, #96]	@ (800556c <HAL_DMA_IRQHandler+0x1f0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d12f      	bne.n	8005570 <HAL_DMA_IRQHandler+0x1f4>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	bf14      	ite	ne
 800551e:	2301      	movne	r3, #1
 8005520:	2300      	moveq	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	e02e      	b.n	8005584 <HAL_DMA_IRQHandler+0x208>
 8005526:	bf00      	nop
 8005528:	24000004 	.word	0x24000004
 800552c:	1b4e81b5 	.word	0x1b4e81b5
 8005530:	40020010 	.word	0x40020010
 8005534:	40020028 	.word	0x40020028
 8005538:	40020040 	.word	0x40020040
 800553c:	40020058 	.word	0x40020058
 8005540:	40020070 	.word	0x40020070
 8005544:	40020088 	.word	0x40020088
 8005548:	400200a0 	.word	0x400200a0
 800554c:	400200b8 	.word	0x400200b8
 8005550:	40020410 	.word	0x40020410
 8005554:	40020428 	.word	0x40020428
 8005558:	40020440 	.word	0x40020440
 800555c:	40020458 	.word	0x40020458
 8005560:	40020470 	.word	0x40020470
 8005564:	40020488 	.word	0x40020488
 8005568:	400204a0 	.word	0x400204a0
 800556c:	400204b8 	.word	0x400204b8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	bf14      	ite	ne
 800557e:	2301      	movne	r3, #1
 8005580:	2300      	moveq	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0204 	bic.w	r2, r2, #4
 8005596:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559c:	f003 031f 	and.w	r3, r3, #31
 80055a0:	2208      	movs	r2, #8
 80055a2:	409a      	lsls	r2, r3
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ac:	f043 0201 	orr.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	fa22 f303 	lsr.w	r3, r2, r3
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d06e      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a69      	ldr	r2, [pc, #420]	@ (8005774 <HAL_DMA_IRQHandler+0x3f8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d04a      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a67      	ldr	r2, [pc, #412]	@ (8005778 <HAL_DMA_IRQHandler+0x3fc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d045      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a66      	ldr	r2, [pc, #408]	@ (800577c <HAL_DMA_IRQHandler+0x400>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d040      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a64      	ldr	r2, [pc, #400]	@ (8005780 <HAL_DMA_IRQHandler+0x404>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d03b      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a63      	ldr	r2, [pc, #396]	@ (8005784 <HAL_DMA_IRQHandler+0x408>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d036      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a61      	ldr	r2, [pc, #388]	@ (8005788 <HAL_DMA_IRQHandler+0x40c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d031      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a60      	ldr	r2, [pc, #384]	@ (800578c <HAL_DMA_IRQHandler+0x410>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d02c      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a5e      	ldr	r2, [pc, #376]	@ (8005790 <HAL_DMA_IRQHandler+0x414>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d027      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a5d      	ldr	r2, [pc, #372]	@ (8005794 <HAL_DMA_IRQHandler+0x418>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d022      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a5b      	ldr	r2, [pc, #364]	@ (8005798 <HAL_DMA_IRQHandler+0x41c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d01d      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a5a      	ldr	r2, [pc, #360]	@ (800579c <HAL_DMA_IRQHandler+0x420>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d018      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a58      	ldr	r2, [pc, #352]	@ (80057a0 <HAL_DMA_IRQHandler+0x424>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a57      	ldr	r2, [pc, #348]	@ (80057a4 <HAL_DMA_IRQHandler+0x428>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00e      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a55      	ldr	r2, [pc, #340]	@ (80057a8 <HAL_DMA_IRQHandler+0x42c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d009      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a54      	ldr	r2, [pc, #336]	@ (80057ac <HAL_DMA_IRQHandler+0x430>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d004      	beq.n	800566a <HAL_DMA_IRQHandler+0x2ee>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a52      	ldr	r2, [pc, #328]	@ (80057b0 <HAL_DMA_IRQHandler+0x434>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d10a      	bne.n	8005680 <HAL_DMA_IRQHandler+0x304>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	e003      	b.n	8005688 <HAL_DMA_IRQHandler+0x30c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2300      	movs	r3, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00d      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	2201      	movs	r2, #1
 8005696:	409a      	lsls	r2, r3
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a0:	f043 0202 	orr.w	r2, r3, #2
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	2204      	movs	r2, #4
 80056b2:	409a      	lsls	r2, r3
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 808f 	beq.w	80057dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005774 <HAL_DMA_IRQHandler+0x3f8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d04a      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005778 <HAL_DMA_IRQHandler+0x3fc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d045      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a29      	ldr	r2, [pc, #164]	@ (800577c <HAL_DMA_IRQHandler+0x400>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d040      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a27      	ldr	r2, [pc, #156]	@ (8005780 <HAL_DMA_IRQHandler+0x404>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d03b      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a26      	ldr	r2, [pc, #152]	@ (8005784 <HAL_DMA_IRQHandler+0x408>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d036      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a24      	ldr	r2, [pc, #144]	@ (8005788 <HAL_DMA_IRQHandler+0x40c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d031      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a23      	ldr	r2, [pc, #140]	@ (800578c <HAL_DMA_IRQHandler+0x410>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d02c      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a21      	ldr	r2, [pc, #132]	@ (8005790 <HAL_DMA_IRQHandler+0x414>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d027      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a20      	ldr	r2, [pc, #128]	@ (8005794 <HAL_DMA_IRQHandler+0x418>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1e      	ldr	r2, [pc, #120]	@ (8005798 <HAL_DMA_IRQHandler+0x41c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01d      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1d      	ldr	r2, [pc, #116]	@ (800579c <HAL_DMA_IRQHandler+0x420>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d018      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1b      	ldr	r2, [pc, #108]	@ (80057a0 <HAL_DMA_IRQHandler+0x424>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1a      	ldr	r2, [pc, #104]	@ (80057a4 <HAL_DMA_IRQHandler+0x428>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a18      	ldr	r2, [pc, #96]	@ (80057a8 <HAL_DMA_IRQHandler+0x42c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d009      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a17      	ldr	r2, [pc, #92]	@ (80057ac <HAL_DMA_IRQHandler+0x430>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_DMA_IRQHandler+0x3e2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a15      	ldr	r2, [pc, #84]	@ (80057b0 <HAL_DMA_IRQHandler+0x434>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d12a      	bne.n	80057b4 <HAL_DMA_IRQHandler+0x438>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	e023      	b.n	80057bc <HAL_DMA_IRQHandler+0x440>
 8005774:	40020010 	.word	0x40020010
 8005778:	40020028 	.word	0x40020028
 800577c:	40020040 	.word	0x40020040
 8005780:	40020058 	.word	0x40020058
 8005784:	40020070 	.word	0x40020070
 8005788:	40020088 	.word	0x40020088
 800578c:	400200a0 	.word	0x400200a0
 8005790:	400200b8 	.word	0x400200b8
 8005794:	40020410 	.word	0x40020410
 8005798:	40020428 	.word	0x40020428
 800579c:	40020440 	.word	0x40020440
 80057a0:	40020458 	.word	0x40020458
 80057a4:	40020470 	.word	0x40020470
 80057a8:	40020488 	.word	0x40020488
 80057ac:	400204a0 	.word	0x400204a0
 80057b0:	400204b8 	.word	0x400204b8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00d      	beq.n	80057dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	2204      	movs	r2, #4
 80057ca:	409a      	lsls	r2, r3
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d4:	f043 0204 	orr.w	r2, r3, #4
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	2210      	movs	r2, #16
 80057e6:	409a      	lsls	r2, r3
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80a6 	beq.w	800593e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a85      	ldr	r2, [pc, #532]	@ (8005a0c <HAL_DMA_IRQHandler+0x690>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d04a      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a83      	ldr	r2, [pc, #524]	@ (8005a10 <HAL_DMA_IRQHandler+0x694>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d045      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a82      	ldr	r2, [pc, #520]	@ (8005a14 <HAL_DMA_IRQHandler+0x698>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d040      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a80      	ldr	r2, [pc, #512]	@ (8005a18 <HAL_DMA_IRQHandler+0x69c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d03b      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a7f      	ldr	r2, [pc, #508]	@ (8005a1c <HAL_DMA_IRQHandler+0x6a0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d036      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a7d      	ldr	r2, [pc, #500]	@ (8005a20 <HAL_DMA_IRQHandler+0x6a4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d031      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a7c      	ldr	r2, [pc, #496]	@ (8005a24 <HAL_DMA_IRQHandler+0x6a8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d02c      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a7a      	ldr	r2, [pc, #488]	@ (8005a28 <HAL_DMA_IRQHandler+0x6ac>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d027      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a79      	ldr	r2, [pc, #484]	@ (8005a2c <HAL_DMA_IRQHandler+0x6b0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d022      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a77      	ldr	r2, [pc, #476]	@ (8005a30 <HAL_DMA_IRQHandler+0x6b4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01d      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a76      	ldr	r2, [pc, #472]	@ (8005a34 <HAL_DMA_IRQHandler+0x6b8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d018      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a74      	ldr	r2, [pc, #464]	@ (8005a38 <HAL_DMA_IRQHandler+0x6bc>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a73      	ldr	r2, [pc, #460]	@ (8005a3c <HAL_DMA_IRQHandler+0x6c0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a71      	ldr	r2, [pc, #452]	@ (8005a40 <HAL_DMA_IRQHandler+0x6c4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a70      	ldr	r2, [pc, #448]	@ (8005a44 <HAL_DMA_IRQHandler+0x6c8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_DMA_IRQHandler+0x516>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a6e      	ldr	r2, [pc, #440]	@ (8005a48 <HAL_DMA_IRQHandler+0x6cc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d10a      	bne.n	80058a8 <HAL_DMA_IRQHandler+0x52c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf14      	ite	ne
 80058a0:	2301      	movne	r3, #1
 80058a2:	2300      	moveq	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e009      	b.n	80058bc <HAL_DMA_IRQHandler+0x540>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bf14      	ite	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	2300      	moveq	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d03e      	beq.n	800593e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	2210      	movs	r2, #16
 80058ca:	409a      	lsls	r2, r3
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d018      	beq.n	8005910 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d108      	bne.n	80058fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d024      	beq.n	800593e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	4798      	blx	r3
 80058fc:	e01f      	b.n	800593e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01b      	beq.n	800593e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4798      	blx	r3
 800590e:	e016      	b.n	800593e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591a:	2b00      	cmp	r3, #0
 800591c:	d107      	bne.n	800592e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0208 	bic.w	r2, r2, #8
 800592c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	2220      	movs	r2, #32
 8005948:	409a      	lsls	r2, r3
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8110 	beq.w	8005b74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2c      	ldr	r2, [pc, #176]	@ (8005a0c <HAL_DMA_IRQHandler+0x690>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d04a      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2b      	ldr	r2, [pc, #172]	@ (8005a10 <HAL_DMA_IRQHandler+0x694>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d045      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a29      	ldr	r2, [pc, #164]	@ (8005a14 <HAL_DMA_IRQHandler+0x698>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d040      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a28      	ldr	r2, [pc, #160]	@ (8005a18 <HAL_DMA_IRQHandler+0x69c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d03b      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a26      	ldr	r2, [pc, #152]	@ (8005a1c <HAL_DMA_IRQHandler+0x6a0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d036      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a25      	ldr	r2, [pc, #148]	@ (8005a20 <HAL_DMA_IRQHandler+0x6a4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d031      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a23      	ldr	r2, [pc, #140]	@ (8005a24 <HAL_DMA_IRQHandler+0x6a8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02c      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a22      	ldr	r2, [pc, #136]	@ (8005a28 <HAL_DMA_IRQHandler+0x6ac>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d027      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a20      	ldr	r2, [pc, #128]	@ (8005a2c <HAL_DMA_IRQHandler+0x6b0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d022      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005a30 <HAL_DMA_IRQHandler+0x6b4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d01d      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a34 <HAL_DMA_IRQHandler+0x6b8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d018      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a38 <HAL_DMA_IRQHandler+0x6bc>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d013      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1a      	ldr	r2, [pc, #104]	@ (8005a3c <HAL_DMA_IRQHandler+0x6c0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00e      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a19      	ldr	r2, [pc, #100]	@ (8005a40 <HAL_DMA_IRQHandler+0x6c4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d009      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a17      	ldr	r2, [pc, #92]	@ (8005a44 <HAL_DMA_IRQHandler+0x6c8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x678>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a16      	ldr	r2, [pc, #88]	@ (8005a48 <HAL_DMA_IRQHandler+0x6cc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d12b      	bne.n	8005a4c <HAL_DMA_IRQHandler+0x6d0>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	e02a      	b.n	8005a60 <HAL_DMA_IRQHandler+0x6e4>
 8005a0a:	bf00      	nop
 8005a0c:	40020010 	.word	0x40020010
 8005a10:	40020028 	.word	0x40020028
 8005a14:	40020040 	.word	0x40020040
 8005a18:	40020058 	.word	0x40020058
 8005a1c:	40020070 	.word	0x40020070
 8005a20:	40020088 	.word	0x40020088
 8005a24:	400200a0 	.word	0x400200a0
 8005a28:	400200b8 	.word	0x400200b8
 8005a2c:	40020410 	.word	0x40020410
 8005a30:	40020428 	.word	0x40020428
 8005a34:	40020440 	.word	0x40020440
 8005a38:	40020458 	.word	0x40020458
 8005a3c:	40020470 	.word	0x40020470
 8005a40:	40020488 	.word	0x40020488
 8005a44:	400204a0 	.word	0x400204a0
 8005a48:	400204b8 	.word	0x400204b8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bf14      	ite	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	2300      	moveq	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8087 	beq.w	8005b74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	2220      	movs	r2, #32
 8005a70:	409a      	lsls	r2, r3
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d139      	bne.n	8005af6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0216 	bic.w	r2, r2, #22
 8005a90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695a      	ldr	r2, [r3, #20]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005aa0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <HAL_DMA_IRQHandler+0x736>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0208 	bic.w	r2, r2, #8
 8005ac0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	223f      	movs	r2, #63	@ 0x3f
 8005acc:	409a      	lsls	r2, r3
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 834a 	beq.w	8006180 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
          }
          return;
 8005af4:	e344      	b.n	8006180 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d018      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d108      	bne.n	8005b24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d02c      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	4798      	blx	r3
 8005b22:	e027      	b.n	8005b74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d023      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
 8005b34:	e01e      	b.n	8005b74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10f      	bne.n	8005b64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0210 	bic.w	r2, r2, #16
 8005b52:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8306 	beq.w	800618a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 8088 	beq.w	8005c9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2204      	movs	r2, #4
 8005b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a7a      	ldr	r2, [pc, #488]	@ (8005d84 <HAL_DMA_IRQHandler+0xa08>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d04a      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a79      	ldr	r2, [pc, #484]	@ (8005d88 <HAL_DMA_IRQHandler+0xa0c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d045      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a77      	ldr	r2, [pc, #476]	@ (8005d8c <HAL_DMA_IRQHandler+0xa10>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d040      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a76      	ldr	r2, [pc, #472]	@ (8005d90 <HAL_DMA_IRQHandler+0xa14>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d03b      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a74      	ldr	r2, [pc, #464]	@ (8005d94 <HAL_DMA_IRQHandler+0xa18>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d036      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a73      	ldr	r2, [pc, #460]	@ (8005d98 <HAL_DMA_IRQHandler+0xa1c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d031      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a71      	ldr	r2, [pc, #452]	@ (8005d9c <HAL_DMA_IRQHandler+0xa20>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d02c      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a70      	ldr	r2, [pc, #448]	@ (8005da0 <HAL_DMA_IRQHandler+0xa24>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d027      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a6e      	ldr	r2, [pc, #440]	@ (8005da4 <HAL_DMA_IRQHandler+0xa28>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d022      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a6d      	ldr	r2, [pc, #436]	@ (8005da8 <HAL_DMA_IRQHandler+0xa2c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d01d      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a6b      	ldr	r2, [pc, #428]	@ (8005dac <HAL_DMA_IRQHandler+0xa30>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d018      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a6a      	ldr	r2, [pc, #424]	@ (8005db0 <HAL_DMA_IRQHandler+0xa34>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d013      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a68      	ldr	r2, [pc, #416]	@ (8005db4 <HAL_DMA_IRQHandler+0xa38>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00e      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a67      	ldr	r2, [pc, #412]	@ (8005db8 <HAL_DMA_IRQHandler+0xa3c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a65      	ldr	r2, [pc, #404]	@ (8005dbc <HAL_DMA_IRQHandler+0xa40>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d004      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x8b8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a64      	ldr	r2, [pc, #400]	@ (8005dc0 <HAL_DMA_IRQHandler+0xa44>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d108      	bne.n	8005c46 <HAL_DMA_IRQHandler+0x8ca>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e007      	b.n	8005c56 <HAL_DMA_IRQHandler+0x8da>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d307      	bcc.n	8005c72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f2      	bne.n	8005c56 <HAL_DMA_IRQHandler+0x8da>
 8005c70:	e000      	b.n	8005c74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c72:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2203      	movs	r2, #3
 8005c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005c8a:	e003      	b.n	8005c94 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8272 	beq.w	800618a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
 8005cae:	e26c      	b.n	800618a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a43      	ldr	r2, [pc, #268]	@ (8005dc4 <HAL_DMA_IRQHandler+0xa48>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d022      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x984>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a42      	ldr	r2, [pc, #264]	@ (8005dc8 <HAL_DMA_IRQHandler+0xa4c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d01d      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x984>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a40      	ldr	r2, [pc, #256]	@ (8005dcc <HAL_DMA_IRQHandler+0xa50>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d018      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x984>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a3f      	ldr	r2, [pc, #252]	@ (8005dd0 <HAL_DMA_IRQHandler+0xa54>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d013      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x984>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8005dd4 <HAL_DMA_IRQHandler+0xa58>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00e      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x984>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a3c      	ldr	r2, [pc, #240]	@ (8005dd8 <HAL_DMA_IRQHandler+0xa5c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d009      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x984>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8005ddc <HAL_DMA_IRQHandler+0xa60>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x984>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a39      	ldr	r2, [pc, #228]	@ (8005de0 <HAL_DMA_IRQHandler+0xa64>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d101      	bne.n	8005d04 <HAL_DMA_IRQHandler+0x988>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_DMA_IRQHandler+0x98a>
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 823f 	beq.w	800618a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80cd 	beq.w	8005ec4 <HAL_DMA_IRQHandler+0xb48>
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80c7 	beq.w	8005ec4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	2204      	movs	r2, #4
 8005d40:	409a      	lsls	r2, r3
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d049      	beq.n	8005de4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8210 	beq.w	8006184 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d6c:	e20a      	b.n	8006184 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 8206 	beq.w	8006184 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d80:	e200      	b.n	8006184 <HAL_DMA_IRQHandler+0xe08>
 8005d82:	bf00      	nop
 8005d84:	40020010 	.word	0x40020010
 8005d88:	40020028 	.word	0x40020028
 8005d8c:	40020040 	.word	0x40020040
 8005d90:	40020058 	.word	0x40020058
 8005d94:	40020070 	.word	0x40020070
 8005d98:	40020088 	.word	0x40020088
 8005d9c:	400200a0 	.word	0x400200a0
 8005da0:	400200b8 	.word	0x400200b8
 8005da4:	40020410 	.word	0x40020410
 8005da8:	40020428 	.word	0x40020428
 8005dac:	40020440 	.word	0x40020440
 8005db0:	40020458 	.word	0x40020458
 8005db4:	40020470 	.word	0x40020470
 8005db8:	40020488 	.word	0x40020488
 8005dbc:	400204a0 	.word	0x400204a0
 8005dc0:	400204b8 	.word	0x400204b8
 8005dc4:	58025408 	.word	0x58025408
 8005dc8:	5802541c 	.word	0x5802541c
 8005dcc:	58025430 	.word	0x58025430
 8005dd0:	58025444 	.word	0x58025444
 8005dd4:	58025458 	.word	0x58025458
 8005dd8:	5802546c 	.word	0x5802546c
 8005ddc:	58025480 	.word	0x58025480
 8005de0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d160      	bne.n	8005eb0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a7f      	ldr	r2, [pc, #508]	@ (8005ff0 <HAL_DMA_IRQHandler+0xc74>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d04a      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a7d      	ldr	r2, [pc, #500]	@ (8005ff4 <HAL_DMA_IRQHandler+0xc78>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d045      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a7c      	ldr	r2, [pc, #496]	@ (8005ff8 <HAL_DMA_IRQHandler+0xc7c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d040      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a7a      	ldr	r2, [pc, #488]	@ (8005ffc <HAL_DMA_IRQHandler+0xc80>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d03b      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a79      	ldr	r2, [pc, #484]	@ (8006000 <HAL_DMA_IRQHandler+0xc84>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d036      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a77      	ldr	r2, [pc, #476]	@ (8006004 <HAL_DMA_IRQHandler+0xc88>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d031      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a76      	ldr	r2, [pc, #472]	@ (8006008 <HAL_DMA_IRQHandler+0xc8c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d02c      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a74      	ldr	r2, [pc, #464]	@ (800600c <HAL_DMA_IRQHandler+0xc90>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d027      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a73      	ldr	r2, [pc, #460]	@ (8006010 <HAL_DMA_IRQHandler+0xc94>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d022      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a71      	ldr	r2, [pc, #452]	@ (8006014 <HAL_DMA_IRQHandler+0xc98>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01d      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a70      	ldr	r2, [pc, #448]	@ (8006018 <HAL_DMA_IRQHandler+0xc9c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d018      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a6e      	ldr	r2, [pc, #440]	@ (800601c <HAL_DMA_IRQHandler+0xca0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a6d      	ldr	r2, [pc, #436]	@ (8006020 <HAL_DMA_IRQHandler+0xca4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a6b      	ldr	r2, [pc, #428]	@ (8006024 <HAL_DMA_IRQHandler+0xca8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a6a      	ldr	r2, [pc, #424]	@ (8006028 <HAL_DMA_IRQHandler+0xcac>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xb12>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a68      	ldr	r2, [pc, #416]	@ (800602c <HAL_DMA_IRQHandler+0xcb0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d108      	bne.n	8005ea0 <HAL_DMA_IRQHandler+0xb24>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0208 	bic.w	r2, r2, #8
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e007      	b.n	8005eb0 <HAL_DMA_IRQHandler+0xb34>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0204 	bic.w	r2, r2, #4
 8005eae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8165 	beq.w	8006184 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ec2:	e15f      	b.n	8006184 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	2202      	movs	r2, #2
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80c5 	beq.w	8006064 <HAL_DMA_IRQHandler+0xce8>
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80bf 	beq.w	8006064 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eea:	f003 031f 	and.w	r3, r3, #31
 8005eee:	2202      	movs	r2, #2
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d018      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 813a 	beq.w	8006188 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f1c:	e134      	b.n	8006188 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8130 	beq.w	8006188 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f30:	e12a      	b.n	8006188 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f040 8089 	bne.w	8006050 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a2b      	ldr	r2, [pc, #172]	@ (8005ff0 <HAL_DMA_IRQHandler+0xc74>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d04a      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a29      	ldr	r2, [pc, #164]	@ (8005ff4 <HAL_DMA_IRQHandler+0xc78>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d045      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a28      	ldr	r2, [pc, #160]	@ (8005ff8 <HAL_DMA_IRQHandler+0xc7c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d040      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a26      	ldr	r2, [pc, #152]	@ (8005ffc <HAL_DMA_IRQHandler+0xc80>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d03b      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a25      	ldr	r2, [pc, #148]	@ (8006000 <HAL_DMA_IRQHandler+0xc84>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d036      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a23      	ldr	r2, [pc, #140]	@ (8006004 <HAL_DMA_IRQHandler+0xc88>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d031      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a22      	ldr	r2, [pc, #136]	@ (8006008 <HAL_DMA_IRQHandler+0xc8c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d02c      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a20      	ldr	r2, [pc, #128]	@ (800600c <HAL_DMA_IRQHandler+0xc90>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d027      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1f      	ldr	r2, [pc, #124]	@ (8006010 <HAL_DMA_IRQHandler+0xc94>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d022      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006014 <HAL_DMA_IRQHandler+0xc98>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01d      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8006018 <HAL_DMA_IRQHandler+0xc9c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d018      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800601c <HAL_DMA_IRQHandler+0xca0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a19      	ldr	r2, [pc, #100]	@ (8006020 <HAL_DMA_IRQHandler+0xca4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a17      	ldr	r2, [pc, #92]	@ (8006024 <HAL_DMA_IRQHandler+0xca8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a16      	ldr	r2, [pc, #88]	@ (8006028 <HAL_DMA_IRQHandler+0xcac>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_DMA_IRQHandler+0xc62>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a14      	ldr	r2, [pc, #80]	@ (800602c <HAL_DMA_IRQHandler+0xcb0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d128      	bne.n	8006030 <HAL_DMA_IRQHandler+0xcb4>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0214 	bic.w	r2, r2, #20
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e027      	b.n	8006040 <HAL_DMA_IRQHandler+0xcc4>
 8005ff0:	40020010 	.word	0x40020010
 8005ff4:	40020028 	.word	0x40020028
 8005ff8:	40020040 	.word	0x40020040
 8005ffc:	40020058 	.word	0x40020058
 8006000:	40020070 	.word	0x40020070
 8006004:	40020088 	.word	0x40020088
 8006008:	400200a0 	.word	0x400200a0
 800600c:	400200b8 	.word	0x400200b8
 8006010:	40020410 	.word	0x40020410
 8006014:	40020428 	.word	0x40020428
 8006018:	40020440 	.word	0x40020440
 800601c:	40020458 	.word	0x40020458
 8006020:	40020470 	.word	0x40020470
 8006024:	40020488 	.word	0x40020488
 8006028:	400204a0 	.word	0x400204a0
 800602c:	400204b8 	.word	0x400204b8
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 020a 	bic.w	r2, r2, #10
 800603e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8097 	beq.w	8006188 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006062:	e091      	b.n	8006188 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006068:	f003 031f 	and.w	r3, r3, #31
 800606c:	2208      	movs	r2, #8
 800606e:	409a      	lsls	r2, r3
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	4013      	ands	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 8088 	beq.w	800618a <HAL_DMA_IRQHandler+0xe0e>
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8082 	beq.w	800618a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a41      	ldr	r2, [pc, #260]	@ (8006190 <HAL_DMA_IRQHandler+0xe14>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d04a      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a3f      	ldr	r2, [pc, #252]	@ (8006194 <HAL_DMA_IRQHandler+0xe18>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d045      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a3e      	ldr	r2, [pc, #248]	@ (8006198 <HAL_DMA_IRQHandler+0xe1c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d040      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a3c      	ldr	r2, [pc, #240]	@ (800619c <HAL_DMA_IRQHandler+0xe20>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d03b      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a3b      	ldr	r2, [pc, #236]	@ (80061a0 <HAL_DMA_IRQHandler+0xe24>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d036      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a39      	ldr	r2, [pc, #228]	@ (80061a4 <HAL_DMA_IRQHandler+0xe28>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d031      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a38      	ldr	r2, [pc, #224]	@ (80061a8 <HAL_DMA_IRQHandler+0xe2c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d02c      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a36      	ldr	r2, [pc, #216]	@ (80061ac <HAL_DMA_IRQHandler+0xe30>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d027      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a35      	ldr	r2, [pc, #212]	@ (80061b0 <HAL_DMA_IRQHandler+0xe34>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d022      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a33      	ldr	r2, [pc, #204]	@ (80061b4 <HAL_DMA_IRQHandler+0xe38>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01d      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a32      	ldr	r2, [pc, #200]	@ (80061b8 <HAL_DMA_IRQHandler+0xe3c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d018      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a30      	ldr	r2, [pc, #192]	@ (80061bc <HAL_DMA_IRQHandler+0xe40>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d013      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a2f      	ldr	r2, [pc, #188]	@ (80061c0 <HAL_DMA_IRQHandler+0xe44>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00e      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2d      	ldr	r2, [pc, #180]	@ (80061c4 <HAL_DMA_IRQHandler+0xe48>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d009      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2c      	ldr	r2, [pc, #176]	@ (80061c8 <HAL_DMA_IRQHandler+0xe4c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d004      	beq.n	8006126 <HAL_DMA_IRQHandler+0xdaa>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2a      	ldr	r2, [pc, #168]	@ (80061cc <HAL_DMA_IRQHandler+0xe50>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d108      	bne.n	8006138 <HAL_DMA_IRQHandler+0xdbc>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 021c 	bic.w	r2, r2, #28
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e007      	b.n	8006148 <HAL_DMA_IRQHandler+0xdcc>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 020e 	bic.w	r2, r2, #14
 8006146:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	2201      	movs	r2, #1
 8006152:	409a      	lsls	r2, r3
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
 800617e:	e004      	b.n	800618a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006180:	bf00      	nop
 8006182:	e002      	b.n	800618a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006184:	bf00      	nop
 8006186:	e000      	b.n	800618a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006188:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800618a:	3728      	adds	r7, #40	@ 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40020010 	.word	0x40020010
 8006194:	40020028 	.word	0x40020028
 8006198:	40020040 	.word	0x40020040
 800619c:	40020058 	.word	0x40020058
 80061a0:	40020070 	.word	0x40020070
 80061a4:	40020088 	.word	0x40020088
 80061a8:	400200a0 	.word	0x400200a0
 80061ac:	400200b8 	.word	0x400200b8
 80061b0:	40020410 	.word	0x40020410
 80061b4:	40020428 	.word	0x40020428
 80061b8:	40020440 	.word	0x40020440
 80061bc:	40020458 	.word	0x40020458
 80061c0:	40020470 	.word	0x40020470
 80061c4:	40020488 	.word	0x40020488
 80061c8:	400204a0 	.word	0x400204a0
 80061cc:	400204b8 	.word	0x400204b8

080061d0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061de:	b2db      	uxtb	r3, r3
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006216:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a7f      	ldr	r2, [pc, #508]	@ (8006420 <DMA_SetConfig+0x21c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d072      	beq.n	800630e <DMA_SetConfig+0x10a>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a7d      	ldr	r2, [pc, #500]	@ (8006424 <DMA_SetConfig+0x220>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d06d      	beq.n	800630e <DMA_SetConfig+0x10a>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a7c      	ldr	r2, [pc, #496]	@ (8006428 <DMA_SetConfig+0x224>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d068      	beq.n	800630e <DMA_SetConfig+0x10a>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a7a      	ldr	r2, [pc, #488]	@ (800642c <DMA_SetConfig+0x228>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d063      	beq.n	800630e <DMA_SetConfig+0x10a>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a79      	ldr	r2, [pc, #484]	@ (8006430 <DMA_SetConfig+0x22c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d05e      	beq.n	800630e <DMA_SetConfig+0x10a>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a77      	ldr	r2, [pc, #476]	@ (8006434 <DMA_SetConfig+0x230>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d059      	beq.n	800630e <DMA_SetConfig+0x10a>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a76      	ldr	r2, [pc, #472]	@ (8006438 <DMA_SetConfig+0x234>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d054      	beq.n	800630e <DMA_SetConfig+0x10a>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a74      	ldr	r2, [pc, #464]	@ (800643c <DMA_SetConfig+0x238>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d04f      	beq.n	800630e <DMA_SetConfig+0x10a>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a73      	ldr	r2, [pc, #460]	@ (8006440 <DMA_SetConfig+0x23c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d04a      	beq.n	800630e <DMA_SetConfig+0x10a>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a71      	ldr	r2, [pc, #452]	@ (8006444 <DMA_SetConfig+0x240>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d045      	beq.n	800630e <DMA_SetConfig+0x10a>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a70      	ldr	r2, [pc, #448]	@ (8006448 <DMA_SetConfig+0x244>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d040      	beq.n	800630e <DMA_SetConfig+0x10a>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6e      	ldr	r2, [pc, #440]	@ (800644c <DMA_SetConfig+0x248>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d03b      	beq.n	800630e <DMA_SetConfig+0x10a>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a6d      	ldr	r2, [pc, #436]	@ (8006450 <DMA_SetConfig+0x24c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d036      	beq.n	800630e <DMA_SetConfig+0x10a>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a6b      	ldr	r2, [pc, #428]	@ (8006454 <DMA_SetConfig+0x250>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d031      	beq.n	800630e <DMA_SetConfig+0x10a>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a6a      	ldr	r2, [pc, #424]	@ (8006458 <DMA_SetConfig+0x254>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d02c      	beq.n	800630e <DMA_SetConfig+0x10a>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a68      	ldr	r2, [pc, #416]	@ (800645c <DMA_SetConfig+0x258>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d027      	beq.n	800630e <DMA_SetConfig+0x10a>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a67      	ldr	r2, [pc, #412]	@ (8006460 <DMA_SetConfig+0x25c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d022      	beq.n	800630e <DMA_SetConfig+0x10a>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a65      	ldr	r2, [pc, #404]	@ (8006464 <DMA_SetConfig+0x260>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d01d      	beq.n	800630e <DMA_SetConfig+0x10a>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a64      	ldr	r2, [pc, #400]	@ (8006468 <DMA_SetConfig+0x264>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d018      	beq.n	800630e <DMA_SetConfig+0x10a>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a62      	ldr	r2, [pc, #392]	@ (800646c <DMA_SetConfig+0x268>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <DMA_SetConfig+0x10a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a61      	ldr	r2, [pc, #388]	@ (8006470 <DMA_SetConfig+0x26c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00e      	beq.n	800630e <DMA_SetConfig+0x10a>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a5f      	ldr	r2, [pc, #380]	@ (8006474 <DMA_SetConfig+0x270>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d009      	beq.n	800630e <DMA_SetConfig+0x10a>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a5e      	ldr	r2, [pc, #376]	@ (8006478 <DMA_SetConfig+0x274>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <DMA_SetConfig+0x10a>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a5c      	ldr	r2, [pc, #368]	@ (800647c <DMA_SetConfig+0x278>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d101      	bne.n	8006312 <DMA_SetConfig+0x10e>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <DMA_SetConfig+0x110>
 8006312:	2300      	movs	r3, #0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00d      	beq.n	8006334 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006320:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006332:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a39      	ldr	r2, [pc, #228]	@ (8006420 <DMA_SetConfig+0x21c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d04a      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a38      	ldr	r2, [pc, #224]	@ (8006424 <DMA_SetConfig+0x220>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d045      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a36      	ldr	r2, [pc, #216]	@ (8006428 <DMA_SetConfig+0x224>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d040      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a35      	ldr	r2, [pc, #212]	@ (800642c <DMA_SetConfig+0x228>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d03b      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a33      	ldr	r2, [pc, #204]	@ (8006430 <DMA_SetConfig+0x22c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d036      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a32      	ldr	r2, [pc, #200]	@ (8006434 <DMA_SetConfig+0x230>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d031      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a30      	ldr	r2, [pc, #192]	@ (8006438 <DMA_SetConfig+0x234>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02c      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a2f      	ldr	r2, [pc, #188]	@ (800643c <DMA_SetConfig+0x238>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d027      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a2d      	ldr	r2, [pc, #180]	@ (8006440 <DMA_SetConfig+0x23c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d022      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a2c      	ldr	r2, [pc, #176]	@ (8006444 <DMA_SetConfig+0x240>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d01d      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a2a      	ldr	r2, [pc, #168]	@ (8006448 <DMA_SetConfig+0x244>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d018      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a29      	ldr	r2, [pc, #164]	@ (800644c <DMA_SetConfig+0x248>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d013      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a27      	ldr	r2, [pc, #156]	@ (8006450 <DMA_SetConfig+0x24c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00e      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a26      	ldr	r2, [pc, #152]	@ (8006454 <DMA_SetConfig+0x250>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d009      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a24      	ldr	r2, [pc, #144]	@ (8006458 <DMA_SetConfig+0x254>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <DMA_SetConfig+0x1d0>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a23      	ldr	r2, [pc, #140]	@ (800645c <DMA_SetConfig+0x258>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d101      	bne.n	80063d8 <DMA_SetConfig+0x1d4>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <DMA_SetConfig+0x1d6>
 80063d8:	2300      	movs	r3, #0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d059      	beq.n	8006492 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	223f      	movs	r2, #63	@ 0x3f
 80063e8:	409a      	lsls	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80063fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b40      	cmp	r3, #64	@ 0x40
 800640c:	d138      	bne.n	8006480 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800641e:	e086      	b.n	800652e <DMA_SetConfig+0x32a>
 8006420:	40020010 	.word	0x40020010
 8006424:	40020028 	.word	0x40020028
 8006428:	40020040 	.word	0x40020040
 800642c:	40020058 	.word	0x40020058
 8006430:	40020070 	.word	0x40020070
 8006434:	40020088 	.word	0x40020088
 8006438:	400200a0 	.word	0x400200a0
 800643c:	400200b8 	.word	0x400200b8
 8006440:	40020410 	.word	0x40020410
 8006444:	40020428 	.word	0x40020428
 8006448:	40020440 	.word	0x40020440
 800644c:	40020458 	.word	0x40020458
 8006450:	40020470 	.word	0x40020470
 8006454:	40020488 	.word	0x40020488
 8006458:	400204a0 	.word	0x400204a0
 800645c:	400204b8 	.word	0x400204b8
 8006460:	58025408 	.word	0x58025408
 8006464:	5802541c 	.word	0x5802541c
 8006468:	58025430 	.word	0x58025430
 800646c:	58025444 	.word	0x58025444
 8006470:	58025458 	.word	0x58025458
 8006474:	5802546c 	.word	0x5802546c
 8006478:	58025480 	.word	0x58025480
 800647c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]
}
 8006490:	e04d      	b.n	800652e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a29      	ldr	r2, [pc, #164]	@ (800653c <DMA_SetConfig+0x338>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d022      	beq.n	80064e2 <DMA_SetConfig+0x2de>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a27      	ldr	r2, [pc, #156]	@ (8006540 <DMA_SetConfig+0x33c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d01d      	beq.n	80064e2 <DMA_SetConfig+0x2de>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a26      	ldr	r2, [pc, #152]	@ (8006544 <DMA_SetConfig+0x340>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d018      	beq.n	80064e2 <DMA_SetConfig+0x2de>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a24      	ldr	r2, [pc, #144]	@ (8006548 <DMA_SetConfig+0x344>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d013      	beq.n	80064e2 <DMA_SetConfig+0x2de>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a23      	ldr	r2, [pc, #140]	@ (800654c <DMA_SetConfig+0x348>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00e      	beq.n	80064e2 <DMA_SetConfig+0x2de>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a21      	ldr	r2, [pc, #132]	@ (8006550 <DMA_SetConfig+0x34c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d009      	beq.n	80064e2 <DMA_SetConfig+0x2de>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a20      	ldr	r2, [pc, #128]	@ (8006554 <DMA_SetConfig+0x350>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d004      	beq.n	80064e2 <DMA_SetConfig+0x2de>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006558 <DMA_SetConfig+0x354>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d101      	bne.n	80064e6 <DMA_SetConfig+0x2e2>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <DMA_SetConfig+0x2e4>
 80064e6:	2300      	movs	r3, #0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d020      	beq.n	800652e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2201      	movs	r2, #1
 80064f6:	409a      	lsls	r2, r3
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b40      	cmp	r3, #64	@ 0x40
 800650a:	d108      	bne.n	800651e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	60da      	str	r2, [r3, #12]
}
 800651c:	e007      	b.n	800652e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	60da      	str	r2, [r3, #12]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	58025408 	.word	0x58025408
 8006540:	5802541c 	.word	0x5802541c
 8006544:	58025430 	.word	0x58025430
 8006548:	58025444 	.word	0x58025444
 800654c:	58025458 	.word	0x58025458
 8006550:	5802546c 	.word	0x5802546c
 8006554:	58025480 	.word	0x58025480
 8006558:	58025494 	.word	0x58025494

0800655c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a42      	ldr	r2, [pc, #264]	@ (8006674 <DMA_CalcBaseAndBitshift+0x118>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d04a      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a41      	ldr	r2, [pc, #260]	@ (8006678 <DMA_CalcBaseAndBitshift+0x11c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d045      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a3f      	ldr	r2, [pc, #252]	@ (800667c <DMA_CalcBaseAndBitshift+0x120>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d040      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a3e      	ldr	r2, [pc, #248]	@ (8006680 <DMA_CalcBaseAndBitshift+0x124>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d03b      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3c      	ldr	r2, [pc, #240]	@ (8006684 <DMA_CalcBaseAndBitshift+0x128>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d036      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3b      	ldr	r2, [pc, #236]	@ (8006688 <DMA_CalcBaseAndBitshift+0x12c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d031      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a39      	ldr	r2, [pc, #228]	@ (800668c <DMA_CalcBaseAndBitshift+0x130>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d02c      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a38      	ldr	r2, [pc, #224]	@ (8006690 <DMA_CalcBaseAndBitshift+0x134>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d027      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a36      	ldr	r2, [pc, #216]	@ (8006694 <DMA_CalcBaseAndBitshift+0x138>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d022      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a35      	ldr	r2, [pc, #212]	@ (8006698 <DMA_CalcBaseAndBitshift+0x13c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d01d      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a33      	ldr	r2, [pc, #204]	@ (800669c <DMA_CalcBaseAndBitshift+0x140>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d018      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a32      	ldr	r2, [pc, #200]	@ (80066a0 <DMA_CalcBaseAndBitshift+0x144>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d013      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a30      	ldr	r2, [pc, #192]	@ (80066a4 <DMA_CalcBaseAndBitshift+0x148>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00e      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a2f      	ldr	r2, [pc, #188]	@ (80066a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d009      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a2d      	ldr	r2, [pc, #180]	@ (80066ac <DMA_CalcBaseAndBitshift+0x150>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d004      	beq.n	8006604 <DMA_CalcBaseAndBitshift+0xa8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a2c      	ldr	r2, [pc, #176]	@ (80066b0 <DMA_CalcBaseAndBitshift+0x154>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d101      	bne.n	8006608 <DMA_CalcBaseAndBitshift+0xac>
 8006604:	2301      	movs	r3, #1
 8006606:	e000      	b.n	800660a <DMA_CalcBaseAndBitshift+0xae>
 8006608:	2300      	movs	r3, #0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d024      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	3b10      	subs	r3, #16
 8006616:	4a27      	ldr	r2, [pc, #156]	@ (80066b4 <DMA_CalcBaseAndBitshift+0x158>)
 8006618:	fba2 2303 	umull	r2, r3, r2, r3
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	4a24      	ldr	r2, [pc, #144]	@ (80066b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006628:	5cd3      	ldrb	r3, [r2, r3]
 800662a:	461a      	mov	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d908      	bls.n	8006648 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	4b1f      	ldr	r3, [pc, #124]	@ (80066bc <DMA_CalcBaseAndBitshift+0x160>)
 800663e:	4013      	ands	r3, r2
 8006640:	1d1a      	adds	r2, r3, #4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	659a      	str	r2, [r3, #88]	@ 0x58
 8006646:	e00d      	b.n	8006664 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	4b1b      	ldr	r3, [pc, #108]	@ (80066bc <DMA_CalcBaseAndBitshift+0x160>)
 8006650:	4013      	ands	r3, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6593      	str	r3, [r2, #88]	@ 0x58
 8006656:	e005      	b.n	8006664 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	40020010 	.word	0x40020010
 8006678:	40020028 	.word	0x40020028
 800667c:	40020040 	.word	0x40020040
 8006680:	40020058 	.word	0x40020058
 8006684:	40020070 	.word	0x40020070
 8006688:	40020088 	.word	0x40020088
 800668c:	400200a0 	.word	0x400200a0
 8006690:	400200b8 	.word	0x400200b8
 8006694:	40020410 	.word	0x40020410
 8006698:	40020428 	.word	0x40020428
 800669c:	40020440 	.word	0x40020440
 80066a0:	40020458 	.word	0x40020458
 80066a4:	40020470 	.word	0x40020470
 80066a8:	40020488 	.word	0x40020488
 80066ac:	400204a0 	.word	0x400204a0
 80066b0:	400204b8 	.word	0x400204b8
 80066b4:	aaaaaaab 	.word	0xaaaaaaab
 80066b8:	08017bb0 	.word	0x08017bb0
 80066bc:	fffffc00 	.word	0xfffffc00

080066c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d120      	bne.n	8006716 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d858      	bhi.n	800678e <DMA_CheckFifoParam+0xce>
 80066dc:	a201      	add	r2, pc, #4	@ (adr r2, 80066e4 <DMA_CheckFifoParam+0x24>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	08006707 	.word	0x08006707
 80066ec:	080066f5 	.word	0x080066f5
 80066f0:	0800678f 	.word	0x0800678f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d048      	beq.n	8006792 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006704:	e045      	b.n	8006792 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800670e:	d142      	bne.n	8006796 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006714:	e03f      	b.n	8006796 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800671e:	d123      	bne.n	8006768 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006724:	2b03      	cmp	r3, #3
 8006726:	d838      	bhi.n	800679a <DMA_CheckFifoParam+0xda>
 8006728:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <DMA_CheckFifoParam+0x70>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006741 	.word	0x08006741
 8006734:	08006747 	.word	0x08006747
 8006738:	08006741 	.word	0x08006741
 800673c:	08006759 	.word	0x08006759
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
        break;
 8006744:	e030      	b.n	80067a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d025      	beq.n	800679e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006756:	e022      	b.n	800679e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006760:	d11f      	bne.n	80067a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006766:	e01c      	b.n	80067a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	2b02      	cmp	r3, #2
 800676e:	d902      	bls.n	8006776 <DMA_CheckFifoParam+0xb6>
 8006770:	2b03      	cmp	r3, #3
 8006772:	d003      	beq.n	800677c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006774:	e018      	b.n	80067a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	73fb      	strb	r3, [r7, #15]
        break;
 800677a:	e015      	b.n	80067a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006780:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00e      	beq.n	80067a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
    break;
 800678c:	e00b      	b.n	80067a6 <DMA_CheckFifoParam+0xe6>
        break;
 800678e:	bf00      	nop
 8006790:	e00a      	b.n	80067a8 <DMA_CheckFifoParam+0xe8>
        break;
 8006792:	bf00      	nop
 8006794:	e008      	b.n	80067a8 <DMA_CheckFifoParam+0xe8>
        break;
 8006796:	bf00      	nop
 8006798:	e006      	b.n	80067a8 <DMA_CheckFifoParam+0xe8>
        break;
 800679a:	bf00      	nop
 800679c:	e004      	b.n	80067a8 <DMA_CheckFifoParam+0xe8>
        break;
 800679e:	bf00      	nop
 80067a0:	e002      	b.n	80067a8 <DMA_CheckFifoParam+0xe8>
        break;
 80067a2:	bf00      	nop
 80067a4:	e000      	b.n	80067a8 <DMA_CheckFifoParam+0xe8>
    break;
 80067a6:	bf00      	nop
    }
  }

  return status;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop

080067b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a38      	ldr	r2, [pc, #224]	@ (80068ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d022      	beq.n	8006816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a36      	ldr	r2, [pc, #216]	@ (80068b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d01d      	beq.n	8006816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a35      	ldr	r2, [pc, #212]	@ (80068b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d018      	beq.n	8006816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a33      	ldr	r2, [pc, #204]	@ (80068b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d013      	beq.n	8006816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a32      	ldr	r2, [pc, #200]	@ (80068bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00e      	beq.n	8006816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a30      	ldr	r2, [pc, #192]	@ (80068c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d009      	beq.n	8006816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2f      	ldr	r2, [pc, #188]	@ (80068c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d004      	beq.n	8006816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a2d      	ldr	r2, [pc, #180]	@ (80068c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d101      	bne.n	800681a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01a      	beq.n	8006856 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	3b08      	subs	r3, #8
 8006828:	4a28      	ldr	r2, [pc, #160]	@ (80068cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800682a:	fba2 2303 	umull	r2, r3, r2, r3
 800682e:	091b      	lsrs	r3, r3, #4
 8006830:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4b26      	ldr	r3, [pc, #152]	@ (80068d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a24      	ldr	r2, [pc, #144]	@ (80068d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006844:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f003 031f 	and.w	r3, r3, #31
 800684c:	2201      	movs	r2, #1
 800684e:	409a      	lsls	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006854:	e024      	b.n	80068a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	3b10      	subs	r3, #16
 800685e:	4a1e      	ldr	r2, [pc, #120]	@ (80068d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006860:	fba2 2303 	umull	r2, r3, r2, r3
 8006864:	091b      	lsrs	r3, r3, #4
 8006866:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4a1c      	ldr	r2, [pc, #112]	@ (80068dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d806      	bhi.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4a1b      	ldr	r2, [pc, #108]	@ (80068e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d902      	bls.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3308      	adds	r3, #8
 800687c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4b18      	ldr	r3, [pc, #96]	@ (80068e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	461a      	mov	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a16      	ldr	r2, [pc, #88]	@ (80068e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006890:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	2201      	movs	r2, #1
 800689a:	409a      	lsls	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	58025408 	.word	0x58025408
 80068b0:	5802541c 	.word	0x5802541c
 80068b4:	58025430 	.word	0x58025430
 80068b8:	58025444 	.word	0x58025444
 80068bc:	58025458 	.word	0x58025458
 80068c0:	5802546c 	.word	0x5802546c
 80068c4:	58025480 	.word	0x58025480
 80068c8:	58025494 	.word	0x58025494
 80068cc:	cccccccd 	.word	0xcccccccd
 80068d0:	16009600 	.word	0x16009600
 80068d4:	58025880 	.word	0x58025880
 80068d8:	aaaaaaab 	.word	0xaaaaaaab
 80068dc:	400204b8 	.word	0x400204b8
 80068e0:	4002040f 	.word	0x4002040f
 80068e4:	10008200 	.word	0x10008200
 80068e8:	40020880 	.word	0x40020880

080068ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d04a      	beq.n	8006998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b08      	cmp	r3, #8
 8006906:	d847      	bhi.n	8006998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a25      	ldr	r2, [pc, #148]	@ (80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d022      	beq.n	8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a24      	ldr	r2, [pc, #144]	@ (80069a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d01d      	beq.n	8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a22      	ldr	r2, [pc, #136]	@ (80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d018      	beq.n	8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a21      	ldr	r2, [pc, #132]	@ (80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d013      	beq.n	8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1f      	ldr	r2, [pc, #124]	@ (80069b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00e      	beq.n	8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1e      	ldr	r2, [pc, #120]	@ (80069b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d009      	beq.n	8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1c      	ldr	r2, [pc, #112]	@ (80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d101      	bne.n	800695c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006958:	2301      	movs	r3, #1
 800695a:	e000      	b.n	800695e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800695c:	2300      	movs	r3, #0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4b17      	ldr	r3, [pc, #92]	@ (80069c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a15      	ldr	r2, [pc, #84]	@ (80069c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006974:	671a      	str	r2, [r3, #112]	@ 0x70
 8006976:	e009      	b.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4b14      	ldr	r3, [pc, #80]	@ (80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	461a      	mov	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a11      	ldr	r2, [pc, #68]	@ (80069d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800698a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3b01      	subs	r3, #1
 8006990:	2201      	movs	r2, #1
 8006992:	409a      	lsls	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006998:	bf00      	nop
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	58025408 	.word	0x58025408
 80069a8:	5802541c 	.word	0x5802541c
 80069ac:	58025430 	.word	0x58025430
 80069b0:	58025444 	.word	0x58025444
 80069b4:	58025458 	.word	0x58025458
 80069b8:	5802546c 	.word	0x5802546c
 80069bc:	58025480 	.word	0x58025480
 80069c0:	58025494 	.word	0x58025494
 80069c4:	1600963f 	.word	0x1600963f
 80069c8:	58025940 	.word	0x58025940
 80069cc:	1000823f 	.word	0x1000823f
 80069d0:	40020940 	.word	0x40020940

080069d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b089      	sub	sp, #36	@ 0x24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069e2:	4b89      	ldr	r3, [pc, #548]	@ (8006c08 <HAL_GPIO_Init+0x234>)
 80069e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069e6:	e194      	b.n	8006d12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	2101      	movs	r1, #1
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	fa01 f303 	lsl.w	r3, r1, r3
 80069f4:	4013      	ands	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 8186 	beq.w	8006d0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d005      	beq.n	8006a18 <HAL_GPIO_Init+0x44>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d130      	bne.n	8006a7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	2203      	movs	r2, #3
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a4e:	2201      	movs	r2, #1
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	43db      	mvns	r3, r3
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	091b      	lsrs	r3, r3, #4
 8006a64:	f003 0201 	and.w	r2, r3, #1
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d017      	beq.n	8006ab6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	2203      	movs	r2, #3
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43db      	mvns	r3, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d123      	bne.n	8006b0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	08da      	lsrs	r2, r3, #3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3208      	adds	r2, #8
 8006aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	220f      	movs	r2, #15
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	08da      	lsrs	r2, r3, #3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3208      	adds	r2, #8
 8006b04:	69b9      	ldr	r1, [r7, #24]
 8006b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	2203      	movs	r2, #3
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f003 0203 	and.w	r2, r3, #3
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80e0 	beq.w	8006d0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8006c0c <HAL_GPIO_Init+0x238>)
 8006b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b52:	4a2e      	ldr	r2, [pc, #184]	@ (8006c0c <HAL_GPIO_Init+0x238>)
 8006b54:	f043 0302 	orr.w	r3, r3, #2
 8006b58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c0c <HAL_GPIO_Init+0x238>)
 8006b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b6a:	4a29      	ldr	r2, [pc, #164]	@ (8006c10 <HAL_GPIO_Init+0x23c>)
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	089b      	lsrs	r3, r3, #2
 8006b70:	3302      	adds	r3, #2
 8006b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	220f      	movs	r2, #15
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43db      	mvns	r3, r3
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a20      	ldr	r2, [pc, #128]	@ (8006c14 <HAL_GPIO_Init+0x240>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d052      	beq.n	8006c3c <HAL_GPIO_Init+0x268>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a1f      	ldr	r2, [pc, #124]	@ (8006c18 <HAL_GPIO_Init+0x244>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d031      	beq.n	8006c02 <HAL_GPIO_Init+0x22e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8006c1c <HAL_GPIO_Init+0x248>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d02b      	beq.n	8006bfe <HAL_GPIO_Init+0x22a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c20 <HAL_GPIO_Init+0x24c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d025      	beq.n	8006bfa <HAL_GPIO_Init+0x226>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c24 <HAL_GPIO_Init+0x250>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01f      	beq.n	8006bf6 <HAL_GPIO_Init+0x222>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c28 <HAL_GPIO_Init+0x254>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d019      	beq.n	8006bf2 <HAL_GPIO_Init+0x21e>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006c2c <HAL_GPIO_Init+0x258>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <HAL_GPIO_Init+0x21a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a19      	ldr	r2, [pc, #100]	@ (8006c30 <HAL_GPIO_Init+0x25c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00d      	beq.n	8006bea <HAL_GPIO_Init+0x216>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a18      	ldr	r2, [pc, #96]	@ (8006c34 <HAL_GPIO_Init+0x260>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d007      	beq.n	8006be6 <HAL_GPIO_Init+0x212>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a17      	ldr	r2, [pc, #92]	@ (8006c38 <HAL_GPIO_Init+0x264>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d101      	bne.n	8006be2 <HAL_GPIO_Init+0x20e>
 8006bde:	2309      	movs	r3, #9
 8006be0:	e02d      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006be2:	230a      	movs	r3, #10
 8006be4:	e02b      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006be6:	2308      	movs	r3, #8
 8006be8:	e029      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bea:	2307      	movs	r3, #7
 8006bec:	e027      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bee:	2306      	movs	r3, #6
 8006bf0:	e025      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bf2:	2305      	movs	r3, #5
 8006bf4:	e023      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bf6:	2304      	movs	r3, #4
 8006bf8:	e021      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e01f      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e01d      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e01b      	b.n	8006c3e <HAL_GPIO_Init+0x26a>
 8006c06:	bf00      	nop
 8006c08:	58000080 	.word	0x58000080
 8006c0c:	58024400 	.word	0x58024400
 8006c10:	58000400 	.word	0x58000400
 8006c14:	58020000 	.word	0x58020000
 8006c18:	58020400 	.word	0x58020400
 8006c1c:	58020800 	.word	0x58020800
 8006c20:	58020c00 	.word	0x58020c00
 8006c24:	58021000 	.word	0x58021000
 8006c28:	58021400 	.word	0x58021400
 8006c2c:	58021800 	.word	0x58021800
 8006c30:	58021c00 	.word	0x58021c00
 8006c34:	58022000 	.word	0x58022000
 8006c38:	58022400 	.word	0x58022400
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	f002 0203 	and.w	r2, r2, #3
 8006c44:	0092      	lsls	r2, r2, #2
 8006c46:	4093      	lsls	r3, r2
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c4e:	4938      	ldr	r1, [pc, #224]	@ (8006d30 <HAL_GPIO_Init+0x35c>)
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	089b      	lsrs	r3, r3, #2
 8006c54:	3302      	adds	r3, #2
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	43db      	mvns	r3, r3
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	43db      	mvns	r3, r3
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	43db      	mvns	r3, r3
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f47f ae63 	bne.w	80069e8 <HAL_GPIO_Init+0x14>
  }
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	3724      	adds	r7, #36	@ 0x24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	58000400 	.word	0x58000400

08006d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	807b      	strh	r3, [r7, #2]
 8006d40:	4613      	mov	r3, r2
 8006d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d44:	787b      	ldrb	r3, [r7, #1]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d4a:	887a      	ldrh	r2, [r7, #2]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d50:	e003      	b.n	8006d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d52:	887b      	ldrh	r3, [r7, #2]
 8006d54:	041a      	lsls	r2, r3, #16
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	619a      	str	r2, [r3, #24]
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e08b      	b.n	8006e92 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fa fc18 	bl	80015c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2224      	movs	r2, #36	@ 0x24
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0201 	bic.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006db8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d107      	bne.n	8006de2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006dde:	609a      	str	r2, [r3, #8]
 8006de0:	e006      	b.n	8006df0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006dee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d108      	bne.n	8006e0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e06:	605a      	str	r2, [r3, #4]
 8006e08:	e007      	b.n	8006e1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6859      	ldr	r1, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	4b1d      	ldr	r3, [pc, #116]	@ (8006e9c <HAL_I2C_Init+0x134>)
 8006e26:	430b      	orrs	r3, r1
 8006e28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69d9      	ldr	r1, [r3, #28]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a1a      	ldr	r2, [r3, #32]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	02008000 	.word	0x02008000

08006ea0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	460b      	mov	r3, r1
 8006eae:	817b      	strh	r3, [r7, #10]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	f040 80fd 	bne.w	80070bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_I2C_Master_Transmit+0x30>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e0f6      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ed8:	f7fb fab0 	bl	800243c <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	2319      	movs	r3, #25
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f002 f89e 	bl	800902c <I2C_WaitOnFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e0e1      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2221      	movs	r2, #33	@ 0x21
 8006efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2210      	movs	r2, #16
 8006f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	893a      	ldrh	r2, [r7, #8]
 8006f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2bff      	cmp	r3, #255	@ 0xff
 8006f2a:	d906      	bls.n	8006f3a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	22ff      	movs	r2, #255	@ 0xff
 8006f30:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006f32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	e007      	b.n	8006f4a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006f44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f48:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d024      	beq.n	8006f9c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	3301      	adds	r3, #1
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	8979      	ldrh	r1, [r7, #10]
 8006f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80070c8 <HAL_I2C_Master_Transmit+0x228>)
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f002 fa0d 	bl	80093b4 <I2C_TransferConfig>
 8006f9a:	e066      	b.n	800706a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	8979      	ldrh	r1, [r7, #10]
 8006fa4:	4b48      	ldr	r3, [pc, #288]	@ (80070c8 <HAL_I2C_Master_Transmit+0x228>)
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f002 fa02 	bl	80093b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006fb0:	e05b      	b.n	800706a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	6a39      	ldr	r1, [r7, #32]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f002 f891 	bl	80090de <I2C_WaitOnTXISFlagUntilTimeout>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e07b      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d034      	beq.n	800706a <HAL_I2C_Master_Transmit+0x1ca>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007004:	2b00      	cmp	r3, #0
 8007006:	d130      	bne.n	800706a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	2200      	movs	r2, #0
 8007010:	2180      	movs	r1, #128	@ 0x80
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f002 f80a 	bl	800902c <I2C_WaitOnFlagUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e04d      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007026:	b29b      	uxth	r3, r3
 8007028:	2bff      	cmp	r3, #255	@ 0xff
 800702a:	d90e      	bls.n	800704a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	22ff      	movs	r2, #255	@ 0xff
 8007030:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007036:	b2da      	uxtb	r2, r3
 8007038:	8979      	ldrh	r1, [r7, #10]
 800703a:	2300      	movs	r3, #0
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f002 f9b6 	bl	80093b4 <I2C_TransferConfig>
 8007048:	e00f      	b.n	800706a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007058:	b2da      	uxtb	r2, r3
 800705a:	8979      	ldrh	r1, [r7, #10]
 800705c:	2300      	movs	r3, #0
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f002 f9a5 	bl	80093b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800706e:	b29b      	uxth	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d19e      	bne.n	8006fb2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	6a39      	ldr	r1, [r7, #32]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f002 f877 	bl	800916c <I2C_WaitOnSTOPFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e01a      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2220      	movs	r2, #32
 800708e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6859      	ldr	r1, [r3, #4]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b0c      	ldr	r3, [pc, #48]	@ (80070cc <HAL_I2C_Master_Transmit+0x22c>)
 800709c:	400b      	ands	r3, r1
 800709e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	e000      	b.n	80070be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80070bc:	2302      	movs	r3, #2
  }
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	80002000 	.word	0x80002000
 80070cc:	fe00e800 	.word	0xfe00e800

080070d0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	@ 0x28
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	607a      	str	r2, [r7, #4]
 80070da:	461a      	mov	r2, r3
 80070dc:	460b      	mov	r3, r1
 80070de:	817b      	strh	r3, [r7, #10]
 80070e0:	4613      	mov	r3, r2
 80070e2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	f040 80ef 	bne.w	80072d4 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007104:	d101      	bne.n	800710a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8007106:	2302      	movs	r3, #2
 8007108:	e0e5      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_I2C_Master_Transmit_DMA+0x48>
 8007114:	2302      	movs	r3, #2
 8007116:	e0de      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x206>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2221      	movs	r2, #33	@ 0x21
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2210      	movs	r2, #16
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	893a      	ldrh	r2, [r7, #8]
 8007140:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4a66      	ldr	r2, [pc, #408]	@ (80072e0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8007146:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4a66      	ldr	r2, [pc, #408]	@ (80072e4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800714c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007152:	b29b      	uxth	r3, r3
 8007154:	2bff      	cmp	r3, #255	@ 0xff
 8007156:	d906      	bls.n	8007166 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	22ff      	movs	r2, #255	@ 0xff
 800715c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800715e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	e007      	b.n	8007176 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007170:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007174:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d01a      	beq.n	80071b4 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007182:	781a      	ldrb	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007198:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800719e:	b29b      	uxth	r3, r3
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d074      	beq.n	80072a6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d022      	beq.n	800720a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c8:	4a47      	ldr	r2, [pc, #284]	@ (80072e8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80071ca:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d0:	4a46      	ldr	r2, [pc, #280]	@ (80072ec <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80071d2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d8:	2200      	movs	r2, #0
 80071da:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e0:	2200      	movs	r2, #0
 80071e2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ec:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80071f4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80071fa:	f7fd f8f1 	bl	80043e0 <HAL_DMA_Start_IT>
 80071fe:	4603      	mov	r3, r0
 8007200:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d13a      	bne.n	800727e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007208:	e013      	b.n	8007232 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e051      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007236:	b2db      	uxtb	r3, r3
 8007238:	3301      	adds	r3, #1
 800723a:	b2da      	uxtb	r2, r3
 800723c:	8979      	ldrh	r1, [r7, #10]
 800723e:	4b2c      	ldr	r3, [pc, #176]	@ (80072f0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f002 f8b5 	bl	80093b4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007264:	2110      	movs	r1, #16
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f002 f8d6 	bl	8009418 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e028      	b.n	80072d0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2220      	movs	r2, #32
 8007282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007292:	f043 0210 	orr.w	r2, r3, #16
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e017      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4a12      	ldr	r2, [pc, #72]	@ (80072f4 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80072aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	8979      	ldrh	r1, [r7, #10]
 80072b2:	4b0f      	ldr	r3, [pc, #60]	@ (80072f0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f002 f87a 	bl	80093b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80072c8:	2101      	movs	r1, #1
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f002 f8a4 	bl	8009418 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e000      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80072d4:	2302      	movs	r3, #2
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3720      	adds	r7, #32
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	ffff0000 	.word	0xffff0000
 80072e4:	0800792f 	.word	0x0800792f
 80072e8:	08008ce7 	.word	0x08008ce7
 80072ec:	08008d7d 	.word	0x08008d7d
 80072f0:	80002000 	.word	0x80002000
 80072f4:	080074bf 	.word	0x080074bf

080072f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
  }
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	0a1b      	lsrs	r3, r3, #8
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d010      	beq.n	8007372 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	09db      	lsrs	r3, r3, #7
 8007354:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007360:	f043 0201 	orr.w	r2, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007370:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	0a9b      	lsrs	r3, r3, #10
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	09db      	lsrs	r3, r3, #7
 8007382:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738e:	f043 0208 	orr.w	r2, r3, #8
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800739e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	0a5b      	lsrs	r3, r3, #9
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d010      	beq.n	80073ce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	09db      	lsrs	r3, r3, #7
 80073b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073bc:	f043 0202 	orr.w	r2, r3, #2
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f003 030b 	and.w	r3, r3, #11
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fb45 	bl	8008a70 <I2C_ITError>
  }
}
 80073e6:	bf00      	nop
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
 800744a:	4613      	mov	r3, r2
 800744c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b088      	sub	sp, #32
 80074c2:	af02      	add	r7, sp, #8
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <I2C_Master_ISR_IT+0x1e>
 80074d8:	2302      	movs	r3, #2
 80074da:	e120      	b.n	800771e <I2C_Master_ISR_IT+0x260>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	091b      	lsrs	r3, r3, #4
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d013      	beq.n	8007518 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	091b      	lsrs	r3, r3, #4
 80074f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00d      	beq.n	8007518 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2210      	movs	r2, #16
 8007502:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007508:	f043 0204 	orr.w	r2, r3, #4
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f001 fbc4 	bl	8008c9e <I2C_Flush_TXDR>
 8007516:	e0ed      	b.n	80076f4 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	089b      	lsrs	r3, r3, #2
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d023      	beq.n	800756c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	089b      	lsrs	r3, r3, #2
 8007528:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01d      	beq.n	800756c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f023 0304 	bic.w	r3, r3, #4
 8007536:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007560:	b29b      	uxth	r3, r3
 8007562:	3b01      	subs	r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800756a:	e0c3      	b.n	80076f4 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	099b      	lsrs	r3, r3, #6
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	d12a      	bne.n	80075ce <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007580:	2b00      	cmp	r3, #0
 8007582:	d024      	beq.n	80075ce <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01e      	beq.n	80075ce <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 80ac 	beq.w	80076f4 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a0:	781a      	ldrb	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80075cc:	e092      	b.n	80076f4 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	09db      	lsrs	r3, r3, #7
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d05d      	beq.n	8007696 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	099b      	lsrs	r3, r3, #6
 80075de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d057      	beq.n	8007696 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d040      	beq.n	8007672 <I2C_Master_ISR_IT+0x1b4>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d13c      	bne.n	8007672 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007604:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800760a:	b29b      	uxth	r3, r3
 800760c:	2bff      	cmp	r3, #255	@ 0xff
 800760e:	d90e      	bls.n	800762e <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	22ff      	movs	r2, #255	@ 0xff
 8007614:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800761a:	b2da      	uxtb	r2, r3
 800761c:	8a79      	ldrh	r1, [r7, #18]
 800761e:	2300      	movs	r3, #0
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f001 fec4 	bl	80093b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800762c:	e032      	b.n	8007694 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007640:	d00b      	beq.n	800765a <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007646:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800764c:	8a79      	ldrh	r1, [r7, #18]
 800764e:	2000      	movs	r0, #0
 8007650:	9000      	str	r0, [sp, #0]
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f001 feae 	bl	80093b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007658:	e01c      	b.n	8007694 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800765e:	b2da      	uxtb	r2, r3
 8007660:	8a79      	ldrh	r1, [r7, #18]
 8007662:	2300      	movs	r3, #0
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f001 fea2 	bl	80093b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007670:	e010      	b.n	8007694 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800767c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007680:	d003      	beq.n	800768a <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fdde 	bl	8008244 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007688:	e034      	b.n	80076f4 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800768a:	2140      	movs	r1, #64	@ 0x40
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f001 f9ef 	bl	8008a70 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007692:	e02f      	b.n	80076f4 <I2C_Master_ISR_IT+0x236>
 8007694:	e02e      	b.n	80076f4 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	099b      	lsrs	r3, r3, #6
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d028      	beq.n	80076f4 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	099b      	lsrs	r3, r3, #6
 80076a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d022      	beq.n	80076f4 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d119      	bne.n	80076ec <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076c6:	d015      	beq.n	80076f4 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80076d0:	d108      	bne.n	80076e4 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	e007      	b.n	80076f4 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fdad 	bl	8008244 <I2C_ITMasterSeqCplt>
 80076ea:	e003      	b.n	80076f4 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80076ec:	2140      	movs	r1, #64	@ 0x40
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f001 f9be 	bl	8008a70 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	095b      	lsrs	r3, r3, #5
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d009      	beq.n	8007714 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800770c:	6979      	ldr	r1, [r7, #20]
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fe34 	bl	800837c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007736:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <I2C_Slave_ISR_IT+0x24>
 8007746:	2302      	movs	r3, #2
 8007748:	e0ed      	b.n	8007926 <I2C_Slave_ISR_IT+0x200>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800776a:	6939      	ldr	r1, [r7, #16]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fecf 	bl	8008510 <I2C_ITSlaveCplt>
 8007772:	e0d3      	b.n	800791c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	091b      	lsrs	r3, r3, #4
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d04d      	beq.n	800781c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	091b      	lsrs	r3, r3, #4
 8007784:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007788:	2b00      	cmp	r3, #0
 800778a:	d047      	beq.n	800781c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d128      	bne.n	80077e8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b28      	cmp	r3, #40	@ 0x28
 80077a0:	d108      	bne.n	80077b4 <I2C_Slave_ISR_IT+0x8e>
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077a8:	d104      	bne.n	80077b4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80077aa:	6939      	ldr	r1, [r7, #16]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f001 f909 	bl	80089c4 <I2C_ITListenCplt>
 80077b2:	e032      	b.n	800781a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b29      	cmp	r3, #41	@ 0x29
 80077be:	d10e      	bne.n	80077de <I2C_Slave_ISR_IT+0xb8>
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80077c6:	d00a      	beq.n	80077de <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2210      	movs	r2, #16
 80077ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f001 fa64 	bl	8008c9e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fd71 	bl	80082be <I2C_ITSlaveSeqCplt>
 80077dc:	e01d      	b.n	800781a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2210      	movs	r2, #16
 80077e4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80077e6:	e096      	b.n	8007916 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2210      	movs	r2, #16
 80077ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f4:	f043 0204 	orr.w	r2, r3, #4
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <I2C_Slave_ISR_IT+0xe6>
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007808:	f040 8085 	bne.w	8007916 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007810:	4619      	mov	r1, r3
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 f92c 	bl	8008a70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007818:	e07d      	b.n	8007916 <I2C_Slave_ISR_IT+0x1f0>
 800781a:	e07c      	b.n	8007916 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	089b      	lsrs	r3, r3, #2
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d030      	beq.n	800788a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	089b      	lsrs	r3, r3, #2
 800782c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007830:	2b00      	cmp	r3, #0
 8007832:	d02a      	beq.n	800788a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d018      	beq.n	8007870 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007874:	b29b      	uxth	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d14f      	bne.n	800791a <I2C_Slave_ISR_IT+0x1f4>
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007880:	d04b      	beq.n	800791a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 fd1b 	bl	80082be <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007888:	e047      	b.n	800791a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	08db      	lsrs	r3, r3, #3
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	08db      	lsrs	r3, r3, #3
 800789a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d004      	beq.n	80078ac <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80078a2:	6939      	ldr	r1, [r7, #16]
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fc49 	bl	800813c <I2C_ITAddrCplt>
 80078aa:	e037      	b.n	800791c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d031      	beq.n	800791c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	085b      	lsrs	r3, r3, #1
 80078bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d02b      	beq.n	800791c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d018      	beq.n	8007900 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d2:	781a      	ldrb	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80078fe:	e00d      	b.n	800791c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007906:	d002      	beq.n	800790e <I2C_Slave_ISR_IT+0x1e8>
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fcd5 	bl	80082be <I2C_ITSlaveSeqCplt>
 8007914:	e002      	b.n	800791c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8007916:	bf00      	nop
 8007918:	e000      	b.n	800791c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800791a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b088      	sub	sp, #32
 8007932:	af02      	add	r7, sp, #8
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <I2C_Master_ISR_DMA+0x1a>
 8007944:	2302      	movs	r3, #2
 8007946:	e0e1      	b.n	8007b0c <I2C_Master_ISR_DMA+0x1de>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	091b      	lsrs	r3, r3, #4
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d017      	beq.n	800798c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	091b      	lsrs	r3, r3, #4
 8007960:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007964:	2b00      	cmp	r3, #0
 8007966:	d011      	beq.n	800798c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2210      	movs	r2, #16
 800796e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007974:	f043 0204 	orr.w	r2, r3, #4
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800797c:	2120      	movs	r1, #32
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f001 fd4a 	bl	8009418 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f001 f98a 	bl	8008c9e <I2C_Flush_TXDR>
 800798a:	e0ba      	b.n	8007b02 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	09db      	lsrs	r3, r3, #7
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d072      	beq.n	8007a7e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	099b      	lsrs	r3, r3, #6
 800799c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d06c      	beq.n	8007a7e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079b2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d04e      	beq.n	8007a5c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ca:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2bff      	cmp	r3, #255	@ 0xff
 80079d4:	d906      	bls.n	80079e4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	22ff      	movs	r2, #255	@ 0xff
 80079da:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80079dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	e010      	b.n	8007a06 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80079f6:	d003      	beq.n	8007a00 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	e002      	b.n	8007a06 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007a00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a04:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	8a79      	ldrh	r1, [r7, #18]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f001 fccd 	bl	80093b4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b22      	cmp	r3, #34	@ 0x22
 8007a36:	d108      	bne.n	8007a4a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007a48:	e05b      	b.n	8007b02 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007a5a:	e052      	b.n	8007b02 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a6a:	d003      	beq.n	8007a74 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fbe9 	bl	8008244 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007a72:	e046      	b.n	8007b02 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007a74:	2140      	movs	r1, #64	@ 0x40
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 fffa 	bl	8008a70 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007a7c:	e041      	b.n	8007b02 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	099b      	lsrs	r3, r3, #6
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d029      	beq.n	8007ade <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	099b      	lsrs	r3, r3, #6
 8007a8e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d023      	beq.n	8007ade <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d119      	bne.n	8007ad4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aae:	d027      	beq.n	8007b00 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ab8:	d108      	bne.n	8007acc <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ac8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007aca:	e019      	b.n	8007b00 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fbb9 	bl	8008244 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007ad2:	e015      	b.n	8007b00 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007ad4:	2140      	movs	r1, #64	@ 0x40
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 ffca 	bl	8008a70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007adc:	e010      	b.n	8007b00 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	095b      	lsrs	r3, r3, #5
 8007aee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 fc3f 	bl	800837c <I2C_ITMasterCplt>
 8007afe:	e000      	b.n	8007b02 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007b00:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007b20:	4b92      	ldr	r3, [pc, #584]	@ (8007d6c <I2C_Mem_ISR_DMA+0x258>)
 8007b22:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <I2C_Mem_ISR_DMA+0x1e>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e118      	b.n	8007d64 <I2C_Mem_ISR_DMA+0x250>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	091b      	lsrs	r3, r3, #4
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d017      	beq.n	8007b76 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	091b      	lsrs	r3, r3, #4
 8007b4a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d011      	beq.n	8007b76 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2210      	movs	r2, #16
 8007b58:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b5e:	f043 0204 	orr.w	r2, r3, #4
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007b66:	2120      	movs	r1, #32
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f001 fc55 	bl	8009418 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f001 f895 	bl	8008c9e <I2C_Flush_TXDR>
 8007b74:	e0f1      	b.n	8007d5a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	085b      	lsrs	r3, r3, #1
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00f      	beq.n	8007ba2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007b96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007ba0:	e0db      	b.n	8007d5a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	09db      	lsrs	r3, r3, #7
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d060      	beq.n	8007c70 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	099b      	lsrs	r3, r3, #6
 8007bb2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d05a      	beq.n	8007c70 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007bba:	2101      	movs	r1, #1
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f001 fcaf 	bl	8009520 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007bc2:	2110      	movs	r1, #16
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f001 fc27 	bl	8009418 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d048      	beq.n	8007c66 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2bff      	cmp	r3, #255	@ 0xff
 8007bdc:	d910      	bls.n	8007c00 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	22ff      	movs	r2, #255	@ 0xff
 8007be2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be8:	b299      	uxth	r1, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f001 fbdb 	bl	80093b4 <I2C_TransferConfig>
 8007bfe:	e011      	b.n	8007c24 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c0e:	b299      	uxth	r1, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	2300      	movs	r3, #0
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f001 fbc8 	bl	80093b4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b22      	cmp	r3, #34	@ 0x22
 8007c40:	d108      	bne.n	8007c54 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c50:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007c52:	e082      	b.n	8007d5a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c62:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007c64:	e079      	b.n	8007d5a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007c66:	2140      	movs	r1, #64	@ 0x40
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 ff01 	bl	8008a70 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007c6e:	e074      	b.n	8007d5a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	099b      	lsrs	r3, r3, #6
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d05e      	beq.n	8007d3a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	099b      	lsrs	r3, r3, #6
 8007c80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d058      	beq.n	8007d3a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007c88:	2101      	movs	r1, #1
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f001 fc48 	bl	8009520 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007c90:	2110      	movs	r1, #16
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f001 fbc0 	bl	8009418 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b22      	cmp	r3, #34	@ 0x22
 8007ca2:	d101      	bne.n	8007ca8 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8007ca4:	4b32      	ldr	r3, [pc, #200]	@ (8007d70 <I2C_Mem_ISR_DMA+0x25c>)
 8007ca6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2bff      	cmp	r3, #255	@ 0xff
 8007cb0:	d910      	bls.n	8007cd4 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	22ff      	movs	r2, #255	@ 0xff
 8007cb6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cbc:	b299      	uxth	r1, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f001 fb71 	bl	80093b4 <I2C_TransferConfig>
 8007cd2:	e011      	b.n	8007cf8 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ce2:	b299      	uxth	r1, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f001 fb5e 	bl	80093b4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b22      	cmp	r3, #34	@ 0x22
 8007d14:	d108      	bne.n	8007d28 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d24:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d26:	e018      	b.n	8007d5a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d36:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d38:	e00f      	b.n	8007d5a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fb11 	bl	800837c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	80002000 	.word	0x80002000
 8007d70:	80002400 	.word	0x80002400

08007d74 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <I2C_Slave_ISR_DMA+0x24>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e1cc      	b.n	8008132 <I2C_Slave_ISR_DMA+0x3be>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	095b      	lsrs	r3, r3, #5
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fba8 	bl	8008510 <I2C_ITSlaveCplt>
 8007dc0:	e1b2      	b.n	8008128 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	091b      	lsrs	r3, r3, #4
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 819c 	beq.w	8008108 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	091b      	lsrs	r3, r3, #4
 8007dd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8195 	beq.w	8008108 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	0b9b      	lsrs	r3, r3, #14
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	0bdb      	lsrs	r3, r3, #15
 8007dee:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 8181 	beq.w	80080fa <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d07c      	beq.n	8007efa <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	0bdb      	lsrs	r3, r3, #15
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d076      	beq.n	8007efa <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a75      	ldr	r2, [pc, #468]	@ (8007fe8 <I2C_Slave_ISR_DMA+0x274>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d059      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a73      	ldr	r2, [pc, #460]	@ (8007fec <I2C_Slave_ISR_DMA+0x278>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d053      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a71      	ldr	r2, [pc, #452]	@ (8007ff0 <I2C_Slave_ISR_DMA+0x27c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d04d      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a6f      	ldr	r2, [pc, #444]	@ (8007ff4 <I2C_Slave_ISR_DMA+0x280>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d047      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a6d      	ldr	r2, [pc, #436]	@ (8007ff8 <I2C_Slave_ISR_DMA+0x284>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d041      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a6b      	ldr	r2, [pc, #428]	@ (8007ffc <I2C_Slave_ISR_DMA+0x288>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d03b      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a69      	ldr	r2, [pc, #420]	@ (8008000 <I2C_Slave_ISR_DMA+0x28c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d035      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a67      	ldr	r2, [pc, #412]	@ (8008004 <I2C_Slave_ISR_DMA+0x290>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d02f      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a65      	ldr	r2, [pc, #404]	@ (8008008 <I2C_Slave_ISR_DMA+0x294>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d029      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a63      	ldr	r2, [pc, #396]	@ (800800c <I2C_Slave_ISR_DMA+0x298>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d023      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a61      	ldr	r2, [pc, #388]	@ (8008010 <I2C_Slave_ISR_DMA+0x29c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d01d      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a5f      	ldr	r2, [pc, #380]	@ (8008014 <I2C_Slave_ISR_DMA+0x2a0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d017      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a5d      	ldr	r2, [pc, #372]	@ (8008018 <I2C_Slave_ISR_DMA+0x2a4>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d011      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a5b      	ldr	r2, [pc, #364]	@ (800801c <I2C_Slave_ISR_DMA+0x2a8>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d00b      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a59      	ldr	r2, [pc, #356]	@ (8008020 <I2C_Slave_ISR_DMA+0x2ac>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d005      	beq.n	8007ecc <I2C_Slave_ISR_DMA+0x158>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a57      	ldr	r2, [pc, #348]	@ (8008024 <I2C_Slave_ISR_DMA+0x2b0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d109      	bne.n	8007ee0 <I2C_Slave_ISR_DMA+0x16c>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	bf0c      	ite	eq
 8007ed8:	2301      	moveq	r3, #1
 8007eda:	2300      	movne	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	e008      	b.n	8007ef2 <I2C_Slave_ISR_DMA+0x17e>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	bf0c      	ite	eq
 8007eec:	2301      	moveq	r3, #1
 8007eee:	2300      	movne	r3, #0
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 809f 	beq.w	8008042 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	0b9b      	lsrs	r3, r3, #14
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8098 	beq.w	8008042 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a33      	ldr	r2, [pc, #204]	@ (8007fe8 <I2C_Slave_ISR_DMA+0x274>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d059      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a31      	ldr	r2, [pc, #196]	@ (8007fec <I2C_Slave_ISR_DMA+0x278>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d053      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a2f      	ldr	r2, [pc, #188]	@ (8007ff0 <I2C_Slave_ISR_DMA+0x27c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d04d      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8007ff4 <I2C_Slave_ISR_DMA+0x280>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d047      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2b      	ldr	r2, [pc, #172]	@ (8007ff8 <I2C_Slave_ISR_DMA+0x284>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d041      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a29      	ldr	r2, [pc, #164]	@ (8007ffc <I2C_Slave_ISR_DMA+0x288>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d03b      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a27      	ldr	r2, [pc, #156]	@ (8008000 <I2C_Slave_ISR_DMA+0x28c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d035      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a25      	ldr	r2, [pc, #148]	@ (8008004 <I2C_Slave_ISR_DMA+0x290>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d02f      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a23      	ldr	r2, [pc, #140]	@ (8008008 <I2C_Slave_ISR_DMA+0x294>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d029      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a21      	ldr	r2, [pc, #132]	@ (800800c <I2C_Slave_ISR_DMA+0x298>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d023      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1f      	ldr	r2, [pc, #124]	@ (8008010 <I2C_Slave_ISR_DMA+0x29c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d01d      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008014 <I2C_Slave_ISR_DMA+0x2a0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d017      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8008018 <I2C_Slave_ISR_DMA+0x2a4>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d011      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a19      	ldr	r2, [pc, #100]	@ (800801c <I2C_Slave_ISR_DMA+0x2a8>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00b      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a17      	ldr	r2, [pc, #92]	@ (8008020 <I2C_Slave_ISR_DMA+0x2ac>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d005      	beq.n	8007fd2 <I2C_Slave_ISR_DMA+0x25e>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a15      	ldr	r2, [pc, #84]	@ (8008024 <I2C_Slave_ISR_DMA+0x2b0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d12a      	bne.n	8008028 <I2C_Slave_ISR_DMA+0x2b4>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bf0c      	ite	eq
 8007fde:	2301      	moveq	r3, #1
 8007fe0:	2300      	movne	r3, #0
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	e029      	b.n	800803a <I2C_Slave_ISR_DMA+0x2c6>
 8007fe6:	bf00      	nop
 8007fe8:	40020010 	.word	0x40020010
 8007fec:	40020028 	.word	0x40020028
 8007ff0:	40020040 	.word	0x40020040
 8007ff4:	40020058 	.word	0x40020058
 8007ff8:	40020070 	.word	0x40020070
 8007ffc:	40020088 	.word	0x40020088
 8008000:	400200a0 	.word	0x400200a0
 8008004:	400200b8 	.word	0x400200b8
 8008008:	40020410 	.word	0x40020410
 800800c:	40020428 	.word	0x40020428
 8008010:	40020440 	.word	0x40020440
 8008014:	40020458 	.word	0x40020458
 8008018:	40020470 	.word	0x40020470
 800801c:	40020488 	.word	0x40020488
 8008020:	400204a0 	.word	0x400204a0
 8008024:	400204b8 	.word	0x400204b8
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	bf0c      	ite	eq
 8008034:	2301      	moveq	r3, #1
 8008036:	2300      	movne	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800803e:	2301      	movs	r3, #1
 8008040:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d128      	bne.n	800809a <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b28      	cmp	r3, #40	@ 0x28
 8008052:	d108      	bne.n	8008066 <I2C_Slave_ISR_DMA+0x2f2>
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800805a:	d104      	bne.n	8008066 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 fcb0 	bl	80089c4 <I2C_ITListenCplt>
 8008064:	e048      	b.n	80080f8 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b29      	cmp	r3, #41	@ 0x29
 8008070:	d10e      	bne.n	8008090 <I2C_Slave_ISR_DMA+0x31c>
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008078:	d00a      	beq.n	8008090 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2210      	movs	r2, #16
 8008080:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fe0b 	bl	8008c9e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 f918 	bl	80082be <I2C_ITSlaveSeqCplt>
 800808e:	e033      	b.n	80080f8 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2210      	movs	r2, #16
 8008096:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008098:	e034      	b.n	8008104 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2210      	movs	r2, #16
 80080a0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a6:	f043 0204 	orr.w	r2, r3, #4
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080b4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <I2C_Slave_ISR_DMA+0x350>
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080c2:	d11f      	bne.n	8008104 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	2b21      	cmp	r3, #33	@ 0x21
 80080c8:	d002      	beq.n	80080d0 <I2C_Slave_ISR_DMA+0x35c>
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	2b29      	cmp	r3, #41	@ 0x29
 80080ce:	d103      	bne.n	80080d8 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2221      	movs	r2, #33	@ 0x21
 80080d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80080d6:	e008      	b.n	80080ea <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	2b22      	cmp	r3, #34	@ 0x22
 80080dc:	d002      	beq.n	80080e4 <I2C_Slave_ISR_DMA+0x370>
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080e2:	d102      	bne.n	80080ea <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2222      	movs	r2, #34	@ 0x22
 80080e8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ee:	4619      	mov	r1, r3
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 fcbd 	bl	8008a70 <I2C_ITError>
      if (treatdmanack == 1U)
 80080f6:	e005      	b.n	8008104 <I2C_Slave_ISR_DMA+0x390>
 80080f8:	e004      	b.n	8008104 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2210      	movs	r2, #16
 8008100:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008102:	e011      	b.n	8008128 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8008104:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008106:	e00f      	b.n	8008128 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	08db      	lsrs	r3, r3, #3
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	08db      	lsrs	r3, r3, #3
 8008118:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008120:	68b9      	ldr	r1, [r7, #8]
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 f80a 	bl	800813c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3720      	adds	r7, #32
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop

0800813c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800814c:	b2db      	uxtb	r3, r3
 800814e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008152:	2b28      	cmp	r3, #40	@ 0x28
 8008154:	d16a      	bne.n	800822c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	0c1b      	lsrs	r3, r3, #16
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	0c1b      	lsrs	r3, r3, #16
 800816e:	b29b      	uxth	r3, r3
 8008170:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008174:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	b29b      	uxth	r3, r3
 800817e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008182:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	b29b      	uxth	r3, r3
 800818c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008190:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	2b02      	cmp	r3, #2
 8008198:	d138      	bne.n	800820c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800819a:	897b      	ldrh	r3, [r7, #10]
 800819c:	09db      	lsrs	r3, r3, #7
 800819e:	b29a      	uxth	r2, r3
 80081a0:	89bb      	ldrh	r3, [r7, #12]
 80081a2:	4053      	eors	r3, r2
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f003 0306 	and.w	r3, r3, #6
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d11c      	bne.n	80081e8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80081ae:	897b      	ldrh	r3, [r7, #10]
 80081b0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d13b      	bne.n	800823c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2208      	movs	r2, #8
 80081d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081da:	89ba      	ldrh	r2, [r7, #12]
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff f92c 	bl	800743e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80081e6:	e029      	b.n	800823c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80081e8:	893b      	ldrh	r3, [r7, #8]
 80081ea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80081ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f995 	bl	8009520 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081fe:	89ba      	ldrh	r2, [r7, #12]
 8008200:	7bfb      	ldrb	r3, [r7, #15]
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff f91a 	bl	800743e <HAL_I2C_AddrCallback>
}
 800820a:	e017      	b.n	800823c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800820c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 f985 	bl	8009520 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800821e:	89ba      	ldrh	r2, [r7, #12]
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff f90a 	bl	800743e <HAL_I2C_AddrCallback>
}
 800822a:	e007      	b.n	800823c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2208      	movs	r2, #8
 8008232:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800823c:	bf00      	nop
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b21      	cmp	r3, #33	@ 0x21
 800825e:	d115      	bne.n	800828c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2211      	movs	r2, #17
 800826c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008274:	2101      	movs	r1, #1
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 f952 	bl	8009520 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff f8b2 	bl	80073ee <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800828a:	e014      	b.n	80082b6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2220      	movs	r2, #32
 8008290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2212      	movs	r2, #18
 8008298:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80082a0:	2102      	movs	r1, #2
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 f93c 	bl	8009520 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff f8a6 	bl	8007402 <HAL_I2C_MasterRxCpltCallback>
}
 80082b6:	bf00      	nop
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	0b9b      	lsrs	r3, r3, #14
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d008      	beq.n	80082f4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	e00d      	b.n	8008310 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	0bdb      	lsrs	r3, r3, #15
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d007      	beq.n	8008310 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800830e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b29      	cmp	r3, #41	@ 0x29
 800831a:	d112      	bne.n	8008342 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2228      	movs	r2, #40	@ 0x28
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2221      	movs	r2, #33	@ 0x21
 8008328:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800832a:	2101      	movs	r1, #1
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 f8f7 	bl	8009520 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff f86b 	bl	8007416 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008340:	e017      	b.n	8008372 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b2a      	cmp	r3, #42	@ 0x2a
 800834c:	d111      	bne.n	8008372 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2228      	movs	r2, #40	@ 0x28
 8008352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2222      	movs	r2, #34	@ 0x22
 800835a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800835c:	2102      	movs	r1, #2
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 f8de 	bl	8009520 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff f85c 	bl	800742a <HAL_I2C_SlaveRxCpltCallback>
}
 8008372:	bf00      	nop
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2220      	movs	r2, #32
 8008390:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b21      	cmp	r3, #33	@ 0x21
 800839c:	d107      	bne.n	80083ae <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800839e:	2101      	movs	r1, #1
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 f8bd 	bl	8009520 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2211      	movs	r2, #17
 80083aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80083ac:	e00c      	b.n	80083c8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b22      	cmp	r3, #34	@ 0x22
 80083b8:	d106      	bne.n	80083c8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80083ba:	2102      	movs	r1, #2
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 f8af 	bl	8009520 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2212      	movs	r2, #18
 80083c6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6859      	ldr	r1, [r3, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	4b4d      	ldr	r3, [pc, #308]	@ (8008508 <I2C_ITMasterCplt+0x18c>)
 80083d4:	400b      	ands	r3, r1
 80083d6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a4a      	ldr	r2, [pc, #296]	@ (800850c <I2C_ITMasterCplt+0x190>)
 80083e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	091b      	lsrs	r3, r3, #4
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2210      	movs	r2, #16
 80083f6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083fc:	f043 0204 	orr.w	r2, r3, #4
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b60      	cmp	r3, #96	@ 0x60
 800840e:	d10b      	bne.n	8008428 <I2C_ITMasterCplt+0xac>
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	089b      	lsrs	r3, r3, #2
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008422:	b2db      	uxtb	r3, r3
 8008424:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008426:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fc38 	bl	8008c9e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008432:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b60      	cmp	r3, #96	@ 0x60
 800843e:	d002      	beq.n	8008446 <I2C_ITMasterCplt+0xca>
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d006      	beq.n	8008454 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fb0f 	bl	8008a70 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008452:	e054      	b.n	80084fe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b21      	cmp	r3, #33	@ 0x21
 800845e:	d124      	bne.n	80084aa <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2220      	movs	r2, #32
 8008464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b40      	cmp	r3, #64	@ 0x40
 8008478:	d10b      	bne.n	8008492 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7fe ffef 	bl	800746e <HAL_I2C_MemTxCpltCallback>
}
 8008490:	e035      	b.n	80084fe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fe ffa3 	bl	80073ee <HAL_I2C_MasterTxCpltCallback>
}
 80084a8:	e029      	b.n	80084fe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b22      	cmp	r3, #34	@ 0x22
 80084b4:	d123      	bne.n	80084fe <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b40      	cmp	r3, #64	@ 0x40
 80084ce:	d10b      	bne.n	80084e8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7fe ffce 	bl	8007482 <HAL_I2C_MemRxCpltCallback>
}
 80084e6:	e00a      	b.n	80084fe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7fe ff82 	bl	8007402 <HAL_I2C_MasterRxCpltCallback>
}
 80084fe:	bf00      	nop
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	fe00e800 	.word	0xfe00e800
 800850c:	ffff0000 	.word	0xffff0000

08008510 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008532:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2220      	movs	r2, #32
 800853a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800853c:	7afb      	ldrb	r3, [r7, #11]
 800853e:	2b21      	cmp	r3, #33	@ 0x21
 8008540:	d002      	beq.n	8008548 <I2C_ITSlaveCplt+0x38>
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	2b29      	cmp	r3, #41	@ 0x29
 8008546:	d108      	bne.n	800855a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008548:	f248 0101 	movw	r1, #32769	@ 0x8001
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 ffe7 	bl	8009520 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2221      	movs	r2, #33	@ 0x21
 8008556:	631a      	str	r2, [r3, #48]	@ 0x30
 8008558:	e019      	b.n	800858e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800855a:	7afb      	ldrb	r3, [r7, #11]
 800855c:	2b22      	cmp	r3, #34	@ 0x22
 800855e:	d002      	beq.n	8008566 <I2C_ITSlaveCplt+0x56>
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	2b2a      	cmp	r3, #42	@ 0x2a
 8008564:	d108      	bne.n	8008578 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008566:	f248 0102 	movw	r1, #32770	@ 0x8002
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 ffd8 	bl	8009520 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2222      	movs	r2, #34	@ 0x22
 8008574:	631a      	str	r2, [r3, #48]	@ 0x30
 8008576:	e00a      	b.n	800858e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008578:	7afb      	ldrb	r3, [r7, #11]
 800857a:	2b28      	cmp	r3, #40	@ 0x28
 800857c:	d107      	bne.n	800858e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800857e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 ffcc 	bl	8009520 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800859c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6859      	ldr	r1, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	4b80      	ldr	r3, [pc, #512]	@ (80087ac <I2C_ITSlaveCplt+0x29c>)
 80085aa:	400b      	ands	r3, r1
 80085ac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fb75 	bl	8008c9e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	0b9b      	lsrs	r3, r3, #14
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d07a      	beq.n	80086b6 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80085ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 8112 	beq.w	80087fe <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a73      	ldr	r2, [pc, #460]	@ (80087b0 <I2C_ITSlaveCplt+0x2a0>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d059      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a71      	ldr	r2, [pc, #452]	@ (80087b4 <I2C_ITSlaveCplt+0x2a4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d053      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a6f      	ldr	r2, [pc, #444]	@ (80087b8 <I2C_ITSlaveCplt+0x2a8>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d04d      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a6d      	ldr	r2, [pc, #436]	@ (80087bc <I2C_ITSlaveCplt+0x2ac>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d047      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a6b      	ldr	r2, [pc, #428]	@ (80087c0 <I2C_ITSlaveCplt+0x2b0>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d041      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a69      	ldr	r2, [pc, #420]	@ (80087c4 <I2C_ITSlaveCplt+0x2b4>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d03b      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a67      	ldr	r2, [pc, #412]	@ (80087c8 <I2C_ITSlaveCplt+0x2b8>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d035      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a65      	ldr	r2, [pc, #404]	@ (80087cc <I2C_ITSlaveCplt+0x2bc>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d02f      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a63      	ldr	r2, [pc, #396]	@ (80087d0 <I2C_ITSlaveCplt+0x2c0>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d029      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a61      	ldr	r2, [pc, #388]	@ (80087d4 <I2C_ITSlaveCplt+0x2c4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d023      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a5f      	ldr	r2, [pc, #380]	@ (80087d8 <I2C_ITSlaveCplt+0x2c8>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d01d      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a5d      	ldr	r2, [pc, #372]	@ (80087dc <I2C_ITSlaveCplt+0x2cc>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d017      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a5b      	ldr	r2, [pc, #364]	@ (80087e0 <I2C_ITSlaveCplt+0x2d0>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d011      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a59      	ldr	r2, [pc, #356]	@ (80087e4 <I2C_ITSlaveCplt+0x2d4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00b      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a57      	ldr	r2, [pc, #348]	@ (80087e8 <I2C_ITSlaveCplt+0x2d8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d005      	beq.n	800869a <I2C_ITSlaveCplt+0x18a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a55      	ldr	r2, [pc, #340]	@ (80087ec <I2C_ITSlaveCplt+0x2dc>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d105      	bne.n	80086a6 <I2C_ITSlaveCplt+0x196>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	e004      	b.n	80086b0 <I2C_ITSlaveCplt+0x1a0>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80086b4:	e0a3      	b.n	80087fe <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	0bdb      	lsrs	r3, r3, #15
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 809d 	beq.w	80087fe <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 8090 	beq.w	80087fe <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a32      	ldr	r2, [pc, #200]	@ (80087b0 <I2C_ITSlaveCplt+0x2a0>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d059      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a30      	ldr	r2, [pc, #192]	@ (80087b4 <I2C_ITSlaveCplt+0x2a4>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d053      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a2e      	ldr	r2, [pc, #184]	@ (80087b8 <I2C_ITSlaveCplt+0x2a8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d04d      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a2c      	ldr	r2, [pc, #176]	@ (80087bc <I2C_ITSlaveCplt+0x2ac>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d047      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a2a      	ldr	r2, [pc, #168]	@ (80087c0 <I2C_ITSlaveCplt+0x2b0>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d041      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a28      	ldr	r2, [pc, #160]	@ (80087c4 <I2C_ITSlaveCplt+0x2b4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d03b      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a26      	ldr	r2, [pc, #152]	@ (80087c8 <I2C_ITSlaveCplt+0x2b8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d035      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a24      	ldr	r2, [pc, #144]	@ (80087cc <I2C_ITSlaveCplt+0x2bc>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d02f      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a22      	ldr	r2, [pc, #136]	@ (80087d0 <I2C_ITSlaveCplt+0x2c0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d029      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a20      	ldr	r2, [pc, #128]	@ (80087d4 <I2C_ITSlaveCplt+0x2c4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d023      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a1e      	ldr	r2, [pc, #120]	@ (80087d8 <I2C_ITSlaveCplt+0x2c8>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d01d      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a1c      	ldr	r2, [pc, #112]	@ (80087dc <I2C_ITSlaveCplt+0x2cc>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d017      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1a      	ldr	r2, [pc, #104]	@ (80087e0 <I2C_ITSlaveCplt+0x2d0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d011      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a18      	ldr	r2, [pc, #96]	@ (80087e4 <I2C_ITSlaveCplt+0x2d4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00b      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a16      	ldr	r2, [pc, #88]	@ (80087e8 <I2C_ITSlaveCplt+0x2d8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d005      	beq.n	800879e <I2C_ITSlaveCplt+0x28e>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a14      	ldr	r2, [pc, #80]	@ (80087ec <I2C_ITSlaveCplt+0x2dc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d128      	bne.n	80087f0 <I2C_ITSlaveCplt+0x2e0>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	e027      	b.n	80087fa <I2C_ITSlaveCplt+0x2ea>
 80087aa:	bf00      	nop
 80087ac:	fe00e800 	.word	0xfe00e800
 80087b0:	40020010 	.word	0x40020010
 80087b4:	40020028 	.word	0x40020028
 80087b8:	40020040 	.word	0x40020040
 80087bc:	40020058 	.word	0x40020058
 80087c0:	40020070 	.word	0x40020070
 80087c4:	40020088 	.word	0x40020088
 80087c8:	400200a0 	.word	0x400200a0
 80087cc:	400200b8 	.word	0x400200b8
 80087d0:	40020410 	.word	0x40020410
 80087d4:	40020428 	.word	0x40020428
 80087d8:	40020440 	.word	0x40020440
 80087dc:	40020458 	.word	0x40020458
 80087e0:	40020470 	.word	0x40020470
 80087e4:	40020488 	.word	0x40020488
 80087e8:	400204a0 	.word	0x400204a0
 80087ec:	400204b8 	.word	0x400204b8
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	089b      	lsrs	r3, r3, #2
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d020      	beq.n	800884c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f023 0304 	bic.w	r3, r3, #4
 8008810:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881c:	b2d2      	uxtb	r2, r2
 800881e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008824:	1c5a      	adds	r2, r3, #1
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00c      	beq.n	800884c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008836:	3b01      	subs	r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008842:	b29b      	uxth	r3, r3
 8008844:	3b01      	subs	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885a:	f043 0204 	orr.w	r2, r3, #4
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	091b      	lsrs	r3, r3, #4
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d04a      	beq.n	8008904 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	091b      	lsrs	r3, r3, #4
 8008872:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008876:	2b00      	cmp	r3, #0
 8008878:	d044      	beq.n	8008904 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800887e:	b29b      	uxth	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d128      	bne.n	80088d6 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b28      	cmp	r3, #40	@ 0x28
 800888e:	d108      	bne.n	80088a2 <I2C_ITSlaveCplt+0x392>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008896:	d104      	bne.n	80088a2 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008898:	6979      	ldr	r1, [r7, #20]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f892 	bl	80089c4 <I2C_ITListenCplt>
 80088a0:	e030      	b.n	8008904 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b29      	cmp	r3, #41	@ 0x29
 80088ac:	d10e      	bne.n	80088cc <I2C_ITSlaveCplt+0x3bc>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80088b4:	d00a      	beq.n	80088cc <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2210      	movs	r2, #16
 80088bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9ed 	bl	8008c9e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff fcfa 	bl	80082be <I2C_ITSlaveSeqCplt>
 80088ca:	e01b      	b.n	8008904 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2210      	movs	r2, #16
 80088d2:	61da      	str	r2, [r3, #28]
 80088d4:	e016      	b.n	8008904 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2210      	movs	r2, #16
 80088dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088e2:	f043 0204 	orr.w	r2, r3, #4
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d003      	beq.n	80088f8 <I2C_ITSlaveCplt+0x3e8>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088f6:	d105      	bne.n	8008904 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f8b6 	bl	8008a70 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008916:	2b00      	cmp	r3, #0
 8008918:	d010      	beq.n	800893c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f8a5 	bl	8008a70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b28      	cmp	r3, #40	@ 0x28
 8008930:	d141      	bne.n	80089b6 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008932:	6979      	ldr	r1, [r7, #20]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f845 	bl	80089c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800893a:	e03c      	b.n	80089b6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008940:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008944:	d014      	beq.n	8008970 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7ff fcb9 	bl	80082be <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a1c      	ldr	r2, [pc, #112]	@ (80089c0 <I2C_ITSlaveCplt+0x4b0>)
 8008950:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7fe fd76 	bl	800745a <HAL_I2C_ListenCpltCallback>
}
 800896e:	e022      	b.n	80089b6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b22      	cmp	r3, #34	@ 0x22
 800897a:	d10e      	bne.n	800899a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fe fd49 	bl	800742a <HAL_I2C_SlaveRxCpltCallback>
}
 8008998:	e00d      	b.n	80089b6 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7fe fd30 	bl	8007416 <HAL_I2C_SlaveTxCpltCallback>
}
 80089b6:	bf00      	nop
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	ffff0000 	.word	0xffff0000

080089c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a26      	ldr	r2, [pc, #152]	@ (8008a6c <I2C_ITListenCplt+0xa8>)
 80089d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	089b      	lsrs	r3, r3, #2
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d022      	beq.n	8008a42 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a06:	b2d2      	uxtb	r2, r2
 8008a08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d012      	beq.n	8008a42 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a3a:	f043 0204 	orr.w	r2, r3, #4
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008a42:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fd6a 	bl	8009520 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2210      	movs	r2, #16
 8008a52:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7fe fcfc 	bl	800745a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	ffff0000 	.word	0xffff0000

08008a70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a80:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a6d      	ldr	r2, [pc, #436]	@ (8008c44 <I2C_ITError+0x1d4>)
 8008a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	2b28      	cmp	r3, #40	@ 0x28
 8008aa6:	d005      	beq.n	8008ab4 <I2C_ITError+0x44>
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	2b29      	cmp	r3, #41	@ 0x29
 8008aac:	d002      	beq.n	8008ab4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ab2:	d10b      	bne.n	8008acc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008ab4:	2103      	movs	r1, #3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fd32 	bl	8009520 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2228      	movs	r2, #40	@ 0x28
 8008ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a60      	ldr	r2, [pc, #384]	@ (8008c48 <I2C_ITError+0x1d8>)
 8008ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8008aca:	e030      	b.n	8008b2e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008acc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fd25 	bl	8009520 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f8e1 	bl	8008c9e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b60      	cmp	r3, #96	@ 0x60
 8008ae6:	d01f      	beq.n	8008b28 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	f003 0320 	and.w	r3, r3, #32
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d114      	bne.n	8008b28 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	f003 0310 	and.w	r3, r3, #16
 8008b08:	2b10      	cmp	r3, #16
 8008b0a:	d109      	bne.n	8008b20 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2210      	movs	r2, #16
 8008b12:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b18:	f043 0204 	orr.w	r2, r3, #4
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2220      	movs	r2, #32
 8008b26:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b32:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d039      	beq.n	8008bb0 <I2C_ITError+0x140>
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b11      	cmp	r3, #17
 8008b40:	d002      	beq.n	8008b48 <I2C_ITError+0xd8>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b21      	cmp	r3, #33	@ 0x21
 8008b46:	d133      	bne.n	8008bb0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b56:	d107      	bne.n	8008b68 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fd fb2f 	bl	80061d0 <HAL_DMA_GetState>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d017      	beq.n	8008ba8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7c:	4a33      	ldr	r2, [pc, #204]	@ (8008c4c <I2C_ITError+0x1dc>)
 8008b7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fc f9af 	bl	8004ef0 <HAL_DMA_Abort_IT>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d04d      	beq.n	8008c34 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ba6:	e045      	b.n	8008c34 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f851 	bl	8008c50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008bae:	e041      	b.n	8008c34 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d039      	beq.n	8008c2c <I2C_ITError+0x1bc>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2b12      	cmp	r3, #18
 8008bbc:	d002      	beq.n	8008bc4 <I2C_ITError+0x154>
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b22      	cmp	r3, #34	@ 0x22
 8008bc2:	d133      	bne.n	8008c2c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bd2:	d107      	bne.n	8008be4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008be2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fd faf1 	bl	80061d0 <HAL_DMA_GetState>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d017      	beq.n	8008c24 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bf8:	4a14      	ldr	r2, [pc, #80]	@ (8008c4c <I2C_ITError+0x1dc>)
 8008bfa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fc f971 	bl	8004ef0 <HAL_DMA_Abort_IT>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d011      	beq.n	8008c38 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c1e:	4610      	mov	r0, r2
 8008c20:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c22:	e009      	b.n	8008c38 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f813 	bl	8008c50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c2a:	e005      	b.n	8008c38 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f80f 	bl	8008c50 <I2C_TreatErrorCallback>
  }
}
 8008c32:	e002      	b.n	8008c3a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c34:	bf00      	nop
 8008c36:	e000      	b.n	8008c3a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c38:	bf00      	nop
}
 8008c3a:	bf00      	nop
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	ffff0000 	.word	0xffff0000
 8008c48:	08007727 	.word	0x08007727
 8008c4c:	08008ff1 	.word	0x08008ff1

08008c50 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b60      	cmp	r3, #96	@ 0x60
 8008c62:	d10e      	bne.n	8008c82 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2220      	movs	r2, #32
 8008c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fe fc15 	bl	80074aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008c80:	e009      	b.n	8008c96 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fe fc00 	bl	8007496 <HAL_I2C_ErrorCallback>
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d103      	bne.n	8008cbc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d007      	beq.n	8008cda <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	699a      	ldr	r2, [r3, #24]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0201 	orr.w	r2, r2, #1
 8008cd8:	619a      	str	r2, [r3, #24]
  }
}
 8008cda:	bf00      	nop
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d02:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d104      	bne.n	8008d18 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008d0e:	2120      	movs	r1, #32
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fb81 	bl	8009418 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008d16:	e02d      	b.n	8008d74 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008d20:	441a      	add	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	2bff      	cmp	r3, #255	@ 0xff
 8008d2e:	d903      	bls.n	8008d38 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	22ff      	movs	r2, #255	@ 0xff
 8008d34:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008d36:	e004      	b.n	8008d42 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3328      	adds	r3, #40	@ 0x28
 8008d52:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008d58:	f7fb fb42 	bl	80043e0 <HAL_DMA_Start_IT>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d004      	beq.n	8008d6c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008d62:	2110      	movs	r1, #16
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f7ff fe83 	bl	8008a70 <I2C_ITError>
}
 8008d6a:	e003      	b.n	8008d74 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008d6c:	2140      	movs	r1, #64	@ 0x40
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 fb52 	bl	8009418 <I2C_Enable_IRQ>
}
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d076      	beq.n	8008e84 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a71      	ldr	r2, [pc, #452]	@ (8008f64 <I2C_DMAError+0x1e8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d059      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a6f      	ldr	r2, [pc, #444]	@ (8008f68 <I2C_DMAError+0x1ec>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d053      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a6d      	ldr	r2, [pc, #436]	@ (8008f6c <I2C_DMAError+0x1f0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d04d      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8008f70 <I2C_DMAError+0x1f4>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d047      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a69      	ldr	r2, [pc, #420]	@ (8008f74 <I2C_DMAError+0x1f8>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d041      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a67      	ldr	r2, [pc, #412]	@ (8008f78 <I2C_DMAError+0x1fc>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d03b      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a65      	ldr	r2, [pc, #404]	@ (8008f7c <I2C_DMAError+0x200>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d035      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a63      	ldr	r2, [pc, #396]	@ (8008f80 <I2C_DMAError+0x204>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d02f      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a61      	ldr	r2, [pc, #388]	@ (8008f84 <I2C_DMAError+0x208>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d029      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a5f      	ldr	r2, [pc, #380]	@ (8008f88 <I2C_DMAError+0x20c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d023      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a5d      	ldr	r2, [pc, #372]	@ (8008f8c <I2C_DMAError+0x210>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d01d      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a5b      	ldr	r2, [pc, #364]	@ (8008f90 <I2C_DMAError+0x214>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d017      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a59      	ldr	r2, [pc, #356]	@ (8008f94 <I2C_DMAError+0x218>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d011      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a57      	ldr	r2, [pc, #348]	@ (8008f98 <I2C_DMAError+0x21c>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d00b      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a55      	ldr	r2, [pc, #340]	@ (8008f9c <I2C_DMAError+0x220>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d005      	beq.n	8008e56 <I2C_DMAError+0xda>
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a53      	ldr	r2, [pc, #332]	@ (8008fa0 <I2C_DMAError+0x224>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d109      	bne.n	8008e6a <I2C_DMAError+0xee>
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bf0c      	ite	eq
 8008e62:	2301      	moveq	r3, #1
 8008e64:	2300      	movne	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	e008      	b.n	8008e7c <I2C_DMAError+0x100>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf0c      	ite	eq
 8008e76:	2301      	moveq	r3, #1
 8008e78:	2300      	movne	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8008e80:	2301      	movs	r3, #1
 8008e82:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 8098 	beq.w	8008fbe <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a33      	ldr	r2, [pc, #204]	@ (8008f64 <I2C_DMAError+0x1e8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d059      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a31      	ldr	r2, [pc, #196]	@ (8008f68 <I2C_DMAError+0x1ec>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d053      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a2f      	ldr	r2, [pc, #188]	@ (8008f6c <I2C_DMAError+0x1f0>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d04d      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a2d      	ldr	r2, [pc, #180]	@ (8008f70 <I2C_DMAError+0x1f4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d047      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8008f74 <I2C_DMAError+0x1f8>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d041      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a29      	ldr	r2, [pc, #164]	@ (8008f78 <I2C_DMAError+0x1fc>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d03b      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a27      	ldr	r2, [pc, #156]	@ (8008f7c <I2C_DMAError+0x200>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d035      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a25      	ldr	r2, [pc, #148]	@ (8008f80 <I2C_DMAError+0x204>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d02f      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a23      	ldr	r2, [pc, #140]	@ (8008f84 <I2C_DMAError+0x208>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d029      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a21      	ldr	r2, [pc, #132]	@ (8008f88 <I2C_DMAError+0x20c>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d023      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8008f8c <I2C_DMAError+0x210>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d01d      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a1d      	ldr	r2, [pc, #116]	@ (8008f90 <I2C_DMAError+0x214>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d017      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a1b      	ldr	r2, [pc, #108]	@ (8008f94 <I2C_DMAError+0x218>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d011      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a19      	ldr	r2, [pc, #100]	@ (8008f98 <I2C_DMAError+0x21c>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00b      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a17      	ldr	r2, [pc, #92]	@ (8008f9c <I2C_DMAError+0x220>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d005      	beq.n	8008f4e <I2C_DMAError+0x1d2>
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a15      	ldr	r2, [pc, #84]	@ (8008fa0 <I2C_DMAError+0x224>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d12a      	bne.n	8008fa4 <I2C_DMAError+0x228>
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bf0c      	ite	eq
 8008f5a:	2301      	moveq	r3, #1
 8008f5c:	2300      	movne	r3, #0
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	e029      	b.n	8008fb6 <I2C_DMAError+0x23a>
 8008f62:	bf00      	nop
 8008f64:	40020010 	.word	0x40020010
 8008f68:	40020028 	.word	0x40020028
 8008f6c:	40020040 	.word	0x40020040
 8008f70:	40020058 	.word	0x40020058
 8008f74:	40020070 	.word	0x40020070
 8008f78:	40020088 	.word	0x40020088
 8008f7c:	400200a0 	.word	0x400200a0
 8008f80:	400200b8 	.word	0x400200b8
 8008f84:	40020410 	.word	0x40020410
 8008f88:	40020428 	.word	0x40020428
 8008f8c:	40020440 	.word	0x40020440
 8008f90:	40020458 	.word	0x40020458
 8008f94:	40020470 	.word	0x40020470
 8008f98:	40020488 	.word	0x40020488
 8008f9c:	400204a0 	.word	0x400204a0
 8008fa0:	400204b8 	.word	0x400204b8
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	bf0c      	ite	eq
 8008fb0:	2301      	moveq	r3, #1
 8008fb2:	2300      	movne	r3, #0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7fd f914 	bl	80061ec <HAL_DMA_GetError>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d00e      	beq.n	8008fe8 <I2C_DMAError+0x26c>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fde:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008fe0:	2110      	movs	r1, #16
 8008fe2:	68b8      	ldr	r0, [r7, #8]
 8008fe4:	f7ff fd44 	bl	8008a70 <I2C_ITError>
  }
}
 8008fe8:	bf00      	nop
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900a:	2200      	movs	r2, #0
 800900c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800901a:	2200      	movs	r2, #0
 800901c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f7ff fe16 	bl	8008c50 <I2C_TreatErrorCallback>
}
 8009024:	bf00      	nop
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	4613      	mov	r3, r2
 800903a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800903c:	e03b      	b.n	80090b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800903e:	69ba      	ldr	r2, [r7, #24]
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 f8d6 	bl	80091f4 <I2C_IsErrorOccurred>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e041      	b.n	80090d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009058:	d02d      	beq.n	80090b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800905a:	f7f9 f9ef 	bl	800243c <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	429a      	cmp	r2, r3
 8009068:	d302      	bcc.n	8009070 <I2C_WaitOnFlagUntilTimeout+0x44>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d122      	bne.n	80090b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	4013      	ands	r3, r2
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	429a      	cmp	r2, r3
 800907e:	bf0c      	ite	eq
 8009080:	2301      	moveq	r3, #1
 8009082:	2300      	movne	r3, #0
 8009084:	b2db      	uxtb	r3, r3
 8009086:	461a      	mov	r2, r3
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	429a      	cmp	r2, r3
 800908c:	d113      	bne.n	80090b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009092:	f043 0220 	orr.w	r2, r3, #32
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2220      	movs	r2, #32
 800909e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e00f      	b.n	80090d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	699a      	ldr	r2, [r3, #24]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4013      	ands	r3, r2
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	bf0c      	ite	eq
 80090c6:	2301      	moveq	r3, #1
 80090c8:	2300      	movne	r3, #0
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d0b4      	beq.n	800903e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80090ea:	e033      	b.n	8009154 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	68b9      	ldr	r1, [r7, #8]
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 f87f 	bl	80091f4 <I2C_IsErrorOccurred>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e031      	b.n	8009164 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009106:	d025      	beq.n	8009154 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009108:	f7f9 f998 	bl	800243c <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	429a      	cmp	r2, r3
 8009116:	d302      	bcc.n	800911e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d11a      	bne.n	8009154 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	f003 0302 	and.w	r3, r3, #2
 8009128:	2b02      	cmp	r3, #2
 800912a:	d013      	beq.n	8009154 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009130:	f043 0220 	orr.w	r2, r3, #32
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2220      	movs	r2, #32
 800913c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e007      	b.n	8009164 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b02      	cmp	r3, #2
 8009160:	d1c4      	bne.n	80090ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009178:	e02f      	b.n	80091da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	68b9      	ldr	r1, [r7, #8]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 f838 	bl	80091f4 <I2C_IsErrorOccurred>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e02d      	b.n	80091ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800918e:	f7f9 f955 	bl	800243c <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	429a      	cmp	r2, r3
 800919c:	d302      	bcc.n	80091a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d11a      	bne.n	80091da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	f003 0320 	and.w	r3, r3, #32
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	d013      	beq.n	80091da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091b6:	f043 0220 	orr.w	r2, r3, #32
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e007      	b.n	80091ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	f003 0320 	and.w	r3, r3, #32
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	d1c8      	bne.n	800917a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08a      	sub	sp, #40	@ 0x28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	2b00      	cmp	r3, #0
 800921e:	d068      	beq.n	80092f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2210      	movs	r2, #16
 8009226:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009228:	e049      	b.n	80092be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009230:	d045      	beq.n	80092be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009232:	f7f9 f903 	bl	800243c <HAL_GetTick>
 8009236:	4602      	mov	r2, r0
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	429a      	cmp	r2, r3
 8009240:	d302      	bcc.n	8009248 <I2C_IsErrorOccurred+0x54>
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d13a      	bne.n	80092be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009252:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800925a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800926a:	d121      	bne.n	80092b0 <I2C_IsErrorOccurred+0xbc>
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009272:	d01d      	beq.n	80092b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009274:	7cfb      	ldrb	r3, [r7, #19]
 8009276:	2b20      	cmp	r3, #32
 8009278:	d01a      	beq.n	80092b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009288:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800928a:	f7f9 f8d7 	bl	800243c <HAL_GetTick>
 800928e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009290:	e00e      	b.n	80092b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009292:	f7f9 f8d3 	bl	800243c <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	2b19      	cmp	r3, #25
 800929e:	d907      	bls.n	80092b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	f043 0320 	orr.w	r3, r3, #32
 80092a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80092ae:	e006      	b.n	80092be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b20      	cmp	r3, #32
 80092bc:	d1e9      	bne.n	8009292 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	f003 0320 	and.w	r3, r3, #32
 80092c8:	2b20      	cmp	r3, #32
 80092ca:	d003      	beq.n	80092d4 <I2C_IsErrorOccurred+0xe0>
 80092cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d0aa      	beq.n	800922a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80092d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d103      	bne.n	80092e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2220      	movs	r2, #32
 80092e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	f043 0304 	orr.w	r3, r3, #4
 80092ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00b      	beq.n	800931c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009314:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	f043 0308 	orr.w	r3, r3, #8
 800932c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009336:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	f043 0302 	orr.w	r3, r3, #2
 800934e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009358:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01c      	beq.n	80093a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f7ff fc98 	bl	8008c9e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6859      	ldr	r1, [r3, #4]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	4b0d      	ldr	r3, [pc, #52]	@ (80093b0 <I2C_IsErrorOccurred+0x1bc>)
 800937a:	400b      	ands	r3, r1
 800937c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	431a      	orrs	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2220      	movs	r2, #32
 800938e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80093a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3728      	adds	r7, #40	@ 0x28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	fe00e800 	.word	0xfe00e800

080093b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	607b      	str	r3, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	817b      	strh	r3, [r7, #10]
 80093c2:	4613      	mov	r3, r2
 80093c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093c6:	897b      	ldrh	r3, [r7, #10]
 80093c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093cc:	7a7b      	ldrb	r3, [r7, #9]
 80093ce:	041b      	lsls	r3, r3, #16
 80093d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093d4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	4313      	orrs	r3, r2
 80093de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093e2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	0d5b      	lsrs	r3, r3, #21
 80093ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80093f2:	4b08      	ldr	r3, [pc, #32]	@ (8009414 <I2C_TransferConfig+0x60>)
 80093f4:	430b      	orrs	r3, r1
 80093f6:	43db      	mvns	r3, r3
 80093f8:	ea02 0103 	and.w	r1, r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	430a      	orrs	r2, r1
 8009404:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009406:	bf00      	nop
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	03ff63ff 	.word	0x03ff63ff

08009418 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800942c:	4a39      	ldr	r2, [pc, #228]	@ (8009514 <I2C_Enable_IRQ+0xfc>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d032      	beq.n	8009498 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009436:	4a38      	ldr	r2, [pc, #224]	@ (8009518 <I2C_Enable_IRQ+0x100>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d02d      	beq.n	8009498 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009440:	4a36      	ldr	r2, [pc, #216]	@ (800951c <I2C_Enable_IRQ+0x104>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d028      	beq.n	8009498 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009446:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800944a:	2b00      	cmp	r3, #0
 800944c:	da03      	bge.n	8009456 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009454:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009456:	887b      	ldrh	r3, [r7, #2]
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009466:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009468:	887b      	ldrh	r3, [r7, #2]
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009478:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800947a:	887b      	ldrh	r3, [r7, #2]
 800947c:	2b10      	cmp	r3, #16
 800947e:	d103      	bne.n	8009488 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009486:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009488:	887b      	ldrh	r3, [r7, #2]
 800948a:	2b20      	cmp	r3, #32
 800948c:	d133      	bne.n	80094f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f043 0320 	orr.w	r3, r3, #32
 8009494:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009496:	e02e      	b.n	80094f6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009498:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800949c:	2b00      	cmp	r3, #0
 800949e:	da03      	bge.n	80094a8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80094a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80094a8:	887b      	ldrh	r3, [r7, #2]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80094b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80094ba:	887b      	ldrh	r3, [r7, #2]
 80094bc:	f003 0302 	and.w	r3, r3, #2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d003      	beq.n	80094cc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80094ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80094cc:	887b      	ldrh	r3, [r7, #2]
 80094ce:	2b10      	cmp	r3, #16
 80094d0:	d103      	bne.n	80094da <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80094d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80094da:	887b      	ldrh	r3, [r7, #2]
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d103      	bne.n	80094e8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80094e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80094e8:	887b      	ldrh	r3, [r7, #2]
 80094ea:	2b40      	cmp	r3, #64	@ 0x40
 80094ec:	d103      	bne.n	80094f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094f4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6819      	ldr	r1, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	430a      	orrs	r2, r1
 8009504:	601a      	str	r2, [r3, #0]
}
 8009506:	bf00      	nop
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	0800792f 	.word	0x0800792f
 8009518:	08007d75 	.word	0x08007d75
 800951c:	08007b15 	.word	0x08007b15

08009520 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009530:	887b      	ldrh	r3, [r7, #2]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00f      	beq.n	800955a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009540:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009548:	b2db      	uxtb	r3, r3
 800954a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800954e:	2b28      	cmp	r3, #40	@ 0x28
 8009550:	d003      	beq.n	800955a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009558:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800955a:	887b      	ldrh	r3, [r7, #2]
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00f      	beq.n	8009584 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800956a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009572:	b2db      	uxtb	r3, r3
 8009574:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009578:	2b28      	cmp	r3, #40	@ 0x28
 800957a:	d003      	beq.n	8009584 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009582:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009584:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009588:	2b00      	cmp	r3, #0
 800958a:	da03      	bge.n	8009594 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009592:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009594:	887b      	ldrh	r3, [r7, #2]
 8009596:	2b10      	cmp	r3, #16
 8009598:	d103      	bne.n	80095a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80095a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80095a2:	887b      	ldrh	r3, [r7, #2]
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	d103      	bne.n	80095b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f043 0320 	orr.w	r3, r3, #32
 80095ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80095b0:	887b      	ldrh	r3, [r7, #2]
 80095b2:	2b40      	cmp	r3, #64	@ 0x40
 80095b4:	d103      	bne.n	80095be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	43da      	mvns	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	400a      	ands	r2, r1
 80095ce:	601a      	str	r2, [r3, #0]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	d138      	bne.n	8009664 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d101      	bne.n	8009600 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80095fc:	2302      	movs	r3, #2
 80095fe:	e032      	b.n	8009666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2224      	movs	r2, #36	@ 0x24
 800960c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0201 	bic.w	r2, r2, #1
 800961e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800962e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6819      	ldr	r1, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0201 	orr.w	r2, r2, #1
 800964e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	e000      	b.n	8009666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009664:	2302      	movs	r3, #2
  }
}
 8009666:	4618      	mov	r0, r3
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009672:	b480      	push	{r7}
 8009674:	b085      	sub	sp, #20
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b20      	cmp	r3, #32
 8009686:	d139      	bne.n	80096fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800968e:	2b01      	cmp	r3, #1
 8009690:	d101      	bne.n	8009696 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009692:	2302      	movs	r3, #2
 8009694:	e033      	b.n	80096fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2224      	movs	r2, #36	@ 0x24
 80096a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0201 	bic.w	r2, r2, #1
 80096b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80096c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	021b      	lsls	r3, r3, #8
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	e000      	b.n	80096fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80096fc:	2302      	movs	r3, #2
  }
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
	...

0800970c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e070      	b.n	8009800 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d106      	bne.n	8009738 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7f8 f84c 	bl	80017d0 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2202      	movs	r2, #2
 800973c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0201 	orr.w	r2, r2, #1
 800974e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0201 	bic.w	r2, r2, #1
 800975e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800976e:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800977e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800978e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800979e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a19      	ldr	r2, [pc, #100]	@ (8009808 <HAL_JPEG_Init+0xfc>)
 80097a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a18      	ldr	r2, [pc, #96]	@ (800980c <HAL_JPEG_Init+0x100>)
 80097aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fc81 	bl	800a0c0 <JPEG_Set_HuffEnc_Mem>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d004      	beq.n	80097ce <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e018      	b.n	8009800 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097dc:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	08017d98 	.word	0x08017d98
 800980c:	08017dd8 	.word	0x08017dd8

08009810 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <HAL_JPEG_GetInfo+0x16>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e083      	b.n	8009932 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	f003 0303 	and.w	r3, r3, #3
 8009834:	2b02      	cmp	r3, #2
 8009836:	d103      	bne.n	8009840 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	2210      	movs	r2, #16
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	e017      	b.n	8009870 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	f003 0303 	and.w	r3, r3, #3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d103      	bne.n	8009856 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2200      	movs	r2, #0
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	e00c      	b.n	8009870 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f003 0303 	and.w	r3, r3, #3
 8009860:	2b03      	cmp	r3, #3
 8009862:	d103      	bne.n	800986c <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2230      	movs	r2, #48	@ 0x30
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	e001      	b.n	8009870 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e060      	b.n	8009932 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	0c1b      	lsrs	r3, r3, #16
 8009878:	b29a      	uxth	r2, r3
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	0c1b      	lsrs	r3, r3, #16
 8009886:	b29a      	uxth	r2, r3
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b10      	cmp	r3, #16
 8009892:	d003      	beq.n	800989c <HAL_JPEG_GetInfo+0x8c>
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b30      	cmp	r3, #48	@ 0x30
 800989a:	d140      	bne.n	800991e <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	091b      	lsrs	r3, r3, #4
 80098a4:	f003 030f 	and.w	r3, r3, #15
 80098a8:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	091b      	lsrs	r3, r3, #4
 80098b2:	f003 030f 	and.w	r3, r3, #15
 80098b6:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	091b      	lsrs	r3, r3, #4
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d109      	bne.n	80098e0 <HAL_JPEG_GetInfo+0xd0>
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d106      	bne.n	80098e0 <HAL_JPEG_GetInfo+0xd0>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d103      	bne.n	80098e0 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2202      	movs	r2, #2
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	e01d      	b.n	800991c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d109      	bne.n	80098fa <HAL_JPEG_GetInfo+0xea>
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d106      	bne.n	80098fa <HAL_JPEG_GetInfo+0xea>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d103      	bne.n	80098fa <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2200      	movs	r2, #0
 80098f6:	605a      	str	r2, [r3, #4]
 80098f8:	e010      	b.n	800991c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d109      	bne.n	8009914 <HAL_JPEG_GetInfo+0x104>
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d106      	bne.n	8009914 <HAL_JPEG_GetInfo+0x104>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d103      	bne.n	8009914 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	2201      	movs	r2, #1
 8009910:	605a      	str	r2, [r3, #4]
 8009912:	e003      	b.n	800991c <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2200      	movs	r2, #0
 8009918:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800991a:	e003      	b.n	8009924 <HAL_JPEG_GetInfo+0x114>
 800991c:	e002      	b.n	8009924 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2200      	movs	r2, #0
 8009922:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f001 fa7b 	bl	800ae20 <JPEG_GetQuality>
 800992a:	4602      	mov	r2, r0
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800993a:	b480      	push	{r7}
 800993c:	b085      	sub	sp, #20
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800994c:	f003 030c 	and.w	r3, r3, #12
 8009950:	2b0c      	cmp	r3, #12
 8009952:	d116      	bne.n	8009982 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d005      	beq.n	800996a <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009962:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	f003 0302 	and.w	r3, r3, #2
 8009970:	2b00      	cmp	r3, #0
 8009972:	d033      	beq.n	80099dc <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009978:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009980:	e02c      	b.n	80099dc <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009986:	f003 030c 	and.w	r3, r3, #12
 800998a:	2b08      	cmp	r3, #8
 800998c:	d126      	bne.n	80099dc <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	2b00      	cmp	r3, #0
 8009996:	d009      	beq.n	80099ac <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800999c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f043 0306 	orr.w	r3, r3, #6
 80099aa:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d009      	beq.n	80099ca <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ba:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80099c8:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	43da      	mvns	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	400a      	ands	r2, r1
 80099da:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 8009a32:	bf00      	nop
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 8009a4a:	bf00      	nop
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	3b03      	subs	r3, #3
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d813      	bhi.n	8009a94 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a70:	f003 030c 	and.w	r3, r3, #12
 8009a74:	2b08      	cmp	r3, #8
 8009a76:	d103      	bne.n	8009a80 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fda3 	bl	800a5c4 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8009a7e:	e00b      	b.n	8009a98 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a84:	f003 030c 	and.w	r3, r3, #12
 8009a88:	2b0c      	cmp	r3, #12
 8009a8a:	d105      	bne.n	8009a98 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 f848 	bl	800ab22 <JPEG_DMA_ContinueProcess>
      break;
 8009a92:	e001      	b.n	8009a98 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8009a94:	bf00      	nop
 8009a96:	e000      	b.n	8009a9a <HAL_JPEG_IRQHandler+0x44>
      break;
 8009a98:	bf00      	nop
  }
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b08b      	sub	sp, #44	@ 0x2c
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	60f8      	str	r0, [r7, #12]
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	607a      	str	r2, [r7, #4]
 8009aae:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61fb      	str	r3, [r7, #28]
 8009ab8:	e020      	b.n	8009afc <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	4413      	add	r3, r2
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8009ac4:	6a3a      	ldr	r2, [r7, #32]
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac8:	4413      	add	r3, r2
 8009aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ace:	d90f      	bls.n	8009af0 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e055      	b.n	8009b80 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	68b9      	ldr	r1, [r7, #8]
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	440b      	add	r3, r1
 8009ade:	3201      	adds	r2, #1
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]
      p++;
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	623b      	str	r3, [r7, #32]
      i--;
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	3b01      	subs	r3, #1
 8009aee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8009af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1ee      	bne.n	8009ad4 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	3301      	adds	r3, #1
 8009afa:	61fb      	str	r3, [r7, #28]
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	2b0f      	cmp	r3, #15
 8009b00:	d9db      	bls.n	8009aba <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	4413      	add	r3, r2
 8009b08:	2200      	movs	r2, #0
 8009b0a:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	6a3a      	ldr	r2, [r7, #32]
 8009b10:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	617b      	str	r3, [r7, #20]
  p = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8009b20:	e027      	b.n	8009b72 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	4413      	add	r3, r2
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	601a      	str	r2, [r3, #0]
      p++;
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	3301      	adds	r3, #1
 8009b32:	623b      	str	r3, [r7, #32]
      code++;
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	3301      	adds	r3, #1
 8009b38:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	4413      	add	r3, r2
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d0eb      	beq.n	8009b22 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b1f      	cmp	r3, #31
 8009b4e:	d901      	bls.n	8009b54 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e015      	b.n	8009b80 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009b54:	2201      	movs	r2, #1
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d301      	bcc.n	8009b66 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e00c      	b.n	8009b80 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	61bb      	str	r3, [r7, #24]
    si++;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	4413      	add	r3, r2
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1dd      	bne.n	8009b3a <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	372c      	adds	r7, #44	@ 0x2c
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009b98:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009b9c:	6018      	str	r0, [r3, #0]
 8009b9e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009ba2:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009ba6:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009ba8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009bac:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009bb0:	6818      	ldr	r0, [r3, #0]
 8009bb2:	f107 0308 	add.w	r3, r7, #8
 8009bb6:	f107 020c 	add.w	r2, r7, #12
 8009bba:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8009bbe:	f7ff ff70 	bl	8009aa2 <JPEG_Bits_To_SizeCodes>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8009bc8:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009bd0:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009bd4:	e075      	b.n	8009cc2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8009bdc:	e067      	b.n	8009cae <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8009bde:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009be2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009bec:	4413      	add	r3, r2
 8009bee:	3310      	adds	r3, #16
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8009bf6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d103      	bne.n	8009c06 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8009bfe:	23a0      	movs	r3, #160	@ 0xa0
 8009c00:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009c04:	e021      	b.n	8009c4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8009c06:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009c0a:	2bf0      	cmp	r3, #240	@ 0xf0
 8009c0c:	d103      	bne.n	8009c16 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8009c0e:	23a1      	movs	r3, #161	@ 0xa1
 8009c10:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009c14:	e019      	b.n	8009c4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8009c16:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009c1a:	091b      	lsrs	r3, r3, #4
 8009c1c:	f003 030f 	and.w	r3, r3, #15
 8009c20:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8009c24:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009c28:	f003 030f 	and.w	r3, r3, #15
 8009c2c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8009c30:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8009c34:	4613      	mov	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	005b      	lsls	r3, r3, #1
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009c42:	4413      	add	r3, r2
 8009c44:	3b01      	subs	r3, #1
 8009c46:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8009c4a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009c4e:	2ba1      	cmp	r3, #161	@ 0xa1
 8009c50:	d901      	bls.n	8009c56 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009c52:	2301      	movs	r3, #1
 8009c54:	e035      	b.n	8009cc2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009c56:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009c5a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009c5e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009c62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c66:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009c6a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009c6e:	6819      	ldr	r1, [r3, #0]
 8009c70:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009c74:	3328      	adds	r3, #40	@ 0x28
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	440b      	add	r3, r1
 8009c7a:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009c7c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009c80:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8009c84:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009c88:	4413      	add	r3, r2
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	b2d9      	uxtb	r1, r3
 8009c90:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009c94:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009c9e:	4413      	add	r3, r2
 8009ca0:	460a      	mov	r2, r1
 8009ca2:	701a      	strb	r2, [r3, #0]
      k++;
 8009ca4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009ca8:	3301      	adds	r3, #1
 8009caa:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8009cae:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009cb2:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d38e      	bcc.n	8009bde <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009cd8:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009cdc:	6018      	str	r0, [r3, #0]
 8009cde:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009ce2:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009ce6:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009ce8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009cec:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8009cf6:	f107 0208 	add.w	r2, r7, #8
 8009cfa:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8009cfe:	f7ff fed0 	bl	8009aa2 <JPEG_Bits_To_SizeCodes>
 8009d02:	4603      	mov	r3, r0
 8009d04:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8009d08:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009d10:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009d14:	e048      	b.n	8009da8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8009d1c:	e03d      	b.n	8009d9a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8009d1e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009d22:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009d2c:	4413      	add	r3, r2
 8009d2e:	3310      	adds	r3, #16
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009d36:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009d3a:	2b0b      	cmp	r3, #11
 8009d3c:	d901      	bls.n	8009d42 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e032      	b.n	8009da8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009d42:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009d46:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8009d4a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009d4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d52:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009d56:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009d5a:	6819      	ldr	r1, [r3, #0]
 8009d5c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009d60:	3302      	adds	r3, #2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	440b      	add	r3, r1
 8009d66:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009d68:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009d6c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8009d70:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009d74:	4413      	add	r3, r2
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	b2d9      	uxtb	r1, r3
 8009d7c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009d80:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009d8a:	4413      	add	r3, r2
 8009d8c:	460a      	mov	r2, r1
 8009d8e:	701a      	strb	r2, [r3, #0]
      k++;
 8009d90:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009d94:	3301      	adds	r3, #1
 8009d96:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8009d9a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8009d9e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d3bb      	bcc.n	8009d1e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b09a      	sub	sp, #104	@ 0x68
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d106      	bne.n	8009dda <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009dd4:	3318      	adds	r3, #24
 8009dd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8009dd8:	e00f      	b.n	8009dfa <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d106      	bne.n	8009df6 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009df0:	3318      	adds	r3, #24
 8009df2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009df4:	e001      	b.n	8009dfa <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e059      	b.n	8009eae <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d055      	beq.n	8009eac <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8009e00:	f107 0314 	add.w	r3, r7, #20
 8009e04:	4619      	mov	r1, r3
 8009e06:	68b8      	ldr	r0, [r7, #8]
 8009e08:	f7ff ff60 	bl	8009ccc <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8009e12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8009e1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e1e:	e046      	b.n	8009eae <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8009e20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e22:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009e24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e26:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009e2a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e2e:	3304      	adds	r3, #4
 8009e30:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009e32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e34:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009e38:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8009e3a:	230c      	movs	r3, #12
 8009e3c:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8009e3e:	e032      	b.n	8009ea6 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8009e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e42:	3b01      	subs	r3, #1
 8009e44:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8009e46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e48:	3b04      	subs	r3, #4
 8009e4a:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009e4c:	f107 0214 	add.w	r2, r7, #20
 8009e50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e52:	4413      	add	r3, r2
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	021b      	lsls	r3, r3, #8
 8009e58:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009e5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e5e:	3302      	adds	r3, #2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	3368      	adds	r3, #104	@ 0x68
 8009e64:	443b      	add	r3, r7
 8009e66:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8009e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e72:	3b01      	subs	r3, #1
 8009e74:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009e76:	f107 0214 	add.w	r2, r7, #20
 8009e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e7c:	4413      	add	r3, r2
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	021b      	lsls	r3, r3, #8
 8009e82:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e88:	3302      	adds	r3, #2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	3368      	adds	r3, #104	@ 0x68
 8009e8e:	443b      	add	r3, r7
 8009e90:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	4313      	orrs	r3, r2
 8009e98:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e9c:	041a      	lsls	r2, r3, #16
 8009e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ea4:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009ea6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d8c9      	bhi.n	8009e40 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3768      	adds	r7, #104	@ 0x68
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
	...

08009eb8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ec4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009ec8:	6018      	str	r0, [r3, #0]
 8009eca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ece:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009ed2:	6019      	str	r1, [r3, #0]
 8009ed4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ed8:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8009edc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009ede:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ee2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009eee:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009ef2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009ef6:	6812      	ldr	r2, [r2, #0]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d10c      	bne.n	8009f16 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009efc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009f00:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f0c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009f10:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009f14:	e01d      	b.n	8009f52 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8009f16:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009f1a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009f26:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009f2a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009f2e:	6812      	ldr	r2, [r2, #0]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d10c      	bne.n	8009f4e <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009f34:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009f38:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009f44:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009f48:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009f4c:	e001      	b.n	8009f52 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e0a8      	b.n	800a0a4 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8009f52:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009f56:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 80a0 	beq.w	800a0a2 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8009f62:	f107 0214 	add.w	r2, r7, #20
 8009f66:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009f6a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009f6e:	4611      	mov	r1, r2
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	f7ff fe0b 	bl	8009b8c <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8009f7c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8009f84:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009f88:	e08c      	b.n	800a0a4 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8009f8a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009f8e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009f92:	2300      	movs	r3, #0
 8009f94:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009f98:	e00e      	b.n	8009fb8 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8009f9a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009f9e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009fa2:	601a      	str	r2, [r3, #0]
      addressDef++;
 8009fa4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009fa8:	3304      	adds	r3, #4
 8009faa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009fae:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009fb8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d9ec      	bls.n	8009f9a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8009fc0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009fc4:	4a3a      	ldr	r2, [pc, #232]	@ (800a0b0 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8009fc6:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009fc8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009fcc:	3304      	adds	r3, #4
 8009fce:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8009fd2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009fd6:	4a37      	ldr	r2, [pc, #220]	@ (800a0b4 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8009fd8:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009fda:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009fde:	3304      	adds	r3, #4
 8009fe0:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8009fe4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009fe8:	4a33      	ldr	r2, [pc, #204]	@ (800a0b8 <JPEG_Set_HuffAC_Mem+0x200>)
 8009fea:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009fec:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8009ff6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009ffa:	4a30      	ldr	r2, [pc, #192]	@ (800a0bc <JPEG_Set_HuffAC_Mem+0x204>)
 8009ffc:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8009ffe:	23a2      	movs	r3, #162	@ 0xa2
 800a000:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800a004:	e049      	b.n	800a09a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800a006:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a00a:	3b01      	subs	r3, #1
 800a00c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800a010:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a014:	3b04      	subs	r3, #4
 800a016:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a01a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a01e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a022:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a026:	4413      	add	r3, r2
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	021b      	lsls	r3, r3, #8
 800a02c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a030:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a034:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a038:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a03c:	3328      	adds	r3, #40	@ 0x28
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	440b      	add	r3, r1
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	b2db      	uxtb	r3, r3
 800a046:	4313      	orrs	r3, r2
 800a048:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800a04c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a050:	3b01      	subs	r3, #1
 800a052:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a056:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a05a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a05e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a062:	4413      	add	r3, r2
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	021b      	lsls	r3, r3, #8
 800a068:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a06c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a070:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a074:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a078:	3328      	adds	r3, #40	@ 0x28
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	4313      	orrs	r3, r2
 800a084:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a088:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800a08c:	041a      	lsls	r2, r3, #16
 800a08e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800a092:	431a      	orrs	r2, r3
 800a094:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a098:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a09a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d8b1      	bhi.n	800a006 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	0fd10fd0 	.word	0x0fd10fd0
 800a0b4:	0fd30fd2 	.word	0x0fd30fd2
 800a0b8:	0fd50fd4 	.word	0x0fd50fd4
 800a0bc:	0fd70fd6 	.word	0x0fd70fd6

0800a0c0 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f84d 	bl	800a168 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	491f      	ldr	r1, [pc, #124]	@ (800a158 <JPEG_Set_HuffEnc_Mem+0x98>)
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff feec 	bl	8009eb8 <JPEG_Set_HuffAC_Mem>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	e030      	b.n	800a150 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	4918      	ldr	r1, [pc, #96]	@ (800a15c <JPEG_Set_HuffEnc_Mem+0x9c>)
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7ff fedc 	bl	8009eb8 <JPEG_Set_HuffAC_Mem>
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	e020      	b.n	800a150 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a116:	461a      	mov	r2, r3
 800a118:	4911      	ldr	r1, [pc, #68]	@ (800a160 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff fe49 	bl	8009db2 <JPEG_Set_HuffDC_Mem>
 800a120:	4603      	mov	r3, r0
 800a122:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a124:	7bfb      	ldrb	r3, [r7, #15]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	e010      	b.n	800a150 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a136:	461a      	mov	r2, r3
 800a138:	490a      	ldr	r1, [pc, #40]	@ (800a164 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff fe39 	bl	8009db2 <JPEG_Set_HuffDC_Mem>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	e000      	b.n	800a150 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	08017bf0 	.word	0x08017bf0
 800a15c:	08017ca4 	.word	0x08017ca4
 800a160:	08017bb8 	.word	0x08017bb8
 800a164:	08017bd4 	.word	0x08017bd4

0800a168 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800a168:	b480      	push	{r7}
 800a16a:	b08b      	sub	sp, #44	@ 0x2c
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800a170:	4b80      	ldr	r3, [pc, #512]	@ (800a374 <JPEG_Set_Huff_DHTMem+0x20c>)
 800a172:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800a174:	4b80      	ldr	r3, [pc, #512]	@ (800a378 <JPEG_Set_Huff_DHTMem+0x210>)
 800a176:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800a178:	4b80      	ldr	r3, [pc, #512]	@ (800a37c <JPEG_Set_Huff_DHTMem+0x214>)
 800a17a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800a17c:	4b80      	ldr	r3, [pc, #512]	@ (800a380 <JPEG_Set_Huff_DHTMem+0x218>)
 800a17e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a188:	330c      	adds	r3, #12
 800a18a:	623b      	str	r3, [r7, #32]
  index = 16;
 800a18c:	2310      	movs	r3, #16
 800a18e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a190:	e01d      	b.n	800a1ce <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	3b01      	subs	r3, #1
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	5cd3      	ldrb	r3, [r2, r3]
 800a19a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19e:	3b02      	subs	r3, #2
 800a1a0:	6979      	ldr	r1, [r7, #20]
 800a1a2:	5ccb      	ldrb	r3, [r1, r3]
 800a1a4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a1a6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1aa:	3b03      	subs	r3, #3
 800a1ac:	6979      	ldr	r1, [r7, #20]
 800a1ae:	5ccb      	ldrb	r3, [r1, r3]
 800a1b0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a1b2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a1b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1b6:	3a04      	subs	r2, #4
 800a1b8:	6979      	ldr	r1, [r7, #20]
 800a1ba:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a1bc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	601a      	str	r2, [r3, #0]
    address--;
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	3b04      	subs	r3, #4
 800a1c6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ca:	3b04      	subs	r3, #4
 800a1cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d8de      	bhi.n	800a192 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a1dc:	3318      	adds	r3, #24
 800a1de:	623b      	str	r3, [r7, #32]
  index = 12;
 800a1e0:	230c      	movs	r3, #12
 800a1e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a1e4:	e021      	b.n	800a22a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	7c1b      	ldrb	r3, [r3, #16]
 800a1f0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	3b02      	subs	r3, #2
 800a1f6:	6979      	ldr	r1, [r7, #20]
 800a1f8:	440b      	add	r3, r1
 800a1fa:	7c1b      	ldrb	r3, [r3, #16]
 800a1fc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a1fe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a202:	3b03      	subs	r3, #3
 800a204:	6979      	ldr	r1, [r7, #20]
 800a206:	440b      	add	r3, r1
 800a208:	7c1b      	ldrb	r3, [r3, #16]
 800a20a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a20c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800a20e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a210:	3a04      	subs	r2, #4
 800a212:	6979      	ldr	r1, [r7, #20]
 800a214:	440a      	add	r2, r1
 800a216:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a218:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	601a      	str	r2, [r3, #0]
    address--;
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	3b04      	subs	r3, #4
 800a222:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a226:	3b04      	subs	r3, #4
 800a228:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d8da      	bhi.n	800a1e6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a238:	3328      	adds	r3, #40	@ 0x28
 800a23a:	623b      	str	r3, [r7, #32]
  index = 16;
 800a23c:	2310      	movs	r3, #16
 800a23e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a240:	e01d      	b.n	800a27e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a244:	3b01      	subs	r3, #1
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	5cd3      	ldrb	r3, [r2, r3]
 800a24a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24e:	3b02      	subs	r3, #2
 800a250:	69f9      	ldr	r1, [r7, #28]
 800a252:	5ccb      	ldrb	r3, [r1, r3]
 800a254:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a256:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25a:	3b03      	subs	r3, #3
 800a25c:	69f9      	ldr	r1, [r7, #28]
 800a25e:	5ccb      	ldrb	r3, [r1, r3]
 800a260:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a262:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a266:	3a04      	subs	r2, #4
 800a268:	69f9      	ldr	r1, [r7, #28]
 800a26a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a26c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	601a      	str	r2, [r3, #0]
    address--;
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	3b04      	subs	r3, #4
 800a276:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27a:	3b04      	subs	r3, #4
 800a27c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a280:	2b03      	cmp	r3, #3
 800a282:	d8de      	bhi.n	800a242 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a28c:	33cc      	adds	r3, #204	@ 0xcc
 800a28e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	4b3b      	ldr	r3, [pc, #236]	@ (800a384 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a296:	4013      	ands	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800a2a0:	021a      	lsls	r2, r3, #8
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	3b04      	subs	r3, #4
 800a2ba:	623b      	str	r3, [r7, #32]
  index = 160;
 800a2bc:	23a0      	movs	r3, #160	@ 0xa0
 800a2be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a2c0:	e021      	b.n	800a306 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	69fa      	ldr	r2, [r7, #28]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	7c1b      	ldrb	r3, [r3, #16]
 800a2cc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d0:	3b02      	subs	r3, #2
 800a2d2:	69f9      	ldr	r1, [r7, #28]
 800a2d4:	440b      	add	r3, r1
 800a2d6:	7c1b      	ldrb	r3, [r3, #16]
 800a2d8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a2da:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2de:	3b03      	subs	r3, #3
 800a2e0:	69f9      	ldr	r1, [r7, #28]
 800a2e2:	440b      	add	r3, r1
 800a2e4:	7c1b      	ldrb	r3, [r3, #16]
 800a2e6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a2e8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a2ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2ec:	3a04      	subs	r2, #4
 800a2ee:	69f9      	ldr	r1, [r7, #28]
 800a2f0:	440a      	add	r2, r1
 800a2f2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a2f4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	601a      	str	r2, [r3, #0]
    address--;
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	3b04      	subs	r3, #4
 800a2fe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	3b04      	subs	r3, #4
 800a304:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	2b03      	cmp	r3, #3
 800a30a:	d8da      	bhi.n	800a2c2 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a314:	33cc      	adds	r3, #204	@ 0xcc
 800a316:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	061a      	lsls	r2, r3, #24
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	431a      	orrs	r2, r3
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	041b      	lsls	r3, r3, #16
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a334:	6a3b      	ldr	r3, [r7, #32]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a342:	33dc      	adds	r3, #220	@ 0xdc
 800a344:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	4b0e      	ldr	r3, [pc, #56]	@ (800a384 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a34c:	4013      	ands	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	7bdb      	ldrb	r3, [r3, #15]
 800a354:	021a      	lsls	r2, r3, #8
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	7b92      	ldrb	r2, [r2, #14]
 800a35e:	4313      	orrs	r3, r2
 800a360:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	3b04      	subs	r3, #4
 800a36c:	623b      	str	r3, [r7, #32]
  index = 12;
 800a36e:	230c      	movs	r3, #12
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a372:	e027      	b.n	800a3c4 <JPEG_Set_Huff_DHTMem+0x25c>
 800a374:	08017bf0 	.word	0x08017bf0
 800a378:	08017ca4 	.word	0x08017ca4
 800a37c:	08017bb8 	.word	0x08017bb8
 800a380:	08017bd4 	.word	0x08017bd4
 800a384:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38a:	3301      	adds	r3, #1
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	5cd3      	ldrb	r3, [r2, r3]
 800a390:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a392:	6939      	ldr	r1, [r7, #16]
 800a394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a396:	440b      	add	r3, r1
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a39c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	6939      	ldr	r1, [r7, #16]
 800a3a4:	5ccb      	ldrb	r3, [r1, r3]
 800a3a6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a3a8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800a3aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3ac:	3a02      	subs	r2, #2
 800a3ae:	6939      	ldr	r1, [r7, #16]
 800a3b0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a3b2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	601a      	str	r2, [r3, #0]
    address--;
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	3b04      	subs	r3, #4
 800a3bc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c0:	3b04      	subs	r3, #4
 800a3c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	d8de      	bhi.n	800a388 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a3d2:	33dc      	adds	r3, #220	@ 0xdc
 800a3d4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	7c5b      	ldrb	r3, [r3, #17]
 800a3e2:	061a      	lsls	r2, r3, #24
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	431a      	orrs	r2, r3
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	7c1b      	ldrb	r3, [r3, #16]
 800a3ec:	041b      	lsls	r3, r3, #16
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a400:	33e8      	adds	r3, #232	@ 0xe8
 800a402:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	4b6d      	ldr	r3, [pc, #436]	@ (800a5c0 <JPEG_Set_Huff_DHTMem+0x458>)
 800a40a:	4013      	ands	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	7edb      	ldrb	r3, [r3, #27]
 800a412:	021a      	lsls	r2, r3, #8
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	4313      	orrs	r3, r2
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	7e92      	ldrb	r2, [r2, #26]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	3b04      	subs	r3, #4
 800a42a:	623b      	str	r3, [r7, #32]
  index = 8;
 800a42c:	2308      	movs	r3, #8
 800a42e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a430:	e021      	b.n	800a476 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a434:	3301      	adds	r3, #1
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	4413      	add	r3, r2
 800a43a:	7c1b      	ldrb	r3, [r3, #16]
 800a43c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a43e:	6939      	ldr	r1, [r7, #16]
 800a440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a442:	440b      	add	r3, r1
 800a444:	3310      	adds	r3, #16
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a44a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a44e:	3b01      	subs	r3, #1
 800a450:	6939      	ldr	r1, [r7, #16]
 800a452:	440b      	add	r3, r1
 800a454:	7c1b      	ldrb	r3, [r3, #16]
 800a456:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a458:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800a45a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a45c:	3a02      	subs	r2, #2
 800a45e:	6939      	ldr	r1, [r7, #16]
 800a460:	440a      	add	r2, r1
 800a462:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a464:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	601a      	str	r2, [r3, #0]
    address--;
 800a46a:	6a3b      	ldr	r3, [r7, #32]
 800a46c:	3b04      	subs	r3, #4
 800a46e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	3b04      	subs	r3, #4
 800a474:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a478:	2b03      	cmp	r3, #3
 800a47a:	d8da      	bhi.n	800a432 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a484:	33e8      	adds	r3, #232	@ 0xe8
 800a486:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	785b      	ldrb	r3, [r3, #1]
 800a494:	061a      	lsls	r2, r3, #24
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	431a      	orrs	r2, r3
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	041b      	lsls	r3, r3, #16
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a4b2:	33f8      	adds	r3, #248	@ 0xf8
 800a4b4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	4b41      	ldr	r3, [pc, #260]	@ (800a5c0 <JPEG_Set_Huff_DHTMem+0x458>)
 800a4bc:	4013      	ands	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	7bdb      	ldrb	r3, [r3, #15]
 800a4c4:	021a      	lsls	r2, r3, #8
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	69ba      	ldr	r2, [r7, #24]
 800a4cc:	7b92      	ldrb	r2, [r2, #14]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	3b04      	subs	r3, #4
 800a4dc:	623b      	str	r3, [r7, #32]
  index = 12;
 800a4de:	230c      	movs	r3, #12
 800a4e0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a4e2:	e01d      	b.n	800a520 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	5cd3      	ldrb	r3, [r2, r3]
 800a4ec:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a4ee:	69b9      	ldr	r1, [r7, #24]
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f2:	440b      	add	r3, r1
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a4f8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	69b9      	ldr	r1, [r7, #24]
 800a500:	5ccb      	ldrb	r3, [r1, r3]
 800a502:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a504:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800a506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a508:	3a02      	subs	r2, #2
 800a50a:	69b9      	ldr	r1, [r7, #24]
 800a50c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a50e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	601a      	str	r2, [r3, #0]
    address--;
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	3b04      	subs	r3, #4
 800a518:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51c:	3b04      	subs	r3, #4
 800a51e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	2b03      	cmp	r3, #3
 800a524:	d8de      	bhi.n	800a4e4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a52e:	33f8      	adds	r3, #248	@ 0xf8
 800a530:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	b29b      	uxth	r3, r3
 800a538:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	7c5b      	ldrb	r3, [r3, #17]
 800a53e:	061a      	lsls	r2, r3, #24
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	431a      	orrs	r2, r3
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	7c1b      	ldrb	r3, [r3, #16]
 800a548:	041b      	lsls	r3, r3, #16
 800a54a:	4313      	orrs	r3, r2
 800a54c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a55c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800a560:	623b      	str	r3, [r7, #32]
  index = 160;
 800a562:	23a0      	movs	r3, #160	@ 0xa0
 800a564:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a566:	e021      	b.n	800a5ac <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	3301      	adds	r3, #1
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	4413      	add	r3, r2
 800a570:	7c1b      	ldrb	r3, [r3, #16]
 800a572:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a574:	69b9      	ldr	r1, [r7, #24]
 800a576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a578:	440b      	add	r3, r1
 800a57a:	3310      	adds	r3, #16
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a580:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	3b01      	subs	r3, #1
 800a586:	69b9      	ldr	r1, [r7, #24]
 800a588:	440b      	add	r3, r1
 800a58a:	7c1b      	ldrb	r3, [r3, #16]
 800a58c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a58e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a592:	3a02      	subs	r2, #2
 800a594:	69b9      	ldr	r1, [r7, #24]
 800a596:	440a      	add	r2, r1
 800a598:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a59a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a59c:	6a3b      	ldr	r3, [r7, #32]
 800a59e:	601a      	str	r2, [r3, #0]
    address--;
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	3b04      	subs	r3, #4
 800a5a4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	3b04      	subs	r3, #4
 800a5aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d8da      	bhi.n	800a568 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800a5b2:	bf00      	nop
 800a5b4:	bf00      	nop
 800a5b6:	372c      	adds	r7, #44	@ 0x2c
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	ffff0000 	.word	0xffff0000

0800a5c4 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d0:	f003 0303 	and.w	r3, r3, #3
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d125      	bne.n	800a624 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d01e      	beq.n	800a624 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff f90f 	bl	8009810 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7ff f9f3 	bl	80099ea <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a612:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a622:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a628:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d116      	bne.n	800a65e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d004      	beq.n	800a648 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a63e:	2108      	movs	r1, #8
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f988 	bl	800a956 <JPEG_ReadInputData>
 800a646:	e00a      	b.n	800a65e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b00      	cmp	r3, #0
 800a654:	d003      	beq.n	800a65e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800a656:	2101      	movs	r1, #1
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f97c 	bl	800a956 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d116      	bne.n	800a698 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b00      	cmp	r3, #0
 800a676:	d004      	beq.n	800a682 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a678:	2108      	movs	r1, #8
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f864 	bl	800a748 <JPEG_StoreOutputData>
 800a680:	e00a      	b.n	800a698 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a688:	f003 0310 	and.w	r3, r3, #16
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800a690:	2101      	movs	r1, #1
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f858 	bl	800a748 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a69e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6a2:	2b20      	cmp	r3, #32
 800a6a4:	d14b      	bne.n	800a73e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0201 	bic.w	r2, r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ba:	f003 030c 	and.w	r3, r3, #12
 800a6be:	2b08      	cmp	r3, #8
 800a6c0:	d107      	bne.n	800a6d2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a6d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a6e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00a      	beq.n	800a700 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	69d9      	ldr	r1, [r3, #28]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff f9a2 	bl	8009a3e <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a704:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a70a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f003 0303 	and.w	r3, r3, #3
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d103      	bne.n	800a734 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff f971 	bl	8009a14 <HAL_JPEG_DecodeCpltCallback>
 800a732:	e002      	b.n	800a73a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff f963 	bl	8009a00 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e000      	b.n	800a740 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	440b      	add	r3, r1
 800a760:	429a      	cmp	r2, r3
 800a762:	d34b      	bcc.n	800a7fc <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800a764:	2300      	movs	r3, #0
 800a766:	617b      	str	r3, [r7, #20]
 800a768:	e031      	b.n	800a7ce <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a770:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	69da      	ldr	r2, [r3, #28]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77a:	4413      	add	r3, r2
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	0a19      	lsrs	r1, r3, #8
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	69da      	ldr	r2, [r3, #28]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78e:	3301      	adds	r3, #1
 800a790:	4413      	add	r3, r2
 800a792:	b2ca      	uxtb	r2, r1
 800a794:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	0c19      	lsrs	r1, r3, #16
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69da      	ldr	r2, [r3, #28]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a2:	3302      	adds	r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	b2ca      	uxtb	r2, r1
 800a7a8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	0e19      	lsrs	r1, r3, #24
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	69da      	ldr	r2, [r3, #28]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b6:	3303      	adds	r3, #3
 800a7b8:	4413      	add	r3, r2
 800a7ba:	b2ca      	uxtb	r2, r1
 800a7bc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c2:	1d1a      	adds	r2, r3, #4
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	617b      	str	r3, [r7, #20]
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d3c9      	bcc.n	800a76a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	f040 80b5 	bne.w	800a94e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	69d9      	ldr	r1, [r3, #28]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff f925 	bl	8009a3e <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800a7fa:	e0a8      	b.n	800a94e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a804:	429a      	cmp	r2, r3
 800a806:	f240 80a2 	bls.w	800a94e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	089b      	lsrs	r3, r3, #2
 800a816:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800a818:	2300      	movs	r3, #0
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	e031      	b.n	800a882 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a824:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	69da      	ldr	r2, [r3, #28]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82e:	4413      	add	r3, r2
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	b2d2      	uxtb	r2, r2
 800a834:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	0a19      	lsrs	r1, r3, #8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69da      	ldr	r2, [r3, #28]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a842:	3301      	adds	r3, #1
 800a844:	4413      	add	r3, r2
 800a846:	b2ca      	uxtb	r2, r1
 800a848:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	0c19      	lsrs	r1, r3, #16
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	69da      	ldr	r2, [r3, #28]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a856:	3302      	adds	r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	b2ca      	uxtb	r2, r1
 800a85c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	0e19      	lsrs	r1, r3, #24
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	69da      	ldr	r2, [r3, #28]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86a:	3303      	adds	r3, #3
 800a86c:	4413      	add	r3, r2
 800a86e:	b2ca      	uxtb	r2, r1
 800a870:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a876:	1d1a      	adds	r2, r3, #4
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	3301      	adds	r3, #1
 800a880:	617b      	str	r3, [r7, #20]
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	429a      	cmp	r2, r3
 800a888:	d3c9      	bcc.n	800a81e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a892:	429a      	cmp	r2, r3
 800a894:	d10b      	bne.n	800a8ae <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69d9      	ldr	r1, [r3, #28]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89e:	461a      	mov	r2, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f7ff f8cc 	bl	8009a3e <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a8ac:	e04f      	b.n	800a94e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8c0:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	e015      	b.n	800a8f4 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f003 0303 	and.w	r3, r3, #3
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	fa22 f103 	lsr.w	r1, r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	69da      	ldr	r2, [r3, #28]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8de:	4413      	add	r3, r2
 800a8e0:	b2ca      	uxtb	r2, r1
 800a8e2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	617b      	str	r3, [r7, #20]
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d3e5      	bcc.n	800a8c8 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	69d9      	ldr	r1, [r3, #28]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a904:	461a      	mov	r2, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff f899 	bl	8009a3e <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f1c3 0304 	rsb	r3, r3, #4
 800a918:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	617b      	str	r3, [r7, #20]
 800a91e:	e013      	b.n	800a948 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	00db      	lsls	r3, r3, #3
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	fa22 f103 	lsr.w	r1, r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	69da      	ldr	r2, [r3, #28]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a932:	4413      	add	r3, r2
 800a934:	b2ca      	uxtb	r2, r1
 800a936:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93c:	1c5a      	adds	r2, r3, #1
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	3301      	adds	r3, #1
 800a946:	617b      	str	r3, [r7, #20]
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d9e8      	bls.n	800a920 <JPEG_StoreOutputData+0x1d8>
}
 800a94e:	bf00      	nop
 800a950:	3718      	adds	r7, #24
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b088      	sub	sp, #32
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <JPEG_ReadInputData+0x1c>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d104      	bne.n	800a97c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a972:	2101      	movs	r1, #1
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7fe ffe0 	bl	800993a <HAL_JPEG_Pause>
 800a97a:	e028      	b.n	800a9ce <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	429a      	cmp	r2, r3
 800a986:	d906      	bls.n	800a996 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a1b      	ldr	r3, [r3, #32]
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	61fb      	str	r3, [r7, #28]
 800a994:	e01b      	b.n	800a9ce <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d115      	bne.n	800a9ce <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f7ff f83d 	bl	8009a28 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	d905      	bls.n	800a9c2 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ba:	f023 0203 	bic.w	r2, r3, #3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9cc:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f040 809f 	bne.w	800ab1a <JPEG_ReadInputData+0x1c4>
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 809b 	beq.w	800ab1a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	089b      	lsrs	r3, r3, #2
 800a9e8:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d335      	bcc.n	800aa5e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	61bb      	str	r3, [r7, #24]
 800a9f6:	e02d      	b.n	800aa54 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	699a      	ldr	r2, [r3, #24]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4413      	add	r3, r2
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	699a      	ldr	r2, [r3, #24]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3301      	adds	r3, #1
 800aa12:	4413      	add	r3, r2
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aa18:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6999      	ldr	r1, [r3, #24]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3302      	adds	r3, #2
 800aa24:	440b      	add	r3, r1
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800aa2a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	699a      	ldr	r2, [r3, #24]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3303      	adds	r3, #3
 800aa36:	4413      	add	r3, r2
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800aa40:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aa42:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	1d1a      	adds	r2, r3, #4
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	3301      	adds	r3, #1
 800aa52:	61bb      	str	r3, [r7, #24]
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d3cd      	bcc.n	800a9f8 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800aa5c:	e05d      	b.n	800ab1a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d035      	beq.n	800aad0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800aa64:	2300      	movs	r3, #0
 800aa66:	61bb      	str	r3, [r7, #24]
 800aa68:	e02d      	b.n	800aac6 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	699a      	ldr	r2, [r3, #24]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	699a      	ldr	r2, [r3, #24]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3301      	adds	r3, #1
 800aa84:	4413      	add	r3, r2
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aa8a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6999      	ldr	r1, [r3, #24]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	3302      	adds	r3, #2
 800aa96:	440b      	add	r3, r1
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800aa9c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	699a      	ldr	r2, [r3, #24]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3303      	adds	r3, #3
 800aaa8:	4413      	add	r3, r2
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800aab2:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aab4:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	1d1a      	adds	r2, r3, #4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	3301      	adds	r3, #1
 800aac4:	61bb      	str	r3, [r7, #24]
 800aac6:	69ba      	ldr	r2, [r7, #24]
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d3cd      	bcc.n	800aa6a <JPEG_ReadInputData+0x114>
}
 800aace:	e024      	b.n	800ab1a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800aad4:	2300      	movs	r3, #0
 800aad6:	61bb      	str	r3, [r7, #24]
 800aad8:	e017      	b.n	800ab0a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	699a      	ldr	r2, [r3, #24]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	4413      	add	r3, r2
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	00db      	lsls	r3, r3, #3
 800aaf0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	1c5a      	adds	r2, r3, #1
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	3301      	adds	r3, #1
 800ab08:	61bb      	str	r3, [r7, #24]
 800ab0a:	69ba      	ldr	r2, [r7, #24]
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d3e3      	bcc.n	800aada <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ab1a:	bf00      	nop
 800ab1c:	3720      	adds	r7, #32
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b082      	sub	sp, #8
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab2e:	f003 0303 	and.w	r3, r3, #3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d125      	bne.n	800ab82 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d01e      	beq.n	800ab82 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3304      	adds	r3, #4
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7fe fe60 	bl	8009810 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	3304      	adds	r3, #4
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7fe ff44 	bl	80099ea <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab88:	f003 0320 	and.w	r3, r3, #32
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d039      	beq.n	800ac04 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab94:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f022 0201 	bic.w	r2, r2, #1
 800abaa:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800abba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800abca:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d104      	bne.n	800abe4 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 fa1a 	bl	800b018 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d105      	bne.n	800abfe <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fa0e 	bl	800b018 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800abfc:	e002      	b.n	800ac04 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f804 	bl	800ac0c <JPEG_DMA_EndProcess>
}
 800ac04:	bf00      	nop
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800ac24:	1ad2      	subs	r2, r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d10a      	bne.n	800ac4c <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	69d9      	ldr	r1, [r3, #28]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3e:	461a      	mov	r2, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7fe fefc 	bl	8009a3e <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac52:	f003 0310 	and.w	r3, r3, #16
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d134      	bne.n	800acc4 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00a      	beq.n	800ac78 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	69d9      	ldr	r1, [r3, #28]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7fe fee6 	bl	8009a3e <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f022 0201 	bic.w	r2, r2, #1
 800ac86:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac8c:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac92:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f003 0303 	and.w	r3, r3, #3
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d103      	bne.n	800acbc <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f7fe fead 	bl	8009a14 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800acba:	e00c      	b.n	800acd6 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7fe fe9f 	bl	8009a00 <HAL_JPEG_EncodeCpltCallback>
}
 800acc2:	e008      	b.n	800acd6 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f804 	bl	800acde <JPEG_DMA_PollResidualData>
}
 800acd6:	bf00      	nop
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b086      	sub	sp, #24
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800ace6:	2310      	movs	r3, #16
 800ace8:	617b      	str	r3, [r7, #20]
 800acea:	e04f      	b.n	800ad8c <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d146      	bne.n	800ad86 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acfe:	f003 0310 	and.w	r3, r3, #16
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d03f      	beq.n	800ad86 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad0c:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	69da      	ldr	r2, [r3, #28]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad16:	4413      	add	r3, r2
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	0a19      	lsrs	r1, r3, #8
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	69da      	ldr	r2, [r3, #28]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	4413      	add	r3, r2
 800ad2e:	b2ca      	uxtb	r2, r1
 800ad30:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	0c19      	lsrs	r1, r3, #16
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	69da      	ldr	r2, [r3, #28]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3e:	3302      	adds	r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	b2ca      	uxtb	r2, r1
 800ad44:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	0e19      	lsrs	r1, r3, #24
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	69da      	ldr	r2, [r3, #28]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad52:	3303      	adds	r3, #3
 800ad54:	4413      	add	r3, r2
 800ad56:	b2ca      	uxtb	r2, r1
 800ad58:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5e:	1d1a      	adds	r2, r3, #4
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d10a      	bne.n	800ad86 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	69d9      	ldr	r1, [r3, #28]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad78:	461a      	mov	r2, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7fe fe5f 	bl	8009a3e <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	617b      	str	r3, [r7, #20]
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1ac      	bne.n	800acec <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad96:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad9e:	f003 0310 	and.w	r3, r3, #16
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d004      	beq.n	800adb0 <JPEG_DMA_PollResidualData+0xd2>
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800adac:	2b00      	cmp	r3, #0
 800adae:	d133      	bne.n	800ae18 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0201 	bic.w	r2, r2, #1
 800adbe:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00a      	beq.n	800adde <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	69d9      	ldr	r1, [r3, #28]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add0:	461a      	mov	r2, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7fe fe33 	bl	8009a3e <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade2:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade8:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	f003 0303 	and.w	r3, r3, #3
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	d103      	bne.n	800ae12 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7fe fe02 	bl	8009a14 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800ae10:	e002      	b.n	800ae18 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7fe fdf4 	bl	8009a00 <HAL_JPEG_EncodeCpltCallback>
}
 800ae18:	bf00      	nop
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b08b      	sub	sp, #44	@ 0x2c
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	3350      	adds	r3, #80	@ 0x50
 800ae32:	61bb      	str	r3, [r7, #24]

  i = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800ae38:	e042      	b.n	800aec0 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800ae40:	2300      	movs	r3, #0
 800ae42:	61fb      	str	r3, [r7, #28]
 800ae44:	e033      	b.n	800aeae <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	00db      	lsls	r3, r3, #3
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d103      	bne.n	800ae62 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5c:	3364      	adds	r3, #100	@ 0x64
 800ae5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae60:	e022      	b.n	800aea8 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2264      	movs	r2, #100	@ 0x64
 800ae66:	fb02 f303 	mul.w	r3, r2, r3
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ae6e:	6a38      	ldr	r0, [r7, #32]
 800ae70:	69f9      	ldr	r1, [r7, #28]
 800ae72:	4401      	add	r1, r0
 800ae74:	4818      	ldr	r0, [pc, #96]	@ (800aed8 <JPEG_GetQuality+0xb8>)
 800ae76:	5c41      	ldrb	r1, [r0, r1]
 800ae78:	440a      	add	r2, r1
 800ae7a:	7812      	ldrb	r2, [r2, #0]
 800ae7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae80:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2b64      	cmp	r3, #100	@ 0x64
 800ae86:	d807      	bhi.n	800ae98 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800ae8e:	085b      	lsrs	r3, r3, #1
 800ae90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae92:	4413      	add	r3, r2
 800ae94:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae96:	e007      	b.n	800aea8 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800ae98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aea4:	4413      	add	r3, r2
 800aea6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	61fb      	str	r3, [r7, #28]
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d9c8      	bls.n	800ae46 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	3304      	adds	r3, #4
 800aebe:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800aec0:	6a3b      	ldr	r3, [r7, #32]
 800aec2:	2b3c      	cmp	r3, #60	@ 0x3c
 800aec4:	d9b9      	bls.n	800ae3a <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec8:	099b      	lsrs	r3, r3, #6
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	372c      	adds	r7, #44	@ 0x2c
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	08017d58 	.word	0x08017d58

0800aedc <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aee4:	f7f7 faaa 	bl	800243c <HAL_GetTick>
 800aee8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e03b      	b.n	800af6c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68da      	ldr	r2, [r3, #12]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f022 0201 	bic.w	r2, r2, #1
 800af12:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800af14:	e00f      	b.n	800af36 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800af16:	f7f7 fa91 	bl	800243c <HAL_GetTick>
 800af1a:	4602      	mov	r2, r0
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	2b05      	cmp	r3, #5
 800af22:	d908      	bls.n	800af36 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2240      	movs	r2, #64	@ 0x40
 800af28:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2203      	movs	r2, #3
 800af2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e01a      	b.n	800af6c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1e8      	bne.n	800af16 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f9e3 	bl	800b310 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800af74:	b480      	push	{r7}
 800af76:	b087      	sub	sp, #28
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e03e      	b.n	800b00c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af94:	2b01      	cmp	r3, #1
 800af96:	d101      	bne.n	800af9c <HAL_MDMA_ConfigPostRequestMask+0x28>
 800af98:	2302      	movs	r3, #2
 800af9a:	e037      	b.n	800b00c <HAL_MDMA_ConfigPostRequestMask+0x98>
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b01      	cmp	r3, #1
 800afae:	d126      	bne.n	800affe <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d11c      	bne.n	800aff8 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d108      	bne.n	800afe6 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	691a      	ldr	r2, [r3, #16]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800afe2:	611a      	str	r2, [r3, #16]
 800afe4:	e00d      	b.n	800b002 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800aff4:	611a      	str	r2, [r3, #16]
 800aff6:	e004      	b.n	800b002 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	75fb      	strb	r3, [r7, #23]
 800affc:	e001      	b.n	800b002 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	371c      	adds	r7, #28
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	e017      	b.n	800b05a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b02      	cmp	r3, #2
 800b034:	d004      	beq.n	800b040 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2280      	movs	r2, #128	@ 0x80
 800b03a:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e00c      	b.n	800b05a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2204      	movs	r2, #4
 800b044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68da      	ldr	r2, [r3, #12]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f022 0201 	bic.w	r2, r2, #1
 800b056:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
	...

0800b068 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800b070:	2300      	movs	r3, #0
 800b072:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b074:	4b91      	ldr	r3, [pc, #580]	@ (800b2bc <HAL_MDMA_IRQHandler+0x254>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a91      	ldr	r2, [pc, #580]	@ (800b2c0 <HAL_MDMA_IRQHandler+0x258>)
 800b07a:	fba2 2303 	umull	r2, r3, r2, r3
 800b07e:	0a9b      	lsrs	r3, r3, #10
 800b080:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	4b8e      	ldr	r3, [pc, #568]	@ (800b2c4 <HAL_MDMA_IRQHandler+0x25c>)
 800b08a:	4413      	add	r3, r2
 800b08c:	099b      	lsrs	r3, r3, #6
 800b08e:	f003 031f 	and.w	r3, r3, #31
 800b092:	2201      	movs	r2, #1
 800b094:	fa02 f303 	lsl.w	r3, r2, r3
 800b098:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b09a:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 812d 	beq.w	800b304 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d054      	beq.n	800b162 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	f003 0302 	and.w	r3, r3, #2
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d04d      	beq.n	800b162 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f022 0202 	bic.w	r2, r2, #2
 800b0d4:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d106      	bne.n	800b0f6 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b0ec:	f043 0201 	orr.w	r2, r3, #1
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	669a      	str	r2, [r3, #104]	@ 0x68
 800b0f4:	e005      	b.n	800b102 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b0fa:	f043 0202 	orr.w	r2, r3, #2
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d005      	beq.n	800b118 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b110:	f043 0204 	orr.w	r2, r3, #4
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b126:	f043 0208 	orr.w	r2, r3, #8
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b134:	2b00      	cmp	r3, #0
 800b136:	d005      	beq.n	800b144 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b13c:	f043 0210 	orr.w	r2, r3, #16
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d005      	beq.n	800b15a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b152:	f043 0220 	orr.w	r2, r3, #32
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2201      	movs	r2, #1
 800b160:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0310 	and.w	r3, r3, #16
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d012      	beq.n	800b196 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	f003 0320 	and.w	r3, r3, #32
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00b      	beq.n	800b196 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2210      	movs	r2, #16
 800b184:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0308 	and.w	r3, r3, #8
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d012      	beq.n	800b1ca <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f003 0310 	and.w	r3, r3, #16
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00b      	beq.n	800b1ca <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2208      	movs	r2, #8
 800b1b8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d012      	beq.n	800b1fe <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	f003 0308 	and.w	r3, r3, #8
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00b      	beq.n	800b1fe <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0302 	and.w	r3, r3, #2
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d039      	beq.n	800b280 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	f003 0304 	and.w	r3, r3, #4
 800b216:	2b00      	cmp	r3, #0
 800b218:	d032      	beq.n	800b280 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b228:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b04      	cmp	r3, #4
 800b234:	d110      	bne.n	800b258 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d05c      	beq.n	800b308 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	4798      	blx	r3
        }
        return;
 800b256:	e057      	b.n	800b308 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2202      	movs	r2, #2
 800b25e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b274:	2b00      	cmp	r3, #0
 800b276:	d003      	beq.n	800b280 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b284:	2b00      	cmp	r3, #0
 800b286:	d040      	beq.n	800b30a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2204      	movs	r2, #4
 800b28c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68da      	ldr	r2, [r3, #12]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 0201 	bic.w	r2, r2, #1
 800b29e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	60bb      	str	r3, [r7, #8]
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d30d      	bcc.n	800b2c8 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1f2      	bne.n	800b2a0 <HAL_MDMA_IRQHandler+0x238>
 800b2ba:	e006      	b.n	800b2ca <HAL_MDMA_IRQHandler+0x262>
 800b2bc:	24000004 	.word	0x24000004
 800b2c0:	1b4e81b5 	.word	0x1b4e81b5
 800b2c4:	adffffc0 	.word	0xadffffc0
        break;
 800b2c8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d004      	beq.n	800b2ea <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2203      	movs	r2, #3
 800b2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b2e8:	e003      	b.n	800b2f2 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d007      	beq.n	800b30a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	4798      	blx	r3
 800b302:	e002      	b.n	800b30a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800b304:	bf00      	nop
 800b306:	e000      	b.n	800b30a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800b308:	bf00      	nop
    }
  }
}
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68d9      	ldr	r1, [r3, #12]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	691a      	ldr	r2, [r3, #16]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	430a      	orrs	r2, r1
 800b326:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	695a      	ldr	r2, [r3, #20]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b336:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a1b      	ldr	r3, [r3, #32]
 800b33c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b342:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b348:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b34e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b354:	3b01      	subs	r3, #1
 800b356:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800b358:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b364:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b366:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b370:	d107      	bne.n	800b382 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	691a      	ldr	r2, [r3, #16]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800b380:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2200      	movs	r2, #0
 800b388:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b38e:	2b00      	cmp	r3, #0
 800b390:	da11      	bge.n	800b3b6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	695a      	ldr	r2, [r3, #20]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b3a0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3a6:	425b      	negs	r3, r3
 800b3a8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	b292      	uxth	r2, r2
 800b3b2:	621a      	str	r2, [r3, #32]
 800b3b4:	e006      	b.n	800b3c4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	b292      	uxth	r2, r2
 800b3c2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	da15      	bge.n	800b3f8 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	695a      	ldr	r2, [r3, #20]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800b3da:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3e0:	425b      	negs	r3, r3
 800b3e2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6a19      	ldr	r1, [r3, #32]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	041a      	lsls	r2, r3, #16
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	621a      	str	r2, [r3, #32]
 800b3f6:	e009      	b.n	800b40c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6a19      	ldr	r1, [r3, #32]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b402:	041a      	lsls	r2, r3, #16
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	430a      	orrs	r2, r1
 800b40a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b414:	d006      	beq.n	800b424 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685a      	ldr	r2, [r3, #4]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	b2d2      	uxtb	r2, r2
 800b420:	629a      	str	r2, [r3, #40]	@ 0x28
 800b422:	e003      	b.n	800b42c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2200      	movs	r2, #0
 800b42a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2200      	movs	r2, #0
 800b432:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b434:	bf00      	nop
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af02      	add	r7, sp, #8
 800b446:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e0fe      	b.n	800b650 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f00b fa08 	bl	801687c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2203      	movs	r2, #3
 800b470:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4618      	mov	r0, r3
 800b47a:	f007 fdb8 	bl	8012fee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6818      	ldr	r0, [r3, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	7c1a      	ldrb	r2, [r3, #16]
 800b486:	f88d 2000 	strb.w	r2, [sp]
 800b48a:	3304      	adds	r3, #4
 800b48c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b48e:	f007 fc89 	bl	8012da4 <USB_CoreInit>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d005      	beq.n	800b4a4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2202      	movs	r2, #2
 800b49c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e0d5      	b.n	800b650 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f007 fdb0 	bl	8013010 <USB_SetCurrentMode>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e0c6      	b.n	800b650 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	73fb      	strb	r3, [r7, #15]
 800b4c6:	e04a      	b.n	800b55e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b4c8:	7bfa      	ldrb	r2, [r7, #15]
 800b4ca:	6879      	ldr	r1, [r7, #4]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	00db      	lsls	r3, r3, #3
 800b4d0:	4413      	add	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	440b      	add	r3, r1
 800b4d6:	3315      	adds	r3, #21
 800b4d8:	2201      	movs	r2, #1
 800b4da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b4dc:	7bfa      	ldrb	r2, [r7, #15]
 800b4de:	6879      	ldr	r1, [r7, #4]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	00db      	lsls	r3, r3, #3
 800b4e4:	4413      	add	r3, r2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	440b      	add	r3, r1
 800b4ea:	3314      	adds	r3, #20
 800b4ec:	7bfa      	ldrb	r2, [r7, #15]
 800b4ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b4f0:	7bfa      	ldrb	r2, [r7, #15]
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
 800b4f4:	b298      	uxth	r0, r3
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	00db      	lsls	r3, r3, #3
 800b4fc:	4413      	add	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	440b      	add	r3, r1
 800b502:	332e      	adds	r3, #46	@ 0x2e
 800b504:	4602      	mov	r2, r0
 800b506:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b508:	7bfa      	ldrb	r2, [r7, #15]
 800b50a:	6879      	ldr	r1, [r7, #4]
 800b50c:	4613      	mov	r3, r2
 800b50e:	00db      	lsls	r3, r3, #3
 800b510:	4413      	add	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	440b      	add	r3, r1
 800b516:	3318      	adds	r3, #24
 800b518:	2200      	movs	r2, #0
 800b51a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b51c:	7bfa      	ldrb	r2, [r7, #15]
 800b51e:	6879      	ldr	r1, [r7, #4]
 800b520:	4613      	mov	r3, r2
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	440b      	add	r3, r1
 800b52a:	331c      	adds	r3, #28
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b530:	7bfa      	ldrb	r2, [r7, #15]
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	4613      	mov	r3, r2
 800b536:	00db      	lsls	r3, r3, #3
 800b538:	4413      	add	r3, r2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	440b      	add	r3, r1
 800b53e:	3320      	adds	r3, #32
 800b540:	2200      	movs	r2, #0
 800b542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b544:	7bfa      	ldrb	r2, [r7, #15]
 800b546:	6879      	ldr	r1, [r7, #4]
 800b548:	4613      	mov	r3, r2
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	4413      	add	r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	440b      	add	r3, r1
 800b552:	3324      	adds	r3, #36	@ 0x24
 800b554:	2200      	movs	r2, #0
 800b556:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	3301      	adds	r3, #1
 800b55c:	73fb      	strb	r3, [r7, #15]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	791b      	ldrb	r3, [r3, #4]
 800b562:	7bfa      	ldrb	r2, [r7, #15]
 800b564:	429a      	cmp	r2, r3
 800b566:	d3af      	bcc.n	800b4c8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b568:	2300      	movs	r3, #0
 800b56a:	73fb      	strb	r3, [r7, #15]
 800b56c:	e044      	b.n	800b5f8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b56e:	7bfa      	ldrb	r2, [r7, #15]
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	4613      	mov	r3, r2
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b580:	2200      	movs	r2, #0
 800b582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b584:	7bfa      	ldrb	r2, [r7, #15]
 800b586:	6879      	ldr	r1, [r7, #4]
 800b588:	4613      	mov	r3, r2
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	4413      	add	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	440b      	add	r3, r1
 800b592:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b596:	7bfa      	ldrb	r2, [r7, #15]
 800b598:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b59a:	7bfa      	ldrb	r2, [r7, #15]
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	00db      	lsls	r3, r3, #3
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b5b0:	7bfa      	ldrb	r2, [r7, #15]
 800b5b2:	6879      	ldr	r1, [r7, #4]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	4413      	add	r3, r2
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	440b      	add	r3, r1
 800b5be:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b5c6:	7bfa      	ldrb	r2, [r7, #15]
 800b5c8:	6879      	ldr	r1, [r7, #4]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	00db      	lsls	r3, r3, #3
 800b5ce:	4413      	add	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	440b      	add	r3, r1
 800b5d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b5d8:	2200      	movs	r2, #0
 800b5da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b5dc:	7bfa      	ldrb	r2, [r7, #15]
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	4413      	add	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	440b      	add	r3, r1
 800b5ea:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	73fb      	strb	r3, [r7, #15]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	791b      	ldrb	r3, [r3, #4]
 800b5fc:	7bfa      	ldrb	r2, [r7, #15]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d3b5      	bcc.n	800b56e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6818      	ldr	r0, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	7c1a      	ldrb	r2, [r3, #16]
 800b60a:	f88d 2000 	strb.w	r2, [sp]
 800b60e:	3304      	adds	r3, #4
 800b610:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b612:	f007 fd49 	bl	80130a8 <USB_DevInit>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d005      	beq.n	800b628 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2202      	movs	r2, #2
 800b620:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	e013      	b.n	800b650 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	7b1b      	ldrb	r3, [r3, #12]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d102      	bne.n	800b644 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 f96e 	bl	800c920 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4618      	mov	r0, r3
 800b64a:	f008 fd8c 	bl	8014166 <USB_DevDisconnect>

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d101      	bne.n	800b674 <HAL_PCD_Start+0x1c>
 800b670:	2302      	movs	r3, #2
 800b672:	e022      	b.n	800b6ba <HAL_PCD_Start+0x62>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b684:	2b00      	cmp	r3, #0
 800b686:	d009      	beq.n	800b69c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d105      	bne.n	800b69c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b694:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f007 fc93 	bl	8012fcc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f008 fd3a 	bl	8014124 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b6c2:	b590      	push	{r4, r7, lr}
 800b6c4:	b08d      	sub	sp, #52	@ 0x34
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f008 fdf8 	bl	80142ce <USB_GetMode>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f040 84b9 	bne.w	800c058 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f008 fd5c 	bl	80141a8 <USB_ReadInterrupts>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f000 84af 	beq.w	800c056 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	0a1b      	lsrs	r3, r3, #8
 800b702:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4618      	mov	r0, r3
 800b712:	f008 fd49 	bl	80141a8 <USB_ReadInterrupts>
 800b716:	4603      	mov	r3, r0
 800b718:	f003 0302 	and.w	r3, r3, #2
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d107      	bne.n	800b730 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	695a      	ldr	r2, [r3, #20]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f002 0202 	and.w	r2, r2, #2
 800b72e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4618      	mov	r0, r3
 800b736:	f008 fd37 	bl	80141a8 <USB_ReadInterrupts>
 800b73a:	4603      	mov	r3, r0
 800b73c:	f003 0310 	and.w	r3, r3, #16
 800b740:	2b10      	cmp	r3, #16
 800b742:	d161      	bne.n	800b808 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	699a      	ldr	r2, [r3, #24]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f022 0210 	bic.w	r2, r2, #16
 800b752:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	6a1b      	ldr	r3, [r3, #32]
 800b758:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	f003 020f 	and.w	r2, r3, #15
 800b760:	4613      	mov	r3, r2
 800b762:	00db      	lsls	r3, r3, #3
 800b764:	4413      	add	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	4413      	add	r3, r2
 800b770:	3304      	adds	r3, #4
 800b772:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b77a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b77e:	d124      	bne.n	800b7ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b780:	69ba      	ldr	r2, [r7, #24]
 800b782:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b786:	4013      	ands	r3, r2
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d035      	beq.n	800b7f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	091b      	lsrs	r3, r3, #4
 800b794:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	461a      	mov	r2, r3
 800b79e:	6a38      	ldr	r0, [r7, #32]
 800b7a0:	f008 fb6e 	bl	8013e80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	68da      	ldr	r2, [r3, #12]
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	091b      	lsrs	r3, r3, #4
 800b7ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7b0:	441a      	add	r2, r3
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	695a      	ldr	r2, [r3, #20]
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	091b      	lsrs	r3, r3, #4
 800b7be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7c2:	441a      	add	r2, r3
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	615a      	str	r2, [r3, #20]
 800b7c8:	e016      	b.n	800b7f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b7d0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b7d4:	d110      	bne.n	800b7f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b7dc:	2208      	movs	r2, #8
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6a38      	ldr	r0, [r7, #32]
 800b7e2:	f008 fb4d 	bl	8013e80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	695a      	ldr	r2, [r3, #20]
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	091b      	lsrs	r3, r3, #4
 800b7ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7f2:	441a      	add	r2, r3
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	699a      	ldr	r2, [r3, #24]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f042 0210 	orr.w	r2, r2, #16
 800b806:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f008 fccb 	bl	80141a8 <USB_ReadInterrupts>
 800b812:	4603      	mov	r3, r0
 800b814:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b818:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b81c:	f040 80a7 	bne.w	800b96e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4618      	mov	r0, r3
 800b82a:	f008 fcd0 	bl	80141ce <USB_ReadDevAllOutEpInterrupt>
 800b82e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b830:	e099      	b.n	800b966 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 808e 	beq.w	800b95a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b844:	b2d2      	uxtb	r2, r2
 800b846:	4611      	mov	r1, r2
 800b848:	4618      	mov	r0, r3
 800b84a:	f008 fcf4 	bl	8014236 <USB_ReadDevOutEPInterrupt>
 800b84e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	f003 0301 	and.w	r3, r3, #1
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00c      	beq.n	800b874 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	015a      	lsls	r2, r3, #5
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	4413      	add	r3, r2
 800b862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b866:	461a      	mov	r2, r3
 800b868:	2301      	movs	r3, #1
 800b86a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b86c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fed0 	bl	800c614 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	f003 0308 	and.w	r3, r3, #8
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00c      	beq.n	800b898 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b880:	015a      	lsls	r2, r3, #5
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	4413      	add	r3, r2
 800b886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b88a:	461a      	mov	r2, r3
 800b88c:	2308      	movs	r3, #8
 800b88e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b890:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 ffa6 	bl	800c7e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	f003 0310 	and.w	r3, r3, #16
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d008      	beq.n	800b8b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a4:	015a      	lsls	r2, r3, #5
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	2310      	movs	r3, #16
 800b8b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	f003 0302 	and.w	r3, r3, #2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d030      	beq.n	800b920 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8c6:	2b80      	cmp	r3, #128	@ 0x80
 800b8c8:	d109      	bne.n	800b8de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	69fa      	ldr	r2, [r7, #28]
 800b8d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b8dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b8de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	78db      	ldrb	r3, [r3, #3]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d108      	bne.n	800b90e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2200      	movs	r2, #0
 800b900:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b904:	b2db      	uxtb	r3, r3
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f00b f8dd 	bl	8016ac8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b910:	015a      	lsls	r2, r3, #5
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	4413      	add	r3, r2
 800b916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b91a:	461a      	mov	r2, r3
 800b91c:	2302      	movs	r3, #2
 800b91e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f003 0320 	and.w	r3, r3, #32
 800b926:	2b00      	cmp	r3, #0
 800b928:	d008      	beq.n	800b93c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b936:	461a      	mov	r2, r3
 800b938:	2320      	movs	r3, #32
 800b93a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b942:	2b00      	cmp	r3, #0
 800b944:	d009      	beq.n	800b95a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b948:	015a      	lsls	r2, r3, #5
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	4413      	add	r3, r2
 800b94e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b952:	461a      	mov	r2, r3
 800b954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b958:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95c:	3301      	adds	r3, #1
 800b95e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b962:	085b      	lsrs	r3, r3, #1
 800b964:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f47f af62 	bne.w	800b832 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4618      	mov	r0, r3
 800b974:	f008 fc18 	bl	80141a8 <USB_ReadInterrupts>
 800b978:	4603      	mov	r3, r0
 800b97a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b97e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b982:	f040 80db 	bne.w	800bb3c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f008 fc39 	bl	8014202 <USB_ReadDevAllInEpInterrupt>
 800b990:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b996:	e0cd      	b.n	800bb34 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 80c2 	beq.w	800bb28 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9aa:	b2d2      	uxtb	r2, r2
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f008 fc5f 	bl	8014272 <USB_ReadDevInEPInterrupt>
 800b9b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	f003 0301 	and.w	r3, r3, #1
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d057      	beq.n	800ba70 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c2:	f003 030f 	and.w	r3, r3, #15
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	43db      	mvns	r3, r3
 800b9da:	69f9      	ldr	r1, [r7, #28]
 800b9dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	799b      	ldrb	r3, [r3, #6]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d132      	bne.n	800ba64 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b9fe:	6879      	ldr	r1, [r7, #4]
 800ba00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba02:	4613      	mov	r3, r2
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	4413      	add	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	440b      	add	r3, r1
 800ba0c:	3320      	adds	r3, #32
 800ba0e:	6819      	ldr	r1, [r3, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba14:	4613      	mov	r3, r2
 800ba16:	00db      	lsls	r3, r3, #3
 800ba18:	4413      	add	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4403      	add	r3, r0
 800ba1e:	331c      	adds	r3, #28
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4419      	add	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba28:	4613      	mov	r3, r2
 800ba2a:	00db      	lsls	r3, r3, #3
 800ba2c:	4413      	add	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4403      	add	r3, r0
 800ba32:	3320      	adds	r3, #32
 800ba34:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800ba36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d113      	bne.n	800ba64 <HAL_PCD_IRQHandler+0x3a2>
 800ba3c:	6879      	ldr	r1, [r7, #4]
 800ba3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba40:	4613      	mov	r3, r2
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	4413      	add	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	440b      	add	r3, r1
 800ba4a:	3324      	adds	r3, #36	@ 0x24
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d108      	bne.n	800ba64 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6818      	ldr	r0, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	2101      	movs	r1, #1
 800ba60:	f008 fc68 	bl	8014334 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ba64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f00a ffa7 	bl	80169be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	f003 0308 	and.w	r3, r3, #8
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d008      	beq.n	800ba8c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7c:	015a      	lsls	r2, r3, #5
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	4413      	add	r3, r2
 800ba82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba86:	461a      	mov	r2, r3
 800ba88:	2308      	movs	r3, #8
 800ba8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	f003 0310 	and.w	r3, r3, #16
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d008      	beq.n	800baa8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800ba96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baa2:	461a      	mov	r2, r3
 800baa4:	2310      	movs	r3, #16
 800baa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d008      	beq.n	800bac4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab4:	015a      	lsls	r2, r3, #5
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	4413      	add	r3, r2
 800baba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800babe:	461a      	mov	r2, r3
 800bac0:	2340      	movs	r3, #64	@ 0x40
 800bac2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	f003 0302 	and.w	r3, r3, #2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d023      	beq.n	800bb16 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800bace:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bad0:	6a38      	ldr	r0, [r7, #32]
 800bad2:	f007 fc47 	bl	8013364 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800bad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bad8:	4613      	mov	r3, r2
 800bada:	00db      	lsls	r3, r3, #3
 800badc:	4413      	add	r3, r2
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	3310      	adds	r3, #16
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	4413      	add	r3, r2
 800bae6:	3304      	adds	r3, #4
 800bae8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	78db      	ldrb	r3, [r3, #3]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d108      	bne.n	800bb04 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	2200      	movs	r2, #0
 800baf6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800baf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	4619      	mov	r1, r3
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f00a fff4 	bl	8016aec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb06:	015a      	lsls	r2, r3, #5
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb10:	461a      	mov	r2, r3
 800bb12:	2302      	movs	r3, #2
 800bb14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d003      	beq.n	800bb28 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800bb20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fcea 	bl	800c4fc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800bb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800bb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb30:	085b      	lsrs	r3, r3, #1
 800bb32:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800bb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f47f af2e 	bne.w	800b998 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f008 fb31 	bl	80141a8 <USB_ReadInterrupts>
 800bb46:	4603      	mov	r3, r0
 800bb48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb50:	d122      	bne.n	800bb98 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	69fa      	ldr	r2, [r7, #28]
 800bb5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb60:	f023 0301 	bic.w	r3, r3, #1
 800bb64:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d108      	bne.n	800bb82 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bb78:	2100      	movs	r1, #0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fef4 	bl	800c968 <HAL_PCDEx_LPM_Callback>
 800bb80:	e002      	b.n	800bb88 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f00a ff92 	bl	8016aac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	695a      	ldr	r2, [r3, #20]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800bb96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f008 fb03 	bl	80141a8 <USB_ReadInterrupts>
 800bba2:	4603      	mov	r3, r0
 800bba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbac:	d112      	bne.n	800bbd4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	f003 0301 	and.w	r3, r3, #1
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d102      	bne.n	800bbc4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f00a ff4e 	bl	8016a60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	695a      	ldr	r2, [r3, #20]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800bbd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f008 fae5 	bl	80141a8 <USB_ReadInterrupts>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbe4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbe8:	d121      	bne.n	800bc2e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	695a      	ldr	r2, [r3, #20]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800bbf8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d111      	bne.n	800bc28 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc12:	089b      	lsrs	r3, r3, #2
 800bc14:	f003 020f 	and.w	r2, r3, #15
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800bc1e:	2101      	movs	r1, #1
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fea1 	bl	800c968 <HAL_PCDEx_LPM_Callback>
 800bc26:	e002      	b.n	800bc2e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f00a ff19 	bl	8016a60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f008 fab8 	bl	80141a8 <USB_ReadInterrupts>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bc3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc42:	f040 80b7 	bne.w	800bdb4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	69fa      	ldr	r2, [r7, #28]
 800bc50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc54:	f023 0301 	bic.w	r3, r3, #1
 800bc58:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2110      	movs	r1, #16
 800bc60:	4618      	mov	r0, r3
 800bc62:	f007 fb7f 	bl	8013364 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc66:	2300      	movs	r3, #0
 800bc68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc6a:	e046      	b.n	800bcfa <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6e:	015a      	lsls	r2, r3, #5
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	4413      	add	r3, r2
 800bc74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc78:	461a      	mov	r2, r3
 800bc7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc7e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc82:	015a      	lsls	r2, r3, #5
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	4413      	add	r3, r2
 800bc88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc90:	0151      	lsls	r1, r2, #5
 800bc92:	69fa      	ldr	r2, [r7, #28]
 800bc94:	440a      	add	r2, r1
 800bc96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca2:	015a      	lsls	r2, r3, #5
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	4413      	add	r3, r2
 800bca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcac:	461a      	mov	r2, r3
 800bcae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bcb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb6:	015a      	lsls	r2, r3, #5
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcc4:	0151      	lsls	r1, r2, #5
 800bcc6:	69fa      	ldr	r2, [r7, #28]
 800bcc8:	440a      	add	r2, r1
 800bcca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bcd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bce4:	0151      	lsls	r1, r2, #5
 800bce6:	69fa      	ldr	r2, [r7, #28]
 800bce8:	440a      	add	r2, r1
 800bcea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bcf2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	791b      	ldrb	r3, [r3, #4]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d3b2      	bcc.n	800bc6c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd0c:	69db      	ldr	r3, [r3, #28]
 800bd0e:	69fa      	ldr	r2, [r7, #28]
 800bd10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd14:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bd18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	7bdb      	ldrb	r3, [r3, #15]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d016      	beq.n	800bd50 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd2c:	69fa      	ldr	r2, [r7, #28]
 800bd2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd32:	f043 030b 	orr.w	r3, r3, #11
 800bd36:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd42:	69fa      	ldr	r2, [r7, #28]
 800bd44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd48:	f043 030b 	orr.w	r3, r3, #11
 800bd4c:	6453      	str	r3, [r2, #68]	@ 0x44
 800bd4e:	e015      	b.n	800bd7c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd56:	695a      	ldr	r2, [r3, #20]
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd5e:	4619      	mov	r1, r3
 800bd60:	f242 032b 	movw	r3, #8235	@ 0x202b
 800bd64:	4313      	orrs	r3, r2
 800bd66:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	69fa      	ldr	r2, [r7, #28]
 800bd72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd76:	f043 030b 	orr.w	r3, r3, #11
 800bd7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	69fa      	ldr	r2, [r7, #28]
 800bd86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bd8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6818      	ldr	r0, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f008 fac8 	bl	8014334 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	695a      	ldr	r2, [r3, #20]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800bdb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f008 f9f5 	bl	80141a8 <USB_ReadInterrupts>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bdc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdc8:	d123      	bne.n	800be12 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f008 fa8c 	bl	80142ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f007 fb3c 	bl	8013456 <USB_GetDevSpeed>
 800bdde:	4603      	mov	r3, r0
 800bde0:	461a      	mov	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681c      	ldr	r4, [r3, #0]
 800bdea:	f001 fd9d 	bl	800d928 <HAL_RCC_GetHCLKFreq>
 800bdee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f007 f846 	bl	8012e88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f00a fe06 	bl	8016a0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	695a      	ldr	r2, [r3, #20]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800be10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4618      	mov	r0, r3
 800be18:	f008 f9c6 	bl	80141a8 <USB_ReadInterrupts>
 800be1c:	4603      	mov	r3, r0
 800be1e:	f003 0308 	and.w	r3, r3, #8
 800be22:	2b08      	cmp	r3, #8
 800be24:	d10a      	bne.n	800be3c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f00a fde3 	bl	80169f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	695a      	ldr	r2, [r3, #20]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f002 0208 	and.w	r2, r2, #8
 800be3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4618      	mov	r0, r3
 800be42:	f008 f9b1 	bl	80141a8 <USB_ReadInterrupts>
 800be46:	4603      	mov	r3, r0
 800be48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be4c:	2b80      	cmp	r3, #128	@ 0x80
 800be4e:	d123      	bne.n	800be98 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be58:	6a3b      	ldr	r3, [r7, #32]
 800be5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be5c:	2301      	movs	r3, #1
 800be5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800be60:	e014      	b.n	800be8c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be66:	4613      	mov	r3, r2
 800be68:	00db      	lsls	r3, r3, #3
 800be6a:	4413      	add	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	440b      	add	r3, r1
 800be70:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d105      	bne.n	800be86 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800be7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 fb0a 	bl	800c49a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be88:	3301      	adds	r3, #1
 800be8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	791b      	ldrb	r3, [r3, #4]
 800be90:	461a      	mov	r2, r3
 800be92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be94:	4293      	cmp	r3, r2
 800be96:	d3e4      	bcc.n	800be62 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f008 f983 	bl	80141a8 <USB_ReadInterrupts>
 800bea2:	4603      	mov	r3, r0
 800bea4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bea8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800beac:	d13c      	bne.n	800bf28 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800beae:	2301      	movs	r3, #1
 800beb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800beb2:	e02b      	b.n	800bf0c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800beb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb6:	015a      	lsls	r2, r3, #5
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	4413      	add	r3, r2
 800bebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bec4:	6879      	ldr	r1, [r7, #4]
 800bec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bec8:	4613      	mov	r3, r2
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	4413      	add	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	440b      	add	r3, r1
 800bed2:	3318      	adds	r3, #24
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d115      	bne.n	800bf06 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800beda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bedc:	2b00      	cmp	r3, #0
 800bede:	da12      	bge.n	800bf06 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bee0:	6879      	ldr	r1, [r7, #4]
 800bee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bee4:	4613      	mov	r3, r2
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	4413      	add	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	440b      	add	r3, r1
 800beee:	3317      	adds	r3, #23
 800bef0:	2201      	movs	r2, #1
 800bef2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800befc:	b2db      	uxtb	r3, r3
 800befe:	4619      	mov	r1, r3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 faca 	bl	800c49a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf08:	3301      	adds	r3, #1
 800bf0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	791b      	ldrb	r3, [r3, #4]
 800bf10:	461a      	mov	r2, r3
 800bf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d3cd      	bcc.n	800beb4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	695a      	ldr	r2, [r3, #20]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bf26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f008 f93b 	bl	80141a8 <USB_ReadInterrupts>
 800bf32:	4603      	mov	r3, r0
 800bf34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bf38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf3c:	d156      	bne.n	800bfec <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf3e:	2301      	movs	r3, #1
 800bf40:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf42:	e045      	b.n	800bfd0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf46:	015a      	lsls	r2, r3, #5
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf54:	6879      	ldr	r1, [r7, #4]
 800bf56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf58:	4613      	mov	r3, r2
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	440b      	add	r3, r1
 800bf62:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d12e      	bne.n	800bfca <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bf6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	da2b      	bge.n	800bfca <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	0c1a      	lsrs	r2, r3, #16
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800bf7c:	4053      	eors	r3, r2
 800bf7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d121      	bne.n	800bfca <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	00db      	lsls	r3, r3, #3
 800bf8e:	4413      	add	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	440b      	add	r3, r1
 800bf94:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bf98:	2201      	movs	r2, #1
 800bf9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bf9c:	6a3b      	ldr	r3, [r7, #32]
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	695b      	ldr	r3, [r3, #20]
 800bfac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d10a      	bne.n	800bfca <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	69fa      	ldr	r2, [r7, #28]
 800bfbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bfc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bfc6:	6053      	str	r3, [r2, #4]
            break;
 800bfc8:	e008      	b.n	800bfdc <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	3301      	adds	r3, #1
 800bfce:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	791b      	ldrb	r3, [r3, #4]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d3b3      	bcc.n	800bf44 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	695a      	ldr	r2, [r3, #20]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800bfea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f008 f8d9 	bl	80141a8 <USB_ReadInterrupts>
 800bff6:	4603      	mov	r3, r0
 800bff8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c000:	d10a      	bne.n	800c018 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f00a fd84 	bl	8016b10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	695a      	ldr	r2, [r3, #20]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f008 f8c3 	bl	80141a8 <USB_ReadInterrupts>
 800c022:	4603      	mov	r3, r0
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	2b04      	cmp	r3, #4
 800c02a:	d115      	bne.n	800c058 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	f003 0304 	and.w	r3, r3, #4
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d002      	beq.n	800c044 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f00a fd74 	bl	8016b2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6859      	ldr	r1, [r3, #4]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	69ba      	ldr	r2, [r7, #24]
 800c050:	430a      	orrs	r2, r1
 800c052:	605a      	str	r2, [r3, #4]
 800c054:	e000      	b.n	800c058 <HAL_PCD_IRQHandler+0x996>
      return;
 800c056:	bf00      	nop
    }
  }
}
 800c058:	3734      	adds	r7, #52	@ 0x34
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd90      	pop	{r4, r7, pc}

0800c05e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b082      	sub	sp, #8
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	460b      	mov	r3, r1
 800c068:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c070:	2b01      	cmp	r3, #1
 800c072:	d101      	bne.n	800c078 <HAL_PCD_SetAddress+0x1a>
 800c074:	2302      	movs	r3, #2
 800c076:	e012      	b.n	800c09e <HAL_PCD_SetAddress+0x40>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	78fa      	ldrb	r2, [r7, #3]
 800c084:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	78fa      	ldrb	r2, [r7, #3]
 800c08c:	4611      	mov	r1, r2
 800c08e:	4618      	mov	r0, r3
 800c090:	f008 f822 	bl	80140d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	4608      	mov	r0, r1
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	70fb      	strb	r3, [r7, #3]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	803b      	strh	r3, [r7, #0]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c0c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	da0f      	bge.n	800c0ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c0cc:	78fb      	ldrb	r3, [r7, #3]
 800c0ce:	f003 020f 	and.w	r2, r3, #15
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	00db      	lsls	r3, r3, #3
 800c0d6:	4413      	add	r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	3310      	adds	r3, #16
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	4413      	add	r3, r2
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	705a      	strb	r2, [r3, #1]
 800c0ea:	e00f      	b.n	800c10c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c0ec:	78fb      	ldrb	r3, [r7, #3]
 800c0ee:	f003 020f 	and.w	r2, r3, #15
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	4413      	add	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	4413      	add	r3, r2
 800c102:	3304      	adds	r3, #4
 800c104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	f003 030f 	and.w	r3, r3, #15
 800c112:	b2da      	uxtb	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c118:	883b      	ldrh	r3, [r7, #0]
 800c11a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	78ba      	ldrb	r2, [r7, #2]
 800c126:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	785b      	ldrb	r3, [r3, #1]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d004      	beq.n	800c13a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	461a      	mov	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c13a:	78bb      	ldrb	r3, [r7, #2]
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d102      	bne.n	800c146 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d101      	bne.n	800c154 <HAL_PCD_EP_Open+0xae>
 800c150:	2302      	movs	r3, #2
 800c152:	e00e      	b.n	800c172 <HAL_PCD_EP_Open+0xcc>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68f9      	ldr	r1, [r7, #12]
 800c162:	4618      	mov	r0, r3
 800c164:	f007 f99c 	bl	80134a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c170:	7afb      	ldrb	r3, [r7, #11]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b084      	sub	sp, #16
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	460b      	mov	r3, r1
 800c184:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	da0f      	bge.n	800c1ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c18e:	78fb      	ldrb	r3, [r7, #3]
 800c190:	f003 020f 	and.w	r2, r3, #15
 800c194:	4613      	mov	r3, r2
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	4413      	add	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	3310      	adds	r3, #16
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	705a      	strb	r2, [r3, #1]
 800c1ac:	e00f      	b.n	800c1ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c1ae:	78fb      	ldrb	r3, [r7, #3]
 800c1b0:	f003 020f 	and.w	r2, r3, #15
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	4413      	add	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c1ce:	78fb      	ldrb	r3, [r7, #3]
 800c1d0:	f003 030f 	and.w	r3, r3, #15
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d101      	bne.n	800c1e8 <HAL_PCD_EP_Close+0x6e>
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	e00e      	b.n	800c206 <HAL_PCD_EP_Close+0x8c>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68f9      	ldr	r1, [r7, #12]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f007 f9da 	bl	80135b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b086      	sub	sp, #24
 800c212:	af00      	add	r7, sp, #0
 800c214:	60f8      	str	r0, [r7, #12]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
 800c21a:	460b      	mov	r3, r1
 800c21c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c21e:	7afb      	ldrb	r3, [r7, #11]
 800c220:	f003 020f 	and.w	r2, r3, #15
 800c224:	4613      	mov	r3, r2
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	4413      	add	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	4413      	add	r3, r2
 800c234:	3304      	adds	r3, #4
 800c236:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	2200      	movs	r2, #0
 800c248:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	2200      	movs	r2, #0
 800c24e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c250:	7afb      	ldrb	r3, [r7, #11]
 800c252:	f003 030f 	and.w	r3, r3, #15
 800c256:	b2da      	uxtb	r2, r3
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	799b      	ldrb	r3, [r3, #6]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d102      	bne.n	800c26a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6818      	ldr	r0, [r3, #0]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	799b      	ldrb	r3, [r3, #6]
 800c272:	461a      	mov	r2, r3
 800c274:	6979      	ldr	r1, [r7, #20]
 800c276:	f007 fa77 	bl	8013768 <USB_EPStartXfer>

  return HAL_OK;
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	f003 020f 	and.w	r2, r3, #15
 800c296:	6879      	ldr	r1, [r7, #4]
 800c298:	4613      	mov	r3, r2
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	4413      	add	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	440b      	add	r3, r1
 800c2a2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c2a6:	681b      	ldr	r3, [r3, #0]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	607a      	str	r2, [r7, #4]
 800c2be:	603b      	str	r3, [r7, #0]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c2c4:	7afb      	ldrb	r3, [r7, #11]
 800c2c6:	f003 020f 	and.w	r2, r3, #15
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	00db      	lsls	r3, r3, #3
 800c2ce:	4413      	add	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	3310      	adds	r3, #16
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	3304      	adds	r3, #4
 800c2da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	f003 030f 	and.w	r3, r3, #15
 800c2fa:	b2da      	uxtb	r2, r3
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	799b      	ldrb	r3, [r3, #6]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d102      	bne.n	800c30e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6818      	ldr	r0, [r3, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	799b      	ldrb	r3, [r3, #6]
 800c316:	461a      	mov	r2, r3
 800c318:	6979      	ldr	r1, [r7, #20]
 800c31a:	f007 fa25 	bl	8013768 <USB_EPStartXfer>

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	460b      	mov	r3, r1
 800c332:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	f003 030f 	and.w	r3, r3, #15
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	7912      	ldrb	r2, [r2, #4]
 800c33e:	4293      	cmp	r3, r2
 800c340:	d901      	bls.n	800c346 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	e04f      	b.n	800c3e6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	da0f      	bge.n	800c36e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c34e:	78fb      	ldrb	r3, [r7, #3]
 800c350:	f003 020f 	and.w	r2, r3, #15
 800c354:	4613      	mov	r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	4413      	add	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	3310      	adds	r3, #16
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	4413      	add	r3, r2
 800c362:	3304      	adds	r3, #4
 800c364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2201      	movs	r2, #1
 800c36a:	705a      	strb	r2, [r3, #1]
 800c36c:	e00d      	b.n	800c38a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c36e:	78fa      	ldrb	r2, [r7, #3]
 800c370:	4613      	mov	r3, r2
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	4413      	add	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	4413      	add	r3, r2
 800c380:	3304      	adds	r3, #4
 800c382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2200      	movs	r2, #0
 800c388:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2201      	movs	r2, #1
 800c38e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c390:	78fb      	ldrb	r3, [r7, #3]
 800c392:	f003 030f 	and.w	r3, r3, #15
 800c396:	b2da      	uxtb	r2, r3
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d101      	bne.n	800c3aa <HAL_PCD_EP_SetStall+0x82>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e01d      	b.n	800c3e6 <HAL_PCD_EP_SetStall+0xbe>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68f9      	ldr	r1, [r7, #12]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f007 fdb9 	bl	8013f30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c3be:	78fb      	ldrb	r3, [r7, #3]
 800c3c0:	f003 030f 	and.w	r3, r3, #15
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d109      	bne.n	800c3dc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6818      	ldr	r0, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	7999      	ldrb	r1, [r3, #6]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f007 ffac 	bl	8014334 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b084      	sub	sp, #16
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c3fa:	78fb      	ldrb	r3, [r7, #3]
 800c3fc:	f003 030f 	and.w	r3, r3, #15
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	7912      	ldrb	r2, [r2, #4]
 800c404:	4293      	cmp	r3, r2
 800c406:	d901      	bls.n	800c40c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	e042      	b.n	800c492 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c40c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c410:	2b00      	cmp	r3, #0
 800c412:	da0f      	bge.n	800c434 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	f003 020f 	and.w	r2, r3, #15
 800c41a:	4613      	mov	r3, r2
 800c41c:	00db      	lsls	r3, r3, #3
 800c41e:	4413      	add	r3, r2
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	3310      	adds	r3, #16
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	4413      	add	r3, r2
 800c428:	3304      	adds	r3, #4
 800c42a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2201      	movs	r2, #1
 800c430:	705a      	strb	r2, [r3, #1]
 800c432:	e00f      	b.n	800c454 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c434:	78fb      	ldrb	r3, [r7, #3]
 800c436:	f003 020f 	and.w	r2, r3, #15
 800c43a:	4613      	mov	r3, r2
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	4413      	add	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	4413      	add	r3, r2
 800c44a:	3304      	adds	r3, #4
 800c44c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c45a:	78fb      	ldrb	r3, [r7, #3]
 800c45c:	f003 030f 	and.w	r3, r3, #15
 800c460:	b2da      	uxtb	r2, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d101      	bne.n	800c474 <HAL_PCD_EP_ClrStall+0x86>
 800c470:	2302      	movs	r3, #2
 800c472:	e00e      	b.n	800c492 <HAL_PCD_EP_ClrStall+0xa4>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68f9      	ldr	r1, [r7, #12]
 800c482:	4618      	mov	r0, r3
 800c484:	f007 fdc2 	bl	801400c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b084      	sub	sp, #16
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c4a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	da0c      	bge.n	800c4c8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4ae:	78fb      	ldrb	r3, [r7, #3]
 800c4b0:	f003 020f 	and.w	r2, r3, #15
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	00db      	lsls	r3, r3, #3
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	3310      	adds	r3, #16
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	60fb      	str	r3, [r7, #12]
 800c4c6:	e00c      	b.n	800c4e2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c4c8:	78fb      	ldrb	r3, [r7, #3]
 800c4ca:	f003 020f 	and.w	r2, r3, #15
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	00db      	lsls	r3, r3, #3
 800c4d2:	4413      	add	r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	4413      	add	r3, r2
 800c4de:	3304      	adds	r3, #4
 800c4e0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	68f9      	ldr	r1, [r7, #12]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f007 fbe1 	bl	8013cb0 <USB_EPStopXfer>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c4f2:	7afb      	ldrb	r3, [r7, #11]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08a      	sub	sp, #40	@ 0x28
 800c500:	af02      	add	r7, sp, #8
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	4613      	mov	r3, r2
 800c514:	00db      	lsls	r3, r3, #3
 800c516:	4413      	add	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	3310      	adds	r3, #16
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	4413      	add	r3, r2
 800c520:	3304      	adds	r3, #4
 800c522:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	695a      	ldr	r2, [r3, #20]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d901      	bls.n	800c534 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	e06b      	b.n	800c60c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	691a      	ldr	r2, [r3, #16]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	69fa      	ldr	r2, [r7, #28]
 800c546:	429a      	cmp	r2, r3
 800c548:	d902      	bls.n	800c550 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	3303      	adds	r3, #3
 800c554:	089b      	lsrs	r3, r3, #2
 800c556:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c558:	e02a      	b.n	800c5b0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	691a      	ldr	r2, [r3, #16]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	695b      	ldr	r3, [r3, #20]
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	69fa      	ldr	r2, [r7, #28]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d902      	bls.n	800c576 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	3303      	adds	r3, #3
 800c57a:	089b      	lsrs	r3, r3, #2
 800c57c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	68d9      	ldr	r1, [r3, #12]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	b2da      	uxtb	r2, r3
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	4603      	mov	r3, r0
 800c592:	6978      	ldr	r0, [r7, #20]
 800c594:	f007 fc36 	bl	8013e04 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	68da      	ldr	r2, [r3, #12]
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	441a      	add	r2, r3
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	695a      	ldr	r2, [r3, #20]
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	441a      	add	r2, r3
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d809      	bhi.n	800c5da <PCD_WriteEmptyTxFifo+0xde>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	695a      	ldr	r2, [r3, #20]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d203      	bcs.n	800c5da <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1bf      	bne.n	800c55a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	691a      	ldr	r2, [r3, #16]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d811      	bhi.n	800c60a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	f003 030f 	and.w	r3, r3, #15
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	43db      	mvns	r3, r3
 800c600:	6939      	ldr	r1, [r7, #16]
 800c602:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c606:	4013      	ands	r3, r2
 800c608:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3720      	adds	r7, #32
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b088      	sub	sp, #32
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	333c      	adds	r3, #60	@ 0x3c
 800c62c:	3304      	adds	r3, #4
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	015a      	lsls	r2, r3, #5
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	4413      	add	r3, r2
 800c63a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	799b      	ldrb	r3, [r3, #6]
 800c646:	2b01      	cmp	r3, #1
 800c648:	d17b      	bne.n	800c742 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f003 0308 	and.w	r3, r3, #8
 800c650:	2b00      	cmp	r3, #0
 800c652:	d015      	beq.n	800c680 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	4a61      	ldr	r2, [pc, #388]	@ (800c7dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	f240 80b9 	bls.w	800c7d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 80b3 	beq.w	800c7d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	015a      	lsls	r2, r3, #5
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	4413      	add	r3, r2
 800c672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c676:	461a      	mov	r2, r3
 800c678:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c67c:	6093      	str	r3, [r2, #8]
 800c67e:	e0a7      	b.n	800c7d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f003 0320 	and.w	r3, r3, #32
 800c686:	2b00      	cmp	r3, #0
 800c688:	d009      	beq.n	800c69e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	015a      	lsls	r2, r3, #5
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	4413      	add	r3, r2
 800c692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c696:	461a      	mov	r2, r3
 800c698:	2320      	movs	r3, #32
 800c69a:	6093      	str	r3, [r2, #8]
 800c69c:	e098      	b.n	800c7d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f040 8093 	bne.w	800c7d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	4a4b      	ldr	r2, [pc, #300]	@ (800c7dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d90f      	bls.n	800c6d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00a      	beq.n	800c6d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	015a      	lsls	r2, r3, #5
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6ce:	6093      	str	r3, [r2, #8]
 800c6d0:	e07e      	b.n	800c7d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	00db      	lsls	r3, r3, #3
 800c6d8:	4413      	add	r3, r2
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6a1a      	ldr	r2, [r3, #32]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	0159      	lsls	r1, r3, #5
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	440b      	add	r3, r1
 800c6f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6fe:	1ad2      	subs	r2, r2, r3
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d114      	bne.n	800c734 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d109      	bne.n	800c726 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6818      	ldr	r0, [r3, #0]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c71c:	461a      	mov	r2, r3
 800c71e:	2101      	movs	r1, #1
 800c720:	f007 fe08 	bl	8014334 <USB_EP0_OutStart>
 800c724:	e006      	b.n	800c734 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	68da      	ldr	r2, [r3, #12]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	441a      	add	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	b2db      	uxtb	r3, r3
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f00a f924 	bl	8016988 <HAL_PCD_DataOutStageCallback>
 800c740:	e046      	b.n	800c7d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	4a26      	ldr	r2, [pc, #152]	@ (800c7e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d124      	bne.n	800c794 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00a      	beq.n	800c76a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	015a      	lsls	r2, r3, #5
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c760:	461a      	mov	r2, r3
 800c762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c766:	6093      	str	r3, [r2, #8]
 800c768:	e032      	b.n	800c7d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	f003 0320 	and.w	r3, r3, #32
 800c770:	2b00      	cmp	r3, #0
 800c772:	d008      	beq.n	800c786 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	015a      	lsls	r2, r3, #5
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c780:	461a      	mov	r2, r3
 800c782:	2320      	movs	r3, #32
 800c784:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	4619      	mov	r1, r3
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f00a f8fb 	bl	8016988 <HAL_PCD_DataOutStageCallback>
 800c792:	e01d      	b.n	800c7d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d114      	bne.n	800c7c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c79a:	6879      	ldr	r1, [r7, #4]
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	4413      	add	r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	440b      	add	r3, r1
 800c7a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d108      	bne.n	800c7c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6818      	ldr	r0, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c7bc:	461a      	mov	r2, r3
 800c7be:	2100      	movs	r1, #0
 800c7c0:	f007 fdb8 	bl	8014334 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f00a f8dc 	bl	8016988 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3720      	adds	r7, #32
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	4f54300a 	.word	0x4f54300a
 800c7e0:	4f54310a 	.word	0x4f54310a

0800c7e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	333c      	adds	r3, #60	@ 0x3c
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	015a      	lsls	r2, r3, #5
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	4413      	add	r3, r2
 800c80a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	4a15      	ldr	r2, [pc, #84]	@ (800c86c <PCD_EP_OutSetupPacket_int+0x88>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d90e      	bls.n	800c838 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c820:	2b00      	cmp	r3, #0
 800c822:	d009      	beq.n	800c838 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	015a      	lsls	r2, r3, #5
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	4413      	add	r3, r2
 800c82c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c830:	461a      	mov	r2, r3
 800c832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c836:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f00a f893 	bl	8016964 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	4a0a      	ldr	r2, [pc, #40]	@ (800c86c <PCD_EP_OutSetupPacket_int+0x88>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d90c      	bls.n	800c860 <PCD_EP_OutSetupPacket_int+0x7c>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	799b      	ldrb	r3, [r3, #6]
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d108      	bne.n	800c860 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6818      	ldr	r0, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c858:	461a      	mov	r2, r3
 800c85a:	2101      	movs	r1, #1
 800c85c:	f007 fd6a 	bl	8014334 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	4f54300a 	.word	0x4f54300a

0800c870 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	460b      	mov	r3, r1
 800c87a:	70fb      	strb	r3, [r7, #3]
 800c87c:	4613      	mov	r3, r2
 800c87e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c886:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d107      	bne.n	800c89e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c88e:	883b      	ldrh	r3, [r7, #0]
 800c890:	0419      	lsls	r1, r3, #16
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	430a      	orrs	r2, r1
 800c89a:	629a      	str	r2, [r3, #40]	@ 0x28
 800c89c:	e028      	b.n	800c8f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a4:	0c1b      	lsrs	r3, r3, #16
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	73fb      	strb	r3, [r7, #15]
 800c8b0:	e00d      	b.n	800c8ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	7bfb      	ldrb	r3, [r7, #15]
 800c8b8:	3340      	adds	r3, #64	@ 0x40
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4413      	add	r3, r2
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	0c1b      	lsrs	r3, r3, #16
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	73fb      	strb	r3, [r7, #15]
 800c8ce:	7bfa      	ldrb	r2, [r7, #15]
 800c8d0:	78fb      	ldrb	r3, [r7, #3]
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d3ec      	bcc.n	800c8b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c8d8:	883b      	ldrh	r3, [r7, #0]
 800c8da:	0418      	lsls	r0, r3, #16
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6819      	ldr	r1, [r3, #0]
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	4302      	orrs	r2, r0
 800c8e8:	3340      	adds	r3, #64	@ 0x40
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	440b      	add	r3, r1
 800c8ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3714      	adds	r7, #20
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c8fe:	b480      	push	{r7}
 800c900:	b083      	sub	sp, #12
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	460b      	mov	r3, r1
 800c908:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	887a      	ldrh	r2, [r7, #2]
 800c910:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2201      	movs	r2, #1
 800c932:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	699b      	ldr	r3, [r3, #24]
 800c942:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c94e:	4b05      	ldr	r3, [pc, #20]	@ (800c964 <HAL_PCDEx_ActivateLPM+0x44>)
 800c950:	4313      	orrs	r3, r2
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr
 800c964:	10000003 	.word	0x10000003

0800c968 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	460b      	mov	r3, r1
 800c972:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c974:	bf00      	nop
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c988:	4b19      	ldr	r3, [pc, #100]	@ (800c9f0 <HAL_PWREx_ConfigSupply+0x70>)
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	f003 0304 	and.w	r3, r3, #4
 800c990:	2b04      	cmp	r3, #4
 800c992:	d00a      	beq.n	800c9aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c994:	4b16      	ldr	r3, [pc, #88]	@ (800c9f0 <HAL_PWREx_ConfigSupply+0x70>)
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	f003 0307 	and.w	r3, r3, #7
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d001      	beq.n	800c9a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e01f      	b.n	800c9e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e01d      	b.n	800c9e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c9aa:	4b11      	ldr	r3, [pc, #68]	@ (800c9f0 <HAL_PWREx_ConfigSupply+0x70>)
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	f023 0207 	bic.w	r2, r3, #7
 800c9b2:	490f      	ldr	r1, [pc, #60]	@ (800c9f0 <HAL_PWREx_ConfigSupply+0x70>)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c9ba:	f7f5 fd3f 	bl	800243c <HAL_GetTick>
 800c9be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c9c0:	e009      	b.n	800c9d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c9c2:	f7f5 fd3b 	bl	800243c <HAL_GetTick>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c9d0:	d901      	bls.n	800c9d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e007      	b.n	800c9e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c9d6:	4b06      	ldr	r3, [pc, #24]	@ (800c9f0 <HAL_PWREx_ConfigSupply+0x70>)
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c9de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9e2:	d1ee      	bne.n	800c9c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	58024800 	.word	0x58024800

0800c9f4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c9f8:	4b05      	ldr	r3, [pc, #20]	@ (800ca10 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	4a04      	ldr	r2, [pc, #16]	@ (800ca10 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c9fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ca02:	60d3      	str	r3, [r2, #12]
}
 800ca04:	bf00      	nop
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	58024800 	.word	0x58024800

0800ca14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b08c      	sub	sp, #48	@ 0x30
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d102      	bne.n	800ca28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	f000 bc48 	b.w	800d2b8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f003 0301 	and.w	r3, r3, #1
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f000 8088 	beq.w	800cb46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca36:	4b99      	ldr	r3, [pc, #612]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ca40:	4b96      	ldr	r3, [pc, #600]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800ca42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca44:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ca46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca48:	2b10      	cmp	r3, #16
 800ca4a:	d007      	beq.n	800ca5c <HAL_RCC_OscConfig+0x48>
 800ca4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca4e:	2b18      	cmp	r3, #24
 800ca50:	d111      	bne.n	800ca76 <HAL_RCC_OscConfig+0x62>
 800ca52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca54:	f003 0303 	and.w	r3, r3, #3
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d10c      	bne.n	800ca76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca5c:	4b8f      	ldr	r3, [pc, #572]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d06d      	beq.n	800cb44 <HAL_RCC_OscConfig+0x130>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d169      	bne.n	800cb44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	f000 bc21 	b.w	800d2b8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca7e:	d106      	bne.n	800ca8e <HAL_RCC_OscConfig+0x7a>
 800ca80:	4b86      	ldr	r3, [pc, #536]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a85      	ldr	r2, [pc, #532]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800ca86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	e02e      	b.n	800caec <HAL_RCC_OscConfig+0xd8>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10c      	bne.n	800cab0 <HAL_RCC_OscConfig+0x9c>
 800ca96:	4b81      	ldr	r3, [pc, #516]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a80      	ldr	r2, [pc, #512]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800ca9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800caa0:	6013      	str	r3, [r2, #0]
 800caa2:	4b7e      	ldr	r3, [pc, #504]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a7d      	ldr	r2, [pc, #500]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800caa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800caac:	6013      	str	r3, [r2, #0]
 800caae:	e01d      	b.n	800caec <HAL_RCC_OscConfig+0xd8>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cab8:	d10c      	bne.n	800cad4 <HAL_RCC_OscConfig+0xc0>
 800caba:	4b78      	ldr	r3, [pc, #480]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a77      	ldr	r2, [pc, #476]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cac4:	6013      	str	r3, [r2, #0]
 800cac6:	4b75      	ldr	r3, [pc, #468]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a74      	ldr	r2, [pc, #464]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cacc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	e00b      	b.n	800caec <HAL_RCC_OscConfig+0xd8>
 800cad4:	4b71      	ldr	r3, [pc, #452]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a70      	ldr	r2, [pc, #448]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	4b6e      	ldr	r3, [pc, #440]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a6d      	ldr	r2, [pc, #436]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800caea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d013      	beq.n	800cb1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caf4:	f7f5 fca2 	bl	800243c <HAL_GetTick>
 800caf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cafa:	e008      	b.n	800cb0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cafc:	f7f5 fc9e 	bl	800243c <HAL_GetTick>
 800cb00:	4602      	mov	r2, r0
 800cb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	2b64      	cmp	r3, #100	@ 0x64
 800cb08:	d901      	bls.n	800cb0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e3d4      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cb0e:	4b63      	ldr	r3, [pc, #396]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d0f0      	beq.n	800cafc <HAL_RCC_OscConfig+0xe8>
 800cb1a:	e014      	b.n	800cb46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb1c:	f7f5 fc8e 	bl	800243c <HAL_GetTick>
 800cb20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cb22:	e008      	b.n	800cb36 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb24:	f7f5 fc8a 	bl	800243c <HAL_GetTick>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	2b64      	cmp	r3, #100	@ 0x64
 800cb30:	d901      	bls.n	800cb36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cb32:	2303      	movs	r3, #3
 800cb34:	e3c0      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cb36:	4b59      	ldr	r3, [pc, #356]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1f0      	bne.n	800cb24 <HAL_RCC_OscConfig+0x110>
 800cb42:	e000      	b.n	800cb46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f003 0302 	and.w	r3, r3, #2
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f000 80ca 	beq.w	800cce8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb54:	4b51      	ldr	r3, [pc, #324]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cb56:	691b      	ldr	r3, [r3, #16]
 800cb58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cb5e:	4b4f      	ldr	r3, [pc, #316]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cb60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cb64:	6a3b      	ldr	r3, [r7, #32]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d007      	beq.n	800cb7a <HAL_RCC_OscConfig+0x166>
 800cb6a:	6a3b      	ldr	r3, [r7, #32]
 800cb6c:	2b18      	cmp	r3, #24
 800cb6e:	d156      	bne.n	800cc1e <HAL_RCC_OscConfig+0x20a>
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	f003 0303 	and.w	r3, r3, #3
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d151      	bne.n	800cc1e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb7a:	4b48      	ldr	r3, [pc, #288]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f003 0304 	and.w	r3, r3, #4
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d005      	beq.n	800cb92 <HAL_RCC_OscConfig+0x17e>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e392      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cb92:	4b42      	ldr	r3, [pc, #264]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f023 0219 	bic.w	r2, r3, #25
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	493f      	ldr	r1, [pc, #252]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cba0:	4313      	orrs	r3, r2
 800cba2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cba4:	f7f5 fc4a 	bl	800243c <HAL_GetTick>
 800cba8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cbaa:	e008      	b.n	800cbbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cbac:	f7f5 fc46 	bl	800243c <HAL_GetTick>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d901      	bls.n	800cbbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	e37c      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cbbe:	4b37      	ldr	r3, [pc, #220]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0304 	and.w	r3, r3, #4
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d0f0      	beq.n	800cbac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbca:	f7f5 fc67 	bl	800249c <HAL_GetREVID>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d817      	bhi.n	800cc08 <HAL_RCC_OscConfig+0x1f4>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	2b40      	cmp	r3, #64	@ 0x40
 800cbde:	d108      	bne.n	800cbf2 <HAL_RCC_OscConfig+0x1de>
 800cbe0:	4b2e      	ldr	r3, [pc, #184]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800cbe8:	4a2c      	ldr	r2, [pc, #176]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cbea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cbf0:	e07a      	b.n	800cce8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbf2:	4b2a      	ldr	r3, [pc, #168]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	031b      	lsls	r3, r3, #12
 800cc00:	4926      	ldr	r1, [pc, #152]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cc02:	4313      	orrs	r3, r2
 800cc04:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cc06:	e06f      	b.n	800cce8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc08:	4b24      	ldr	r3, [pc, #144]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	691b      	ldr	r3, [r3, #16]
 800cc14:	061b      	lsls	r3, r3, #24
 800cc16:	4921      	ldr	r1, [pc, #132]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cc1c:	e064      	b.n	800cce8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d047      	beq.n	800ccb6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cc26:	4b1d      	ldr	r3, [pc, #116]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f023 0219 	bic.w	r2, r3, #25
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	491a      	ldr	r1, [pc, #104]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cc34:	4313      	orrs	r3, r2
 800cc36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc38:	f7f5 fc00 	bl	800243c <HAL_GetTick>
 800cc3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc3e:	e008      	b.n	800cc52 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc40:	f7f5 fbfc 	bl	800243c <HAL_GetTick>
 800cc44:	4602      	mov	r2, r0
 800cc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	2b02      	cmp	r3, #2
 800cc4c:	d901      	bls.n	800cc52 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	e332      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc52:	4b12      	ldr	r3, [pc, #72]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 0304 	and.w	r3, r3, #4
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d0f0      	beq.n	800cc40 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc5e:	f7f5 fc1d 	bl	800249c <HAL_GetREVID>
 800cc62:	4603      	mov	r3, r0
 800cc64:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d819      	bhi.n	800cca0 <HAL_RCC_OscConfig+0x28c>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	2b40      	cmp	r3, #64	@ 0x40
 800cc72:	d108      	bne.n	800cc86 <HAL_RCC_OscConfig+0x272>
 800cc74:	4b09      	ldr	r3, [pc, #36]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800cc7c:	4a07      	ldr	r2, [pc, #28]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cc7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc82:	6053      	str	r3, [r2, #4]
 800cc84:	e030      	b.n	800cce8 <HAL_RCC_OscConfig+0x2d4>
 800cc86:	4b05      	ldr	r3, [pc, #20]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	691b      	ldr	r3, [r3, #16]
 800cc92:	031b      	lsls	r3, r3, #12
 800cc94:	4901      	ldr	r1, [pc, #4]	@ (800cc9c <HAL_RCC_OscConfig+0x288>)
 800cc96:	4313      	orrs	r3, r2
 800cc98:	604b      	str	r3, [r1, #4]
 800cc9a:	e025      	b.n	800cce8 <HAL_RCC_OscConfig+0x2d4>
 800cc9c:	58024400 	.word	0x58024400
 800cca0:	4b9a      	ldr	r3, [pc, #616]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	061b      	lsls	r3, r3, #24
 800ccae:	4997      	ldr	r1, [pc, #604]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	604b      	str	r3, [r1, #4]
 800ccb4:	e018      	b.n	800cce8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ccb6:	4b95      	ldr	r3, [pc, #596]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a94      	ldr	r2, [pc, #592]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ccbc:	f023 0301 	bic.w	r3, r3, #1
 800ccc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccc2:	f7f5 fbbb 	bl	800243c <HAL_GetTick>
 800ccc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ccc8:	e008      	b.n	800ccdc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ccca:	f7f5 fbb7 	bl	800243c <HAL_GetTick>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d901      	bls.n	800ccdc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ccd8:	2303      	movs	r3, #3
 800ccda:	e2ed      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ccdc:	4b8b      	ldr	r3, [pc, #556]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1f0      	bne.n	800ccca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 0310 	and.w	r3, r3, #16
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f000 80a9 	beq.w	800ce48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ccf6:	4b85      	ldr	r3, [pc, #532]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ccf8:	691b      	ldr	r3, [r3, #16]
 800ccfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ccfe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cd00:	4b82      	ldr	r3, [pc, #520]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cd02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b08      	cmp	r3, #8
 800cd0a:	d007      	beq.n	800cd1c <HAL_RCC_OscConfig+0x308>
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	2b18      	cmp	r3, #24
 800cd10:	d13a      	bne.n	800cd88 <HAL_RCC_OscConfig+0x374>
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f003 0303 	and.w	r3, r3, #3
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d135      	bne.n	800cd88 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cd1c:	4b7b      	ldr	r3, [pc, #492]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d005      	beq.n	800cd34 <HAL_RCC_OscConfig+0x320>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	69db      	ldr	r3, [r3, #28]
 800cd2c:	2b80      	cmp	r3, #128	@ 0x80
 800cd2e:	d001      	beq.n	800cd34 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800cd30:	2301      	movs	r3, #1
 800cd32:	e2c1      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cd34:	f7f5 fbb2 	bl	800249c <HAL_GetREVID>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d817      	bhi.n	800cd72 <HAL_RCC_OscConfig+0x35e>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	2b20      	cmp	r3, #32
 800cd48:	d108      	bne.n	800cd5c <HAL_RCC_OscConfig+0x348>
 800cd4a:	4b70      	ldr	r3, [pc, #448]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cd52:	4a6e      	ldr	r2, [pc, #440]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cd54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd58:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cd5a:	e075      	b.n	800ce48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cd5c:	4b6b      	ldr	r3, [pc, #428]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a1b      	ldr	r3, [r3, #32]
 800cd68:	069b      	lsls	r3, r3, #26
 800cd6a:	4968      	ldr	r1, [pc, #416]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cd70:	e06a      	b.n	800ce48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cd72:	4b66      	ldr	r3, [pc, #408]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	061b      	lsls	r3, r3, #24
 800cd80:	4962      	ldr	r1, [pc, #392]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cd82:	4313      	orrs	r3, r2
 800cd84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cd86:	e05f      	b.n	800ce48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	69db      	ldr	r3, [r3, #28]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d042      	beq.n	800ce16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cd90:	4b5e      	ldr	r3, [pc, #376]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a5d      	ldr	r2, [pc, #372]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cd96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd9c:	f7f5 fb4e 	bl	800243c <HAL_GetTick>
 800cda0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cda2:	e008      	b.n	800cdb6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cda4:	f7f5 fb4a 	bl	800243c <HAL_GetTick>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdac:	1ad3      	subs	r3, r2, r3
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d901      	bls.n	800cdb6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	e280      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cdb6:	4b55      	ldr	r3, [pc, #340]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d0f0      	beq.n	800cda4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cdc2:	f7f5 fb6b 	bl	800249c <HAL_GetREVID>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d817      	bhi.n	800ce00 <HAL_RCC_OscConfig+0x3ec>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6a1b      	ldr	r3, [r3, #32]
 800cdd4:	2b20      	cmp	r3, #32
 800cdd6:	d108      	bne.n	800cdea <HAL_RCC_OscConfig+0x3d6>
 800cdd8:	4b4c      	ldr	r3, [pc, #304]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cde0:	4a4a      	ldr	r2, [pc, #296]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cde2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cde6:	6053      	str	r3, [r2, #4]
 800cde8:	e02e      	b.n	800ce48 <HAL_RCC_OscConfig+0x434>
 800cdea:	4b48      	ldr	r3, [pc, #288]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	069b      	lsls	r3, r3, #26
 800cdf8:	4944      	ldr	r1, [pc, #272]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	604b      	str	r3, [r1, #4]
 800cdfe:	e023      	b.n	800ce48 <HAL_RCC_OscConfig+0x434>
 800ce00:	4b42      	ldr	r3, [pc, #264]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6a1b      	ldr	r3, [r3, #32]
 800ce0c:	061b      	lsls	r3, r3, #24
 800ce0e:	493f      	ldr	r1, [pc, #252]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ce10:	4313      	orrs	r3, r2
 800ce12:	60cb      	str	r3, [r1, #12]
 800ce14:	e018      	b.n	800ce48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ce16:	4b3d      	ldr	r3, [pc, #244]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a3c      	ldr	r2, [pc, #240]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ce1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce22:	f7f5 fb0b 	bl	800243c <HAL_GetTick>
 800ce26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ce28:	e008      	b.n	800ce3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ce2a:	f7f5 fb07 	bl	800243c <HAL_GetTick>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	d901      	bls.n	800ce3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	e23d      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ce3c:	4b33      	ldr	r3, [pc, #204]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1f0      	bne.n	800ce2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f003 0308 	and.w	r3, r3, #8
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d036      	beq.n	800cec2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	695b      	ldr	r3, [r3, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d019      	beq.n	800ce90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce5c:	4b2b      	ldr	r3, [pc, #172]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ce5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce60:	4a2a      	ldr	r2, [pc, #168]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ce62:	f043 0301 	orr.w	r3, r3, #1
 800ce66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce68:	f7f5 fae8 	bl	800243c <HAL_GetTick>
 800ce6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ce6e:	e008      	b.n	800ce82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce70:	f7f5 fae4 	bl	800243c <HAL_GetTick>
 800ce74:	4602      	mov	r2, r0
 800ce76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d901      	bls.n	800ce82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e21a      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ce82:	4b22      	ldr	r3, [pc, #136]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ce84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce86:	f003 0302 	and.w	r3, r3, #2
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0f0      	beq.n	800ce70 <HAL_RCC_OscConfig+0x45c>
 800ce8e:	e018      	b.n	800cec2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce90:	4b1e      	ldr	r3, [pc, #120]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ce92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce94:	4a1d      	ldr	r2, [pc, #116]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ce96:	f023 0301 	bic.w	r3, r3, #1
 800ce9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce9c:	f7f5 face 	bl	800243c <HAL_GetTick>
 800cea0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cea2:	e008      	b.n	800ceb6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cea4:	f7f5 faca 	bl	800243c <HAL_GetTick>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceac:	1ad3      	subs	r3, r2, r3
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d901      	bls.n	800ceb6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	e200      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ceb6:	4b15      	ldr	r3, [pc, #84]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ceb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ceba:	f003 0302 	and.w	r3, r3, #2
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1f0      	bne.n	800cea4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f003 0320 	and.w	r3, r3, #32
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d039      	beq.n	800cf42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d01c      	beq.n	800cf10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ced6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a0c      	ldr	r2, [pc, #48]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cedc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cee0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cee2:	f7f5 faab 	bl	800243c <HAL_GetTick>
 800cee6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cee8:	e008      	b.n	800cefc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ceea:	f7f5 faa7 	bl	800243c <HAL_GetTick>
 800ceee:	4602      	mov	r2, r0
 800cef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d901      	bls.n	800cefc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800cef8:	2303      	movs	r3, #3
 800cefa:	e1dd      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cefc:	4b03      	ldr	r3, [pc, #12]	@ (800cf0c <HAL_RCC_OscConfig+0x4f8>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d0f0      	beq.n	800ceea <HAL_RCC_OscConfig+0x4d6>
 800cf08:	e01b      	b.n	800cf42 <HAL_RCC_OscConfig+0x52e>
 800cf0a:	bf00      	nop
 800cf0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cf10:	4b9b      	ldr	r3, [pc, #620]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a9a      	ldr	r2, [pc, #616]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cf16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cf1c:	f7f5 fa8e 	bl	800243c <HAL_GetTick>
 800cf20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cf22:	e008      	b.n	800cf36 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cf24:	f7f5 fa8a 	bl	800243c <HAL_GetTick>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d901      	bls.n	800cf36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800cf32:	2303      	movs	r3, #3
 800cf34:	e1c0      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cf36:	4b92      	ldr	r3, [pc, #584]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1f0      	bne.n	800cf24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f003 0304 	and.w	r3, r3, #4
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f000 8081 	beq.w	800d052 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cf50:	4b8c      	ldr	r3, [pc, #560]	@ (800d184 <HAL_RCC_OscConfig+0x770>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a8b      	ldr	r2, [pc, #556]	@ (800d184 <HAL_RCC_OscConfig+0x770>)
 800cf56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cf5c:	f7f5 fa6e 	bl	800243c <HAL_GetTick>
 800cf60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf62:	e008      	b.n	800cf76 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf64:	f7f5 fa6a 	bl	800243c <HAL_GetTick>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	2b64      	cmp	r3, #100	@ 0x64
 800cf70:	d901      	bls.n	800cf76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800cf72:	2303      	movs	r3, #3
 800cf74:	e1a0      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf76:	4b83      	ldr	r3, [pc, #524]	@ (800d184 <HAL_RCC_OscConfig+0x770>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0f0      	beq.n	800cf64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d106      	bne.n	800cf98 <HAL_RCC_OscConfig+0x584>
 800cf8a:	4b7d      	ldr	r3, [pc, #500]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cf8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf8e:	4a7c      	ldr	r2, [pc, #496]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cf90:	f043 0301 	orr.w	r3, r3, #1
 800cf94:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf96:	e02d      	b.n	800cff4 <HAL_RCC_OscConfig+0x5e0>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10c      	bne.n	800cfba <HAL_RCC_OscConfig+0x5a6>
 800cfa0:	4b77      	ldr	r3, [pc, #476]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfa4:	4a76      	ldr	r2, [pc, #472]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfa6:	f023 0301 	bic.w	r3, r3, #1
 800cfaa:	6713      	str	r3, [r2, #112]	@ 0x70
 800cfac:	4b74      	ldr	r3, [pc, #464]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfb0:	4a73      	ldr	r2, [pc, #460]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfb2:	f023 0304 	bic.w	r3, r3, #4
 800cfb6:	6713      	str	r3, [r2, #112]	@ 0x70
 800cfb8:	e01c      	b.n	800cff4 <HAL_RCC_OscConfig+0x5e0>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	2b05      	cmp	r3, #5
 800cfc0:	d10c      	bne.n	800cfdc <HAL_RCC_OscConfig+0x5c8>
 800cfc2:	4b6f      	ldr	r3, [pc, #444]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfc6:	4a6e      	ldr	r2, [pc, #440]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfc8:	f043 0304 	orr.w	r3, r3, #4
 800cfcc:	6713      	str	r3, [r2, #112]	@ 0x70
 800cfce:	4b6c      	ldr	r3, [pc, #432]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfd2:	4a6b      	ldr	r2, [pc, #428]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfd4:	f043 0301 	orr.w	r3, r3, #1
 800cfd8:	6713      	str	r3, [r2, #112]	@ 0x70
 800cfda:	e00b      	b.n	800cff4 <HAL_RCC_OscConfig+0x5e0>
 800cfdc:	4b68      	ldr	r3, [pc, #416]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfe0:	4a67      	ldr	r2, [pc, #412]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfe2:	f023 0301 	bic.w	r3, r3, #1
 800cfe6:	6713      	str	r3, [r2, #112]	@ 0x70
 800cfe8:	4b65      	ldr	r3, [pc, #404]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfec:	4a64      	ldr	r2, [pc, #400]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800cfee:	f023 0304 	bic.w	r3, r3, #4
 800cff2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d015      	beq.n	800d028 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cffc:	f7f5 fa1e 	bl	800243c <HAL_GetTick>
 800d000:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d002:	e00a      	b.n	800d01a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d004:	f7f5 fa1a 	bl	800243c <HAL_GetTick>
 800d008:	4602      	mov	r2, r0
 800d00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d012:	4293      	cmp	r3, r2
 800d014:	d901      	bls.n	800d01a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d016:	2303      	movs	r3, #3
 800d018:	e14e      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d01a:	4b59      	ldr	r3, [pc, #356]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d01c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d01e:	f003 0302 	and.w	r3, r3, #2
 800d022:	2b00      	cmp	r3, #0
 800d024:	d0ee      	beq.n	800d004 <HAL_RCC_OscConfig+0x5f0>
 800d026:	e014      	b.n	800d052 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d028:	f7f5 fa08 	bl	800243c <HAL_GetTick>
 800d02c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d02e:	e00a      	b.n	800d046 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d030:	f7f5 fa04 	bl	800243c <HAL_GetTick>
 800d034:	4602      	mov	r2, r0
 800d036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d03e:	4293      	cmp	r3, r2
 800d040:	d901      	bls.n	800d046 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e138      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d046:	4b4e      	ldr	r3, [pc, #312]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d04a:	f003 0302 	and.w	r3, r3, #2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1ee      	bne.n	800d030 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 812d 	beq.w	800d2b6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d05c:	4b48      	ldr	r3, [pc, #288]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d064:	2b18      	cmp	r3, #24
 800d066:	f000 80bd 	beq.w	800d1e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d06e:	2b02      	cmp	r3, #2
 800d070:	f040 809e 	bne.w	800d1b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d074:	4b42      	ldr	r3, [pc, #264]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a41      	ldr	r2, [pc, #260]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d07a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d07e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d080:	f7f5 f9dc 	bl	800243c <HAL_GetTick>
 800d084:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d086:	e008      	b.n	800d09a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d088:	f7f5 f9d8 	bl	800243c <HAL_GetTick>
 800d08c:	4602      	mov	r2, r0
 800d08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	2b02      	cmp	r3, #2
 800d094:	d901      	bls.n	800d09a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d096:	2303      	movs	r3, #3
 800d098:	e10e      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d09a:	4b39      	ldr	r3, [pc, #228]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1f0      	bne.n	800d088 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d0a6:	4b36      	ldr	r3, [pc, #216]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d0a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d0aa:	4b37      	ldr	r3, [pc, #220]	@ (800d188 <HAL_RCC_OscConfig+0x774>)
 800d0ac:	4013      	ands	r3, r2
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d0b6:	0112      	lsls	r2, r2, #4
 800d0b8:	430a      	orrs	r2, r1
 800d0ba:	4931      	ldr	r1, [pc, #196]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	628b      	str	r3, [r1, #40]	@ 0x28
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	025b      	lsls	r3, r3, #9
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	431a      	orrs	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0da:	3b01      	subs	r3, #1
 800d0dc:	041b      	lsls	r3, r3, #16
 800d0de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d0e2:	431a      	orrs	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	061b      	lsls	r3, r3, #24
 800d0ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d0f0:	4923      	ldr	r1, [pc, #140]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d0f6:	4b22      	ldr	r3, [pc, #136]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0fa:	4a21      	ldr	r2, [pc, #132]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d0fc:	f023 0301 	bic.w	r3, r3, #1
 800d100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d102:	4b1f      	ldr	r3, [pc, #124]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d106:	4b21      	ldr	r3, [pc, #132]	@ (800d18c <HAL_RCC_OscConfig+0x778>)
 800d108:	4013      	ands	r3, r2
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d10e:	00d2      	lsls	r2, r2, #3
 800d110:	491b      	ldr	r1, [pc, #108]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d112:	4313      	orrs	r3, r2
 800d114:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d116:	4b1a      	ldr	r3, [pc, #104]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d11a:	f023 020c 	bic.w	r2, r3, #12
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d122:	4917      	ldr	r1, [pc, #92]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d124:	4313      	orrs	r3, r2
 800d126:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d128:	4b15      	ldr	r3, [pc, #84]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d12c:	f023 0202 	bic.w	r2, r3, #2
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d134:	4912      	ldr	r1, [pc, #72]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d136:	4313      	orrs	r3, r2
 800d138:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d13a:	4b11      	ldr	r3, [pc, #68]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d13e:	4a10      	ldr	r2, [pc, #64]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d144:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d146:	4b0e      	ldr	r3, [pc, #56]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d14a:	4a0d      	ldr	r2, [pc, #52]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d14c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d152:	4b0b      	ldr	r3, [pc, #44]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d156:	4a0a      	ldr	r2, [pc, #40]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d15c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d15e:	4b08      	ldr	r3, [pc, #32]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d162:	4a07      	ldr	r2, [pc, #28]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d164:	f043 0301 	orr.w	r3, r3, #1
 800d168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d16a:	4b05      	ldr	r3, [pc, #20]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a04      	ldr	r2, [pc, #16]	@ (800d180 <HAL_RCC_OscConfig+0x76c>)
 800d170:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d176:	f7f5 f961 	bl	800243c <HAL_GetTick>
 800d17a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d17c:	e011      	b.n	800d1a2 <HAL_RCC_OscConfig+0x78e>
 800d17e:	bf00      	nop
 800d180:	58024400 	.word	0x58024400
 800d184:	58024800 	.word	0x58024800
 800d188:	fffffc0c 	.word	0xfffffc0c
 800d18c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d190:	f7f5 f954 	bl	800243c <HAL_GetTick>
 800d194:	4602      	mov	r2, r0
 800d196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d198:	1ad3      	subs	r3, r2, r3
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d901      	bls.n	800d1a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e08a      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d1a2:	4b47      	ldr	r3, [pc, #284]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d0f0      	beq.n	800d190 <HAL_RCC_OscConfig+0x77c>
 800d1ae:	e082      	b.n	800d2b6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d1b0:	4b43      	ldr	r3, [pc, #268]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a42      	ldr	r2, [pc, #264]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d1b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d1ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1bc:	f7f5 f93e 	bl	800243c <HAL_GetTick>
 800d1c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d1c2:	e008      	b.n	800d1d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1c4:	f7f5 f93a 	bl	800243c <HAL_GetTick>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d901      	bls.n	800d1d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	e070      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d1d6:	4b3a      	ldr	r3, [pc, #232]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1f0      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x7b0>
 800d1e2:	e068      	b.n	800d2b6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d1e4:	4b36      	ldr	r3, [pc, #216]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d1ea:	4b35      	ldr	r3, [pc, #212]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d031      	beq.n	800d25c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	f003 0203 	and.w	r2, r3, #3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d202:	429a      	cmp	r2, r3
 800d204:	d12a      	bne.n	800d25c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	091b      	lsrs	r3, r3, #4
 800d20a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d212:	429a      	cmp	r2, r3
 800d214:	d122      	bne.n	800d25c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d220:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d222:	429a      	cmp	r2, r3
 800d224:	d11a      	bne.n	800d25c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	0a5b      	lsrs	r3, r3, #9
 800d22a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d232:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d234:	429a      	cmp	r2, r3
 800d236:	d111      	bne.n	800d25c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	0c1b      	lsrs	r3, r3, #16
 800d23c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d244:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d246:	429a      	cmp	r2, r3
 800d248:	d108      	bne.n	800d25c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	0e1b      	lsrs	r3, r3, #24
 800d24e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d256:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d258:	429a      	cmp	r2, r3
 800d25a:	d001      	beq.n	800d260 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e02b      	b.n	800d2b8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d260:	4b17      	ldr	r3, [pc, #92]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d264:	08db      	lsrs	r3, r3, #3
 800d266:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d26a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d270:	693a      	ldr	r2, [r7, #16]
 800d272:	429a      	cmp	r2, r3
 800d274:	d01f      	beq.n	800d2b6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d276:	4b12      	ldr	r3, [pc, #72]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d27a:	4a11      	ldr	r2, [pc, #68]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d27c:	f023 0301 	bic.w	r3, r3, #1
 800d280:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d282:	f7f5 f8db 	bl	800243c <HAL_GetTick>
 800d286:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d288:	bf00      	nop
 800d28a:	f7f5 f8d7 	bl	800243c <HAL_GetTick>
 800d28e:	4602      	mov	r2, r0
 800d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d292:	4293      	cmp	r3, r2
 800d294:	d0f9      	beq.n	800d28a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d296:	4b0a      	ldr	r3, [pc, #40]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d29a:	4b0a      	ldr	r3, [pc, #40]	@ (800d2c4 <HAL_RCC_OscConfig+0x8b0>)
 800d29c:	4013      	ands	r3, r2
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d2a2:	00d2      	lsls	r2, r2, #3
 800d2a4:	4906      	ldr	r1, [pc, #24]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d2aa:	4b05      	ldr	r3, [pc, #20]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ae:	4a04      	ldr	r2, [pc, #16]	@ (800d2c0 <HAL_RCC_OscConfig+0x8ac>)
 800d2b0:	f043 0301 	orr.w	r3, r3, #1
 800d2b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d2b6:	2300      	movs	r3, #0
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3730      	adds	r7, #48	@ 0x30
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	58024400 	.word	0x58024400
 800d2c4:	ffff0007 	.word	0xffff0007

0800d2c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d101      	bne.n	800d2dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e19c      	b.n	800d616 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d2dc:	4b8a      	ldr	r3, [pc, #552]	@ (800d508 <HAL_RCC_ClockConfig+0x240>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f003 030f 	and.w	r3, r3, #15
 800d2e4:	683a      	ldr	r2, [r7, #0]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d910      	bls.n	800d30c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d2ea:	4b87      	ldr	r3, [pc, #540]	@ (800d508 <HAL_RCC_ClockConfig+0x240>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f023 020f 	bic.w	r2, r3, #15
 800d2f2:	4985      	ldr	r1, [pc, #532]	@ (800d508 <HAL_RCC_ClockConfig+0x240>)
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2fa:	4b83      	ldr	r3, [pc, #524]	@ (800d508 <HAL_RCC_ClockConfig+0x240>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 030f 	and.w	r3, r3, #15
 800d302:	683a      	ldr	r2, [r7, #0]
 800d304:	429a      	cmp	r2, r3
 800d306:	d001      	beq.n	800d30c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	e184      	b.n	800d616 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 0304 	and.w	r3, r3, #4
 800d314:	2b00      	cmp	r3, #0
 800d316:	d010      	beq.n	800d33a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	691a      	ldr	r2, [r3, #16]
 800d31c:	4b7b      	ldr	r3, [pc, #492]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d324:	429a      	cmp	r2, r3
 800d326:	d908      	bls.n	800d33a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d328:	4b78      	ldr	r3, [pc, #480]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	4975      	ldr	r1, [pc, #468]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d336:	4313      	orrs	r3, r2
 800d338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f003 0308 	and.w	r3, r3, #8
 800d342:	2b00      	cmp	r3, #0
 800d344:	d010      	beq.n	800d368 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	695a      	ldr	r2, [r3, #20]
 800d34a:	4b70      	ldr	r3, [pc, #448]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d34c:	69db      	ldr	r3, [r3, #28]
 800d34e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d352:	429a      	cmp	r2, r3
 800d354:	d908      	bls.n	800d368 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d356:	4b6d      	ldr	r3, [pc, #436]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d358:	69db      	ldr	r3, [r3, #28]
 800d35a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	695b      	ldr	r3, [r3, #20]
 800d362:	496a      	ldr	r1, [pc, #424]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d364:	4313      	orrs	r3, r2
 800d366:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f003 0310 	and.w	r3, r3, #16
 800d370:	2b00      	cmp	r3, #0
 800d372:	d010      	beq.n	800d396 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	699a      	ldr	r2, [r3, #24]
 800d378:	4b64      	ldr	r3, [pc, #400]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d37a:	69db      	ldr	r3, [r3, #28]
 800d37c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d380:	429a      	cmp	r2, r3
 800d382:	d908      	bls.n	800d396 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d384:	4b61      	ldr	r3, [pc, #388]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d386:	69db      	ldr	r3, [r3, #28]
 800d388:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	699b      	ldr	r3, [r3, #24]
 800d390:	495e      	ldr	r1, [pc, #376]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d392:	4313      	orrs	r3, r2
 800d394:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f003 0320 	and.w	r3, r3, #32
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d010      	beq.n	800d3c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	69da      	ldr	r2, [r3, #28]
 800d3a6:	4b59      	ldr	r3, [pc, #356]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d3a8:	6a1b      	ldr	r3, [r3, #32]
 800d3aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d908      	bls.n	800d3c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d3b2:	4b56      	ldr	r3, [pc, #344]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d3b4:	6a1b      	ldr	r3, [r3, #32]
 800d3b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	69db      	ldr	r3, [r3, #28]
 800d3be:	4953      	ldr	r1, [pc, #332]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f003 0302 	and.w	r3, r3, #2
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d010      	beq.n	800d3f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	68da      	ldr	r2, [r3, #12]
 800d3d4:	4b4d      	ldr	r3, [pc, #308]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d3d6:	699b      	ldr	r3, [r3, #24]
 800d3d8:	f003 030f 	and.w	r3, r3, #15
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d908      	bls.n	800d3f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d3e0:	4b4a      	ldr	r3, [pc, #296]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	f023 020f 	bic.w	r2, r3, #15
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	4947      	ldr	r1, [pc, #284]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f003 0301 	and.w	r3, r3, #1
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d055      	beq.n	800d4aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d3fe:	4b43      	ldr	r3, [pc, #268]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d400:	699b      	ldr	r3, [r3, #24]
 800d402:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	4940      	ldr	r1, [pc, #256]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d40c:	4313      	orrs	r3, r2
 800d40e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	2b02      	cmp	r3, #2
 800d416:	d107      	bne.n	800d428 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d418:	4b3c      	ldr	r3, [pc, #240]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d420:	2b00      	cmp	r3, #0
 800d422:	d121      	bne.n	800d468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d424:	2301      	movs	r3, #1
 800d426:	e0f6      	b.n	800d616 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	2b03      	cmp	r3, #3
 800d42e:	d107      	bne.n	800d440 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d430:	4b36      	ldr	r3, [pc, #216]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d115      	bne.n	800d468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d43c:	2301      	movs	r3, #1
 800d43e:	e0ea      	b.n	800d616 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d107      	bne.n	800d458 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d448:	4b30      	ldr	r3, [pc, #192]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d450:	2b00      	cmp	r3, #0
 800d452:	d109      	bne.n	800d468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d454:	2301      	movs	r3, #1
 800d456:	e0de      	b.n	800d616 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d458:	4b2c      	ldr	r3, [pc, #176]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	2b00      	cmp	r3, #0
 800d462:	d101      	bne.n	800d468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d464:	2301      	movs	r3, #1
 800d466:	e0d6      	b.n	800d616 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d468:	4b28      	ldr	r3, [pc, #160]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	f023 0207 	bic.w	r2, r3, #7
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	4925      	ldr	r1, [pc, #148]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d476:	4313      	orrs	r3, r2
 800d478:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d47a:	f7f4 ffdf 	bl	800243c <HAL_GetTick>
 800d47e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d480:	e00a      	b.n	800d498 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d482:	f7f4 ffdb 	bl	800243c <HAL_GetTick>
 800d486:	4602      	mov	r2, r0
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d490:	4293      	cmp	r3, r2
 800d492:	d901      	bls.n	800d498 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d494:	2303      	movs	r3, #3
 800d496:	e0be      	b.n	800d616 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d498:	4b1c      	ldr	r3, [pc, #112]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d49a:	691b      	ldr	r3, [r3, #16]
 800d49c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	00db      	lsls	r3, r3, #3
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d1eb      	bne.n	800d482 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f003 0302 	and.w	r3, r3, #2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d010      	beq.n	800d4d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68da      	ldr	r2, [r3, #12]
 800d4ba:	4b14      	ldr	r3, [pc, #80]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d4bc:	699b      	ldr	r3, [r3, #24]
 800d4be:	f003 030f 	and.w	r3, r3, #15
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d208      	bcs.n	800d4d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d4c6:	4b11      	ldr	r3, [pc, #68]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d4c8:	699b      	ldr	r3, [r3, #24]
 800d4ca:	f023 020f 	bic.w	r2, r3, #15
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	490e      	ldr	r1, [pc, #56]	@ (800d50c <HAL_RCC_ClockConfig+0x244>)
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800d508 <HAL_RCC_ClockConfig+0x240>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f003 030f 	and.w	r3, r3, #15
 800d4e0:	683a      	ldr	r2, [r7, #0]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d214      	bcs.n	800d510 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4e6:	4b08      	ldr	r3, [pc, #32]	@ (800d508 <HAL_RCC_ClockConfig+0x240>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f023 020f 	bic.w	r2, r3, #15
 800d4ee:	4906      	ldr	r1, [pc, #24]	@ (800d508 <HAL_RCC_ClockConfig+0x240>)
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4f6:	4b04      	ldr	r3, [pc, #16]	@ (800d508 <HAL_RCC_ClockConfig+0x240>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f003 030f 	and.w	r3, r3, #15
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	429a      	cmp	r2, r3
 800d502:	d005      	beq.n	800d510 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	e086      	b.n	800d616 <HAL_RCC_ClockConfig+0x34e>
 800d508:	52002000 	.word	0x52002000
 800d50c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f003 0304 	and.w	r3, r3, #4
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d010      	beq.n	800d53e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	691a      	ldr	r2, [r3, #16]
 800d520:	4b3f      	ldr	r3, [pc, #252]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d522:	699b      	ldr	r3, [r3, #24]
 800d524:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d528:	429a      	cmp	r2, r3
 800d52a:	d208      	bcs.n	800d53e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d52c:	4b3c      	ldr	r3, [pc, #240]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	691b      	ldr	r3, [r3, #16]
 800d538:	4939      	ldr	r1, [pc, #228]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d53a:	4313      	orrs	r3, r2
 800d53c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f003 0308 	and.w	r3, r3, #8
 800d546:	2b00      	cmp	r3, #0
 800d548:	d010      	beq.n	800d56c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	695a      	ldr	r2, [r3, #20]
 800d54e:	4b34      	ldr	r3, [pc, #208]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d550:	69db      	ldr	r3, [r3, #28]
 800d552:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d556:	429a      	cmp	r2, r3
 800d558:	d208      	bcs.n	800d56c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d55a:	4b31      	ldr	r3, [pc, #196]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d55c:	69db      	ldr	r3, [r3, #28]
 800d55e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	695b      	ldr	r3, [r3, #20]
 800d566:	492e      	ldr	r1, [pc, #184]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d568:	4313      	orrs	r3, r2
 800d56a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f003 0310 	and.w	r3, r3, #16
 800d574:	2b00      	cmp	r3, #0
 800d576:	d010      	beq.n	800d59a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	699a      	ldr	r2, [r3, #24]
 800d57c:	4b28      	ldr	r3, [pc, #160]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d57e:	69db      	ldr	r3, [r3, #28]
 800d580:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d584:	429a      	cmp	r2, r3
 800d586:	d208      	bcs.n	800d59a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d588:	4b25      	ldr	r3, [pc, #148]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d58a:	69db      	ldr	r3, [r3, #28]
 800d58c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	699b      	ldr	r3, [r3, #24]
 800d594:	4922      	ldr	r1, [pc, #136]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d596:	4313      	orrs	r3, r2
 800d598:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f003 0320 	and.w	r3, r3, #32
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d010      	beq.n	800d5c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	69da      	ldr	r2, [r3, #28]
 800d5aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d5ac:	6a1b      	ldr	r3, [r3, #32]
 800d5ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d208      	bcs.n	800d5c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d5b6:	4b1a      	ldr	r3, [pc, #104]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d5b8:	6a1b      	ldr	r3, [r3, #32]
 800d5ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	69db      	ldr	r3, [r3, #28]
 800d5c2:	4917      	ldr	r1, [pc, #92]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d5c8:	f000 f834 	bl	800d634 <HAL_RCC_GetSysClockFreq>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	4b14      	ldr	r3, [pc, #80]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d5d0:	699b      	ldr	r3, [r3, #24]
 800d5d2:	0a1b      	lsrs	r3, r3, #8
 800d5d4:	f003 030f 	and.w	r3, r3, #15
 800d5d8:	4912      	ldr	r1, [pc, #72]	@ (800d624 <HAL_RCC_ClockConfig+0x35c>)
 800d5da:	5ccb      	ldrb	r3, [r1, r3]
 800d5dc:	f003 031f 	and.w	r3, r3, #31
 800d5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d5e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d5e6:	4b0e      	ldr	r3, [pc, #56]	@ (800d620 <HAL_RCC_ClockConfig+0x358>)
 800d5e8:	699b      	ldr	r3, [r3, #24]
 800d5ea:	f003 030f 	and.w	r3, r3, #15
 800d5ee:	4a0d      	ldr	r2, [pc, #52]	@ (800d624 <HAL_RCC_ClockConfig+0x35c>)
 800d5f0:	5cd3      	ldrb	r3, [r2, r3]
 800d5f2:	f003 031f 	and.w	r3, r3, #31
 800d5f6:	693a      	ldr	r2, [r7, #16]
 800d5f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d5fc:	4a0a      	ldr	r2, [pc, #40]	@ (800d628 <HAL_RCC_ClockConfig+0x360>)
 800d5fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d600:	4a0a      	ldr	r2, [pc, #40]	@ (800d62c <HAL_RCC_ClockConfig+0x364>)
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d606:	4b0a      	ldr	r3, [pc, #40]	@ (800d630 <HAL_RCC_ClockConfig+0x368>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7f4 fecc 	bl	80023a8 <HAL_InitTick>
 800d610:	4603      	mov	r3, r0
 800d612:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d614:	7bfb      	ldrb	r3, [r7, #15]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3718      	adds	r7, #24
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	58024400 	.word	0x58024400
 800d624:	080178e8 	.word	0x080178e8
 800d628:	24000008 	.word	0x24000008
 800d62c:	24000004 	.word	0x24000004
 800d630:	2400000c 	.word	0x2400000c

0800d634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d634:	b480      	push	{r7}
 800d636:	b089      	sub	sp, #36	@ 0x24
 800d638:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d63a:	4bb3      	ldr	r3, [pc, #716]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d642:	2b18      	cmp	r3, #24
 800d644:	f200 8155 	bhi.w	800d8f2 <HAL_RCC_GetSysClockFreq+0x2be>
 800d648:	a201      	add	r2, pc, #4	@ (adr r2, 800d650 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d64e:	bf00      	nop
 800d650:	0800d6b5 	.word	0x0800d6b5
 800d654:	0800d8f3 	.word	0x0800d8f3
 800d658:	0800d8f3 	.word	0x0800d8f3
 800d65c:	0800d8f3 	.word	0x0800d8f3
 800d660:	0800d8f3 	.word	0x0800d8f3
 800d664:	0800d8f3 	.word	0x0800d8f3
 800d668:	0800d8f3 	.word	0x0800d8f3
 800d66c:	0800d8f3 	.word	0x0800d8f3
 800d670:	0800d6db 	.word	0x0800d6db
 800d674:	0800d8f3 	.word	0x0800d8f3
 800d678:	0800d8f3 	.word	0x0800d8f3
 800d67c:	0800d8f3 	.word	0x0800d8f3
 800d680:	0800d8f3 	.word	0x0800d8f3
 800d684:	0800d8f3 	.word	0x0800d8f3
 800d688:	0800d8f3 	.word	0x0800d8f3
 800d68c:	0800d8f3 	.word	0x0800d8f3
 800d690:	0800d6e1 	.word	0x0800d6e1
 800d694:	0800d8f3 	.word	0x0800d8f3
 800d698:	0800d8f3 	.word	0x0800d8f3
 800d69c:	0800d8f3 	.word	0x0800d8f3
 800d6a0:	0800d8f3 	.word	0x0800d8f3
 800d6a4:	0800d8f3 	.word	0x0800d8f3
 800d6a8:	0800d8f3 	.word	0x0800d8f3
 800d6ac:	0800d8f3 	.word	0x0800d8f3
 800d6b0:	0800d6e7 	.word	0x0800d6e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6b4:	4b94      	ldr	r3, [pc, #592]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f003 0320 	and.w	r3, r3, #32
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d009      	beq.n	800d6d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6c0:	4b91      	ldr	r3, [pc, #580]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	08db      	lsrs	r3, r3, #3
 800d6c6:	f003 0303 	and.w	r3, r3, #3
 800d6ca:	4a90      	ldr	r2, [pc, #576]	@ (800d90c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d6cc:	fa22 f303 	lsr.w	r3, r2, r3
 800d6d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d6d2:	e111      	b.n	800d8f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d6d4:	4b8d      	ldr	r3, [pc, #564]	@ (800d90c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d6d6:	61bb      	str	r3, [r7, #24]
      break;
 800d6d8:	e10e      	b.n	800d8f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d6da:	4b8d      	ldr	r3, [pc, #564]	@ (800d910 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d6dc:	61bb      	str	r3, [r7, #24]
      break;
 800d6de:	e10b      	b.n	800d8f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d6e0:	4b8c      	ldr	r3, [pc, #560]	@ (800d914 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d6e2:	61bb      	str	r3, [r7, #24]
      break;
 800d6e4:	e108      	b.n	800d8f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6e6:	4b88      	ldr	r3, [pc, #544]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ea:	f003 0303 	and.w	r3, r3, #3
 800d6ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d6f0:	4b85      	ldr	r3, [pc, #532]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f4:	091b      	lsrs	r3, r3, #4
 800d6f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d6fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d6fc:	4b82      	ldr	r3, [pc, #520]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d700:	f003 0301 	and.w	r3, r3, #1
 800d704:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d706:	4b80      	ldr	r3, [pc, #512]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d70a:	08db      	lsrs	r3, r3, #3
 800d70c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	fb02 f303 	mul.w	r3, r2, r3
 800d716:	ee07 3a90 	vmov	s15, r3
 800d71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	2b00      	cmp	r3, #0
 800d726:	f000 80e1 	beq.w	800d8ec <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	f000 8083 	beq.w	800d838 <HAL_RCC_GetSysClockFreq+0x204>
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	2b02      	cmp	r3, #2
 800d736:	f200 80a1 	bhi.w	800d87c <HAL_RCC_GetSysClockFreq+0x248>
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d003      	beq.n	800d748 <HAL_RCC_GetSysClockFreq+0x114>
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d056      	beq.n	800d7f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d746:	e099      	b.n	800d87c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d748:	4b6f      	ldr	r3, [pc, #444]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f003 0320 	and.w	r3, r3, #32
 800d750:	2b00      	cmp	r3, #0
 800d752:	d02d      	beq.n	800d7b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d754:	4b6c      	ldr	r3, [pc, #432]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	08db      	lsrs	r3, r3, #3
 800d75a:	f003 0303 	and.w	r3, r3, #3
 800d75e:	4a6b      	ldr	r2, [pc, #428]	@ (800d90c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d760:	fa22 f303 	lsr.w	r3, r2, r3
 800d764:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	ee07 3a90 	vmov	s15, r3
 800d76c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	ee07 3a90 	vmov	s15, r3
 800d776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d77a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d77e:	4b62      	ldr	r3, [pc, #392]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d786:	ee07 3a90 	vmov	s15, r3
 800d78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d78e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d792:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d918 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d79a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d79e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d7ae:	e087      	b.n	800d8c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	ee07 3a90 	vmov	s15, r3
 800d7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d91c <HAL_RCC_GetSysClockFreq+0x2e8>
 800d7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7c2:	4b51      	ldr	r3, [pc, #324]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ca:	ee07 3a90 	vmov	s15, r3
 800d7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d7d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d918 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d7f2:	e065      	b.n	800d8c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	ee07 3a90 	vmov	s15, r3
 800d7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d920 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d806:	4b40      	ldr	r3, [pc, #256]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d80e:	ee07 3a90 	vmov	s15, r3
 800d812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d816:	ed97 6a02 	vldr	s12, [r7, #8]
 800d81a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d918 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d832:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d836:	e043      	b.n	800d8c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	ee07 3a90 	vmov	s15, r3
 800d83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d842:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d924 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d84a:	4b2f      	ldr	r3, [pc, #188]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d84c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d852:	ee07 3a90 	vmov	s15, r3
 800d856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d85a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d85e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d918 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d86a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d87a:	e021      	b.n	800d8c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	ee07 3a90 	vmov	s15, r3
 800d882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d886:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d920 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d88e:	4b1e      	ldr	r3, [pc, #120]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d896:	ee07 3a90 	vmov	s15, r3
 800d89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d89e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d8a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d918 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d8be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d8c0:	4b11      	ldr	r3, [pc, #68]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8c4:	0a5b      	lsrs	r3, r3, #9
 800d8c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	ee07 3a90 	vmov	s15, r3
 800d8d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d8d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8e4:	ee17 3a90 	vmov	r3, s15
 800d8e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d8ea:	e005      	b.n	800d8f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	61bb      	str	r3, [r7, #24]
      break;
 800d8f0:	e002      	b.n	800d8f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d8f2:	4b07      	ldr	r3, [pc, #28]	@ (800d910 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d8f4:	61bb      	str	r3, [r7, #24]
      break;
 800d8f6:	bf00      	nop
  }

  return sysclockfreq;
 800d8f8:	69bb      	ldr	r3, [r7, #24]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3724      	adds	r7, #36	@ 0x24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	58024400 	.word	0x58024400
 800d90c:	03d09000 	.word	0x03d09000
 800d910:	003d0900 	.word	0x003d0900
 800d914:	017d7840 	.word	0x017d7840
 800d918:	46000000 	.word	0x46000000
 800d91c:	4c742400 	.word	0x4c742400
 800d920:	4a742400 	.word	0x4a742400
 800d924:	4bbebc20 	.word	0x4bbebc20

0800d928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d92e:	f7ff fe81 	bl	800d634 <HAL_RCC_GetSysClockFreq>
 800d932:	4602      	mov	r2, r0
 800d934:	4b10      	ldr	r3, [pc, #64]	@ (800d978 <HAL_RCC_GetHCLKFreq+0x50>)
 800d936:	699b      	ldr	r3, [r3, #24]
 800d938:	0a1b      	lsrs	r3, r3, #8
 800d93a:	f003 030f 	and.w	r3, r3, #15
 800d93e:	490f      	ldr	r1, [pc, #60]	@ (800d97c <HAL_RCC_GetHCLKFreq+0x54>)
 800d940:	5ccb      	ldrb	r3, [r1, r3]
 800d942:	f003 031f 	and.w	r3, r3, #31
 800d946:	fa22 f303 	lsr.w	r3, r2, r3
 800d94a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d94c:	4b0a      	ldr	r3, [pc, #40]	@ (800d978 <HAL_RCC_GetHCLKFreq+0x50>)
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	f003 030f 	and.w	r3, r3, #15
 800d954:	4a09      	ldr	r2, [pc, #36]	@ (800d97c <HAL_RCC_GetHCLKFreq+0x54>)
 800d956:	5cd3      	ldrb	r3, [r2, r3]
 800d958:	f003 031f 	and.w	r3, r3, #31
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	fa22 f303 	lsr.w	r3, r2, r3
 800d962:	4a07      	ldr	r2, [pc, #28]	@ (800d980 <HAL_RCC_GetHCLKFreq+0x58>)
 800d964:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d966:	4a07      	ldr	r2, [pc, #28]	@ (800d984 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d96c:	4b04      	ldr	r3, [pc, #16]	@ (800d980 <HAL_RCC_GetHCLKFreq+0x58>)
 800d96e:	681b      	ldr	r3, [r3, #0]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	58024400 	.word	0x58024400
 800d97c:	080178e8 	.word	0x080178e8
 800d980:	24000008 	.word	0x24000008
 800d984:	24000004 	.word	0x24000004

0800d988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d98c:	f7ff ffcc 	bl	800d928 <HAL_RCC_GetHCLKFreq>
 800d990:	4602      	mov	r2, r0
 800d992:	4b06      	ldr	r3, [pc, #24]	@ (800d9ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800d994:	69db      	ldr	r3, [r3, #28]
 800d996:	091b      	lsrs	r3, r3, #4
 800d998:	f003 0307 	and.w	r3, r3, #7
 800d99c:	4904      	ldr	r1, [pc, #16]	@ (800d9b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d99e:	5ccb      	ldrb	r3, [r1, r3]
 800d9a0:	f003 031f 	and.w	r3, r3, #31
 800d9a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	58024400 	.word	0x58024400
 800d9b0:	080178e8 	.word	0x080178e8

0800d9b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d9b8:	f7ff ffb6 	bl	800d928 <HAL_RCC_GetHCLKFreq>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	4b06      	ldr	r3, [pc, #24]	@ (800d9d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d9c0:	69db      	ldr	r3, [r3, #28]
 800d9c2:	0a1b      	lsrs	r3, r3, #8
 800d9c4:	f003 0307 	and.w	r3, r3, #7
 800d9c8:	4904      	ldr	r1, [pc, #16]	@ (800d9dc <HAL_RCC_GetPCLK2Freq+0x28>)
 800d9ca:	5ccb      	ldrb	r3, [r1, r3]
 800d9cc:	f003 031f 	and.w	r3, r3, #31
 800d9d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	58024400 	.word	0x58024400
 800d9dc:	080178e8 	.word	0x080178e8

0800d9e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d9e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9e4:	b0ca      	sub	sp, #296	@ 0x128
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da00:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800da04:	2500      	movs	r5, #0
 800da06:	ea54 0305 	orrs.w	r3, r4, r5
 800da0a:	d049      	beq.n	800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800da0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800da12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da16:	d02f      	beq.n	800da78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800da18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da1c:	d828      	bhi.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800da1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da22:	d01a      	beq.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800da24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da28:	d822      	bhi.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800da2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da32:	d007      	beq.n	800da44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800da34:	e01c      	b.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da36:	4bb8      	ldr	r3, [pc, #736]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3a:	4ab7      	ldr	r2, [pc, #732]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800da42:	e01a      	b.n	800da7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800da44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da48:	3308      	adds	r3, #8
 800da4a:	2102      	movs	r1, #2
 800da4c:	4618      	mov	r0, r3
 800da4e:	f002 fb61 	bl	8010114 <RCCEx_PLL2_Config>
 800da52:	4603      	mov	r3, r0
 800da54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800da58:	e00f      	b.n	800da7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800da5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da5e:	3328      	adds	r3, #40	@ 0x28
 800da60:	2102      	movs	r1, #2
 800da62:	4618      	mov	r0, r3
 800da64:	f002 fc08 	bl	8010278 <RCCEx_PLL3_Config>
 800da68:	4603      	mov	r3, r0
 800da6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800da6e:	e004      	b.n	800da7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800da76:	e000      	b.n	800da7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800da78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10a      	bne.n	800da98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800da82:	4ba5      	ldr	r3, [pc, #660]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800da8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800da90:	4aa1      	ldr	r2, [pc, #644]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da92:	430b      	orrs	r3, r1
 800da94:	6513      	str	r3, [r2, #80]	@ 0x50
 800da96:	e003      	b.n	800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800daa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800daac:	f04f 0900 	mov.w	r9, #0
 800dab0:	ea58 0309 	orrs.w	r3, r8, r9
 800dab4:	d047      	beq.n	800db46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800dab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dabc:	2b04      	cmp	r3, #4
 800dabe:	d82a      	bhi.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dac0:	a201      	add	r2, pc, #4	@ (adr r2, 800dac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac6:	bf00      	nop
 800dac8:	0800dadd 	.word	0x0800dadd
 800dacc:	0800daeb 	.word	0x0800daeb
 800dad0:	0800db01 	.word	0x0800db01
 800dad4:	0800db1f 	.word	0x0800db1f
 800dad8:	0800db1f 	.word	0x0800db1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dadc:	4b8e      	ldr	r3, [pc, #568]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae0:	4a8d      	ldr	r2, [pc, #564]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dae8:	e01a      	b.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800daea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daee:	3308      	adds	r3, #8
 800daf0:	2100      	movs	r1, #0
 800daf2:	4618      	mov	r0, r3
 800daf4:	f002 fb0e 	bl	8010114 <RCCEx_PLL2_Config>
 800daf8:	4603      	mov	r3, r0
 800dafa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dafe:	e00f      	b.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800db00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db04:	3328      	adds	r3, #40	@ 0x28
 800db06:	2100      	movs	r1, #0
 800db08:	4618      	mov	r0, r3
 800db0a:	f002 fbb5 	bl	8010278 <RCCEx_PLL3_Config>
 800db0e:	4603      	mov	r3, r0
 800db10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800db14:	e004      	b.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db16:	2301      	movs	r3, #1
 800db18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db1c:	e000      	b.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800db1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10a      	bne.n	800db3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800db28:	4b7b      	ldr	r3, [pc, #492]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db2c:	f023 0107 	bic.w	r1, r3, #7
 800db30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db36:	4a78      	ldr	r2, [pc, #480]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db38:	430b      	orrs	r3, r1
 800db3a:	6513      	str	r3, [r2, #80]	@ 0x50
 800db3c:	e003      	b.n	800db46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800db46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800db52:	f04f 0b00 	mov.w	fp, #0
 800db56:	ea5a 030b 	orrs.w	r3, sl, fp
 800db5a:	d04c      	beq.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800db5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db66:	d030      	beq.n	800dbca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800db68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db6c:	d829      	bhi.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800db6e:	2bc0      	cmp	r3, #192	@ 0xc0
 800db70:	d02d      	beq.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800db72:	2bc0      	cmp	r3, #192	@ 0xc0
 800db74:	d825      	bhi.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800db76:	2b80      	cmp	r3, #128	@ 0x80
 800db78:	d018      	beq.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800db7a:	2b80      	cmp	r3, #128	@ 0x80
 800db7c:	d821      	bhi.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d002      	beq.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800db82:	2b40      	cmp	r3, #64	@ 0x40
 800db84:	d007      	beq.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800db86:	e01c      	b.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db88:	4b63      	ldr	r3, [pc, #396]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8c:	4a62      	ldr	r2, [pc, #392]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800db94:	e01c      	b.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db9a:	3308      	adds	r3, #8
 800db9c:	2100      	movs	r1, #0
 800db9e:	4618      	mov	r0, r3
 800dba0:	f002 fab8 	bl	8010114 <RCCEx_PLL2_Config>
 800dba4:	4603      	mov	r3, r0
 800dba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dbaa:	e011      	b.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbb0:	3328      	adds	r3, #40	@ 0x28
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f002 fb5f 	bl	8010278 <RCCEx_PLL3_Config>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dbc0:	e006      	b.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbc8:	e002      	b.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dbca:	bf00      	nop
 800dbcc:	e000      	b.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dbce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10a      	bne.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800dbd8:	4b4f      	ldr	r3, [pc, #316]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbdc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800dbe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dbe6:	4a4c      	ldr	r2, [pc, #304]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbe8:	430b      	orrs	r3, r1
 800dbea:	6513      	str	r3, [r2, #80]	@ 0x50
 800dbec:	e003      	b.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800dbf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800dc02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800dc06:	2300      	movs	r3, #0
 800dc08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800dc0c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800dc10:	460b      	mov	r3, r1
 800dc12:	4313      	orrs	r3, r2
 800dc14:	d053      	beq.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800dc16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dc1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dc22:	d035      	beq.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800dc24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dc28:	d82e      	bhi.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dc2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dc2e:	d031      	beq.n	800dc94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800dc30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dc34:	d828      	bhi.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dc36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dc3a:	d01a      	beq.n	800dc72 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800dc3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dc40:	d822      	bhi.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d003      	beq.n	800dc4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800dc46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc4a:	d007      	beq.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800dc4c:	e01c      	b.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc4e:	4b32      	ldr	r3, [pc, #200]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc52:	4a31      	ldr	r2, [pc, #196]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc5a:	e01c      	b.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc60:	3308      	adds	r3, #8
 800dc62:	2100      	movs	r1, #0
 800dc64:	4618      	mov	r0, r3
 800dc66:	f002 fa55 	bl	8010114 <RCCEx_PLL2_Config>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dc70:	e011      	b.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc76:	3328      	adds	r3, #40	@ 0x28
 800dc78:	2100      	movs	r1, #0
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f002 fafc 	bl	8010278 <RCCEx_PLL3_Config>
 800dc80:	4603      	mov	r3, r0
 800dc82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc86:	e006      	b.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc8e:	e002      	b.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800dc90:	bf00      	nop
 800dc92:	e000      	b.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800dc94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d10b      	bne.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800dc9e:	4b1e      	ldr	r3, [pc, #120]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dca2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800dca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dcae:	4a1a      	ldr	r2, [pc, #104]	@ (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dcb0:	430b      	orrs	r3, r1
 800dcb2:	6593      	str	r3, [r2, #88]	@ 0x58
 800dcb4:	e003      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800dcbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800dcca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800dcce:	2300      	movs	r3, #0
 800dcd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800dcd4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800dcd8:	460b      	mov	r3, r1
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	d056      	beq.n	800dd8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800dcde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dce2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dce6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dcea:	d038      	beq.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800dcec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dcf0:	d831      	bhi.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dcf2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dcf6:	d034      	beq.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800dcf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dcfc:	d82b      	bhi.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dcfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd02:	d01d      	beq.n	800dd40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800dd04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd08:	d825      	bhi.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d006      	beq.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800dd0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd12:	d00a      	beq.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800dd14:	e01f      	b.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dd16:	bf00      	nop
 800dd18:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd1c:	4ba2      	ldr	r3, [pc, #648]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd20:	4aa1      	ldr	r2, [pc, #644]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dd28:	e01c      	b.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd2e:	3308      	adds	r3, #8
 800dd30:	2100      	movs	r1, #0
 800dd32:	4618      	mov	r0, r3
 800dd34:	f002 f9ee 	bl	8010114 <RCCEx_PLL2_Config>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dd3e:	e011      	b.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd44:	3328      	adds	r3, #40	@ 0x28
 800dd46:	2100      	movs	r1, #0
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f002 fa95 	bl	8010278 <RCCEx_PLL3_Config>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dd54:	e006      	b.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dd56:	2301      	movs	r3, #1
 800dd58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd5c:	e002      	b.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dd5e:	bf00      	nop
 800dd60:	e000      	b.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dd62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d10b      	bne.n	800dd84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dd6c:	4b8e      	ldr	r3, [pc, #568]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800dd74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dd7c:	4a8a      	ldr	r2, [pc, #552]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd7e:	430b      	orrs	r3, r1
 800dd80:	6593      	str	r3, [r2, #88]	@ 0x58
 800dd82:	e003      	b.n	800dd8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800dd98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dda2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800dda6:	460b      	mov	r3, r1
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	d03a      	beq.n	800de22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ddac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddb2:	2b30      	cmp	r3, #48	@ 0x30
 800ddb4:	d01f      	beq.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ddb6:	2b30      	cmp	r3, #48	@ 0x30
 800ddb8:	d819      	bhi.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ddba:	2b20      	cmp	r3, #32
 800ddbc:	d00c      	beq.n	800ddd8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ddbe:	2b20      	cmp	r3, #32
 800ddc0:	d815      	bhi.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d019      	beq.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ddc6:	2b10      	cmp	r3, #16
 800ddc8:	d111      	bne.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ddca:	4b77      	ldr	r3, [pc, #476]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ddcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddce:	4a76      	ldr	r2, [pc, #472]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ddd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ddd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ddd6:	e011      	b.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ddd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dddc:	3308      	adds	r3, #8
 800ddde:	2102      	movs	r1, #2
 800dde0:	4618      	mov	r0, r3
 800dde2:	f002 f997 	bl	8010114 <RCCEx_PLL2_Config>
 800dde6:	4603      	mov	r3, r0
 800dde8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ddec:	e006      	b.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ddf4:	e002      	b.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ddf6:	bf00      	nop
 800ddf8:	e000      	b.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ddfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10a      	bne.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800de04:	4b68      	ldr	r3, [pc, #416]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800de0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de12:	4a65      	ldr	r2, [pc, #404]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de14:	430b      	orrs	r3, r1
 800de16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800de18:	e003      	b.n	800de22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800de22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800de2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800de32:	2300      	movs	r3, #0
 800de34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800de38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800de3c:	460b      	mov	r3, r1
 800de3e:	4313      	orrs	r3, r2
 800de40:	d051      	beq.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800de42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800de4c:	d035      	beq.n	800deba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800de4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800de52:	d82e      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800de54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800de58:	d031      	beq.n	800debe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800de5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800de5e:	d828      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800de60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de64:	d01a      	beq.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800de66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de6a:	d822      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d003      	beq.n	800de78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800de70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de74:	d007      	beq.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800de76:	e01c      	b.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de78:	4b4b      	ldr	r3, [pc, #300]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de7c:	4a4a      	ldr	r2, [pc, #296]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800de84:	e01c      	b.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de8a:	3308      	adds	r3, #8
 800de8c:	2100      	movs	r1, #0
 800de8e:	4618      	mov	r0, r3
 800de90:	f002 f940 	bl	8010114 <RCCEx_PLL2_Config>
 800de94:	4603      	mov	r3, r0
 800de96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800de9a:	e011      	b.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800de9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dea0:	3328      	adds	r3, #40	@ 0x28
 800dea2:	2100      	movs	r1, #0
 800dea4:	4618      	mov	r0, r3
 800dea6:	f002 f9e7 	bl	8010278 <RCCEx_PLL3_Config>
 800deaa:	4603      	mov	r3, r0
 800deac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800deb0:	e006      	b.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800deb8:	e002      	b.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800deba:	bf00      	nop
 800debc:	e000      	b.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800debe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10a      	bne.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dec8:	4b37      	ldr	r3, [pc, #220]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800deca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800decc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ded0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ded4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ded6:	4a34      	ldr	r2, [pc, #208]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ded8:	430b      	orrs	r3, r1
 800deda:	6513      	str	r3, [r2, #80]	@ 0x50
 800dedc:	e003      	b.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800def2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800def6:	2300      	movs	r3, #0
 800def8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800defc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800df00:	460b      	mov	r3, r1
 800df02:	4313      	orrs	r3, r2
 800df04:	d056      	beq.n	800dfb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800df06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800df10:	d033      	beq.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800df12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800df16:	d82c      	bhi.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800df18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800df1c:	d02f      	beq.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800df1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800df22:	d826      	bhi.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800df24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800df28:	d02b      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800df2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800df2e:	d820      	bhi.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800df30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df34:	d012      	beq.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800df36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df3a:	d81a      	bhi.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d022      	beq.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800df40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df44:	d115      	bne.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800df46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df4a:	3308      	adds	r3, #8
 800df4c:	2101      	movs	r1, #1
 800df4e:	4618      	mov	r0, r3
 800df50:	f002 f8e0 	bl	8010114 <RCCEx_PLL2_Config>
 800df54:	4603      	mov	r3, r0
 800df56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800df5a:	e015      	b.n	800df88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800df5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df60:	3328      	adds	r3, #40	@ 0x28
 800df62:	2101      	movs	r1, #1
 800df64:	4618      	mov	r0, r3
 800df66:	f002 f987 	bl	8010278 <RCCEx_PLL3_Config>
 800df6a:	4603      	mov	r3, r0
 800df6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800df70:	e00a      	b.n	800df88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df72:	2301      	movs	r3, #1
 800df74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df78:	e006      	b.n	800df88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800df7a:	bf00      	nop
 800df7c:	e004      	b.n	800df88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800df7e:	bf00      	nop
 800df80:	e002      	b.n	800df88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800df82:	bf00      	nop
 800df84:	e000      	b.n	800df88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800df86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d10d      	bne.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800df90:	4b05      	ldr	r3, [pc, #20]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800df98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df9e:	4a02      	ldr	r2, [pc, #8]	@ (800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dfa0:	430b      	orrs	r3, r1
 800dfa2:	6513      	str	r3, [r2, #80]	@ 0x50
 800dfa4:	e006      	b.n	800dfb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dfa6:	bf00      	nop
 800dfa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dfb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800dfc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dfca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	d055      	beq.n	800e080 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800dfd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dfdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dfe0:	d033      	beq.n	800e04a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800dfe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dfe6:	d82c      	bhi.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dfe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfec:	d02f      	beq.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800dfee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dff2:	d826      	bhi.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dff4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dff8:	d02b      	beq.n	800e052 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800dffa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dffe:	d820      	bhi.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e004:	d012      	beq.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e00a:	d81a      	bhi.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d022      	beq.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e010:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e014:	d115      	bne.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e01a:	3308      	adds	r3, #8
 800e01c:	2101      	movs	r1, #1
 800e01e:	4618      	mov	r0, r3
 800e020:	f002 f878 	bl	8010114 <RCCEx_PLL2_Config>
 800e024:	4603      	mov	r3, r0
 800e026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e02a:	e015      	b.n	800e058 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e030:	3328      	adds	r3, #40	@ 0x28
 800e032:	2101      	movs	r1, #1
 800e034:	4618      	mov	r0, r3
 800e036:	f002 f91f 	bl	8010278 <RCCEx_PLL3_Config>
 800e03a:	4603      	mov	r3, r0
 800e03c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e040:	e00a      	b.n	800e058 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e042:	2301      	movs	r3, #1
 800e044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e048:	e006      	b.n	800e058 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e04a:	bf00      	nop
 800e04c:	e004      	b.n	800e058 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e04e:	bf00      	nop
 800e050:	e002      	b.n	800e058 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e052:	bf00      	nop
 800e054:	e000      	b.n	800e058 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e056:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10b      	bne.n	800e078 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e060:	4ba3      	ldr	r3, [pc, #652]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e064:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e06c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e070:	4a9f      	ldr	r2, [pc, #636]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e072:	430b      	orrs	r3, r1
 800e074:	6593      	str	r3, [r2, #88]	@ 0x58
 800e076:	e003      	b.n	800e080 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e07c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e088:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e08c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e090:	2300      	movs	r3, #0
 800e092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e096:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e09a:	460b      	mov	r3, r1
 800e09c:	4313      	orrs	r3, r2
 800e09e:	d037      	beq.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e0aa:	d00e      	beq.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e0ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e0b0:	d816      	bhi.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d018      	beq.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e0b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0ba:	d111      	bne.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0bc:	4b8c      	ldr	r3, [pc, #560]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c0:	4a8b      	ldr	r2, [pc, #556]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e0c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e0c8:	e00f      	b.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0ce:	3308      	adds	r3, #8
 800e0d0:	2101      	movs	r1, #1
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f002 f81e 	bl	8010114 <RCCEx_PLL2_Config>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e0de:	e004      	b.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e0e6:	e000      	b.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e0e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d10a      	bne.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e0f2:	4b7f      	ldr	r3, [pc, #508]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e100:	4a7b      	ldr	r2, [pc, #492]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e102:	430b      	orrs	r3, r1
 800e104:	6513      	str	r3, [r2, #80]	@ 0x50
 800e106:	e003      	b.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e10c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e11c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e120:	2300      	movs	r3, #0
 800e122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e126:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e12a:	460b      	mov	r3, r1
 800e12c:	4313      	orrs	r3, r2
 800e12e:	d039      	beq.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e136:	2b03      	cmp	r3, #3
 800e138:	d81c      	bhi.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e13a:	a201      	add	r2, pc, #4	@ (adr r2, 800e140 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e140:	0800e17d 	.word	0x0800e17d
 800e144:	0800e151 	.word	0x0800e151
 800e148:	0800e15f 	.word	0x0800e15f
 800e14c:	0800e17d 	.word	0x0800e17d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e150:	4b67      	ldr	r3, [pc, #412]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e154:	4a66      	ldr	r2, [pc, #408]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e15a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e15c:	e00f      	b.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e162:	3308      	adds	r3, #8
 800e164:	2102      	movs	r1, #2
 800e166:	4618      	mov	r0, r3
 800e168:	f001 ffd4 	bl	8010114 <RCCEx_PLL2_Config>
 800e16c:	4603      	mov	r3, r0
 800e16e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e172:	e004      	b.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e17a:	e000      	b.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e17c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e17e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10a      	bne.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e186:	4b5a      	ldr	r3, [pc, #360]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e18a:	f023 0103 	bic.w	r1, r3, #3
 800e18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e194:	4a56      	ldr	r2, [pc, #344]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e196:	430b      	orrs	r3, r1
 800e198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e19a:	e003      	b.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e19c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e1a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e1b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e1ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e1be:	460b      	mov	r3, r1
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	f000 809f 	beq.w	800e304 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e1c6:	4b4b      	ldr	r3, [pc, #300]	@ (800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a4a      	ldr	r2, [pc, #296]	@ (800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e1cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e1d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e1d2:	f7f4 f933 	bl	800243c <HAL_GetTick>
 800e1d6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e1da:	e00b      	b.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e1dc:	f7f4 f92e 	bl	800243c <HAL_GetTick>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	2b64      	cmp	r3, #100	@ 0x64
 800e1ea:	d903      	bls.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e1ec:	2303      	movs	r3, #3
 800e1ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e1f2:	e005      	b.n	800e200 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e1f4:	4b3f      	ldr	r3, [pc, #252]	@ (800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d0ed      	beq.n	800e1dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e204:	2b00      	cmp	r3, #0
 800e206:	d179      	bne.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e208:	4b39      	ldr	r3, [pc, #228]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e20a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e210:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e214:	4053      	eors	r3, r2
 800e216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d015      	beq.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e21e:	4b34      	ldr	r3, [pc, #208]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e226:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e22a:	4b31      	ldr	r3, [pc, #196]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e22c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e22e:	4a30      	ldr	r2, [pc, #192]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e234:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e236:	4b2e      	ldr	r3, [pc, #184]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e23a:	4a2d      	ldr	r2, [pc, #180]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e23c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e240:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e242:	4a2b      	ldr	r2, [pc, #172]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e248:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e24e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e256:	d118      	bne.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e258:	f7f4 f8f0 	bl	800243c <HAL_GetTick>
 800e25c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e260:	e00d      	b.n	800e27e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e262:	f7f4 f8eb 	bl	800243c <HAL_GetTick>
 800e266:	4602      	mov	r2, r0
 800e268:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e26c:	1ad2      	subs	r2, r2, r3
 800e26e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e272:	429a      	cmp	r2, r3
 800e274:	d903      	bls.n	800e27e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e276:	2303      	movs	r3, #3
 800e278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800e27c:	e005      	b.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e27e:	4b1c      	ldr	r3, [pc, #112]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e282:	f003 0302 	and.w	r3, r3, #2
 800e286:	2b00      	cmp	r3, #0
 800e288:	d0eb      	beq.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e28a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d129      	bne.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e29a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e29e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2a2:	d10e      	bne.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e2a4:	4b12      	ldr	r3, [pc, #72]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e2b4:	091a      	lsrs	r2, r3, #4
 800e2b6:	4b10      	ldr	r3, [pc, #64]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e2b8:	4013      	ands	r3, r2
 800e2ba:	4a0d      	ldr	r2, [pc, #52]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2bc:	430b      	orrs	r3, r1
 800e2be:	6113      	str	r3, [r2, #16]
 800e2c0:	e005      	b.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e2c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	4a0a      	ldr	r2, [pc, #40]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e2cc:	6113      	str	r3, [r2, #16]
 800e2ce:	4b08      	ldr	r3, [pc, #32]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e2da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e2de:	4a04      	ldr	r2, [pc, #16]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2e0:	430b      	orrs	r3, r1
 800e2e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800e2e4:	e00e      	b.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e2e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e2ee:	e009      	b.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e2f0:	58024400 	.word	0x58024400
 800e2f4:	58024800 	.word	0x58024800
 800e2f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30c:	f002 0301 	and.w	r3, r2, #1
 800e310:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e314:	2300      	movs	r3, #0
 800e316:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e31a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e31e:	460b      	mov	r3, r1
 800e320:	4313      	orrs	r3, r2
 800e322:	f000 8089 	beq.w	800e438 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e32a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e32c:	2b28      	cmp	r3, #40	@ 0x28
 800e32e:	d86b      	bhi.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e330:	a201      	add	r2, pc, #4	@ (adr r2, 800e338 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e336:	bf00      	nop
 800e338:	0800e411 	.word	0x0800e411
 800e33c:	0800e409 	.word	0x0800e409
 800e340:	0800e409 	.word	0x0800e409
 800e344:	0800e409 	.word	0x0800e409
 800e348:	0800e409 	.word	0x0800e409
 800e34c:	0800e409 	.word	0x0800e409
 800e350:	0800e409 	.word	0x0800e409
 800e354:	0800e409 	.word	0x0800e409
 800e358:	0800e3dd 	.word	0x0800e3dd
 800e35c:	0800e409 	.word	0x0800e409
 800e360:	0800e409 	.word	0x0800e409
 800e364:	0800e409 	.word	0x0800e409
 800e368:	0800e409 	.word	0x0800e409
 800e36c:	0800e409 	.word	0x0800e409
 800e370:	0800e409 	.word	0x0800e409
 800e374:	0800e409 	.word	0x0800e409
 800e378:	0800e3f3 	.word	0x0800e3f3
 800e37c:	0800e409 	.word	0x0800e409
 800e380:	0800e409 	.word	0x0800e409
 800e384:	0800e409 	.word	0x0800e409
 800e388:	0800e409 	.word	0x0800e409
 800e38c:	0800e409 	.word	0x0800e409
 800e390:	0800e409 	.word	0x0800e409
 800e394:	0800e409 	.word	0x0800e409
 800e398:	0800e411 	.word	0x0800e411
 800e39c:	0800e409 	.word	0x0800e409
 800e3a0:	0800e409 	.word	0x0800e409
 800e3a4:	0800e409 	.word	0x0800e409
 800e3a8:	0800e409 	.word	0x0800e409
 800e3ac:	0800e409 	.word	0x0800e409
 800e3b0:	0800e409 	.word	0x0800e409
 800e3b4:	0800e409 	.word	0x0800e409
 800e3b8:	0800e411 	.word	0x0800e411
 800e3bc:	0800e409 	.word	0x0800e409
 800e3c0:	0800e409 	.word	0x0800e409
 800e3c4:	0800e409 	.word	0x0800e409
 800e3c8:	0800e409 	.word	0x0800e409
 800e3cc:	0800e409 	.word	0x0800e409
 800e3d0:	0800e409 	.word	0x0800e409
 800e3d4:	0800e409 	.word	0x0800e409
 800e3d8:	0800e411 	.word	0x0800e411
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3e0:	3308      	adds	r3, #8
 800e3e2:	2101      	movs	r1, #1
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f001 fe95 	bl	8010114 <RCCEx_PLL2_Config>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e3f0:	e00f      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3f6:	3328      	adds	r3, #40	@ 0x28
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f001 ff3c 	bl	8010278 <RCCEx_PLL3_Config>
 800e400:	4603      	mov	r3, r0
 800e402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e406:	e004      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e408:	2301      	movs	r3, #1
 800e40a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e40e:	e000      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e410:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10a      	bne.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e41a:	4bbf      	ldr	r3, [pc, #764]	@ (800e718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e41c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e41e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e428:	4abb      	ldr	r2, [pc, #748]	@ (800e718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e42a:	430b      	orrs	r3, r1
 800e42c:	6553      	str	r3, [r2, #84]	@ 0x54
 800e42e:	e003      	b.n	800e438 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e440:	f002 0302 	and.w	r3, r2, #2
 800e444:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e448:	2300      	movs	r3, #0
 800e44a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e44e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e452:	460b      	mov	r3, r1
 800e454:	4313      	orrs	r3, r2
 800e456:	d041      	beq.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e45c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e45e:	2b05      	cmp	r3, #5
 800e460:	d824      	bhi.n	800e4ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e462:	a201      	add	r2, pc, #4	@ (adr r2, 800e468 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e468:	0800e4b5 	.word	0x0800e4b5
 800e46c:	0800e481 	.word	0x0800e481
 800e470:	0800e497 	.word	0x0800e497
 800e474:	0800e4b5 	.word	0x0800e4b5
 800e478:	0800e4b5 	.word	0x0800e4b5
 800e47c:	0800e4b5 	.word	0x0800e4b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e484:	3308      	adds	r3, #8
 800e486:	2101      	movs	r1, #1
 800e488:	4618      	mov	r0, r3
 800e48a:	f001 fe43 	bl	8010114 <RCCEx_PLL2_Config>
 800e48e:	4603      	mov	r3, r0
 800e490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e494:	e00f      	b.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e49a:	3328      	adds	r3, #40	@ 0x28
 800e49c:	2101      	movs	r1, #1
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f001 feea 	bl	8010278 <RCCEx_PLL3_Config>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e4aa:	e004      	b.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e4b2:	e000      	b.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e4b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d10a      	bne.n	800e4d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e4be:	4b96      	ldr	r3, [pc, #600]	@ (800e718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4c2:	f023 0107 	bic.w	r1, r3, #7
 800e4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4cc:	4a92      	ldr	r2, [pc, #584]	@ (800e718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4ce:	430b      	orrs	r3, r1
 800e4d0:	6553      	str	r3, [r2, #84]	@ 0x54
 800e4d2:	e003      	b.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e4:	f002 0304 	and.w	r3, r2, #4
 800e4e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e4f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	d044      	beq.n	800e586 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e500:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e504:	2b05      	cmp	r3, #5
 800e506:	d825      	bhi.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e508:	a201      	add	r2, pc, #4	@ (adr r2, 800e510 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50e:	bf00      	nop
 800e510:	0800e55d 	.word	0x0800e55d
 800e514:	0800e529 	.word	0x0800e529
 800e518:	0800e53f 	.word	0x0800e53f
 800e51c:	0800e55d 	.word	0x0800e55d
 800e520:	0800e55d 	.word	0x0800e55d
 800e524:	0800e55d 	.word	0x0800e55d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e52c:	3308      	adds	r3, #8
 800e52e:	2101      	movs	r1, #1
 800e530:	4618      	mov	r0, r3
 800e532:	f001 fdef 	bl	8010114 <RCCEx_PLL2_Config>
 800e536:	4603      	mov	r3, r0
 800e538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e53c:	e00f      	b.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e542:	3328      	adds	r3, #40	@ 0x28
 800e544:	2101      	movs	r1, #1
 800e546:	4618      	mov	r0, r3
 800e548:	f001 fe96 	bl	8010278 <RCCEx_PLL3_Config>
 800e54c:	4603      	mov	r3, r0
 800e54e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e552:	e004      	b.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e554:	2301      	movs	r3, #1
 800e556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e55a:	e000      	b.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e55c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e55e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e562:	2b00      	cmp	r3, #0
 800e564:	d10b      	bne.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e566:	4b6c      	ldr	r3, [pc, #432]	@ (800e718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e56a:	f023 0107 	bic.w	r1, r3, #7
 800e56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e576:	4a68      	ldr	r2, [pc, #416]	@ (800e718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e578:	430b      	orrs	r3, r1
 800e57a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e57c:	e003      	b.n	800e586 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e57e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f002 0320 	and.w	r3, r2, #32
 800e592:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e596:	2300      	movs	r3, #0
 800e598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e59c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	d055      	beq.n	800e652 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e5b2:	d033      	beq.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e5b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e5b8:	d82c      	bhi.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5be:	d02f      	beq.n	800e620 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e5c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5c4:	d826      	bhi.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e5c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e5ca:	d02b      	beq.n	800e624 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e5cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e5d0:	d820      	bhi.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e5d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e5d6:	d012      	beq.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e5d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e5dc:	d81a      	bhi.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d022      	beq.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e5e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e5e6:	d115      	bne.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f001 fd8f 	bl	8010114 <RCCEx_PLL2_Config>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e5fc:	e015      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e602:	3328      	adds	r3, #40	@ 0x28
 800e604:	2102      	movs	r1, #2
 800e606:	4618      	mov	r0, r3
 800e608:	f001 fe36 	bl	8010278 <RCCEx_PLL3_Config>
 800e60c:	4603      	mov	r3, r0
 800e60e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e612:	e00a      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e61a:	e006      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e61c:	bf00      	nop
 800e61e:	e004      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e620:	bf00      	nop
 800e622:	e002      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e624:	bf00      	nop
 800e626:	e000      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e62a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d10b      	bne.n	800e64a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e632:	4b39      	ldr	r3, [pc, #228]	@ (800e718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e636:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e642:	4a35      	ldr	r2, [pc, #212]	@ (800e718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e644:	430b      	orrs	r3, r1
 800e646:	6553      	str	r3, [r2, #84]	@ 0x54
 800e648:	e003      	b.n	800e652 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e64a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e64e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e65e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e662:	2300      	movs	r3, #0
 800e664:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e668:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e66c:	460b      	mov	r3, r1
 800e66e:	4313      	orrs	r3, r2
 800e670:	d058      	beq.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e67a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e67e:	d033      	beq.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e680:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e684:	d82c      	bhi.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e68a:	d02f      	beq.n	800e6ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e68c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e690:	d826      	bhi.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e696:	d02b      	beq.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e698:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e69c:	d820      	bhi.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e69e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6a2:	d012      	beq.n	800e6ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e6a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6a8:	d81a      	bhi.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d022      	beq.n	800e6f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e6ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e6b2:	d115      	bne.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6b8:	3308      	adds	r3, #8
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f001 fd29 	bl	8010114 <RCCEx_PLL2_Config>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e6c8:	e015      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6ce:	3328      	adds	r3, #40	@ 0x28
 800e6d0:	2102      	movs	r1, #2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f001 fdd0 	bl	8010278 <RCCEx_PLL3_Config>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e6de:	e00a      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e6e6:	e006      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e6e8:	bf00      	nop
 800e6ea:	e004      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e6ec:	bf00      	nop
 800e6ee:	e002      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e6f0:	bf00      	nop
 800e6f2:	e000      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e6f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d10e      	bne.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e6fe:	4b06      	ldr	r3, [pc, #24]	@ (800e718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e702:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e70a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e70e:	4a02      	ldr	r2, [pc, #8]	@ (800e718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e710:	430b      	orrs	r3, r1
 800e712:	6593      	str	r3, [r2, #88]	@ 0x58
 800e714:	e006      	b.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e716:	bf00      	nop
 800e718:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e71c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e734:	2300      	movs	r3, #0
 800e736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e73a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e73e:	460b      	mov	r3, r1
 800e740:	4313      	orrs	r3, r2
 800e742:	d055      	beq.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e74c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e750:	d033      	beq.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e752:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e756:	d82c      	bhi.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e75c:	d02f      	beq.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e75e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e762:	d826      	bhi.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e764:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e768:	d02b      	beq.n	800e7c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e76a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e76e:	d820      	bhi.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e774:	d012      	beq.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e776:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e77a:	d81a      	bhi.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d022      	beq.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e784:	d115      	bne.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e78a:	3308      	adds	r3, #8
 800e78c:	2100      	movs	r1, #0
 800e78e:	4618      	mov	r0, r3
 800e790:	f001 fcc0 	bl	8010114 <RCCEx_PLL2_Config>
 800e794:	4603      	mov	r3, r0
 800e796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e79a:	e015      	b.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7a0:	3328      	adds	r3, #40	@ 0x28
 800e7a2:	2102      	movs	r1, #2
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f001 fd67 	bl	8010278 <RCCEx_PLL3_Config>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e7b0:	e00a      	b.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e7b8:	e006      	b.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e7ba:	bf00      	nop
 800e7bc:	e004      	b.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e7be:	bf00      	nop
 800e7c0:	e002      	b.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e7c2:	bf00      	nop
 800e7c4:	e000      	b.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e7c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10b      	bne.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e7d0:	4ba1      	ldr	r3, [pc, #644]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e7e0:	4a9d      	ldr	r2, [pc, #628]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7e2:	430b      	orrs	r3, r1
 800e7e4:	6593      	str	r3, [r2, #88]	@ 0x58
 800e7e6:	e003      	b.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f8:	f002 0308 	and.w	r3, r2, #8
 800e7fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e800:	2300      	movs	r3, #0
 800e802:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e806:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e80a:	460b      	mov	r3, r1
 800e80c:	4313      	orrs	r3, r2
 800e80e:	d01e      	beq.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e81c:	d10c      	bne.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e822:	3328      	adds	r3, #40	@ 0x28
 800e824:	2102      	movs	r1, #2
 800e826:	4618      	mov	r0, r3
 800e828:	f001 fd26 	bl	8010278 <RCCEx_PLL3_Config>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d002      	beq.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e838:	4b87      	ldr	r3, [pc, #540]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e83a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e83c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e848:	4a83      	ldr	r2, [pc, #524]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e84a:	430b      	orrs	r3, r1
 800e84c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e856:	f002 0310 	and.w	r3, r2, #16
 800e85a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e85e:	2300      	movs	r3, #0
 800e860:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e864:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e868:	460b      	mov	r3, r1
 800e86a:	4313      	orrs	r3, r2
 800e86c:	d01e      	beq.n	800e8ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e872:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e87a:	d10c      	bne.n	800e896 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e880:	3328      	adds	r3, #40	@ 0x28
 800e882:	2102      	movs	r1, #2
 800e884:	4618      	mov	r0, r3
 800e886:	f001 fcf7 	bl	8010278 <RCCEx_PLL3_Config>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d002      	beq.n	800e896 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e890:	2301      	movs	r3, #1
 800e892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e896:	4b70      	ldr	r3, [pc, #448]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e89a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e8a6:	4a6c      	ldr	r2, [pc, #432]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8a8:	430b      	orrs	r3, r1
 800e8aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e8ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e8b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e8bc:	2300      	movs	r3, #0
 800e8be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e8c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	d03e      	beq.n	800e94a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e8d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e8d8:	d022      	beq.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e8da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e8de:	d81b      	bhi.n	800e918 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d003      	beq.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e8e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8e8:	d00b      	beq.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e8ea:	e015      	b.n	800e918 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	2100      	movs	r1, #0
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f001 fc0d 	bl	8010114 <RCCEx_PLL2_Config>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e900:	e00f      	b.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e906:	3328      	adds	r3, #40	@ 0x28
 800e908:	2102      	movs	r1, #2
 800e90a:	4618      	mov	r0, r3
 800e90c:	f001 fcb4 	bl	8010278 <RCCEx_PLL3_Config>
 800e910:	4603      	mov	r3, r0
 800e912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e916:	e004      	b.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e918:	2301      	movs	r3, #1
 800e91a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e91e:	e000      	b.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e920:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e926:	2b00      	cmp	r3, #0
 800e928:	d10b      	bne.n	800e942 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e92a:	4b4b      	ldr	r3, [pc, #300]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e92c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e92e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e936:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e93a:	4a47      	ldr	r2, [pc, #284]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e93c:	430b      	orrs	r3, r1
 800e93e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e940:	e003      	b.n	800e94a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e952:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e956:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e958:	2300      	movs	r3, #0
 800e95a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e95c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e960:	460b      	mov	r3, r1
 800e962:	4313      	orrs	r3, r2
 800e964:	d03b      	beq.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e96e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e972:	d01f      	beq.n	800e9b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e974:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e978:	d818      	bhi.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e97a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e97e:	d003      	beq.n	800e988 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e980:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e984:	d007      	beq.n	800e996 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e986:	e011      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e988:	4b33      	ldr	r3, [pc, #204]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e98c:	4a32      	ldr	r2, [pc, #200]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e98e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e994:	e00f      	b.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e99a:	3328      	adds	r3, #40	@ 0x28
 800e99c:	2101      	movs	r1, #1
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f001 fc6a 	bl	8010278 <RCCEx_PLL3_Config>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e9aa:	e004      	b.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e9b2:	e000      	b.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e9b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d10b      	bne.n	800e9d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e9be:	4b26      	ldr	r3, [pc, #152]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9ce:	4a22      	ldr	r2, [pc, #136]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9d0:	430b      	orrs	r3, r1
 800e9d2:	6553      	str	r3, [r2, #84]	@ 0x54
 800e9d4:	e003      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e9ea:	673b      	str	r3, [r7, #112]	@ 0x70
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	677b      	str	r3, [r7, #116]	@ 0x74
 800e9f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	d034      	beq.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d003      	beq.n	800ea0c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ea04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea08:	d007      	beq.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ea0a:	e011      	b.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea0c:	4b12      	ldr	r3, [pc, #72]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea10:	4a11      	ldr	r2, [pc, #68]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ea16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ea18:	e00e      	b.n	800ea38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ea1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea1e:	3308      	adds	r3, #8
 800ea20:	2102      	movs	r1, #2
 800ea22:	4618      	mov	r0, r3
 800ea24:	f001 fb76 	bl	8010114 <RCCEx_PLL2_Config>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ea2e:	e003      	b.n	800ea38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ea30:	2301      	movs	r3, #1
 800ea32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ea36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d10d      	bne.n	800ea5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ea40:	4b05      	ldr	r3, [pc, #20]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea44:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ea48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea4e:	4a02      	ldr	r2, [pc, #8]	@ (800ea58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea50:	430b      	orrs	r3, r1
 800ea52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ea54:	e006      	b.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ea56:	bf00      	nop
 800ea58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ea64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ea70:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ea72:	2300      	movs	r3, #0
 800ea74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ea76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	d00c      	beq.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ea80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea84:	3328      	adds	r3, #40	@ 0x28
 800ea86:	2102      	movs	r1, #2
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f001 fbf5 	bl	8010278 <RCCEx_PLL3_Config>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ea94:	2301      	movs	r3, #1
 800ea96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ea9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800eaa6:	663b      	str	r3, [r7, #96]	@ 0x60
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	667b      	str	r3, [r7, #100]	@ 0x64
 800eaac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800eab0:	460b      	mov	r3, r1
 800eab2:	4313      	orrs	r3, r2
 800eab4:	d038      	beq.n	800eb28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800eab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eabe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eac2:	d018      	beq.n	800eaf6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800eac4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eac8:	d811      	bhi.n	800eaee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800eaca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eace:	d014      	beq.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ead0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ead4:	d80b      	bhi.n	800eaee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d011      	beq.n	800eafe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800eada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eade:	d106      	bne.n	800eaee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eae0:	4bc3      	ldr	r3, [pc, #780]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eae4:	4ac2      	ldr	r2, [pc, #776]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eaea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800eaec:	e008      	b.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eaf4:	e004      	b.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800eaf6:	bf00      	nop
 800eaf8:	e002      	b.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800eafa:	bf00      	nop
 800eafc:	e000      	b.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800eafe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d10b      	bne.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800eb08:	4bb9      	ldr	r3, [pc, #740]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800eb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb18:	4ab5      	ldr	r2, [pc, #724]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb1a:	430b      	orrs	r3, r1
 800eb1c:	6553      	str	r3, [r2, #84]	@ 0x54
 800eb1e:	e003      	b.n	800eb28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800eb28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb30:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800eb34:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eb36:	2300      	movs	r3, #0
 800eb38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eb3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800eb3e:	460b      	mov	r3, r1
 800eb40:	4313      	orrs	r3, r2
 800eb42:	d009      	beq.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800eb44:	4baa      	ldr	r3, [pc, #680]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800eb4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb52:	4aa7      	ldr	r2, [pc, #668]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb54:	430b      	orrs	r3, r1
 800eb56:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800eb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb60:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800eb64:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb66:	2300      	movs	r3, #0
 800eb68:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800eb6e:	460b      	mov	r3, r1
 800eb70:	4313      	orrs	r3, r2
 800eb72:	d00a      	beq.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800eb74:	4b9e      	ldr	r3, [pc, #632]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb76:	691b      	ldr	r3, [r3, #16]
 800eb78:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800eb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800eb84:	4a9a      	ldr	r2, [pc, #616]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb86:	430b      	orrs	r3, r1
 800eb88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800eb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800eb96:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb98:	2300      	movs	r3, #0
 800eb9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800eba0:	460b      	mov	r3, r1
 800eba2:	4313      	orrs	r3, r2
 800eba4:	d009      	beq.n	800ebba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800eba6:	4b92      	ldr	r3, [pc, #584]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebaa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ebae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebb4:	4a8e      	ldr	r2, [pc, #568]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ebb6:	430b      	orrs	r3, r1
 800ebb8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ebba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ebc6:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebc8:	2300      	movs	r3, #0
 800ebca:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebcc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	d00e      	beq.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ebd6:	4b86      	ldr	r3, [pc, #536]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ebd8:	691b      	ldr	r3, [r3, #16]
 800ebda:	4a85      	ldr	r2, [pc, #532]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ebdc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ebe0:	6113      	str	r3, [r2, #16]
 800ebe2:	4b83      	ldr	r3, [pc, #524]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ebe4:	6919      	ldr	r1, [r3, #16]
 800ebe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ebee:	4a80      	ldr	r2, [pc, #512]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ebf0:	430b      	orrs	r3, r1
 800ebf2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ebf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ec00:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec02:	2300      	movs	r3, #0
 800ec04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	d009      	beq.n	800ec24 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ec10:	4b77      	ldr	r3, [pc, #476]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec14:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ec18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec1e:	4a74      	ldr	r2, [pc, #464]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec20:	430b      	orrs	r3, r1
 800ec22:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ec24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ec30:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec32:	2300      	movs	r3, #0
 800ec34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	d00a      	beq.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ec40:	4b6b      	ldr	r3, [pc, #428]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec44:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ec48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec50:	4a67      	ldr	r2, [pc, #412]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec52:	430b      	orrs	r3, r1
 800ec54:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ec56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5e:	2100      	movs	r1, #0
 800ec60:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ec62:	f003 0301 	and.w	r3, r3, #1
 800ec66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	d011      	beq.n	800ec96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec76:	3308      	adds	r3, #8
 800ec78:	2100      	movs	r1, #0
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f001 fa4a 	bl	8010114 <RCCEx_PLL2_Config>
 800ec80:	4603      	mov	r3, r0
 800ec82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ec86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d003      	beq.n	800ec96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ec96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9e:	2100      	movs	r1, #0
 800eca0:	6239      	str	r1, [r7, #32]
 800eca2:	f003 0302 	and.w	r3, r3, #2
 800eca6:	627b      	str	r3, [r7, #36]	@ 0x24
 800eca8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ecac:	460b      	mov	r3, r1
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	d011      	beq.n	800ecd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ecb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecb6:	3308      	adds	r3, #8
 800ecb8:	2101      	movs	r1, #1
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f001 fa2a 	bl	8010114 <RCCEx_PLL2_Config>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ecc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d003      	beq.n	800ecd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ecd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecde:	2100      	movs	r1, #0
 800ece0:	61b9      	str	r1, [r7, #24]
 800ece2:	f003 0304 	and.w	r3, r3, #4
 800ece6:	61fb      	str	r3, [r7, #28]
 800ece8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ecec:	460b      	mov	r3, r1
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	d011      	beq.n	800ed16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ecf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecf6:	3308      	adds	r3, #8
 800ecf8:	2102      	movs	r1, #2
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f001 fa0a 	bl	8010114 <RCCEx_PLL2_Config>
 800ed00:	4603      	mov	r3, r0
 800ed02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ed06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d003      	beq.n	800ed16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ed16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1e:	2100      	movs	r1, #0
 800ed20:	6139      	str	r1, [r7, #16]
 800ed22:	f003 0308 	and.w	r3, r3, #8
 800ed26:	617b      	str	r3, [r7, #20]
 800ed28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	d011      	beq.n	800ed56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ed32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed36:	3328      	adds	r3, #40	@ 0x28
 800ed38:	2100      	movs	r1, #0
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f001 fa9c 	bl	8010278 <RCCEx_PLL3_Config>
 800ed40:	4603      	mov	r3, r0
 800ed42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ed46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d003      	beq.n	800ed56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ed56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5e:	2100      	movs	r1, #0
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	f003 0310 	and.w	r3, r3, #16
 800ed66:	60fb      	str	r3, [r7, #12]
 800ed68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	d011      	beq.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ed72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed76:	3328      	adds	r3, #40	@ 0x28
 800ed78:	2101      	movs	r1, #1
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f001 fa7c 	bl	8010278 <RCCEx_PLL3_Config>
 800ed80:	4603      	mov	r3, r0
 800ed82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ed86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d003      	beq.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ed96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9e:	2100      	movs	r1, #0
 800eda0:	6039      	str	r1, [r7, #0]
 800eda2:	f003 0320 	and.w	r3, r3, #32
 800eda6:	607b      	str	r3, [r7, #4]
 800eda8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800edac:	460b      	mov	r3, r1
 800edae:	4313      	orrs	r3, r2
 800edb0:	d011      	beq.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800edb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edb6:	3328      	adds	r3, #40	@ 0x28
 800edb8:	2102      	movs	r1, #2
 800edba:	4618      	mov	r0, r3
 800edbc:	f001 fa5c 	bl	8010278 <RCCEx_PLL3_Config>
 800edc0:	4603      	mov	r3, r0
 800edc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800edc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d003      	beq.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800edd6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d101      	bne.n	800ede2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	e000      	b.n	800ede4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ede2:	2301      	movs	r3, #1
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800edea:	46bd      	mov	sp, r7
 800edec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800edf0:	58024400 	.word	0x58024400

0800edf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b090      	sub	sp, #64	@ 0x40
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800edfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee02:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ee06:	430b      	orrs	r3, r1
 800ee08:	f040 8094 	bne.w	800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ee0c:	4b9e      	ldr	r3, [pc, #632]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee10:	f003 0307 	and.w	r3, r3, #7
 800ee14:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ee16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee18:	2b04      	cmp	r3, #4
 800ee1a:	f200 8087 	bhi.w	800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ee1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ee20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee24:	0800ee39 	.word	0x0800ee39
 800ee28:	0800ee61 	.word	0x0800ee61
 800ee2c:	0800ee89 	.word	0x0800ee89
 800ee30:	0800ef25 	.word	0x0800ef25
 800ee34:	0800eeb1 	.word	0x0800eeb1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee38:	4b93      	ldr	r3, [pc, #588]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee44:	d108      	bne.n	800ee58 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f001 f810 	bl	800fe70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee54:	f000 bd45 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee5c:	f000 bd41 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee60:	4b89      	ldr	r3, [pc, #548]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee6c:	d108      	bne.n	800ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee6e:	f107 0318 	add.w	r3, r7, #24
 800ee72:	4618      	mov	r0, r3
 800ee74:	f000 fd54 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ee78:	69bb      	ldr	r3, [r7, #24]
 800ee7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee7c:	f000 bd31 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee80:	2300      	movs	r3, #0
 800ee82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee84:	f000 bd2d 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee88:	4b7f      	ldr	r3, [pc, #508]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee94:	d108      	bne.n	800eea8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee96:	f107 030c 	add.w	r3, r7, #12
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f000 fe94 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eea4:	f000 bd1d 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eeac:	f000 bd19 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800eeb0:	4b75      	ldr	r3, [pc, #468]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eeb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eeb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eeb8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eeba:	4b73      	ldr	r3, [pc, #460]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f003 0304 	and.w	r3, r3, #4
 800eec2:	2b04      	cmp	r3, #4
 800eec4:	d10c      	bne.n	800eee0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800eec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d109      	bne.n	800eee0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eecc:	4b6e      	ldr	r3, [pc, #440]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	08db      	lsrs	r3, r3, #3
 800eed2:	f003 0303 	and.w	r3, r3, #3
 800eed6:	4a6d      	ldr	r2, [pc, #436]	@ (800f08c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800eed8:	fa22 f303 	lsr.w	r3, r2, r3
 800eedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eede:	e01f      	b.n	800ef20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eee0:	4b69      	ldr	r3, [pc, #420]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eeec:	d106      	bne.n	800eefc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800eeee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eef0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eef4:	d102      	bne.n	800eefc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eef6:	4b66      	ldr	r3, [pc, #408]	@ (800f090 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800eef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eefa:	e011      	b.n	800ef20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eefc:	4b62      	ldr	r3, [pc, #392]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef08:	d106      	bne.n	800ef18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ef0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef10:	d102      	bne.n	800ef18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ef12:	4b60      	ldr	r3, [pc, #384]	@ (800f094 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ef14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef16:	e003      	b.n	800ef20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ef1c:	f000 bce1 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef20:	f000 bcdf 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ef24:	4b5c      	ldr	r3, [pc, #368]	@ (800f098 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ef26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef28:	f000 bcdb 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef30:	f000 bcd7 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ef34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef38:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800ef3c:	430b      	orrs	r3, r1
 800ef3e:	f040 80ad 	bne.w	800f09c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ef42:	4b51      	ldr	r3, [pc, #324]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef46:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800ef4a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ef4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef52:	d056      	beq.n	800f002 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ef54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef5a:	f200 8090 	bhi.w	800f07e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef60:	2bc0      	cmp	r3, #192	@ 0xc0
 800ef62:	f000 8088 	beq.w	800f076 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ef66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef68:	2bc0      	cmp	r3, #192	@ 0xc0
 800ef6a:	f200 8088 	bhi.w	800f07e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef70:	2b80      	cmp	r3, #128	@ 0x80
 800ef72:	d032      	beq.n	800efda <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ef74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef76:	2b80      	cmp	r3, #128	@ 0x80
 800ef78:	f200 8081 	bhi.w	800f07e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ef7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d003      	beq.n	800ef8a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ef82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef84:	2b40      	cmp	r3, #64	@ 0x40
 800ef86:	d014      	beq.n	800efb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ef88:	e079      	b.n	800f07e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef8a:	4b3f      	ldr	r3, [pc, #252]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef96:	d108      	bne.n	800efaa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f000 ff67 	bl	800fe70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800efa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efa6:	f000 bc9c 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efae:	f000 bc98 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800efb2:	4b35      	ldr	r3, [pc, #212]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800efba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800efbe:	d108      	bne.n	800efd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efc0:	f107 0318 	add.w	r3, r7, #24
 800efc4:	4618      	mov	r0, r3
 800efc6:	f000 fcab 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efce:	f000 bc88 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efd2:	2300      	movs	r3, #0
 800efd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efd6:	f000 bc84 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800efda:	4b2b      	ldr	r3, [pc, #172]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800efe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efe6:	d108      	bne.n	800effa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efe8:	f107 030c 	add.w	r3, r7, #12
 800efec:	4618      	mov	r0, r3
 800efee:	f000 fdeb 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eff6:	f000 bc74 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800effa:	2300      	movs	r3, #0
 800effc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800effe:	f000 bc70 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f002:	4b21      	ldr	r3, [pc, #132]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f006:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f00a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f00c:	4b1e      	ldr	r3, [pc, #120]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f003 0304 	and.w	r3, r3, #4
 800f014:	2b04      	cmp	r3, #4
 800f016:	d10c      	bne.n	800f032 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800f018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d109      	bne.n	800f032 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f01e:	4b1a      	ldr	r3, [pc, #104]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	08db      	lsrs	r3, r3, #3
 800f024:	f003 0303 	and.w	r3, r3, #3
 800f028:	4a18      	ldr	r2, [pc, #96]	@ (800f08c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f02a:	fa22 f303 	lsr.w	r3, r2, r3
 800f02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f030:	e01f      	b.n	800f072 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f032:	4b15      	ldr	r3, [pc, #84]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f03a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f03e:	d106      	bne.n	800f04e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f046:	d102      	bne.n	800f04e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f048:	4b11      	ldr	r3, [pc, #68]	@ (800f090 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f04c:	e011      	b.n	800f072 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f04e:	4b0e      	ldr	r3, [pc, #56]	@ (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f05a:	d106      	bne.n	800f06a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800f05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f05e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f062:	d102      	bne.n	800f06a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f064:	4b0b      	ldr	r3, [pc, #44]	@ (800f094 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f068:	e003      	b.n	800f072 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f06e:	f000 bc38 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f072:	f000 bc36 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f076:	4b08      	ldr	r3, [pc, #32]	@ (800f098 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f07a:	f000 bc32 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f07e:	2300      	movs	r3, #0
 800f080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f082:	f000 bc2e 	b.w	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f086:	bf00      	nop
 800f088:	58024400 	.word	0x58024400
 800f08c:	03d09000 	.word	0x03d09000
 800f090:	003d0900 	.word	0x003d0900
 800f094:	017d7840 	.word	0x017d7840
 800f098:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f09c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0a0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f0a4:	430b      	orrs	r3, r1
 800f0a6:	f040 809c 	bne.w	800f1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f0aa:	4b9e      	ldr	r3, [pc, #632]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0ae:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800f0b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f0ba:	d054      	beq.n	800f166 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f0c2:	f200 808b 	bhi.w	800f1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f0cc:	f000 8083 	beq.w	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f0d6:	f200 8081 	bhi.w	800f1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f0e0:	d02f      	beq.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800f0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f0e8:	d878      	bhi.n	800f1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d004      	beq.n	800f0fa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f0f6:	d012      	beq.n	800f11e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f0f8:	e070      	b.n	800f1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f0fa:	4b8a      	ldr	r3, [pc, #552]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f106:	d107      	bne.n	800f118 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 feaf 	bl	800fe70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f116:	e3e4      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f118:	2300      	movs	r3, #0
 800f11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f11c:	e3e1      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f11e:	4b81      	ldr	r3, [pc, #516]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f12a:	d107      	bne.n	800f13c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f12c:	f107 0318 	add.w	r3, r7, #24
 800f130:	4618      	mov	r0, r3
 800f132:	f000 fbf5 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f13a:	e3d2      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f140:	e3cf      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f142:	4b78      	ldr	r3, [pc, #480]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f14a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f14e:	d107      	bne.n	800f160 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f150:	f107 030c 	add.w	r3, r7, #12
 800f154:	4618      	mov	r0, r3
 800f156:	f000 fd37 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f15e:	e3c0      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f160:	2300      	movs	r3, #0
 800f162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f164:	e3bd      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f166:	4b6f      	ldr	r3, [pc, #444]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f16a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f16e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f170:	4b6c      	ldr	r3, [pc, #432]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f003 0304 	and.w	r3, r3, #4
 800f178:	2b04      	cmp	r3, #4
 800f17a:	d10c      	bne.n	800f196 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d109      	bne.n	800f196 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f182:	4b68      	ldr	r3, [pc, #416]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	08db      	lsrs	r3, r3, #3
 800f188:	f003 0303 	and.w	r3, r3, #3
 800f18c:	4a66      	ldr	r2, [pc, #408]	@ (800f328 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f18e:	fa22 f303 	lsr.w	r3, r2, r3
 800f192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f194:	e01e      	b.n	800f1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f196:	4b63      	ldr	r3, [pc, #396]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f19e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f1a2:	d106      	bne.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f1aa:	d102      	bne.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f1ac:	4b5f      	ldr	r3, [pc, #380]	@ (800f32c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1b0:	e010      	b.n	800f1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f1b2:	4b5c      	ldr	r3, [pc, #368]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f1be:	d106      	bne.n	800f1ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f1c6:	d102      	bne.n	800f1ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f1c8:	4b59      	ldr	r3, [pc, #356]	@ (800f330 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1cc:	e002      	b.n	800f1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f1d2:	e386      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1d4:	e385      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f1d6:	4b57      	ldr	r3, [pc, #348]	@ (800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1da:	e382      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1e0:	e37f      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f1e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1e6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f1ea:	430b      	orrs	r3, r1
 800f1ec:	f040 80a7 	bne.w	800f33e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f1f0:	4b4c      	ldr	r3, [pc, #304]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f1f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1f4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800f1f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f200:	d055      	beq.n	800f2ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f204:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f208:	f200 8096 	bhi.w	800f338 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f20e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f212:	f000 8084 	beq.w	800f31e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f218:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f21c:	f200 808c 	bhi.w	800f338 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f222:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f226:	d030      	beq.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f22a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f22e:	f200 8083 	bhi.w	800f338 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f234:	2b00      	cmp	r3, #0
 800f236:	d004      	beq.n	800f242 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f23a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f23e:	d012      	beq.n	800f266 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f240:	e07a      	b.n	800f338 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f242:	4b38      	ldr	r3, [pc, #224]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f24a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f24e:	d107      	bne.n	800f260 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f254:	4618      	mov	r0, r3
 800f256:	f000 fe0b 	bl	800fe70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f25e:	e340      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f260:	2300      	movs	r3, #0
 800f262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f264:	e33d      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f266:	4b2f      	ldr	r3, [pc, #188]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f26e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f272:	d107      	bne.n	800f284 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f274:	f107 0318 	add.w	r3, r7, #24
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 fb51 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f27e:	69bb      	ldr	r3, [r7, #24]
 800f280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f282:	e32e      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f288:	e32b      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f28a:	4b26      	ldr	r3, [pc, #152]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f296:	d107      	bne.n	800f2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f298:	f107 030c 	add.w	r3, r7, #12
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 fc93 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2a6:	e31c      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2ac:	e319      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f2ae:	4b1d      	ldr	r3, [pc, #116]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f2b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f2b8:	4b1a      	ldr	r3, [pc, #104]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f003 0304 	and.w	r3, r3, #4
 800f2c0:	2b04      	cmp	r3, #4
 800f2c2:	d10c      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d109      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f2ca:	4b16      	ldr	r3, [pc, #88]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	08db      	lsrs	r3, r3, #3
 800f2d0:	f003 0303 	and.w	r3, r3, #3
 800f2d4:	4a14      	ldr	r2, [pc, #80]	@ (800f328 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800f2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2dc:	e01e      	b.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f2de:	4b11      	ldr	r3, [pc, #68]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2ea:	d106      	bne.n	800f2fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f2ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f2f2:	d102      	bne.n	800f2fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f2f4:	4b0d      	ldr	r3, [pc, #52]	@ (800f32c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2f8:	e010      	b.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f302:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f306:	d106      	bne.n	800f316 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f30a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f30e:	d102      	bne.n	800f316 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f310:	4b07      	ldr	r3, [pc, #28]	@ (800f330 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f314:	e002      	b.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f316:	2300      	movs	r3, #0
 800f318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f31a:	e2e2      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f31c:	e2e1      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f31e:	4b05      	ldr	r3, [pc, #20]	@ (800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f322:	e2de      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f324:	58024400 	.word	0x58024400
 800f328:	03d09000 	.word	0x03d09000
 800f32c:	003d0900 	.word	0x003d0900
 800f330:	017d7840 	.word	0x017d7840
 800f334:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f338:	2300      	movs	r3, #0
 800f33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f33c:	e2d1      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f33e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f342:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f346:	430b      	orrs	r3, r1
 800f348:	f040 809c 	bne.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f34c:	4b93      	ldr	r3, [pc, #588]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f34e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f350:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f354:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f35c:	d054      	beq.n	800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f364:	f200 808b 	bhi.w	800f47e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f36a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f36e:	f000 8083 	beq.w	800f478 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f374:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f378:	f200 8081 	bhi.w	800f47e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f37e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f382:	d02f      	beq.n	800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f38a:	d878      	bhi.n	800f47e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d004      	beq.n	800f39c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f398:	d012      	beq.n	800f3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f39a:	e070      	b.n	800f47e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f39c:	4b7f      	ldr	r3, [pc, #508]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f3a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f3a8:	d107      	bne.n	800f3ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f3aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f000 fd5e 	bl	800fe70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3b8:	e293      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3be:	e290      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f3c0:	4b76      	ldr	r3, [pc, #472]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f3c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f3cc:	d107      	bne.n	800f3de <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3ce:	f107 0318 	add.w	r3, r7, #24
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f000 faa4 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3dc:	e281      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3e2:	e27e      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f3e4:	4b6d      	ldr	r3, [pc, #436]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f3ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f3f0:	d107      	bne.n	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3f2:	f107 030c 	add.w	r3, r7, #12
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f000 fbe6 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f400:	e26f      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f406:	e26c      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f408:	4b64      	ldr	r3, [pc, #400]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f40a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f40c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f410:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f412:	4b62      	ldr	r3, [pc, #392]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f003 0304 	and.w	r3, r3, #4
 800f41a:	2b04      	cmp	r3, #4
 800f41c:	d10c      	bne.n	800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f420:	2b00      	cmp	r3, #0
 800f422:	d109      	bne.n	800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f424:	4b5d      	ldr	r3, [pc, #372]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	08db      	lsrs	r3, r3, #3
 800f42a:	f003 0303 	and.w	r3, r3, #3
 800f42e:	4a5c      	ldr	r2, [pc, #368]	@ (800f5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f430:	fa22 f303 	lsr.w	r3, r2, r3
 800f434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f436:	e01e      	b.n	800f476 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f438:	4b58      	ldr	r3, [pc, #352]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f444:	d106      	bne.n	800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f448:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f44c:	d102      	bne.n	800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f44e:	4b55      	ldr	r3, [pc, #340]	@ (800f5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f452:	e010      	b.n	800f476 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f454:	4b51      	ldr	r3, [pc, #324]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f45c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f460:	d106      	bne.n	800f470 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f468:	d102      	bne.n	800f470 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f46a:	4b4f      	ldr	r3, [pc, #316]	@ (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f46e:	e002      	b.n	800f476 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f470:	2300      	movs	r3, #0
 800f472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f474:	e235      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f476:	e234      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f478:	4b4c      	ldr	r3, [pc, #304]	@ (800f5ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f47c:	e231      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f47e:	2300      	movs	r3, #0
 800f480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f482:	e22e      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f488:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f48c:	430b      	orrs	r3, r1
 800f48e:	f040 808f 	bne.w	800f5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f492:	4b42      	ldr	r3, [pc, #264]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f496:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f49a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f49e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f4a2:	d06b      	beq.n	800f57c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f4aa:	d874      	bhi.n	800f596 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f4b2:	d056      	beq.n	800f562 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f4ba:	d86c      	bhi.n	800f596 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f4c2:	d03b      	beq.n	800f53c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f4ca:	d864      	bhi.n	800f596 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f4d2:	d021      	beq.n	800f518 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f4da:	d85c      	bhi.n	800f596 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d004      	beq.n	800f4ec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4e8:	d004      	beq.n	800f4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f4ea:	e054      	b.n	800f596 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f4ec:	f7fe fa4c 	bl	800d988 <HAL_RCC_GetPCLK1Freq>
 800f4f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f4f2:	e1f6      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4f4:	4b29      	ldr	r3, [pc, #164]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f500:	d107      	bne.n	800f512 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f502:	f107 0318 	add.w	r3, r7, #24
 800f506:	4618      	mov	r0, r3
 800f508:	f000 fa0a 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f510:	e1e7      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f512:	2300      	movs	r3, #0
 800f514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f516:	e1e4      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f518:	4b20      	ldr	r3, [pc, #128]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f524:	d107      	bne.n	800f536 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f526:	f107 030c 	add.w	r3, r7, #12
 800f52a:	4618      	mov	r0, r3
 800f52c:	f000 fb4c 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f534:	e1d5      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f536:	2300      	movs	r3, #0
 800f538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f53a:	e1d2      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f53c:	4b17      	ldr	r3, [pc, #92]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f003 0304 	and.w	r3, r3, #4
 800f544:	2b04      	cmp	r3, #4
 800f546:	d109      	bne.n	800f55c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f548:	4b14      	ldr	r3, [pc, #80]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	08db      	lsrs	r3, r3, #3
 800f54e:	f003 0303 	and.w	r3, r3, #3
 800f552:	4a13      	ldr	r2, [pc, #76]	@ (800f5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f554:	fa22 f303 	lsr.w	r3, r2, r3
 800f558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f55a:	e1c2      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f55c:	2300      	movs	r3, #0
 800f55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f560:	e1bf      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f562:	4b0e      	ldr	r3, [pc, #56]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f56a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f56e:	d102      	bne.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f570:	4b0c      	ldr	r3, [pc, #48]	@ (800f5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f574:	e1b5      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f57a:	e1b2      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f57c:	4b07      	ldr	r3, [pc, #28]	@ (800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f584:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f588:	d102      	bne.n	800f590 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f58a:	4b07      	ldr	r3, [pc, #28]	@ (800f5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f58e:	e1a8      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f590:	2300      	movs	r3, #0
 800f592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f594:	e1a5      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f596:	2300      	movs	r3, #0
 800f598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f59a:	e1a2      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f59c:	58024400 	.word	0x58024400
 800f5a0:	03d09000 	.word	0x03d09000
 800f5a4:	003d0900 	.word	0x003d0900
 800f5a8:	017d7840 	.word	0x017d7840
 800f5ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f5b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5b4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f5b8:	430b      	orrs	r3, r1
 800f5ba:	d173      	bne.n	800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f5bc:	4b9c      	ldr	r3, [pc, #624]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f5be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f5c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5cc:	d02f      	beq.n	800f62e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5d4:	d863      	bhi.n	800f69e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d004      	beq.n	800f5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f5e2:	d012      	beq.n	800f60a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f5e4:	e05b      	b.n	800f69e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f5e6:	4b92      	ldr	r3, [pc, #584]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f5ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f5f2:	d107      	bne.n	800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5f4:	f107 0318 	add.w	r3, r7, #24
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f000 f991 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f602:	e16e      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f604:	2300      	movs	r3, #0
 800f606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f608:	e16b      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f60a:	4b89      	ldr	r3, [pc, #548]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f616:	d107      	bne.n	800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f618:	f107 030c 	add.w	r3, r7, #12
 800f61c:	4618      	mov	r0, r3
 800f61e:	f000 fad3 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f626:	e15c      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f628:	2300      	movs	r3, #0
 800f62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f62c:	e159      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f62e:	4b80      	ldr	r3, [pc, #512]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f632:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f636:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f638:	4b7d      	ldr	r3, [pc, #500]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f003 0304 	and.w	r3, r3, #4
 800f640:	2b04      	cmp	r3, #4
 800f642:	d10c      	bne.n	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f646:	2b00      	cmp	r3, #0
 800f648:	d109      	bne.n	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f64a:	4b79      	ldr	r3, [pc, #484]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	08db      	lsrs	r3, r3, #3
 800f650:	f003 0303 	and.w	r3, r3, #3
 800f654:	4a77      	ldr	r2, [pc, #476]	@ (800f834 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f656:	fa22 f303 	lsr.w	r3, r2, r3
 800f65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f65c:	e01e      	b.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f65e:	4b74      	ldr	r3, [pc, #464]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f66a:	d106      	bne.n	800f67a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f66e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f672:	d102      	bne.n	800f67a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f674:	4b70      	ldr	r3, [pc, #448]	@ (800f838 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f678:	e010      	b.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f67a:	4b6d      	ldr	r3, [pc, #436]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f682:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f686:	d106      	bne.n	800f696 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f68a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f68e:	d102      	bne.n	800f696 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f690:	4b6a      	ldr	r3, [pc, #424]	@ (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f694:	e002      	b.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f69a:	e122      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f69c:	e121      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6a2:	e11e      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6a8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f6ac:	430b      	orrs	r3, r1
 800f6ae:	d133      	bne.n	800f718 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f6b0:	4b5f      	ldr	r3, [pc, #380]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f6b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f6b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f6b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d004      	beq.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f6c6:	d012      	beq.n	800f6ee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f6c8:	e023      	b.n	800f712 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f6ca:	4b59      	ldr	r3, [pc, #356]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f6d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f6d6:	d107      	bne.n	800f6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f6d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f000 fbc7 	bl	800fe70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6e6:	e0fc      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6ec:	e0f9      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f6ee:	4b50      	ldr	r3, [pc, #320]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f6f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f6fa:	d107      	bne.n	800f70c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6fc:	f107 0318 	add.w	r3, r7, #24
 800f700:	4618      	mov	r0, r3
 800f702:	f000 f90d 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f706:	6a3b      	ldr	r3, [r7, #32]
 800f708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f70a:	e0ea      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f70c:	2300      	movs	r3, #0
 800f70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f710:	e0e7      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f712:	2300      	movs	r3, #0
 800f714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f716:	e0e4      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f71c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f720:	430b      	orrs	r3, r1
 800f722:	f040 808d 	bne.w	800f840 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f726:	4b42      	ldr	r3, [pc, #264]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f72a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f72e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f736:	d06b      	beq.n	800f810 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f73a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f73e:	d874      	bhi.n	800f82a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f746:	d056      	beq.n	800f7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f74a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f74e:	d86c      	bhi.n	800f82a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f752:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f756:	d03b      	beq.n	800f7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f75a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f75e:	d864      	bhi.n	800f82a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f766:	d021      	beq.n	800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f76a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f76e:	d85c      	bhi.n	800f82a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f772:	2b00      	cmp	r3, #0
 800f774:	d004      	beq.n	800f780 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f77c:	d004      	beq.n	800f788 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f77e:	e054      	b.n	800f82a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f780:	f000 f8b8 	bl	800f8f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f784:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f786:	e0ac      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f788:	4b29      	ldr	r3, [pc, #164]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f794:	d107      	bne.n	800f7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f796:	f107 0318 	add.w	r3, r7, #24
 800f79a:	4618      	mov	r0, r3
 800f79c:	f000 f8c0 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7a4:	e09d      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7aa:	e09a      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f7ac:	4b20      	ldr	r3, [pc, #128]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f7b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f7b8:	d107      	bne.n	800f7ca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7ba:	f107 030c 	add.w	r3, r7, #12
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f000 fa02 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7c8:	e08b      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7ce:	e088      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f7d0:	4b17      	ldr	r3, [pc, #92]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f003 0304 	and.w	r3, r3, #4
 800f7d8:	2b04      	cmp	r3, #4
 800f7da:	d109      	bne.n	800f7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f7dc:	4b14      	ldr	r3, [pc, #80]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	08db      	lsrs	r3, r3, #3
 800f7e2:	f003 0303 	and.w	r3, r3, #3
 800f7e6:	4a13      	ldr	r2, [pc, #76]	@ (800f834 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f7e8:	fa22 f303 	lsr.w	r3, r2, r3
 800f7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7ee:	e078      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7f4:	e075      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f7f6:	4b0e      	ldr	r3, [pc, #56]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f802:	d102      	bne.n	800f80a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f804:	4b0c      	ldr	r3, [pc, #48]	@ (800f838 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f808:	e06b      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f80a:	2300      	movs	r3, #0
 800f80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f80e:	e068      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f810:	4b07      	ldr	r3, [pc, #28]	@ (800f830 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f81c:	d102      	bne.n	800f824 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f81e:	4b07      	ldr	r3, [pc, #28]	@ (800f83c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f822:	e05e      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f824:	2300      	movs	r3, #0
 800f826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f828:	e05b      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f82a:	2300      	movs	r3, #0
 800f82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f82e:	e058      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f830:	58024400 	.word	0x58024400
 800f834:	03d09000 	.word	0x03d09000
 800f838:	003d0900 	.word	0x003d0900
 800f83c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f840:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f844:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f848:	430b      	orrs	r3, r1
 800f84a:	d148      	bne.n	800f8de <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f84c:	4b27      	ldr	r3, [pc, #156]	@ (800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f84e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f850:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f854:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f85c:	d02a      	beq.n	800f8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f864:	d838      	bhi.n	800f8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d004      	beq.n	800f876 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f872:	d00d      	beq.n	800f890 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f874:	e030      	b.n	800f8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f876:	4b1d      	ldr	r3, [pc, #116]	@ (800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f87e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f882:	d102      	bne.n	800f88a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f884:	4b1a      	ldr	r3, [pc, #104]	@ (800f8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f888:	e02b      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f88a:	2300      	movs	r3, #0
 800f88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f88e:	e028      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f890:	4b16      	ldr	r3, [pc, #88]	@ (800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f89c:	d107      	bne.n	800f8ae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f89e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f000 fae4 	bl	800fe70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8ac:	e019      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8b2:	e016      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f8b4:	4b0d      	ldr	r3, [pc, #52]	@ (800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f8bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f8c0:	d107      	bne.n	800f8d2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8c2:	f107 0318 	add.w	r3, r7, #24
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f000 f82a 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8d0:	e007      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8d6:	e004      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8dc:	e001      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800f8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3740      	adds	r7, #64	@ 0x40
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	58024400 	.word	0x58024400
 800f8f0:	017d7840 	.word	0x017d7840

0800f8f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f8f8:	f7fe f816 	bl	800d928 <HAL_RCC_GetHCLKFreq>
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	4b06      	ldr	r3, [pc, #24]	@ (800f918 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f900:	6a1b      	ldr	r3, [r3, #32]
 800f902:	091b      	lsrs	r3, r3, #4
 800f904:	f003 0307 	and.w	r3, r3, #7
 800f908:	4904      	ldr	r1, [pc, #16]	@ (800f91c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f90a:	5ccb      	ldrb	r3, [r1, r3]
 800f90c:	f003 031f 	and.w	r3, r3, #31
 800f910:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f914:	4618      	mov	r0, r3
 800f916:	bd80      	pop	{r7, pc}
 800f918:	58024400 	.word	0x58024400
 800f91c:	080178e8 	.word	0x080178e8

0800f920 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f920:	b480      	push	{r7}
 800f922:	b089      	sub	sp, #36	@ 0x24
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f928:	4ba1      	ldr	r3, [pc, #644]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f92c:	f003 0303 	and.w	r3, r3, #3
 800f930:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f932:	4b9f      	ldr	r3, [pc, #636]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f936:	0b1b      	lsrs	r3, r3, #12
 800f938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f93c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f93e:	4b9c      	ldr	r3, [pc, #624]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f942:	091b      	lsrs	r3, r3, #4
 800f944:	f003 0301 	and.w	r3, r3, #1
 800f948:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f94a:	4b99      	ldr	r3, [pc, #612]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f94c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f94e:	08db      	lsrs	r3, r3, #3
 800f950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f954:	693a      	ldr	r2, [r7, #16]
 800f956:	fb02 f303 	mul.w	r3, r2, r3
 800f95a:	ee07 3a90 	vmov	s15, r3
 800f95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f962:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f000 8111 	beq.w	800fb90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f96e:	69bb      	ldr	r3, [r7, #24]
 800f970:	2b02      	cmp	r3, #2
 800f972:	f000 8083 	beq.w	800fa7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f976:	69bb      	ldr	r3, [r7, #24]
 800f978:	2b02      	cmp	r3, #2
 800f97a:	f200 80a1 	bhi.w	800fac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d003      	beq.n	800f98c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	2b01      	cmp	r3, #1
 800f988:	d056      	beq.n	800fa38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f98a:	e099      	b.n	800fac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f98c:	4b88      	ldr	r3, [pc, #544]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f003 0320 	and.w	r3, r3, #32
 800f994:	2b00      	cmp	r3, #0
 800f996:	d02d      	beq.n	800f9f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f998:	4b85      	ldr	r3, [pc, #532]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	08db      	lsrs	r3, r3, #3
 800f99e:	f003 0303 	and.w	r3, r3, #3
 800f9a2:	4a84      	ldr	r2, [pc, #528]	@ (800fbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f9a4:	fa22 f303 	lsr.w	r3, r2, r3
 800f9a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	ee07 3a90 	vmov	s15, r3
 800f9b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	ee07 3a90 	vmov	s15, r3
 800f9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9c2:	4b7b      	ldr	r3, [pc, #492]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f9c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9ca:	ee07 3a90 	vmov	s15, r3
 800f9ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f9da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f9e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f9f2:	e087      	b.n	800fb04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	ee07 3a90 	vmov	s15, r3
 800f9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fbbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fa02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa06:	4b6a      	ldr	r3, [pc, #424]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa0e:	ee07 3a90 	vmov	s15, r3
 800fa12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa16:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fa1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa36:	e065      	b.n	800fb04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	ee07 3a90 	vmov	s15, r3
 800fa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fa46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa4a:	4b59      	ldr	r3, [pc, #356]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa52:	ee07 3a90 	vmov	s15, r3
 800fa56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fa62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa7a:	e043      	b.n	800fb04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	ee07 3a90 	vmov	s15, r3
 800fa82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800fa8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa8e:	4b48      	ldr	r3, [pc, #288]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa96:	ee07 3a90 	vmov	s15, r3
 800fa9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800faa2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800faa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800faaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800faae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fabe:	e021      	b.n	800fb04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	ee07 3a90 	vmov	s15, r3
 800fac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800face:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fad2:	4b37      	ldr	r3, [pc, #220]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fada:	ee07 3a90 	vmov	s15, r3
 800fade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fae6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800faea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800faee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800faf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800faf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fafe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800fb04:	4b2a      	ldr	r3, [pc, #168]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb08:	0a5b      	lsrs	r3, r3, #9
 800fb0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb0e:	ee07 3a90 	vmov	s15, r3
 800fb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb2a:	ee17 2a90 	vmov	r2, s15
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800fb32:	4b1f      	ldr	r3, [pc, #124]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb36:	0c1b      	lsrs	r3, r3, #16
 800fb38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb3c:	ee07 3a90 	vmov	s15, r3
 800fb40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb58:	ee17 2a90 	vmov	r2, s15
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800fb60:	4b13      	ldr	r3, [pc, #76]	@ (800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb64:	0e1b      	lsrs	r3, r3, #24
 800fb66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb6a:	ee07 3a90 	vmov	s15, r3
 800fb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb86:	ee17 2a90 	vmov	r2, s15
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800fb8e:	e008      	b.n	800fba2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	609a      	str	r2, [r3, #8]
}
 800fba2:	bf00      	nop
 800fba4:	3724      	adds	r7, #36	@ 0x24
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	58024400 	.word	0x58024400
 800fbb4:	03d09000 	.word	0x03d09000
 800fbb8:	46000000 	.word	0x46000000
 800fbbc:	4c742400 	.word	0x4c742400
 800fbc0:	4a742400 	.word	0x4a742400
 800fbc4:	4bbebc20 	.word	0x4bbebc20

0800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b089      	sub	sp, #36	@ 0x24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fbd0:	4ba1      	ldr	r3, [pc, #644]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fbd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbd4:	f003 0303 	and.w	r3, r3, #3
 800fbd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800fbda:	4b9f      	ldr	r3, [pc, #636]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fbdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbde:	0d1b      	lsrs	r3, r3, #20
 800fbe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fbe4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fbe6:	4b9c      	ldr	r3, [pc, #624]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fbe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbea:	0a1b      	lsrs	r3, r3, #8
 800fbec:	f003 0301 	and.w	r3, r3, #1
 800fbf0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800fbf2:	4b99      	ldr	r3, [pc, #612]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fbf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbf6:	08db      	lsrs	r3, r3, #3
 800fbf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbfc:	693a      	ldr	r2, [r7, #16]
 800fbfe:	fb02 f303 	mul.w	r3, r2, r3
 800fc02:	ee07 3a90 	vmov	s15, r3
 800fc06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f000 8111 	beq.w	800fe38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fc16:	69bb      	ldr	r3, [r7, #24]
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	f000 8083 	beq.w	800fd24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	2b02      	cmp	r3, #2
 800fc22:	f200 80a1 	bhi.w	800fd68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fc26:	69bb      	ldr	r3, [r7, #24]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d003      	beq.n	800fc34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fc2c:	69bb      	ldr	r3, [r7, #24]
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d056      	beq.n	800fce0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fc32:	e099      	b.n	800fd68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc34:	4b88      	ldr	r3, [pc, #544]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f003 0320 	and.w	r3, r3, #32
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d02d      	beq.n	800fc9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fc40:	4b85      	ldr	r3, [pc, #532]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	08db      	lsrs	r3, r3, #3
 800fc46:	f003 0303 	and.w	r3, r3, #3
 800fc4a:	4a84      	ldr	r2, [pc, #528]	@ (800fe5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fc4c:	fa22 f303 	lsr.w	r3, r2, r3
 800fc50:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	ee07 3a90 	vmov	s15, r3
 800fc58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	ee07 3a90 	vmov	s15, r3
 800fc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc6a:	4b7b      	ldr	r3, [pc, #492]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc72:	ee07 3a90 	vmov	s15, r3
 800fc76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fe60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fc82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fc9a:	e087      	b.n	800fdac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	ee07 3a90 	vmov	s15, r3
 800fca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fca6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fe64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fcaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcae:	4b6a      	ldr	r3, [pc, #424]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcb6:	ee07 3a90 	vmov	s15, r3
 800fcba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcc2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fe60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fcc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fcd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fcde:	e065      	b.n	800fdac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	ee07 3a90 	vmov	s15, r3
 800fce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fe68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fcee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcf2:	4b59      	ldr	r3, [pc, #356]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcfa:	ee07 3a90 	vmov	s15, r3
 800fcfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd02:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fe60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fd0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd22:	e043      	b.n	800fdac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	ee07 3a90 	vmov	s15, r3
 800fd2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fe6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fd32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd36:	4b48      	ldr	r3, [pc, #288]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd3e:	ee07 3a90 	vmov	s15, r3
 800fd42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd46:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fe60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fd4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd66:	e021      	b.n	800fdac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	ee07 3a90 	vmov	s15, r3
 800fd6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fe68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fd76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd7a:	4b37      	ldr	r3, [pc, #220]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd82:	ee07 3a90 	vmov	s15, r3
 800fd86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fe60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fd92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fda2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fda6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fdaa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fdac:	4b2a      	ldr	r3, [pc, #168]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdb0:	0a5b      	lsrs	r3, r3, #9
 800fdb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdb6:	ee07 3a90 	vmov	s15, r3
 800fdba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fdc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fdc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800fdca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fdd2:	ee17 2a90 	vmov	r2, s15
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fdda:	4b1f      	ldr	r3, [pc, #124]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdde:	0c1b      	lsrs	r3, r3, #16
 800fde0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fde4:	ee07 3a90 	vmov	s15, r3
 800fde8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fdf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fdf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800fdf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe00:	ee17 2a90 	vmov	r2, s15
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fe08:	4b13      	ldr	r3, [pc, #76]	@ (800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe0c:	0e1b      	lsrs	r3, r3, #24
 800fe0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe12:	ee07 3a90 	vmov	s15, r3
 800fe16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe22:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe2e:	ee17 2a90 	vmov	r2, s15
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fe36:	e008      	b.n	800fe4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2200      	movs	r2, #0
 800fe42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2200      	movs	r2, #0
 800fe48:	609a      	str	r2, [r3, #8]
}
 800fe4a:	bf00      	nop
 800fe4c:	3724      	adds	r7, #36	@ 0x24
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe54:	4770      	bx	lr
 800fe56:	bf00      	nop
 800fe58:	58024400 	.word	0x58024400
 800fe5c:	03d09000 	.word	0x03d09000
 800fe60:	46000000 	.word	0x46000000
 800fe64:	4c742400 	.word	0x4c742400
 800fe68:	4a742400 	.word	0x4a742400
 800fe6c:	4bbebc20 	.word	0x4bbebc20

0800fe70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b089      	sub	sp, #36	@ 0x24
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fe78:	4ba0      	ldr	r3, [pc, #640]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe7c:	f003 0303 	and.w	r3, r3, #3
 800fe80:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800fe82:	4b9e      	ldr	r3, [pc, #632]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe86:	091b      	lsrs	r3, r3, #4
 800fe88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe8c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800fe8e:	4b9b      	ldr	r3, [pc, #620]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe92:	f003 0301 	and.w	r3, r3, #1
 800fe96:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fe98:	4b98      	ldr	r3, [pc, #608]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe9c:	08db      	lsrs	r3, r3, #3
 800fe9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fea2:	693a      	ldr	r2, [r7, #16]
 800fea4:	fb02 f303 	mul.w	r3, r2, r3
 800fea8:	ee07 3a90 	vmov	s15, r3
 800feac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feb0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	f000 8111 	beq.w	80100de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	2b02      	cmp	r3, #2
 800fec0:	f000 8083 	beq.w	800ffca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	2b02      	cmp	r3, #2
 800fec8:	f200 80a1 	bhi.w	801000e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d003      	beq.n	800feda <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d056      	beq.n	800ff86 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fed8:	e099      	b.n	801000e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800feda:	4b88      	ldr	r3, [pc, #544]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f003 0320 	and.w	r3, r3, #32
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d02d      	beq.n	800ff42 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fee6:	4b85      	ldr	r3, [pc, #532]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	08db      	lsrs	r3, r3, #3
 800feec:	f003 0303 	and.w	r3, r3, #3
 800fef0:	4a83      	ldr	r2, [pc, #524]	@ (8010100 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fef2:	fa22 f303 	lsr.w	r3, r2, r3
 800fef6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	ee07 3a90 	vmov	s15, r3
 800fefe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	ee07 3a90 	vmov	s15, r3
 800ff08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff10:	4b7a      	ldr	r3, [pc, #488]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff18:	ee07 3a90 	vmov	s15, r3
 800ff1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff20:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff24:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010104 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ff28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff3c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ff40:	e087      	b.n	8010052 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	ee07 3a90 	vmov	s15, r3
 800ff48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff4c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010108 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ff50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff54:	4b69      	ldr	r3, [pc, #420]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff5c:	ee07 3a90 	vmov	s15, r3
 800ff60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff64:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff68:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010104 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ff6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff84:	e065      	b.n	8010052 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	ee07 3a90 	vmov	s15, r3
 800ff8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff90:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801010c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ff94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff98:	4b58      	ldr	r3, [pc, #352]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffa0:	ee07 3a90 	vmov	s15, r3
 800ffa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffa8:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffac:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010104 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ffb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ffbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ffc8:	e043      	b.n	8010052 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	ee07 3a90 	vmov	s15, r3
 800ffd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffd4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8010110 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ffd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffdc:	4b47      	ldr	r3, [pc, #284]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffe4:	ee07 3a90 	vmov	s15, r3
 800ffe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffec:	ed97 6a03 	vldr	s12, [r7, #12]
 800fff0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010104 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010008:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801000c:	e021      	b.n	8010052 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	ee07 3a90 	vmov	s15, r3
 8010014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010018:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010108 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801001c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010020:	4b36      	ldr	r3, [pc, #216]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010028:	ee07 3a90 	vmov	s15, r3
 801002c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010030:	ed97 6a03 	vldr	s12, [r7, #12]
 8010034:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010104 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801003c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010048:	ee67 7a27 	vmul.f32	s15, s14, s15
 801004c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010050:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010052:	4b2a      	ldr	r3, [pc, #168]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010056:	0a5b      	lsrs	r3, r3, #9
 8010058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801005c:	ee07 3a90 	vmov	s15, r3
 8010060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010064:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010068:	ee37 7a87 	vadd.f32	s14, s15, s14
 801006c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010078:	ee17 2a90 	vmov	r2, s15
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010080:	4b1e      	ldr	r3, [pc, #120]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010084:	0c1b      	lsrs	r3, r3, #16
 8010086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801008a:	ee07 3a90 	vmov	s15, r3
 801008e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010096:	ee37 7a87 	vadd.f32	s14, s15, s14
 801009a:	edd7 6a07 	vldr	s13, [r7, #28]
 801009e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100a6:	ee17 2a90 	vmov	r2, s15
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80100ae:	4b13      	ldr	r3, [pc, #76]	@ (80100fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100b2:	0e1b      	lsrs	r3, r3, #24
 80100b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100b8:	ee07 3a90 	vmov	s15, r3
 80100bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80100c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80100c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80100cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100d4:	ee17 2a90 	vmov	r2, s15
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80100dc:	e008      	b.n	80100f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	609a      	str	r2, [r3, #8]
}
 80100f0:	bf00      	nop
 80100f2:	3724      	adds	r7, #36	@ 0x24
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	58024400 	.word	0x58024400
 8010100:	03d09000 	.word	0x03d09000
 8010104:	46000000 	.word	0x46000000
 8010108:	4c742400 	.word	0x4c742400
 801010c:	4a742400 	.word	0x4a742400
 8010110:	4bbebc20 	.word	0x4bbebc20

08010114 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b084      	sub	sp, #16
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801011e:	2300      	movs	r3, #0
 8010120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010122:	4b53      	ldr	r3, [pc, #332]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 8010124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010126:	f003 0303 	and.w	r3, r3, #3
 801012a:	2b03      	cmp	r3, #3
 801012c:	d101      	bne.n	8010132 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801012e:	2301      	movs	r3, #1
 8010130:	e099      	b.n	8010266 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010132:	4b4f      	ldr	r3, [pc, #316]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a4e      	ldr	r2, [pc, #312]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 8010138:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801013c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801013e:	f7f2 f97d 	bl	800243c <HAL_GetTick>
 8010142:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010144:	e008      	b.n	8010158 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010146:	f7f2 f979 	bl	800243c <HAL_GetTick>
 801014a:	4602      	mov	r2, r0
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	1ad3      	subs	r3, r2, r3
 8010150:	2b02      	cmp	r3, #2
 8010152:	d901      	bls.n	8010158 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010154:	2303      	movs	r3, #3
 8010156:	e086      	b.n	8010266 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010158:	4b45      	ldr	r3, [pc, #276]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010160:	2b00      	cmp	r3, #0
 8010162:	d1f0      	bne.n	8010146 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010164:	4b42      	ldr	r3, [pc, #264]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 8010166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010168:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	031b      	lsls	r3, r3, #12
 8010172:	493f      	ldr	r1, [pc, #252]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 8010174:	4313      	orrs	r3, r2
 8010176:	628b      	str	r3, [r1, #40]	@ 0x28
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	3b01      	subs	r3, #1
 801017e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	3b01      	subs	r3, #1
 8010188:	025b      	lsls	r3, r3, #9
 801018a:	b29b      	uxth	r3, r3
 801018c:	431a      	orrs	r2, r3
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	3b01      	subs	r3, #1
 8010194:	041b      	lsls	r3, r3, #16
 8010196:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801019a:	431a      	orrs	r2, r3
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	691b      	ldr	r3, [r3, #16]
 80101a0:	3b01      	subs	r3, #1
 80101a2:	061b      	lsls	r3, r3, #24
 80101a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80101a8:	4931      	ldr	r1, [pc, #196]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101aa:	4313      	orrs	r3, r2
 80101ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80101ae:	4b30      	ldr	r3, [pc, #192]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	695b      	ldr	r3, [r3, #20]
 80101ba:	492d      	ldr	r1, [pc, #180]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101bc:	4313      	orrs	r3, r2
 80101be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80101c0:	4b2b      	ldr	r3, [pc, #172]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101c4:	f023 0220 	bic.w	r2, r3, #32
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	699b      	ldr	r3, [r3, #24]
 80101cc:	4928      	ldr	r1, [pc, #160]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101ce:	4313      	orrs	r3, r2
 80101d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80101d2:	4b27      	ldr	r3, [pc, #156]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101d6:	4a26      	ldr	r2, [pc, #152]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101d8:	f023 0310 	bic.w	r3, r3, #16
 80101dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80101de:	4b24      	ldr	r3, [pc, #144]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80101e2:	4b24      	ldr	r3, [pc, #144]	@ (8010274 <RCCEx_PLL2_Config+0x160>)
 80101e4:	4013      	ands	r3, r2
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	69d2      	ldr	r2, [r2, #28]
 80101ea:	00d2      	lsls	r2, r2, #3
 80101ec:	4920      	ldr	r1, [pc, #128]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101ee:	4313      	orrs	r3, r2
 80101f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80101f2:	4b1f      	ldr	r3, [pc, #124]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101f6:	4a1e      	ldr	r2, [pc, #120]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 80101f8:	f043 0310 	orr.w	r3, r3, #16
 80101fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d106      	bne.n	8010212 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010204:	4b1a      	ldr	r3, [pc, #104]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 8010206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010208:	4a19      	ldr	r2, [pc, #100]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 801020a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801020e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010210:	e00f      	b.n	8010232 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	2b01      	cmp	r3, #1
 8010216:	d106      	bne.n	8010226 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010218:	4b15      	ldr	r3, [pc, #84]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 801021a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801021c:	4a14      	ldr	r2, [pc, #80]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 801021e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010222:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010224:	e005      	b.n	8010232 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010226:	4b12      	ldr	r3, [pc, #72]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 8010228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801022a:	4a11      	ldr	r2, [pc, #68]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 801022c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010230:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010232:	4b0f      	ldr	r3, [pc, #60]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4a0e      	ldr	r2, [pc, #56]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 8010238:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801023c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801023e:	f7f2 f8fd 	bl	800243c <HAL_GetTick>
 8010242:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010244:	e008      	b.n	8010258 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010246:	f7f2 f8f9 	bl	800243c <HAL_GetTick>
 801024a:	4602      	mov	r2, r0
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	1ad3      	subs	r3, r2, r3
 8010250:	2b02      	cmp	r3, #2
 8010252:	d901      	bls.n	8010258 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010254:	2303      	movs	r3, #3
 8010256:	e006      	b.n	8010266 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010258:	4b05      	ldr	r3, [pc, #20]	@ (8010270 <RCCEx_PLL2_Config+0x15c>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010260:	2b00      	cmp	r3, #0
 8010262:	d0f0      	beq.n	8010246 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010264:	7bfb      	ldrb	r3, [r7, #15]
}
 8010266:	4618      	mov	r0, r3
 8010268:	3710      	adds	r7, #16
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	58024400 	.word	0x58024400
 8010274:	ffff0007 	.word	0xffff0007

08010278 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010282:	2300      	movs	r3, #0
 8010284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010286:	4b53      	ldr	r3, [pc, #332]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801028a:	f003 0303 	and.w	r3, r3, #3
 801028e:	2b03      	cmp	r3, #3
 8010290:	d101      	bne.n	8010296 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8010292:	2301      	movs	r3, #1
 8010294:	e099      	b.n	80103ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010296:	4b4f      	ldr	r3, [pc, #316]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4a4e      	ldr	r2, [pc, #312]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 801029c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80102a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80102a2:	f7f2 f8cb 	bl	800243c <HAL_GetTick>
 80102a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80102a8:	e008      	b.n	80102bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80102aa:	f7f2 f8c7 	bl	800243c <HAL_GetTick>
 80102ae:	4602      	mov	r2, r0
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	1ad3      	subs	r3, r2, r3
 80102b4:	2b02      	cmp	r3, #2
 80102b6:	d901      	bls.n	80102bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80102b8:	2303      	movs	r3, #3
 80102ba:	e086      	b.n	80103ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80102bc:	4b45      	ldr	r3, [pc, #276]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d1f0      	bne.n	80102aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80102c8:	4b42      	ldr	r3, [pc, #264]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 80102ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	051b      	lsls	r3, r3, #20
 80102d6:	493f      	ldr	r1, [pc, #252]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 80102d8:	4313      	orrs	r3, r2
 80102da:	628b      	str	r3, [r1, #40]	@ 0x28
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	3b01      	subs	r3, #1
 80102e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	3b01      	subs	r3, #1
 80102ec:	025b      	lsls	r3, r3, #9
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	431a      	orrs	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	68db      	ldr	r3, [r3, #12]
 80102f6:	3b01      	subs	r3, #1
 80102f8:	041b      	lsls	r3, r3, #16
 80102fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80102fe:	431a      	orrs	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	691b      	ldr	r3, [r3, #16]
 8010304:	3b01      	subs	r3, #1
 8010306:	061b      	lsls	r3, r3, #24
 8010308:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801030c:	4931      	ldr	r1, [pc, #196]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 801030e:	4313      	orrs	r3, r2
 8010310:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010312:	4b30      	ldr	r3, [pc, #192]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010316:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	695b      	ldr	r3, [r3, #20]
 801031e:	492d      	ldr	r1, [pc, #180]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010320:	4313      	orrs	r3, r2
 8010322:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010324:	4b2b      	ldr	r3, [pc, #172]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010328:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	4928      	ldr	r1, [pc, #160]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010332:	4313      	orrs	r3, r2
 8010334:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010336:	4b27      	ldr	r3, [pc, #156]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801033a:	4a26      	ldr	r2, [pc, #152]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 801033c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010340:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010342:	4b24      	ldr	r3, [pc, #144]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010344:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010346:	4b24      	ldr	r3, [pc, #144]	@ (80103d8 <RCCEx_PLL3_Config+0x160>)
 8010348:	4013      	ands	r3, r2
 801034a:	687a      	ldr	r2, [r7, #4]
 801034c:	69d2      	ldr	r2, [r2, #28]
 801034e:	00d2      	lsls	r2, r2, #3
 8010350:	4920      	ldr	r1, [pc, #128]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010352:	4313      	orrs	r3, r2
 8010354:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010356:	4b1f      	ldr	r3, [pc, #124]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801035a:	4a1e      	ldr	r2, [pc, #120]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 801035c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010360:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d106      	bne.n	8010376 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010368:	4b1a      	ldr	r3, [pc, #104]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 801036a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801036c:	4a19      	ldr	r2, [pc, #100]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 801036e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010372:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010374:	e00f      	b.n	8010396 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	2b01      	cmp	r3, #1
 801037a:	d106      	bne.n	801038a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801037c:	4b15      	ldr	r3, [pc, #84]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 801037e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010380:	4a14      	ldr	r2, [pc, #80]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010382:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010386:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010388:	e005      	b.n	8010396 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801038a:	4b12      	ldr	r3, [pc, #72]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 801038c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801038e:	4a11      	ldr	r2, [pc, #68]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010390:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010394:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010396:	4b0f      	ldr	r3, [pc, #60]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4a0e      	ldr	r2, [pc, #56]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 801039c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80103a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80103a2:	f7f2 f84b 	bl	800243c <HAL_GetTick>
 80103a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80103a8:	e008      	b.n	80103bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80103aa:	f7f2 f847 	bl	800243c <HAL_GetTick>
 80103ae:	4602      	mov	r2, r0
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	d901      	bls.n	80103bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80103b8:	2303      	movs	r3, #3
 80103ba:	e006      	b.n	80103ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80103bc:	4b05      	ldr	r3, [pc, #20]	@ (80103d4 <RCCEx_PLL3_Config+0x15c>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d0f0      	beq.n	80103aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80103c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3710      	adds	r7, #16
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	58024400 	.word	0x58024400
 80103d8:	ffff0007 	.word	0xffff0007

080103dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d101      	bne.n	80103ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80103ea:	2301      	movs	r3, #1
 80103ec:	e10f      	b.n	801060e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2200      	movs	r2, #0
 80103f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a87      	ldr	r2, [pc, #540]	@ (8010618 <HAL_SPI_Init+0x23c>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d00f      	beq.n	801041e <HAL_SPI_Init+0x42>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	4a86      	ldr	r2, [pc, #536]	@ (801061c <HAL_SPI_Init+0x240>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d00a      	beq.n	801041e <HAL_SPI_Init+0x42>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4a84      	ldr	r2, [pc, #528]	@ (8010620 <HAL_SPI_Init+0x244>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d005      	beq.n	801041e <HAL_SPI_Init+0x42>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	2b0f      	cmp	r3, #15
 8010418:	d901      	bls.n	801041e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801041a:	2301      	movs	r3, #1
 801041c:	e0f7      	b.n	801060e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 ff76 	bl	8011310 <SPI_GetPacketSize>
 8010424:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4a7b      	ldr	r2, [pc, #492]	@ (8010618 <HAL_SPI_Init+0x23c>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d00c      	beq.n	801044a <HAL_SPI_Init+0x6e>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a79      	ldr	r2, [pc, #484]	@ (801061c <HAL_SPI_Init+0x240>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d007      	beq.n	801044a <HAL_SPI_Init+0x6e>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a78      	ldr	r2, [pc, #480]	@ (8010620 <HAL_SPI_Init+0x244>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d002      	beq.n	801044a <HAL_SPI_Init+0x6e>
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2b08      	cmp	r3, #8
 8010448:	d811      	bhi.n	801046e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801044e:	4a72      	ldr	r2, [pc, #456]	@ (8010618 <HAL_SPI_Init+0x23c>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d009      	beq.n	8010468 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a70      	ldr	r2, [pc, #448]	@ (801061c <HAL_SPI_Init+0x240>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d004      	beq.n	8010468 <HAL_SPI_Init+0x8c>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4a6f      	ldr	r2, [pc, #444]	@ (8010620 <HAL_SPI_Init+0x244>)
 8010464:	4293      	cmp	r3, r2
 8010466:	d104      	bne.n	8010472 <HAL_SPI_Init+0x96>
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2b10      	cmp	r3, #16
 801046c:	d901      	bls.n	8010472 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801046e:	2301      	movs	r3, #1
 8010470:	e0cd      	b.n	801060e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010478:	b2db      	uxtb	r3, r3
 801047a:	2b00      	cmp	r3, #0
 801047c:	d106      	bne.n	801048c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2200      	movs	r2, #0
 8010482:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f7f1 fa60 	bl	800194c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2202      	movs	r2, #2
 8010490:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f022 0201 	bic.w	r2, r2, #1
 80104a2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80104ae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	699b      	ldr	r3, [r3, #24]
 80104b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80104b8:	d119      	bne.n	80104ee <HAL_SPI_Init+0x112>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80104c2:	d103      	bne.n	80104cc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d008      	beq.n	80104de <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d10c      	bne.n	80104ee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80104d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80104dc:	d107      	bne.n	80104ee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80104ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00f      	beq.n	801051a <HAL_SPI_Init+0x13e>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	2b06      	cmp	r3, #6
 8010500:	d90b      	bls.n	801051a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	430a      	orrs	r2, r1
 8010516:	601a      	str	r2, [r3, #0]
 8010518:	e007      	b.n	801052a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010528:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	69da      	ldr	r2, [r3, #28]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010532:	431a      	orrs	r2, r3
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	431a      	orrs	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801053c:	ea42 0103 	orr.w	r1, r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	68da      	ldr	r2, [r3, #12]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	430a      	orrs	r2, r1
 801054a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010554:	431a      	orrs	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801055a:	431a      	orrs	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	699b      	ldr	r3, [r3, #24]
 8010560:	431a      	orrs	r2, r3
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	691b      	ldr	r3, [r3, #16]
 8010566:	431a      	orrs	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	695b      	ldr	r3, [r3, #20]
 801056c:	431a      	orrs	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6a1b      	ldr	r3, [r3, #32]
 8010572:	431a      	orrs	r2, r3
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	431a      	orrs	r2, r3
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801057e:	431a      	orrs	r2, r3
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	689b      	ldr	r3, [r3, #8]
 8010584:	431a      	orrs	r2, r3
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801058a:	ea42 0103 	orr.w	r1, r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	430a      	orrs	r2, r1
 8010598:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d113      	bne.n	80105ca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80105b4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	689b      	ldr	r3, [r3, #8]
 80105bc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80105c8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f022 0201 	bic.w	r2, r2, #1
 80105d8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d00a      	beq.n	80105fc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	430a      	orrs	r2, r1
 80105fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2200      	movs	r2, #0
 8010600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2201      	movs	r2, #1
 8010608:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801060c:	2300      	movs	r3, #0
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	40013000 	.word	0x40013000
 801061c:	40003800 	.word	0x40003800
 8010620:	40003c00 	.word	0x40003c00

08010624 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b088      	sub	sp, #32
 8010628:	af02      	add	r7, sp, #8
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	603b      	str	r3, [r7, #0]
 8010630:	4613      	mov	r3, r2
 8010632:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	3320      	adds	r3, #32
 801063a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801063c:	f7f1 fefe 	bl	800243c <HAL_GetTick>
 8010640:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010648:	b2db      	uxtb	r3, r3
 801064a:	2b01      	cmp	r3, #1
 801064c:	d001      	beq.n	8010652 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 801064e:	2302      	movs	r3, #2
 8010650:	e1d1      	b.n	80109f6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d002      	beq.n	801065e <HAL_SPI_Transmit+0x3a>
 8010658:	88fb      	ldrh	r3, [r7, #6]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d101      	bne.n	8010662 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 801065e:	2301      	movs	r3, #1
 8010660:	e1c9      	b.n	80109f6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010668:	2b01      	cmp	r3, #1
 801066a:	d101      	bne.n	8010670 <HAL_SPI_Transmit+0x4c>
 801066c:	2302      	movs	r3, #2
 801066e:	e1c2      	b.n	80109f6 <HAL_SPI_Transmit+0x3d2>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2201      	movs	r2, #1
 8010674:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2203      	movs	r2, #3
 801067c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2200      	movs	r2, #0
 8010684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	68ba      	ldr	r2, [r7, #8]
 801068c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	88fa      	ldrh	r2, [r7, #6]
 8010692:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	88fa      	ldrh	r2, [r7, #6]
 801069a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2200      	movs	r2, #0
 80106a2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2200      	movs	r2, #0
 80106a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2200      	movs	r2, #0
 80106b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2200      	movs	r2, #0
 80106b8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2200      	movs	r2, #0
 80106be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80106c8:	d108      	bne.n	80106dc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80106d8:	601a      	str	r2, [r3, #0]
 80106da:	e009      	b.n	80106f0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	68db      	ldr	r3, [r3, #12]
 80106e2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80106ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	685a      	ldr	r2, [r3, #4]
 80106f6:	4b96      	ldr	r3, [pc, #600]	@ (8010950 <HAL_SPI_Transmit+0x32c>)
 80106f8:	4013      	ands	r3, r2
 80106fa:	88f9      	ldrh	r1, [r7, #6]
 80106fc:	68fa      	ldr	r2, [r7, #12]
 80106fe:	6812      	ldr	r2, [r2, #0]
 8010700:	430b      	orrs	r3, r1
 8010702:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f042 0201 	orr.w	r2, r2, #1
 8010712:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801071c:	d107      	bne.n	801072e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801072c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	2b0f      	cmp	r3, #15
 8010734:	d947      	bls.n	80107c6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010736:	e03f      	b.n	80107b8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	695b      	ldr	r3, [r3, #20]
 801073e:	f003 0302 	and.w	r3, r3, #2
 8010742:	2b02      	cmp	r3, #2
 8010744:	d114      	bne.n	8010770 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	6812      	ldr	r2, [r2, #0]
 8010750:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010756:	1d1a      	adds	r2, r3, #4
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010762:	b29b      	uxth	r3, r3
 8010764:	3b01      	subs	r3, #1
 8010766:	b29a      	uxth	r2, r3
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801076e:	e023      	b.n	80107b8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010770:	f7f1 fe64 	bl	800243c <HAL_GetTick>
 8010774:	4602      	mov	r2, r0
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	1ad3      	subs	r3, r2, r3
 801077a:	683a      	ldr	r2, [r7, #0]
 801077c:	429a      	cmp	r2, r3
 801077e:	d803      	bhi.n	8010788 <HAL_SPI_Transmit+0x164>
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010786:	d102      	bne.n	801078e <HAL_SPI_Transmit+0x16a>
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d114      	bne.n	80107b8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	f000 fcf0 	bl	8011174 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801079a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2201      	movs	r2, #1
 80107a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	2200      	movs	r2, #0
 80107b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80107b4:	2303      	movs	r3, #3
 80107b6:	e11e      	b.n	80109f6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80107be:	b29b      	uxth	r3, r3
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d1b9      	bne.n	8010738 <HAL_SPI_Transmit+0x114>
 80107c4:	e0f1      	b.n	80109aa <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	2b07      	cmp	r3, #7
 80107cc:	f240 80e6 	bls.w	801099c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80107d0:	e05d      	b.n	801088e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	695b      	ldr	r3, [r3, #20]
 80107d8:	f003 0302 	and.w	r3, r3, #2
 80107dc:	2b02      	cmp	r3, #2
 80107de:	d132      	bne.n	8010846 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d918      	bls.n	801081e <HAL_SPI_Transmit+0x1fa>
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d014      	beq.n	801081e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	6812      	ldr	r2, [r2, #0]
 80107fe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010804:	1d1a      	adds	r2, r3, #4
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010810:	b29b      	uxth	r3, r3
 8010812:	3b02      	subs	r3, #2
 8010814:	b29a      	uxth	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801081c:	e037      	b.n	801088e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010822:	881a      	ldrh	r2, [r3, #0]
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801082c:	1c9a      	adds	r2, r3, #2
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010838:	b29b      	uxth	r3, r3
 801083a:	3b01      	subs	r3, #1
 801083c:	b29a      	uxth	r2, r3
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010844:	e023      	b.n	801088e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010846:	f7f1 fdf9 	bl	800243c <HAL_GetTick>
 801084a:	4602      	mov	r2, r0
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	1ad3      	subs	r3, r2, r3
 8010850:	683a      	ldr	r2, [r7, #0]
 8010852:	429a      	cmp	r2, r3
 8010854:	d803      	bhi.n	801085e <HAL_SPI_Transmit+0x23a>
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	f1b3 3fff 	cmp.w	r3, #4294967295
 801085c:	d102      	bne.n	8010864 <HAL_SPI_Transmit+0x240>
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d114      	bne.n	801088e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010864:	68f8      	ldr	r0, [r7, #12]
 8010866:	f000 fc85 	bl	8011174 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010870:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2201      	movs	r2, #1
 801087e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2200      	movs	r2, #0
 8010886:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801088a:	2303      	movs	r3, #3
 801088c:	e0b3      	b.n	80109f6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010894:	b29b      	uxth	r3, r3
 8010896:	2b00      	cmp	r3, #0
 8010898:	d19b      	bne.n	80107d2 <HAL_SPI_Transmit+0x1ae>
 801089a:	e086      	b.n	80109aa <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	695b      	ldr	r3, [r3, #20]
 80108a2:	f003 0302 	and.w	r3, r3, #2
 80108a6:	2b02      	cmp	r3, #2
 80108a8:	d154      	bne.n	8010954 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	2b03      	cmp	r3, #3
 80108b4:	d918      	bls.n	80108e8 <HAL_SPI_Transmit+0x2c4>
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108ba:	2b40      	cmp	r3, #64	@ 0x40
 80108bc:	d914      	bls.n	80108e8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	6812      	ldr	r2, [r2, #0]
 80108c8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80108ce:	1d1a      	adds	r2, r3, #4
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108da:	b29b      	uxth	r3, r3
 80108dc:	3b04      	subs	r3, #4
 80108de:	b29a      	uxth	r2, r3
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80108e6:	e059      	b.n	801099c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	2b01      	cmp	r3, #1
 80108f2:	d917      	bls.n	8010924 <HAL_SPI_Transmit+0x300>
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d013      	beq.n	8010924 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010900:	881a      	ldrh	r2, [r3, #0]
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801090a:	1c9a      	adds	r2, r3, #2
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010916:	b29b      	uxth	r3, r3
 8010918:	3b02      	subs	r3, #2
 801091a:	b29a      	uxth	r2, r3
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010922:	e03b      	b.n	801099c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	3320      	adds	r3, #32
 801092e:	7812      	ldrb	r2, [r2, #0]
 8010930:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010936:	1c5a      	adds	r2, r3, #1
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010942:	b29b      	uxth	r3, r3
 8010944:	3b01      	subs	r3, #1
 8010946:	b29a      	uxth	r2, r3
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801094e:	e025      	b.n	801099c <HAL_SPI_Transmit+0x378>
 8010950:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010954:	f7f1 fd72 	bl	800243c <HAL_GetTick>
 8010958:	4602      	mov	r2, r0
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	683a      	ldr	r2, [r7, #0]
 8010960:	429a      	cmp	r2, r3
 8010962:	d803      	bhi.n	801096c <HAL_SPI_Transmit+0x348>
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	f1b3 3fff 	cmp.w	r3, #4294967295
 801096a:	d102      	bne.n	8010972 <HAL_SPI_Transmit+0x34e>
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d114      	bne.n	801099c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f000 fbfe 	bl	8011174 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801097e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2201      	movs	r2, #1
 801098c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2200      	movs	r2, #0
 8010994:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010998:	2303      	movs	r3, #3
 801099a:	e02c      	b.n	80109f6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	f47f af79 	bne.w	801089c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	9300      	str	r3, [sp, #0]
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	2200      	movs	r2, #0
 80109b2:	2108      	movs	r1, #8
 80109b4:	68f8      	ldr	r0, [r7, #12]
 80109b6:	f000 fc7d 	bl	80112b4 <SPI_WaitOnFlagUntilTimeout>
 80109ba:	4603      	mov	r3, r0
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d007      	beq.n	80109d0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109c6:	f043 0220 	orr.w	r2, r3, #32
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f000 fbcf 	bl	8011174 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2201      	movs	r2, #1
 80109da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2200      	movs	r2, #0
 80109e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d001      	beq.n	80109f4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80109f0:	2301      	movs	r3, #1
 80109f2:	e000      	b.n	80109f6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80109f4:	2300      	movs	r3, #0
  }
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3718      	adds	r7, #24
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop

08010a00 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b084      	sub	sp, #16
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	60f8      	str	r0, [r7, #12]
 8010a08:	60b9      	str	r1, [r7, #8]
 8010a0a:	4613      	mov	r3, r2
 8010a0c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010a14:	b2db      	uxtb	r3, r3
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d001      	beq.n	8010a1e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8010a1a:	2302      	movs	r3, #2
 8010a1c:	e126      	b.n	8010c6c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d002      	beq.n	8010a2a <HAL_SPI_Transmit_DMA+0x2a>
 8010a24:	88fb      	ldrh	r3, [r7, #6]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d101      	bne.n	8010a2e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e11e      	b.n	8010c6c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d101      	bne.n	8010a3c <HAL_SPI_Transmit_DMA+0x3c>
 8010a38:	2302      	movs	r3, #2
 8010a3a:	e117      	b.n	8010c6c <HAL_SPI_Transmit_DMA+0x26c>
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2201      	movs	r2, #1
 8010a40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	2203      	movs	r2, #3
 8010a48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	68ba      	ldr	r2, [r7, #8]
 8010a58:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	88fa      	ldrh	r2, [r7, #6]
 8010a5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	88fa      	ldrh	r2, [r7, #6]
 8010a66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2200      	movs	r2, #0
 8010a74:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	2200      	movs	r2, #0
 8010a88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010a94:	d108      	bne.n	8010aa8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010aa4:	601a      	str	r2, [r3, #0]
 8010aa6:	e009      	b.n	8010abc <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010aba:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	2b0f      	cmp	r3, #15
 8010ac2:	d905      	bls.n	8010ad0 <HAL_SPI_Transmit_DMA+0xd0>
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ac8:	699b      	ldr	r3, [r3, #24]
 8010aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010ace:	d10f      	bne.n	8010af0 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8010ad4:	2b07      	cmp	r3, #7
 8010ad6:	d911      	bls.n	8010afc <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010adc:	699b      	ldr	r3, [r3, #24]
 8010ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010ae2:	d00b      	beq.n	8010afc <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ae8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8010aea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010aee:	d005      	beq.n	8010afc <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2200      	movs	r2, #0
 8010af4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8010af8:	2301      	movs	r3, #1
 8010afa:	e0b7      	b.n	8010c6c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	2b07      	cmp	r3, #7
 8010b02:	d820      	bhi.n	8010b46 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b08:	699b      	ldr	r3, [r3, #24]
 8010b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010b0e:	d109      	bne.n	8010b24 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010b16:	b29b      	uxth	r3, r3
 8010b18:	3301      	adds	r3, #1
 8010b1a:	105b      	asrs	r3, r3, #1
 8010b1c:	b29a      	uxth	r2, r3
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b28:	699b      	ldr	r3, [r3, #24]
 8010b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010b2e:	d11e      	bne.n	8010b6e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	3303      	adds	r3, #3
 8010b3a:	109b      	asrs	r3, r3, #2
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010b44:	e013      	b.n	8010b6e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	68db      	ldr	r3, [r3, #12]
 8010b4a:	2b0f      	cmp	r3, #15
 8010b4c:	d80f      	bhi.n	8010b6e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b52:	699b      	ldr	r3, [r3, #24]
 8010b54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010b58:	d109      	bne.n	8010b6e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	3301      	adds	r3, #1
 8010b64:	105b      	asrs	r3, r3, #1
 8010b66:	b29a      	uxth	r2, r3
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b72:	4a40      	ldr	r2, [pc, #256]	@ (8010c74 <HAL_SPI_Transmit_DMA+0x274>)
 8010b74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8010c78 <HAL_SPI_Transmit_DMA+0x278>)
 8010b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b82:	4a3e      	ldr	r2, [pc, #248]	@ (8010c7c <HAL_SPI_Transmit_DMA+0x27c>)
 8010b84:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	689a      	ldr	r2, [r3, #8]
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010b9c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	3320      	adds	r3, #32
 8010bae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010bb6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8010bb8:	f7f3 fc12 	bl	80043e0 <HAL_DMA_Start_IT>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d011      	beq.n	8010be6 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010bc8:	f043 0210 	orr.w	r2, r3, #16
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8010be2:	2301      	movs	r3, #1
 8010be4:	e042      	b.n	8010c6c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010bea:	69db      	ldr	r3, [r3, #28]
 8010bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010bf0:	d108      	bne.n	8010c04 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	6859      	ldr	r1, [r3, #4]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	4b20      	ldr	r3, [pc, #128]	@ (8010c80 <HAL_SPI_Transmit_DMA+0x280>)
 8010bfe:	400b      	ands	r3, r1
 8010c00:	6053      	str	r3, [r2, #4]
 8010c02:	e009      	b.n	8010c18 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	685a      	ldr	r2, [r3, #4]
 8010c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8010c80 <HAL_SPI_Transmit_DMA+0x280>)
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	88f9      	ldrh	r1, [r7, #6]
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	6812      	ldr	r2, [r2, #0]
 8010c14:	430b      	orrs	r3, r1
 8010c16:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	689a      	ldr	r2, [r3, #8]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010c26:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	691a      	ldr	r2, [r3, #16]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8010c36:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f042 0201 	orr.w	r2, r2, #1
 8010c46:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	685b      	ldr	r3, [r3, #4]
 8010c4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010c50:	d107      	bne.n	8010c62 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010c60:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2200      	movs	r2, #0
 8010c66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3710      	adds	r7, #16
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	080110df 	.word	0x080110df
 8010c78:	08011099 	.word	0x08011099
 8010c7c:	080110fb 	.word	0x080110fb
 8010c80:	ffff0000 	.word	0xffff0000

08010c84 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b08a      	sub	sp, #40	@ 0x28
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	695b      	ldr	r3, [r3, #20]
 8010c9a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8010c9c:	6a3a      	ldr	r2, [r7, #32]
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	4013      	ands	r3, r2
 8010ca2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	689b      	ldr	r3, [r3, #8]
 8010caa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8010cac:	2300      	movs	r3, #0
 8010cae:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010cb6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	3330      	adds	r3, #48	@ 0x30
 8010cbe:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d010      	beq.n	8010cec <HAL_SPI_IRQHandler+0x68>
 8010cca:	6a3b      	ldr	r3, [r7, #32]
 8010ccc:	f003 0308 	and.w	r3, r3, #8
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d00b      	beq.n	8010cec <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	699a      	ldr	r2, [r3, #24]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010ce2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f000 f9cd 	bl	8011084 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8010cea:	e192      	b.n	8011012 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010cec:	69bb      	ldr	r3, [r7, #24]
 8010cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d113      	bne.n	8010d1e <HAL_SPI_IRQHandler+0x9a>
 8010cf6:	69bb      	ldr	r3, [r7, #24]
 8010cf8:	f003 0320 	and.w	r3, r3, #32
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d10e      	bne.n	8010d1e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8010d00:	69bb      	ldr	r3, [r7, #24]
 8010d02:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d009      	beq.n	8010d1e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	4798      	blx	r3
    hspi->RxISR(hspi);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	4798      	blx	r3
    handled = 1UL;
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010d1e:	69bb      	ldr	r3, [r7, #24]
 8010d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d10f      	bne.n	8010d48 <HAL_SPI_IRQHandler+0xc4>
 8010d28:	69bb      	ldr	r3, [r7, #24]
 8010d2a:	f003 0301 	and.w	r3, r3, #1
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d00a      	beq.n	8010d48 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d105      	bne.n	8010d48 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	4798      	blx	r3
    handled = 1UL;
 8010d44:	2301      	movs	r3, #1
 8010d46:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010d48:	69bb      	ldr	r3, [r7, #24]
 8010d4a:	f003 0320 	and.w	r3, r3, #32
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d10f      	bne.n	8010d72 <HAL_SPI_IRQHandler+0xee>
 8010d52:	69bb      	ldr	r3, [r7, #24]
 8010d54:	f003 0302 	and.w	r3, r3, #2
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00a      	beq.n	8010d72 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d105      	bne.n	8010d72 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	4798      	blx	r3
    handled = 1UL;
 8010d6e:	2301      	movs	r3, #1
 8010d70:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8010d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f040 8147 	bne.w	8011008 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8010d7a:	69bb      	ldr	r3, [r7, #24]
 8010d7c:	f003 0308 	and.w	r3, r3, #8
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	f000 808b 	beq.w	8010e9c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	699a      	ldr	r2, [r3, #24]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f042 0208 	orr.w	r2, r2, #8
 8010d94:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	699a      	ldr	r2, [r3, #24]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	f042 0210 	orr.w	r2, r2, #16
 8010da4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	699a      	ldr	r2, [r3, #24]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010db4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	691a      	ldr	r2, [r3, #16]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f022 0208 	bic.w	r2, r2, #8
 8010dc4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	689b      	ldr	r3, [r3, #8]
 8010dcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d13d      	bne.n	8010e50 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8010dd4:	e036      	b.n	8010e44 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	68db      	ldr	r3, [r3, #12]
 8010dda:	2b0f      	cmp	r3, #15
 8010ddc:	d90b      	bls.n	8010df6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010de6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010de8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010dee:	1d1a      	adds	r2, r3, #4
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	665a      	str	r2, [r3, #100]	@ 0x64
 8010df4:	e01d      	b.n	8010e32 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	2b07      	cmp	r3, #7
 8010dfc:	d90b      	bls.n	8010e16 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e02:	68fa      	ldr	r2, [r7, #12]
 8010e04:	8812      	ldrh	r2, [r2, #0]
 8010e06:	b292      	uxth	r2, r2
 8010e08:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e0e:	1c9a      	adds	r2, r3, #2
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	665a      	str	r2, [r3, #100]	@ 0x64
 8010e14:	e00d      	b.n	8010e32 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e22:	7812      	ldrb	r2, [r2, #0]
 8010e24:	b2d2      	uxtb	r2, r2
 8010e26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e2c:	1c5a      	adds	r2, r3, #1
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010e38:	b29b      	uxth	r3, r3
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	b29a      	uxth	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d1c2      	bne.n	8010dd6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f000 f98f 	bl	8011174 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2201      	movs	r2, #1
 8010e5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d003      	beq.n	8010e70 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f000 f901 	bl	8011070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010e6e:	e0d0      	b.n	8011012 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8010e70:	7cfb      	ldrb	r3, [r7, #19]
 8010e72:	2b05      	cmp	r3, #5
 8010e74:	d103      	bne.n	8010e7e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f000 f8e6 	bl	8011048 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8010e7c:	e0c6      	b.n	801100c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8010e7e:	7cfb      	ldrb	r3, [r7, #19]
 8010e80:	2b04      	cmp	r3, #4
 8010e82:	d103      	bne.n	8010e8c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 f8d5 	bl	8011034 <HAL_SPI_RxCpltCallback>
    return;
 8010e8a:	e0bf      	b.n	801100c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8010e8c:	7cfb      	ldrb	r3, [r7, #19]
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	f040 80bc 	bne.w	801100c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f000 f8c3 	bl	8011020 <HAL_SPI_TxCpltCallback>
    return;
 8010e9a:	e0b7      	b.n	801100c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8010e9c:	69bb      	ldr	r3, [r7, #24]
 8010e9e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	f000 80b5 	beq.w	8011012 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d00f      	beq.n	8010ed2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010eb8:	f043 0204 	orr.w	r2, r3, #4
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	699a      	ldr	r2, [r3, #24]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010ed0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8010ed2:	69bb      	ldr	r3, [r7, #24]
 8010ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d00f      	beq.n	8010efc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ee2:	f043 0201 	orr.w	r2, r3, #1
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	699a      	ldr	r2, [r3, #24]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010efa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8010efc:	69bb      	ldr	r3, [r7, #24]
 8010efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00f      	beq.n	8010f26 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f0c:	f043 0208 	orr.w	r2, r3, #8
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	699a      	ldr	r2, [r3, #24]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010f24:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	f003 0320 	and.w	r3, r3, #32
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00f      	beq.n	8010f50 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	699a      	ldr	r2, [r3, #24]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	f042 0220 	orr.w	r2, r2, #32
 8010f4e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d05a      	beq.n	8011010 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f022 0201 	bic.w	r2, r2, #1
 8010f68:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	6919      	ldr	r1, [r3, #16]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	4b28      	ldr	r3, [pc, #160]	@ (8011018 <HAL_SPI_IRQHandler+0x394>)
 8010f76:	400b      	ands	r3, r1
 8010f78:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010f80:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010f84:	d138      	bne.n	8010ff8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	689a      	ldr	r2, [r3, #8]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010f94:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d013      	beq.n	8010fc6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010fa2:	4a1e      	ldr	r2, [pc, #120]	@ (801101c <HAL_SPI_IRQHandler+0x398>)
 8010fa4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7f3 ffa0 	bl	8004ef0 <HAL_DMA_Abort_IT>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d007      	beq.n	8010fc6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010fbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d020      	beq.n	8011010 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010fd2:	4a12      	ldr	r2, [pc, #72]	@ (801101c <HAL_SPI_IRQHandler+0x398>)
 8010fd4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7f3 ff88 	bl	8004ef0 <HAL_DMA_Abort_IT>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d014      	beq.n	8011010 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010fec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010ff6:	e00b      	b.n	8011010 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f000 f835 	bl	8011070 <HAL_SPI_ErrorCallback>
    return;
 8011006:	e003      	b.n	8011010 <HAL_SPI_IRQHandler+0x38c>
    return;
 8011008:	bf00      	nop
 801100a:	e002      	b.n	8011012 <HAL_SPI_IRQHandler+0x38e>
    return;
 801100c:	bf00      	nop
 801100e:	e000      	b.n	8011012 <HAL_SPI_IRQHandler+0x38e>
    return;
 8011010:	bf00      	nop
  }
}
 8011012:	3728      	adds	r7, #40	@ 0x28
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}
 8011018:	fffffc94 	.word	0xfffffc94
 801101c:	08011141 	.word	0x08011141

08011020 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011020:	b480      	push	{r7}
 8011022:	b083      	sub	sp, #12
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8011028:	bf00      	nop
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801103c:	bf00      	nop
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011050:	bf00      	nop
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr

0801105c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801105c:	b480      	push	{r7}
 801105e:	b083      	sub	sp, #12
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8011064:	bf00      	nop
 8011066:	370c      	adds	r7, #12
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr

08011070 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011078:	bf00      	nop
 801107a:	370c      	adds	r7, #12
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011084:	b480      	push	{r7}
 8011086:	b083      	sub	sp, #12
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801108c:	bf00      	nop
 801108e:	370c      	adds	r7, #12
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr

08011098 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110a4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	2b07      	cmp	r3, #7
 80110b0:	d011      	beq.n	80110d6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80110b6:	69db      	ldr	r3, [r3, #28]
 80110b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110bc:	d103      	bne.n	80110c6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80110be:	68f8      	ldr	r0, [r7, #12]
 80110c0:	f7ff ffae 	bl	8011020 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80110c4:	e007      	b.n	80110d6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	691a      	ldr	r2, [r3, #16]
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f042 0208 	orr.w	r2, r2, #8
 80110d4:	611a      	str	r2, [r3, #16]
}
 80110d6:	bf00      	nop
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b084      	sub	sp, #16
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110ea:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f7ff ffb5 	bl	801105c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80110f2:	bf00      	nop
 80110f4:	3710      	adds	r7, #16
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}

080110fa <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80110fa:	b580      	push	{r7, lr}
 80110fc:	b084      	sub	sp, #16
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011106:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f7f5 f86f 	bl	80061ec <HAL_DMA_GetError>
 801110e:	4603      	mov	r3, r0
 8011110:	2b02      	cmp	r3, #2
 8011112:	d011      	beq.n	8011138 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8011114:	68f8      	ldr	r0, [r7, #12]
 8011116:	f000 f82d 	bl	8011174 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011120:	f043 0210 	orr.w	r2, r3, #16
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2201      	movs	r2, #1
 801112e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8011132:	68f8      	ldr	r0, [r7, #12]
 8011134:	f7ff ff9c 	bl	8011070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8011138:	bf00      	nop
 801113a:	3710      	adds	r7, #16
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801114c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2200      	movs	r2, #0
 8011152:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2200      	movs	r2, #0
 801115a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2201      	movs	r2, #1
 8011162:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f7ff ff82 	bl	8011070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801116c:	bf00      	nop
 801116e:	3710      	adds	r7, #16
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011174:	b480      	push	{r7}
 8011176:	b085      	sub	sp, #20
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	695b      	ldr	r3, [r3, #20]
 8011182:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	699a      	ldr	r2, [r3, #24]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	f042 0208 	orr.w	r2, r2, #8
 8011192:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	699a      	ldr	r2, [r3, #24]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	f042 0210 	orr.w	r2, r2, #16
 80111a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	f022 0201 	bic.w	r2, r2, #1
 80111b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	6919      	ldr	r1, [r3, #16]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681a      	ldr	r2, [r3, #0]
 80111be:	4b3c      	ldr	r3, [pc, #240]	@ (80112b0 <SPI_CloseTransfer+0x13c>)
 80111c0:	400b      	ands	r3, r1
 80111c2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	689a      	ldr	r2, [r3, #8]
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80111d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	2b04      	cmp	r3, #4
 80111de:	d014      	beq.n	801120a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f003 0320 	and.w	r3, r3, #32
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00f      	beq.n	801120a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80111f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	699a      	ldr	r2, [r3, #24]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	f042 0220 	orr.w	r2, r2, #32
 8011208:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011210:	b2db      	uxtb	r3, r3
 8011212:	2b03      	cmp	r3, #3
 8011214:	d014      	beq.n	8011240 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801121c:	2b00      	cmp	r3, #0
 801121e:	d00f      	beq.n	8011240 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011226:	f043 0204 	orr.w	r2, r3, #4
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	699a      	ldr	r2, [r3, #24]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801123e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011246:	2b00      	cmp	r3, #0
 8011248:	d00f      	beq.n	801126a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011250:	f043 0201 	orr.w	r2, r3, #1
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	699a      	ldr	r2, [r3, #24]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011268:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011270:	2b00      	cmp	r3, #0
 8011272:	d00f      	beq.n	8011294 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801127a:	f043 0208 	orr.w	r2, r3, #8
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	699a      	ldr	r2, [r3, #24]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011292:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2200      	movs	r2, #0
 8011298:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2200      	movs	r2, #0
 80112a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80112a4:	bf00      	nop
 80112a6:	3714      	adds	r7, #20
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr
 80112b0:	fffffc90 	.word	0xfffffc90

080112b4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	60f8      	str	r0, [r7, #12]
 80112bc:	60b9      	str	r1, [r7, #8]
 80112be:	603b      	str	r3, [r7, #0]
 80112c0:	4613      	mov	r3, r2
 80112c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80112c4:	e010      	b.n	80112e8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80112c6:	f7f1 f8b9 	bl	800243c <HAL_GetTick>
 80112ca:	4602      	mov	r2, r0
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	683a      	ldr	r2, [r7, #0]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d803      	bhi.n	80112de <SPI_WaitOnFlagUntilTimeout+0x2a>
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112dc:	d102      	bne.n	80112e4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d101      	bne.n	80112e8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80112e4:	2303      	movs	r3, #3
 80112e6:	e00f      	b.n	8011308 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	695a      	ldr	r2, [r3, #20]
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	4013      	ands	r3, r2
 80112f2:	68ba      	ldr	r2, [r7, #8]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	bf0c      	ite	eq
 80112f8:	2301      	moveq	r3, #1
 80112fa:	2300      	movne	r3, #0
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	461a      	mov	r2, r3
 8011300:	79fb      	ldrb	r3, [r7, #7]
 8011302:	429a      	cmp	r2, r3
 8011304:	d0df      	beq.n	80112c6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	3710      	adds	r7, #16
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011310:	b480      	push	{r7}
 8011312:	b085      	sub	sp, #20
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801131c:	095b      	lsrs	r3, r3, #5
 801131e:	3301      	adds	r3, #1
 8011320:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	3301      	adds	r3, #1
 8011328:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	3307      	adds	r3, #7
 801132e:	08db      	lsrs	r3, r3, #3
 8011330:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	68fa      	ldr	r2, [r7, #12]
 8011336:	fb02 f303 	mul.w	r3, r2, r3
}
 801133a:	4618      	mov	r0, r3
 801133c:	3714      	adds	r7, #20
 801133e:	46bd      	mov	sp, r7
 8011340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011344:	4770      	bx	lr

08011346 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011346:	b580      	push	{r7, lr}
 8011348:	b082      	sub	sp, #8
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d101      	bne.n	8011358 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011354:	2301      	movs	r3, #1
 8011356:	e042      	b.n	80113de <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801135e:	2b00      	cmp	r3, #0
 8011360:	d106      	bne.n	8011370 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2200      	movs	r2, #0
 8011366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f7f0 fb72 	bl	8001a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2224      	movs	r2, #36	@ 0x24
 8011374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	681a      	ldr	r2, [r3, #0]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f022 0201 	bic.w	r2, r2, #1
 8011386:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801138c:	2b00      	cmp	r3, #0
 801138e:	d002      	beq.n	8011396 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f001 f987 	bl	80126a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 fc1c 	bl	8011bd4 <UART_SetConfig>
 801139c:	4603      	mov	r3, r0
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d101      	bne.n	80113a6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80113a2:	2301      	movs	r3, #1
 80113a4:	e01b      	b.n	80113de <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	685a      	ldr	r2, [r3, #4]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80113b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	689a      	ldr	r2, [r3, #8]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80113c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f042 0201 	orr.w	r2, r2, #1
 80113d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f001 fa06 	bl	80127e8 <UART_CheckIdleState>
 80113dc:	4603      	mov	r3, r0
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3708      	adds	r7, #8
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
	...

080113e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b0ba      	sub	sp, #232	@ 0xe8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	69db      	ldr	r3, [r3, #28]
 80113f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	689b      	ldr	r3, [r3, #8]
 801140a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801140e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8011412:	f640 030f 	movw	r3, #2063	@ 0x80f
 8011416:	4013      	ands	r3, r2
 8011418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801141c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011420:	2b00      	cmp	r3, #0
 8011422:	d11b      	bne.n	801145c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011428:	f003 0320 	and.w	r3, r3, #32
 801142c:	2b00      	cmp	r3, #0
 801142e:	d015      	beq.n	801145c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011434:	f003 0320 	and.w	r3, r3, #32
 8011438:	2b00      	cmp	r3, #0
 801143a:	d105      	bne.n	8011448 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801143c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011444:	2b00      	cmp	r3, #0
 8011446:	d009      	beq.n	801145c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801144c:	2b00      	cmp	r3, #0
 801144e:	f000 8393 	beq.w	8011b78 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	4798      	blx	r3
      }
      return;
 801145a:	e38d      	b.n	8011b78 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801145c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011460:	2b00      	cmp	r3, #0
 8011462:	f000 8123 	beq.w	80116ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011466:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801146a:	4b8d      	ldr	r3, [pc, #564]	@ (80116a0 <HAL_UART_IRQHandler+0x2b8>)
 801146c:	4013      	ands	r3, r2
 801146e:	2b00      	cmp	r3, #0
 8011470:	d106      	bne.n	8011480 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011472:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8011476:	4b8b      	ldr	r3, [pc, #556]	@ (80116a4 <HAL_UART_IRQHandler+0x2bc>)
 8011478:	4013      	ands	r3, r2
 801147a:	2b00      	cmp	r3, #0
 801147c:	f000 8116 	beq.w	80116ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011484:	f003 0301 	and.w	r3, r3, #1
 8011488:	2b00      	cmp	r3, #0
 801148a:	d011      	beq.n	80114b0 <HAL_UART_IRQHandler+0xc8>
 801148c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011494:	2b00      	cmp	r3, #0
 8011496:	d00b      	beq.n	80114b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	2201      	movs	r2, #1
 801149e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80114a6:	f043 0201 	orr.w	r2, r3, #1
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80114b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114b4:	f003 0302 	and.w	r3, r3, #2
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d011      	beq.n	80114e0 <HAL_UART_IRQHandler+0xf8>
 80114bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80114c0:	f003 0301 	and.w	r3, r3, #1
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d00b      	beq.n	80114e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2202      	movs	r2, #2
 80114ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80114d6:	f043 0204 	orr.w	r2, r3, #4
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80114e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114e4:	f003 0304 	and.w	r3, r3, #4
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d011      	beq.n	8011510 <HAL_UART_IRQHandler+0x128>
 80114ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80114f0:	f003 0301 	and.w	r3, r3, #1
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d00b      	beq.n	8011510 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	2204      	movs	r2, #4
 80114fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011506:	f043 0202 	orr.w	r2, r3, #2
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011514:	f003 0308 	and.w	r3, r3, #8
 8011518:	2b00      	cmp	r3, #0
 801151a:	d017      	beq.n	801154c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801151c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011520:	f003 0320 	and.w	r3, r3, #32
 8011524:	2b00      	cmp	r3, #0
 8011526:	d105      	bne.n	8011534 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011528:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801152c:	4b5c      	ldr	r3, [pc, #368]	@ (80116a0 <HAL_UART_IRQHandler+0x2b8>)
 801152e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011530:	2b00      	cmp	r3, #0
 8011532:	d00b      	beq.n	801154c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2208      	movs	r2, #8
 801153a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011542:	f043 0208 	orr.w	r2, r3, #8
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801154c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011554:	2b00      	cmp	r3, #0
 8011556:	d012      	beq.n	801157e <HAL_UART_IRQHandler+0x196>
 8011558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801155c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011560:	2b00      	cmp	r3, #0
 8011562:	d00c      	beq.n	801157e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801156c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011574:	f043 0220 	orr.w	r2, r3, #32
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011584:	2b00      	cmp	r3, #0
 8011586:	f000 82f9 	beq.w	8011b7c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801158a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801158e:	f003 0320 	and.w	r3, r3, #32
 8011592:	2b00      	cmp	r3, #0
 8011594:	d013      	beq.n	80115be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801159a:	f003 0320 	and.w	r3, r3, #32
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d105      	bne.n	80115ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80115a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80115a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d007      	beq.n	80115be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d003      	beq.n	80115be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80115c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	689b      	ldr	r3, [r3, #8]
 80115ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115d2:	2b40      	cmp	r3, #64	@ 0x40
 80115d4:	d005      	beq.n	80115e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80115d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80115da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d054      	beq.n	801168c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f001 fa18 	bl	8012a18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	689b      	ldr	r3, [r3, #8]
 80115ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115f2:	2b40      	cmp	r3, #64	@ 0x40
 80115f4:	d146      	bne.n	8011684 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	3308      	adds	r3, #8
 80115fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011600:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011604:	e853 3f00 	ldrex	r3, [r3]
 8011608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801160c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	3308      	adds	r3, #8
 801161e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8011622:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801162a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801162e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011632:	e841 2300 	strex	r3, r2, [r1]
 8011636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801163a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801163e:	2b00      	cmp	r3, #0
 8011640:	d1d9      	bne.n	80115f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011648:	2b00      	cmp	r3, #0
 801164a:	d017      	beq.n	801167c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011652:	4a15      	ldr	r2, [pc, #84]	@ (80116a8 <HAL_UART_IRQHandler+0x2c0>)
 8011654:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801165c:	4618      	mov	r0, r3
 801165e:	f7f3 fc47 	bl	8004ef0 <HAL_DMA_Abort_IT>
 8011662:	4603      	mov	r3, r0
 8011664:	2b00      	cmp	r3, #0
 8011666:	d019      	beq.n	801169c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801166e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8011676:	4610      	mov	r0, r2
 8011678:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801167a:	e00f      	b.n	801169c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f000 fa93 	bl	8011ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011682:	e00b      	b.n	801169c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 fa8f 	bl	8011ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801168a:	e007      	b.n	801169c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f000 fa8b 	bl	8011ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801169a:	e26f      	b.n	8011b7c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801169c:	bf00      	nop
    return;
 801169e:	e26d      	b.n	8011b7c <HAL_UART_IRQHandler+0x794>
 80116a0:	10000001 	.word	0x10000001
 80116a4:	04000120 	.word	0x04000120
 80116a8:	08012ae5 	.word	0x08012ae5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	f040 8203 	bne.w	8011abc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80116b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116ba:	f003 0310 	and.w	r3, r3, #16
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f000 81fc 	beq.w	8011abc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80116c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80116c8:	f003 0310 	and.w	r3, r3, #16
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f000 81f5 	beq.w	8011abc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	2210      	movs	r2, #16
 80116d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	689b      	ldr	r3, [r3, #8]
 80116e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116e4:	2b40      	cmp	r3, #64	@ 0x40
 80116e6:	f040 816d 	bne.w	80119c4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	4aa4      	ldr	r2, [pc, #656]	@ (8011984 <HAL_UART_IRQHandler+0x59c>)
 80116f4:	4293      	cmp	r3, r2
 80116f6:	d068      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	4aa1      	ldr	r2, [pc, #644]	@ (8011988 <HAL_UART_IRQHandler+0x5a0>)
 8011702:	4293      	cmp	r3, r2
 8011704:	d061      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	4a9f      	ldr	r2, [pc, #636]	@ (801198c <HAL_UART_IRQHandler+0x5a4>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d05a      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4a9c      	ldr	r2, [pc, #624]	@ (8011990 <HAL_UART_IRQHandler+0x5a8>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d053      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	4a9a      	ldr	r2, [pc, #616]	@ (8011994 <HAL_UART_IRQHandler+0x5ac>)
 801172c:	4293      	cmp	r3, r2
 801172e:	d04c      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4a97      	ldr	r2, [pc, #604]	@ (8011998 <HAL_UART_IRQHandler+0x5b0>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d045      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	4a95      	ldr	r2, [pc, #596]	@ (801199c <HAL_UART_IRQHandler+0x5b4>)
 8011748:	4293      	cmp	r3, r2
 801174a:	d03e      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4a92      	ldr	r2, [pc, #584]	@ (80119a0 <HAL_UART_IRQHandler+0x5b8>)
 8011756:	4293      	cmp	r3, r2
 8011758:	d037      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	4a90      	ldr	r2, [pc, #576]	@ (80119a4 <HAL_UART_IRQHandler+0x5bc>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d030      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	4a8d      	ldr	r2, [pc, #564]	@ (80119a8 <HAL_UART_IRQHandler+0x5c0>)
 8011772:	4293      	cmp	r3, r2
 8011774:	d029      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	4a8b      	ldr	r2, [pc, #556]	@ (80119ac <HAL_UART_IRQHandler+0x5c4>)
 8011780:	4293      	cmp	r3, r2
 8011782:	d022      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4a88      	ldr	r2, [pc, #544]	@ (80119b0 <HAL_UART_IRQHandler+0x5c8>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d01b      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	4a86      	ldr	r2, [pc, #536]	@ (80119b4 <HAL_UART_IRQHandler+0x5cc>)
 801179c:	4293      	cmp	r3, r2
 801179e:	d014      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	4a83      	ldr	r2, [pc, #524]	@ (80119b8 <HAL_UART_IRQHandler+0x5d0>)
 80117aa:	4293      	cmp	r3, r2
 80117ac:	d00d      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	4a81      	ldr	r2, [pc, #516]	@ (80119bc <HAL_UART_IRQHandler+0x5d4>)
 80117b8:	4293      	cmp	r3, r2
 80117ba:	d006      	beq.n	80117ca <HAL_UART_IRQHandler+0x3e2>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4a7e      	ldr	r2, [pc, #504]	@ (80119c0 <HAL_UART_IRQHandler+0x5d8>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d106      	bne.n	80117d8 <HAL_UART_IRQHandler+0x3f0>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	e005      	b.n	80117e4 <HAL_UART_IRQHandler+0x3fc>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80117e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	f000 80ad 	beq.w	801194c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80117f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80117fc:	429a      	cmp	r2, r3
 80117fe:	f080 80a5 	bcs.w	801194c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011808:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011812:	69db      	ldr	r3, [r3, #28]
 8011814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011818:	f000 8087 	beq.w	801192a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011828:	e853 3f00 	ldrex	r3, [r3]
 801182c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011830:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011838:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	461a      	mov	r2, r3
 8011842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801184a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801184e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8011852:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011856:	e841 2300 	strex	r3, r2, [r1]
 801185a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801185e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1da      	bne.n	801181c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	3308      	adds	r3, #8
 801186c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801186e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011870:	e853 3f00 	ldrex	r3, [r3]
 8011874:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011878:	f023 0301 	bic.w	r3, r3, #1
 801187c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	3308      	adds	r3, #8
 8011886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801188a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801188e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011890:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011892:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011896:	e841 2300 	strex	r3, r2, [r1]
 801189a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801189c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d1e1      	bne.n	8011866 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	3308      	adds	r3, #8
 80118a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80118ac:	e853 3f00 	ldrex	r3, [r3]
 80118b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80118b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80118b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	3308      	adds	r3, #8
 80118c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80118c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80118c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80118cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80118ce:	e841 2300 	strex	r3, r2, [r1]
 80118d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80118d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d1e3      	bne.n	80118a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2220      	movs	r2, #32
 80118de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2200      	movs	r2, #0
 80118e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118f0:	e853 3f00 	ldrex	r3, [r3]
 80118f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80118f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118f8:	f023 0310 	bic.w	r3, r3, #16
 80118fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	461a      	mov	r2, r3
 8011906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801190a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801190c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801190e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011910:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011912:	e841 2300 	strex	r3, r2, [r1]
 8011916:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801191a:	2b00      	cmp	r3, #0
 801191c:	d1e4      	bne.n	80118e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011924:	4618      	mov	r0, r3
 8011926:	f7f2 ffc5 	bl	80048b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2202      	movs	r2, #2
 801192e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801193c:	b29b      	uxth	r3, r3
 801193e:	1ad3      	subs	r3, r2, r3
 8011940:	b29b      	uxth	r3, r3
 8011942:	4619      	mov	r1, r3
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 f939 	bl	8011bbc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801194a:	e119      	b.n	8011b80 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011956:	429a      	cmp	r2, r3
 8011958:	f040 8112 	bne.w	8011b80 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011962:	69db      	ldr	r3, [r3, #28]
 8011964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011968:	f040 810a 	bne.w	8011b80 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2202      	movs	r2, #2
 8011970:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011978:	4619      	mov	r1, r3
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f000 f91e 	bl	8011bbc <HAL_UARTEx_RxEventCallback>
      return;
 8011980:	e0fe      	b.n	8011b80 <HAL_UART_IRQHandler+0x798>
 8011982:	bf00      	nop
 8011984:	40020010 	.word	0x40020010
 8011988:	40020028 	.word	0x40020028
 801198c:	40020040 	.word	0x40020040
 8011990:	40020058 	.word	0x40020058
 8011994:	40020070 	.word	0x40020070
 8011998:	40020088 	.word	0x40020088
 801199c:	400200a0 	.word	0x400200a0
 80119a0:	400200b8 	.word	0x400200b8
 80119a4:	40020410 	.word	0x40020410
 80119a8:	40020428 	.word	0x40020428
 80119ac:	40020440 	.word	0x40020440
 80119b0:	40020458 	.word	0x40020458
 80119b4:	40020470 	.word	0x40020470
 80119b8:	40020488 	.word	0x40020488
 80119bc:	400204a0 	.word	0x400204a0
 80119c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	1ad3      	subs	r3, r2, r3
 80119d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80119de:	b29b      	uxth	r3, r3
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	f000 80cf 	beq.w	8011b84 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80119e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	f000 80ca 	beq.w	8011b84 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119f8:	e853 3f00 	ldrex	r3, [r3]
 80119fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80119fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a14:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011a18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a1a:	e841 2300 	strex	r3, r2, [r1]
 8011a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d1e4      	bne.n	80119f0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	3308      	adds	r3, #8
 8011a2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a30:	e853 3f00 	ldrex	r3, [r3]
 8011a34:	623b      	str	r3, [r7, #32]
   return(result);
 8011a36:	6a3a      	ldr	r2, [r7, #32]
 8011a38:	4b55      	ldr	r3, [pc, #340]	@ (8011b90 <HAL_UART_IRQHandler+0x7a8>)
 8011a3a:	4013      	ands	r3, r2
 8011a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3308      	adds	r3, #8
 8011a46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011a4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8011a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a52:	e841 2300 	strex	r3, r2, [r1]
 8011a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d1e3      	bne.n	8011a26 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2220      	movs	r2, #32
 8011a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	e853 3f00 	ldrex	r3, [r3]
 8011a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f023 0310 	bic.w	r3, r3, #16
 8011a86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	461a      	mov	r2, r3
 8011a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011a94:	61fb      	str	r3, [r7, #28]
 8011a96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a98:	69b9      	ldr	r1, [r7, #24]
 8011a9a:	69fa      	ldr	r2, [r7, #28]
 8011a9c:	e841 2300 	strex	r3, r2, [r1]
 8011aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d1e4      	bne.n	8011a72 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2202      	movs	r2, #2
 8011aac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f000 f881 	bl	8011bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011aba:	e063      	b.n	8011b84 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d00e      	beq.n	8011ae6 <HAL_UART_IRQHandler+0x6fe>
 8011ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011acc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d008      	beq.n	8011ae6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f001 f83d 	bl	8012b5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011ae4:	e051      	b.n	8011b8a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d014      	beq.n	8011b1c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d105      	bne.n	8011b0a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011b02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d008      	beq.n	8011b1c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d03a      	beq.n	8011b88 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	4798      	blx	r3
    }
    return;
 8011b1a:	e035      	b.n	8011b88 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d009      	beq.n	8011b3c <HAL_UART_IRQHandler+0x754>
 8011b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d003      	beq.n	8011b3c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f000 ffe7 	bl	8012b08 <UART_EndTransmit_IT>
    return;
 8011b3a:	e026      	b.n	8011b8a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d009      	beq.n	8011b5c <HAL_UART_IRQHandler+0x774>
 8011b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d003      	beq.n	8011b5c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f001 f816 	bl	8012b86 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011b5a:	e016      	b.n	8011b8a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d010      	beq.n	8011b8a <HAL_UART_IRQHandler+0x7a2>
 8011b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	da0c      	bge.n	8011b8a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 fffe 	bl	8012b72 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011b76:	e008      	b.n	8011b8a <HAL_UART_IRQHandler+0x7a2>
      return;
 8011b78:	bf00      	nop
 8011b7a:	e006      	b.n	8011b8a <HAL_UART_IRQHandler+0x7a2>
    return;
 8011b7c:	bf00      	nop
 8011b7e:	e004      	b.n	8011b8a <HAL_UART_IRQHandler+0x7a2>
      return;
 8011b80:	bf00      	nop
 8011b82:	e002      	b.n	8011b8a <HAL_UART_IRQHandler+0x7a2>
      return;
 8011b84:	bf00      	nop
 8011b86:	e000      	b.n	8011b8a <HAL_UART_IRQHandler+0x7a2>
    return;
 8011b88:	bf00      	nop
  }
}
 8011b8a:	37e8      	adds	r7, #232	@ 0xe8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	effffffe 	.word	0xeffffffe

08011b94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b083      	sub	sp, #12
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011b9c:	bf00      	nop
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr

08011ba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011bb0:	bf00      	nop
 8011bb2:	370c      	adds	r7, #12
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr

08011bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011bc8:	bf00      	nop
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011bd8:	b092      	sub	sp, #72	@ 0x48
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011bde:	2300      	movs	r3, #0
 8011be0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	689a      	ldr	r2, [r3, #8]
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	691b      	ldr	r3, [r3, #16]
 8011bec:	431a      	orrs	r2, r3
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	695b      	ldr	r3, [r3, #20]
 8011bf2:	431a      	orrs	r2, r3
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	69db      	ldr	r3, [r3, #28]
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	4bbe      	ldr	r3, [pc, #760]	@ (8011efc <UART_SetConfig+0x328>)
 8011c04:	4013      	ands	r3, r2
 8011c06:	697a      	ldr	r2, [r7, #20]
 8011c08:	6812      	ldr	r2, [r2, #0]
 8011c0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011c0c:	430b      	orrs	r3, r1
 8011c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	68da      	ldr	r2, [r3, #12]
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	430a      	orrs	r2, r1
 8011c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	699b      	ldr	r3, [r3, #24]
 8011c2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4ab3      	ldr	r2, [pc, #716]	@ (8011f00 <UART_SetConfig+0x32c>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d004      	beq.n	8011c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	6a1b      	ldr	r3, [r3, #32]
 8011c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011c3c:	4313      	orrs	r3, r2
 8011c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	689a      	ldr	r2, [r3, #8]
 8011c46:	4baf      	ldr	r3, [pc, #700]	@ (8011f04 <UART_SetConfig+0x330>)
 8011c48:	4013      	ands	r3, r2
 8011c4a:	697a      	ldr	r2, [r7, #20]
 8011c4c:	6812      	ldr	r2, [r2, #0]
 8011c4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011c50:	430b      	orrs	r3, r1
 8011c52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c5a:	f023 010f 	bic.w	r1, r3, #15
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	430a      	orrs	r2, r1
 8011c68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	4aa6      	ldr	r2, [pc, #664]	@ (8011f08 <UART_SetConfig+0x334>)
 8011c70:	4293      	cmp	r3, r2
 8011c72:	d177      	bne.n	8011d64 <UART_SetConfig+0x190>
 8011c74:	4ba5      	ldr	r3, [pc, #660]	@ (8011f0c <UART_SetConfig+0x338>)
 8011c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011c7c:	2b28      	cmp	r3, #40	@ 0x28
 8011c7e:	d86d      	bhi.n	8011d5c <UART_SetConfig+0x188>
 8011c80:	a201      	add	r2, pc, #4	@ (adr r2, 8011c88 <UART_SetConfig+0xb4>)
 8011c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c86:	bf00      	nop
 8011c88:	08011d2d 	.word	0x08011d2d
 8011c8c:	08011d5d 	.word	0x08011d5d
 8011c90:	08011d5d 	.word	0x08011d5d
 8011c94:	08011d5d 	.word	0x08011d5d
 8011c98:	08011d5d 	.word	0x08011d5d
 8011c9c:	08011d5d 	.word	0x08011d5d
 8011ca0:	08011d5d 	.word	0x08011d5d
 8011ca4:	08011d5d 	.word	0x08011d5d
 8011ca8:	08011d35 	.word	0x08011d35
 8011cac:	08011d5d 	.word	0x08011d5d
 8011cb0:	08011d5d 	.word	0x08011d5d
 8011cb4:	08011d5d 	.word	0x08011d5d
 8011cb8:	08011d5d 	.word	0x08011d5d
 8011cbc:	08011d5d 	.word	0x08011d5d
 8011cc0:	08011d5d 	.word	0x08011d5d
 8011cc4:	08011d5d 	.word	0x08011d5d
 8011cc8:	08011d3d 	.word	0x08011d3d
 8011ccc:	08011d5d 	.word	0x08011d5d
 8011cd0:	08011d5d 	.word	0x08011d5d
 8011cd4:	08011d5d 	.word	0x08011d5d
 8011cd8:	08011d5d 	.word	0x08011d5d
 8011cdc:	08011d5d 	.word	0x08011d5d
 8011ce0:	08011d5d 	.word	0x08011d5d
 8011ce4:	08011d5d 	.word	0x08011d5d
 8011ce8:	08011d45 	.word	0x08011d45
 8011cec:	08011d5d 	.word	0x08011d5d
 8011cf0:	08011d5d 	.word	0x08011d5d
 8011cf4:	08011d5d 	.word	0x08011d5d
 8011cf8:	08011d5d 	.word	0x08011d5d
 8011cfc:	08011d5d 	.word	0x08011d5d
 8011d00:	08011d5d 	.word	0x08011d5d
 8011d04:	08011d5d 	.word	0x08011d5d
 8011d08:	08011d4d 	.word	0x08011d4d
 8011d0c:	08011d5d 	.word	0x08011d5d
 8011d10:	08011d5d 	.word	0x08011d5d
 8011d14:	08011d5d 	.word	0x08011d5d
 8011d18:	08011d5d 	.word	0x08011d5d
 8011d1c:	08011d5d 	.word	0x08011d5d
 8011d20:	08011d5d 	.word	0x08011d5d
 8011d24:	08011d5d 	.word	0x08011d5d
 8011d28:	08011d55 	.word	0x08011d55
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d32:	e222      	b.n	801217a <UART_SetConfig+0x5a6>
 8011d34:	2304      	movs	r3, #4
 8011d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d3a:	e21e      	b.n	801217a <UART_SetConfig+0x5a6>
 8011d3c:	2308      	movs	r3, #8
 8011d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d42:	e21a      	b.n	801217a <UART_SetConfig+0x5a6>
 8011d44:	2310      	movs	r3, #16
 8011d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d4a:	e216      	b.n	801217a <UART_SetConfig+0x5a6>
 8011d4c:	2320      	movs	r3, #32
 8011d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d52:	e212      	b.n	801217a <UART_SetConfig+0x5a6>
 8011d54:	2340      	movs	r3, #64	@ 0x40
 8011d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d5a:	e20e      	b.n	801217a <UART_SetConfig+0x5a6>
 8011d5c:	2380      	movs	r3, #128	@ 0x80
 8011d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d62:	e20a      	b.n	801217a <UART_SetConfig+0x5a6>
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	4a69      	ldr	r2, [pc, #420]	@ (8011f10 <UART_SetConfig+0x33c>)
 8011d6a:	4293      	cmp	r3, r2
 8011d6c:	d130      	bne.n	8011dd0 <UART_SetConfig+0x1fc>
 8011d6e:	4b67      	ldr	r3, [pc, #412]	@ (8011f0c <UART_SetConfig+0x338>)
 8011d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d72:	f003 0307 	and.w	r3, r3, #7
 8011d76:	2b05      	cmp	r3, #5
 8011d78:	d826      	bhi.n	8011dc8 <UART_SetConfig+0x1f4>
 8011d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8011d80 <UART_SetConfig+0x1ac>)
 8011d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d80:	08011d99 	.word	0x08011d99
 8011d84:	08011da1 	.word	0x08011da1
 8011d88:	08011da9 	.word	0x08011da9
 8011d8c:	08011db1 	.word	0x08011db1
 8011d90:	08011db9 	.word	0x08011db9
 8011d94:	08011dc1 	.word	0x08011dc1
 8011d98:	2300      	movs	r3, #0
 8011d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d9e:	e1ec      	b.n	801217a <UART_SetConfig+0x5a6>
 8011da0:	2304      	movs	r3, #4
 8011da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011da6:	e1e8      	b.n	801217a <UART_SetConfig+0x5a6>
 8011da8:	2308      	movs	r3, #8
 8011daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dae:	e1e4      	b.n	801217a <UART_SetConfig+0x5a6>
 8011db0:	2310      	movs	r3, #16
 8011db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011db6:	e1e0      	b.n	801217a <UART_SetConfig+0x5a6>
 8011db8:	2320      	movs	r3, #32
 8011dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dbe:	e1dc      	b.n	801217a <UART_SetConfig+0x5a6>
 8011dc0:	2340      	movs	r3, #64	@ 0x40
 8011dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dc6:	e1d8      	b.n	801217a <UART_SetConfig+0x5a6>
 8011dc8:	2380      	movs	r3, #128	@ 0x80
 8011dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dce:	e1d4      	b.n	801217a <UART_SetConfig+0x5a6>
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	4a4f      	ldr	r2, [pc, #316]	@ (8011f14 <UART_SetConfig+0x340>)
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d130      	bne.n	8011e3c <UART_SetConfig+0x268>
 8011dda:	4b4c      	ldr	r3, [pc, #304]	@ (8011f0c <UART_SetConfig+0x338>)
 8011ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011dde:	f003 0307 	and.w	r3, r3, #7
 8011de2:	2b05      	cmp	r3, #5
 8011de4:	d826      	bhi.n	8011e34 <UART_SetConfig+0x260>
 8011de6:	a201      	add	r2, pc, #4	@ (adr r2, 8011dec <UART_SetConfig+0x218>)
 8011de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dec:	08011e05 	.word	0x08011e05
 8011df0:	08011e0d 	.word	0x08011e0d
 8011df4:	08011e15 	.word	0x08011e15
 8011df8:	08011e1d 	.word	0x08011e1d
 8011dfc:	08011e25 	.word	0x08011e25
 8011e00:	08011e2d 	.word	0x08011e2d
 8011e04:	2300      	movs	r3, #0
 8011e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e0a:	e1b6      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e0c:	2304      	movs	r3, #4
 8011e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e12:	e1b2      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e14:	2308      	movs	r3, #8
 8011e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e1a:	e1ae      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e1c:	2310      	movs	r3, #16
 8011e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e22:	e1aa      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e24:	2320      	movs	r3, #32
 8011e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e2a:	e1a6      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e2c:	2340      	movs	r3, #64	@ 0x40
 8011e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e32:	e1a2      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e34:	2380      	movs	r3, #128	@ 0x80
 8011e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e3a:	e19e      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	4a35      	ldr	r2, [pc, #212]	@ (8011f18 <UART_SetConfig+0x344>)
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d130      	bne.n	8011ea8 <UART_SetConfig+0x2d4>
 8011e46:	4b31      	ldr	r3, [pc, #196]	@ (8011f0c <UART_SetConfig+0x338>)
 8011e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011e4a:	f003 0307 	and.w	r3, r3, #7
 8011e4e:	2b05      	cmp	r3, #5
 8011e50:	d826      	bhi.n	8011ea0 <UART_SetConfig+0x2cc>
 8011e52:	a201      	add	r2, pc, #4	@ (adr r2, 8011e58 <UART_SetConfig+0x284>)
 8011e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e58:	08011e71 	.word	0x08011e71
 8011e5c:	08011e79 	.word	0x08011e79
 8011e60:	08011e81 	.word	0x08011e81
 8011e64:	08011e89 	.word	0x08011e89
 8011e68:	08011e91 	.word	0x08011e91
 8011e6c:	08011e99 	.word	0x08011e99
 8011e70:	2300      	movs	r3, #0
 8011e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e76:	e180      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e78:	2304      	movs	r3, #4
 8011e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e7e:	e17c      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e80:	2308      	movs	r3, #8
 8011e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e86:	e178      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e88:	2310      	movs	r3, #16
 8011e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e8e:	e174      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e90:	2320      	movs	r3, #32
 8011e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e96:	e170      	b.n	801217a <UART_SetConfig+0x5a6>
 8011e98:	2340      	movs	r3, #64	@ 0x40
 8011e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e9e:	e16c      	b.n	801217a <UART_SetConfig+0x5a6>
 8011ea0:	2380      	movs	r3, #128	@ 0x80
 8011ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ea6:	e168      	b.n	801217a <UART_SetConfig+0x5a6>
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	4a1b      	ldr	r2, [pc, #108]	@ (8011f1c <UART_SetConfig+0x348>)
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	d142      	bne.n	8011f38 <UART_SetConfig+0x364>
 8011eb2:	4b16      	ldr	r3, [pc, #88]	@ (8011f0c <UART_SetConfig+0x338>)
 8011eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011eb6:	f003 0307 	and.w	r3, r3, #7
 8011eba:	2b05      	cmp	r3, #5
 8011ebc:	d838      	bhi.n	8011f30 <UART_SetConfig+0x35c>
 8011ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8011ec4 <UART_SetConfig+0x2f0>)
 8011ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec4:	08011edd 	.word	0x08011edd
 8011ec8:	08011ee5 	.word	0x08011ee5
 8011ecc:	08011eed 	.word	0x08011eed
 8011ed0:	08011ef5 	.word	0x08011ef5
 8011ed4:	08011f21 	.word	0x08011f21
 8011ed8:	08011f29 	.word	0x08011f29
 8011edc:	2300      	movs	r3, #0
 8011ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ee2:	e14a      	b.n	801217a <UART_SetConfig+0x5a6>
 8011ee4:	2304      	movs	r3, #4
 8011ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011eea:	e146      	b.n	801217a <UART_SetConfig+0x5a6>
 8011eec:	2308      	movs	r3, #8
 8011eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ef2:	e142      	b.n	801217a <UART_SetConfig+0x5a6>
 8011ef4:	2310      	movs	r3, #16
 8011ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011efa:	e13e      	b.n	801217a <UART_SetConfig+0x5a6>
 8011efc:	cfff69f3 	.word	0xcfff69f3
 8011f00:	58000c00 	.word	0x58000c00
 8011f04:	11fff4ff 	.word	0x11fff4ff
 8011f08:	40011000 	.word	0x40011000
 8011f0c:	58024400 	.word	0x58024400
 8011f10:	40004400 	.word	0x40004400
 8011f14:	40004800 	.word	0x40004800
 8011f18:	40004c00 	.word	0x40004c00
 8011f1c:	40005000 	.word	0x40005000
 8011f20:	2320      	movs	r3, #32
 8011f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f26:	e128      	b.n	801217a <UART_SetConfig+0x5a6>
 8011f28:	2340      	movs	r3, #64	@ 0x40
 8011f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f2e:	e124      	b.n	801217a <UART_SetConfig+0x5a6>
 8011f30:	2380      	movs	r3, #128	@ 0x80
 8011f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f36:	e120      	b.n	801217a <UART_SetConfig+0x5a6>
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	4acb      	ldr	r2, [pc, #812]	@ (801226c <UART_SetConfig+0x698>)
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d176      	bne.n	8012030 <UART_SetConfig+0x45c>
 8011f42:	4bcb      	ldr	r3, [pc, #812]	@ (8012270 <UART_SetConfig+0x69c>)
 8011f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011f4a:	2b28      	cmp	r3, #40	@ 0x28
 8011f4c:	d86c      	bhi.n	8012028 <UART_SetConfig+0x454>
 8011f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8011f54 <UART_SetConfig+0x380>)
 8011f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f54:	08011ff9 	.word	0x08011ff9
 8011f58:	08012029 	.word	0x08012029
 8011f5c:	08012029 	.word	0x08012029
 8011f60:	08012029 	.word	0x08012029
 8011f64:	08012029 	.word	0x08012029
 8011f68:	08012029 	.word	0x08012029
 8011f6c:	08012029 	.word	0x08012029
 8011f70:	08012029 	.word	0x08012029
 8011f74:	08012001 	.word	0x08012001
 8011f78:	08012029 	.word	0x08012029
 8011f7c:	08012029 	.word	0x08012029
 8011f80:	08012029 	.word	0x08012029
 8011f84:	08012029 	.word	0x08012029
 8011f88:	08012029 	.word	0x08012029
 8011f8c:	08012029 	.word	0x08012029
 8011f90:	08012029 	.word	0x08012029
 8011f94:	08012009 	.word	0x08012009
 8011f98:	08012029 	.word	0x08012029
 8011f9c:	08012029 	.word	0x08012029
 8011fa0:	08012029 	.word	0x08012029
 8011fa4:	08012029 	.word	0x08012029
 8011fa8:	08012029 	.word	0x08012029
 8011fac:	08012029 	.word	0x08012029
 8011fb0:	08012029 	.word	0x08012029
 8011fb4:	08012011 	.word	0x08012011
 8011fb8:	08012029 	.word	0x08012029
 8011fbc:	08012029 	.word	0x08012029
 8011fc0:	08012029 	.word	0x08012029
 8011fc4:	08012029 	.word	0x08012029
 8011fc8:	08012029 	.word	0x08012029
 8011fcc:	08012029 	.word	0x08012029
 8011fd0:	08012029 	.word	0x08012029
 8011fd4:	08012019 	.word	0x08012019
 8011fd8:	08012029 	.word	0x08012029
 8011fdc:	08012029 	.word	0x08012029
 8011fe0:	08012029 	.word	0x08012029
 8011fe4:	08012029 	.word	0x08012029
 8011fe8:	08012029 	.word	0x08012029
 8011fec:	08012029 	.word	0x08012029
 8011ff0:	08012029 	.word	0x08012029
 8011ff4:	08012021 	.word	0x08012021
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ffe:	e0bc      	b.n	801217a <UART_SetConfig+0x5a6>
 8012000:	2304      	movs	r3, #4
 8012002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012006:	e0b8      	b.n	801217a <UART_SetConfig+0x5a6>
 8012008:	2308      	movs	r3, #8
 801200a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801200e:	e0b4      	b.n	801217a <UART_SetConfig+0x5a6>
 8012010:	2310      	movs	r3, #16
 8012012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012016:	e0b0      	b.n	801217a <UART_SetConfig+0x5a6>
 8012018:	2320      	movs	r3, #32
 801201a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801201e:	e0ac      	b.n	801217a <UART_SetConfig+0x5a6>
 8012020:	2340      	movs	r3, #64	@ 0x40
 8012022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012026:	e0a8      	b.n	801217a <UART_SetConfig+0x5a6>
 8012028:	2380      	movs	r3, #128	@ 0x80
 801202a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801202e:	e0a4      	b.n	801217a <UART_SetConfig+0x5a6>
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	4a8f      	ldr	r2, [pc, #572]	@ (8012274 <UART_SetConfig+0x6a0>)
 8012036:	4293      	cmp	r3, r2
 8012038:	d130      	bne.n	801209c <UART_SetConfig+0x4c8>
 801203a:	4b8d      	ldr	r3, [pc, #564]	@ (8012270 <UART_SetConfig+0x69c>)
 801203c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801203e:	f003 0307 	and.w	r3, r3, #7
 8012042:	2b05      	cmp	r3, #5
 8012044:	d826      	bhi.n	8012094 <UART_SetConfig+0x4c0>
 8012046:	a201      	add	r2, pc, #4	@ (adr r2, 801204c <UART_SetConfig+0x478>)
 8012048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801204c:	08012065 	.word	0x08012065
 8012050:	0801206d 	.word	0x0801206d
 8012054:	08012075 	.word	0x08012075
 8012058:	0801207d 	.word	0x0801207d
 801205c:	08012085 	.word	0x08012085
 8012060:	0801208d 	.word	0x0801208d
 8012064:	2300      	movs	r3, #0
 8012066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801206a:	e086      	b.n	801217a <UART_SetConfig+0x5a6>
 801206c:	2304      	movs	r3, #4
 801206e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012072:	e082      	b.n	801217a <UART_SetConfig+0x5a6>
 8012074:	2308      	movs	r3, #8
 8012076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801207a:	e07e      	b.n	801217a <UART_SetConfig+0x5a6>
 801207c:	2310      	movs	r3, #16
 801207e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012082:	e07a      	b.n	801217a <UART_SetConfig+0x5a6>
 8012084:	2320      	movs	r3, #32
 8012086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801208a:	e076      	b.n	801217a <UART_SetConfig+0x5a6>
 801208c:	2340      	movs	r3, #64	@ 0x40
 801208e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012092:	e072      	b.n	801217a <UART_SetConfig+0x5a6>
 8012094:	2380      	movs	r3, #128	@ 0x80
 8012096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801209a:	e06e      	b.n	801217a <UART_SetConfig+0x5a6>
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	4a75      	ldr	r2, [pc, #468]	@ (8012278 <UART_SetConfig+0x6a4>)
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d130      	bne.n	8012108 <UART_SetConfig+0x534>
 80120a6:	4b72      	ldr	r3, [pc, #456]	@ (8012270 <UART_SetConfig+0x69c>)
 80120a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80120aa:	f003 0307 	and.w	r3, r3, #7
 80120ae:	2b05      	cmp	r3, #5
 80120b0:	d826      	bhi.n	8012100 <UART_SetConfig+0x52c>
 80120b2:	a201      	add	r2, pc, #4	@ (adr r2, 80120b8 <UART_SetConfig+0x4e4>)
 80120b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120b8:	080120d1 	.word	0x080120d1
 80120bc:	080120d9 	.word	0x080120d9
 80120c0:	080120e1 	.word	0x080120e1
 80120c4:	080120e9 	.word	0x080120e9
 80120c8:	080120f1 	.word	0x080120f1
 80120cc:	080120f9 	.word	0x080120f9
 80120d0:	2300      	movs	r3, #0
 80120d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120d6:	e050      	b.n	801217a <UART_SetConfig+0x5a6>
 80120d8:	2304      	movs	r3, #4
 80120da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120de:	e04c      	b.n	801217a <UART_SetConfig+0x5a6>
 80120e0:	2308      	movs	r3, #8
 80120e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120e6:	e048      	b.n	801217a <UART_SetConfig+0x5a6>
 80120e8:	2310      	movs	r3, #16
 80120ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120ee:	e044      	b.n	801217a <UART_SetConfig+0x5a6>
 80120f0:	2320      	movs	r3, #32
 80120f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120f6:	e040      	b.n	801217a <UART_SetConfig+0x5a6>
 80120f8:	2340      	movs	r3, #64	@ 0x40
 80120fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120fe:	e03c      	b.n	801217a <UART_SetConfig+0x5a6>
 8012100:	2380      	movs	r3, #128	@ 0x80
 8012102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012106:	e038      	b.n	801217a <UART_SetConfig+0x5a6>
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	4a5b      	ldr	r2, [pc, #364]	@ (801227c <UART_SetConfig+0x6a8>)
 801210e:	4293      	cmp	r3, r2
 8012110:	d130      	bne.n	8012174 <UART_SetConfig+0x5a0>
 8012112:	4b57      	ldr	r3, [pc, #348]	@ (8012270 <UART_SetConfig+0x69c>)
 8012114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012116:	f003 0307 	and.w	r3, r3, #7
 801211a:	2b05      	cmp	r3, #5
 801211c:	d826      	bhi.n	801216c <UART_SetConfig+0x598>
 801211e:	a201      	add	r2, pc, #4	@ (adr r2, 8012124 <UART_SetConfig+0x550>)
 8012120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012124:	0801213d 	.word	0x0801213d
 8012128:	08012145 	.word	0x08012145
 801212c:	0801214d 	.word	0x0801214d
 8012130:	08012155 	.word	0x08012155
 8012134:	0801215d 	.word	0x0801215d
 8012138:	08012165 	.word	0x08012165
 801213c:	2302      	movs	r3, #2
 801213e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012142:	e01a      	b.n	801217a <UART_SetConfig+0x5a6>
 8012144:	2304      	movs	r3, #4
 8012146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801214a:	e016      	b.n	801217a <UART_SetConfig+0x5a6>
 801214c:	2308      	movs	r3, #8
 801214e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012152:	e012      	b.n	801217a <UART_SetConfig+0x5a6>
 8012154:	2310      	movs	r3, #16
 8012156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801215a:	e00e      	b.n	801217a <UART_SetConfig+0x5a6>
 801215c:	2320      	movs	r3, #32
 801215e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012162:	e00a      	b.n	801217a <UART_SetConfig+0x5a6>
 8012164:	2340      	movs	r3, #64	@ 0x40
 8012166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801216a:	e006      	b.n	801217a <UART_SetConfig+0x5a6>
 801216c:	2380      	movs	r3, #128	@ 0x80
 801216e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012172:	e002      	b.n	801217a <UART_SetConfig+0x5a6>
 8012174:	2380      	movs	r3, #128	@ 0x80
 8012176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	4a3f      	ldr	r2, [pc, #252]	@ (801227c <UART_SetConfig+0x6a8>)
 8012180:	4293      	cmp	r3, r2
 8012182:	f040 80f8 	bne.w	8012376 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012186:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801218a:	2b20      	cmp	r3, #32
 801218c:	dc46      	bgt.n	801221c <UART_SetConfig+0x648>
 801218e:	2b02      	cmp	r3, #2
 8012190:	f2c0 8082 	blt.w	8012298 <UART_SetConfig+0x6c4>
 8012194:	3b02      	subs	r3, #2
 8012196:	2b1e      	cmp	r3, #30
 8012198:	d87e      	bhi.n	8012298 <UART_SetConfig+0x6c4>
 801219a:	a201      	add	r2, pc, #4	@ (adr r2, 80121a0 <UART_SetConfig+0x5cc>)
 801219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121a0:	08012223 	.word	0x08012223
 80121a4:	08012299 	.word	0x08012299
 80121a8:	0801222b 	.word	0x0801222b
 80121ac:	08012299 	.word	0x08012299
 80121b0:	08012299 	.word	0x08012299
 80121b4:	08012299 	.word	0x08012299
 80121b8:	0801223b 	.word	0x0801223b
 80121bc:	08012299 	.word	0x08012299
 80121c0:	08012299 	.word	0x08012299
 80121c4:	08012299 	.word	0x08012299
 80121c8:	08012299 	.word	0x08012299
 80121cc:	08012299 	.word	0x08012299
 80121d0:	08012299 	.word	0x08012299
 80121d4:	08012299 	.word	0x08012299
 80121d8:	0801224b 	.word	0x0801224b
 80121dc:	08012299 	.word	0x08012299
 80121e0:	08012299 	.word	0x08012299
 80121e4:	08012299 	.word	0x08012299
 80121e8:	08012299 	.word	0x08012299
 80121ec:	08012299 	.word	0x08012299
 80121f0:	08012299 	.word	0x08012299
 80121f4:	08012299 	.word	0x08012299
 80121f8:	08012299 	.word	0x08012299
 80121fc:	08012299 	.word	0x08012299
 8012200:	08012299 	.word	0x08012299
 8012204:	08012299 	.word	0x08012299
 8012208:	08012299 	.word	0x08012299
 801220c:	08012299 	.word	0x08012299
 8012210:	08012299 	.word	0x08012299
 8012214:	08012299 	.word	0x08012299
 8012218:	0801228b 	.word	0x0801228b
 801221c:	2b40      	cmp	r3, #64	@ 0x40
 801221e:	d037      	beq.n	8012290 <UART_SetConfig+0x6bc>
 8012220:	e03a      	b.n	8012298 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012222:	f7fd fb67 	bl	800f8f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8012226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012228:	e03c      	b.n	80122a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801222a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801222e:	4618      	mov	r0, r3
 8012230:	f7fd fb76 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012238:	e034      	b.n	80122a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801223a:	f107 0318 	add.w	r3, r7, #24
 801223e:	4618      	mov	r0, r3
 8012240:	f7fd fcc2 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012248:	e02c      	b.n	80122a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801224a:	4b09      	ldr	r3, [pc, #36]	@ (8012270 <UART_SetConfig+0x69c>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	f003 0320 	and.w	r3, r3, #32
 8012252:	2b00      	cmp	r3, #0
 8012254:	d016      	beq.n	8012284 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012256:	4b06      	ldr	r3, [pc, #24]	@ (8012270 <UART_SetConfig+0x69c>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	08db      	lsrs	r3, r3, #3
 801225c:	f003 0303 	and.w	r3, r3, #3
 8012260:	4a07      	ldr	r2, [pc, #28]	@ (8012280 <UART_SetConfig+0x6ac>)
 8012262:	fa22 f303 	lsr.w	r3, r2, r3
 8012266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012268:	e01c      	b.n	80122a4 <UART_SetConfig+0x6d0>
 801226a:	bf00      	nop
 801226c:	40011400 	.word	0x40011400
 8012270:	58024400 	.word	0x58024400
 8012274:	40007800 	.word	0x40007800
 8012278:	40007c00 	.word	0x40007c00
 801227c:	58000c00 	.word	0x58000c00
 8012280:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8012284:	4b9d      	ldr	r3, [pc, #628]	@ (80124fc <UART_SetConfig+0x928>)
 8012286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012288:	e00c      	b.n	80122a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801228a:	4b9d      	ldr	r3, [pc, #628]	@ (8012500 <UART_SetConfig+0x92c>)
 801228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801228e:	e009      	b.n	80122a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012296:	e005      	b.n	80122a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8012298:	2300      	movs	r3, #0
 801229a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801229c:	2301      	movs	r3, #1
 801229e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80122a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80122a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	f000 81de 	beq.w	8012668 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122b0:	4a94      	ldr	r2, [pc, #592]	@ (8012504 <UART_SetConfig+0x930>)
 80122b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122b6:	461a      	mov	r2, r3
 80122b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80122be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	685a      	ldr	r2, [r3, #4]
 80122c4:	4613      	mov	r3, r2
 80122c6:	005b      	lsls	r3, r3, #1
 80122c8:	4413      	add	r3, r2
 80122ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d305      	bcc.n	80122dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80122d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122d8:	429a      	cmp	r2, r3
 80122da:	d903      	bls.n	80122e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80122dc:	2301      	movs	r3, #1
 80122de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80122e2:	e1c1      	b.n	8012668 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80122e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122e6:	2200      	movs	r2, #0
 80122e8:	60bb      	str	r3, [r7, #8]
 80122ea:	60fa      	str	r2, [r7, #12]
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122f0:	4a84      	ldr	r2, [pc, #528]	@ (8012504 <UART_SetConfig+0x930>)
 80122f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	2200      	movs	r2, #0
 80122fa:	603b      	str	r3, [r7, #0]
 80122fc:	607a      	str	r2, [r7, #4]
 80122fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012306:	f7ee f843 	bl	8000390 <__aeabi_uldivmod>
 801230a:	4602      	mov	r2, r0
 801230c:	460b      	mov	r3, r1
 801230e:	4610      	mov	r0, r2
 8012310:	4619      	mov	r1, r3
 8012312:	f04f 0200 	mov.w	r2, #0
 8012316:	f04f 0300 	mov.w	r3, #0
 801231a:	020b      	lsls	r3, r1, #8
 801231c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012320:	0202      	lsls	r2, r0, #8
 8012322:	6979      	ldr	r1, [r7, #20]
 8012324:	6849      	ldr	r1, [r1, #4]
 8012326:	0849      	lsrs	r1, r1, #1
 8012328:	2000      	movs	r0, #0
 801232a:	460c      	mov	r4, r1
 801232c:	4605      	mov	r5, r0
 801232e:	eb12 0804 	adds.w	r8, r2, r4
 8012332:	eb43 0905 	adc.w	r9, r3, r5
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	2200      	movs	r2, #0
 801233c:	469a      	mov	sl, r3
 801233e:	4693      	mov	fp, r2
 8012340:	4652      	mov	r2, sl
 8012342:	465b      	mov	r3, fp
 8012344:	4640      	mov	r0, r8
 8012346:	4649      	mov	r1, r9
 8012348:	f7ee f822 	bl	8000390 <__aeabi_uldivmod>
 801234c:	4602      	mov	r2, r0
 801234e:	460b      	mov	r3, r1
 8012350:	4613      	mov	r3, r2
 8012352:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801235a:	d308      	bcc.n	801236e <UART_SetConfig+0x79a>
 801235c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801235e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012362:	d204      	bcs.n	801236e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801236a:	60da      	str	r2, [r3, #12]
 801236c:	e17c      	b.n	8012668 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801236e:	2301      	movs	r3, #1
 8012370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012374:	e178      	b.n	8012668 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	69db      	ldr	r3, [r3, #28]
 801237a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801237e:	f040 80c5 	bne.w	801250c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8012382:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012386:	2b20      	cmp	r3, #32
 8012388:	dc48      	bgt.n	801241c <UART_SetConfig+0x848>
 801238a:	2b00      	cmp	r3, #0
 801238c:	db7b      	blt.n	8012486 <UART_SetConfig+0x8b2>
 801238e:	2b20      	cmp	r3, #32
 8012390:	d879      	bhi.n	8012486 <UART_SetConfig+0x8b2>
 8012392:	a201      	add	r2, pc, #4	@ (adr r2, 8012398 <UART_SetConfig+0x7c4>)
 8012394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012398:	08012423 	.word	0x08012423
 801239c:	0801242b 	.word	0x0801242b
 80123a0:	08012487 	.word	0x08012487
 80123a4:	08012487 	.word	0x08012487
 80123a8:	08012433 	.word	0x08012433
 80123ac:	08012487 	.word	0x08012487
 80123b0:	08012487 	.word	0x08012487
 80123b4:	08012487 	.word	0x08012487
 80123b8:	08012443 	.word	0x08012443
 80123bc:	08012487 	.word	0x08012487
 80123c0:	08012487 	.word	0x08012487
 80123c4:	08012487 	.word	0x08012487
 80123c8:	08012487 	.word	0x08012487
 80123cc:	08012487 	.word	0x08012487
 80123d0:	08012487 	.word	0x08012487
 80123d4:	08012487 	.word	0x08012487
 80123d8:	08012453 	.word	0x08012453
 80123dc:	08012487 	.word	0x08012487
 80123e0:	08012487 	.word	0x08012487
 80123e4:	08012487 	.word	0x08012487
 80123e8:	08012487 	.word	0x08012487
 80123ec:	08012487 	.word	0x08012487
 80123f0:	08012487 	.word	0x08012487
 80123f4:	08012487 	.word	0x08012487
 80123f8:	08012487 	.word	0x08012487
 80123fc:	08012487 	.word	0x08012487
 8012400:	08012487 	.word	0x08012487
 8012404:	08012487 	.word	0x08012487
 8012408:	08012487 	.word	0x08012487
 801240c:	08012487 	.word	0x08012487
 8012410:	08012487 	.word	0x08012487
 8012414:	08012487 	.word	0x08012487
 8012418:	08012479 	.word	0x08012479
 801241c:	2b40      	cmp	r3, #64	@ 0x40
 801241e:	d02e      	beq.n	801247e <UART_SetConfig+0x8aa>
 8012420:	e031      	b.n	8012486 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012422:	f7fb fab1 	bl	800d988 <HAL_RCC_GetPCLK1Freq>
 8012426:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012428:	e033      	b.n	8012492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801242a:	f7fb fac3 	bl	800d9b4 <HAL_RCC_GetPCLK2Freq>
 801242e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012430:	e02f      	b.n	8012492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012436:	4618      	mov	r0, r3
 8012438:	f7fd fa72 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801243c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801243e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012440:	e027      	b.n	8012492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012442:	f107 0318 	add.w	r3, r7, #24
 8012446:	4618      	mov	r0, r3
 8012448:	f7fd fbbe 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012450:	e01f      	b.n	8012492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012452:	4b2d      	ldr	r3, [pc, #180]	@ (8012508 <UART_SetConfig+0x934>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f003 0320 	and.w	r3, r3, #32
 801245a:	2b00      	cmp	r3, #0
 801245c:	d009      	beq.n	8012472 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801245e:	4b2a      	ldr	r3, [pc, #168]	@ (8012508 <UART_SetConfig+0x934>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	08db      	lsrs	r3, r3, #3
 8012464:	f003 0303 	and.w	r3, r3, #3
 8012468:	4a24      	ldr	r2, [pc, #144]	@ (80124fc <UART_SetConfig+0x928>)
 801246a:	fa22 f303 	lsr.w	r3, r2, r3
 801246e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012470:	e00f      	b.n	8012492 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012472:	4b22      	ldr	r3, [pc, #136]	@ (80124fc <UART_SetConfig+0x928>)
 8012474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012476:	e00c      	b.n	8012492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012478:	4b21      	ldr	r3, [pc, #132]	@ (8012500 <UART_SetConfig+0x92c>)
 801247a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801247c:	e009      	b.n	8012492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801247e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012484:	e005      	b.n	8012492 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012486:	2300      	movs	r3, #0
 8012488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801248a:	2301      	movs	r3, #1
 801248c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012494:	2b00      	cmp	r3, #0
 8012496:	f000 80e7 	beq.w	8012668 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801249e:	4a19      	ldr	r2, [pc, #100]	@ (8012504 <UART_SetConfig+0x930>)
 80124a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80124a4:	461a      	mov	r2, r3
 80124a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80124ac:	005a      	lsls	r2, r3, #1
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	085b      	lsrs	r3, r3, #1
 80124b4:	441a      	add	r2, r3
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	685b      	ldr	r3, [r3, #4]
 80124ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80124be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80124c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124c2:	2b0f      	cmp	r3, #15
 80124c4:	d916      	bls.n	80124f4 <UART_SetConfig+0x920>
 80124c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124cc:	d212      	bcs.n	80124f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80124ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124d0:	b29b      	uxth	r3, r3
 80124d2:	f023 030f 	bic.w	r3, r3, #15
 80124d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80124d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124da:	085b      	lsrs	r3, r3, #1
 80124dc:	b29b      	uxth	r3, r3
 80124de:	f003 0307 	and.w	r3, r3, #7
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80124e6:	4313      	orrs	r3, r2
 80124e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80124f0:	60da      	str	r2, [r3, #12]
 80124f2:	e0b9      	b.n	8012668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80124f4:	2301      	movs	r3, #1
 80124f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80124fa:	e0b5      	b.n	8012668 <UART_SetConfig+0xa94>
 80124fc:	03d09000 	.word	0x03d09000
 8012500:	003d0900 	.word	0x003d0900
 8012504:	08017e18 	.word	0x08017e18
 8012508:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801250c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012510:	2b20      	cmp	r3, #32
 8012512:	dc49      	bgt.n	80125a8 <UART_SetConfig+0x9d4>
 8012514:	2b00      	cmp	r3, #0
 8012516:	db7c      	blt.n	8012612 <UART_SetConfig+0xa3e>
 8012518:	2b20      	cmp	r3, #32
 801251a:	d87a      	bhi.n	8012612 <UART_SetConfig+0xa3e>
 801251c:	a201      	add	r2, pc, #4	@ (adr r2, 8012524 <UART_SetConfig+0x950>)
 801251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012522:	bf00      	nop
 8012524:	080125af 	.word	0x080125af
 8012528:	080125b7 	.word	0x080125b7
 801252c:	08012613 	.word	0x08012613
 8012530:	08012613 	.word	0x08012613
 8012534:	080125bf 	.word	0x080125bf
 8012538:	08012613 	.word	0x08012613
 801253c:	08012613 	.word	0x08012613
 8012540:	08012613 	.word	0x08012613
 8012544:	080125cf 	.word	0x080125cf
 8012548:	08012613 	.word	0x08012613
 801254c:	08012613 	.word	0x08012613
 8012550:	08012613 	.word	0x08012613
 8012554:	08012613 	.word	0x08012613
 8012558:	08012613 	.word	0x08012613
 801255c:	08012613 	.word	0x08012613
 8012560:	08012613 	.word	0x08012613
 8012564:	080125df 	.word	0x080125df
 8012568:	08012613 	.word	0x08012613
 801256c:	08012613 	.word	0x08012613
 8012570:	08012613 	.word	0x08012613
 8012574:	08012613 	.word	0x08012613
 8012578:	08012613 	.word	0x08012613
 801257c:	08012613 	.word	0x08012613
 8012580:	08012613 	.word	0x08012613
 8012584:	08012613 	.word	0x08012613
 8012588:	08012613 	.word	0x08012613
 801258c:	08012613 	.word	0x08012613
 8012590:	08012613 	.word	0x08012613
 8012594:	08012613 	.word	0x08012613
 8012598:	08012613 	.word	0x08012613
 801259c:	08012613 	.word	0x08012613
 80125a0:	08012613 	.word	0x08012613
 80125a4:	08012605 	.word	0x08012605
 80125a8:	2b40      	cmp	r3, #64	@ 0x40
 80125aa:	d02e      	beq.n	801260a <UART_SetConfig+0xa36>
 80125ac:	e031      	b.n	8012612 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80125ae:	f7fb f9eb 	bl	800d988 <HAL_RCC_GetPCLK1Freq>
 80125b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80125b4:	e033      	b.n	801261e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80125b6:	f7fb f9fd 	bl	800d9b4 <HAL_RCC_GetPCLK2Freq>
 80125ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80125bc:	e02f      	b.n	801261e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80125be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7fd f9ac 	bl	800f920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80125c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80125cc:	e027      	b.n	801261e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80125ce:	f107 0318 	add.w	r3, r7, #24
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7fd faf8 	bl	800fbc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80125dc:	e01f      	b.n	801261e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80125de:	4b2d      	ldr	r3, [pc, #180]	@ (8012694 <UART_SetConfig+0xac0>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f003 0320 	and.w	r3, r3, #32
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d009      	beq.n	80125fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80125ea:	4b2a      	ldr	r3, [pc, #168]	@ (8012694 <UART_SetConfig+0xac0>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	08db      	lsrs	r3, r3, #3
 80125f0:	f003 0303 	and.w	r3, r3, #3
 80125f4:	4a28      	ldr	r2, [pc, #160]	@ (8012698 <UART_SetConfig+0xac4>)
 80125f6:	fa22 f303 	lsr.w	r3, r2, r3
 80125fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80125fc:	e00f      	b.n	801261e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80125fe:	4b26      	ldr	r3, [pc, #152]	@ (8012698 <UART_SetConfig+0xac4>)
 8012600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012602:	e00c      	b.n	801261e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012604:	4b25      	ldr	r3, [pc, #148]	@ (801269c <UART_SetConfig+0xac8>)
 8012606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012608:	e009      	b.n	801261e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801260a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801260e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012610:	e005      	b.n	801261e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8012612:	2300      	movs	r3, #0
 8012614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012616:	2301      	movs	r3, #1
 8012618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801261c:	bf00      	nop
    }

    if (pclk != 0U)
 801261e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012620:	2b00      	cmp	r3, #0
 8012622:	d021      	beq.n	8012668 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012628:	4a1d      	ldr	r2, [pc, #116]	@ (80126a0 <UART_SetConfig+0xacc>)
 801262a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801262e:	461a      	mov	r2, r3
 8012630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012632:	fbb3 f2f2 	udiv	r2, r3, r2
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	085b      	lsrs	r3, r3, #1
 801263c:	441a      	add	r2, r3
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	fbb2 f3f3 	udiv	r3, r2, r3
 8012646:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801264a:	2b0f      	cmp	r3, #15
 801264c:	d909      	bls.n	8012662 <UART_SetConfig+0xa8e>
 801264e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012654:	d205      	bcs.n	8012662 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012658:	b29a      	uxth	r2, r3
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	60da      	str	r2, [r3, #12]
 8012660:	e002      	b.n	8012668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8012662:	2301      	movs	r3, #1
 8012664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	2201      	movs	r2, #1
 801266c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	2201      	movs	r2, #1
 8012674:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	2200      	movs	r2, #0
 801267c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	2200      	movs	r2, #0
 8012682:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8012684:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8012688:	4618      	mov	r0, r3
 801268a:	3748      	adds	r7, #72	@ 0x48
 801268c:	46bd      	mov	sp, r7
 801268e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012692:	bf00      	nop
 8012694:	58024400 	.word	0x58024400
 8012698:	03d09000 	.word	0x03d09000
 801269c:	003d0900 	.word	0x003d0900
 80126a0:	08017e18 	.word	0x08017e18

080126a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80126a4:	b480      	push	{r7}
 80126a6:	b083      	sub	sp, #12
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126b0:	f003 0308 	and.w	r3, r3, #8
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d00a      	beq.n	80126ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	430a      	orrs	r2, r1
 80126cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126d2:	f003 0301 	and.w	r3, r3, #1
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d00a      	beq.n	80126f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	430a      	orrs	r2, r1
 80126ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126f4:	f003 0302 	and.w	r3, r3, #2
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d00a      	beq.n	8012712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	685b      	ldr	r3, [r3, #4]
 8012702:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	430a      	orrs	r2, r1
 8012710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012716:	f003 0304 	and.w	r3, r3, #4
 801271a:	2b00      	cmp	r3, #0
 801271c:	d00a      	beq.n	8012734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	430a      	orrs	r2, r1
 8012732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012738:	f003 0310 	and.w	r3, r3, #16
 801273c:	2b00      	cmp	r3, #0
 801273e:	d00a      	beq.n	8012756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	689b      	ldr	r3, [r3, #8]
 8012746:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	430a      	orrs	r2, r1
 8012754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801275a:	f003 0320 	and.w	r3, r3, #32
 801275e:	2b00      	cmp	r3, #0
 8012760:	d00a      	beq.n	8012778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	689b      	ldr	r3, [r3, #8]
 8012768:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	430a      	orrs	r2, r1
 8012776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801277c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012780:	2b00      	cmp	r3, #0
 8012782:	d01a      	beq.n	80127ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	685b      	ldr	r3, [r3, #4]
 801278a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	430a      	orrs	r2, r1
 8012798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801279e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80127a2:	d10a      	bne.n	80127ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	685b      	ldr	r3, [r3, #4]
 80127aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	430a      	orrs	r2, r1
 80127b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d00a      	beq.n	80127dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	430a      	orrs	r2, r1
 80127da:	605a      	str	r2, [r3, #4]
  }
}
 80127dc:	bf00      	nop
 80127de:	370c      	adds	r7, #12
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b098      	sub	sp, #96	@ 0x60
 80127ec:	af02      	add	r7, sp, #8
 80127ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2200      	movs	r2, #0
 80127f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80127f8:	f7ef fe20 	bl	800243c <HAL_GetTick>
 80127fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	f003 0308 	and.w	r3, r3, #8
 8012808:	2b08      	cmp	r3, #8
 801280a:	d12f      	bne.n	801286c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801280c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012810:	9300      	str	r3, [sp, #0]
 8012812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012814:	2200      	movs	r2, #0
 8012816:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 f88e 	bl	801293c <UART_WaitOnFlagUntilTimeout>
 8012820:	4603      	mov	r3, r0
 8012822:	2b00      	cmp	r3, #0
 8012824:	d022      	beq.n	801286c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801282c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801282e:	e853 3f00 	ldrex	r3, [r3]
 8012832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801283a:	653b      	str	r3, [r7, #80]	@ 0x50
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	461a      	mov	r2, r3
 8012842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012844:	647b      	str	r3, [r7, #68]	@ 0x44
 8012846:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801284a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801284c:	e841 2300 	strex	r3, r2, [r1]
 8012850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012854:	2b00      	cmp	r3, #0
 8012856:	d1e6      	bne.n	8012826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2220      	movs	r2, #32
 801285c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012868:	2303      	movs	r3, #3
 801286a:	e063      	b.n	8012934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f003 0304 	and.w	r3, r3, #4
 8012876:	2b04      	cmp	r3, #4
 8012878:	d149      	bne.n	801290e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801287a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801287e:	9300      	str	r3, [sp, #0]
 8012880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012882:	2200      	movs	r2, #0
 8012884:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f000 f857 	bl	801293c <UART_WaitOnFlagUntilTimeout>
 801288e:	4603      	mov	r3, r0
 8012890:	2b00      	cmp	r3, #0
 8012892:	d03c      	beq.n	801290e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801289c:	e853 3f00 	ldrex	r3, [r3]
 80128a0:	623b      	str	r3, [r7, #32]
   return(result);
 80128a2:	6a3b      	ldr	r3, [r7, #32]
 80128a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80128a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	461a      	mov	r2, r3
 80128b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80128b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80128b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128ba:	e841 2300 	strex	r3, r2, [r1]
 80128be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80128c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d1e6      	bne.n	8012894 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	3308      	adds	r3, #8
 80128cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	e853 3f00 	ldrex	r3, [r3]
 80128d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	f023 0301 	bic.w	r3, r3, #1
 80128dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	3308      	adds	r3, #8
 80128e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80128e6:	61fa      	str	r2, [r7, #28]
 80128e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ea:	69b9      	ldr	r1, [r7, #24]
 80128ec:	69fa      	ldr	r2, [r7, #28]
 80128ee:	e841 2300 	strex	r3, r2, [r1]
 80128f2:	617b      	str	r3, [r7, #20]
   return(result);
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1e5      	bne.n	80128c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2220      	movs	r2, #32
 80128fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2200      	movs	r2, #0
 8012906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801290a:	2303      	movs	r3, #3
 801290c:	e012      	b.n	8012934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2220      	movs	r2, #32
 8012912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2220      	movs	r2, #32
 801291a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2200      	movs	r2, #0
 8012922:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2200      	movs	r2, #0
 8012928:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2200      	movs	r2, #0
 801292e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012932:	2300      	movs	r3, #0
}
 8012934:	4618      	mov	r0, r3
 8012936:	3758      	adds	r7, #88	@ 0x58
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b084      	sub	sp, #16
 8012940:	af00      	add	r7, sp, #0
 8012942:	60f8      	str	r0, [r7, #12]
 8012944:	60b9      	str	r1, [r7, #8]
 8012946:	603b      	str	r3, [r7, #0]
 8012948:	4613      	mov	r3, r2
 801294a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801294c:	e04f      	b.n	80129ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012954:	d04b      	beq.n	80129ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012956:	f7ef fd71 	bl	800243c <HAL_GetTick>
 801295a:	4602      	mov	r2, r0
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	1ad3      	subs	r3, r2, r3
 8012960:	69ba      	ldr	r2, [r7, #24]
 8012962:	429a      	cmp	r2, r3
 8012964:	d302      	bcc.n	801296c <UART_WaitOnFlagUntilTimeout+0x30>
 8012966:	69bb      	ldr	r3, [r7, #24]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d101      	bne.n	8012970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801296c:	2303      	movs	r3, #3
 801296e:	e04e      	b.n	8012a0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f003 0304 	and.w	r3, r3, #4
 801297a:	2b00      	cmp	r3, #0
 801297c:	d037      	beq.n	80129ee <UART_WaitOnFlagUntilTimeout+0xb2>
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	2b80      	cmp	r3, #128	@ 0x80
 8012982:	d034      	beq.n	80129ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	2b40      	cmp	r3, #64	@ 0x40
 8012988:	d031      	beq.n	80129ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	69db      	ldr	r3, [r3, #28]
 8012990:	f003 0308 	and.w	r3, r3, #8
 8012994:	2b08      	cmp	r3, #8
 8012996:	d110      	bne.n	80129ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2208      	movs	r2, #8
 801299e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80129a0:	68f8      	ldr	r0, [r7, #12]
 80129a2:	f000 f839 	bl	8012a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2208      	movs	r2, #8
 80129aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2200      	movs	r2, #0
 80129b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80129b6:	2301      	movs	r3, #1
 80129b8:	e029      	b.n	8012a0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	69db      	ldr	r3, [r3, #28]
 80129c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80129c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80129c8:	d111      	bne.n	80129ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80129d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80129d4:	68f8      	ldr	r0, [r7, #12]
 80129d6:	f000 f81f 	bl	8012a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2220      	movs	r2, #32
 80129de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2200      	movs	r2, #0
 80129e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80129ea:	2303      	movs	r3, #3
 80129ec:	e00f      	b.n	8012a0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	69da      	ldr	r2, [r3, #28]
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	4013      	ands	r3, r2
 80129f8:	68ba      	ldr	r2, [r7, #8]
 80129fa:	429a      	cmp	r2, r3
 80129fc:	bf0c      	ite	eq
 80129fe:	2301      	moveq	r3, #1
 8012a00:	2300      	movne	r3, #0
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	461a      	mov	r2, r3
 8012a06:	79fb      	ldrb	r3, [r7, #7]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	d0a0      	beq.n	801294e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012a0c:	2300      	movs	r3, #0
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3710      	adds	r7, #16
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
	...

08012a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012a18:	b480      	push	{r7}
 8012a1a:	b095      	sub	sp, #84	@ 0x54
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a28:	e853 3f00 	ldrex	r3, [r3]
 8012a2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012a44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012a46:	e841 2300 	strex	r3, r2, [r1]
 8012a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d1e6      	bne.n	8012a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	3308      	adds	r3, #8
 8012a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a5a:	6a3b      	ldr	r3, [r7, #32]
 8012a5c:	e853 3f00 	ldrex	r3, [r3]
 8012a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8012a62:	69fa      	ldr	r2, [r7, #28]
 8012a64:	4b1e      	ldr	r3, [pc, #120]	@ (8012ae0 <UART_EndRxTransfer+0xc8>)
 8012a66:	4013      	ands	r3, r2
 8012a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	3308      	adds	r3, #8
 8012a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a7a:	e841 2300 	strex	r3, r2, [r1]
 8012a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d1e5      	bne.n	8012a52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a8a:	2b01      	cmp	r3, #1
 8012a8c:	d118      	bne.n	8012ac0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	e853 3f00 	ldrex	r3, [r3]
 8012a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	f023 0310 	bic.w	r3, r3, #16
 8012aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012aac:	61bb      	str	r3, [r7, #24]
 8012aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ab0:	6979      	ldr	r1, [r7, #20]
 8012ab2:	69ba      	ldr	r2, [r7, #24]
 8012ab4:	e841 2300 	strex	r3, r2, [r1]
 8012ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d1e6      	bne.n	8012a8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2220      	movs	r2, #32
 8012ac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2200      	movs	r2, #0
 8012acc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8012ad4:	bf00      	nop
 8012ad6:	3754      	adds	r7, #84	@ 0x54
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr
 8012ae0:	effffffe 	.word	0xeffffffe

08012ae4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012af0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	2200      	movs	r2, #0
 8012af6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012afa:	68f8      	ldr	r0, [r7, #12]
 8012afc:	f7ff f854 	bl	8011ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012b00:	bf00      	nop
 8012b02:	3710      	adds	r7, #16
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b088      	sub	sp, #32
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	e853 3f00 	ldrex	r3, [r3]
 8012b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012b24:	61fb      	str	r3, [r7, #28]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	69fb      	ldr	r3, [r7, #28]
 8012b2e:	61bb      	str	r3, [r7, #24]
 8012b30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b32:	6979      	ldr	r1, [r7, #20]
 8012b34:	69ba      	ldr	r2, [r7, #24]
 8012b36:	e841 2300 	strex	r3, r2, [r1]
 8012b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d1e6      	bne.n	8012b10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2220      	movs	r2, #32
 8012b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f7ff f81f 	bl	8011b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012b56:	bf00      	nop
 8012b58:	3720      	adds	r7, #32
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}

08012b5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012b5e:	b480      	push	{r7}
 8012b60:	b083      	sub	sp, #12
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012b66:	bf00      	nop
 8012b68:	370c      	adds	r7, #12
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr

08012b72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012b72:	b480      	push	{r7}
 8012b74:	b083      	sub	sp, #12
 8012b76:	af00      	add	r7, sp, #0
 8012b78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012b7a:	bf00      	nop
 8012b7c:	370c      	adds	r7, #12
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr

08012b86 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012b86:	b480      	push	{r7}
 8012b88:	b083      	sub	sp, #12
 8012b8a:	af00      	add	r7, sp, #0
 8012b8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012b8e:	bf00      	nop
 8012b90:	370c      	adds	r7, #12
 8012b92:	46bd      	mov	sp, r7
 8012b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b98:	4770      	bx	lr

08012b9a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012b9a:	b580      	push	{r7, lr}
 8012b9c:	b084      	sub	sp, #16
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d101      	bne.n	8012bb0 <HAL_UARTEx_EnableFifoMode+0x16>
 8012bac:	2302      	movs	r3, #2
 8012bae:	e02b      	b.n	8012c08 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2201      	movs	r2, #1
 8012bb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2224      	movs	r2, #36	@ 0x24
 8012bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	681a      	ldr	r2, [r3, #0]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	f022 0201 	bic.w	r2, r2, #1
 8012bd6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012bde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8012be6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	68fa      	ldr	r2, [r7, #12]
 8012bee:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f000 f889 	bl	8012d08 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2220      	movs	r2, #32
 8012bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2200      	movs	r2, #0
 8012c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012c06:	2300      	movs	r3, #0
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3710      	adds	r7, #16
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d101      	bne.n	8012c28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012c24:	2302      	movs	r3, #2
 8012c26:	e02d      	b.n	8012c84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2224      	movs	r2, #36	@ 0x24
 8012c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	681a      	ldr	r2, [r3, #0]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	f022 0201 	bic.w	r2, r2, #1
 8012c4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	689b      	ldr	r3, [r3, #8]
 8012c56:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	683a      	ldr	r2, [r7, #0]
 8012c60:	430a      	orrs	r2, r1
 8012c62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f000 f84f 	bl	8012d08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	68fa      	ldr	r2, [r7, #12]
 8012c70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2220      	movs	r2, #32
 8012c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012c82:	2300      	movs	r3, #0
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3710      	adds	r7, #16
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b084      	sub	sp, #16
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d101      	bne.n	8012ca4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012ca0:	2302      	movs	r3, #2
 8012ca2:	e02d      	b.n	8012d00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2224      	movs	r2, #36	@ 0x24
 8012cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	681a      	ldr	r2, [r3, #0]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	f022 0201 	bic.w	r2, r2, #1
 8012cca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	689b      	ldr	r3, [r3, #8]
 8012cd2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	683a      	ldr	r2, [r7, #0]
 8012cdc:	430a      	orrs	r2, r1
 8012cde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f000 f811 	bl	8012d08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	68fa      	ldr	r2, [r7, #12]
 8012cec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2220      	movs	r2, #32
 8012cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012cfe:	2300      	movs	r3, #0
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3710      	adds	r7, #16
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012d08:	b480      	push	{r7}
 8012d0a:	b085      	sub	sp, #20
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d108      	bne.n	8012d2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2201      	movs	r2, #1
 8012d24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012d28:	e031      	b.n	8012d8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012d2a:	2310      	movs	r3, #16
 8012d2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012d2e:	2310      	movs	r3, #16
 8012d30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	689b      	ldr	r3, [r3, #8]
 8012d38:	0e5b      	lsrs	r3, r3, #25
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	f003 0307 	and.w	r3, r3, #7
 8012d40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	689b      	ldr	r3, [r3, #8]
 8012d48:	0f5b      	lsrs	r3, r3, #29
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	f003 0307 	and.w	r3, r3, #7
 8012d50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d52:	7bbb      	ldrb	r3, [r7, #14]
 8012d54:	7b3a      	ldrb	r2, [r7, #12]
 8012d56:	4911      	ldr	r1, [pc, #68]	@ (8012d9c <UARTEx_SetNbDataToProcess+0x94>)
 8012d58:	5c8a      	ldrb	r2, [r1, r2]
 8012d5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012d5e:	7b3a      	ldrb	r2, [r7, #12]
 8012d60:	490f      	ldr	r1, [pc, #60]	@ (8012da0 <UARTEx_SetNbDataToProcess+0x98>)
 8012d62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d64:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d68:	b29a      	uxth	r2, r3
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d70:	7bfb      	ldrb	r3, [r7, #15]
 8012d72:	7b7a      	ldrb	r2, [r7, #13]
 8012d74:	4909      	ldr	r1, [pc, #36]	@ (8012d9c <UARTEx_SetNbDataToProcess+0x94>)
 8012d76:	5c8a      	ldrb	r2, [r1, r2]
 8012d78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012d7c:	7b7a      	ldrb	r2, [r7, #13]
 8012d7e:	4908      	ldr	r1, [pc, #32]	@ (8012da0 <UARTEx_SetNbDataToProcess+0x98>)
 8012d80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d82:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d86:	b29a      	uxth	r2, r3
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012d8e:	bf00      	nop
 8012d90:	3714      	adds	r7, #20
 8012d92:	46bd      	mov	sp, r7
 8012d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d98:	4770      	bx	lr
 8012d9a:	bf00      	nop
 8012d9c:	08017e30 	.word	0x08017e30
 8012da0:	08017e38 	.word	0x08017e38

08012da4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012da4:	b084      	sub	sp, #16
 8012da6:	b580      	push	{r7, lr}
 8012da8:	b084      	sub	sp, #16
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
 8012dae:	f107 001c 	add.w	r0, r7, #28
 8012db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012db6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	d121      	bne.n	8012e02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	68da      	ldr	r2, [r3, #12]
 8012dce:	4b2c      	ldr	r3, [pc, #176]	@ (8012e80 <USB_CoreInit+0xdc>)
 8012dd0:	4013      	ands	r3, r2
 8012dd2:	687a      	ldr	r2, [r7, #4]
 8012dd4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	68db      	ldr	r3, [r3, #12]
 8012dda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012de2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012de6:	2b01      	cmp	r3, #1
 8012de8:	d105      	bne.n	8012df6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	68db      	ldr	r3, [r3, #12]
 8012dee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f001 fafa 	bl	80143f0 <USB_CoreReset>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	73fb      	strb	r3, [r7, #15]
 8012e00:	e01b      	b.n	8012e3a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f001 faee 	bl	80143f0 <USB_CoreReset>
 8012e14:	4603      	mov	r3, r0
 8012e16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012e18:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d106      	bne.n	8012e2e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8012e2c:	e005      	b.n	8012e3a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012e3a:	7fbb      	ldrb	r3, [r7, #30]
 8012e3c:	2b01      	cmp	r3, #1
 8012e3e:	d116      	bne.n	8012e6e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012e44:	b29a      	uxth	r2, r3
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8012e84 <USB_CoreInit+0xe0>)
 8012e50:	4313      	orrs	r3, r2
 8012e52:	687a      	ldr	r2, [r7, #4]
 8012e54:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	689b      	ldr	r3, [r3, #8]
 8012e5a:	f043 0206 	orr.w	r2, r3, #6
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	689b      	ldr	r3, [r3, #8]
 8012e66:	f043 0220 	orr.w	r2, r3, #32
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	3710      	adds	r7, #16
 8012e74:	46bd      	mov	sp, r7
 8012e76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012e7a:	b004      	add	sp, #16
 8012e7c:	4770      	bx	lr
 8012e7e:	bf00      	nop
 8012e80:	ffbdffbf 	.word	0xffbdffbf
 8012e84:	03ee0000 	.word	0x03ee0000

08012e88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b087      	sub	sp, #28
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	60f8      	str	r0, [r7, #12]
 8012e90:	60b9      	str	r1, [r7, #8]
 8012e92:	4613      	mov	r3, r2
 8012e94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012e96:	79fb      	ldrb	r3, [r7, #7]
 8012e98:	2b02      	cmp	r3, #2
 8012e9a:	d165      	bne.n	8012f68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	4a41      	ldr	r2, [pc, #260]	@ (8012fa4 <USB_SetTurnaroundTime+0x11c>)
 8012ea0:	4293      	cmp	r3, r2
 8012ea2:	d906      	bls.n	8012eb2 <USB_SetTurnaroundTime+0x2a>
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	4a40      	ldr	r2, [pc, #256]	@ (8012fa8 <USB_SetTurnaroundTime+0x120>)
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	d202      	bcs.n	8012eb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012eac:	230f      	movs	r3, #15
 8012eae:	617b      	str	r3, [r7, #20]
 8012eb0:	e062      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8012fa8 <USB_SetTurnaroundTime+0x120>)
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	d306      	bcc.n	8012ec8 <USB_SetTurnaroundTime+0x40>
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	4a3b      	ldr	r2, [pc, #236]	@ (8012fac <USB_SetTurnaroundTime+0x124>)
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d202      	bcs.n	8012ec8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012ec2:	230e      	movs	r3, #14
 8012ec4:	617b      	str	r3, [r7, #20]
 8012ec6:	e057      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	4a38      	ldr	r2, [pc, #224]	@ (8012fac <USB_SetTurnaroundTime+0x124>)
 8012ecc:	4293      	cmp	r3, r2
 8012ece:	d306      	bcc.n	8012ede <USB_SetTurnaroundTime+0x56>
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	4a37      	ldr	r2, [pc, #220]	@ (8012fb0 <USB_SetTurnaroundTime+0x128>)
 8012ed4:	4293      	cmp	r3, r2
 8012ed6:	d202      	bcs.n	8012ede <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012ed8:	230d      	movs	r3, #13
 8012eda:	617b      	str	r3, [r7, #20]
 8012edc:	e04c      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	4a33      	ldr	r2, [pc, #204]	@ (8012fb0 <USB_SetTurnaroundTime+0x128>)
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	d306      	bcc.n	8012ef4 <USB_SetTurnaroundTime+0x6c>
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	4a32      	ldr	r2, [pc, #200]	@ (8012fb4 <USB_SetTurnaroundTime+0x12c>)
 8012eea:	4293      	cmp	r3, r2
 8012eec:	d802      	bhi.n	8012ef4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012eee:	230c      	movs	r3, #12
 8012ef0:	617b      	str	r3, [r7, #20]
 8012ef2:	e041      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8012fb4 <USB_SetTurnaroundTime+0x12c>)
 8012ef8:	4293      	cmp	r3, r2
 8012efa:	d906      	bls.n	8012f0a <USB_SetTurnaroundTime+0x82>
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	4a2e      	ldr	r2, [pc, #184]	@ (8012fb8 <USB_SetTurnaroundTime+0x130>)
 8012f00:	4293      	cmp	r3, r2
 8012f02:	d802      	bhi.n	8012f0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012f04:	230b      	movs	r3, #11
 8012f06:	617b      	str	r3, [r7, #20]
 8012f08:	e036      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8012fb8 <USB_SetTurnaroundTime+0x130>)
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d906      	bls.n	8012f20 <USB_SetTurnaroundTime+0x98>
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	4a29      	ldr	r2, [pc, #164]	@ (8012fbc <USB_SetTurnaroundTime+0x134>)
 8012f16:	4293      	cmp	r3, r2
 8012f18:	d802      	bhi.n	8012f20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012f1a:	230a      	movs	r3, #10
 8012f1c:	617b      	str	r3, [r7, #20]
 8012f1e:	e02b      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	4a26      	ldr	r2, [pc, #152]	@ (8012fbc <USB_SetTurnaroundTime+0x134>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d906      	bls.n	8012f36 <USB_SetTurnaroundTime+0xae>
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	4a25      	ldr	r2, [pc, #148]	@ (8012fc0 <USB_SetTurnaroundTime+0x138>)
 8012f2c:	4293      	cmp	r3, r2
 8012f2e:	d202      	bcs.n	8012f36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012f30:	2309      	movs	r3, #9
 8012f32:	617b      	str	r3, [r7, #20]
 8012f34:	e020      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	4a21      	ldr	r2, [pc, #132]	@ (8012fc0 <USB_SetTurnaroundTime+0x138>)
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d306      	bcc.n	8012f4c <USB_SetTurnaroundTime+0xc4>
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	4a20      	ldr	r2, [pc, #128]	@ (8012fc4 <USB_SetTurnaroundTime+0x13c>)
 8012f42:	4293      	cmp	r3, r2
 8012f44:	d802      	bhi.n	8012f4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012f46:	2308      	movs	r3, #8
 8012f48:	617b      	str	r3, [r7, #20]
 8012f4a:	e015      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8012fc4 <USB_SetTurnaroundTime+0x13c>)
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d906      	bls.n	8012f62 <USB_SetTurnaroundTime+0xda>
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	4a1c      	ldr	r2, [pc, #112]	@ (8012fc8 <USB_SetTurnaroundTime+0x140>)
 8012f58:	4293      	cmp	r3, r2
 8012f5a:	d202      	bcs.n	8012f62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012f5c:	2307      	movs	r3, #7
 8012f5e:	617b      	str	r3, [r7, #20]
 8012f60:	e00a      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012f62:	2306      	movs	r3, #6
 8012f64:	617b      	str	r3, [r7, #20]
 8012f66:	e007      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012f68:	79fb      	ldrb	r3, [r7, #7]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d102      	bne.n	8012f74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012f6e:	2309      	movs	r3, #9
 8012f70:	617b      	str	r3, [r7, #20]
 8012f72:	e001      	b.n	8012f78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012f74:	2309      	movs	r3, #9
 8012f76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	68db      	ldr	r3, [r3, #12]
 8012f7c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	68da      	ldr	r2, [r3, #12]
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	029b      	lsls	r3, r3, #10
 8012f8c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8012f90:	431a      	orrs	r2, r3
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012f96:	2300      	movs	r3, #0
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	371c      	adds	r7, #28
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa2:	4770      	bx	lr
 8012fa4:	00d8acbf 	.word	0x00d8acbf
 8012fa8:	00e4e1c0 	.word	0x00e4e1c0
 8012fac:	00f42400 	.word	0x00f42400
 8012fb0:	01067380 	.word	0x01067380
 8012fb4:	011a499f 	.word	0x011a499f
 8012fb8:	01312cff 	.word	0x01312cff
 8012fbc:	014ca43f 	.word	0x014ca43f
 8012fc0:	016e3600 	.word	0x016e3600
 8012fc4:	01a6ab1f 	.word	0x01a6ab1f
 8012fc8:	01e84800 	.word	0x01e84800

08012fcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b083      	sub	sp, #12
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	689b      	ldr	r3, [r3, #8]
 8012fd8:	f043 0201 	orr.w	r2, r3, #1
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012fe0:	2300      	movs	r3, #0
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	370c      	adds	r7, #12
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fec:	4770      	bx	lr

08012fee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012fee:	b480      	push	{r7}
 8012ff0:	b083      	sub	sp, #12
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	f023 0201 	bic.w	r2, r3, #1
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013002:	2300      	movs	r3, #0
}
 8013004:	4618      	mov	r0, r3
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr

08013010 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	460b      	mov	r3, r1
 801301a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801301c:	2300      	movs	r3, #0
 801301e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801302c:	78fb      	ldrb	r3, [r7, #3]
 801302e:	2b01      	cmp	r3, #1
 8013030:	d115      	bne.n	801305e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	68db      	ldr	r3, [r3, #12]
 8013036:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801303e:	200a      	movs	r0, #10
 8013040:	f7ef fa08 	bl	8002454 <HAL_Delay>
      ms += 10U;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	330a      	adds	r3, #10
 8013048:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f001 f93f 	bl	80142ce <USB_GetMode>
 8013050:	4603      	mov	r3, r0
 8013052:	2b01      	cmp	r3, #1
 8013054:	d01e      	beq.n	8013094 <USB_SetCurrentMode+0x84>
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2bc7      	cmp	r3, #199	@ 0xc7
 801305a:	d9f0      	bls.n	801303e <USB_SetCurrentMode+0x2e>
 801305c:	e01a      	b.n	8013094 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801305e:	78fb      	ldrb	r3, [r7, #3]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d115      	bne.n	8013090 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8013070:	200a      	movs	r0, #10
 8013072:	f7ef f9ef 	bl	8002454 <HAL_Delay>
      ms += 10U;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	330a      	adds	r3, #10
 801307a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f001 f926 	bl	80142ce <USB_GetMode>
 8013082:	4603      	mov	r3, r0
 8013084:	2b00      	cmp	r3, #0
 8013086:	d005      	beq.n	8013094 <USB_SetCurrentMode+0x84>
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	2bc7      	cmp	r3, #199	@ 0xc7
 801308c:	d9f0      	bls.n	8013070 <USB_SetCurrentMode+0x60>
 801308e:	e001      	b.n	8013094 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013090:	2301      	movs	r3, #1
 8013092:	e005      	b.n	80130a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2bc8      	cmp	r3, #200	@ 0xc8
 8013098:	d101      	bne.n	801309e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801309a:	2301      	movs	r3, #1
 801309c:	e000      	b.n	80130a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801309e:	2300      	movs	r3, #0
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3710      	adds	r7, #16
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80130a8:	b084      	sub	sp, #16
 80130aa:	b580      	push	{r7, lr}
 80130ac:	b086      	sub	sp, #24
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	6078      	str	r0, [r7, #4]
 80130b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80130b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80130ba:	2300      	movs	r3, #0
 80130bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80130c2:	2300      	movs	r3, #0
 80130c4:	613b      	str	r3, [r7, #16]
 80130c6:	e009      	b.n	80130dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80130c8:	687a      	ldr	r2, [r7, #4]
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	3340      	adds	r3, #64	@ 0x40
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	4413      	add	r3, r2
 80130d2:	2200      	movs	r2, #0
 80130d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	3301      	adds	r3, #1
 80130da:	613b      	str	r3, [r7, #16]
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	2b0e      	cmp	r3, #14
 80130e0:	d9f2      	bls.n	80130c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80130e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d11c      	bne.n	8013124 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130f0:	685b      	ldr	r3, [r3, #4]
 80130f2:	68fa      	ldr	r2, [r7, #12]
 80130f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80130f8:	f043 0302 	orr.w	r3, r3, #2
 80130fc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013102:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	e005      	b.n	8013130 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013128:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013136:	461a      	mov	r2, r3
 8013138:	2300      	movs	r3, #0
 801313a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801313c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8013140:	2b01      	cmp	r3, #1
 8013142:	d10d      	bne.n	8013160 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013148:	2b00      	cmp	r3, #0
 801314a:	d104      	bne.n	8013156 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801314c:	2100      	movs	r1, #0
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 f968 	bl	8013424 <USB_SetDevSpeed>
 8013154:	e008      	b.n	8013168 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013156:	2101      	movs	r1, #1
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f000 f963 	bl	8013424 <USB_SetDevSpeed>
 801315e:	e003      	b.n	8013168 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013160:	2103      	movs	r1, #3
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f000 f95e 	bl	8013424 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013168:	2110      	movs	r1, #16
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	f000 f8fa 	bl	8013364 <USB_FlushTxFifo>
 8013170:	4603      	mov	r3, r0
 8013172:	2b00      	cmp	r3, #0
 8013174:	d001      	beq.n	801317a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8013176:	2301      	movs	r3, #1
 8013178:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f000 f924 	bl	80133c8 <USB_FlushRxFifo>
 8013180:	4603      	mov	r3, r0
 8013182:	2b00      	cmp	r3, #0
 8013184:	d001      	beq.n	801318a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8013186:	2301      	movs	r3, #1
 8013188:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013190:	461a      	mov	r2, r3
 8013192:	2300      	movs	r3, #0
 8013194:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801319c:	461a      	mov	r2, r3
 801319e:	2300      	movs	r3, #0
 80131a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80131a8:	461a      	mov	r2, r3
 80131aa:	2300      	movs	r3, #0
 80131ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80131ae:	2300      	movs	r3, #0
 80131b0:	613b      	str	r3, [r7, #16]
 80131b2:	e043      	b.n	801323c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	015a      	lsls	r2, r3, #5
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	4413      	add	r3, r2
 80131bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80131c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80131ca:	d118      	bne.n	80131fe <USB_DevInit+0x156>
    {
      if (i == 0U)
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d10a      	bne.n	80131e8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	015a      	lsls	r2, r3, #5
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	4413      	add	r3, r2
 80131da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131de:	461a      	mov	r2, r3
 80131e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80131e4:	6013      	str	r3, [r2, #0]
 80131e6:	e013      	b.n	8013210 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	015a      	lsls	r2, r3, #5
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	4413      	add	r3, r2
 80131f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131f4:	461a      	mov	r2, r3
 80131f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80131fa:	6013      	str	r3, [r2, #0]
 80131fc:	e008      	b.n	8013210 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80131fe:	693b      	ldr	r3, [r7, #16]
 8013200:	015a      	lsls	r2, r3, #5
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	4413      	add	r3, r2
 8013206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801320a:	461a      	mov	r2, r3
 801320c:	2300      	movs	r3, #0
 801320e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	015a      	lsls	r2, r3, #5
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	4413      	add	r3, r2
 8013218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801321c:	461a      	mov	r2, r3
 801321e:	2300      	movs	r3, #0
 8013220:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	015a      	lsls	r2, r3, #5
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	4413      	add	r3, r2
 801322a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801322e:	461a      	mov	r2, r3
 8013230:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8013234:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	3301      	adds	r3, #1
 801323a:	613b      	str	r3, [r7, #16]
 801323c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013240:	461a      	mov	r2, r3
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	4293      	cmp	r3, r2
 8013246:	d3b5      	bcc.n	80131b4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013248:	2300      	movs	r3, #0
 801324a:	613b      	str	r3, [r7, #16]
 801324c:	e043      	b.n	80132d6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	015a      	lsls	r2, r3, #5
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	4413      	add	r3, r2
 8013256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013264:	d118      	bne.n	8013298 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d10a      	bne.n	8013282 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	015a      	lsls	r2, r3, #5
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	4413      	add	r3, r2
 8013274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013278:	461a      	mov	r2, r3
 801327a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801327e:	6013      	str	r3, [r2, #0]
 8013280:	e013      	b.n	80132aa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	015a      	lsls	r2, r3, #5
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	4413      	add	r3, r2
 801328a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801328e:	461a      	mov	r2, r3
 8013290:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8013294:	6013      	str	r3, [r2, #0]
 8013296:	e008      	b.n	80132aa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	015a      	lsls	r2, r3, #5
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	4413      	add	r3, r2
 80132a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132a4:	461a      	mov	r2, r3
 80132a6:	2300      	movs	r3, #0
 80132a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80132aa:	693b      	ldr	r3, [r7, #16]
 80132ac:	015a      	lsls	r2, r3, #5
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	4413      	add	r3, r2
 80132b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132b6:	461a      	mov	r2, r3
 80132b8:	2300      	movs	r3, #0
 80132ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80132bc:	693b      	ldr	r3, [r7, #16]
 80132be:	015a      	lsls	r2, r3, #5
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	4413      	add	r3, r2
 80132c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132c8:	461a      	mov	r2, r3
 80132ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80132ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	3301      	adds	r3, #1
 80132d4:	613b      	str	r3, [r7, #16]
 80132d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80132da:	461a      	mov	r2, r3
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	4293      	cmp	r3, r2
 80132e0:	d3b5      	bcc.n	801324e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80132e8:	691b      	ldr	r3, [r3, #16]
 80132ea:	68fa      	ldr	r2, [r7, #12]
 80132ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80132f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80132f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2200      	movs	r2, #0
 80132fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8013302:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013304:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013308:	2b00      	cmp	r3, #0
 801330a:	d105      	bne.n	8013318 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	699b      	ldr	r3, [r3, #24]
 8013310:	f043 0210 	orr.w	r2, r3, #16
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	699a      	ldr	r2, [r3, #24]
 801331c:	4b0f      	ldr	r3, [pc, #60]	@ (801335c <USB_DevInit+0x2b4>)
 801331e:	4313      	orrs	r3, r2
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013324:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8013328:	2b00      	cmp	r3, #0
 801332a:	d005      	beq.n	8013338 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	699b      	ldr	r3, [r3, #24]
 8013330:	f043 0208 	orr.w	r2, r3, #8
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013338:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801333c:	2b01      	cmp	r3, #1
 801333e:	d105      	bne.n	801334c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	699a      	ldr	r2, [r3, #24]
 8013344:	4b06      	ldr	r3, [pc, #24]	@ (8013360 <USB_DevInit+0x2b8>)
 8013346:	4313      	orrs	r3, r2
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801334c:	7dfb      	ldrb	r3, [r7, #23]
}
 801334e:	4618      	mov	r0, r3
 8013350:	3718      	adds	r7, #24
 8013352:	46bd      	mov	sp, r7
 8013354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013358:	b004      	add	sp, #16
 801335a:	4770      	bx	lr
 801335c:	803c3800 	.word	0x803c3800
 8013360:	40000004 	.word	0x40000004

08013364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013364:	b480      	push	{r7}
 8013366:	b085      	sub	sp, #20
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
 801336c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801336e:	2300      	movs	r3, #0
 8013370:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	3301      	adds	r3, #1
 8013376:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801337e:	d901      	bls.n	8013384 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013380:	2303      	movs	r3, #3
 8013382:	e01b      	b.n	80133bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	691b      	ldr	r3, [r3, #16]
 8013388:	2b00      	cmp	r3, #0
 801338a:	daf2      	bge.n	8013372 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801338c:	2300      	movs	r3, #0
 801338e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	019b      	lsls	r3, r3, #6
 8013394:	f043 0220 	orr.w	r2, r3, #32
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	3301      	adds	r3, #1
 80133a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80133a8:	d901      	bls.n	80133ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80133aa:	2303      	movs	r3, #3
 80133ac:	e006      	b.n	80133bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	691b      	ldr	r3, [r3, #16]
 80133b2:	f003 0320 	and.w	r3, r3, #32
 80133b6:	2b20      	cmp	r3, #32
 80133b8:	d0f0      	beq.n	801339c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80133ba:	2300      	movs	r3, #0
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3714      	adds	r7, #20
 80133c0:	46bd      	mov	sp, r7
 80133c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c6:	4770      	bx	lr

080133c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b085      	sub	sp, #20
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80133d0:	2300      	movs	r3, #0
 80133d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	3301      	adds	r3, #1
 80133d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80133e0:	d901      	bls.n	80133e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80133e2:	2303      	movs	r3, #3
 80133e4:	e018      	b.n	8013418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	691b      	ldr	r3, [r3, #16]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	daf2      	bge.n	80133d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80133ee:	2300      	movs	r3, #0
 80133f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2210      	movs	r2, #16
 80133f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	3301      	adds	r3, #1
 80133fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013404:	d901      	bls.n	801340a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013406:	2303      	movs	r3, #3
 8013408:	e006      	b.n	8013418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	691b      	ldr	r3, [r3, #16]
 801340e:	f003 0310 	and.w	r3, r3, #16
 8013412:	2b10      	cmp	r3, #16
 8013414:	d0f0      	beq.n	80133f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013416:	2300      	movs	r3, #0
}
 8013418:	4618      	mov	r0, r3
 801341a:	3714      	adds	r7, #20
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013424:	b480      	push	{r7}
 8013426:	b085      	sub	sp, #20
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	460b      	mov	r3, r1
 801342e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801343a:	681a      	ldr	r2, [r3, #0]
 801343c:	78fb      	ldrb	r3, [r7, #3]
 801343e:	68f9      	ldr	r1, [r7, #12]
 8013440:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013444:	4313      	orrs	r3, r2
 8013446:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013448:	2300      	movs	r3, #0
}
 801344a:	4618      	mov	r0, r3
 801344c:	3714      	adds	r7, #20
 801344e:	46bd      	mov	sp, r7
 8013450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013454:	4770      	bx	lr

08013456 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8013456:	b480      	push	{r7}
 8013458:	b087      	sub	sp, #28
 801345a:	af00      	add	r7, sp, #0
 801345c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013468:	689b      	ldr	r3, [r3, #8]
 801346a:	f003 0306 	and.w	r3, r3, #6
 801346e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d102      	bne.n	801347c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013476:	2300      	movs	r3, #0
 8013478:	75fb      	strb	r3, [r7, #23]
 801347a:	e00a      	b.n	8013492 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2b02      	cmp	r3, #2
 8013480:	d002      	beq.n	8013488 <USB_GetDevSpeed+0x32>
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	2b06      	cmp	r3, #6
 8013486:	d102      	bne.n	801348e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013488:	2302      	movs	r3, #2
 801348a:	75fb      	strb	r3, [r7, #23]
 801348c:	e001      	b.n	8013492 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801348e:	230f      	movs	r3, #15
 8013490:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013492:	7dfb      	ldrb	r3, [r7, #23]
}
 8013494:	4618      	mov	r0, r3
 8013496:	371c      	adds	r7, #28
 8013498:	46bd      	mov	sp, r7
 801349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349e:	4770      	bx	lr

080134a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b085      	sub	sp, #20
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	781b      	ldrb	r3, [r3, #0]
 80134b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	785b      	ldrb	r3, [r3, #1]
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d139      	bne.n	8013530 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80134c2:	69da      	ldr	r2, [r3, #28]
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	f003 030f 	and.w	r3, r3, #15
 80134cc:	2101      	movs	r1, #1
 80134ce:	fa01 f303 	lsl.w	r3, r1, r3
 80134d2:	b29b      	uxth	r3, r3
 80134d4:	68f9      	ldr	r1, [r7, #12]
 80134d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80134da:	4313      	orrs	r3, r2
 80134dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	015a      	lsls	r2, r3, #5
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	4413      	add	r3, r2
 80134e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d153      	bne.n	801359c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	015a      	lsls	r2, r3, #5
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	4413      	add	r3, r2
 80134fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013500:	681a      	ldr	r2, [r3, #0]
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	689b      	ldr	r3, [r3, #8]
 8013506:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	791b      	ldrb	r3, [r3, #4]
 801350e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013510:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	059b      	lsls	r3, r3, #22
 8013516:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013518:	431a      	orrs	r2, r3
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	0159      	lsls	r1, r3, #5
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	440b      	add	r3, r1
 8013522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013526:	4619      	mov	r1, r3
 8013528:	4b20      	ldr	r3, [pc, #128]	@ (80135ac <USB_ActivateEndpoint+0x10c>)
 801352a:	4313      	orrs	r3, r2
 801352c:	600b      	str	r3, [r1, #0]
 801352e:	e035      	b.n	801359c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013536:	69da      	ldr	r2, [r3, #28]
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	781b      	ldrb	r3, [r3, #0]
 801353c:	f003 030f 	and.w	r3, r3, #15
 8013540:	2101      	movs	r1, #1
 8013542:	fa01 f303 	lsl.w	r3, r1, r3
 8013546:	041b      	lsls	r3, r3, #16
 8013548:	68f9      	ldr	r1, [r7, #12]
 801354a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801354e:	4313      	orrs	r3, r2
 8013550:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	015a      	lsls	r2, r3, #5
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	4413      	add	r3, r2
 801355a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013564:	2b00      	cmp	r3, #0
 8013566:	d119      	bne.n	801359c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	015a      	lsls	r2, r3, #5
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	4413      	add	r3, r2
 8013570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013574:	681a      	ldr	r2, [r3, #0]
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	689b      	ldr	r3, [r3, #8]
 801357a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	791b      	ldrb	r3, [r3, #4]
 8013582:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013584:	430b      	orrs	r3, r1
 8013586:	431a      	orrs	r2, r3
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	0159      	lsls	r1, r3, #5
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	440b      	add	r3, r1
 8013590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013594:	4619      	mov	r1, r3
 8013596:	4b05      	ldr	r3, [pc, #20]	@ (80135ac <USB_ActivateEndpoint+0x10c>)
 8013598:	4313      	orrs	r3, r2
 801359a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801359c:	2300      	movs	r3, #0
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3714      	adds	r7, #20
 80135a2:	46bd      	mov	sp, r7
 80135a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a8:	4770      	bx	lr
 80135aa:	bf00      	nop
 80135ac:	10008000 	.word	0x10008000

080135b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b085      	sub	sp, #20
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	785b      	ldrb	r3, [r3, #1]
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d161      	bne.n	8013690 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	015a      	lsls	r2, r3, #5
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	4413      	add	r3, r2
 80135d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80135de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80135e2:	d11f      	bne.n	8013624 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	015a      	lsls	r2, r3, #5
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	4413      	add	r3, r2
 80135ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	68ba      	ldr	r2, [r7, #8]
 80135f4:	0151      	lsls	r1, r2, #5
 80135f6:	68fa      	ldr	r2, [r7, #12]
 80135f8:	440a      	add	r2, r1
 80135fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80135fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013602:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	015a      	lsls	r2, r3, #5
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	4413      	add	r3, r2
 801360c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	68ba      	ldr	r2, [r7, #8]
 8013614:	0151      	lsls	r1, r2, #5
 8013616:	68fa      	ldr	r2, [r7, #12]
 8013618:	440a      	add	r2, r1
 801361a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801361e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801362a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	f003 030f 	and.w	r3, r3, #15
 8013634:	2101      	movs	r1, #1
 8013636:	fa01 f303 	lsl.w	r3, r1, r3
 801363a:	b29b      	uxth	r3, r3
 801363c:	43db      	mvns	r3, r3
 801363e:	68f9      	ldr	r1, [r7, #12]
 8013640:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013644:	4013      	ands	r3, r2
 8013646:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801364e:	69da      	ldr	r2, [r3, #28]
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	f003 030f 	and.w	r3, r3, #15
 8013658:	2101      	movs	r1, #1
 801365a:	fa01 f303 	lsl.w	r3, r1, r3
 801365e:	b29b      	uxth	r3, r3
 8013660:	43db      	mvns	r3, r3
 8013662:	68f9      	ldr	r1, [r7, #12]
 8013664:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013668:	4013      	ands	r3, r2
 801366a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	015a      	lsls	r2, r3, #5
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	4413      	add	r3, r2
 8013674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013678:	681a      	ldr	r2, [r3, #0]
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	0159      	lsls	r1, r3, #5
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	440b      	add	r3, r1
 8013682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013686:	4619      	mov	r1, r3
 8013688:	4b35      	ldr	r3, [pc, #212]	@ (8013760 <USB_DeactivateEndpoint+0x1b0>)
 801368a:	4013      	ands	r3, r2
 801368c:	600b      	str	r3, [r1, #0]
 801368e:	e060      	b.n	8013752 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	015a      	lsls	r2, r3, #5
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	4413      	add	r3, r2
 8013698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80136a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80136a6:	d11f      	bne.n	80136e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	015a      	lsls	r2, r3, #5
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	4413      	add	r3, r2
 80136b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	68ba      	ldr	r2, [r7, #8]
 80136b8:	0151      	lsls	r1, r2, #5
 80136ba:	68fa      	ldr	r2, [r7, #12]
 80136bc:	440a      	add	r2, r1
 80136be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80136c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80136c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	015a      	lsls	r2, r3, #5
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	4413      	add	r3, r2
 80136d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	68ba      	ldr	r2, [r7, #8]
 80136d8:	0151      	lsls	r1, r2, #5
 80136da:	68fa      	ldr	r2, [r7, #12]
 80136dc:	440a      	add	r2, r1
 80136de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80136e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80136e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80136ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	f003 030f 	and.w	r3, r3, #15
 80136f8:	2101      	movs	r1, #1
 80136fa:	fa01 f303 	lsl.w	r3, r1, r3
 80136fe:	041b      	lsls	r3, r3, #16
 8013700:	43db      	mvns	r3, r3
 8013702:	68f9      	ldr	r1, [r7, #12]
 8013704:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013708:	4013      	ands	r3, r2
 801370a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013712:	69da      	ldr	r2, [r3, #28]
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	f003 030f 	and.w	r3, r3, #15
 801371c:	2101      	movs	r1, #1
 801371e:	fa01 f303 	lsl.w	r3, r1, r3
 8013722:	041b      	lsls	r3, r3, #16
 8013724:	43db      	mvns	r3, r3
 8013726:	68f9      	ldr	r1, [r7, #12]
 8013728:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801372c:	4013      	ands	r3, r2
 801372e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	015a      	lsls	r2, r3, #5
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	4413      	add	r3, r2
 8013738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	0159      	lsls	r1, r3, #5
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	440b      	add	r3, r1
 8013746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801374a:	4619      	mov	r1, r3
 801374c:	4b05      	ldr	r3, [pc, #20]	@ (8013764 <USB_DeactivateEndpoint+0x1b4>)
 801374e:	4013      	ands	r3, r2
 8013750:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013752:	2300      	movs	r3, #0
}
 8013754:	4618      	mov	r0, r3
 8013756:	3714      	adds	r7, #20
 8013758:	46bd      	mov	sp, r7
 801375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375e:	4770      	bx	lr
 8013760:	ec337800 	.word	0xec337800
 8013764:	eff37800 	.word	0xeff37800

08013768 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b08a      	sub	sp, #40	@ 0x28
 801376c:	af02      	add	r7, sp, #8
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	4613      	mov	r3, r2
 8013774:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801377a:	68bb      	ldr	r3, [r7, #8]
 801377c:	781b      	ldrb	r3, [r3, #0]
 801377e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	785b      	ldrb	r3, [r3, #1]
 8013784:	2b01      	cmp	r3, #1
 8013786:	f040 8185 	bne.w	8013a94 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	691b      	ldr	r3, [r3, #16]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d132      	bne.n	80137f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	015a      	lsls	r2, r3, #5
 8013796:	69fb      	ldr	r3, [r7, #28]
 8013798:	4413      	add	r3, r2
 801379a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801379e:	691a      	ldr	r2, [r3, #16]
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	0159      	lsls	r1, r3, #5
 80137a4:	69fb      	ldr	r3, [r7, #28]
 80137a6:	440b      	add	r3, r1
 80137a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137ac:	4619      	mov	r1, r3
 80137ae:	4ba7      	ldr	r3, [pc, #668]	@ (8013a4c <USB_EPStartXfer+0x2e4>)
 80137b0:	4013      	ands	r3, r2
 80137b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80137b4:	69bb      	ldr	r3, [r7, #24]
 80137b6:	015a      	lsls	r2, r3, #5
 80137b8:	69fb      	ldr	r3, [r7, #28]
 80137ba:	4413      	add	r3, r2
 80137bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137c0:	691b      	ldr	r3, [r3, #16]
 80137c2:	69ba      	ldr	r2, [r7, #24]
 80137c4:	0151      	lsls	r1, r2, #5
 80137c6:	69fa      	ldr	r2, [r7, #28]
 80137c8:	440a      	add	r2, r1
 80137ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80137ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80137d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80137d4:	69bb      	ldr	r3, [r7, #24]
 80137d6:	015a      	lsls	r2, r3, #5
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	4413      	add	r3, r2
 80137dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137e0:	691a      	ldr	r2, [r3, #16]
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	0159      	lsls	r1, r3, #5
 80137e6:	69fb      	ldr	r3, [r7, #28]
 80137e8:	440b      	add	r3, r1
 80137ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137ee:	4619      	mov	r1, r3
 80137f0:	4b97      	ldr	r3, [pc, #604]	@ (8013a50 <USB_EPStartXfer+0x2e8>)
 80137f2:	4013      	ands	r3, r2
 80137f4:	610b      	str	r3, [r1, #16]
 80137f6:	e097      	b.n	8013928 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	015a      	lsls	r2, r3, #5
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	4413      	add	r3, r2
 8013800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013804:	691a      	ldr	r2, [r3, #16]
 8013806:	69bb      	ldr	r3, [r7, #24]
 8013808:	0159      	lsls	r1, r3, #5
 801380a:	69fb      	ldr	r3, [r7, #28]
 801380c:	440b      	add	r3, r1
 801380e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013812:	4619      	mov	r1, r3
 8013814:	4b8e      	ldr	r3, [pc, #568]	@ (8013a50 <USB_EPStartXfer+0x2e8>)
 8013816:	4013      	ands	r3, r2
 8013818:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	015a      	lsls	r2, r3, #5
 801381e:	69fb      	ldr	r3, [r7, #28]
 8013820:	4413      	add	r3, r2
 8013822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013826:	691a      	ldr	r2, [r3, #16]
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	0159      	lsls	r1, r3, #5
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	440b      	add	r3, r1
 8013830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013834:	4619      	mov	r1, r3
 8013836:	4b85      	ldr	r3, [pc, #532]	@ (8013a4c <USB_EPStartXfer+0x2e4>)
 8013838:	4013      	ands	r3, r2
 801383a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801383c:	69bb      	ldr	r3, [r7, #24]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d11a      	bne.n	8013878 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	691a      	ldr	r2, [r3, #16]
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	689b      	ldr	r3, [r3, #8]
 801384a:	429a      	cmp	r2, r3
 801384c:	d903      	bls.n	8013856 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	689a      	ldr	r2, [r3, #8]
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013856:	69bb      	ldr	r3, [r7, #24]
 8013858:	015a      	lsls	r2, r3, #5
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	4413      	add	r3, r2
 801385e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013862:	691b      	ldr	r3, [r3, #16]
 8013864:	69ba      	ldr	r2, [r7, #24]
 8013866:	0151      	lsls	r1, r2, #5
 8013868:	69fa      	ldr	r2, [r7, #28]
 801386a:	440a      	add	r2, r1
 801386c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013870:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013874:	6113      	str	r3, [r2, #16]
 8013876:	e044      	b.n	8013902 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	691a      	ldr	r2, [r3, #16]
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	689b      	ldr	r3, [r3, #8]
 8013880:	4413      	add	r3, r2
 8013882:	1e5a      	subs	r2, r3, #1
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	689b      	ldr	r3, [r3, #8]
 8013888:	fbb2 f3f3 	udiv	r3, r2, r3
 801388c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 801388e:	69bb      	ldr	r3, [r7, #24]
 8013890:	015a      	lsls	r2, r3, #5
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	4413      	add	r3, r2
 8013896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801389a:	691a      	ldr	r2, [r3, #16]
 801389c:	8afb      	ldrh	r3, [r7, #22]
 801389e:	04d9      	lsls	r1, r3, #19
 80138a0:	4b6c      	ldr	r3, [pc, #432]	@ (8013a54 <USB_EPStartXfer+0x2ec>)
 80138a2:	400b      	ands	r3, r1
 80138a4:	69b9      	ldr	r1, [r7, #24]
 80138a6:	0148      	lsls	r0, r1, #5
 80138a8:	69f9      	ldr	r1, [r7, #28]
 80138aa:	4401      	add	r1, r0
 80138ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80138b0:	4313      	orrs	r3, r2
 80138b2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	791b      	ldrb	r3, [r3, #4]
 80138b8:	2b01      	cmp	r3, #1
 80138ba:	d122      	bne.n	8013902 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80138bc:	69bb      	ldr	r3, [r7, #24]
 80138be:	015a      	lsls	r2, r3, #5
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	4413      	add	r3, r2
 80138c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138c8:	691b      	ldr	r3, [r3, #16]
 80138ca:	69ba      	ldr	r2, [r7, #24]
 80138cc:	0151      	lsls	r1, r2, #5
 80138ce:	69fa      	ldr	r2, [r7, #28]
 80138d0:	440a      	add	r2, r1
 80138d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80138d6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80138da:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	015a      	lsls	r2, r3, #5
 80138e0:	69fb      	ldr	r3, [r7, #28]
 80138e2:	4413      	add	r3, r2
 80138e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138e8:	691a      	ldr	r2, [r3, #16]
 80138ea:	8afb      	ldrh	r3, [r7, #22]
 80138ec:	075b      	lsls	r3, r3, #29
 80138ee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80138f2:	69b9      	ldr	r1, [r7, #24]
 80138f4:	0148      	lsls	r0, r1, #5
 80138f6:	69f9      	ldr	r1, [r7, #28]
 80138f8:	4401      	add	r1, r0
 80138fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80138fe:	4313      	orrs	r3, r2
 8013900:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013902:	69bb      	ldr	r3, [r7, #24]
 8013904:	015a      	lsls	r2, r3, #5
 8013906:	69fb      	ldr	r3, [r7, #28]
 8013908:	4413      	add	r3, r2
 801390a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801390e:	691a      	ldr	r2, [r3, #16]
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	691b      	ldr	r3, [r3, #16]
 8013914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013918:	69b9      	ldr	r1, [r7, #24]
 801391a:	0148      	lsls	r0, r1, #5
 801391c:	69f9      	ldr	r1, [r7, #28]
 801391e:	4401      	add	r1, r0
 8013920:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013924:	4313      	orrs	r3, r2
 8013926:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013928:	79fb      	ldrb	r3, [r7, #7]
 801392a:	2b01      	cmp	r3, #1
 801392c:	d14b      	bne.n	80139c6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	69db      	ldr	r3, [r3, #28]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d009      	beq.n	801394a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013936:	69bb      	ldr	r3, [r7, #24]
 8013938:	015a      	lsls	r2, r3, #5
 801393a:	69fb      	ldr	r3, [r7, #28]
 801393c:	4413      	add	r3, r2
 801393e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013942:	461a      	mov	r2, r3
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	69db      	ldr	r3, [r3, #28]
 8013948:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	791b      	ldrb	r3, [r3, #4]
 801394e:	2b01      	cmp	r3, #1
 8013950:	d128      	bne.n	80139a4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013952:	69fb      	ldr	r3, [r7, #28]
 8013954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013958:	689b      	ldr	r3, [r3, #8]
 801395a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801395e:	2b00      	cmp	r3, #0
 8013960:	d110      	bne.n	8013984 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013962:	69bb      	ldr	r3, [r7, #24]
 8013964:	015a      	lsls	r2, r3, #5
 8013966:	69fb      	ldr	r3, [r7, #28]
 8013968:	4413      	add	r3, r2
 801396a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	69ba      	ldr	r2, [r7, #24]
 8013972:	0151      	lsls	r1, r2, #5
 8013974:	69fa      	ldr	r2, [r7, #28]
 8013976:	440a      	add	r2, r1
 8013978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801397c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013980:	6013      	str	r3, [r2, #0]
 8013982:	e00f      	b.n	80139a4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013984:	69bb      	ldr	r3, [r7, #24]
 8013986:	015a      	lsls	r2, r3, #5
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	4413      	add	r3, r2
 801398c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	69ba      	ldr	r2, [r7, #24]
 8013994:	0151      	lsls	r1, r2, #5
 8013996:	69fa      	ldr	r2, [r7, #28]
 8013998:	440a      	add	r2, r1
 801399a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801399e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80139a2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80139a4:	69bb      	ldr	r3, [r7, #24]
 80139a6:	015a      	lsls	r2, r3, #5
 80139a8:	69fb      	ldr	r3, [r7, #28]
 80139aa:	4413      	add	r3, r2
 80139ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	69ba      	ldr	r2, [r7, #24]
 80139b4:	0151      	lsls	r1, r2, #5
 80139b6:	69fa      	ldr	r2, [r7, #28]
 80139b8:	440a      	add	r2, r1
 80139ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80139be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80139c2:	6013      	str	r3, [r2, #0]
 80139c4:	e169      	b.n	8013c9a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80139c6:	69bb      	ldr	r3, [r7, #24]
 80139c8:	015a      	lsls	r2, r3, #5
 80139ca:	69fb      	ldr	r3, [r7, #28]
 80139cc:	4413      	add	r3, r2
 80139ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	69ba      	ldr	r2, [r7, #24]
 80139d6:	0151      	lsls	r1, r2, #5
 80139d8:	69fa      	ldr	r2, [r7, #28]
 80139da:	440a      	add	r2, r1
 80139dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80139e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80139e4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	791b      	ldrb	r3, [r3, #4]
 80139ea:	2b01      	cmp	r3, #1
 80139ec:	d015      	beq.n	8013a1a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	691b      	ldr	r3, [r3, #16]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	f000 8151 	beq.w	8013c9a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80139fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	781b      	ldrb	r3, [r3, #0]
 8013a04:	f003 030f 	and.w	r3, r3, #15
 8013a08:	2101      	movs	r1, #1
 8013a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a0e:	69f9      	ldr	r1, [r7, #28]
 8013a10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013a14:	4313      	orrs	r3, r2
 8013a16:	634b      	str	r3, [r1, #52]	@ 0x34
 8013a18:	e13f      	b.n	8013c9a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013a20:	689b      	ldr	r3, [r3, #8]
 8013a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d116      	bne.n	8013a58 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013a2a:	69bb      	ldr	r3, [r7, #24]
 8013a2c:	015a      	lsls	r2, r3, #5
 8013a2e:	69fb      	ldr	r3, [r7, #28]
 8013a30:	4413      	add	r3, r2
 8013a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	69ba      	ldr	r2, [r7, #24]
 8013a3a:	0151      	lsls	r1, r2, #5
 8013a3c:	69fa      	ldr	r2, [r7, #28]
 8013a3e:	440a      	add	r2, r1
 8013a40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013a48:	6013      	str	r3, [r2, #0]
 8013a4a:	e015      	b.n	8013a78 <USB_EPStartXfer+0x310>
 8013a4c:	e007ffff 	.word	0xe007ffff
 8013a50:	fff80000 	.word	0xfff80000
 8013a54:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013a58:	69bb      	ldr	r3, [r7, #24]
 8013a5a:	015a      	lsls	r2, r3, #5
 8013a5c:	69fb      	ldr	r3, [r7, #28]
 8013a5e:	4413      	add	r3, r2
 8013a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	69ba      	ldr	r2, [r7, #24]
 8013a68:	0151      	lsls	r1, r2, #5
 8013a6a:	69fa      	ldr	r2, [r7, #28]
 8013a6c:	440a      	add	r2, r1
 8013a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013a76:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	68d9      	ldr	r1, [r3, #12]
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	781a      	ldrb	r2, [r3, #0]
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	691b      	ldr	r3, [r3, #16]
 8013a84:	b298      	uxth	r0, r3
 8013a86:	79fb      	ldrb	r3, [r7, #7]
 8013a88:	9300      	str	r3, [sp, #0]
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	68f8      	ldr	r0, [r7, #12]
 8013a8e:	f000 f9b9 	bl	8013e04 <USB_WritePacket>
 8013a92:	e102      	b.n	8013c9a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013a94:	69bb      	ldr	r3, [r7, #24]
 8013a96:	015a      	lsls	r2, r3, #5
 8013a98:	69fb      	ldr	r3, [r7, #28]
 8013a9a:	4413      	add	r3, r2
 8013a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013aa0:	691a      	ldr	r2, [r3, #16]
 8013aa2:	69bb      	ldr	r3, [r7, #24]
 8013aa4:	0159      	lsls	r1, r3, #5
 8013aa6:	69fb      	ldr	r3, [r7, #28]
 8013aa8:	440b      	add	r3, r1
 8013aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013aae:	4619      	mov	r1, r3
 8013ab0:	4b7c      	ldr	r3, [pc, #496]	@ (8013ca4 <USB_EPStartXfer+0x53c>)
 8013ab2:	4013      	ands	r3, r2
 8013ab4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013ab6:	69bb      	ldr	r3, [r7, #24]
 8013ab8:	015a      	lsls	r2, r3, #5
 8013aba:	69fb      	ldr	r3, [r7, #28]
 8013abc:	4413      	add	r3, r2
 8013abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ac2:	691a      	ldr	r2, [r3, #16]
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	0159      	lsls	r1, r3, #5
 8013ac8:	69fb      	ldr	r3, [r7, #28]
 8013aca:	440b      	add	r3, r1
 8013acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	4b75      	ldr	r3, [pc, #468]	@ (8013ca8 <USB_EPStartXfer+0x540>)
 8013ad4:	4013      	ands	r3, r2
 8013ad6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d12f      	bne.n	8013b3e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	691b      	ldr	r3, [r3, #16]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d003      	beq.n	8013aee <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	689a      	ldr	r2, [r3, #8]
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	689a      	ldr	r2, [r3, #8]
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	015a      	lsls	r2, r3, #5
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	4413      	add	r3, r2
 8013afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b02:	691a      	ldr	r2, [r3, #16]
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	6a1b      	ldr	r3, [r3, #32]
 8013b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b0c:	69b9      	ldr	r1, [r7, #24]
 8013b0e:	0148      	lsls	r0, r1, #5
 8013b10:	69f9      	ldr	r1, [r7, #28]
 8013b12:	4401      	add	r1, r0
 8013b14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013b18:	4313      	orrs	r3, r2
 8013b1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013b1c:	69bb      	ldr	r3, [r7, #24]
 8013b1e:	015a      	lsls	r2, r3, #5
 8013b20:	69fb      	ldr	r3, [r7, #28]
 8013b22:	4413      	add	r3, r2
 8013b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b28:	691b      	ldr	r3, [r3, #16]
 8013b2a:	69ba      	ldr	r2, [r7, #24]
 8013b2c:	0151      	lsls	r1, r2, #5
 8013b2e:	69fa      	ldr	r2, [r7, #28]
 8013b30:	440a      	add	r2, r1
 8013b32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013b3a:	6113      	str	r3, [r2, #16]
 8013b3c:	e05f      	b.n	8013bfe <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	691b      	ldr	r3, [r3, #16]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d123      	bne.n	8013b8e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013b46:	69bb      	ldr	r3, [r7, #24]
 8013b48:	015a      	lsls	r2, r3, #5
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b52:	691a      	ldr	r2, [r3, #16]
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	689b      	ldr	r3, [r3, #8]
 8013b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b5c:	69b9      	ldr	r1, [r7, #24]
 8013b5e:	0148      	lsls	r0, r1, #5
 8013b60:	69f9      	ldr	r1, [r7, #28]
 8013b62:	4401      	add	r1, r0
 8013b64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013b68:	4313      	orrs	r3, r2
 8013b6a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013b6c:	69bb      	ldr	r3, [r7, #24]
 8013b6e:	015a      	lsls	r2, r3, #5
 8013b70:	69fb      	ldr	r3, [r7, #28]
 8013b72:	4413      	add	r3, r2
 8013b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b78:	691b      	ldr	r3, [r3, #16]
 8013b7a:	69ba      	ldr	r2, [r7, #24]
 8013b7c:	0151      	lsls	r1, r2, #5
 8013b7e:	69fa      	ldr	r2, [r7, #28]
 8013b80:	440a      	add	r2, r1
 8013b82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013b8a:	6113      	str	r3, [r2, #16]
 8013b8c:	e037      	b.n	8013bfe <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	691a      	ldr	r2, [r3, #16]
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	689b      	ldr	r3, [r3, #8]
 8013b96:	4413      	add	r3, r2
 8013b98:	1e5a      	subs	r2, r3, #1
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	689b      	ldr	r3, [r3, #8]
 8013b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ba2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	689b      	ldr	r3, [r3, #8]
 8013ba8:	8afa      	ldrh	r2, [r7, #22]
 8013baa:	fb03 f202 	mul.w	r2, r3, r2
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013bb2:	69bb      	ldr	r3, [r7, #24]
 8013bb4:	015a      	lsls	r2, r3, #5
 8013bb6:	69fb      	ldr	r3, [r7, #28]
 8013bb8:	4413      	add	r3, r2
 8013bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013bbe:	691a      	ldr	r2, [r3, #16]
 8013bc0:	8afb      	ldrh	r3, [r7, #22]
 8013bc2:	04d9      	lsls	r1, r3, #19
 8013bc4:	4b39      	ldr	r3, [pc, #228]	@ (8013cac <USB_EPStartXfer+0x544>)
 8013bc6:	400b      	ands	r3, r1
 8013bc8:	69b9      	ldr	r1, [r7, #24]
 8013bca:	0148      	lsls	r0, r1, #5
 8013bcc:	69f9      	ldr	r1, [r7, #28]
 8013bce:	4401      	add	r1, r0
 8013bd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013bd4:	4313      	orrs	r3, r2
 8013bd6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013bd8:	69bb      	ldr	r3, [r7, #24]
 8013bda:	015a      	lsls	r2, r3, #5
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	4413      	add	r3, r2
 8013be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013be4:	691a      	ldr	r2, [r3, #16]
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	6a1b      	ldr	r3, [r3, #32]
 8013bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013bee:	69b9      	ldr	r1, [r7, #24]
 8013bf0:	0148      	lsls	r0, r1, #5
 8013bf2:	69f9      	ldr	r1, [r7, #28]
 8013bf4:	4401      	add	r1, r0
 8013bf6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013bfa:	4313      	orrs	r3, r2
 8013bfc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013bfe:	79fb      	ldrb	r3, [r7, #7]
 8013c00:	2b01      	cmp	r3, #1
 8013c02:	d10d      	bne.n	8013c20 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d009      	beq.n	8013c20 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	68d9      	ldr	r1, [r3, #12]
 8013c10:	69bb      	ldr	r3, [r7, #24]
 8013c12:	015a      	lsls	r2, r3, #5
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	4413      	add	r3, r2
 8013c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c1c:	460a      	mov	r2, r1
 8013c1e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	791b      	ldrb	r3, [r3, #4]
 8013c24:	2b01      	cmp	r3, #1
 8013c26:	d128      	bne.n	8013c7a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013c28:	69fb      	ldr	r3, [r7, #28]
 8013c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c2e:	689b      	ldr	r3, [r3, #8]
 8013c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d110      	bne.n	8013c5a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013c38:	69bb      	ldr	r3, [r7, #24]
 8013c3a:	015a      	lsls	r2, r3, #5
 8013c3c:	69fb      	ldr	r3, [r7, #28]
 8013c3e:	4413      	add	r3, r2
 8013c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	69ba      	ldr	r2, [r7, #24]
 8013c48:	0151      	lsls	r1, r2, #5
 8013c4a:	69fa      	ldr	r2, [r7, #28]
 8013c4c:	440a      	add	r2, r1
 8013c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013c56:	6013      	str	r3, [r2, #0]
 8013c58:	e00f      	b.n	8013c7a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	015a      	lsls	r2, r3, #5
 8013c5e:	69fb      	ldr	r3, [r7, #28]
 8013c60:	4413      	add	r3, r2
 8013c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	69ba      	ldr	r2, [r7, #24]
 8013c6a:	0151      	lsls	r1, r2, #5
 8013c6c:	69fa      	ldr	r2, [r7, #28]
 8013c6e:	440a      	add	r2, r1
 8013c70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013c78:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013c7a:	69bb      	ldr	r3, [r7, #24]
 8013c7c:	015a      	lsls	r2, r3, #5
 8013c7e:	69fb      	ldr	r3, [r7, #28]
 8013c80:	4413      	add	r3, r2
 8013c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	69ba      	ldr	r2, [r7, #24]
 8013c8a:	0151      	lsls	r1, r2, #5
 8013c8c:	69fa      	ldr	r2, [r7, #28]
 8013c8e:	440a      	add	r2, r1
 8013c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013c98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c9a:	2300      	movs	r3, #0
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3720      	adds	r7, #32
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	fff80000 	.word	0xfff80000
 8013ca8:	e007ffff 	.word	0xe007ffff
 8013cac:	1ff80000 	.word	0x1ff80000

08013cb0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013cb0:	b480      	push	{r7}
 8013cb2:	b087      	sub	sp, #28
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	785b      	ldrb	r3, [r3, #1]
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d14a      	bne.n	8013d64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	781b      	ldrb	r3, [r3, #0]
 8013cd2:	015a      	lsls	r2, r3, #5
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	4413      	add	r3, r2
 8013cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013ce6:	f040 8086 	bne.w	8013df6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	781b      	ldrb	r3, [r3, #0]
 8013cee:	015a      	lsls	r2, r3, #5
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	4413      	add	r3, r2
 8013cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	683a      	ldr	r2, [r7, #0]
 8013cfc:	7812      	ldrb	r2, [r2, #0]
 8013cfe:	0151      	lsls	r1, r2, #5
 8013d00:	693a      	ldr	r2, [r7, #16]
 8013d02:	440a      	add	r2, r1
 8013d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013d08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013d0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	015a      	lsls	r2, r3, #5
 8013d14:	693b      	ldr	r3, [r7, #16]
 8013d16:	4413      	add	r3, r2
 8013d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	683a      	ldr	r2, [r7, #0]
 8013d20:	7812      	ldrb	r2, [r2, #0]
 8013d22:	0151      	lsls	r1, r2, #5
 8013d24:	693a      	ldr	r2, [r7, #16]
 8013d26:	440a      	add	r2, r1
 8013d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013d2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013d30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	3301      	adds	r3, #1
 8013d36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013d3e:	4293      	cmp	r3, r2
 8013d40:	d902      	bls.n	8013d48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013d42:	2301      	movs	r3, #1
 8013d44:	75fb      	strb	r3, [r7, #23]
          break;
 8013d46:	e056      	b.n	8013df6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	015a      	lsls	r2, r3, #5
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	4413      	add	r3, r2
 8013d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013d60:	d0e7      	beq.n	8013d32 <USB_EPStopXfer+0x82>
 8013d62:	e048      	b.n	8013df6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	015a      	lsls	r2, r3, #5
 8013d6a:	693b      	ldr	r3, [r7, #16]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013d78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013d7c:	d13b      	bne.n	8013df6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	015a      	lsls	r2, r3, #5
 8013d84:	693b      	ldr	r3, [r7, #16]
 8013d86:	4413      	add	r3, r2
 8013d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	683a      	ldr	r2, [r7, #0]
 8013d90:	7812      	ldrb	r2, [r2, #0]
 8013d92:	0151      	lsls	r1, r2, #5
 8013d94:	693a      	ldr	r2, [r7, #16]
 8013d96:	440a      	add	r2, r1
 8013d98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013d9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013da0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	781b      	ldrb	r3, [r3, #0]
 8013da6:	015a      	lsls	r2, r3, #5
 8013da8:	693b      	ldr	r3, [r7, #16]
 8013daa:	4413      	add	r3, r2
 8013dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	683a      	ldr	r2, [r7, #0]
 8013db4:	7812      	ldrb	r2, [r2, #0]
 8013db6:	0151      	lsls	r1, r2, #5
 8013db8:	693a      	ldr	r2, [r7, #16]
 8013dba:	440a      	add	r2, r1
 8013dbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013dc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013dc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	3301      	adds	r3, #1
 8013dca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013dd2:	4293      	cmp	r3, r2
 8013dd4:	d902      	bls.n	8013ddc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	75fb      	strb	r3, [r7, #23]
          break;
 8013dda:	e00c      	b.n	8013df6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	015a      	lsls	r2, r3, #5
 8013de2:	693b      	ldr	r3, [r7, #16]
 8013de4:	4413      	add	r3, r2
 8013de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013df4:	d0e7      	beq.n	8013dc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	371c      	adds	r7, #28
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e02:	4770      	bx	lr

08013e04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013e04:	b480      	push	{r7}
 8013e06:	b089      	sub	sp, #36	@ 0x24
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	60f8      	str	r0, [r7, #12]
 8013e0c:	60b9      	str	r1, [r7, #8]
 8013e0e:	4611      	mov	r1, r2
 8013e10:	461a      	mov	r2, r3
 8013e12:	460b      	mov	r3, r1
 8013e14:	71fb      	strb	r3, [r7, #7]
 8013e16:	4613      	mov	r3, r2
 8013e18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d123      	bne.n	8013e72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013e2a:	88bb      	ldrh	r3, [r7, #4]
 8013e2c:	3303      	adds	r3, #3
 8013e2e:	089b      	lsrs	r3, r3, #2
 8013e30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013e32:	2300      	movs	r3, #0
 8013e34:	61bb      	str	r3, [r7, #24]
 8013e36:	e018      	b.n	8013e6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013e38:	79fb      	ldrb	r3, [r7, #7]
 8013e3a:	031a      	lsls	r2, r3, #12
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	4413      	add	r3, r2
 8013e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013e44:	461a      	mov	r2, r3
 8013e46:	69fb      	ldr	r3, [r7, #28]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013e4c:	69fb      	ldr	r3, [r7, #28]
 8013e4e:	3301      	adds	r3, #1
 8013e50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	3301      	adds	r3, #1
 8013e56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013e5e:	69fb      	ldr	r3, [r7, #28]
 8013e60:	3301      	adds	r3, #1
 8013e62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013e64:	69bb      	ldr	r3, [r7, #24]
 8013e66:	3301      	adds	r3, #1
 8013e68:	61bb      	str	r3, [r7, #24]
 8013e6a:	69ba      	ldr	r2, [r7, #24]
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d3e2      	bcc.n	8013e38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3724      	adds	r7, #36	@ 0x24
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013e80:	b480      	push	{r7}
 8013e82:	b08b      	sub	sp, #44	@ 0x2c
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	60f8      	str	r0, [r7, #12]
 8013e88:	60b9      	str	r1, [r7, #8]
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013e96:	88fb      	ldrh	r3, [r7, #6]
 8013e98:	089b      	lsrs	r3, r3, #2
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013e9e:	88fb      	ldrh	r3, [r7, #6]
 8013ea0:	f003 0303 	and.w	r3, r3, #3
 8013ea4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	623b      	str	r3, [r7, #32]
 8013eaa:	e014      	b.n	8013ed6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013eac:	69bb      	ldr	r3, [r7, #24]
 8013eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013eb2:	681a      	ldr	r2, [r3, #0]
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eba:	3301      	adds	r3, #1
 8013ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec6:	3301      	adds	r3, #1
 8013ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ecc:	3301      	adds	r3, #1
 8013ece:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8013ed0:	6a3b      	ldr	r3, [r7, #32]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	623b      	str	r3, [r7, #32]
 8013ed6:	6a3a      	ldr	r2, [r7, #32]
 8013ed8:	697b      	ldr	r3, [r7, #20]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d3e6      	bcc.n	8013eac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013ede:	8bfb      	ldrh	r3, [r7, #30]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d01e      	beq.n	8013f22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013ee8:	69bb      	ldr	r3, [r7, #24]
 8013eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013eee:	461a      	mov	r2, r3
 8013ef0:	f107 0310 	add.w	r3, r7, #16
 8013ef4:	6812      	ldr	r2, [r2, #0]
 8013ef6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013ef8:	693a      	ldr	r2, [r7, #16]
 8013efa:	6a3b      	ldr	r3, [r7, #32]
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	00db      	lsls	r3, r3, #3
 8013f00:	fa22 f303 	lsr.w	r3, r2, r3
 8013f04:	b2da      	uxtb	r2, r3
 8013f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f08:	701a      	strb	r2, [r3, #0]
      i++;
 8013f0a:	6a3b      	ldr	r3, [r7, #32]
 8013f0c:	3301      	adds	r3, #1
 8013f0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8013f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f12:	3301      	adds	r3, #1
 8013f14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8013f16:	8bfb      	ldrh	r3, [r7, #30]
 8013f18:	3b01      	subs	r3, #1
 8013f1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013f1c:	8bfb      	ldrh	r3, [r7, #30]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d1ea      	bne.n	8013ef8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	372c      	adds	r7, #44	@ 0x2c
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr

08013f30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013f30:	b480      	push	{r7}
 8013f32:	b085      	sub	sp, #20
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	781b      	ldrb	r3, [r3, #0]
 8013f42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	785b      	ldrb	r3, [r3, #1]
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d12c      	bne.n	8013fa6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	015a      	lsls	r2, r3, #5
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	4413      	add	r3, r2
 8013f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	db12      	blt.n	8013f84 <USB_EPSetStall+0x54>
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d00f      	beq.n	8013f84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	015a      	lsls	r2, r3, #5
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	4413      	add	r3, r2
 8013f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	68ba      	ldr	r2, [r7, #8]
 8013f74:	0151      	lsls	r1, r2, #5
 8013f76:	68fa      	ldr	r2, [r7, #12]
 8013f78:	440a      	add	r2, r1
 8013f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013f7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013f82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	015a      	lsls	r2, r3, #5
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	4413      	add	r3, r2
 8013f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	68ba      	ldr	r2, [r7, #8]
 8013f94:	0151      	lsls	r1, r2, #5
 8013f96:	68fa      	ldr	r2, [r7, #12]
 8013f98:	440a      	add	r2, r1
 8013f9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013f9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013fa2:	6013      	str	r3, [r2, #0]
 8013fa4:	e02b      	b.n	8013ffe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	015a      	lsls	r2, r3, #5
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	4413      	add	r3, r2
 8013fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	db12      	blt.n	8013fde <USB_EPSetStall+0xae>
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d00f      	beq.n	8013fde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	015a      	lsls	r2, r3, #5
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	68ba      	ldr	r2, [r7, #8]
 8013fce:	0151      	lsls	r1, r2, #5
 8013fd0:	68fa      	ldr	r2, [r7, #12]
 8013fd2:	440a      	add	r2, r1
 8013fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013fd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013fdc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	015a      	lsls	r2, r3, #5
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	4413      	add	r3, r2
 8013fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	68ba      	ldr	r2, [r7, #8]
 8013fee:	0151      	lsls	r1, r2, #5
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	440a      	add	r2, r1
 8013ff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ff8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013ffc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013ffe:	2300      	movs	r3, #0
}
 8014000:	4618      	mov	r0, r3
 8014002:	3714      	adds	r7, #20
 8014004:	46bd      	mov	sp, r7
 8014006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400a:	4770      	bx	lr

0801400c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801400c:	b480      	push	{r7}
 801400e:	b085      	sub	sp, #20
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	781b      	ldrb	r3, [r3, #0]
 801401e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	785b      	ldrb	r3, [r3, #1]
 8014024:	2b01      	cmp	r3, #1
 8014026:	d128      	bne.n	801407a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	015a      	lsls	r2, r3, #5
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	4413      	add	r3, r2
 8014030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	68ba      	ldr	r2, [r7, #8]
 8014038:	0151      	lsls	r1, r2, #5
 801403a:	68fa      	ldr	r2, [r7, #12]
 801403c:	440a      	add	r2, r1
 801403e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014042:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014046:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	791b      	ldrb	r3, [r3, #4]
 801404c:	2b03      	cmp	r3, #3
 801404e:	d003      	beq.n	8014058 <USB_EPClearStall+0x4c>
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	791b      	ldrb	r3, [r3, #4]
 8014054:	2b02      	cmp	r3, #2
 8014056:	d138      	bne.n	80140ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	015a      	lsls	r2, r3, #5
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	4413      	add	r3, r2
 8014060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	68ba      	ldr	r2, [r7, #8]
 8014068:	0151      	lsls	r1, r2, #5
 801406a:	68fa      	ldr	r2, [r7, #12]
 801406c:	440a      	add	r2, r1
 801406e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014076:	6013      	str	r3, [r2, #0]
 8014078:	e027      	b.n	80140ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	015a      	lsls	r2, r3, #5
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	4413      	add	r3, r2
 8014082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	68ba      	ldr	r2, [r7, #8]
 801408a:	0151      	lsls	r1, r2, #5
 801408c:	68fa      	ldr	r2, [r7, #12]
 801408e:	440a      	add	r2, r1
 8014090:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014094:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014098:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	791b      	ldrb	r3, [r3, #4]
 801409e:	2b03      	cmp	r3, #3
 80140a0:	d003      	beq.n	80140aa <USB_EPClearStall+0x9e>
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	791b      	ldrb	r3, [r3, #4]
 80140a6:	2b02      	cmp	r3, #2
 80140a8:	d10f      	bne.n	80140ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	015a      	lsls	r2, r3, #5
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	4413      	add	r3, r2
 80140b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	68ba      	ldr	r2, [r7, #8]
 80140ba:	0151      	lsls	r1, r2, #5
 80140bc:	68fa      	ldr	r2, [r7, #12]
 80140be:	440a      	add	r2, r1
 80140c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80140c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80140c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80140ca:	2300      	movs	r3, #0
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	3714      	adds	r7, #20
 80140d0:	46bd      	mov	sp, r7
 80140d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d6:	4770      	bx	lr

080140d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80140d8:	b480      	push	{r7}
 80140da:	b085      	sub	sp, #20
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
 80140e0:	460b      	mov	r3, r1
 80140e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	68fa      	ldr	r2, [r7, #12]
 80140f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80140f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80140fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014102:	681a      	ldr	r2, [r3, #0]
 8014104:	78fb      	ldrb	r3, [r7, #3]
 8014106:	011b      	lsls	r3, r3, #4
 8014108:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 801410c:	68f9      	ldr	r1, [r7, #12]
 801410e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014112:	4313      	orrs	r3, r2
 8014114:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014116:	2300      	movs	r3, #0
}
 8014118:	4618      	mov	r0, r3
 801411a:	3714      	adds	r7, #20
 801411c:	46bd      	mov	sp, r7
 801411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014122:	4770      	bx	lr

08014124 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8014124:	b480      	push	{r7}
 8014126:	b085      	sub	sp, #20
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	68fa      	ldr	r2, [r7, #12]
 801413a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801413e:	f023 0303 	bic.w	r3, r3, #3
 8014142:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801414a:	685b      	ldr	r3, [r3, #4]
 801414c:	68fa      	ldr	r2, [r7, #12]
 801414e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014152:	f023 0302 	bic.w	r3, r3, #2
 8014156:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014158:	2300      	movs	r3, #0
}
 801415a:	4618      	mov	r0, r3
 801415c:	3714      	adds	r7, #20
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr

08014166 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8014166:	b480      	push	{r7}
 8014168:	b085      	sub	sp, #20
 801416a:	af00      	add	r7, sp, #0
 801416c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	68fa      	ldr	r2, [r7, #12]
 801417c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014180:	f023 0303 	bic.w	r3, r3, #3
 8014184:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	68fa      	ldr	r2, [r7, #12]
 8014190:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014194:	f043 0302 	orr.w	r3, r3, #2
 8014198:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801419a:	2300      	movs	r3, #0
}
 801419c:	4618      	mov	r0, r3
 801419e:	3714      	adds	r7, #20
 80141a0:	46bd      	mov	sp, r7
 80141a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a6:	4770      	bx	lr

080141a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80141a8:	b480      	push	{r7}
 80141aa:	b085      	sub	sp, #20
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	695b      	ldr	r3, [r3, #20]
 80141b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	699b      	ldr	r3, [r3, #24]
 80141ba:	68fa      	ldr	r2, [r7, #12]
 80141bc:	4013      	ands	r3, r2
 80141be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80141c0:	68fb      	ldr	r3, [r7, #12]
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	3714      	adds	r7, #20
 80141c6:	46bd      	mov	sp, r7
 80141c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141cc:	4770      	bx	lr

080141ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80141ce:	b480      	push	{r7}
 80141d0:	b085      	sub	sp, #20
 80141d2:	af00      	add	r7, sp, #0
 80141d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141e0:	699b      	ldr	r3, [r3, #24]
 80141e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141ea:	69db      	ldr	r3, [r3, #28]
 80141ec:	68ba      	ldr	r2, [r7, #8]
 80141ee:	4013      	ands	r3, r2
 80141f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	0c1b      	lsrs	r3, r3, #16
}
 80141f6:	4618      	mov	r0, r3
 80141f8:	3714      	adds	r7, #20
 80141fa:	46bd      	mov	sp, r7
 80141fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014200:	4770      	bx	lr

08014202 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8014202:	b480      	push	{r7}
 8014204:	b085      	sub	sp, #20
 8014206:	af00      	add	r7, sp, #0
 8014208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014214:	699b      	ldr	r3, [r3, #24]
 8014216:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801421e:	69db      	ldr	r3, [r3, #28]
 8014220:	68ba      	ldr	r2, [r7, #8]
 8014222:	4013      	ands	r3, r2
 8014224:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	b29b      	uxth	r3, r3
}
 801422a:	4618      	mov	r0, r3
 801422c:	3714      	adds	r7, #20
 801422e:	46bd      	mov	sp, r7
 8014230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014234:	4770      	bx	lr

08014236 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014236:	b480      	push	{r7}
 8014238:	b085      	sub	sp, #20
 801423a:	af00      	add	r7, sp, #0
 801423c:	6078      	str	r0, [r7, #4]
 801423e:	460b      	mov	r3, r1
 8014240:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014246:	78fb      	ldrb	r3, [r7, #3]
 8014248:	015a      	lsls	r2, r3, #5
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	4413      	add	r3, r2
 801424e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014252:	689b      	ldr	r3, [r3, #8]
 8014254:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801425c:	695b      	ldr	r3, [r3, #20]
 801425e:	68ba      	ldr	r2, [r7, #8]
 8014260:	4013      	ands	r3, r2
 8014262:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014264:	68bb      	ldr	r3, [r7, #8]
}
 8014266:	4618      	mov	r0, r3
 8014268:	3714      	adds	r7, #20
 801426a:	46bd      	mov	sp, r7
 801426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014270:	4770      	bx	lr

08014272 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014272:	b480      	push	{r7}
 8014274:	b087      	sub	sp, #28
 8014276:	af00      	add	r7, sp, #0
 8014278:	6078      	str	r0, [r7, #4]
 801427a:	460b      	mov	r3, r1
 801427c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014288:	691b      	ldr	r3, [r3, #16]
 801428a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801428c:	697b      	ldr	r3, [r7, #20]
 801428e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014294:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014296:	78fb      	ldrb	r3, [r7, #3]
 8014298:	f003 030f 	and.w	r3, r3, #15
 801429c:	68fa      	ldr	r2, [r7, #12]
 801429e:	fa22 f303 	lsr.w	r3, r2, r3
 80142a2:	01db      	lsls	r3, r3, #7
 80142a4:	b2db      	uxtb	r3, r3
 80142a6:	693a      	ldr	r2, [r7, #16]
 80142a8:	4313      	orrs	r3, r2
 80142aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80142ac:	78fb      	ldrb	r3, [r7, #3]
 80142ae:	015a      	lsls	r2, r3, #5
 80142b0:	697b      	ldr	r3, [r7, #20]
 80142b2:	4413      	add	r3, r2
 80142b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142b8:	689b      	ldr	r3, [r3, #8]
 80142ba:	693a      	ldr	r2, [r7, #16]
 80142bc:	4013      	ands	r3, r2
 80142be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80142c0:	68bb      	ldr	r3, [r7, #8]
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	371c      	adds	r7, #28
 80142c6:	46bd      	mov	sp, r7
 80142c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142cc:	4770      	bx	lr

080142ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80142ce:	b480      	push	{r7}
 80142d0:	b083      	sub	sp, #12
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	695b      	ldr	r3, [r3, #20]
 80142da:	f003 0301 	and.w	r3, r3, #1
}
 80142de:	4618      	mov	r0, r3
 80142e0:	370c      	adds	r7, #12
 80142e2:	46bd      	mov	sp, r7
 80142e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e8:	4770      	bx	lr
	...

080142ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80142ec:	b480      	push	{r7}
 80142ee:	b085      	sub	sp, #20
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142fe:	681a      	ldr	r2, [r3, #0]
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014306:	4619      	mov	r1, r3
 8014308:	4b09      	ldr	r3, [pc, #36]	@ (8014330 <USB_ActivateSetup+0x44>)
 801430a:	4013      	ands	r3, r2
 801430c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014314:	685b      	ldr	r3, [r3, #4]
 8014316:	68fa      	ldr	r2, [r7, #12]
 8014318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801431c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014320:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014322:	2300      	movs	r3, #0
}
 8014324:	4618      	mov	r0, r3
 8014326:	3714      	adds	r7, #20
 8014328:	46bd      	mov	sp, r7
 801432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432e:	4770      	bx	lr
 8014330:	fffff800 	.word	0xfffff800

08014334 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8014334:	b480      	push	{r7}
 8014336:	b087      	sub	sp, #28
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	460b      	mov	r3, r1
 801433e:	607a      	str	r2, [r7, #4]
 8014340:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	333c      	adds	r3, #60	@ 0x3c
 801434a:	3304      	adds	r3, #4
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	4a26      	ldr	r2, [pc, #152]	@ (80143ec <USB_EP0_OutStart+0xb8>)
 8014354:	4293      	cmp	r3, r2
 8014356:	d90a      	bls.n	801436e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014364:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014368:	d101      	bne.n	801436e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801436a:	2300      	movs	r3, #0
 801436c:	e037      	b.n	80143de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801436e:	697b      	ldr	r3, [r7, #20]
 8014370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014374:	461a      	mov	r2, r3
 8014376:	2300      	movs	r3, #0
 8014378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014380:	691b      	ldr	r3, [r3, #16]
 8014382:	697a      	ldr	r2, [r7, #20]
 8014384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014388:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801438c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014394:	691b      	ldr	r3, [r3, #16]
 8014396:	697a      	ldr	r2, [r7, #20]
 8014398:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801439c:	f043 0318 	orr.w	r3, r3, #24
 80143a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143a8:	691b      	ldr	r3, [r3, #16]
 80143aa:	697a      	ldr	r2, [r7, #20]
 80143ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80143b0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80143b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80143b6:	7afb      	ldrb	r3, [r7, #11]
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d10f      	bne.n	80143dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143c2:	461a      	mov	r2, r3
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	697a      	ldr	r2, [r7, #20]
 80143d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80143d6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80143da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80143dc:	2300      	movs	r3, #0
}
 80143de:	4618      	mov	r0, r3
 80143e0:	371c      	adds	r7, #28
 80143e2:	46bd      	mov	sp, r7
 80143e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e8:	4770      	bx	lr
 80143ea:	bf00      	nop
 80143ec:	4f54300a 	.word	0x4f54300a

080143f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80143f0:	b480      	push	{r7}
 80143f2:	b085      	sub	sp, #20
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80143f8:	2300      	movs	r3, #0
 80143fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	3301      	adds	r3, #1
 8014400:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014408:	d901      	bls.n	801440e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801440a:	2303      	movs	r3, #3
 801440c:	e01b      	b.n	8014446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	691b      	ldr	r3, [r3, #16]
 8014412:	2b00      	cmp	r3, #0
 8014414:	daf2      	bge.n	80143fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014416:	2300      	movs	r3, #0
 8014418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	691b      	ldr	r3, [r3, #16]
 801441e:	f043 0201 	orr.w	r2, r3, #1
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	3301      	adds	r3, #1
 801442a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014432:	d901      	bls.n	8014438 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014434:	2303      	movs	r3, #3
 8014436:	e006      	b.n	8014446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	691b      	ldr	r3, [r3, #16]
 801443c:	f003 0301 	and.w	r3, r3, #1
 8014440:	2b01      	cmp	r3, #1
 8014442:	d0f0      	beq.n	8014426 <USB_CoreReset+0x36>

  return HAL_OK;
 8014444:	2300      	movs	r3, #0
}
 8014446:	4618      	mov	r0, r3
 8014448:	3714      	adds	r7, #20
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr
	...

08014454 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b084      	sub	sp, #16
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	460b      	mov	r3, r1
 801445e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014460:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8014464:	f002 fcfe 	bl	8016e64 <USBD_static_malloc>
 8014468:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d109      	bne.n	8014484 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	32b0      	adds	r2, #176	@ 0xb0
 801447a:	2100      	movs	r1, #0
 801447c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014480:	2302      	movs	r3, #2
 8014482:	e0d4      	b.n	801462e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014484:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8014488:	2100      	movs	r1, #0
 801448a:	68f8      	ldr	r0, [r7, #12]
 801448c:	f002 fd50 	bl	8016f30 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	32b0      	adds	r2, #176	@ 0xb0
 801449a:	68f9      	ldr	r1, [r7, #12]
 801449c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	32b0      	adds	r2, #176	@ 0xb0
 80144aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	7c1b      	ldrb	r3, [r3, #16]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d138      	bne.n	801452e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80144bc:	4b5e      	ldr	r3, [pc, #376]	@ (8014638 <USBD_CDC_Init+0x1e4>)
 80144be:	7819      	ldrb	r1, [r3, #0]
 80144c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80144c4:	2202      	movs	r2, #2
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f002 fba9 	bl	8016c1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80144cc:	4b5a      	ldr	r3, [pc, #360]	@ (8014638 <USBD_CDC_Init+0x1e4>)
 80144ce:	781b      	ldrb	r3, [r3, #0]
 80144d0:	f003 020f 	and.w	r2, r3, #15
 80144d4:	6879      	ldr	r1, [r7, #4]
 80144d6:	4613      	mov	r3, r2
 80144d8:	009b      	lsls	r3, r3, #2
 80144da:	4413      	add	r3, r2
 80144dc:	009b      	lsls	r3, r3, #2
 80144de:	440b      	add	r3, r1
 80144e0:	3324      	adds	r3, #36	@ 0x24
 80144e2:	2201      	movs	r2, #1
 80144e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80144e6:	4b55      	ldr	r3, [pc, #340]	@ (801463c <USBD_CDC_Init+0x1e8>)
 80144e8:	7819      	ldrb	r1, [r3, #0]
 80144ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80144ee:	2202      	movs	r2, #2
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f002 fb94 	bl	8016c1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80144f6:	4b51      	ldr	r3, [pc, #324]	@ (801463c <USBD_CDC_Init+0x1e8>)
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	f003 020f 	and.w	r2, r3, #15
 80144fe:	6879      	ldr	r1, [r7, #4]
 8014500:	4613      	mov	r3, r2
 8014502:	009b      	lsls	r3, r3, #2
 8014504:	4413      	add	r3, r2
 8014506:	009b      	lsls	r3, r3, #2
 8014508:	440b      	add	r3, r1
 801450a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801450e:	2201      	movs	r2, #1
 8014510:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014512:	4b4b      	ldr	r3, [pc, #300]	@ (8014640 <USBD_CDC_Init+0x1ec>)
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	f003 020f 	and.w	r2, r3, #15
 801451a:	6879      	ldr	r1, [r7, #4]
 801451c:	4613      	mov	r3, r2
 801451e:	009b      	lsls	r3, r3, #2
 8014520:	4413      	add	r3, r2
 8014522:	009b      	lsls	r3, r3, #2
 8014524:	440b      	add	r3, r1
 8014526:	3326      	adds	r3, #38	@ 0x26
 8014528:	2210      	movs	r2, #16
 801452a:	801a      	strh	r2, [r3, #0]
 801452c:	e035      	b.n	801459a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801452e:	4b42      	ldr	r3, [pc, #264]	@ (8014638 <USBD_CDC_Init+0x1e4>)
 8014530:	7819      	ldrb	r1, [r3, #0]
 8014532:	2340      	movs	r3, #64	@ 0x40
 8014534:	2202      	movs	r2, #2
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f002 fb71 	bl	8016c1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801453c:	4b3e      	ldr	r3, [pc, #248]	@ (8014638 <USBD_CDC_Init+0x1e4>)
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	f003 020f 	and.w	r2, r3, #15
 8014544:	6879      	ldr	r1, [r7, #4]
 8014546:	4613      	mov	r3, r2
 8014548:	009b      	lsls	r3, r3, #2
 801454a:	4413      	add	r3, r2
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	440b      	add	r3, r1
 8014550:	3324      	adds	r3, #36	@ 0x24
 8014552:	2201      	movs	r2, #1
 8014554:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014556:	4b39      	ldr	r3, [pc, #228]	@ (801463c <USBD_CDC_Init+0x1e8>)
 8014558:	7819      	ldrb	r1, [r3, #0]
 801455a:	2340      	movs	r3, #64	@ 0x40
 801455c:	2202      	movs	r2, #2
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f002 fb5d 	bl	8016c1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014564:	4b35      	ldr	r3, [pc, #212]	@ (801463c <USBD_CDC_Init+0x1e8>)
 8014566:	781b      	ldrb	r3, [r3, #0]
 8014568:	f003 020f 	and.w	r2, r3, #15
 801456c:	6879      	ldr	r1, [r7, #4]
 801456e:	4613      	mov	r3, r2
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	4413      	add	r3, r2
 8014574:	009b      	lsls	r3, r3, #2
 8014576:	440b      	add	r3, r1
 8014578:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801457c:	2201      	movs	r2, #1
 801457e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014580:	4b2f      	ldr	r3, [pc, #188]	@ (8014640 <USBD_CDC_Init+0x1ec>)
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	f003 020f 	and.w	r2, r3, #15
 8014588:	6879      	ldr	r1, [r7, #4]
 801458a:	4613      	mov	r3, r2
 801458c:	009b      	lsls	r3, r3, #2
 801458e:	4413      	add	r3, r2
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	440b      	add	r3, r1
 8014594:	3326      	adds	r3, #38	@ 0x26
 8014596:	2210      	movs	r2, #16
 8014598:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801459a:	4b29      	ldr	r3, [pc, #164]	@ (8014640 <USBD_CDC_Init+0x1ec>)
 801459c:	7819      	ldrb	r1, [r3, #0]
 801459e:	2308      	movs	r3, #8
 80145a0:	2203      	movs	r2, #3
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	f002 fb3b 	bl	8016c1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80145a8:	4b25      	ldr	r3, [pc, #148]	@ (8014640 <USBD_CDC_Init+0x1ec>)
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	f003 020f 	and.w	r2, r3, #15
 80145b0:	6879      	ldr	r1, [r7, #4]
 80145b2:	4613      	mov	r3, r2
 80145b4:	009b      	lsls	r3, r3, #2
 80145b6:	4413      	add	r3, r2
 80145b8:	009b      	lsls	r3, r3, #2
 80145ba:	440b      	add	r3, r1
 80145bc:	3324      	adds	r3, #36	@ 0x24
 80145be:	2201      	movs	r2, #1
 80145c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	2200      	movs	r2, #0
 80145c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80145d0:	687a      	ldr	r2, [r7, #4]
 80145d2:	33b0      	adds	r3, #176	@ 0xb0
 80145d4:	009b      	lsls	r3, r3, #2
 80145d6:	4413      	add	r3, r2
 80145d8:	685b      	ldr	r3, [r3, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2200      	movs	r2, #0
 80145e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	2200      	movs	r2, #0
 80145ea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d101      	bne.n	80145fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80145f8:	2302      	movs	r3, #2
 80145fa:	e018      	b.n	801462e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	7c1b      	ldrb	r3, [r3, #16]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d10a      	bne.n	801461a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014604:	4b0d      	ldr	r3, [pc, #52]	@ (801463c <USBD_CDC_Init+0x1e8>)
 8014606:	7819      	ldrb	r1, [r3, #0]
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801460e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f002 fbf2 	bl	8016dfc <USBD_LL_PrepareReceive>
 8014618:	e008      	b.n	801462c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801461a:	4b08      	ldr	r3, [pc, #32]	@ (801463c <USBD_CDC_Init+0x1e8>)
 801461c:	7819      	ldrb	r1, [r3, #0]
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014624:	2340      	movs	r3, #64	@ 0x40
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f002 fbe8 	bl	8016dfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801462c:	2300      	movs	r3, #0
}
 801462e:	4618      	mov	r0, r3
 8014630:	3710      	adds	r7, #16
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	2400009b 	.word	0x2400009b
 801463c:	2400009c 	.word	0x2400009c
 8014640:	2400009d 	.word	0x2400009d

08014644 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b082      	sub	sp, #8
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	460b      	mov	r3, r1
 801464e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014650:	4b3a      	ldr	r3, [pc, #232]	@ (801473c <USBD_CDC_DeInit+0xf8>)
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	4619      	mov	r1, r3
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f002 fb07 	bl	8016c6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801465c:	4b37      	ldr	r3, [pc, #220]	@ (801473c <USBD_CDC_DeInit+0xf8>)
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	f003 020f 	and.w	r2, r3, #15
 8014664:	6879      	ldr	r1, [r7, #4]
 8014666:	4613      	mov	r3, r2
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	4413      	add	r3, r2
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	440b      	add	r3, r1
 8014670:	3324      	adds	r3, #36	@ 0x24
 8014672:	2200      	movs	r2, #0
 8014674:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014676:	4b32      	ldr	r3, [pc, #200]	@ (8014740 <USBD_CDC_DeInit+0xfc>)
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	4619      	mov	r1, r3
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f002 faf4 	bl	8016c6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014682:	4b2f      	ldr	r3, [pc, #188]	@ (8014740 <USBD_CDC_DeInit+0xfc>)
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	f003 020f 	and.w	r2, r3, #15
 801468a:	6879      	ldr	r1, [r7, #4]
 801468c:	4613      	mov	r3, r2
 801468e:	009b      	lsls	r3, r3, #2
 8014690:	4413      	add	r3, r2
 8014692:	009b      	lsls	r3, r3, #2
 8014694:	440b      	add	r3, r1
 8014696:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801469a:	2200      	movs	r2, #0
 801469c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801469e:	4b29      	ldr	r3, [pc, #164]	@ (8014744 <USBD_CDC_DeInit+0x100>)
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	4619      	mov	r1, r3
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f002 fae0 	bl	8016c6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80146aa:	4b26      	ldr	r3, [pc, #152]	@ (8014744 <USBD_CDC_DeInit+0x100>)
 80146ac:	781b      	ldrb	r3, [r3, #0]
 80146ae:	f003 020f 	and.w	r2, r3, #15
 80146b2:	6879      	ldr	r1, [r7, #4]
 80146b4:	4613      	mov	r3, r2
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	4413      	add	r3, r2
 80146ba:	009b      	lsls	r3, r3, #2
 80146bc:	440b      	add	r3, r1
 80146be:	3324      	adds	r3, #36	@ 0x24
 80146c0:	2200      	movs	r2, #0
 80146c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80146c4:	4b1f      	ldr	r3, [pc, #124]	@ (8014744 <USBD_CDC_DeInit+0x100>)
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	f003 020f 	and.w	r2, r3, #15
 80146cc:	6879      	ldr	r1, [r7, #4]
 80146ce:	4613      	mov	r3, r2
 80146d0:	009b      	lsls	r3, r3, #2
 80146d2:	4413      	add	r3, r2
 80146d4:	009b      	lsls	r3, r3, #2
 80146d6:	440b      	add	r3, r1
 80146d8:	3326      	adds	r3, #38	@ 0x26
 80146da:	2200      	movs	r2, #0
 80146dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	32b0      	adds	r2, #176	@ 0xb0
 80146e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d01f      	beq.n	8014730 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80146f6:	687a      	ldr	r2, [r7, #4]
 80146f8:	33b0      	adds	r3, #176	@ 0xb0
 80146fa:	009b      	lsls	r3, r3, #2
 80146fc:	4413      	add	r3, r2
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	685b      	ldr	r3, [r3, #4]
 8014702:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	32b0      	adds	r2, #176	@ 0xb0
 801470e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014712:	4618      	mov	r0, r3
 8014714:	f002 fbb4 	bl	8016e80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	32b0      	adds	r2, #176	@ 0xb0
 8014722:	2100      	movs	r1, #0
 8014724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2200      	movs	r2, #0
 801472c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014730:	2300      	movs	r3, #0
}
 8014732:	4618      	mov	r0, r3
 8014734:	3708      	adds	r7, #8
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}
 801473a:	bf00      	nop
 801473c:	2400009b 	.word	0x2400009b
 8014740:	2400009c 	.word	0x2400009c
 8014744:	2400009d 	.word	0x2400009d

08014748 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b086      	sub	sp, #24
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
 8014750:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	32b0      	adds	r2, #176	@ 0xb0
 801475c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014760:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014762:	2300      	movs	r3, #0
 8014764:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014766:	2300      	movs	r3, #0
 8014768:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801476a:	2300      	movs	r3, #0
 801476c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d101      	bne.n	8014778 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014774:	2303      	movs	r3, #3
 8014776:	e0bf      	b.n	80148f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014780:	2b00      	cmp	r3, #0
 8014782:	d050      	beq.n	8014826 <USBD_CDC_Setup+0xde>
 8014784:	2b20      	cmp	r3, #32
 8014786:	f040 80af 	bne.w	80148e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	88db      	ldrh	r3, [r3, #6]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d03a      	beq.n	8014808 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	b25b      	sxtb	r3, r3
 8014798:	2b00      	cmp	r3, #0
 801479a:	da1b      	bge.n	80147d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80147a2:	687a      	ldr	r2, [r7, #4]
 80147a4:	33b0      	adds	r3, #176	@ 0xb0
 80147a6:	009b      	lsls	r3, r3, #2
 80147a8:	4413      	add	r3, r2
 80147aa:	685b      	ldr	r3, [r3, #4]
 80147ac:	689b      	ldr	r3, [r3, #8]
 80147ae:	683a      	ldr	r2, [r7, #0]
 80147b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80147b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80147b4:	683a      	ldr	r2, [r7, #0]
 80147b6:	88d2      	ldrh	r2, [r2, #6]
 80147b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	88db      	ldrh	r3, [r3, #6]
 80147be:	2b07      	cmp	r3, #7
 80147c0:	bf28      	it	cs
 80147c2:	2307      	movcs	r3, #7
 80147c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	89fa      	ldrh	r2, [r7, #14]
 80147ca:	4619      	mov	r1, r3
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f001 fdbd 	bl	801634c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80147d2:	e090      	b.n	80148f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	785a      	ldrb	r2, [r3, #1]
 80147d8:	693b      	ldr	r3, [r7, #16]
 80147da:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	88db      	ldrh	r3, [r3, #6]
 80147e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80147e4:	d803      	bhi.n	80147ee <USBD_CDC_Setup+0xa6>
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	88db      	ldrh	r3, [r3, #6]
 80147ea:	b2da      	uxtb	r2, r3
 80147ec:	e000      	b.n	80147f0 <USBD_CDC_Setup+0xa8>
 80147ee:	2240      	movs	r2, #64	@ 0x40
 80147f0:	693b      	ldr	r3, [r7, #16]
 80147f2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80147f6:	6939      	ldr	r1, [r7, #16]
 80147f8:	693b      	ldr	r3, [r7, #16]
 80147fa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80147fe:	461a      	mov	r2, r3
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f001 fdcf 	bl	80163a4 <USBD_CtlPrepareRx>
      break;
 8014806:	e076      	b.n	80148f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801480e:	687a      	ldr	r2, [r7, #4]
 8014810:	33b0      	adds	r3, #176	@ 0xb0
 8014812:	009b      	lsls	r3, r3, #2
 8014814:	4413      	add	r3, r2
 8014816:	685b      	ldr	r3, [r3, #4]
 8014818:	689b      	ldr	r3, [r3, #8]
 801481a:	683a      	ldr	r2, [r7, #0]
 801481c:	7850      	ldrb	r0, [r2, #1]
 801481e:	2200      	movs	r2, #0
 8014820:	6839      	ldr	r1, [r7, #0]
 8014822:	4798      	blx	r3
      break;
 8014824:	e067      	b.n	80148f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	785b      	ldrb	r3, [r3, #1]
 801482a:	2b0b      	cmp	r3, #11
 801482c:	d851      	bhi.n	80148d2 <USBD_CDC_Setup+0x18a>
 801482e:	a201      	add	r2, pc, #4	@ (adr r2, 8014834 <USBD_CDC_Setup+0xec>)
 8014830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014834:	08014865 	.word	0x08014865
 8014838:	080148e1 	.word	0x080148e1
 801483c:	080148d3 	.word	0x080148d3
 8014840:	080148d3 	.word	0x080148d3
 8014844:	080148d3 	.word	0x080148d3
 8014848:	080148d3 	.word	0x080148d3
 801484c:	080148d3 	.word	0x080148d3
 8014850:	080148d3 	.word	0x080148d3
 8014854:	080148d3 	.word	0x080148d3
 8014858:	080148d3 	.word	0x080148d3
 801485c:	0801488f 	.word	0x0801488f
 8014860:	080148b9 	.word	0x080148b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801486a:	b2db      	uxtb	r3, r3
 801486c:	2b03      	cmp	r3, #3
 801486e:	d107      	bne.n	8014880 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014870:	f107 030a 	add.w	r3, r7, #10
 8014874:	2202      	movs	r2, #2
 8014876:	4619      	mov	r1, r3
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f001 fd67 	bl	801634c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801487e:	e032      	b.n	80148e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014880:	6839      	ldr	r1, [r7, #0]
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f001 fce5 	bl	8016252 <USBD_CtlError>
            ret = USBD_FAIL;
 8014888:	2303      	movs	r3, #3
 801488a:	75fb      	strb	r3, [r7, #23]
          break;
 801488c:	e02b      	b.n	80148e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014894:	b2db      	uxtb	r3, r3
 8014896:	2b03      	cmp	r3, #3
 8014898:	d107      	bne.n	80148aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801489a:	f107 030d 	add.w	r3, r7, #13
 801489e:	2201      	movs	r2, #1
 80148a0:	4619      	mov	r1, r3
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f001 fd52 	bl	801634c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80148a8:	e01d      	b.n	80148e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80148aa:	6839      	ldr	r1, [r7, #0]
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f001 fcd0 	bl	8016252 <USBD_CtlError>
            ret = USBD_FAIL;
 80148b2:	2303      	movs	r3, #3
 80148b4:	75fb      	strb	r3, [r7, #23]
          break;
 80148b6:	e016      	b.n	80148e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148be:	b2db      	uxtb	r3, r3
 80148c0:	2b03      	cmp	r3, #3
 80148c2:	d00f      	beq.n	80148e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80148c4:	6839      	ldr	r1, [r7, #0]
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f001 fcc3 	bl	8016252 <USBD_CtlError>
            ret = USBD_FAIL;
 80148cc:	2303      	movs	r3, #3
 80148ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80148d0:	e008      	b.n	80148e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80148d2:	6839      	ldr	r1, [r7, #0]
 80148d4:	6878      	ldr	r0, [r7, #4]
 80148d6:	f001 fcbc 	bl	8016252 <USBD_CtlError>
          ret = USBD_FAIL;
 80148da:	2303      	movs	r3, #3
 80148dc:	75fb      	strb	r3, [r7, #23]
          break;
 80148de:	e002      	b.n	80148e6 <USBD_CDC_Setup+0x19e>
          break;
 80148e0:	bf00      	nop
 80148e2:	e008      	b.n	80148f6 <USBD_CDC_Setup+0x1ae>
          break;
 80148e4:	bf00      	nop
      }
      break;
 80148e6:	e006      	b.n	80148f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80148e8:	6839      	ldr	r1, [r7, #0]
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f001 fcb1 	bl	8016252 <USBD_CtlError>
      ret = USBD_FAIL;
 80148f0:	2303      	movs	r3, #3
 80148f2:	75fb      	strb	r3, [r7, #23]
      break;
 80148f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80148f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3718      	adds	r7, #24
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	460b      	mov	r3, r1
 801490a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014912:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	32b0      	adds	r2, #176	@ 0xb0
 801491e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d101      	bne.n	801492a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014926:	2303      	movs	r3, #3
 8014928:	e065      	b.n	80149f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	32b0      	adds	r2, #176	@ 0xb0
 8014934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014938:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801493a:	78fb      	ldrb	r3, [r7, #3]
 801493c:	f003 020f 	and.w	r2, r3, #15
 8014940:	6879      	ldr	r1, [r7, #4]
 8014942:	4613      	mov	r3, r2
 8014944:	009b      	lsls	r3, r3, #2
 8014946:	4413      	add	r3, r2
 8014948:	009b      	lsls	r3, r3, #2
 801494a:	440b      	add	r3, r1
 801494c:	3318      	adds	r3, #24
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d02f      	beq.n	80149b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014954:	78fb      	ldrb	r3, [r7, #3]
 8014956:	f003 020f 	and.w	r2, r3, #15
 801495a:	6879      	ldr	r1, [r7, #4]
 801495c:	4613      	mov	r3, r2
 801495e:	009b      	lsls	r3, r3, #2
 8014960:	4413      	add	r3, r2
 8014962:	009b      	lsls	r3, r3, #2
 8014964:	440b      	add	r3, r1
 8014966:	3318      	adds	r3, #24
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	78fb      	ldrb	r3, [r7, #3]
 801496c:	f003 010f 	and.w	r1, r3, #15
 8014970:	68f8      	ldr	r0, [r7, #12]
 8014972:	460b      	mov	r3, r1
 8014974:	00db      	lsls	r3, r3, #3
 8014976:	440b      	add	r3, r1
 8014978:	009b      	lsls	r3, r3, #2
 801497a:	4403      	add	r3, r0
 801497c:	331c      	adds	r3, #28
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	fbb2 f1f3 	udiv	r1, r2, r3
 8014984:	fb01 f303 	mul.w	r3, r1, r3
 8014988:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801498a:	2b00      	cmp	r3, #0
 801498c:	d112      	bne.n	80149b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801498e:	78fb      	ldrb	r3, [r7, #3]
 8014990:	f003 020f 	and.w	r2, r3, #15
 8014994:	6879      	ldr	r1, [r7, #4]
 8014996:	4613      	mov	r3, r2
 8014998:	009b      	lsls	r3, r3, #2
 801499a:	4413      	add	r3, r2
 801499c:	009b      	lsls	r3, r3, #2
 801499e:	440b      	add	r3, r1
 80149a0:	3318      	adds	r3, #24
 80149a2:	2200      	movs	r2, #0
 80149a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80149a6:	78f9      	ldrb	r1, [r7, #3]
 80149a8:	2300      	movs	r3, #0
 80149aa:	2200      	movs	r2, #0
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f002 fa04 	bl	8016dba <USBD_LL_Transmit>
 80149b2:	e01f      	b.n	80149f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	2200      	movs	r2, #0
 80149b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80149c2:	687a      	ldr	r2, [r7, #4]
 80149c4:	33b0      	adds	r3, #176	@ 0xb0
 80149c6:	009b      	lsls	r3, r3, #2
 80149c8:	4413      	add	r3, r2
 80149ca:	685b      	ldr	r3, [r3, #4]
 80149cc:	691b      	ldr	r3, [r3, #16]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d010      	beq.n	80149f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80149d8:	687a      	ldr	r2, [r7, #4]
 80149da:	33b0      	adds	r3, #176	@ 0xb0
 80149dc:	009b      	lsls	r3, r3, #2
 80149de:	4413      	add	r3, r2
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	691b      	ldr	r3, [r3, #16]
 80149e4:	68ba      	ldr	r2, [r7, #8]
 80149e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80149ea:	68ba      	ldr	r2, [r7, #8]
 80149ec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80149f0:	78fa      	ldrb	r2, [r7, #3]
 80149f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80149f4:	2300      	movs	r3, #0
}
 80149f6:	4618      	mov	r0, r3
 80149f8:	3710      	adds	r7, #16
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}

080149fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80149fe:	b580      	push	{r7, lr}
 8014a00:	b084      	sub	sp, #16
 8014a02:	af00      	add	r7, sp, #0
 8014a04:	6078      	str	r0, [r7, #4]
 8014a06:	460b      	mov	r3, r1
 8014a08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	32b0      	adds	r2, #176	@ 0xb0
 8014a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	32b0      	adds	r2, #176	@ 0xb0
 8014a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d101      	bne.n	8014a30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014a2c:	2303      	movs	r3, #3
 8014a2e:	e01a      	b.n	8014a66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014a30:	78fb      	ldrb	r3, [r7, #3]
 8014a32:	4619      	mov	r1, r3
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f002 fa02 	bl	8016e3e <USBD_LL_GetRxDataSize>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014a48:	687a      	ldr	r2, [r7, #4]
 8014a4a:	33b0      	adds	r3, #176	@ 0xb0
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	4413      	add	r3, r2
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	68db      	ldr	r3, [r3, #12]
 8014a54:	68fa      	ldr	r2, [r7, #12]
 8014a56:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8014a5a:	68fa      	ldr	r2, [r7, #12]
 8014a5c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8014a60:	4611      	mov	r1, r2
 8014a62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014a64:	2300      	movs	r3, #0
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	3710      	adds	r7, #16
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014a6e:	b580      	push	{r7, lr}
 8014a70:	b084      	sub	sp, #16
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	32b0      	adds	r2, #176	@ 0xb0
 8014a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d101      	bne.n	8014a90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014a8c:	2303      	movs	r3, #3
 8014a8e:	e024      	b.n	8014ada <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014a96:	687a      	ldr	r2, [r7, #4]
 8014a98:	33b0      	adds	r3, #176	@ 0xb0
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4413      	add	r3, r2
 8014a9e:	685b      	ldr	r3, [r3, #4]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d019      	beq.n	8014ad8 <USBD_CDC_EP0_RxReady+0x6a>
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014aaa:	2bff      	cmp	r3, #255	@ 0xff
 8014aac:	d014      	beq.n	8014ad8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	33b0      	adds	r3, #176	@ 0xb0
 8014ab8:	009b      	lsls	r3, r3, #2
 8014aba:	4413      	add	r3, r2
 8014abc:	685b      	ldr	r3, [r3, #4]
 8014abe:	689b      	ldr	r3, [r3, #8]
 8014ac0:	68fa      	ldr	r2, [r7, #12]
 8014ac2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8014ac6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014ac8:	68fa      	ldr	r2, [r7, #12]
 8014aca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014ace:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	22ff      	movs	r2, #255	@ 0xff
 8014ad4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8014ad8:	2300      	movs	r3, #0
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3710      	adds	r7, #16
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
	...

08014ae4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b086      	sub	sp, #24
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014aec:	2182      	movs	r1, #130	@ 0x82
 8014aee:	4818      	ldr	r0, [pc, #96]	@ (8014b50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014af0:	f000 fd4f 	bl	8015592 <USBD_GetEpDesc>
 8014af4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014af6:	2101      	movs	r1, #1
 8014af8:	4815      	ldr	r0, [pc, #84]	@ (8014b50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014afa:	f000 fd4a 	bl	8015592 <USBD_GetEpDesc>
 8014afe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014b00:	2181      	movs	r1, #129	@ 0x81
 8014b02:	4813      	ldr	r0, [pc, #76]	@ (8014b50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014b04:	f000 fd45 	bl	8015592 <USBD_GetEpDesc>
 8014b08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d002      	beq.n	8014b16 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014b10:	697b      	ldr	r3, [r7, #20]
 8014b12:	2210      	movs	r2, #16
 8014b14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d006      	beq.n	8014b2a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b1c:	693b      	ldr	r3, [r7, #16]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014b24:	711a      	strb	r2, [r3, #4]
 8014b26:	2200      	movs	r2, #0
 8014b28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d006      	beq.n	8014b3e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2200      	movs	r2, #0
 8014b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014b38:	711a      	strb	r2, [r3, #4]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2243      	movs	r2, #67	@ 0x43
 8014b42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b44:	4b02      	ldr	r3, [pc, #8]	@ (8014b50 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3718      	adds	r7, #24
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}
 8014b4e:	bf00      	nop
 8014b50:	24000058 	.word	0x24000058

08014b54 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b086      	sub	sp, #24
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b5c:	2182      	movs	r1, #130	@ 0x82
 8014b5e:	4818      	ldr	r0, [pc, #96]	@ (8014bc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b60:	f000 fd17 	bl	8015592 <USBD_GetEpDesc>
 8014b64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014b66:	2101      	movs	r1, #1
 8014b68:	4815      	ldr	r0, [pc, #84]	@ (8014bc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b6a:	f000 fd12 	bl	8015592 <USBD_GetEpDesc>
 8014b6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014b70:	2181      	movs	r1, #129	@ 0x81
 8014b72:	4813      	ldr	r0, [pc, #76]	@ (8014bc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b74:	f000 fd0d 	bl	8015592 <USBD_GetEpDesc>
 8014b78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d002      	beq.n	8014b86 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	2210      	movs	r2, #16
 8014b84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b86:	693b      	ldr	r3, [r7, #16]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d006      	beq.n	8014b9a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b8c:	693b      	ldr	r3, [r7, #16]
 8014b8e:	2200      	movs	r2, #0
 8014b90:	711a      	strb	r2, [r3, #4]
 8014b92:	2200      	movs	r2, #0
 8014b94:	f042 0202 	orr.w	r2, r2, #2
 8014b98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d006      	beq.n	8014bae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	711a      	strb	r2, [r3, #4]
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	f042 0202 	orr.w	r2, r2, #2
 8014bac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	2243      	movs	r2, #67	@ 0x43
 8014bb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014bb4:	4b02      	ldr	r3, [pc, #8]	@ (8014bc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3718      	adds	r7, #24
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	24000058 	.word	0x24000058

08014bc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b086      	sub	sp, #24
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014bcc:	2182      	movs	r1, #130	@ 0x82
 8014bce:	4818      	ldr	r0, [pc, #96]	@ (8014c30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014bd0:	f000 fcdf 	bl	8015592 <USBD_GetEpDesc>
 8014bd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014bd6:	2101      	movs	r1, #1
 8014bd8:	4815      	ldr	r0, [pc, #84]	@ (8014c30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014bda:	f000 fcda 	bl	8015592 <USBD_GetEpDesc>
 8014bde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014be0:	2181      	movs	r1, #129	@ 0x81
 8014be2:	4813      	ldr	r0, [pc, #76]	@ (8014c30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014be4:	f000 fcd5 	bl	8015592 <USBD_GetEpDesc>
 8014be8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d002      	beq.n	8014bf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	2210      	movs	r2, #16
 8014bf4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014bf6:	693b      	ldr	r3, [r7, #16]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d006      	beq.n	8014c0a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014c04:	711a      	strb	r2, [r3, #4]
 8014c06:	2200      	movs	r2, #0
 8014c08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d006      	beq.n	8014c1e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	2200      	movs	r2, #0
 8014c14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014c18:	711a      	strb	r2, [r3, #4]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	2243      	movs	r2, #67	@ 0x43
 8014c22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c24:	4b02      	ldr	r3, [pc, #8]	@ (8014c30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3718      	adds	r7, #24
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
 8014c2e:	bf00      	nop
 8014c30:	24000058 	.word	0x24000058

08014c34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b083      	sub	sp, #12
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	220a      	movs	r2, #10
 8014c40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014c42:	4b03      	ldr	r3, [pc, #12]	@ (8014c50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	370c      	adds	r7, #12
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4e:	4770      	bx	lr
 8014c50:	24000014 	.word	0x24000014

08014c54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014c54:	b480      	push	{r7}
 8014c56:	b083      	sub	sp, #12
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d101      	bne.n	8014c68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014c64:	2303      	movs	r3, #3
 8014c66:	e009      	b.n	8014c7c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014c6e:	687a      	ldr	r2, [r7, #4]
 8014c70:	33b0      	adds	r3, #176	@ 0xb0
 8014c72:	009b      	lsls	r3, r3, #2
 8014c74:	4413      	add	r3, r2
 8014c76:	683a      	ldr	r2, [r7, #0]
 8014c78:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014c7a:	2300      	movs	r3, #0
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	370c      	adds	r7, #12
 8014c80:	46bd      	mov	sp, r7
 8014c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c86:	4770      	bx	lr

08014c88 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014c88:	b480      	push	{r7}
 8014c8a:	b087      	sub	sp, #28
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	60f8      	str	r0, [r7, #12]
 8014c90:	60b9      	str	r1, [r7, #8]
 8014c92:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	32b0      	adds	r2, #176	@ 0xb0
 8014c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ca2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014ca4:	697b      	ldr	r3, [r7, #20]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d101      	bne.n	8014cae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014caa:	2303      	movs	r3, #3
 8014cac:	e008      	b.n	8014cc0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	68ba      	ldr	r2, [r7, #8]
 8014cb2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	687a      	ldr	r2, [r7, #4]
 8014cba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8014cbe:	2300      	movs	r3, #0
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	371c      	adds	r7, #28
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cca:	4770      	bx	lr

08014ccc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014ccc:	b480      	push	{r7}
 8014cce:	b085      	sub	sp, #20
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
 8014cd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	32b0      	adds	r2, #176	@ 0xb0
 8014ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ce4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d101      	bne.n	8014cf0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014cec:	2303      	movs	r3, #3
 8014cee:	e004      	b.n	8014cfa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	683a      	ldr	r2, [r7, #0]
 8014cf4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8014cf8:	2300      	movs	r3, #0
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3714      	adds	r7, #20
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d04:	4770      	bx	lr
	...

08014d08 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b084      	sub	sp, #16
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	32b0      	adds	r2, #176	@ 0xb0
 8014d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d1e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014d20:	2301      	movs	r3, #1
 8014d22:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d101      	bne.n	8014d2e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014d2a:	2303      	movs	r3, #3
 8014d2c:	e025      	b.n	8014d7a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014d2e:	68bb      	ldr	r3, [r7, #8]
 8014d30:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d11f      	bne.n	8014d78 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014d40:	4b10      	ldr	r3, [pc, #64]	@ (8014d84 <USBD_CDC_TransmitPacket+0x7c>)
 8014d42:	781b      	ldrb	r3, [r3, #0]
 8014d44:	f003 020f 	and.w	r2, r3, #15
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8014d4e:	6878      	ldr	r0, [r7, #4]
 8014d50:	4613      	mov	r3, r2
 8014d52:	009b      	lsls	r3, r3, #2
 8014d54:	4413      	add	r3, r2
 8014d56:	009b      	lsls	r3, r3, #2
 8014d58:	4403      	add	r3, r0
 8014d5a:	3318      	adds	r3, #24
 8014d5c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014d5e:	4b09      	ldr	r3, [pc, #36]	@ (8014d84 <USBD_CDC_TransmitPacket+0x7c>)
 8014d60:	7819      	ldrb	r1, [r3, #0]
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8014d6e:	6878      	ldr	r0, [r7, #4]
 8014d70:	f002 f823 	bl	8016dba <USBD_LL_Transmit>

    ret = USBD_OK;
 8014d74:	2300      	movs	r3, #0
 8014d76:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	3710      	adds	r7, #16
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd80      	pop	{r7, pc}
 8014d82:	bf00      	nop
 8014d84:	2400009b 	.word	0x2400009b

08014d88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b084      	sub	sp, #16
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	32b0      	adds	r2, #176	@ 0xb0
 8014d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d9e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	32b0      	adds	r2, #176	@ 0xb0
 8014daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d101      	bne.n	8014db6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014db2:	2303      	movs	r3, #3
 8014db4:	e018      	b.n	8014de8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	7c1b      	ldrb	r3, [r3, #16]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d10a      	bne.n	8014dd4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8014df0 <USBD_CDC_ReceivePacket+0x68>)
 8014dc0:	7819      	ldrb	r1, [r3, #0]
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014dc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f002 f815 	bl	8016dfc <USBD_LL_PrepareReceive>
 8014dd2:	e008      	b.n	8014de6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014dd4:	4b06      	ldr	r3, [pc, #24]	@ (8014df0 <USBD_CDC_ReceivePacket+0x68>)
 8014dd6:	7819      	ldrb	r1, [r3, #0]
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014dde:	2340      	movs	r3, #64	@ 0x40
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f002 f80b 	bl	8016dfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014de6:	2300      	movs	r3, #0
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3710      	adds	r7, #16
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}
 8014df0:	2400009c 	.word	0x2400009c

08014df4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b086      	sub	sp, #24
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	4613      	mov	r3, r2
 8014e00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d101      	bne.n	8014e0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014e08:	2303      	movs	r3, #3
 8014e0a:	e01f      	b.n	8014e4c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2200      	movs	r2, #0
 8014e18:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d003      	beq.n	8014e32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	68ba      	ldr	r2, [r7, #8]
 8014e2e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	2201      	movs	r2, #1
 8014e36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	79fa      	ldrb	r2, [r7, #7]
 8014e3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014e40:	68f8      	ldr	r0, [r7, #12]
 8014e42:	f001 fe81 	bl	8016b48 <USBD_LL_Init>
 8014e46:	4603      	mov	r3, r0
 8014e48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3718      	adds	r7, #24
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b084      	sub	sp, #16
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d101      	bne.n	8014e6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014e68:	2303      	movs	r3, #3
 8014e6a:	e025      	b.n	8014eb8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	683a      	ldr	r2, [r7, #0]
 8014e70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	32ae      	adds	r2, #174	@ 0xae
 8014e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d00f      	beq.n	8014ea8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	32ae      	adds	r2, #174	@ 0xae
 8014e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e98:	f107 020e 	add.w	r2, r7, #14
 8014e9c:	4610      	mov	r0, r2
 8014e9e:	4798      	blx	r3
 8014ea0:	4602      	mov	r2, r0
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014eae:	1c5a      	adds	r2, r3, #1
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8014eb6:	2300      	movs	r3, #0
}
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3710      	adds	r7, #16
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}

08014ec0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014ec8:	6878      	ldr	r0, [r7, #4]
 8014eca:	f001 fe8d 	bl	8016be8 <USBD_LL_Start>
 8014ece:	4603      	mov	r3, r0
}
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3708      	adds	r7, #8
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}

08014ed8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014ed8:	b480      	push	{r7}
 8014eda:	b083      	sub	sp, #12
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014ee0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	370c      	adds	r7, #12
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eec:	4770      	bx	lr

08014eee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b084      	sub	sp, #16
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
 8014ef6:	460b      	mov	r3, r1
 8014ef8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014efa:	2300      	movs	r3, #0
 8014efc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d009      	beq.n	8014f1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	78fa      	ldrb	r2, [r7, #3]
 8014f12:	4611      	mov	r1, r2
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	4798      	blx	r3
 8014f18:	4603      	mov	r3, r0
 8014f1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3710      	adds	r7, #16
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}

08014f26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014f26:	b580      	push	{r7, lr}
 8014f28:	b084      	sub	sp, #16
 8014f2a:	af00      	add	r7, sp, #0
 8014f2c:	6078      	str	r0, [r7, #4]
 8014f2e:	460b      	mov	r3, r1
 8014f30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f32:	2300      	movs	r3, #0
 8014f34:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	78fa      	ldrb	r2, [r7, #3]
 8014f40:	4611      	mov	r1, r2
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	4798      	blx	r3
 8014f46:	4603      	mov	r3, r0
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d001      	beq.n	8014f50 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014f4c:	2303      	movs	r3, #3
 8014f4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3710      	adds	r7, #16
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}

08014f5a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014f5a:	b580      	push	{r7, lr}
 8014f5c:	b084      	sub	sp, #16
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	6078      	str	r0, [r7, #4]
 8014f62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014f6a:	6839      	ldr	r1, [r7, #0]
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f001 f936 	bl	80161de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2201      	movs	r2, #1
 8014f76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014f80:	461a      	mov	r2, r3
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014f8e:	f003 031f 	and.w	r3, r3, #31
 8014f92:	2b02      	cmp	r3, #2
 8014f94:	d01a      	beq.n	8014fcc <USBD_LL_SetupStage+0x72>
 8014f96:	2b02      	cmp	r3, #2
 8014f98:	d822      	bhi.n	8014fe0 <USBD_LL_SetupStage+0x86>
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d002      	beq.n	8014fa4 <USBD_LL_SetupStage+0x4a>
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d00a      	beq.n	8014fb8 <USBD_LL_SetupStage+0x5e>
 8014fa2:	e01d      	b.n	8014fe0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014faa:	4619      	mov	r1, r3
 8014fac:	6878      	ldr	r0, [r7, #4]
 8014fae:	f000 fb63 	bl	8015678 <USBD_StdDevReq>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8014fb6:	e020      	b.n	8014ffa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014fbe:	4619      	mov	r1, r3
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f000 fbcb 	bl	801575c <USBD_StdItfReq>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8014fca:	e016      	b.n	8014ffa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014fd2:	4619      	mov	r1, r3
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f000 fc2d 	bl	8015834 <USBD_StdEPReq>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8014fde:	e00c      	b.n	8014ffa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014fe6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014fea:	b2db      	uxtb	r3, r3
 8014fec:	4619      	mov	r1, r3
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f001 fe5a 	bl	8016ca8 <USBD_LL_StallEP>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8014ff8:	bf00      	nop
  }

  return ret;
 8014ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3710      	adds	r7, #16
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b086      	sub	sp, #24
 8015008:	af00      	add	r7, sp, #0
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	460b      	mov	r3, r1
 801500e:	607a      	str	r2, [r7, #4]
 8015010:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015012:	2300      	movs	r3, #0
 8015014:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015016:	7afb      	ldrb	r3, [r7, #11]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d16e      	bne.n	80150fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8015022:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801502a:	2b03      	cmp	r3, #3
 801502c:	f040 8098 	bne.w	8015160 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015030:	693b      	ldr	r3, [r7, #16]
 8015032:	689a      	ldr	r2, [r3, #8]
 8015034:	693b      	ldr	r3, [r7, #16]
 8015036:	68db      	ldr	r3, [r3, #12]
 8015038:	429a      	cmp	r2, r3
 801503a:	d913      	bls.n	8015064 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	689a      	ldr	r2, [r3, #8]
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	68db      	ldr	r3, [r3, #12]
 8015044:	1ad2      	subs	r2, r2, r3
 8015046:	693b      	ldr	r3, [r7, #16]
 8015048:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	68da      	ldr	r2, [r3, #12]
 801504e:	693b      	ldr	r3, [r7, #16]
 8015050:	689b      	ldr	r3, [r3, #8]
 8015052:	4293      	cmp	r3, r2
 8015054:	bf28      	it	cs
 8015056:	4613      	movcs	r3, r2
 8015058:	461a      	mov	r2, r3
 801505a:	6879      	ldr	r1, [r7, #4]
 801505c:	68f8      	ldr	r0, [r7, #12]
 801505e:	f001 f9be 	bl	80163de <USBD_CtlContinueRx>
 8015062:	e07d      	b.n	8015160 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801506a:	f003 031f 	and.w	r3, r3, #31
 801506e:	2b02      	cmp	r3, #2
 8015070:	d014      	beq.n	801509c <USBD_LL_DataOutStage+0x98>
 8015072:	2b02      	cmp	r3, #2
 8015074:	d81d      	bhi.n	80150b2 <USBD_LL_DataOutStage+0xae>
 8015076:	2b00      	cmp	r3, #0
 8015078:	d002      	beq.n	8015080 <USBD_LL_DataOutStage+0x7c>
 801507a:	2b01      	cmp	r3, #1
 801507c:	d003      	beq.n	8015086 <USBD_LL_DataOutStage+0x82>
 801507e:	e018      	b.n	80150b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015080:	2300      	movs	r3, #0
 8015082:	75bb      	strb	r3, [r7, #22]
            break;
 8015084:	e018      	b.n	80150b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801508c:	b2db      	uxtb	r3, r3
 801508e:	4619      	mov	r1, r3
 8015090:	68f8      	ldr	r0, [r7, #12]
 8015092:	f000 fa64 	bl	801555e <USBD_CoreFindIF>
 8015096:	4603      	mov	r3, r0
 8015098:	75bb      	strb	r3, [r7, #22]
            break;
 801509a:	e00d      	b.n	80150b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80150a2:	b2db      	uxtb	r3, r3
 80150a4:	4619      	mov	r1, r3
 80150a6:	68f8      	ldr	r0, [r7, #12]
 80150a8:	f000 fa66 	bl	8015578 <USBD_CoreFindEP>
 80150ac:	4603      	mov	r3, r0
 80150ae:	75bb      	strb	r3, [r7, #22]
            break;
 80150b0:	e002      	b.n	80150b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80150b2:	2300      	movs	r3, #0
 80150b4:	75bb      	strb	r3, [r7, #22]
            break;
 80150b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80150b8:	7dbb      	ldrb	r3, [r7, #22]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d119      	bne.n	80150f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80150c4:	b2db      	uxtb	r3, r3
 80150c6:	2b03      	cmp	r3, #3
 80150c8:	d113      	bne.n	80150f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80150ca:	7dba      	ldrb	r2, [r7, #22]
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	32ae      	adds	r2, #174	@ 0xae
 80150d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150d4:	691b      	ldr	r3, [r3, #16]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d00b      	beq.n	80150f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80150da:	7dba      	ldrb	r2, [r7, #22]
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80150e2:	7dba      	ldrb	r2, [r7, #22]
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	32ae      	adds	r2, #174	@ 0xae
 80150e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150ec:	691b      	ldr	r3, [r3, #16]
 80150ee:	68f8      	ldr	r0, [r7, #12]
 80150f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80150f2:	68f8      	ldr	r0, [r7, #12]
 80150f4:	f001 f984 	bl	8016400 <USBD_CtlSendStatus>
 80150f8:	e032      	b.n	8015160 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80150fa:	7afb      	ldrb	r3, [r7, #11]
 80150fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015100:	b2db      	uxtb	r3, r3
 8015102:	4619      	mov	r1, r3
 8015104:	68f8      	ldr	r0, [r7, #12]
 8015106:	f000 fa37 	bl	8015578 <USBD_CoreFindEP>
 801510a:	4603      	mov	r3, r0
 801510c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801510e:	7dbb      	ldrb	r3, [r7, #22]
 8015110:	2bff      	cmp	r3, #255	@ 0xff
 8015112:	d025      	beq.n	8015160 <USBD_LL_DataOutStage+0x15c>
 8015114:	7dbb      	ldrb	r3, [r7, #22]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d122      	bne.n	8015160 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015120:	b2db      	uxtb	r3, r3
 8015122:	2b03      	cmp	r3, #3
 8015124:	d117      	bne.n	8015156 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015126:	7dba      	ldrb	r2, [r7, #22]
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	32ae      	adds	r2, #174	@ 0xae
 801512c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015130:	699b      	ldr	r3, [r3, #24]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d00f      	beq.n	8015156 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015136:	7dba      	ldrb	r2, [r7, #22]
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801513e:	7dba      	ldrb	r2, [r7, #22]
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	32ae      	adds	r2, #174	@ 0xae
 8015144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015148:	699b      	ldr	r3, [r3, #24]
 801514a:	7afa      	ldrb	r2, [r7, #11]
 801514c:	4611      	mov	r1, r2
 801514e:	68f8      	ldr	r0, [r7, #12]
 8015150:	4798      	blx	r3
 8015152:	4603      	mov	r3, r0
 8015154:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015156:	7dfb      	ldrb	r3, [r7, #23]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d001      	beq.n	8015160 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801515c:	7dfb      	ldrb	r3, [r7, #23]
 801515e:	e000      	b.n	8015162 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015160:	2300      	movs	r3, #0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3718      	adds	r7, #24
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}

0801516a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801516a:	b580      	push	{r7, lr}
 801516c:	b086      	sub	sp, #24
 801516e:	af00      	add	r7, sp, #0
 8015170:	60f8      	str	r0, [r7, #12]
 8015172:	460b      	mov	r3, r1
 8015174:	607a      	str	r2, [r7, #4]
 8015176:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015178:	7afb      	ldrb	r3, [r7, #11]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d16f      	bne.n	801525e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	3314      	adds	r3, #20
 8015182:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801518a:	2b02      	cmp	r3, #2
 801518c:	d15a      	bne.n	8015244 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	689a      	ldr	r2, [r3, #8]
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	429a      	cmp	r2, r3
 8015198:	d914      	bls.n	80151c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	689a      	ldr	r2, [r3, #8]
 801519e:	693b      	ldr	r3, [r7, #16]
 80151a0:	68db      	ldr	r3, [r3, #12]
 80151a2:	1ad2      	subs	r2, r2, r3
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	689b      	ldr	r3, [r3, #8]
 80151ac:	461a      	mov	r2, r3
 80151ae:	6879      	ldr	r1, [r7, #4]
 80151b0:	68f8      	ldr	r0, [r7, #12]
 80151b2:	f001 f8e6 	bl	8016382 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151b6:	2300      	movs	r3, #0
 80151b8:	2200      	movs	r2, #0
 80151ba:	2100      	movs	r1, #0
 80151bc:	68f8      	ldr	r0, [r7, #12]
 80151be:	f001 fe1d 	bl	8016dfc <USBD_LL_PrepareReceive>
 80151c2:	e03f      	b.n	8015244 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	68da      	ldr	r2, [r3, #12]
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	689b      	ldr	r3, [r3, #8]
 80151cc:	429a      	cmp	r2, r3
 80151ce:	d11c      	bne.n	801520a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	685a      	ldr	r2, [r3, #4]
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80151d8:	429a      	cmp	r2, r3
 80151da:	d316      	bcc.n	801520a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	685a      	ldr	r2, [r3, #4]
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d20f      	bcs.n	801520a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80151ea:	2200      	movs	r2, #0
 80151ec:	2100      	movs	r1, #0
 80151ee:	68f8      	ldr	r0, [r7, #12]
 80151f0:	f001 f8c7 	bl	8016382 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	2200      	movs	r2, #0
 80151f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151fc:	2300      	movs	r3, #0
 80151fe:	2200      	movs	r2, #0
 8015200:	2100      	movs	r1, #0
 8015202:	68f8      	ldr	r0, [r7, #12]
 8015204:	f001 fdfa 	bl	8016dfc <USBD_LL_PrepareReceive>
 8015208:	e01c      	b.n	8015244 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015210:	b2db      	uxtb	r3, r3
 8015212:	2b03      	cmp	r3, #3
 8015214:	d10f      	bne.n	8015236 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801521c:	68db      	ldr	r3, [r3, #12]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d009      	beq.n	8015236 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2200      	movs	r2, #0
 8015226:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015230:	68db      	ldr	r3, [r3, #12]
 8015232:	68f8      	ldr	r0, [r7, #12]
 8015234:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015236:	2180      	movs	r1, #128	@ 0x80
 8015238:	68f8      	ldr	r0, [r7, #12]
 801523a:	f001 fd35 	bl	8016ca8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801523e:	68f8      	ldr	r0, [r7, #12]
 8015240:	f001 f8f1 	bl	8016426 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801524a:	2b00      	cmp	r3, #0
 801524c:	d03a      	beq.n	80152c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801524e:	68f8      	ldr	r0, [r7, #12]
 8015250:	f7ff fe42 	bl	8014ed8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	2200      	movs	r2, #0
 8015258:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801525c:	e032      	b.n	80152c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801525e:	7afb      	ldrb	r3, [r7, #11]
 8015260:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015264:	b2db      	uxtb	r3, r3
 8015266:	4619      	mov	r1, r3
 8015268:	68f8      	ldr	r0, [r7, #12]
 801526a:	f000 f985 	bl	8015578 <USBD_CoreFindEP>
 801526e:	4603      	mov	r3, r0
 8015270:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015272:	7dfb      	ldrb	r3, [r7, #23]
 8015274:	2bff      	cmp	r3, #255	@ 0xff
 8015276:	d025      	beq.n	80152c4 <USBD_LL_DataInStage+0x15a>
 8015278:	7dfb      	ldrb	r3, [r7, #23]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d122      	bne.n	80152c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015284:	b2db      	uxtb	r3, r3
 8015286:	2b03      	cmp	r3, #3
 8015288:	d11c      	bne.n	80152c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801528a:	7dfa      	ldrb	r2, [r7, #23]
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	32ae      	adds	r2, #174	@ 0xae
 8015290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015294:	695b      	ldr	r3, [r3, #20]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d014      	beq.n	80152c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801529a:	7dfa      	ldrb	r2, [r7, #23]
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80152a2:	7dfa      	ldrb	r2, [r7, #23]
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	32ae      	adds	r2, #174	@ 0xae
 80152a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152ac:	695b      	ldr	r3, [r3, #20]
 80152ae:	7afa      	ldrb	r2, [r7, #11]
 80152b0:	4611      	mov	r1, r2
 80152b2:	68f8      	ldr	r0, [r7, #12]
 80152b4:	4798      	blx	r3
 80152b6:	4603      	mov	r3, r0
 80152b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80152ba:	7dbb      	ldrb	r3, [r7, #22]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d001      	beq.n	80152c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80152c0:	7dbb      	ldrb	r3, [r7, #22]
 80152c2:	e000      	b.n	80152c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80152c4:	2300      	movs	r3, #0
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	3718      	adds	r7, #24
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}

080152ce <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80152ce:	b580      	push	{r7, lr}
 80152d0:	b084      	sub	sp, #16
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80152d6:	2300      	movs	r3, #0
 80152d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2201      	movs	r2, #1
 80152de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	2200      	movs	r2, #0
 80152e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2200      	movs	r2, #0
 80152ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2200      	movs	r2, #0
 80152f4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2200      	movs	r2, #0
 80152fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015306:	2b00      	cmp	r3, #0
 8015308:	d014      	beq.n	8015334 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015310:	685b      	ldr	r3, [r3, #4]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d00e      	beq.n	8015334 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	687a      	ldr	r2, [r7, #4]
 8015320:	6852      	ldr	r2, [r2, #4]
 8015322:	b2d2      	uxtb	r2, r2
 8015324:	4611      	mov	r1, r2
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	4798      	blx	r3
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d001      	beq.n	8015334 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015330:	2303      	movs	r3, #3
 8015332:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015334:	2340      	movs	r3, #64	@ 0x40
 8015336:	2200      	movs	r2, #0
 8015338:	2100      	movs	r1, #0
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	f001 fc6f 	bl	8016c1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	2201      	movs	r2, #1
 8015344:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2240      	movs	r2, #64	@ 0x40
 801534c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015350:	2340      	movs	r3, #64	@ 0x40
 8015352:	2200      	movs	r2, #0
 8015354:	2180      	movs	r1, #128	@ 0x80
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	f001 fc61 	bl	8016c1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2201      	movs	r2, #1
 8015360:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2240      	movs	r2, #64	@ 0x40
 8015366:	621a      	str	r2, [r3, #32]

  return ret;
 8015368:	7bfb      	ldrb	r3, [r7, #15]
}
 801536a:	4618      	mov	r0, r3
 801536c:	3710      	adds	r7, #16
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}

08015372 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015372:	b480      	push	{r7}
 8015374:	b083      	sub	sp, #12
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
 801537a:	460b      	mov	r3, r1
 801537c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	78fa      	ldrb	r2, [r7, #3]
 8015382:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015384:	2300      	movs	r3, #0
}
 8015386:	4618      	mov	r0, r3
 8015388:	370c      	adds	r7, #12
 801538a:	46bd      	mov	sp, r7
 801538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015390:	4770      	bx	lr

08015392 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015392:	b480      	push	{r7}
 8015394:	b083      	sub	sp, #12
 8015396:	af00      	add	r7, sp, #0
 8015398:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	2b04      	cmp	r3, #4
 80153a4:	d006      	beq.n	80153b4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80153ac:	b2da      	uxtb	r2, r3
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	2204      	movs	r2, #4
 80153b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80153bc:	2300      	movs	r3, #0
}
 80153be:	4618      	mov	r0, r3
 80153c0:	370c      	adds	r7, #12
 80153c2:	46bd      	mov	sp, r7
 80153c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c8:	4770      	bx	lr

080153ca <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80153ca:	b480      	push	{r7}
 80153cc:	b083      	sub	sp, #12
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80153d8:	b2db      	uxtb	r3, r3
 80153da:	2b04      	cmp	r3, #4
 80153dc:	d106      	bne.n	80153ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80153e4:	b2da      	uxtb	r2, r3
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80153ec:	2300      	movs	r3, #0
}
 80153ee:	4618      	mov	r0, r3
 80153f0:	370c      	adds	r7, #12
 80153f2:	46bd      	mov	sp, r7
 80153f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f8:	4770      	bx	lr

080153fa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80153fa:	b580      	push	{r7, lr}
 80153fc:	b082      	sub	sp, #8
 80153fe:	af00      	add	r7, sp, #0
 8015400:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015408:	b2db      	uxtb	r3, r3
 801540a:	2b03      	cmp	r3, #3
 801540c:	d110      	bne.n	8015430 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015414:	2b00      	cmp	r3, #0
 8015416:	d00b      	beq.n	8015430 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801541e:	69db      	ldr	r3, [r3, #28]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d005      	beq.n	8015430 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801542a:	69db      	ldr	r3, [r3, #28]
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015430:	2300      	movs	r3, #0
}
 8015432:	4618      	mov	r0, r3
 8015434:	3708      	adds	r7, #8
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}

0801543a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801543a:	b580      	push	{r7, lr}
 801543c:	b082      	sub	sp, #8
 801543e:	af00      	add	r7, sp, #0
 8015440:	6078      	str	r0, [r7, #4]
 8015442:	460b      	mov	r3, r1
 8015444:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	32ae      	adds	r2, #174	@ 0xae
 8015450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d101      	bne.n	801545c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015458:	2303      	movs	r3, #3
 801545a:	e01c      	b.n	8015496 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015462:	b2db      	uxtb	r3, r3
 8015464:	2b03      	cmp	r3, #3
 8015466:	d115      	bne.n	8015494 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	32ae      	adds	r2, #174	@ 0xae
 8015472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015476:	6a1b      	ldr	r3, [r3, #32]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d00b      	beq.n	8015494 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	32ae      	adds	r2, #174	@ 0xae
 8015486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801548a:	6a1b      	ldr	r3, [r3, #32]
 801548c:	78fa      	ldrb	r2, [r7, #3]
 801548e:	4611      	mov	r1, r2
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015494:	2300      	movs	r3, #0
}
 8015496:	4618      	mov	r0, r3
 8015498:	3708      	adds	r7, #8
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}

0801549e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801549e:	b580      	push	{r7, lr}
 80154a0:	b082      	sub	sp, #8
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]
 80154a6:	460b      	mov	r3, r1
 80154a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	32ae      	adds	r2, #174	@ 0xae
 80154b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d101      	bne.n	80154c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80154bc:	2303      	movs	r3, #3
 80154be:	e01c      	b.n	80154fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80154c6:	b2db      	uxtb	r3, r3
 80154c8:	2b03      	cmp	r3, #3
 80154ca:	d115      	bne.n	80154f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	32ae      	adds	r2, #174	@ 0xae
 80154d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d00b      	beq.n	80154f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	32ae      	adds	r2, #174	@ 0xae
 80154ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154f0:	78fa      	ldrb	r2, [r7, #3]
 80154f2:	4611      	mov	r1, r2
 80154f4:	6878      	ldr	r0, [r7, #4]
 80154f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80154f8:	2300      	movs	r3, #0
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3708      	adds	r7, #8
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}

08015502 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015502:	b480      	push	{r7}
 8015504:	b083      	sub	sp, #12
 8015506:	af00      	add	r7, sp, #0
 8015508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801550a:	2300      	movs	r3, #0
}
 801550c:	4618      	mov	r0, r3
 801550e:	370c      	adds	r7, #12
 8015510:	46bd      	mov	sp, r7
 8015512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015516:	4770      	bx	lr

08015518 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b084      	sub	sp, #16
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015520:	2300      	movs	r3, #0
 8015522:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2201      	movs	r2, #1
 8015528:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015532:	2b00      	cmp	r3, #0
 8015534:	d00e      	beq.n	8015554 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801553c:	685b      	ldr	r3, [r3, #4]
 801553e:	687a      	ldr	r2, [r7, #4]
 8015540:	6852      	ldr	r2, [r2, #4]
 8015542:	b2d2      	uxtb	r2, r2
 8015544:	4611      	mov	r1, r2
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	4798      	blx	r3
 801554a:	4603      	mov	r3, r0
 801554c:	2b00      	cmp	r3, #0
 801554e:	d001      	beq.n	8015554 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015550:	2303      	movs	r3, #3
 8015552:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015554:	7bfb      	ldrb	r3, [r7, #15]
}
 8015556:	4618      	mov	r0, r3
 8015558:	3710      	adds	r7, #16
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}

0801555e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801555e:	b480      	push	{r7}
 8015560:	b083      	sub	sp, #12
 8015562:	af00      	add	r7, sp, #0
 8015564:	6078      	str	r0, [r7, #4]
 8015566:	460b      	mov	r3, r1
 8015568:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801556a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801556c:	4618      	mov	r0, r3
 801556e:	370c      	adds	r7, #12
 8015570:	46bd      	mov	sp, r7
 8015572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015576:	4770      	bx	lr

08015578 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015578:	b480      	push	{r7}
 801557a:	b083      	sub	sp, #12
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	460b      	mov	r3, r1
 8015582:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015584:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015586:	4618      	mov	r0, r3
 8015588:	370c      	adds	r7, #12
 801558a:	46bd      	mov	sp, r7
 801558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015590:	4770      	bx	lr

08015592 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015592:	b580      	push	{r7, lr}
 8015594:	b086      	sub	sp, #24
 8015596:	af00      	add	r7, sp, #0
 8015598:	6078      	str	r0, [r7, #4]
 801559a:	460b      	mov	r3, r1
 801559c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80155a6:	2300      	movs	r3, #0
 80155a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	885b      	ldrh	r3, [r3, #2]
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	68fa      	ldr	r2, [r7, #12]
 80155b2:	7812      	ldrb	r2, [r2, #0]
 80155b4:	4293      	cmp	r3, r2
 80155b6:	d91f      	bls.n	80155f8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	781b      	ldrb	r3, [r3, #0]
 80155bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80155be:	e013      	b.n	80155e8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80155c0:	f107 030a 	add.w	r3, r7, #10
 80155c4:	4619      	mov	r1, r3
 80155c6:	6978      	ldr	r0, [r7, #20]
 80155c8:	f000 f81b 	bl	8015602 <USBD_GetNextDesc>
 80155cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	785b      	ldrb	r3, [r3, #1]
 80155d2:	2b05      	cmp	r3, #5
 80155d4:	d108      	bne.n	80155e8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	789b      	ldrb	r3, [r3, #2]
 80155de:	78fa      	ldrb	r2, [r7, #3]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d008      	beq.n	80155f6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80155e4:	2300      	movs	r3, #0
 80155e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	885b      	ldrh	r3, [r3, #2]
 80155ec:	b29a      	uxth	r2, r3
 80155ee:	897b      	ldrh	r3, [r7, #10]
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d8e5      	bhi.n	80155c0 <USBD_GetEpDesc+0x2e>
 80155f4:	e000      	b.n	80155f8 <USBD_GetEpDesc+0x66>
          break;
 80155f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80155f8:	693b      	ldr	r3, [r7, #16]
}
 80155fa:	4618      	mov	r0, r3
 80155fc:	3718      	adds	r7, #24
 80155fe:	46bd      	mov	sp, r7
 8015600:	bd80      	pop	{r7, pc}

08015602 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015602:	b480      	push	{r7}
 8015604:	b085      	sub	sp, #20
 8015606:	af00      	add	r7, sp, #0
 8015608:	6078      	str	r0, [r7, #4]
 801560a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	881b      	ldrh	r3, [r3, #0]
 8015614:	68fa      	ldr	r2, [r7, #12]
 8015616:	7812      	ldrb	r2, [r2, #0]
 8015618:	4413      	add	r3, r2
 801561a:	b29a      	uxth	r2, r3
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	781b      	ldrb	r3, [r3, #0]
 8015624:	461a      	mov	r2, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	4413      	add	r3, r2
 801562a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801562c:	68fb      	ldr	r3, [r7, #12]
}
 801562e:	4618      	mov	r0, r3
 8015630:	3714      	adds	r7, #20
 8015632:	46bd      	mov	sp, r7
 8015634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015638:	4770      	bx	lr

0801563a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801563a:	b480      	push	{r7}
 801563c:	b087      	sub	sp, #28
 801563e:	af00      	add	r7, sp, #0
 8015640:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	781b      	ldrb	r3, [r3, #0]
 801564a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	3301      	adds	r3, #1
 8015650:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015658:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801565c:	021b      	lsls	r3, r3, #8
 801565e:	b21a      	sxth	r2, r3
 8015660:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015664:	4313      	orrs	r3, r2
 8015666:	b21b      	sxth	r3, r3
 8015668:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801566a:	89fb      	ldrh	r3, [r7, #14]
}
 801566c:	4618      	mov	r0, r3
 801566e:	371c      	adds	r7, #28
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr

08015678 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015682:	2300      	movs	r3, #0
 8015684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801568e:	2b40      	cmp	r3, #64	@ 0x40
 8015690:	d005      	beq.n	801569e <USBD_StdDevReq+0x26>
 8015692:	2b40      	cmp	r3, #64	@ 0x40
 8015694:	d857      	bhi.n	8015746 <USBD_StdDevReq+0xce>
 8015696:	2b00      	cmp	r3, #0
 8015698:	d00f      	beq.n	80156ba <USBD_StdDevReq+0x42>
 801569a:	2b20      	cmp	r3, #32
 801569c:	d153      	bne.n	8015746 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	32ae      	adds	r2, #174	@ 0xae
 80156a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156ac:	689b      	ldr	r3, [r3, #8]
 80156ae:	6839      	ldr	r1, [r7, #0]
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	4798      	blx	r3
 80156b4:	4603      	mov	r3, r0
 80156b6:	73fb      	strb	r3, [r7, #15]
      break;
 80156b8:	e04a      	b.n	8015750 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	785b      	ldrb	r3, [r3, #1]
 80156be:	2b09      	cmp	r3, #9
 80156c0:	d83b      	bhi.n	801573a <USBD_StdDevReq+0xc2>
 80156c2:	a201      	add	r2, pc, #4	@ (adr r2, 80156c8 <USBD_StdDevReq+0x50>)
 80156c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156c8:	0801571d 	.word	0x0801571d
 80156cc:	08015731 	.word	0x08015731
 80156d0:	0801573b 	.word	0x0801573b
 80156d4:	08015727 	.word	0x08015727
 80156d8:	0801573b 	.word	0x0801573b
 80156dc:	080156fb 	.word	0x080156fb
 80156e0:	080156f1 	.word	0x080156f1
 80156e4:	0801573b 	.word	0x0801573b
 80156e8:	08015713 	.word	0x08015713
 80156ec:	08015705 	.word	0x08015705
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80156f0:	6839      	ldr	r1, [r7, #0]
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f000 fa3c 	bl	8015b70 <USBD_GetDescriptor>
          break;
 80156f8:	e024      	b.n	8015744 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80156fa:	6839      	ldr	r1, [r7, #0]
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f000 fbcb 	bl	8015e98 <USBD_SetAddress>
          break;
 8015702:	e01f      	b.n	8015744 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015704:	6839      	ldr	r1, [r7, #0]
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f000 fc0a 	bl	8015f20 <USBD_SetConfig>
 801570c:	4603      	mov	r3, r0
 801570e:	73fb      	strb	r3, [r7, #15]
          break;
 8015710:	e018      	b.n	8015744 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015712:	6839      	ldr	r1, [r7, #0]
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f000 fcad 	bl	8016074 <USBD_GetConfig>
          break;
 801571a:	e013      	b.n	8015744 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801571c:	6839      	ldr	r1, [r7, #0]
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f000 fcde 	bl	80160e0 <USBD_GetStatus>
          break;
 8015724:	e00e      	b.n	8015744 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015726:	6839      	ldr	r1, [r7, #0]
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f000 fd0d 	bl	8016148 <USBD_SetFeature>
          break;
 801572e:	e009      	b.n	8015744 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015730:	6839      	ldr	r1, [r7, #0]
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f000 fd31 	bl	801619a <USBD_ClrFeature>
          break;
 8015738:	e004      	b.n	8015744 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801573a:	6839      	ldr	r1, [r7, #0]
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f000 fd88 	bl	8016252 <USBD_CtlError>
          break;
 8015742:	bf00      	nop
      }
      break;
 8015744:	e004      	b.n	8015750 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015746:	6839      	ldr	r1, [r7, #0]
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f000 fd82 	bl	8016252 <USBD_CtlError>
      break;
 801574e:	bf00      	nop
  }

  return ret;
 8015750:	7bfb      	ldrb	r3, [r7, #15]
}
 8015752:	4618      	mov	r0, r3
 8015754:	3710      	adds	r7, #16
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}
 801575a:	bf00      	nop

0801575c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b084      	sub	sp, #16
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015766:	2300      	movs	r3, #0
 8015768:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	781b      	ldrb	r3, [r3, #0]
 801576e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015772:	2b40      	cmp	r3, #64	@ 0x40
 8015774:	d005      	beq.n	8015782 <USBD_StdItfReq+0x26>
 8015776:	2b40      	cmp	r3, #64	@ 0x40
 8015778:	d852      	bhi.n	8015820 <USBD_StdItfReq+0xc4>
 801577a:	2b00      	cmp	r3, #0
 801577c:	d001      	beq.n	8015782 <USBD_StdItfReq+0x26>
 801577e:	2b20      	cmp	r3, #32
 8015780:	d14e      	bne.n	8015820 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015788:	b2db      	uxtb	r3, r3
 801578a:	3b01      	subs	r3, #1
 801578c:	2b02      	cmp	r3, #2
 801578e:	d840      	bhi.n	8015812 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	889b      	ldrh	r3, [r3, #4]
 8015794:	b2db      	uxtb	r3, r3
 8015796:	2b01      	cmp	r3, #1
 8015798:	d836      	bhi.n	8015808 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	889b      	ldrh	r3, [r3, #4]
 801579e:	b2db      	uxtb	r3, r3
 80157a0:	4619      	mov	r1, r3
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f7ff fedb 	bl	801555e <USBD_CoreFindIF>
 80157a8:	4603      	mov	r3, r0
 80157aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80157ac:	7bbb      	ldrb	r3, [r7, #14]
 80157ae:	2bff      	cmp	r3, #255	@ 0xff
 80157b0:	d01d      	beq.n	80157ee <USBD_StdItfReq+0x92>
 80157b2:	7bbb      	ldrb	r3, [r7, #14]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d11a      	bne.n	80157ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80157b8:	7bba      	ldrb	r2, [r7, #14]
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	32ae      	adds	r2, #174	@ 0xae
 80157be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157c2:	689b      	ldr	r3, [r3, #8]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d00f      	beq.n	80157e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80157c8:	7bba      	ldrb	r2, [r7, #14]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80157d0:	7bba      	ldrb	r2, [r7, #14]
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	32ae      	adds	r2, #174	@ 0xae
 80157d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157da:	689b      	ldr	r3, [r3, #8]
 80157dc:	6839      	ldr	r1, [r7, #0]
 80157de:	6878      	ldr	r0, [r7, #4]
 80157e0:	4798      	blx	r3
 80157e2:	4603      	mov	r3, r0
 80157e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157e6:	e004      	b.n	80157f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80157e8:	2303      	movs	r3, #3
 80157ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157ec:	e001      	b.n	80157f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80157ee:	2303      	movs	r3, #3
 80157f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	88db      	ldrh	r3, [r3, #6]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d110      	bne.n	801581c <USBD_StdItfReq+0xc0>
 80157fa:	7bfb      	ldrb	r3, [r7, #15]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d10d      	bne.n	801581c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015800:	6878      	ldr	r0, [r7, #4]
 8015802:	f000 fdfd 	bl	8016400 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015806:	e009      	b.n	801581c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015808:	6839      	ldr	r1, [r7, #0]
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f000 fd21 	bl	8016252 <USBD_CtlError>
          break;
 8015810:	e004      	b.n	801581c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015812:	6839      	ldr	r1, [r7, #0]
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f000 fd1c 	bl	8016252 <USBD_CtlError>
          break;
 801581a:	e000      	b.n	801581e <USBD_StdItfReq+0xc2>
          break;
 801581c:	bf00      	nop
      }
      break;
 801581e:	e004      	b.n	801582a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015820:	6839      	ldr	r1, [r7, #0]
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f000 fd15 	bl	8016252 <USBD_CtlError>
      break;
 8015828:	bf00      	nop
  }

  return ret;
 801582a:	7bfb      	ldrb	r3, [r7, #15]
}
 801582c:	4618      	mov	r0, r3
 801582e:	3710      	adds	r7, #16
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}

08015834 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b084      	sub	sp, #16
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
 801583c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801583e:	2300      	movs	r3, #0
 8015840:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	889b      	ldrh	r3, [r3, #4]
 8015846:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015848:	683b      	ldr	r3, [r7, #0]
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015850:	2b40      	cmp	r3, #64	@ 0x40
 8015852:	d007      	beq.n	8015864 <USBD_StdEPReq+0x30>
 8015854:	2b40      	cmp	r3, #64	@ 0x40
 8015856:	f200 817f 	bhi.w	8015b58 <USBD_StdEPReq+0x324>
 801585a:	2b00      	cmp	r3, #0
 801585c:	d02a      	beq.n	80158b4 <USBD_StdEPReq+0x80>
 801585e:	2b20      	cmp	r3, #32
 8015860:	f040 817a 	bne.w	8015b58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015864:	7bbb      	ldrb	r3, [r7, #14]
 8015866:	4619      	mov	r1, r3
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f7ff fe85 	bl	8015578 <USBD_CoreFindEP>
 801586e:	4603      	mov	r3, r0
 8015870:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015872:	7b7b      	ldrb	r3, [r7, #13]
 8015874:	2bff      	cmp	r3, #255	@ 0xff
 8015876:	f000 8174 	beq.w	8015b62 <USBD_StdEPReq+0x32e>
 801587a:	7b7b      	ldrb	r3, [r7, #13]
 801587c:	2b00      	cmp	r3, #0
 801587e:	f040 8170 	bne.w	8015b62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015882:	7b7a      	ldrb	r2, [r7, #13]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801588a:	7b7a      	ldrb	r2, [r7, #13]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	32ae      	adds	r2, #174	@ 0xae
 8015890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015894:	689b      	ldr	r3, [r3, #8]
 8015896:	2b00      	cmp	r3, #0
 8015898:	f000 8163 	beq.w	8015b62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801589c:	7b7a      	ldrb	r2, [r7, #13]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	32ae      	adds	r2, #174	@ 0xae
 80158a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	6839      	ldr	r1, [r7, #0]
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	4798      	blx	r3
 80158ae:	4603      	mov	r3, r0
 80158b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80158b2:	e156      	b.n	8015b62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	785b      	ldrb	r3, [r3, #1]
 80158b8:	2b03      	cmp	r3, #3
 80158ba:	d008      	beq.n	80158ce <USBD_StdEPReq+0x9a>
 80158bc:	2b03      	cmp	r3, #3
 80158be:	f300 8145 	bgt.w	8015b4c <USBD_StdEPReq+0x318>
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	f000 809b 	beq.w	80159fe <USBD_StdEPReq+0x1ca>
 80158c8:	2b01      	cmp	r3, #1
 80158ca:	d03c      	beq.n	8015946 <USBD_StdEPReq+0x112>
 80158cc:	e13e      	b.n	8015b4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80158d4:	b2db      	uxtb	r3, r3
 80158d6:	2b02      	cmp	r3, #2
 80158d8:	d002      	beq.n	80158e0 <USBD_StdEPReq+0xac>
 80158da:	2b03      	cmp	r3, #3
 80158dc:	d016      	beq.n	801590c <USBD_StdEPReq+0xd8>
 80158de:	e02c      	b.n	801593a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80158e0:	7bbb      	ldrb	r3, [r7, #14]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d00d      	beq.n	8015902 <USBD_StdEPReq+0xce>
 80158e6:	7bbb      	ldrb	r3, [r7, #14]
 80158e8:	2b80      	cmp	r3, #128	@ 0x80
 80158ea:	d00a      	beq.n	8015902 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80158ec:	7bbb      	ldrb	r3, [r7, #14]
 80158ee:	4619      	mov	r1, r3
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f001 f9d9 	bl	8016ca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80158f6:	2180      	movs	r1, #128	@ 0x80
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f001 f9d5 	bl	8016ca8 <USBD_LL_StallEP>
 80158fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015900:	e020      	b.n	8015944 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015902:	6839      	ldr	r1, [r7, #0]
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f000 fca4 	bl	8016252 <USBD_CtlError>
              break;
 801590a:	e01b      	b.n	8015944 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	885b      	ldrh	r3, [r3, #2]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d10e      	bne.n	8015932 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015914:	7bbb      	ldrb	r3, [r7, #14]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d00b      	beq.n	8015932 <USBD_StdEPReq+0xfe>
 801591a:	7bbb      	ldrb	r3, [r7, #14]
 801591c:	2b80      	cmp	r3, #128	@ 0x80
 801591e:	d008      	beq.n	8015932 <USBD_StdEPReq+0xfe>
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	88db      	ldrh	r3, [r3, #6]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d104      	bne.n	8015932 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015928:	7bbb      	ldrb	r3, [r7, #14]
 801592a:	4619      	mov	r1, r3
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f001 f9bb 	bl	8016ca8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f000 fd64 	bl	8016400 <USBD_CtlSendStatus>

              break;
 8015938:	e004      	b.n	8015944 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801593a:	6839      	ldr	r1, [r7, #0]
 801593c:	6878      	ldr	r0, [r7, #4]
 801593e:	f000 fc88 	bl	8016252 <USBD_CtlError>
              break;
 8015942:	bf00      	nop
          }
          break;
 8015944:	e107      	b.n	8015b56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801594c:	b2db      	uxtb	r3, r3
 801594e:	2b02      	cmp	r3, #2
 8015950:	d002      	beq.n	8015958 <USBD_StdEPReq+0x124>
 8015952:	2b03      	cmp	r3, #3
 8015954:	d016      	beq.n	8015984 <USBD_StdEPReq+0x150>
 8015956:	e04b      	b.n	80159f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015958:	7bbb      	ldrb	r3, [r7, #14]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d00d      	beq.n	801597a <USBD_StdEPReq+0x146>
 801595e:	7bbb      	ldrb	r3, [r7, #14]
 8015960:	2b80      	cmp	r3, #128	@ 0x80
 8015962:	d00a      	beq.n	801597a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015964:	7bbb      	ldrb	r3, [r7, #14]
 8015966:	4619      	mov	r1, r3
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f001 f99d 	bl	8016ca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801596e:	2180      	movs	r1, #128	@ 0x80
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f001 f999 	bl	8016ca8 <USBD_LL_StallEP>
 8015976:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015978:	e040      	b.n	80159fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801597a:	6839      	ldr	r1, [r7, #0]
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f000 fc68 	bl	8016252 <USBD_CtlError>
              break;
 8015982:	e03b      	b.n	80159fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	885b      	ldrh	r3, [r3, #2]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d136      	bne.n	80159fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801598c:	7bbb      	ldrb	r3, [r7, #14]
 801598e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015992:	2b00      	cmp	r3, #0
 8015994:	d004      	beq.n	80159a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015996:	7bbb      	ldrb	r3, [r7, #14]
 8015998:	4619      	mov	r1, r3
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f001 f9a3 	bl	8016ce6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80159a0:	6878      	ldr	r0, [r7, #4]
 80159a2:	f000 fd2d 	bl	8016400 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80159a6:	7bbb      	ldrb	r3, [r7, #14]
 80159a8:	4619      	mov	r1, r3
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	f7ff fde4 	bl	8015578 <USBD_CoreFindEP>
 80159b0:	4603      	mov	r3, r0
 80159b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80159b4:	7b7b      	ldrb	r3, [r7, #13]
 80159b6:	2bff      	cmp	r3, #255	@ 0xff
 80159b8:	d01f      	beq.n	80159fa <USBD_StdEPReq+0x1c6>
 80159ba:	7b7b      	ldrb	r3, [r7, #13]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d11c      	bne.n	80159fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80159c0:	7b7a      	ldrb	r2, [r7, #13]
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80159c8:	7b7a      	ldrb	r2, [r7, #13]
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	32ae      	adds	r2, #174	@ 0xae
 80159ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159d2:	689b      	ldr	r3, [r3, #8]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d010      	beq.n	80159fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80159d8:	7b7a      	ldrb	r2, [r7, #13]
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	32ae      	adds	r2, #174	@ 0xae
 80159de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159e2:	689b      	ldr	r3, [r3, #8]
 80159e4:	6839      	ldr	r1, [r7, #0]
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	4798      	blx	r3
 80159ea:	4603      	mov	r3, r0
 80159ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80159ee:	e004      	b.n	80159fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80159f0:	6839      	ldr	r1, [r7, #0]
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f000 fc2d 	bl	8016252 <USBD_CtlError>
              break;
 80159f8:	e000      	b.n	80159fc <USBD_StdEPReq+0x1c8>
              break;
 80159fa:	bf00      	nop
          }
          break;
 80159fc:	e0ab      	b.n	8015b56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a04:	b2db      	uxtb	r3, r3
 8015a06:	2b02      	cmp	r3, #2
 8015a08:	d002      	beq.n	8015a10 <USBD_StdEPReq+0x1dc>
 8015a0a:	2b03      	cmp	r3, #3
 8015a0c:	d032      	beq.n	8015a74 <USBD_StdEPReq+0x240>
 8015a0e:	e097      	b.n	8015b40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a10:	7bbb      	ldrb	r3, [r7, #14]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d007      	beq.n	8015a26 <USBD_StdEPReq+0x1f2>
 8015a16:	7bbb      	ldrb	r3, [r7, #14]
 8015a18:	2b80      	cmp	r3, #128	@ 0x80
 8015a1a:	d004      	beq.n	8015a26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015a1c:	6839      	ldr	r1, [r7, #0]
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f000 fc17 	bl	8016252 <USBD_CtlError>
                break;
 8015a24:	e091      	b.n	8015b4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	da0b      	bge.n	8015a46 <USBD_StdEPReq+0x212>
 8015a2e:	7bbb      	ldrb	r3, [r7, #14]
 8015a30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015a34:	4613      	mov	r3, r2
 8015a36:	009b      	lsls	r3, r3, #2
 8015a38:	4413      	add	r3, r2
 8015a3a:	009b      	lsls	r3, r3, #2
 8015a3c:	3310      	adds	r3, #16
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	4413      	add	r3, r2
 8015a42:	3304      	adds	r3, #4
 8015a44:	e00b      	b.n	8015a5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015a46:	7bbb      	ldrb	r3, [r7, #14]
 8015a48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a4c:	4613      	mov	r3, r2
 8015a4e:	009b      	lsls	r3, r3, #2
 8015a50:	4413      	add	r3, r2
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015a58:	687a      	ldr	r2, [r7, #4]
 8015a5a:	4413      	add	r3, r2
 8015a5c:	3304      	adds	r3, #4
 8015a5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	2200      	movs	r2, #0
 8015a64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	2202      	movs	r2, #2
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	f000 fc6d 	bl	801634c <USBD_CtlSendData>
              break;
 8015a72:	e06a      	b.n	8015b4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	da11      	bge.n	8015aa0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015a7c:	7bbb      	ldrb	r3, [r7, #14]
 8015a7e:	f003 020f 	and.w	r2, r3, #15
 8015a82:	6879      	ldr	r1, [r7, #4]
 8015a84:	4613      	mov	r3, r2
 8015a86:	009b      	lsls	r3, r3, #2
 8015a88:	4413      	add	r3, r2
 8015a8a:	009b      	lsls	r3, r3, #2
 8015a8c:	440b      	add	r3, r1
 8015a8e:	3324      	adds	r3, #36	@ 0x24
 8015a90:	881b      	ldrh	r3, [r3, #0]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d117      	bne.n	8015ac6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a96:	6839      	ldr	r1, [r7, #0]
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f000 fbda 	bl	8016252 <USBD_CtlError>
                  break;
 8015a9e:	e054      	b.n	8015b4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015aa0:	7bbb      	ldrb	r3, [r7, #14]
 8015aa2:	f003 020f 	and.w	r2, r3, #15
 8015aa6:	6879      	ldr	r1, [r7, #4]
 8015aa8:	4613      	mov	r3, r2
 8015aaa:	009b      	lsls	r3, r3, #2
 8015aac:	4413      	add	r3, r2
 8015aae:	009b      	lsls	r3, r3, #2
 8015ab0:	440b      	add	r3, r1
 8015ab2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015ab6:	881b      	ldrh	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d104      	bne.n	8015ac6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015abc:	6839      	ldr	r1, [r7, #0]
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f000 fbc7 	bl	8016252 <USBD_CtlError>
                  break;
 8015ac4:	e041      	b.n	8015b4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	da0b      	bge.n	8015ae6 <USBD_StdEPReq+0x2b2>
 8015ace:	7bbb      	ldrb	r3, [r7, #14]
 8015ad0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015ad4:	4613      	mov	r3, r2
 8015ad6:	009b      	lsls	r3, r3, #2
 8015ad8:	4413      	add	r3, r2
 8015ada:	009b      	lsls	r3, r3, #2
 8015adc:	3310      	adds	r3, #16
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	3304      	adds	r3, #4
 8015ae4:	e00b      	b.n	8015afe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015ae6:	7bbb      	ldrb	r3, [r7, #14]
 8015ae8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015aec:	4613      	mov	r3, r2
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	4413      	add	r3, r2
 8015af2:	009b      	lsls	r3, r3, #2
 8015af4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015af8:	687a      	ldr	r2, [r7, #4]
 8015afa:	4413      	add	r3, r2
 8015afc:	3304      	adds	r3, #4
 8015afe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015b00:	7bbb      	ldrb	r3, [r7, #14]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d002      	beq.n	8015b0c <USBD_StdEPReq+0x2d8>
 8015b06:	7bbb      	ldrb	r3, [r7, #14]
 8015b08:	2b80      	cmp	r3, #128	@ 0x80
 8015b0a:	d103      	bne.n	8015b14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	2200      	movs	r2, #0
 8015b10:	601a      	str	r2, [r3, #0]
 8015b12:	e00e      	b.n	8015b32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015b14:	7bbb      	ldrb	r3, [r7, #14]
 8015b16:	4619      	mov	r1, r3
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f001 f903 	bl	8016d24 <USBD_LL_IsStallEP>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d003      	beq.n	8015b2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	2201      	movs	r2, #1
 8015b28:	601a      	str	r2, [r3, #0]
 8015b2a:	e002      	b.n	8015b32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015b2c:	68bb      	ldr	r3, [r7, #8]
 8015b2e:	2200      	movs	r2, #0
 8015b30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	2202      	movs	r2, #2
 8015b36:	4619      	mov	r1, r3
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f000 fc07 	bl	801634c <USBD_CtlSendData>
              break;
 8015b3e:	e004      	b.n	8015b4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015b40:	6839      	ldr	r1, [r7, #0]
 8015b42:	6878      	ldr	r0, [r7, #4]
 8015b44:	f000 fb85 	bl	8016252 <USBD_CtlError>
              break;
 8015b48:	bf00      	nop
          }
          break;
 8015b4a:	e004      	b.n	8015b56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015b4c:	6839      	ldr	r1, [r7, #0]
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f000 fb7f 	bl	8016252 <USBD_CtlError>
          break;
 8015b54:	bf00      	nop
      }
      break;
 8015b56:	e005      	b.n	8015b64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015b58:	6839      	ldr	r1, [r7, #0]
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f000 fb79 	bl	8016252 <USBD_CtlError>
      break;
 8015b60:	e000      	b.n	8015b64 <USBD_StdEPReq+0x330>
      break;
 8015b62:	bf00      	nop
  }

  return ret;
 8015b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3710      	adds	r7, #16
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}
	...

08015b70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b084      	sub	sp, #16
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015b82:	2300      	movs	r3, #0
 8015b84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	885b      	ldrh	r3, [r3, #2]
 8015b8a:	0a1b      	lsrs	r3, r3, #8
 8015b8c:	b29b      	uxth	r3, r3
 8015b8e:	3b01      	subs	r3, #1
 8015b90:	2b0e      	cmp	r3, #14
 8015b92:	f200 8152 	bhi.w	8015e3a <USBD_GetDescriptor+0x2ca>
 8015b96:	a201      	add	r2, pc, #4	@ (adr r2, 8015b9c <USBD_GetDescriptor+0x2c>)
 8015b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b9c:	08015c0d 	.word	0x08015c0d
 8015ba0:	08015c25 	.word	0x08015c25
 8015ba4:	08015c65 	.word	0x08015c65
 8015ba8:	08015e3b 	.word	0x08015e3b
 8015bac:	08015e3b 	.word	0x08015e3b
 8015bb0:	08015ddb 	.word	0x08015ddb
 8015bb4:	08015e07 	.word	0x08015e07
 8015bb8:	08015e3b 	.word	0x08015e3b
 8015bbc:	08015e3b 	.word	0x08015e3b
 8015bc0:	08015e3b 	.word	0x08015e3b
 8015bc4:	08015e3b 	.word	0x08015e3b
 8015bc8:	08015e3b 	.word	0x08015e3b
 8015bcc:	08015e3b 	.word	0x08015e3b
 8015bd0:	08015e3b 	.word	0x08015e3b
 8015bd4:	08015bd9 	.word	0x08015bd9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015bde:	69db      	ldr	r3, [r3, #28]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d00b      	beq.n	8015bfc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015bea:	69db      	ldr	r3, [r3, #28]
 8015bec:	687a      	ldr	r2, [r7, #4]
 8015bee:	7c12      	ldrb	r2, [r2, #16]
 8015bf0:	f107 0108 	add.w	r1, r7, #8
 8015bf4:	4610      	mov	r0, r2
 8015bf6:	4798      	blx	r3
 8015bf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015bfa:	e126      	b.n	8015e4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015bfc:	6839      	ldr	r1, [r7, #0]
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f000 fb27 	bl	8016252 <USBD_CtlError>
        err++;
 8015c04:	7afb      	ldrb	r3, [r7, #11]
 8015c06:	3301      	adds	r3, #1
 8015c08:	72fb      	strb	r3, [r7, #11]
      break;
 8015c0a:	e11e      	b.n	8015e4a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	687a      	ldr	r2, [r7, #4]
 8015c16:	7c12      	ldrb	r2, [r2, #16]
 8015c18:	f107 0108 	add.w	r1, r7, #8
 8015c1c:	4610      	mov	r0, r2
 8015c1e:	4798      	blx	r3
 8015c20:	60f8      	str	r0, [r7, #12]
      break;
 8015c22:	e112      	b.n	8015e4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	7c1b      	ldrb	r3, [r3, #16]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d10d      	bne.n	8015c48 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c34:	f107 0208 	add.w	r2, r7, #8
 8015c38:	4610      	mov	r0, r2
 8015c3a:	4798      	blx	r3
 8015c3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	3301      	adds	r3, #1
 8015c42:	2202      	movs	r2, #2
 8015c44:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015c46:	e100      	b.n	8015e4a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c50:	f107 0208 	add.w	r2, r7, #8
 8015c54:	4610      	mov	r0, r2
 8015c56:	4798      	blx	r3
 8015c58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	3301      	adds	r3, #1
 8015c5e:	2202      	movs	r2, #2
 8015c60:	701a      	strb	r2, [r3, #0]
      break;
 8015c62:	e0f2      	b.n	8015e4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	885b      	ldrh	r3, [r3, #2]
 8015c68:	b2db      	uxtb	r3, r3
 8015c6a:	2b05      	cmp	r3, #5
 8015c6c:	f200 80ac 	bhi.w	8015dc8 <USBD_GetDescriptor+0x258>
 8015c70:	a201      	add	r2, pc, #4	@ (adr r2, 8015c78 <USBD_GetDescriptor+0x108>)
 8015c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c76:	bf00      	nop
 8015c78:	08015c91 	.word	0x08015c91
 8015c7c:	08015cc5 	.word	0x08015cc5
 8015c80:	08015cf9 	.word	0x08015cf9
 8015c84:	08015d2d 	.word	0x08015d2d
 8015c88:	08015d61 	.word	0x08015d61
 8015c8c:	08015d95 	.word	0x08015d95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d00b      	beq.n	8015cb4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	687a      	ldr	r2, [r7, #4]
 8015ca6:	7c12      	ldrb	r2, [r2, #16]
 8015ca8:	f107 0108 	add.w	r1, r7, #8
 8015cac:	4610      	mov	r0, r2
 8015cae:	4798      	blx	r3
 8015cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cb2:	e091      	b.n	8015dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015cb4:	6839      	ldr	r1, [r7, #0]
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f000 facb 	bl	8016252 <USBD_CtlError>
            err++;
 8015cbc:	7afb      	ldrb	r3, [r7, #11]
 8015cbe:	3301      	adds	r3, #1
 8015cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8015cc2:	e089      	b.n	8015dd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015cca:	689b      	ldr	r3, [r3, #8]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d00b      	beq.n	8015ce8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015cd6:	689b      	ldr	r3, [r3, #8]
 8015cd8:	687a      	ldr	r2, [r7, #4]
 8015cda:	7c12      	ldrb	r2, [r2, #16]
 8015cdc:	f107 0108 	add.w	r1, r7, #8
 8015ce0:	4610      	mov	r0, r2
 8015ce2:	4798      	blx	r3
 8015ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ce6:	e077      	b.n	8015dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015ce8:	6839      	ldr	r1, [r7, #0]
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f000 fab1 	bl	8016252 <USBD_CtlError>
            err++;
 8015cf0:	7afb      	ldrb	r3, [r7, #11]
 8015cf2:	3301      	adds	r3, #1
 8015cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8015cf6:	e06f      	b.n	8015dd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015cfe:	68db      	ldr	r3, [r3, #12]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d00b      	beq.n	8015d1c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015d0a:	68db      	ldr	r3, [r3, #12]
 8015d0c:	687a      	ldr	r2, [r7, #4]
 8015d0e:	7c12      	ldrb	r2, [r2, #16]
 8015d10:	f107 0108 	add.w	r1, r7, #8
 8015d14:	4610      	mov	r0, r2
 8015d16:	4798      	blx	r3
 8015d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d1a:	e05d      	b.n	8015dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015d1c:	6839      	ldr	r1, [r7, #0]
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f000 fa97 	bl	8016252 <USBD_CtlError>
            err++;
 8015d24:	7afb      	ldrb	r3, [r7, #11]
 8015d26:	3301      	adds	r3, #1
 8015d28:	72fb      	strb	r3, [r7, #11]
          break;
 8015d2a:	e055      	b.n	8015dd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015d32:	691b      	ldr	r3, [r3, #16]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d00b      	beq.n	8015d50 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015d3e:	691b      	ldr	r3, [r3, #16]
 8015d40:	687a      	ldr	r2, [r7, #4]
 8015d42:	7c12      	ldrb	r2, [r2, #16]
 8015d44:	f107 0108 	add.w	r1, r7, #8
 8015d48:	4610      	mov	r0, r2
 8015d4a:	4798      	blx	r3
 8015d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d4e:	e043      	b.n	8015dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015d50:	6839      	ldr	r1, [r7, #0]
 8015d52:	6878      	ldr	r0, [r7, #4]
 8015d54:	f000 fa7d 	bl	8016252 <USBD_CtlError>
            err++;
 8015d58:	7afb      	ldrb	r3, [r7, #11]
 8015d5a:	3301      	adds	r3, #1
 8015d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8015d5e:	e03b      	b.n	8015dd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015d66:	695b      	ldr	r3, [r3, #20]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d00b      	beq.n	8015d84 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015d72:	695b      	ldr	r3, [r3, #20]
 8015d74:	687a      	ldr	r2, [r7, #4]
 8015d76:	7c12      	ldrb	r2, [r2, #16]
 8015d78:	f107 0108 	add.w	r1, r7, #8
 8015d7c:	4610      	mov	r0, r2
 8015d7e:	4798      	blx	r3
 8015d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d82:	e029      	b.n	8015dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015d84:	6839      	ldr	r1, [r7, #0]
 8015d86:	6878      	ldr	r0, [r7, #4]
 8015d88:	f000 fa63 	bl	8016252 <USBD_CtlError>
            err++;
 8015d8c:	7afb      	ldrb	r3, [r7, #11]
 8015d8e:	3301      	adds	r3, #1
 8015d90:	72fb      	strb	r3, [r7, #11]
          break;
 8015d92:	e021      	b.n	8015dd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015d9a:	699b      	ldr	r3, [r3, #24]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d00b      	beq.n	8015db8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015da6:	699b      	ldr	r3, [r3, #24]
 8015da8:	687a      	ldr	r2, [r7, #4]
 8015daa:	7c12      	ldrb	r2, [r2, #16]
 8015dac:	f107 0108 	add.w	r1, r7, #8
 8015db0:	4610      	mov	r0, r2
 8015db2:	4798      	blx	r3
 8015db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015db6:	e00f      	b.n	8015dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015db8:	6839      	ldr	r1, [r7, #0]
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f000 fa49 	bl	8016252 <USBD_CtlError>
            err++;
 8015dc0:	7afb      	ldrb	r3, [r7, #11]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8015dc6:	e007      	b.n	8015dd8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015dc8:	6839      	ldr	r1, [r7, #0]
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f000 fa41 	bl	8016252 <USBD_CtlError>
          err++;
 8015dd0:	7afb      	ldrb	r3, [r7, #11]
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015dd6:	bf00      	nop
      }
      break;
 8015dd8:	e037      	b.n	8015e4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	7c1b      	ldrb	r3, [r3, #16]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d109      	bne.n	8015df6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015dea:	f107 0208 	add.w	r2, r7, #8
 8015dee:	4610      	mov	r0, r2
 8015df0:	4798      	blx	r3
 8015df2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015df4:	e029      	b.n	8015e4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015df6:	6839      	ldr	r1, [r7, #0]
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f000 fa2a 	bl	8016252 <USBD_CtlError>
        err++;
 8015dfe:	7afb      	ldrb	r3, [r7, #11]
 8015e00:	3301      	adds	r3, #1
 8015e02:	72fb      	strb	r3, [r7, #11]
      break;
 8015e04:	e021      	b.n	8015e4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	7c1b      	ldrb	r3, [r3, #16]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d10d      	bne.n	8015e2a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015e16:	f107 0208 	add.w	r2, r7, #8
 8015e1a:	4610      	mov	r0, r2
 8015e1c:	4798      	blx	r3
 8015e1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	3301      	adds	r3, #1
 8015e24:	2207      	movs	r2, #7
 8015e26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e28:	e00f      	b.n	8015e4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015e2a:	6839      	ldr	r1, [r7, #0]
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f000 fa10 	bl	8016252 <USBD_CtlError>
        err++;
 8015e32:	7afb      	ldrb	r3, [r7, #11]
 8015e34:	3301      	adds	r3, #1
 8015e36:	72fb      	strb	r3, [r7, #11]
      break;
 8015e38:	e007      	b.n	8015e4a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015e3a:	6839      	ldr	r1, [r7, #0]
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f000 fa08 	bl	8016252 <USBD_CtlError>
      err++;
 8015e42:	7afb      	ldrb	r3, [r7, #11]
 8015e44:	3301      	adds	r3, #1
 8015e46:	72fb      	strb	r3, [r7, #11]
      break;
 8015e48:	bf00      	nop
  }

  if (err != 0U)
 8015e4a:	7afb      	ldrb	r3, [r7, #11]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d11e      	bne.n	8015e8e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	88db      	ldrh	r3, [r3, #6]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d016      	beq.n	8015e86 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015e58:	893b      	ldrh	r3, [r7, #8]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d00e      	beq.n	8015e7c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	88da      	ldrh	r2, [r3, #6]
 8015e62:	893b      	ldrh	r3, [r7, #8]
 8015e64:	4293      	cmp	r3, r2
 8015e66:	bf28      	it	cs
 8015e68:	4613      	movcs	r3, r2
 8015e6a:	b29b      	uxth	r3, r3
 8015e6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015e6e:	893b      	ldrh	r3, [r7, #8]
 8015e70:	461a      	mov	r2, r3
 8015e72:	68f9      	ldr	r1, [r7, #12]
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f000 fa69 	bl	801634c <USBD_CtlSendData>
 8015e7a:	e009      	b.n	8015e90 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015e7c:	6839      	ldr	r1, [r7, #0]
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f000 f9e7 	bl	8016252 <USBD_CtlError>
 8015e84:	e004      	b.n	8015e90 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 faba 	bl	8016400 <USBD_CtlSendStatus>
 8015e8c:	e000      	b.n	8015e90 <USBD_GetDescriptor+0x320>
    return;
 8015e8e:	bf00      	nop
  }
}
 8015e90:	3710      	adds	r7, #16
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}
 8015e96:	bf00      	nop

08015e98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b084      	sub	sp, #16
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
 8015ea0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	889b      	ldrh	r3, [r3, #4]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d131      	bne.n	8015f0e <USBD_SetAddress+0x76>
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	88db      	ldrh	r3, [r3, #6]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d12d      	bne.n	8015f0e <USBD_SetAddress+0x76>
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	885b      	ldrh	r3, [r3, #2]
 8015eb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8015eb8:	d829      	bhi.n	8015f0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	885b      	ldrh	r3, [r3, #2]
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015ec4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015ecc:	b2db      	uxtb	r3, r3
 8015ece:	2b03      	cmp	r3, #3
 8015ed0:	d104      	bne.n	8015edc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015ed2:	6839      	ldr	r1, [r7, #0]
 8015ed4:	6878      	ldr	r0, [r7, #4]
 8015ed6:	f000 f9bc 	bl	8016252 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015eda:	e01d      	b.n	8015f18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	7bfa      	ldrb	r2, [r7, #15]
 8015ee0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015ee4:	7bfb      	ldrb	r3, [r7, #15]
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f000 ff47 	bl	8016d7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f000 fa86 	bl	8016400 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015ef4:	7bfb      	ldrb	r3, [r7, #15]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d004      	beq.n	8015f04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2202      	movs	r2, #2
 8015efe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f02:	e009      	b.n	8015f18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	2201      	movs	r2, #1
 8015f08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f0c:	e004      	b.n	8015f18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015f0e:	6839      	ldr	r1, [r7, #0]
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f000 f99e 	bl	8016252 <USBD_CtlError>
  }
}
 8015f16:	bf00      	nop
 8015f18:	bf00      	nop
 8015f1a:	3710      	adds	r7, #16
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd80      	pop	{r7, pc}

08015f20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b084      	sub	sp, #16
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
 8015f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	885b      	ldrh	r3, [r3, #2]
 8015f32:	b2da      	uxtb	r2, r3
 8015f34:	4b4e      	ldr	r3, [pc, #312]	@ (8016070 <USBD_SetConfig+0x150>)
 8015f36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015f38:	4b4d      	ldr	r3, [pc, #308]	@ (8016070 <USBD_SetConfig+0x150>)
 8015f3a:	781b      	ldrb	r3, [r3, #0]
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	d905      	bls.n	8015f4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015f40:	6839      	ldr	r1, [r7, #0]
 8015f42:	6878      	ldr	r0, [r7, #4]
 8015f44:	f000 f985 	bl	8016252 <USBD_CtlError>
    return USBD_FAIL;
 8015f48:	2303      	movs	r3, #3
 8015f4a:	e08c      	b.n	8016066 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f52:	b2db      	uxtb	r3, r3
 8015f54:	2b02      	cmp	r3, #2
 8015f56:	d002      	beq.n	8015f5e <USBD_SetConfig+0x3e>
 8015f58:	2b03      	cmp	r3, #3
 8015f5a:	d029      	beq.n	8015fb0 <USBD_SetConfig+0x90>
 8015f5c:	e075      	b.n	801604a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015f5e:	4b44      	ldr	r3, [pc, #272]	@ (8016070 <USBD_SetConfig+0x150>)
 8015f60:	781b      	ldrb	r3, [r3, #0]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d020      	beq.n	8015fa8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015f66:	4b42      	ldr	r3, [pc, #264]	@ (8016070 <USBD_SetConfig+0x150>)
 8015f68:	781b      	ldrb	r3, [r3, #0]
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f70:	4b3f      	ldr	r3, [pc, #252]	@ (8016070 <USBD_SetConfig+0x150>)
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	4619      	mov	r1, r3
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f7fe ffb9 	bl	8014eee <USBD_SetClassConfig>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015f80:	7bfb      	ldrb	r3, [r7, #15]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d008      	beq.n	8015f98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015f86:	6839      	ldr	r1, [r7, #0]
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f000 f962 	bl	8016252 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	2202      	movs	r2, #2
 8015f92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f96:	e065      	b.n	8016064 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015f98:	6878      	ldr	r0, [r7, #4]
 8015f9a:	f000 fa31 	bl	8016400 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2203      	movs	r2, #3
 8015fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015fa6:	e05d      	b.n	8016064 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	f000 fa29 	bl	8016400 <USBD_CtlSendStatus>
      break;
 8015fae:	e059      	b.n	8016064 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8016070 <USBD_SetConfig+0x150>)
 8015fb2:	781b      	ldrb	r3, [r3, #0]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d112      	bne.n	8015fde <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2202      	movs	r2, #2
 8015fbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8015fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8016070 <USBD_SetConfig+0x150>)
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	461a      	mov	r2, r3
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015fca:	4b29      	ldr	r3, [pc, #164]	@ (8016070 <USBD_SetConfig+0x150>)
 8015fcc:	781b      	ldrb	r3, [r3, #0]
 8015fce:	4619      	mov	r1, r3
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f7fe ffa8 	bl	8014f26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015fd6:	6878      	ldr	r0, [r7, #4]
 8015fd8:	f000 fa12 	bl	8016400 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015fdc:	e042      	b.n	8016064 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015fde:	4b24      	ldr	r3, [pc, #144]	@ (8016070 <USBD_SetConfig+0x150>)
 8015fe0:	781b      	ldrb	r3, [r3, #0]
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	d02a      	beq.n	8016042 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	685b      	ldr	r3, [r3, #4]
 8015ff0:	b2db      	uxtb	r3, r3
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f7fe ff96 	bl	8014f26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8016070 <USBD_SetConfig+0x150>)
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	461a      	mov	r2, r3
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016004:	4b1a      	ldr	r3, [pc, #104]	@ (8016070 <USBD_SetConfig+0x150>)
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	4619      	mov	r1, r3
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7fe ff6f 	bl	8014eee <USBD_SetClassConfig>
 8016010:	4603      	mov	r3, r0
 8016012:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016014:	7bfb      	ldrb	r3, [r7, #15]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d00f      	beq.n	801603a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801601a:	6839      	ldr	r1, [r7, #0]
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	f000 f918 	bl	8016252 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	685b      	ldr	r3, [r3, #4]
 8016026:	b2db      	uxtb	r3, r3
 8016028:	4619      	mov	r1, r3
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f7fe ff7b 	bl	8014f26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2202      	movs	r2, #2
 8016034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8016038:	e014      	b.n	8016064 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801603a:	6878      	ldr	r0, [r7, #4]
 801603c:	f000 f9e0 	bl	8016400 <USBD_CtlSendStatus>
      break;
 8016040:	e010      	b.n	8016064 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	f000 f9dc 	bl	8016400 <USBD_CtlSendStatus>
      break;
 8016048:	e00c      	b.n	8016064 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801604a:	6839      	ldr	r1, [r7, #0]
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f000 f900 	bl	8016252 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016052:	4b07      	ldr	r3, [pc, #28]	@ (8016070 <USBD_SetConfig+0x150>)
 8016054:	781b      	ldrb	r3, [r3, #0]
 8016056:	4619      	mov	r1, r3
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f7fe ff64 	bl	8014f26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801605e:	2303      	movs	r3, #3
 8016060:	73fb      	strb	r3, [r7, #15]
      break;
 8016062:	bf00      	nop
  }

  return ret;
 8016064:	7bfb      	ldrb	r3, [r7, #15]
}
 8016066:	4618      	mov	r0, r3
 8016068:	3710      	adds	r7, #16
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	2402678c 	.word	0x2402678c

08016074 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
 801607c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801607e:	683b      	ldr	r3, [r7, #0]
 8016080:	88db      	ldrh	r3, [r3, #6]
 8016082:	2b01      	cmp	r3, #1
 8016084:	d004      	beq.n	8016090 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016086:	6839      	ldr	r1, [r7, #0]
 8016088:	6878      	ldr	r0, [r7, #4]
 801608a:	f000 f8e2 	bl	8016252 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801608e:	e023      	b.n	80160d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016096:	b2db      	uxtb	r3, r3
 8016098:	2b02      	cmp	r3, #2
 801609a:	dc02      	bgt.n	80160a2 <USBD_GetConfig+0x2e>
 801609c:	2b00      	cmp	r3, #0
 801609e:	dc03      	bgt.n	80160a8 <USBD_GetConfig+0x34>
 80160a0:	e015      	b.n	80160ce <USBD_GetConfig+0x5a>
 80160a2:	2b03      	cmp	r3, #3
 80160a4:	d00b      	beq.n	80160be <USBD_GetConfig+0x4a>
 80160a6:	e012      	b.n	80160ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2200      	movs	r2, #0
 80160ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	3308      	adds	r3, #8
 80160b2:	2201      	movs	r2, #1
 80160b4:	4619      	mov	r1, r3
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f000 f948 	bl	801634c <USBD_CtlSendData>
        break;
 80160bc:	e00c      	b.n	80160d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	3304      	adds	r3, #4
 80160c2:	2201      	movs	r2, #1
 80160c4:	4619      	mov	r1, r3
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f000 f940 	bl	801634c <USBD_CtlSendData>
        break;
 80160cc:	e004      	b.n	80160d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80160ce:	6839      	ldr	r1, [r7, #0]
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f000 f8be 	bl	8016252 <USBD_CtlError>
        break;
 80160d6:	bf00      	nop
}
 80160d8:	bf00      	nop
 80160da:	3708      	adds	r7, #8
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
 80160e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80160f0:	b2db      	uxtb	r3, r3
 80160f2:	3b01      	subs	r3, #1
 80160f4:	2b02      	cmp	r3, #2
 80160f6:	d81e      	bhi.n	8016136 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	88db      	ldrh	r3, [r3, #6]
 80160fc:	2b02      	cmp	r3, #2
 80160fe:	d004      	beq.n	801610a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016100:	6839      	ldr	r1, [r7, #0]
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f000 f8a5 	bl	8016252 <USBD_CtlError>
        break;
 8016108:	e01a      	b.n	8016140 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2201      	movs	r2, #1
 801610e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8016116:	2b00      	cmp	r3, #0
 8016118:	d005      	beq.n	8016126 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	68db      	ldr	r3, [r3, #12]
 801611e:	f043 0202 	orr.w	r2, r3, #2
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	330c      	adds	r3, #12
 801612a:	2202      	movs	r2, #2
 801612c:	4619      	mov	r1, r3
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f000 f90c 	bl	801634c <USBD_CtlSendData>
      break;
 8016134:	e004      	b.n	8016140 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016136:	6839      	ldr	r1, [r7, #0]
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f000 f88a 	bl	8016252 <USBD_CtlError>
      break;
 801613e:	bf00      	nop
  }
}
 8016140:	bf00      	nop
 8016142:	3708      	adds	r7, #8
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b082      	sub	sp, #8
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	885b      	ldrh	r3, [r3, #2]
 8016156:	2b01      	cmp	r3, #1
 8016158:	d107      	bne.n	801616a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	2201      	movs	r2, #1
 801615e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f000 f94c 	bl	8016400 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016168:	e013      	b.n	8016192 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	885b      	ldrh	r3, [r3, #2]
 801616e:	2b02      	cmp	r3, #2
 8016170:	d10b      	bne.n	801618a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	889b      	ldrh	r3, [r3, #4]
 8016176:	0a1b      	lsrs	r3, r3, #8
 8016178:	b29b      	uxth	r3, r3
 801617a:	b2da      	uxtb	r2, r3
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	f000 f93c 	bl	8016400 <USBD_CtlSendStatus>
}
 8016188:	e003      	b.n	8016192 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801618a:	6839      	ldr	r1, [r7, #0]
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f000 f860 	bl	8016252 <USBD_CtlError>
}
 8016192:	bf00      	nop
 8016194:	3708      	adds	r7, #8
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}

0801619a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801619a:	b580      	push	{r7, lr}
 801619c:	b082      	sub	sp, #8
 801619e:	af00      	add	r7, sp, #0
 80161a0:	6078      	str	r0, [r7, #4]
 80161a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80161aa:	b2db      	uxtb	r3, r3
 80161ac:	3b01      	subs	r3, #1
 80161ae:	2b02      	cmp	r3, #2
 80161b0:	d80b      	bhi.n	80161ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	885b      	ldrh	r3, [r3, #2]
 80161b6:	2b01      	cmp	r3, #1
 80161b8:	d10c      	bne.n	80161d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	2200      	movs	r2, #0
 80161be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80161c2:	6878      	ldr	r0, [r7, #4]
 80161c4:	f000 f91c 	bl	8016400 <USBD_CtlSendStatus>
      }
      break;
 80161c8:	e004      	b.n	80161d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80161ca:	6839      	ldr	r1, [r7, #0]
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f000 f840 	bl	8016252 <USBD_CtlError>
      break;
 80161d2:	e000      	b.n	80161d6 <USBD_ClrFeature+0x3c>
      break;
 80161d4:	bf00      	nop
  }
}
 80161d6:	bf00      	nop
 80161d8:	3708      	adds	r7, #8
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}

080161de <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80161de:	b580      	push	{r7, lr}
 80161e0:	b084      	sub	sp, #16
 80161e2:	af00      	add	r7, sp, #0
 80161e4:	6078      	str	r0, [r7, #4]
 80161e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	781a      	ldrb	r2, [r3, #0]
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	3301      	adds	r3, #1
 80161f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	781a      	ldrb	r2, [r3, #0]
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	3301      	adds	r3, #1
 8016206:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016208:	68f8      	ldr	r0, [r7, #12]
 801620a:	f7ff fa16 	bl	801563a <SWAPBYTE>
 801620e:	4603      	mov	r3, r0
 8016210:	461a      	mov	r2, r3
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	3301      	adds	r3, #1
 801621a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	3301      	adds	r3, #1
 8016220:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016222:	68f8      	ldr	r0, [r7, #12]
 8016224:	f7ff fa09 	bl	801563a <SWAPBYTE>
 8016228:	4603      	mov	r3, r0
 801622a:	461a      	mov	r2, r3
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	3301      	adds	r3, #1
 8016234:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	3301      	adds	r3, #1
 801623a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801623c:	68f8      	ldr	r0, [r7, #12]
 801623e:	f7ff f9fc 	bl	801563a <SWAPBYTE>
 8016242:	4603      	mov	r3, r0
 8016244:	461a      	mov	r2, r3
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	80da      	strh	r2, [r3, #6]
}
 801624a:	bf00      	nop
 801624c:	3710      	adds	r7, #16
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}

08016252 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016252:	b580      	push	{r7, lr}
 8016254:	b082      	sub	sp, #8
 8016256:	af00      	add	r7, sp, #0
 8016258:	6078      	str	r0, [r7, #4]
 801625a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801625c:	2180      	movs	r1, #128	@ 0x80
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 fd22 	bl	8016ca8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016264:	2100      	movs	r1, #0
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	f000 fd1e 	bl	8016ca8 <USBD_LL_StallEP>
}
 801626c:	bf00      	nop
 801626e:	3708      	adds	r7, #8
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}

08016274 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b086      	sub	sp, #24
 8016278:	af00      	add	r7, sp, #0
 801627a:	60f8      	str	r0, [r7, #12]
 801627c:	60b9      	str	r1, [r7, #8]
 801627e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016280:	2300      	movs	r3, #0
 8016282:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d042      	beq.n	8016310 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801628e:	6938      	ldr	r0, [r7, #16]
 8016290:	f000 f842 	bl	8016318 <USBD_GetLen>
 8016294:	4603      	mov	r3, r0
 8016296:	3301      	adds	r3, #1
 8016298:	005b      	lsls	r3, r3, #1
 801629a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801629e:	d808      	bhi.n	80162b2 <USBD_GetString+0x3e>
 80162a0:	6938      	ldr	r0, [r7, #16]
 80162a2:	f000 f839 	bl	8016318 <USBD_GetLen>
 80162a6:	4603      	mov	r3, r0
 80162a8:	3301      	adds	r3, #1
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	005b      	lsls	r3, r3, #1
 80162ae:	b29a      	uxth	r2, r3
 80162b0:	e001      	b.n	80162b6 <USBD_GetString+0x42>
 80162b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80162ba:	7dfb      	ldrb	r3, [r7, #23]
 80162bc:	68ba      	ldr	r2, [r7, #8]
 80162be:	4413      	add	r3, r2
 80162c0:	687a      	ldr	r2, [r7, #4]
 80162c2:	7812      	ldrb	r2, [r2, #0]
 80162c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80162c6:	7dfb      	ldrb	r3, [r7, #23]
 80162c8:	3301      	adds	r3, #1
 80162ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80162cc:	7dfb      	ldrb	r3, [r7, #23]
 80162ce:	68ba      	ldr	r2, [r7, #8]
 80162d0:	4413      	add	r3, r2
 80162d2:	2203      	movs	r2, #3
 80162d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80162d6:	7dfb      	ldrb	r3, [r7, #23]
 80162d8:	3301      	adds	r3, #1
 80162da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80162dc:	e013      	b.n	8016306 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80162de:	7dfb      	ldrb	r3, [r7, #23]
 80162e0:	68ba      	ldr	r2, [r7, #8]
 80162e2:	4413      	add	r3, r2
 80162e4:	693a      	ldr	r2, [r7, #16]
 80162e6:	7812      	ldrb	r2, [r2, #0]
 80162e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80162ea:	693b      	ldr	r3, [r7, #16]
 80162ec:	3301      	adds	r3, #1
 80162ee:	613b      	str	r3, [r7, #16]
    idx++;
 80162f0:	7dfb      	ldrb	r3, [r7, #23]
 80162f2:	3301      	adds	r3, #1
 80162f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80162f6:	7dfb      	ldrb	r3, [r7, #23]
 80162f8:	68ba      	ldr	r2, [r7, #8]
 80162fa:	4413      	add	r3, r2
 80162fc:	2200      	movs	r2, #0
 80162fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8016300:	7dfb      	ldrb	r3, [r7, #23]
 8016302:	3301      	adds	r3, #1
 8016304:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d1e7      	bne.n	80162de <USBD_GetString+0x6a>
 801630e:	e000      	b.n	8016312 <USBD_GetString+0x9e>
    return;
 8016310:	bf00      	nop
  }
}
 8016312:	3718      	adds	r7, #24
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016318:	b480      	push	{r7}
 801631a:	b085      	sub	sp, #20
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016320:	2300      	movs	r3, #0
 8016322:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016328:	e005      	b.n	8016336 <USBD_GetLen+0x1e>
  {
    len++;
 801632a:	7bfb      	ldrb	r3, [r7, #15]
 801632c:	3301      	adds	r3, #1
 801632e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016330:	68bb      	ldr	r3, [r7, #8]
 8016332:	3301      	adds	r3, #1
 8016334:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d1f5      	bne.n	801632a <USBD_GetLen+0x12>
  }

  return len;
 801633e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016340:	4618      	mov	r0, r3
 8016342:	3714      	adds	r7, #20
 8016344:	46bd      	mov	sp, r7
 8016346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634a:	4770      	bx	lr

0801634c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	60b9      	str	r1, [r7, #8]
 8016356:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	2202      	movs	r2, #2
 801635c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	687a      	ldr	r2, [r7, #4]
 8016364:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	687a      	ldr	r2, [r7, #4]
 801636a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	68ba      	ldr	r2, [r7, #8]
 8016370:	2100      	movs	r1, #0
 8016372:	68f8      	ldr	r0, [r7, #12]
 8016374:	f000 fd21 	bl	8016dba <USBD_LL_Transmit>

  return USBD_OK;
 8016378:	2300      	movs	r3, #0
}
 801637a:	4618      	mov	r0, r3
 801637c:	3710      	adds	r7, #16
 801637e:	46bd      	mov	sp, r7
 8016380:	bd80      	pop	{r7, pc}

08016382 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016382:	b580      	push	{r7, lr}
 8016384:	b084      	sub	sp, #16
 8016386:	af00      	add	r7, sp, #0
 8016388:	60f8      	str	r0, [r7, #12]
 801638a:	60b9      	str	r1, [r7, #8]
 801638c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	68ba      	ldr	r2, [r7, #8]
 8016392:	2100      	movs	r1, #0
 8016394:	68f8      	ldr	r0, [r7, #12]
 8016396:	f000 fd10 	bl	8016dba <USBD_LL_Transmit>

  return USBD_OK;
 801639a:	2300      	movs	r3, #0
}
 801639c:	4618      	mov	r0, r3
 801639e:	3710      	adds	r7, #16
 80163a0:	46bd      	mov	sp, r7
 80163a2:	bd80      	pop	{r7, pc}

080163a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b084      	sub	sp, #16
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	60f8      	str	r0, [r7, #12]
 80163ac:	60b9      	str	r1, [r7, #8]
 80163ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	2203      	movs	r2, #3
 80163b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	687a      	ldr	r2, [r7, #4]
 80163bc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	687a      	ldr	r2, [r7, #4]
 80163c4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	68ba      	ldr	r2, [r7, #8]
 80163cc:	2100      	movs	r1, #0
 80163ce:	68f8      	ldr	r0, [r7, #12]
 80163d0:	f000 fd14 	bl	8016dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163d4:	2300      	movs	r3, #0
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3710      	adds	r7, #16
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}

080163de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80163de:	b580      	push	{r7, lr}
 80163e0:	b084      	sub	sp, #16
 80163e2:	af00      	add	r7, sp, #0
 80163e4:	60f8      	str	r0, [r7, #12]
 80163e6:	60b9      	str	r1, [r7, #8]
 80163e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	68ba      	ldr	r2, [r7, #8]
 80163ee:	2100      	movs	r1, #0
 80163f0:	68f8      	ldr	r0, [r7, #12]
 80163f2:	f000 fd03 	bl	8016dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163f6:	2300      	movs	r3, #0
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3710      	adds	r7, #16
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}

08016400 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b082      	sub	sp, #8
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2204      	movs	r2, #4
 801640c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016410:	2300      	movs	r3, #0
 8016412:	2200      	movs	r2, #0
 8016414:	2100      	movs	r1, #0
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f000 fccf 	bl	8016dba <USBD_LL_Transmit>

  return USBD_OK;
 801641c:	2300      	movs	r3, #0
}
 801641e:	4618      	mov	r0, r3
 8016420:	3708      	adds	r7, #8
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}

08016426 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016426:	b580      	push	{r7, lr}
 8016428:	b082      	sub	sp, #8
 801642a:	af00      	add	r7, sp, #0
 801642c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2205      	movs	r2, #5
 8016432:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016436:	2300      	movs	r3, #0
 8016438:	2200      	movs	r2, #0
 801643a:	2100      	movs	r1, #0
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f000 fcdd 	bl	8016dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016442:	2300      	movs	r3, #0
}
 8016444:	4618      	mov	r0, r3
 8016446:	3708      	adds	r7, #8
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016450:	2200      	movs	r2, #0
 8016452:	4918      	ldr	r1, [pc, #96]	@ (80164b4 <MX_USB_DEVICE_Init+0x68>)
 8016454:	4818      	ldr	r0, [pc, #96]	@ (80164b8 <MX_USB_DEVICE_Init+0x6c>)
 8016456:	f7fe fccd 	bl	8014df4 <USBD_Init>
 801645a:	4603      	mov	r3, r0
 801645c:	2b00      	cmp	r3, #0
 801645e:	d001      	beq.n	8016464 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016460:	f7ea fff8 	bl	8001454 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016464:	4915      	ldr	r1, [pc, #84]	@ (80164bc <MX_USB_DEVICE_Init+0x70>)
 8016466:	4814      	ldr	r0, [pc, #80]	@ (80164b8 <MX_USB_DEVICE_Init+0x6c>)
 8016468:	f7fe fcf4 	bl	8014e54 <USBD_RegisterClass>
 801646c:	4603      	mov	r3, r0
 801646e:	2b00      	cmp	r3, #0
 8016470:	d001      	beq.n	8016476 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016472:	f7ea ffef 	bl	8001454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016476:	4912      	ldr	r1, [pc, #72]	@ (80164c0 <MX_USB_DEVICE_Init+0x74>)
 8016478:	480f      	ldr	r0, [pc, #60]	@ (80164b8 <MX_USB_DEVICE_Init+0x6c>)
 801647a:	f7fe fbeb 	bl	8014c54 <USBD_CDC_RegisterInterface>
 801647e:	4603      	mov	r3, r0
 8016480:	2b00      	cmp	r3, #0
 8016482:	d001      	beq.n	8016488 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016484:	f7ea ffe6 	bl	8001454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016488:	480b      	ldr	r0, [pc, #44]	@ (80164b8 <MX_USB_DEVICE_Init+0x6c>)
 801648a:	f7fe fd19 	bl	8014ec0 <USBD_Start>
 801648e:	4603      	mov	r3, r0
 8016490:	2b00      	cmp	r3, #0
 8016492:	d001      	beq.n	8016498 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016494:	f7ea ffde 	bl	8001454 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016498:	f7f6 faac 	bl	800c9f4 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 801649c:	4b06      	ldr	r3, [pc, #24]	@ (80164b8 <MX_USB_DEVICE_Init+0x6c>)
 801649e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80164a2:	4a05      	ldr	r2, [pc, #20]	@ (80164b8 <MX_USB_DEVICE_Init+0x6c>)
 80164a4:	33b0      	adds	r3, #176	@ 0xb0
 80164a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80164aa:	4a06      	ldr	r2, [pc, #24]	@ (80164c4 <MX_USB_DEVICE_Init+0x78>)
 80164ac:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80164ae:	bf00      	nop
 80164b0:	bd80      	pop	{r7, pc}
 80164b2:	bf00      	nop
 80164b4:	240000b4 	.word	0x240000b4
 80164b8:	24026790 	.word	0x24026790
 80164bc:	24000020 	.word	0x24000020
 80164c0:	240000a0 	.word	0x240000a0
 80164c4:	24026a6c 	.word	0x24026a6c

080164c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80164cc:	2200      	movs	r2, #0
 80164ce:	4905      	ldr	r1, [pc, #20]	@ (80164e4 <CDC_Init_FS+0x1c>)
 80164d0:	4805      	ldr	r0, [pc, #20]	@ (80164e8 <CDC_Init_FS+0x20>)
 80164d2:	f7fe fbd9 	bl	8014c88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80164d6:	4905      	ldr	r1, [pc, #20]	@ (80164ec <CDC_Init_FS+0x24>)
 80164d8:	4803      	ldr	r0, [pc, #12]	@ (80164e8 <CDC_Init_FS+0x20>)
 80164da:	f7fe fbf7 	bl	8014ccc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80164de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80164e0:	4618      	mov	r0, r3
 80164e2:	bd80      	pop	{r7, pc}
 80164e4:	24027270 	.word	0x24027270
 80164e8:	24026790 	.word	0x24026790
 80164ec:	24026a70 	.word	0x24026a70

080164f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80164f0:	b480      	push	{r7}
 80164f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80164f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	46bd      	mov	sp, r7
 80164fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fe:	4770      	bx	lr

08016500 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016500:	b480      	push	{r7}
 8016502:	b083      	sub	sp, #12
 8016504:	af00      	add	r7, sp, #0
 8016506:	4603      	mov	r3, r0
 8016508:	6039      	str	r1, [r7, #0]
 801650a:	71fb      	strb	r3, [r7, #7]
 801650c:	4613      	mov	r3, r2
 801650e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016510:	79fb      	ldrb	r3, [r7, #7]
 8016512:	2b23      	cmp	r3, #35	@ 0x23
 8016514:	d84a      	bhi.n	80165ac <CDC_Control_FS+0xac>
 8016516:	a201      	add	r2, pc, #4	@ (adr r2, 801651c <CDC_Control_FS+0x1c>)
 8016518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801651c:	080165ad 	.word	0x080165ad
 8016520:	080165ad 	.word	0x080165ad
 8016524:	080165ad 	.word	0x080165ad
 8016528:	080165ad 	.word	0x080165ad
 801652c:	080165ad 	.word	0x080165ad
 8016530:	080165ad 	.word	0x080165ad
 8016534:	080165ad 	.word	0x080165ad
 8016538:	080165ad 	.word	0x080165ad
 801653c:	080165ad 	.word	0x080165ad
 8016540:	080165ad 	.word	0x080165ad
 8016544:	080165ad 	.word	0x080165ad
 8016548:	080165ad 	.word	0x080165ad
 801654c:	080165ad 	.word	0x080165ad
 8016550:	080165ad 	.word	0x080165ad
 8016554:	080165ad 	.word	0x080165ad
 8016558:	080165ad 	.word	0x080165ad
 801655c:	080165ad 	.word	0x080165ad
 8016560:	080165ad 	.word	0x080165ad
 8016564:	080165ad 	.word	0x080165ad
 8016568:	080165ad 	.word	0x080165ad
 801656c:	080165ad 	.word	0x080165ad
 8016570:	080165ad 	.word	0x080165ad
 8016574:	080165ad 	.word	0x080165ad
 8016578:	080165ad 	.word	0x080165ad
 801657c:	080165ad 	.word	0x080165ad
 8016580:	080165ad 	.word	0x080165ad
 8016584:	080165ad 	.word	0x080165ad
 8016588:	080165ad 	.word	0x080165ad
 801658c:	080165ad 	.word	0x080165ad
 8016590:	080165ad 	.word	0x080165ad
 8016594:	080165ad 	.word	0x080165ad
 8016598:	080165ad 	.word	0x080165ad
 801659c:	080165ad 	.word	0x080165ad
 80165a0:	080165ad 	.word	0x080165ad
 80165a4:	080165ad 	.word	0x080165ad
 80165a8:	080165ad 	.word	0x080165ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80165ac:	bf00      	nop
  }

  return (USBD_OK);
 80165ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80165b0:	4618      	mov	r0, r3
 80165b2:	370c      	adds	r7, #12
 80165b4:	46bd      	mov	sp, r7
 80165b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ba:	4770      	bx	lr

080165bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b082      	sub	sp, #8
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
 80165c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80165c6:	6879      	ldr	r1, [r7, #4]
 80165c8:	4806      	ldr	r0, [pc, #24]	@ (80165e4 <CDC_Receive_FS+0x28>)
 80165ca:	f7fe fb7f 	bl	8014ccc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80165ce:	4805      	ldr	r0, [pc, #20]	@ (80165e4 <CDC_Receive_FS+0x28>)
 80165d0:	f7fe fbda 	bl	8014d88 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 80165d4:	4b04      	ldr	r3, [pc, #16]	@ (80165e8 <CDC_Receive_FS+0x2c>)
 80165d6:	2201      	movs	r2, #1
 80165d8:	701a      	strb	r2, [r3, #0]
	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 80165da:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80165dc:	4618      	mov	r0, r3
 80165de:	3708      	adds	r7, #8
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}
 80165e4:	24026790 	.word	0x24026790
 80165e8:	24026782 	.word	0x24026782

080165ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b084      	sub	sp, #16
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
 80165f4:	460b      	mov	r3, r1
 80165f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80165f8:	2300      	movs	r3, #0
 80165fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80165fc:	4b0d      	ldr	r3, [pc, #52]	@ (8016634 <CDC_Transmit_FS+0x48>)
 80165fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016602:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801660a:	2b00      	cmp	r3, #0
 801660c:	d001      	beq.n	8016612 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801660e:	2301      	movs	r3, #1
 8016610:	e00b      	b.n	801662a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016612:	887b      	ldrh	r3, [r7, #2]
 8016614:	461a      	mov	r2, r3
 8016616:	6879      	ldr	r1, [r7, #4]
 8016618:	4806      	ldr	r0, [pc, #24]	@ (8016634 <CDC_Transmit_FS+0x48>)
 801661a:	f7fe fb35 	bl	8014c88 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801661e:	4805      	ldr	r0, [pc, #20]	@ (8016634 <CDC_Transmit_FS+0x48>)
 8016620:	f7fe fb72 	bl	8014d08 <USBD_CDC_TransmitPacket>
 8016624:	4603      	mov	r3, r0
 8016626:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016628:	7bfb      	ldrb	r3, [r7, #15]
}
 801662a:	4618      	mov	r0, r3
 801662c:	3710      	adds	r7, #16
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
 8016632:	bf00      	nop
 8016634:	24026790 	.word	0x24026790

08016638 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016638:	b480      	push	{r7}
 801663a:	b087      	sub	sp, #28
 801663c:	af00      	add	r7, sp, #0
 801663e:	60f8      	str	r0, [r7, #12]
 8016640:	60b9      	str	r1, [r7, #8]
 8016642:	4613      	mov	r3, r2
 8016644:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016646:	2300      	movs	r3, #0
 8016648:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801664a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801664e:	4618      	mov	r0, r3
 8016650:	371c      	adds	r7, #28
 8016652:	46bd      	mov	sp, r7
 8016654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016658:	4770      	bx	lr
	...

0801665c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801665c:	b480      	push	{r7}
 801665e:	b083      	sub	sp, #12
 8016660:	af00      	add	r7, sp, #0
 8016662:	4603      	mov	r3, r0
 8016664:	6039      	str	r1, [r7, #0]
 8016666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	2212      	movs	r2, #18
 801666c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801666e:	4b03      	ldr	r3, [pc, #12]	@ (801667c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016670:	4618      	mov	r0, r3
 8016672:	370c      	adds	r7, #12
 8016674:	46bd      	mov	sp, r7
 8016676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667a:	4770      	bx	lr
 801667c:	240000d4 	.word	0x240000d4

08016680 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016680:	b480      	push	{r7}
 8016682:	b083      	sub	sp, #12
 8016684:	af00      	add	r7, sp, #0
 8016686:	4603      	mov	r3, r0
 8016688:	6039      	str	r1, [r7, #0]
 801668a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	2204      	movs	r2, #4
 8016690:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016692:	4b03      	ldr	r3, [pc, #12]	@ (80166a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016694:	4618      	mov	r0, r3
 8016696:	370c      	adds	r7, #12
 8016698:	46bd      	mov	sp, r7
 801669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669e:	4770      	bx	lr
 80166a0:	240000e8 	.word	0x240000e8

080166a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b082      	sub	sp, #8
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	4603      	mov	r3, r0
 80166ac:	6039      	str	r1, [r7, #0]
 80166ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80166b0:	79fb      	ldrb	r3, [r7, #7]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d105      	bne.n	80166c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80166b6:	683a      	ldr	r2, [r7, #0]
 80166b8:	4907      	ldr	r1, [pc, #28]	@ (80166d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80166ba:	4808      	ldr	r0, [pc, #32]	@ (80166dc <USBD_FS_ProductStrDescriptor+0x38>)
 80166bc:	f7ff fdda 	bl	8016274 <USBD_GetString>
 80166c0:	e004      	b.n	80166cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80166c2:	683a      	ldr	r2, [r7, #0]
 80166c4:	4904      	ldr	r1, [pc, #16]	@ (80166d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80166c6:	4805      	ldr	r0, [pc, #20]	@ (80166dc <USBD_FS_ProductStrDescriptor+0x38>)
 80166c8:	f7ff fdd4 	bl	8016274 <USBD_GetString>
  }
  return USBD_StrDesc;
 80166cc:	4b02      	ldr	r3, [pc, #8]	@ (80166d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3708      	adds	r7, #8
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	24027a70 	.word	0x24027a70
 80166dc:	080178a0 	.word	0x080178a0

080166e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	4603      	mov	r3, r0
 80166e8:	6039      	str	r1, [r7, #0]
 80166ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80166ec:	683a      	ldr	r2, [r7, #0]
 80166ee:	4904      	ldr	r1, [pc, #16]	@ (8016700 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80166f0:	4804      	ldr	r0, [pc, #16]	@ (8016704 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80166f2:	f7ff fdbf 	bl	8016274 <USBD_GetString>
  return USBD_StrDesc;
 80166f6:	4b02      	ldr	r3, [pc, #8]	@ (8016700 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	3708      	adds	r7, #8
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}
 8016700:	24027a70 	.word	0x24027a70
 8016704:	080178b8 	.word	0x080178b8

08016708 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	4603      	mov	r3, r0
 8016710:	6039      	str	r1, [r7, #0]
 8016712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	221a      	movs	r2, #26
 8016718:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801671a:	f000 f843 	bl	80167a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801671e:	4b02      	ldr	r3, [pc, #8]	@ (8016728 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016720:	4618      	mov	r0, r3
 8016722:	3708      	adds	r7, #8
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}
 8016728:	240000ec 	.word	0x240000ec

0801672c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
 8016732:	4603      	mov	r3, r0
 8016734:	6039      	str	r1, [r7, #0]
 8016736:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016738:	79fb      	ldrb	r3, [r7, #7]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d105      	bne.n	801674a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801673e:	683a      	ldr	r2, [r7, #0]
 8016740:	4907      	ldr	r1, [pc, #28]	@ (8016760 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016742:	4808      	ldr	r0, [pc, #32]	@ (8016764 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016744:	f7ff fd96 	bl	8016274 <USBD_GetString>
 8016748:	e004      	b.n	8016754 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801674a:	683a      	ldr	r2, [r7, #0]
 801674c:	4904      	ldr	r1, [pc, #16]	@ (8016760 <USBD_FS_ConfigStrDescriptor+0x34>)
 801674e:	4805      	ldr	r0, [pc, #20]	@ (8016764 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016750:	f7ff fd90 	bl	8016274 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016754:	4b02      	ldr	r3, [pc, #8]	@ (8016760 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016756:	4618      	mov	r0, r3
 8016758:	3708      	adds	r7, #8
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}
 801675e:	bf00      	nop
 8016760:	24027a70 	.word	0x24027a70
 8016764:	080178cc 	.word	0x080178cc

08016768 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b082      	sub	sp, #8
 801676c:	af00      	add	r7, sp, #0
 801676e:	4603      	mov	r3, r0
 8016770:	6039      	str	r1, [r7, #0]
 8016772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016774:	79fb      	ldrb	r3, [r7, #7]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d105      	bne.n	8016786 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801677a:	683a      	ldr	r2, [r7, #0]
 801677c:	4907      	ldr	r1, [pc, #28]	@ (801679c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801677e:	4808      	ldr	r0, [pc, #32]	@ (80167a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016780:	f7ff fd78 	bl	8016274 <USBD_GetString>
 8016784:	e004      	b.n	8016790 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016786:	683a      	ldr	r2, [r7, #0]
 8016788:	4904      	ldr	r1, [pc, #16]	@ (801679c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801678a:	4805      	ldr	r0, [pc, #20]	@ (80167a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801678c:	f7ff fd72 	bl	8016274 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016790:	4b02      	ldr	r3, [pc, #8]	@ (801679c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016792:	4618      	mov	r0, r3
 8016794:	3708      	adds	r7, #8
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}
 801679a:	bf00      	nop
 801679c:	24027a70 	.word	0x24027a70
 80167a0:	080178d8 	.word	0x080178d8

080167a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b084      	sub	sp, #16
 80167a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80167aa:	4b0f      	ldr	r3, [pc, #60]	@ (80167e8 <Get_SerialNum+0x44>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80167b0:	4b0e      	ldr	r3, [pc, #56]	@ (80167ec <Get_SerialNum+0x48>)
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80167b6:	4b0e      	ldr	r3, [pc, #56]	@ (80167f0 <Get_SerialNum+0x4c>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80167bc:	68fa      	ldr	r2, [r7, #12]
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	4413      	add	r3, r2
 80167c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d009      	beq.n	80167de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80167ca:	2208      	movs	r2, #8
 80167cc:	4909      	ldr	r1, [pc, #36]	@ (80167f4 <Get_SerialNum+0x50>)
 80167ce:	68f8      	ldr	r0, [r7, #12]
 80167d0:	f000 f814 	bl	80167fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80167d4:	2204      	movs	r2, #4
 80167d6:	4908      	ldr	r1, [pc, #32]	@ (80167f8 <Get_SerialNum+0x54>)
 80167d8:	68b8      	ldr	r0, [r7, #8]
 80167da:	f000 f80f 	bl	80167fc <IntToUnicode>
  }
}
 80167de:	bf00      	nop
 80167e0:	3710      	adds	r7, #16
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}
 80167e6:	bf00      	nop
 80167e8:	1ff1e800 	.word	0x1ff1e800
 80167ec:	1ff1e804 	.word	0x1ff1e804
 80167f0:	1ff1e808 	.word	0x1ff1e808
 80167f4:	240000ee 	.word	0x240000ee
 80167f8:	240000fe 	.word	0x240000fe

080167fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80167fc:	b480      	push	{r7}
 80167fe:	b087      	sub	sp, #28
 8016800:	af00      	add	r7, sp, #0
 8016802:	60f8      	str	r0, [r7, #12]
 8016804:	60b9      	str	r1, [r7, #8]
 8016806:	4613      	mov	r3, r2
 8016808:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801680a:	2300      	movs	r3, #0
 801680c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801680e:	2300      	movs	r3, #0
 8016810:	75fb      	strb	r3, [r7, #23]
 8016812:	e027      	b.n	8016864 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	0f1b      	lsrs	r3, r3, #28
 8016818:	2b09      	cmp	r3, #9
 801681a:	d80b      	bhi.n	8016834 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	0f1b      	lsrs	r3, r3, #28
 8016820:	b2da      	uxtb	r2, r3
 8016822:	7dfb      	ldrb	r3, [r7, #23]
 8016824:	005b      	lsls	r3, r3, #1
 8016826:	4619      	mov	r1, r3
 8016828:	68bb      	ldr	r3, [r7, #8]
 801682a:	440b      	add	r3, r1
 801682c:	3230      	adds	r2, #48	@ 0x30
 801682e:	b2d2      	uxtb	r2, r2
 8016830:	701a      	strb	r2, [r3, #0]
 8016832:	e00a      	b.n	801684a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	0f1b      	lsrs	r3, r3, #28
 8016838:	b2da      	uxtb	r2, r3
 801683a:	7dfb      	ldrb	r3, [r7, #23]
 801683c:	005b      	lsls	r3, r3, #1
 801683e:	4619      	mov	r1, r3
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	440b      	add	r3, r1
 8016844:	3237      	adds	r2, #55	@ 0x37
 8016846:	b2d2      	uxtb	r2, r2
 8016848:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	011b      	lsls	r3, r3, #4
 801684e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016850:	7dfb      	ldrb	r3, [r7, #23]
 8016852:	005b      	lsls	r3, r3, #1
 8016854:	3301      	adds	r3, #1
 8016856:	68ba      	ldr	r2, [r7, #8]
 8016858:	4413      	add	r3, r2
 801685a:	2200      	movs	r2, #0
 801685c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801685e:	7dfb      	ldrb	r3, [r7, #23]
 8016860:	3301      	adds	r3, #1
 8016862:	75fb      	strb	r3, [r7, #23]
 8016864:	7dfa      	ldrb	r2, [r7, #23]
 8016866:	79fb      	ldrb	r3, [r7, #7]
 8016868:	429a      	cmp	r2, r3
 801686a:	d3d3      	bcc.n	8016814 <IntToUnicode+0x18>
  }
}
 801686c:	bf00      	nop
 801686e:	bf00      	nop
 8016870:	371c      	adds	r7, #28
 8016872:	46bd      	mov	sp, r7
 8016874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016878:	4770      	bx	lr
	...

0801687c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b0ba      	sub	sp, #232	@ 0xe8
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016884:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8016888:	2200      	movs	r2, #0
 801688a:	601a      	str	r2, [r3, #0]
 801688c:	605a      	str	r2, [r3, #4]
 801688e:	609a      	str	r2, [r3, #8]
 8016890:	60da      	str	r2, [r3, #12]
 8016892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016894:	f107 0310 	add.w	r3, r7, #16
 8016898:	22c0      	movs	r2, #192	@ 0xc0
 801689a:	2100      	movs	r1, #0
 801689c:	4618      	mov	r0, r3
 801689e:	f000 fb47 	bl	8016f30 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	4a2c      	ldr	r2, [pc, #176]	@ (8016958 <HAL_PCD_MspInit+0xdc>)
 80168a8:	4293      	cmp	r3, r2
 80168aa:	d151      	bne.n	8016950 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80168ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80168b0:	f04f 0300 	mov.w	r3, #0
 80168b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80168b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80168bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80168c0:	f107 0310 	add.w	r3, r7, #16
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7f7 f88b 	bl	800d9e0 <HAL_RCCEx_PeriphCLKConfig>
 80168ca:	4603      	mov	r3, r0
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d001      	beq.n	80168d4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80168d0:	f7ea fdc0 	bl	8001454 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80168d4:	f7f6 f88e 	bl	800c9f4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80168d8:	4b20      	ldr	r3, [pc, #128]	@ (801695c <HAL_PCD_MspInit+0xe0>)
 80168da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80168de:	4a1f      	ldr	r2, [pc, #124]	@ (801695c <HAL_PCD_MspInit+0xe0>)
 80168e0:	f043 0301 	orr.w	r3, r3, #1
 80168e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80168e8:	4b1c      	ldr	r3, [pc, #112]	@ (801695c <HAL_PCD_MspInit+0xe0>)
 80168ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80168ee:	f003 0301 	and.w	r3, r3, #1
 80168f2:	60fb      	str	r3, [r7, #12]
 80168f4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80168f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80168fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80168fe:	2302      	movs	r3, #2
 8016900:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016904:	2300      	movs	r3, #0
 8016906:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801690a:	2300      	movs	r3, #0
 801690c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8016910:	230a      	movs	r3, #10
 8016912:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016916:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801691a:	4619      	mov	r1, r3
 801691c:	4810      	ldr	r0, [pc, #64]	@ (8016960 <HAL_PCD_MspInit+0xe4>)
 801691e:	f7f0 f859 	bl	80069d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016922:	4b0e      	ldr	r3, [pc, #56]	@ (801695c <HAL_PCD_MspInit+0xe0>)
 8016924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016928:	4a0c      	ldr	r2, [pc, #48]	@ (801695c <HAL_PCD_MspInit+0xe0>)
 801692a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801692e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8016932:	4b0a      	ldr	r3, [pc, #40]	@ (801695c <HAL_PCD_MspInit+0xe0>)
 8016934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801693c:	60bb      	str	r3, [r7, #8]
 801693e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016940:	2200      	movs	r2, #0
 8016942:	2100      	movs	r1, #0
 8016944:	2065      	movs	r0, #101	@ 0x65
 8016946:	f7ed f942 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801694a:	2065      	movs	r0, #101	@ 0x65
 801694c:	f7ed f959 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016950:	bf00      	nop
 8016952:	37e8      	adds	r7, #232	@ 0xe8
 8016954:	46bd      	mov	sp, r7
 8016956:	bd80      	pop	{r7, pc}
 8016958:	40080000 	.word	0x40080000
 801695c:	58024400 	.word	0x58024400
 8016960:	58020000 	.word	0x58020000

08016964 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b082      	sub	sp, #8
 8016968:	af00      	add	r7, sp, #0
 801696a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8016978:	4619      	mov	r1, r3
 801697a:	4610      	mov	r0, r2
 801697c:	f7fe faed 	bl	8014f5a <USBD_LL_SetupStage>
}
 8016980:	bf00      	nop
 8016982:	3708      	adds	r7, #8
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}

08016988 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b082      	sub	sp, #8
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	460b      	mov	r3, r1
 8016992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801699a:	78fa      	ldrb	r2, [r7, #3]
 801699c:	6879      	ldr	r1, [r7, #4]
 801699e:	4613      	mov	r3, r2
 80169a0:	00db      	lsls	r3, r3, #3
 80169a2:	4413      	add	r3, r2
 80169a4:	009b      	lsls	r3, r3, #2
 80169a6:	440b      	add	r3, r1
 80169a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80169ac:	681a      	ldr	r2, [r3, #0]
 80169ae:	78fb      	ldrb	r3, [r7, #3]
 80169b0:	4619      	mov	r1, r3
 80169b2:	f7fe fb27 	bl	8015004 <USBD_LL_DataOutStage>
}
 80169b6:	bf00      	nop
 80169b8:	3708      	adds	r7, #8
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd80      	pop	{r7, pc}

080169be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169be:	b580      	push	{r7, lr}
 80169c0:	b082      	sub	sp, #8
 80169c2:	af00      	add	r7, sp, #0
 80169c4:	6078      	str	r0, [r7, #4]
 80169c6:	460b      	mov	r3, r1
 80169c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80169d0:	78fa      	ldrb	r2, [r7, #3]
 80169d2:	6879      	ldr	r1, [r7, #4]
 80169d4:	4613      	mov	r3, r2
 80169d6:	00db      	lsls	r3, r3, #3
 80169d8:	4413      	add	r3, r2
 80169da:	009b      	lsls	r3, r3, #2
 80169dc:	440b      	add	r3, r1
 80169de:	3320      	adds	r3, #32
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	78fb      	ldrb	r3, [r7, #3]
 80169e4:	4619      	mov	r1, r3
 80169e6:	f7fe fbc0 	bl	801516a <USBD_LL_DataInStage>
}
 80169ea:	bf00      	nop
 80169ec:	3708      	adds	r7, #8
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}

080169f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169f2:	b580      	push	{r7, lr}
 80169f4:	b082      	sub	sp, #8
 80169f6:	af00      	add	r7, sp, #0
 80169f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7fe fcfa 	bl	80153fa <USBD_LL_SOF>
}
 8016a06:	bf00      	nop
 8016a08:	3708      	adds	r7, #8
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	bd80      	pop	{r7, pc}

08016a0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a0e:	b580      	push	{r7, lr}
 8016a10:	b084      	sub	sp, #16
 8016a12:	af00      	add	r7, sp, #0
 8016a14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016a16:	2301      	movs	r3, #1
 8016a18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	79db      	ldrb	r3, [r3, #7]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d102      	bne.n	8016a28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016a22:	2300      	movs	r3, #0
 8016a24:	73fb      	strb	r3, [r7, #15]
 8016a26:	e008      	b.n	8016a3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	79db      	ldrb	r3, [r3, #7]
 8016a2c:	2b02      	cmp	r3, #2
 8016a2e:	d102      	bne.n	8016a36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016a30:	2301      	movs	r3, #1
 8016a32:	73fb      	strb	r3, [r7, #15]
 8016a34:	e001      	b.n	8016a3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016a36:	f7ea fd0d 	bl	8001454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016a40:	7bfa      	ldrb	r2, [r7, #15]
 8016a42:	4611      	mov	r1, r2
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7fe fc94 	bl	8015372 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016a50:	4618      	mov	r0, r3
 8016a52:	f7fe fc3c 	bl	80152ce <USBD_LL_Reset>
}
 8016a56:	bf00      	nop
 8016a58:	3710      	adds	r7, #16
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
	...

08016a60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b082      	sub	sp, #8
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f7fe fc8f 	bl	8015392 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	687a      	ldr	r2, [r7, #4]
 8016a80:	6812      	ldr	r2, [r2, #0]
 8016a82:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016a86:	f043 0301 	orr.w	r3, r3, #1
 8016a8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	7adb      	ldrb	r3, [r3, #11]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d005      	beq.n	8016aa0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a94:	4b04      	ldr	r3, [pc, #16]	@ (8016aa8 <HAL_PCD_SuspendCallback+0x48>)
 8016a96:	691b      	ldr	r3, [r3, #16]
 8016a98:	4a03      	ldr	r2, [pc, #12]	@ (8016aa8 <HAL_PCD_SuspendCallback+0x48>)
 8016a9a:	f043 0306 	orr.w	r3, r3, #6
 8016a9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016aa0:	bf00      	nop
 8016aa2:	3708      	adds	r7, #8
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}
 8016aa8:	e000ed00 	.word	0xe000ed00

08016aac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7fe fc85 	bl	80153ca <USBD_LL_Resume>
}
 8016ac0:	bf00      	nop
 8016ac2:	3708      	adds	r7, #8
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}

08016ac8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
 8016ad0:	460b      	mov	r3, r1
 8016ad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016ada:	78fa      	ldrb	r2, [r7, #3]
 8016adc:	4611      	mov	r1, r2
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7fe fcdd 	bl	801549e <USBD_LL_IsoOUTIncomplete>
}
 8016ae4:	bf00      	nop
 8016ae6:	3708      	adds	r7, #8
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}

08016aec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b082      	sub	sp, #8
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
 8016af4:	460b      	mov	r3, r1
 8016af6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016afe:	78fa      	ldrb	r2, [r7, #3]
 8016b00:	4611      	mov	r1, r2
 8016b02:	4618      	mov	r0, r3
 8016b04:	f7fe fc99 	bl	801543a <USBD_LL_IsoINIncomplete>
}
 8016b08:	bf00      	nop
 8016b0a:	3708      	adds	r7, #8
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}

08016b10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016b1e:	4618      	mov	r0, r3
 8016b20:	f7fe fcef 	bl	8015502 <USBD_LL_DevConnected>
}
 8016b24:	bf00      	nop
 8016b26:	3708      	adds	r7, #8
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd80      	pop	{r7, pc}

08016b2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b082      	sub	sp, #8
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7fe fcec 	bl	8015518 <USBD_LL_DevDisconnected>
}
 8016b40:	bf00      	nop
 8016b42:	3708      	adds	r7, #8
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}

08016b48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b082      	sub	sp, #8
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	781b      	ldrb	r3, [r3, #0]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d13e      	bne.n	8016bd6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016b58:	4a21      	ldr	r2, [pc, #132]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	4a1f      	ldr	r2, [pc, #124]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b64:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016b68:	4b1d      	ldr	r3, [pc, #116]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8016be4 <USBD_LL_Init+0x9c>)
 8016b6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8016b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b70:	2209      	movs	r2, #9
 8016b72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016b74:	4b1a      	ldr	r3, [pc, #104]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b76:	2202      	movs	r2, #2
 8016b78:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016b7a:	4b19      	ldr	r3, [pc, #100]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016b80:	4b17      	ldr	r3, [pc, #92]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b82:	2202      	movs	r2, #2
 8016b84:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016b86:	4b16      	ldr	r3, [pc, #88]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b88:	2200      	movs	r2, #0
 8016b8a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016b8c:	4b14      	ldr	r3, [pc, #80]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b8e:	2200      	movs	r2, #0
 8016b90:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016b92:	4b13      	ldr	r3, [pc, #76]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b94:	2200      	movs	r2, #0
 8016b96:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016b98:	4b11      	ldr	r3, [pc, #68]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016b9e:	4b10      	ldr	r3, [pc, #64]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016baa:	480d      	ldr	r0, [pc, #52]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016bac:	f7f4 fc48 	bl	800b440 <HAL_PCD_Init>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d001      	beq.n	8016bba <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016bb6:	f7ea fc4d 	bl	8001454 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016bba:	2180      	movs	r1, #128	@ 0x80
 8016bbc:	4808      	ldr	r0, [pc, #32]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016bbe:	f7f5 fe9e 	bl	800c8fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016bc2:	2240      	movs	r2, #64	@ 0x40
 8016bc4:	2100      	movs	r1, #0
 8016bc6:	4806      	ldr	r0, [pc, #24]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016bc8:	f7f5 fe52 	bl	800c870 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016bcc:	2280      	movs	r2, #128	@ 0x80
 8016bce:	2101      	movs	r1, #1
 8016bd0:	4803      	ldr	r0, [pc, #12]	@ (8016be0 <USBD_LL_Init+0x98>)
 8016bd2:	f7f5 fe4d 	bl	800c870 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8016bd6:	2300      	movs	r3, #0
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	3708      	adds	r7, #8
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}
 8016be0:	24027c70 	.word	0x24027c70
 8016be4:	40080000 	.word	0x40080000

08016be8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b084      	sub	sp, #16
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7f4 fd2a 	bl	800b658 <HAL_PCD_Start>
 8016c04:	4603      	mov	r3, r0
 8016c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c08:	7bfb      	ldrb	r3, [r7, #15]
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f000 f942 	bl	8016e94 <USBD_Get_USB_Status>
 8016c10:	4603      	mov	r3, r0
 8016c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	3710      	adds	r7, #16
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bd80      	pop	{r7, pc}

08016c1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016c1e:	b580      	push	{r7, lr}
 8016c20:	b084      	sub	sp, #16
 8016c22:	af00      	add	r7, sp, #0
 8016c24:	6078      	str	r0, [r7, #4]
 8016c26:	4608      	mov	r0, r1
 8016c28:	4611      	mov	r1, r2
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	70fb      	strb	r3, [r7, #3]
 8016c30:	460b      	mov	r3, r1
 8016c32:	70bb      	strb	r3, [r7, #2]
 8016c34:	4613      	mov	r3, r2
 8016c36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c38:	2300      	movs	r3, #0
 8016c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016c46:	78bb      	ldrb	r3, [r7, #2]
 8016c48:	883a      	ldrh	r2, [r7, #0]
 8016c4a:	78f9      	ldrb	r1, [r7, #3]
 8016c4c:	f7f5 fa2b 	bl	800c0a6 <HAL_PCD_EP_Open>
 8016c50:	4603      	mov	r3, r0
 8016c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c54:	7bfb      	ldrb	r3, [r7, #15]
 8016c56:	4618      	mov	r0, r3
 8016c58:	f000 f91c 	bl	8016e94 <USBD_Get_USB_Status>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c62:	4618      	mov	r0, r3
 8016c64:	3710      	adds	r7, #16
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}

08016c6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c6a:	b580      	push	{r7, lr}
 8016c6c:	b084      	sub	sp, #16
 8016c6e:	af00      	add	r7, sp, #0
 8016c70:	6078      	str	r0, [r7, #4]
 8016c72:	460b      	mov	r3, r1
 8016c74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c76:	2300      	movs	r3, #0
 8016c78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016c84:	78fa      	ldrb	r2, [r7, #3]
 8016c86:	4611      	mov	r1, r2
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f7f5 fa76 	bl	800c17a <HAL_PCD_EP_Close>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c92:	7bfb      	ldrb	r3, [r7, #15]
 8016c94:	4618      	mov	r0, r3
 8016c96:	f000 f8fd 	bl	8016e94 <USBD_Get_USB_Status>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	3710      	adds	r7, #16
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}

08016ca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b084      	sub	sp, #16
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cb8:	2300      	movs	r3, #0
 8016cba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016cc2:	78fa      	ldrb	r2, [r7, #3]
 8016cc4:	4611      	mov	r1, r2
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f7f5 fb2e 	bl	800c328 <HAL_PCD_EP_SetStall>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cd0:	7bfb      	ldrb	r3, [r7, #15]
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f000 f8de 	bl	8016e94 <USBD_Get_USB_Status>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cde:	4618      	mov	r0, r3
 8016ce0:	3710      	adds	r7, #16
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}

08016ce6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ce6:	b580      	push	{r7, lr}
 8016ce8:	b084      	sub	sp, #16
 8016cea:	af00      	add	r7, sp, #0
 8016cec:	6078      	str	r0, [r7, #4]
 8016cee:	460b      	mov	r3, r1
 8016cf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016d00:	78fa      	ldrb	r2, [r7, #3]
 8016d02:	4611      	mov	r1, r2
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7f5 fb72 	bl	800c3ee <HAL_PCD_EP_ClrStall>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d0e:	7bfb      	ldrb	r3, [r7, #15]
 8016d10:	4618      	mov	r0, r3
 8016d12:	f000 f8bf 	bl	8016e94 <USBD_Get_USB_Status>
 8016d16:	4603      	mov	r3, r0
 8016d18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3710      	adds	r7, #16
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}

08016d24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d24:	b480      	push	{r7}
 8016d26:	b085      	sub	sp, #20
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
 8016d2c:	460b      	mov	r3, r1
 8016d2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016d36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	da0b      	bge.n	8016d58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016d40:	78fb      	ldrb	r3, [r7, #3]
 8016d42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016d46:	68f9      	ldr	r1, [r7, #12]
 8016d48:	4613      	mov	r3, r2
 8016d4a:	00db      	lsls	r3, r3, #3
 8016d4c:	4413      	add	r3, r2
 8016d4e:	009b      	lsls	r3, r3, #2
 8016d50:	440b      	add	r3, r1
 8016d52:	3316      	adds	r3, #22
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	e00b      	b.n	8016d70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016d58:	78fb      	ldrb	r3, [r7, #3]
 8016d5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016d5e:	68f9      	ldr	r1, [r7, #12]
 8016d60:	4613      	mov	r3, r2
 8016d62:	00db      	lsls	r3, r3, #3
 8016d64:	4413      	add	r3, r2
 8016d66:	009b      	lsls	r3, r3, #2
 8016d68:	440b      	add	r3, r1
 8016d6a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8016d6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3714      	adds	r7, #20
 8016d74:	46bd      	mov	sp, r7
 8016d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7a:	4770      	bx	lr

08016d7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b084      	sub	sp, #16
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
 8016d84:	460b      	mov	r3, r1
 8016d86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016d96:	78fa      	ldrb	r2, [r7, #3]
 8016d98:	4611      	mov	r1, r2
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7f5 f95f 	bl	800c05e <HAL_PCD_SetAddress>
 8016da0:	4603      	mov	r3, r0
 8016da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016da4:	7bfb      	ldrb	r3, [r7, #15]
 8016da6:	4618      	mov	r0, r3
 8016da8:	f000 f874 	bl	8016e94 <USBD_Get_USB_Status>
 8016dac:	4603      	mov	r3, r0
 8016dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3710      	adds	r7, #16
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}

08016dba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016dba:	b580      	push	{r7, lr}
 8016dbc:	b086      	sub	sp, #24
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	60f8      	str	r0, [r7, #12]
 8016dc2:	607a      	str	r2, [r7, #4]
 8016dc4:	603b      	str	r3, [r7, #0]
 8016dc6:	460b      	mov	r3, r1
 8016dc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dca:	2300      	movs	r3, #0
 8016dcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016dd8:	7af9      	ldrb	r1, [r7, #11]
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	687a      	ldr	r2, [r7, #4]
 8016dde:	f7f5 fa69 	bl	800c2b4 <HAL_PCD_EP_Transmit>
 8016de2:	4603      	mov	r3, r0
 8016de4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016de6:	7dfb      	ldrb	r3, [r7, #23]
 8016de8:	4618      	mov	r0, r3
 8016dea:	f000 f853 	bl	8016e94 <USBD_Get_USB_Status>
 8016dee:	4603      	mov	r3, r0
 8016df0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016df2:	7dbb      	ldrb	r3, [r7, #22]
}
 8016df4:	4618      	mov	r0, r3
 8016df6:	3718      	adds	r7, #24
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}

08016dfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b086      	sub	sp, #24
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	60f8      	str	r0, [r7, #12]
 8016e04:	607a      	str	r2, [r7, #4]
 8016e06:	603b      	str	r3, [r7, #0]
 8016e08:	460b      	mov	r3, r1
 8016e0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e10:	2300      	movs	r3, #0
 8016e12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016e1a:	7af9      	ldrb	r1, [r7, #11]
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	687a      	ldr	r2, [r7, #4]
 8016e20:	f7f5 f9f5 	bl	800c20e <HAL_PCD_EP_Receive>
 8016e24:	4603      	mov	r3, r0
 8016e26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e28:	7dfb      	ldrb	r3, [r7, #23]
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f000 f832 	bl	8016e94 <USBD_Get_USB_Status>
 8016e30:	4603      	mov	r3, r0
 8016e32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016e34:	7dbb      	ldrb	r3, [r7, #22]
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3718      	adds	r7, #24
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}

08016e3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e3e:	b580      	push	{r7, lr}
 8016e40:	b082      	sub	sp, #8
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	6078      	str	r0, [r7, #4]
 8016e46:	460b      	mov	r3, r1
 8016e48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016e50:	78fa      	ldrb	r2, [r7, #3]
 8016e52:	4611      	mov	r1, r2
 8016e54:	4618      	mov	r0, r3
 8016e56:	f7f5 fa15 	bl	800c284 <HAL_PCD_EP_GetRxCount>
 8016e5a:	4603      	mov	r3, r0
}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3708      	adds	r7, #8
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}

08016e64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016e64:	b480      	push	{r7}
 8016e66:	b083      	sub	sp, #12
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016e6c:	4b03      	ldr	r3, [pc, #12]	@ (8016e7c <USBD_static_malloc+0x18>)
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	370c      	adds	r7, #12
 8016e72:	46bd      	mov	sp, r7
 8016e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e78:	4770      	bx	lr
 8016e7a:	bf00      	nop
 8016e7c:	24028154 	.word	0x24028154

08016e80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016e80:	b480      	push	{r7}
 8016e82:	b083      	sub	sp, #12
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016e88:	bf00      	nop
 8016e8a:	370c      	adds	r7, #12
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e92:	4770      	bx	lr

08016e94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016e94:	b480      	push	{r7}
 8016e96:	b085      	sub	sp, #20
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016ea2:	79fb      	ldrb	r3, [r7, #7]
 8016ea4:	2b03      	cmp	r3, #3
 8016ea6:	d817      	bhi.n	8016ed8 <USBD_Get_USB_Status+0x44>
 8016ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8016eb0 <USBD_Get_USB_Status+0x1c>)
 8016eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016eae:	bf00      	nop
 8016eb0:	08016ec1 	.word	0x08016ec1
 8016eb4:	08016ec7 	.word	0x08016ec7
 8016eb8:	08016ecd 	.word	0x08016ecd
 8016ebc:	08016ed3 	.word	0x08016ed3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8016ec4:	e00b      	b.n	8016ede <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016ec6:	2303      	movs	r3, #3
 8016ec8:	73fb      	strb	r3, [r7, #15]
    break;
 8016eca:	e008      	b.n	8016ede <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ecc:	2301      	movs	r3, #1
 8016ece:	73fb      	strb	r3, [r7, #15]
    break;
 8016ed0:	e005      	b.n	8016ede <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016ed2:	2303      	movs	r3, #3
 8016ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8016ed6:	e002      	b.n	8016ede <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ed8:	2303      	movs	r3, #3
 8016eda:	73fb      	strb	r3, [r7, #15]
    break;
 8016edc:	bf00      	nop
  }
  return usb_status;
 8016ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3714      	adds	r7, #20
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eea:	4770      	bx	lr

08016eec <siprintf>:
 8016eec:	b40e      	push	{r1, r2, r3}
 8016eee:	b510      	push	{r4, lr}
 8016ef0:	b09d      	sub	sp, #116	@ 0x74
 8016ef2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016ef4:	9002      	str	r0, [sp, #8]
 8016ef6:	9006      	str	r0, [sp, #24]
 8016ef8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016efc:	480a      	ldr	r0, [pc, #40]	@ (8016f28 <siprintf+0x3c>)
 8016efe:	9107      	str	r1, [sp, #28]
 8016f00:	9104      	str	r1, [sp, #16]
 8016f02:	490a      	ldr	r1, [pc, #40]	@ (8016f2c <siprintf+0x40>)
 8016f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f08:	9105      	str	r1, [sp, #20]
 8016f0a:	2400      	movs	r4, #0
 8016f0c:	a902      	add	r1, sp, #8
 8016f0e:	6800      	ldr	r0, [r0, #0]
 8016f10:	9301      	str	r3, [sp, #4]
 8016f12:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016f14:	f000 f9a2 	bl	801725c <_svfiprintf_r>
 8016f18:	9b02      	ldr	r3, [sp, #8]
 8016f1a:	701c      	strb	r4, [r3, #0]
 8016f1c:	b01d      	add	sp, #116	@ 0x74
 8016f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f22:	b003      	add	sp, #12
 8016f24:	4770      	bx	lr
 8016f26:	bf00      	nop
 8016f28:	24000108 	.word	0x24000108
 8016f2c:	ffff0208 	.word	0xffff0208

08016f30 <memset>:
 8016f30:	4402      	add	r2, r0
 8016f32:	4603      	mov	r3, r0
 8016f34:	4293      	cmp	r3, r2
 8016f36:	d100      	bne.n	8016f3a <memset+0xa>
 8016f38:	4770      	bx	lr
 8016f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8016f3e:	e7f9      	b.n	8016f34 <memset+0x4>

08016f40 <__errno>:
 8016f40:	4b01      	ldr	r3, [pc, #4]	@ (8016f48 <__errno+0x8>)
 8016f42:	6818      	ldr	r0, [r3, #0]
 8016f44:	4770      	bx	lr
 8016f46:	bf00      	nop
 8016f48:	24000108 	.word	0x24000108

08016f4c <__libc_init_array>:
 8016f4c:	b570      	push	{r4, r5, r6, lr}
 8016f4e:	4d0d      	ldr	r5, [pc, #52]	@ (8016f84 <__libc_init_array+0x38>)
 8016f50:	4c0d      	ldr	r4, [pc, #52]	@ (8016f88 <__libc_init_array+0x3c>)
 8016f52:	1b64      	subs	r4, r4, r5
 8016f54:	10a4      	asrs	r4, r4, #2
 8016f56:	2600      	movs	r6, #0
 8016f58:	42a6      	cmp	r6, r4
 8016f5a:	d109      	bne.n	8016f70 <__libc_init_array+0x24>
 8016f5c:	4d0b      	ldr	r5, [pc, #44]	@ (8016f8c <__libc_init_array+0x40>)
 8016f5e:	4c0c      	ldr	r4, [pc, #48]	@ (8016f90 <__libc_init_array+0x44>)
 8016f60:	f000 fc64 	bl	801782c <_init>
 8016f64:	1b64      	subs	r4, r4, r5
 8016f66:	10a4      	asrs	r4, r4, #2
 8016f68:	2600      	movs	r6, #0
 8016f6a:	42a6      	cmp	r6, r4
 8016f6c:	d105      	bne.n	8016f7a <__libc_init_array+0x2e>
 8016f6e:	bd70      	pop	{r4, r5, r6, pc}
 8016f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f74:	4798      	blx	r3
 8016f76:	3601      	adds	r6, #1
 8016f78:	e7ee      	b.n	8016f58 <__libc_init_array+0xc>
 8016f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f7e:	4798      	blx	r3
 8016f80:	3601      	adds	r6, #1
 8016f82:	e7f2      	b.n	8016f6a <__libc_init_array+0x1e>
 8016f84:	08017e7c 	.word	0x08017e7c
 8016f88:	08017e7c 	.word	0x08017e7c
 8016f8c:	08017e7c 	.word	0x08017e7c
 8016f90:	08017e80 	.word	0x08017e80

08016f94 <__retarget_lock_acquire_recursive>:
 8016f94:	4770      	bx	lr

08016f96 <__retarget_lock_release_recursive>:
 8016f96:	4770      	bx	lr

08016f98 <memcpy>:
 8016f98:	440a      	add	r2, r1
 8016f9a:	4291      	cmp	r1, r2
 8016f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016fa0:	d100      	bne.n	8016fa4 <memcpy+0xc>
 8016fa2:	4770      	bx	lr
 8016fa4:	b510      	push	{r4, lr}
 8016fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016fae:	4291      	cmp	r1, r2
 8016fb0:	d1f9      	bne.n	8016fa6 <memcpy+0xe>
 8016fb2:	bd10      	pop	{r4, pc}

08016fb4 <_free_r>:
 8016fb4:	b538      	push	{r3, r4, r5, lr}
 8016fb6:	4605      	mov	r5, r0
 8016fb8:	2900      	cmp	r1, #0
 8016fba:	d041      	beq.n	8017040 <_free_r+0x8c>
 8016fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fc0:	1f0c      	subs	r4, r1, #4
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	bfb8      	it	lt
 8016fc6:	18e4      	addlt	r4, r4, r3
 8016fc8:	f000 f8e0 	bl	801718c <__malloc_lock>
 8016fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8017044 <_free_r+0x90>)
 8016fce:	6813      	ldr	r3, [r2, #0]
 8016fd0:	b933      	cbnz	r3, 8016fe0 <_free_r+0x2c>
 8016fd2:	6063      	str	r3, [r4, #4]
 8016fd4:	6014      	str	r4, [r2, #0]
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fdc:	f000 b8dc 	b.w	8017198 <__malloc_unlock>
 8016fe0:	42a3      	cmp	r3, r4
 8016fe2:	d908      	bls.n	8016ff6 <_free_r+0x42>
 8016fe4:	6820      	ldr	r0, [r4, #0]
 8016fe6:	1821      	adds	r1, r4, r0
 8016fe8:	428b      	cmp	r3, r1
 8016fea:	bf01      	itttt	eq
 8016fec:	6819      	ldreq	r1, [r3, #0]
 8016fee:	685b      	ldreq	r3, [r3, #4]
 8016ff0:	1809      	addeq	r1, r1, r0
 8016ff2:	6021      	streq	r1, [r4, #0]
 8016ff4:	e7ed      	b.n	8016fd2 <_free_r+0x1e>
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	685b      	ldr	r3, [r3, #4]
 8016ffa:	b10b      	cbz	r3, 8017000 <_free_r+0x4c>
 8016ffc:	42a3      	cmp	r3, r4
 8016ffe:	d9fa      	bls.n	8016ff6 <_free_r+0x42>
 8017000:	6811      	ldr	r1, [r2, #0]
 8017002:	1850      	adds	r0, r2, r1
 8017004:	42a0      	cmp	r0, r4
 8017006:	d10b      	bne.n	8017020 <_free_r+0x6c>
 8017008:	6820      	ldr	r0, [r4, #0]
 801700a:	4401      	add	r1, r0
 801700c:	1850      	adds	r0, r2, r1
 801700e:	4283      	cmp	r3, r0
 8017010:	6011      	str	r1, [r2, #0]
 8017012:	d1e0      	bne.n	8016fd6 <_free_r+0x22>
 8017014:	6818      	ldr	r0, [r3, #0]
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	6053      	str	r3, [r2, #4]
 801701a:	4408      	add	r0, r1
 801701c:	6010      	str	r0, [r2, #0]
 801701e:	e7da      	b.n	8016fd6 <_free_r+0x22>
 8017020:	d902      	bls.n	8017028 <_free_r+0x74>
 8017022:	230c      	movs	r3, #12
 8017024:	602b      	str	r3, [r5, #0]
 8017026:	e7d6      	b.n	8016fd6 <_free_r+0x22>
 8017028:	6820      	ldr	r0, [r4, #0]
 801702a:	1821      	adds	r1, r4, r0
 801702c:	428b      	cmp	r3, r1
 801702e:	bf04      	itt	eq
 8017030:	6819      	ldreq	r1, [r3, #0]
 8017032:	685b      	ldreq	r3, [r3, #4]
 8017034:	6063      	str	r3, [r4, #4]
 8017036:	bf04      	itt	eq
 8017038:	1809      	addeq	r1, r1, r0
 801703a:	6021      	streq	r1, [r4, #0]
 801703c:	6054      	str	r4, [r2, #4]
 801703e:	e7ca      	b.n	8016fd6 <_free_r+0x22>
 8017040:	bd38      	pop	{r3, r4, r5, pc}
 8017042:	bf00      	nop
 8017044:	240284b8 	.word	0x240284b8

08017048 <sbrk_aligned>:
 8017048:	b570      	push	{r4, r5, r6, lr}
 801704a:	4e0f      	ldr	r6, [pc, #60]	@ (8017088 <sbrk_aligned+0x40>)
 801704c:	460c      	mov	r4, r1
 801704e:	6831      	ldr	r1, [r6, #0]
 8017050:	4605      	mov	r5, r0
 8017052:	b911      	cbnz	r1, 801705a <sbrk_aligned+0x12>
 8017054:	f000 fba4 	bl	80177a0 <_sbrk_r>
 8017058:	6030      	str	r0, [r6, #0]
 801705a:	4621      	mov	r1, r4
 801705c:	4628      	mov	r0, r5
 801705e:	f000 fb9f 	bl	80177a0 <_sbrk_r>
 8017062:	1c43      	adds	r3, r0, #1
 8017064:	d103      	bne.n	801706e <sbrk_aligned+0x26>
 8017066:	f04f 34ff 	mov.w	r4, #4294967295
 801706a:	4620      	mov	r0, r4
 801706c:	bd70      	pop	{r4, r5, r6, pc}
 801706e:	1cc4      	adds	r4, r0, #3
 8017070:	f024 0403 	bic.w	r4, r4, #3
 8017074:	42a0      	cmp	r0, r4
 8017076:	d0f8      	beq.n	801706a <sbrk_aligned+0x22>
 8017078:	1a21      	subs	r1, r4, r0
 801707a:	4628      	mov	r0, r5
 801707c:	f000 fb90 	bl	80177a0 <_sbrk_r>
 8017080:	3001      	adds	r0, #1
 8017082:	d1f2      	bne.n	801706a <sbrk_aligned+0x22>
 8017084:	e7ef      	b.n	8017066 <sbrk_aligned+0x1e>
 8017086:	bf00      	nop
 8017088:	240284b4 	.word	0x240284b4

0801708c <_malloc_r>:
 801708c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017090:	1ccd      	adds	r5, r1, #3
 8017092:	f025 0503 	bic.w	r5, r5, #3
 8017096:	3508      	adds	r5, #8
 8017098:	2d0c      	cmp	r5, #12
 801709a:	bf38      	it	cc
 801709c:	250c      	movcc	r5, #12
 801709e:	2d00      	cmp	r5, #0
 80170a0:	4606      	mov	r6, r0
 80170a2:	db01      	blt.n	80170a8 <_malloc_r+0x1c>
 80170a4:	42a9      	cmp	r1, r5
 80170a6:	d904      	bls.n	80170b2 <_malloc_r+0x26>
 80170a8:	230c      	movs	r3, #12
 80170aa:	6033      	str	r3, [r6, #0]
 80170ac:	2000      	movs	r0, #0
 80170ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017188 <_malloc_r+0xfc>
 80170b6:	f000 f869 	bl	801718c <__malloc_lock>
 80170ba:	f8d8 3000 	ldr.w	r3, [r8]
 80170be:	461c      	mov	r4, r3
 80170c0:	bb44      	cbnz	r4, 8017114 <_malloc_r+0x88>
 80170c2:	4629      	mov	r1, r5
 80170c4:	4630      	mov	r0, r6
 80170c6:	f7ff ffbf 	bl	8017048 <sbrk_aligned>
 80170ca:	1c43      	adds	r3, r0, #1
 80170cc:	4604      	mov	r4, r0
 80170ce:	d158      	bne.n	8017182 <_malloc_r+0xf6>
 80170d0:	f8d8 4000 	ldr.w	r4, [r8]
 80170d4:	4627      	mov	r7, r4
 80170d6:	2f00      	cmp	r7, #0
 80170d8:	d143      	bne.n	8017162 <_malloc_r+0xd6>
 80170da:	2c00      	cmp	r4, #0
 80170dc:	d04b      	beq.n	8017176 <_malloc_r+0xea>
 80170de:	6823      	ldr	r3, [r4, #0]
 80170e0:	4639      	mov	r1, r7
 80170e2:	4630      	mov	r0, r6
 80170e4:	eb04 0903 	add.w	r9, r4, r3
 80170e8:	f000 fb5a 	bl	80177a0 <_sbrk_r>
 80170ec:	4581      	cmp	r9, r0
 80170ee:	d142      	bne.n	8017176 <_malloc_r+0xea>
 80170f0:	6821      	ldr	r1, [r4, #0]
 80170f2:	1a6d      	subs	r5, r5, r1
 80170f4:	4629      	mov	r1, r5
 80170f6:	4630      	mov	r0, r6
 80170f8:	f7ff ffa6 	bl	8017048 <sbrk_aligned>
 80170fc:	3001      	adds	r0, #1
 80170fe:	d03a      	beq.n	8017176 <_malloc_r+0xea>
 8017100:	6823      	ldr	r3, [r4, #0]
 8017102:	442b      	add	r3, r5
 8017104:	6023      	str	r3, [r4, #0]
 8017106:	f8d8 3000 	ldr.w	r3, [r8]
 801710a:	685a      	ldr	r2, [r3, #4]
 801710c:	bb62      	cbnz	r2, 8017168 <_malloc_r+0xdc>
 801710e:	f8c8 7000 	str.w	r7, [r8]
 8017112:	e00f      	b.n	8017134 <_malloc_r+0xa8>
 8017114:	6822      	ldr	r2, [r4, #0]
 8017116:	1b52      	subs	r2, r2, r5
 8017118:	d420      	bmi.n	801715c <_malloc_r+0xd0>
 801711a:	2a0b      	cmp	r2, #11
 801711c:	d917      	bls.n	801714e <_malloc_r+0xc2>
 801711e:	1961      	adds	r1, r4, r5
 8017120:	42a3      	cmp	r3, r4
 8017122:	6025      	str	r5, [r4, #0]
 8017124:	bf18      	it	ne
 8017126:	6059      	strne	r1, [r3, #4]
 8017128:	6863      	ldr	r3, [r4, #4]
 801712a:	bf08      	it	eq
 801712c:	f8c8 1000 	streq.w	r1, [r8]
 8017130:	5162      	str	r2, [r4, r5]
 8017132:	604b      	str	r3, [r1, #4]
 8017134:	4630      	mov	r0, r6
 8017136:	f000 f82f 	bl	8017198 <__malloc_unlock>
 801713a:	f104 000b 	add.w	r0, r4, #11
 801713e:	1d23      	adds	r3, r4, #4
 8017140:	f020 0007 	bic.w	r0, r0, #7
 8017144:	1ac2      	subs	r2, r0, r3
 8017146:	bf1c      	itt	ne
 8017148:	1a1b      	subne	r3, r3, r0
 801714a:	50a3      	strne	r3, [r4, r2]
 801714c:	e7af      	b.n	80170ae <_malloc_r+0x22>
 801714e:	6862      	ldr	r2, [r4, #4]
 8017150:	42a3      	cmp	r3, r4
 8017152:	bf0c      	ite	eq
 8017154:	f8c8 2000 	streq.w	r2, [r8]
 8017158:	605a      	strne	r2, [r3, #4]
 801715a:	e7eb      	b.n	8017134 <_malloc_r+0xa8>
 801715c:	4623      	mov	r3, r4
 801715e:	6864      	ldr	r4, [r4, #4]
 8017160:	e7ae      	b.n	80170c0 <_malloc_r+0x34>
 8017162:	463c      	mov	r4, r7
 8017164:	687f      	ldr	r7, [r7, #4]
 8017166:	e7b6      	b.n	80170d6 <_malloc_r+0x4a>
 8017168:	461a      	mov	r2, r3
 801716a:	685b      	ldr	r3, [r3, #4]
 801716c:	42a3      	cmp	r3, r4
 801716e:	d1fb      	bne.n	8017168 <_malloc_r+0xdc>
 8017170:	2300      	movs	r3, #0
 8017172:	6053      	str	r3, [r2, #4]
 8017174:	e7de      	b.n	8017134 <_malloc_r+0xa8>
 8017176:	230c      	movs	r3, #12
 8017178:	6033      	str	r3, [r6, #0]
 801717a:	4630      	mov	r0, r6
 801717c:	f000 f80c 	bl	8017198 <__malloc_unlock>
 8017180:	e794      	b.n	80170ac <_malloc_r+0x20>
 8017182:	6005      	str	r5, [r0, #0]
 8017184:	e7d6      	b.n	8017134 <_malloc_r+0xa8>
 8017186:	bf00      	nop
 8017188:	240284b8 	.word	0x240284b8

0801718c <__malloc_lock>:
 801718c:	4801      	ldr	r0, [pc, #4]	@ (8017194 <__malloc_lock+0x8>)
 801718e:	f7ff bf01 	b.w	8016f94 <__retarget_lock_acquire_recursive>
 8017192:	bf00      	nop
 8017194:	240284b0 	.word	0x240284b0

08017198 <__malloc_unlock>:
 8017198:	4801      	ldr	r0, [pc, #4]	@ (80171a0 <__malloc_unlock+0x8>)
 801719a:	f7ff befc 	b.w	8016f96 <__retarget_lock_release_recursive>
 801719e:	bf00      	nop
 80171a0:	240284b0 	.word	0x240284b0

080171a4 <__ssputs_r>:
 80171a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171a8:	688e      	ldr	r6, [r1, #8]
 80171aa:	461f      	mov	r7, r3
 80171ac:	42be      	cmp	r6, r7
 80171ae:	680b      	ldr	r3, [r1, #0]
 80171b0:	4682      	mov	sl, r0
 80171b2:	460c      	mov	r4, r1
 80171b4:	4690      	mov	r8, r2
 80171b6:	d82d      	bhi.n	8017214 <__ssputs_r+0x70>
 80171b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80171bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80171c0:	d026      	beq.n	8017210 <__ssputs_r+0x6c>
 80171c2:	6965      	ldr	r5, [r4, #20]
 80171c4:	6909      	ldr	r1, [r1, #16]
 80171c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171ca:	eba3 0901 	sub.w	r9, r3, r1
 80171ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80171d2:	1c7b      	adds	r3, r7, #1
 80171d4:	444b      	add	r3, r9
 80171d6:	106d      	asrs	r5, r5, #1
 80171d8:	429d      	cmp	r5, r3
 80171da:	bf38      	it	cc
 80171dc:	461d      	movcc	r5, r3
 80171de:	0553      	lsls	r3, r2, #21
 80171e0:	d527      	bpl.n	8017232 <__ssputs_r+0x8e>
 80171e2:	4629      	mov	r1, r5
 80171e4:	f7ff ff52 	bl	801708c <_malloc_r>
 80171e8:	4606      	mov	r6, r0
 80171ea:	b360      	cbz	r0, 8017246 <__ssputs_r+0xa2>
 80171ec:	6921      	ldr	r1, [r4, #16]
 80171ee:	464a      	mov	r2, r9
 80171f0:	f7ff fed2 	bl	8016f98 <memcpy>
 80171f4:	89a3      	ldrh	r3, [r4, #12]
 80171f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80171fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80171fe:	81a3      	strh	r3, [r4, #12]
 8017200:	6126      	str	r6, [r4, #16]
 8017202:	6165      	str	r5, [r4, #20]
 8017204:	444e      	add	r6, r9
 8017206:	eba5 0509 	sub.w	r5, r5, r9
 801720a:	6026      	str	r6, [r4, #0]
 801720c:	60a5      	str	r5, [r4, #8]
 801720e:	463e      	mov	r6, r7
 8017210:	42be      	cmp	r6, r7
 8017212:	d900      	bls.n	8017216 <__ssputs_r+0x72>
 8017214:	463e      	mov	r6, r7
 8017216:	6820      	ldr	r0, [r4, #0]
 8017218:	4632      	mov	r2, r6
 801721a:	4641      	mov	r1, r8
 801721c:	f000 faa6 	bl	801776c <memmove>
 8017220:	68a3      	ldr	r3, [r4, #8]
 8017222:	1b9b      	subs	r3, r3, r6
 8017224:	60a3      	str	r3, [r4, #8]
 8017226:	6823      	ldr	r3, [r4, #0]
 8017228:	4433      	add	r3, r6
 801722a:	6023      	str	r3, [r4, #0]
 801722c:	2000      	movs	r0, #0
 801722e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017232:	462a      	mov	r2, r5
 8017234:	f000 fac4 	bl	80177c0 <_realloc_r>
 8017238:	4606      	mov	r6, r0
 801723a:	2800      	cmp	r0, #0
 801723c:	d1e0      	bne.n	8017200 <__ssputs_r+0x5c>
 801723e:	6921      	ldr	r1, [r4, #16]
 8017240:	4650      	mov	r0, sl
 8017242:	f7ff feb7 	bl	8016fb4 <_free_r>
 8017246:	230c      	movs	r3, #12
 8017248:	f8ca 3000 	str.w	r3, [sl]
 801724c:	89a3      	ldrh	r3, [r4, #12]
 801724e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017252:	81a3      	strh	r3, [r4, #12]
 8017254:	f04f 30ff 	mov.w	r0, #4294967295
 8017258:	e7e9      	b.n	801722e <__ssputs_r+0x8a>
	...

0801725c <_svfiprintf_r>:
 801725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017260:	4698      	mov	r8, r3
 8017262:	898b      	ldrh	r3, [r1, #12]
 8017264:	061b      	lsls	r3, r3, #24
 8017266:	b09d      	sub	sp, #116	@ 0x74
 8017268:	4607      	mov	r7, r0
 801726a:	460d      	mov	r5, r1
 801726c:	4614      	mov	r4, r2
 801726e:	d510      	bpl.n	8017292 <_svfiprintf_r+0x36>
 8017270:	690b      	ldr	r3, [r1, #16]
 8017272:	b973      	cbnz	r3, 8017292 <_svfiprintf_r+0x36>
 8017274:	2140      	movs	r1, #64	@ 0x40
 8017276:	f7ff ff09 	bl	801708c <_malloc_r>
 801727a:	6028      	str	r0, [r5, #0]
 801727c:	6128      	str	r0, [r5, #16]
 801727e:	b930      	cbnz	r0, 801728e <_svfiprintf_r+0x32>
 8017280:	230c      	movs	r3, #12
 8017282:	603b      	str	r3, [r7, #0]
 8017284:	f04f 30ff 	mov.w	r0, #4294967295
 8017288:	b01d      	add	sp, #116	@ 0x74
 801728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801728e:	2340      	movs	r3, #64	@ 0x40
 8017290:	616b      	str	r3, [r5, #20]
 8017292:	2300      	movs	r3, #0
 8017294:	9309      	str	r3, [sp, #36]	@ 0x24
 8017296:	2320      	movs	r3, #32
 8017298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801729c:	f8cd 800c 	str.w	r8, [sp, #12]
 80172a0:	2330      	movs	r3, #48	@ 0x30
 80172a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017440 <_svfiprintf_r+0x1e4>
 80172a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80172aa:	f04f 0901 	mov.w	r9, #1
 80172ae:	4623      	mov	r3, r4
 80172b0:	469a      	mov	sl, r3
 80172b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172b6:	b10a      	cbz	r2, 80172bc <_svfiprintf_r+0x60>
 80172b8:	2a25      	cmp	r2, #37	@ 0x25
 80172ba:	d1f9      	bne.n	80172b0 <_svfiprintf_r+0x54>
 80172bc:	ebba 0b04 	subs.w	fp, sl, r4
 80172c0:	d00b      	beq.n	80172da <_svfiprintf_r+0x7e>
 80172c2:	465b      	mov	r3, fp
 80172c4:	4622      	mov	r2, r4
 80172c6:	4629      	mov	r1, r5
 80172c8:	4638      	mov	r0, r7
 80172ca:	f7ff ff6b 	bl	80171a4 <__ssputs_r>
 80172ce:	3001      	adds	r0, #1
 80172d0:	f000 80a7 	beq.w	8017422 <_svfiprintf_r+0x1c6>
 80172d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80172d6:	445a      	add	r2, fp
 80172d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80172da:	f89a 3000 	ldrb.w	r3, [sl]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	f000 809f 	beq.w	8017422 <_svfiprintf_r+0x1c6>
 80172e4:	2300      	movs	r3, #0
 80172e6:	f04f 32ff 	mov.w	r2, #4294967295
 80172ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172ee:	f10a 0a01 	add.w	sl, sl, #1
 80172f2:	9304      	str	r3, [sp, #16]
 80172f4:	9307      	str	r3, [sp, #28]
 80172f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80172fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80172fc:	4654      	mov	r4, sl
 80172fe:	2205      	movs	r2, #5
 8017300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017304:	484e      	ldr	r0, [pc, #312]	@ (8017440 <_svfiprintf_r+0x1e4>)
 8017306:	f7e8 fff3 	bl	80002f0 <memchr>
 801730a:	9a04      	ldr	r2, [sp, #16]
 801730c:	b9d8      	cbnz	r0, 8017346 <_svfiprintf_r+0xea>
 801730e:	06d0      	lsls	r0, r2, #27
 8017310:	bf44      	itt	mi
 8017312:	2320      	movmi	r3, #32
 8017314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017318:	0711      	lsls	r1, r2, #28
 801731a:	bf44      	itt	mi
 801731c:	232b      	movmi	r3, #43	@ 0x2b
 801731e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017322:	f89a 3000 	ldrb.w	r3, [sl]
 8017326:	2b2a      	cmp	r3, #42	@ 0x2a
 8017328:	d015      	beq.n	8017356 <_svfiprintf_r+0xfa>
 801732a:	9a07      	ldr	r2, [sp, #28]
 801732c:	4654      	mov	r4, sl
 801732e:	2000      	movs	r0, #0
 8017330:	f04f 0c0a 	mov.w	ip, #10
 8017334:	4621      	mov	r1, r4
 8017336:	f811 3b01 	ldrb.w	r3, [r1], #1
 801733a:	3b30      	subs	r3, #48	@ 0x30
 801733c:	2b09      	cmp	r3, #9
 801733e:	d94b      	bls.n	80173d8 <_svfiprintf_r+0x17c>
 8017340:	b1b0      	cbz	r0, 8017370 <_svfiprintf_r+0x114>
 8017342:	9207      	str	r2, [sp, #28]
 8017344:	e014      	b.n	8017370 <_svfiprintf_r+0x114>
 8017346:	eba0 0308 	sub.w	r3, r0, r8
 801734a:	fa09 f303 	lsl.w	r3, r9, r3
 801734e:	4313      	orrs	r3, r2
 8017350:	9304      	str	r3, [sp, #16]
 8017352:	46a2      	mov	sl, r4
 8017354:	e7d2      	b.n	80172fc <_svfiprintf_r+0xa0>
 8017356:	9b03      	ldr	r3, [sp, #12]
 8017358:	1d19      	adds	r1, r3, #4
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	9103      	str	r1, [sp, #12]
 801735e:	2b00      	cmp	r3, #0
 8017360:	bfbb      	ittet	lt
 8017362:	425b      	neglt	r3, r3
 8017364:	f042 0202 	orrlt.w	r2, r2, #2
 8017368:	9307      	strge	r3, [sp, #28]
 801736a:	9307      	strlt	r3, [sp, #28]
 801736c:	bfb8      	it	lt
 801736e:	9204      	strlt	r2, [sp, #16]
 8017370:	7823      	ldrb	r3, [r4, #0]
 8017372:	2b2e      	cmp	r3, #46	@ 0x2e
 8017374:	d10a      	bne.n	801738c <_svfiprintf_r+0x130>
 8017376:	7863      	ldrb	r3, [r4, #1]
 8017378:	2b2a      	cmp	r3, #42	@ 0x2a
 801737a:	d132      	bne.n	80173e2 <_svfiprintf_r+0x186>
 801737c:	9b03      	ldr	r3, [sp, #12]
 801737e:	1d1a      	adds	r2, r3, #4
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	9203      	str	r2, [sp, #12]
 8017384:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017388:	3402      	adds	r4, #2
 801738a:	9305      	str	r3, [sp, #20]
 801738c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017450 <_svfiprintf_r+0x1f4>
 8017390:	7821      	ldrb	r1, [r4, #0]
 8017392:	2203      	movs	r2, #3
 8017394:	4650      	mov	r0, sl
 8017396:	f7e8 ffab 	bl	80002f0 <memchr>
 801739a:	b138      	cbz	r0, 80173ac <_svfiprintf_r+0x150>
 801739c:	9b04      	ldr	r3, [sp, #16]
 801739e:	eba0 000a 	sub.w	r0, r0, sl
 80173a2:	2240      	movs	r2, #64	@ 0x40
 80173a4:	4082      	lsls	r2, r0
 80173a6:	4313      	orrs	r3, r2
 80173a8:	3401      	adds	r4, #1
 80173aa:	9304      	str	r3, [sp, #16]
 80173ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173b0:	4824      	ldr	r0, [pc, #144]	@ (8017444 <_svfiprintf_r+0x1e8>)
 80173b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80173b6:	2206      	movs	r2, #6
 80173b8:	f7e8 ff9a 	bl	80002f0 <memchr>
 80173bc:	2800      	cmp	r0, #0
 80173be:	d036      	beq.n	801742e <_svfiprintf_r+0x1d2>
 80173c0:	4b21      	ldr	r3, [pc, #132]	@ (8017448 <_svfiprintf_r+0x1ec>)
 80173c2:	bb1b      	cbnz	r3, 801740c <_svfiprintf_r+0x1b0>
 80173c4:	9b03      	ldr	r3, [sp, #12]
 80173c6:	3307      	adds	r3, #7
 80173c8:	f023 0307 	bic.w	r3, r3, #7
 80173cc:	3308      	adds	r3, #8
 80173ce:	9303      	str	r3, [sp, #12]
 80173d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173d2:	4433      	add	r3, r6
 80173d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80173d6:	e76a      	b.n	80172ae <_svfiprintf_r+0x52>
 80173d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80173dc:	460c      	mov	r4, r1
 80173de:	2001      	movs	r0, #1
 80173e0:	e7a8      	b.n	8017334 <_svfiprintf_r+0xd8>
 80173e2:	2300      	movs	r3, #0
 80173e4:	3401      	adds	r4, #1
 80173e6:	9305      	str	r3, [sp, #20]
 80173e8:	4619      	mov	r1, r3
 80173ea:	f04f 0c0a 	mov.w	ip, #10
 80173ee:	4620      	mov	r0, r4
 80173f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173f4:	3a30      	subs	r2, #48	@ 0x30
 80173f6:	2a09      	cmp	r2, #9
 80173f8:	d903      	bls.n	8017402 <_svfiprintf_r+0x1a6>
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d0c6      	beq.n	801738c <_svfiprintf_r+0x130>
 80173fe:	9105      	str	r1, [sp, #20]
 8017400:	e7c4      	b.n	801738c <_svfiprintf_r+0x130>
 8017402:	fb0c 2101 	mla	r1, ip, r1, r2
 8017406:	4604      	mov	r4, r0
 8017408:	2301      	movs	r3, #1
 801740a:	e7f0      	b.n	80173ee <_svfiprintf_r+0x192>
 801740c:	ab03      	add	r3, sp, #12
 801740e:	9300      	str	r3, [sp, #0]
 8017410:	462a      	mov	r2, r5
 8017412:	4b0e      	ldr	r3, [pc, #56]	@ (801744c <_svfiprintf_r+0x1f0>)
 8017414:	a904      	add	r1, sp, #16
 8017416:	4638      	mov	r0, r7
 8017418:	f3af 8000 	nop.w
 801741c:	1c42      	adds	r2, r0, #1
 801741e:	4606      	mov	r6, r0
 8017420:	d1d6      	bne.n	80173d0 <_svfiprintf_r+0x174>
 8017422:	89ab      	ldrh	r3, [r5, #12]
 8017424:	065b      	lsls	r3, r3, #25
 8017426:	f53f af2d 	bmi.w	8017284 <_svfiprintf_r+0x28>
 801742a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801742c:	e72c      	b.n	8017288 <_svfiprintf_r+0x2c>
 801742e:	ab03      	add	r3, sp, #12
 8017430:	9300      	str	r3, [sp, #0]
 8017432:	462a      	mov	r2, r5
 8017434:	4b05      	ldr	r3, [pc, #20]	@ (801744c <_svfiprintf_r+0x1f0>)
 8017436:	a904      	add	r1, sp, #16
 8017438:	4638      	mov	r0, r7
 801743a:	f000 f879 	bl	8017530 <_printf_i>
 801743e:	e7ed      	b.n	801741c <_svfiprintf_r+0x1c0>
 8017440:	08017e40 	.word	0x08017e40
 8017444:	08017e4a 	.word	0x08017e4a
 8017448:	00000000 	.word	0x00000000
 801744c:	080171a5 	.word	0x080171a5
 8017450:	08017e46 	.word	0x08017e46

08017454 <_printf_common>:
 8017454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017458:	4616      	mov	r6, r2
 801745a:	4698      	mov	r8, r3
 801745c:	688a      	ldr	r2, [r1, #8]
 801745e:	690b      	ldr	r3, [r1, #16]
 8017460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017464:	4293      	cmp	r3, r2
 8017466:	bfb8      	it	lt
 8017468:	4613      	movlt	r3, r2
 801746a:	6033      	str	r3, [r6, #0]
 801746c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017470:	4607      	mov	r7, r0
 8017472:	460c      	mov	r4, r1
 8017474:	b10a      	cbz	r2, 801747a <_printf_common+0x26>
 8017476:	3301      	adds	r3, #1
 8017478:	6033      	str	r3, [r6, #0]
 801747a:	6823      	ldr	r3, [r4, #0]
 801747c:	0699      	lsls	r1, r3, #26
 801747e:	bf42      	ittt	mi
 8017480:	6833      	ldrmi	r3, [r6, #0]
 8017482:	3302      	addmi	r3, #2
 8017484:	6033      	strmi	r3, [r6, #0]
 8017486:	6825      	ldr	r5, [r4, #0]
 8017488:	f015 0506 	ands.w	r5, r5, #6
 801748c:	d106      	bne.n	801749c <_printf_common+0x48>
 801748e:	f104 0a19 	add.w	sl, r4, #25
 8017492:	68e3      	ldr	r3, [r4, #12]
 8017494:	6832      	ldr	r2, [r6, #0]
 8017496:	1a9b      	subs	r3, r3, r2
 8017498:	42ab      	cmp	r3, r5
 801749a:	dc26      	bgt.n	80174ea <_printf_common+0x96>
 801749c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80174a0:	6822      	ldr	r2, [r4, #0]
 80174a2:	3b00      	subs	r3, #0
 80174a4:	bf18      	it	ne
 80174a6:	2301      	movne	r3, #1
 80174a8:	0692      	lsls	r2, r2, #26
 80174aa:	d42b      	bmi.n	8017504 <_printf_common+0xb0>
 80174ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80174b0:	4641      	mov	r1, r8
 80174b2:	4638      	mov	r0, r7
 80174b4:	47c8      	blx	r9
 80174b6:	3001      	adds	r0, #1
 80174b8:	d01e      	beq.n	80174f8 <_printf_common+0xa4>
 80174ba:	6823      	ldr	r3, [r4, #0]
 80174bc:	6922      	ldr	r2, [r4, #16]
 80174be:	f003 0306 	and.w	r3, r3, #6
 80174c2:	2b04      	cmp	r3, #4
 80174c4:	bf02      	ittt	eq
 80174c6:	68e5      	ldreq	r5, [r4, #12]
 80174c8:	6833      	ldreq	r3, [r6, #0]
 80174ca:	1aed      	subeq	r5, r5, r3
 80174cc:	68a3      	ldr	r3, [r4, #8]
 80174ce:	bf0c      	ite	eq
 80174d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80174d4:	2500      	movne	r5, #0
 80174d6:	4293      	cmp	r3, r2
 80174d8:	bfc4      	itt	gt
 80174da:	1a9b      	subgt	r3, r3, r2
 80174dc:	18ed      	addgt	r5, r5, r3
 80174de:	2600      	movs	r6, #0
 80174e0:	341a      	adds	r4, #26
 80174e2:	42b5      	cmp	r5, r6
 80174e4:	d11a      	bne.n	801751c <_printf_common+0xc8>
 80174e6:	2000      	movs	r0, #0
 80174e8:	e008      	b.n	80174fc <_printf_common+0xa8>
 80174ea:	2301      	movs	r3, #1
 80174ec:	4652      	mov	r2, sl
 80174ee:	4641      	mov	r1, r8
 80174f0:	4638      	mov	r0, r7
 80174f2:	47c8      	blx	r9
 80174f4:	3001      	adds	r0, #1
 80174f6:	d103      	bne.n	8017500 <_printf_common+0xac>
 80174f8:	f04f 30ff 	mov.w	r0, #4294967295
 80174fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017500:	3501      	adds	r5, #1
 8017502:	e7c6      	b.n	8017492 <_printf_common+0x3e>
 8017504:	18e1      	adds	r1, r4, r3
 8017506:	1c5a      	adds	r2, r3, #1
 8017508:	2030      	movs	r0, #48	@ 0x30
 801750a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801750e:	4422      	add	r2, r4
 8017510:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017514:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017518:	3302      	adds	r3, #2
 801751a:	e7c7      	b.n	80174ac <_printf_common+0x58>
 801751c:	2301      	movs	r3, #1
 801751e:	4622      	mov	r2, r4
 8017520:	4641      	mov	r1, r8
 8017522:	4638      	mov	r0, r7
 8017524:	47c8      	blx	r9
 8017526:	3001      	adds	r0, #1
 8017528:	d0e6      	beq.n	80174f8 <_printf_common+0xa4>
 801752a:	3601      	adds	r6, #1
 801752c:	e7d9      	b.n	80174e2 <_printf_common+0x8e>
	...

08017530 <_printf_i>:
 8017530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017534:	7e0f      	ldrb	r7, [r1, #24]
 8017536:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017538:	2f78      	cmp	r7, #120	@ 0x78
 801753a:	4691      	mov	r9, r2
 801753c:	4680      	mov	r8, r0
 801753e:	460c      	mov	r4, r1
 8017540:	469a      	mov	sl, r3
 8017542:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017546:	d807      	bhi.n	8017558 <_printf_i+0x28>
 8017548:	2f62      	cmp	r7, #98	@ 0x62
 801754a:	d80a      	bhi.n	8017562 <_printf_i+0x32>
 801754c:	2f00      	cmp	r7, #0
 801754e:	f000 80d1 	beq.w	80176f4 <_printf_i+0x1c4>
 8017552:	2f58      	cmp	r7, #88	@ 0x58
 8017554:	f000 80b8 	beq.w	80176c8 <_printf_i+0x198>
 8017558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801755c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017560:	e03a      	b.n	80175d8 <_printf_i+0xa8>
 8017562:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017566:	2b15      	cmp	r3, #21
 8017568:	d8f6      	bhi.n	8017558 <_printf_i+0x28>
 801756a:	a101      	add	r1, pc, #4	@ (adr r1, 8017570 <_printf_i+0x40>)
 801756c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017570:	080175c9 	.word	0x080175c9
 8017574:	080175dd 	.word	0x080175dd
 8017578:	08017559 	.word	0x08017559
 801757c:	08017559 	.word	0x08017559
 8017580:	08017559 	.word	0x08017559
 8017584:	08017559 	.word	0x08017559
 8017588:	080175dd 	.word	0x080175dd
 801758c:	08017559 	.word	0x08017559
 8017590:	08017559 	.word	0x08017559
 8017594:	08017559 	.word	0x08017559
 8017598:	08017559 	.word	0x08017559
 801759c:	080176db 	.word	0x080176db
 80175a0:	08017607 	.word	0x08017607
 80175a4:	08017695 	.word	0x08017695
 80175a8:	08017559 	.word	0x08017559
 80175ac:	08017559 	.word	0x08017559
 80175b0:	080176fd 	.word	0x080176fd
 80175b4:	08017559 	.word	0x08017559
 80175b8:	08017607 	.word	0x08017607
 80175bc:	08017559 	.word	0x08017559
 80175c0:	08017559 	.word	0x08017559
 80175c4:	0801769d 	.word	0x0801769d
 80175c8:	6833      	ldr	r3, [r6, #0]
 80175ca:	1d1a      	adds	r2, r3, #4
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	6032      	str	r2, [r6, #0]
 80175d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80175d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80175d8:	2301      	movs	r3, #1
 80175da:	e09c      	b.n	8017716 <_printf_i+0x1e6>
 80175dc:	6833      	ldr	r3, [r6, #0]
 80175de:	6820      	ldr	r0, [r4, #0]
 80175e0:	1d19      	adds	r1, r3, #4
 80175e2:	6031      	str	r1, [r6, #0]
 80175e4:	0606      	lsls	r6, r0, #24
 80175e6:	d501      	bpl.n	80175ec <_printf_i+0xbc>
 80175e8:	681d      	ldr	r5, [r3, #0]
 80175ea:	e003      	b.n	80175f4 <_printf_i+0xc4>
 80175ec:	0645      	lsls	r5, r0, #25
 80175ee:	d5fb      	bpl.n	80175e8 <_printf_i+0xb8>
 80175f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80175f4:	2d00      	cmp	r5, #0
 80175f6:	da03      	bge.n	8017600 <_printf_i+0xd0>
 80175f8:	232d      	movs	r3, #45	@ 0x2d
 80175fa:	426d      	negs	r5, r5
 80175fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017600:	4858      	ldr	r0, [pc, #352]	@ (8017764 <_printf_i+0x234>)
 8017602:	230a      	movs	r3, #10
 8017604:	e011      	b.n	801762a <_printf_i+0xfa>
 8017606:	6821      	ldr	r1, [r4, #0]
 8017608:	6833      	ldr	r3, [r6, #0]
 801760a:	0608      	lsls	r0, r1, #24
 801760c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017610:	d402      	bmi.n	8017618 <_printf_i+0xe8>
 8017612:	0649      	lsls	r1, r1, #25
 8017614:	bf48      	it	mi
 8017616:	b2ad      	uxthmi	r5, r5
 8017618:	2f6f      	cmp	r7, #111	@ 0x6f
 801761a:	4852      	ldr	r0, [pc, #328]	@ (8017764 <_printf_i+0x234>)
 801761c:	6033      	str	r3, [r6, #0]
 801761e:	bf14      	ite	ne
 8017620:	230a      	movne	r3, #10
 8017622:	2308      	moveq	r3, #8
 8017624:	2100      	movs	r1, #0
 8017626:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801762a:	6866      	ldr	r6, [r4, #4]
 801762c:	60a6      	str	r6, [r4, #8]
 801762e:	2e00      	cmp	r6, #0
 8017630:	db05      	blt.n	801763e <_printf_i+0x10e>
 8017632:	6821      	ldr	r1, [r4, #0]
 8017634:	432e      	orrs	r6, r5
 8017636:	f021 0104 	bic.w	r1, r1, #4
 801763a:	6021      	str	r1, [r4, #0]
 801763c:	d04b      	beq.n	80176d6 <_printf_i+0x1a6>
 801763e:	4616      	mov	r6, r2
 8017640:	fbb5 f1f3 	udiv	r1, r5, r3
 8017644:	fb03 5711 	mls	r7, r3, r1, r5
 8017648:	5dc7      	ldrb	r7, [r0, r7]
 801764a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801764e:	462f      	mov	r7, r5
 8017650:	42bb      	cmp	r3, r7
 8017652:	460d      	mov	r5, r1
 8017654:	d9f4      	bls.n	8017640 <_printf_i+0x110>
 8017656:	2b08      	cmp	r3, #8
 8017658:	d10b      	bne.n	8017672 <_printf_i+0x142>
 801765a:	6823      	ldr	r3, [r4, #0]
 801765c:	07df      	lsls	r7, r3, #31
 801765e:	d508      	bpl.n	8017672 <_printf_i+0x142>
 8017660:	6923      	ldr	r3, [r4, #16]
 8017662:	6861      	ldr	r1, [r4, #4]
 8017664:	4299      	cmp	r1, r3
 8017666:	bfde      	ittt	le
 8017668:	2330      	movle	r3, #48	@ 0x30
 801766a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801766e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017672:	1b92      	subs	r2, r2, r6
 8017674:	6122      	str	r2, [r4, #16]
 8017676:	f8cd a000 	str.w	sl, [sp]
 801767a:	464b      	mov	r3, r9
 801767c:	aa03      	add	r2, sp, #12
 801767e:	4621      	mov	r1, r4
 8017680:	4640      	mov	r0, r8
 8017682:	f7ff fee7 	bl	8017454 <_printf_common>
 8017686:	3001      	adds	r0, #1
 8017688:	d14a      	bne.n	8017720 <_printf_i+0x1f0>
 801768a:	f04f 30ff 	mov.w	r0, #4294967295
 801768e:	b004      	add	sp, #16
 8017690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017694:	6823      	ldr	r3, [r4, #0]
 8017696:	f043 0320 	orr.w	r3, r3, #32
 801769a:	6023      	str	r3, [r4, #0]
 801769c:	4832      	ldr	r0, [pc, #200]	@ (8017768 <_printf_i+0x238>)
 801769e:	2778      	movs	r7, #120	@ 0x78
 80176a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80176a4:	6823      	ldr	r3, [r4, #0]
 80176a6:	6831      	ldr	r1, [r6, #0]
 80176a8:	061f      	lsls	r7, r3, #24
 80176aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80176ae:	d402      	bmi.n	80176b6 <_printf_i+0x186>
 80176b0:	065f      	lsls	r7, r3, #25
 80176b2:	bf48      	it	mi
 80176b4:	b2ad      	uxthmi	r5, r5
 80176b6:	6031      	str	r1, [r6, #0]
 80176b8:	07d9      	lsls	r1, r3, #31
 80176ba:	bf44      	itt	mi
 80176bc:	f043 0320 	orrmi.w	r3, r3, #32
 80176c0:	6023      	strmi	r3, [r4, #0]
 80176c2:	b11d      	cbz	r5, 80176cc <_printf_i+0x19c>
 80176c4:	2310      	movs	r3, #16
 80176c6:	e7ad      	b.n	8017624 <_printf_i+0xf4>
 80176c8:	4826      	ldr	r0, [pc, #152]	@ (8017764 <_printf_i+0x234>)
 80176ca:	e7e9      	b.n	80176a0 <_printf_i+0x170>
 80176cc:	6823      	ldr	r3, [r4, #0]
 80176ce:	f023 0320 	bic.w	r3, r3, #32
 80176d2:	6023      	str	r3, [r4, #0]
 80176d4:	e7f6      	b.n	80176c4 <_printf_i+0x194>
 80176d6:	4616      	mov	r6, r2
 80176d8:	e7bd      	b.n	8017656 <_printf_i+0x126>
 80176da:	6833      	ldr	r3, [r6, #0]
 80176dc:	6825      	ldr	r5, [r4, #0]
 80176de:	6961      	ldr	r1, [r4, #20]
 80176e0:	1d18      	adds	r0, r3, #4
 80176e2:	6030      	str	r0, [r6, #0]
 80176e4:	062e      	lsls	r6, r5, #24
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	d501      	bpl.n	80176ee <_printf_i+0x1be>
 80176ea:	6019      	str	r1, [r3, #0]
 80176ec:	e002      	b.n	80176f4 <_printf_i+0x1c4>
 80176ee:	0668      	lsls	r0, r5, #25
 80176f0:	d5fb      	bpl.n	80176ea <_printf_i+0x1ba>
 80176f2:	8019      	strh	r1, [r3, #0]
 80176f4:	2300      	movs	r3, #0
 80176f6:	6123      	str	r3, [r4, #16]
 80176f8:	4616      	mov	r6, r2
 80176fa:	e7bc      	b.n	8017676 <_printf_i+0x146>
 80176fc:	6833      	ldr	r3, [r6, #0]
 80176fe:	1d1a      	adds	r2, r3, #4
 8017700:	6032      	str	r2, [r6, #0]
 8017702:	681e      	ldr	r6, [r3, #0]
 8017704:	6862      	ldr	r2, [r4, #4]
 8017706:	2100      	movs	r1, #0
 8017708:	4630      	mov	r0, r6
 801770a:	f7e8 fdf1 	bl	80002f0 <memchr>
 801770e:	b108      	cbz	r0, 8017714 <_printf_i+0x1e4>
 8017710:	1b80      	subs	r0, r0, r6
 8017712:	6060      	str	r0, [r4, #4]
 8017714:	6863      	ldr	r3, [r4, #4]
 8017716:	6123      	str	r3, [r4, #16]
 8017718:	2300      	movs	r3, #0
 801771a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801771e:	e7aa      	b.n	8017676 <_printf_i+0x146>
 8017720:	6923      	ldr	r3, [r4, #16]
 8017722:	4632      	mov	r2, r6
 8017724:	4649      	mov	r1, r9
 8017726:	4640      	mov	r0, r8
 8017728:	47d0      	blx	sl
 801772a:	3001      	adds	r0, #1
 801772c:	d0ad      	beq.n	801768a <_printf_i+0x15a>
 801772e:	6823      	ldr	r3, [r4, #0]
 8017730:	079b      	lsls	r3, r3, #30
 8017732:	d413      	bmi.n	801775c <_printf_i+0x22c>
 8017734:	68e0      	ldr	r0, [r4, #12]
 8017736:	9b03      	ldr	r3, [sp, #12]
 8017738:	4298      	cmp	r0, r3
 801773a:	bfb8      	it	lt
 801773c:	4618      	movlt	r0, r3
 801773e:	e7a6      	b.n	801768e <_printf_i+0x15e>
 8017740:	2301      	movs	r3, #1
 8017742:	4632      	mov	r2, r6
 8017744:	4649      	mov	r1, r9
 8017746:	4640      	mov	r0, r8
 8017748:	47d0      	blx	sl
 801774a:	3001      	adds	r0, #1
 801774c:	d09d      	beq.n	801768a <_printf_i+0x15a>
 801774e:	3501      	adds	r5, #1
 8017750:	68e3      	ldr	r3, [r4, #12]
 8017752:	9903      	ldr	r1, [sp, #12]
 8017754:	1a5b      	subs	r3, r3, r1
 8017756:	42ab      	cmp	r3, r5
 8017758:	dcf2      	bgt.n	8017740 <_printf_i+0x210>
 801775a:	e7eb      	b.n	8017734 <_printf_i+0x204>
 801775c:	2500      	movs	r5, #0
 801775e:	f104 0619 	add.w	r6, r4, #25
 8017762:	e7f5      	b.n	8017750 <_printf_i+0x220>
 8017764:	08017e51 	.word	0x08017e51
 8017768:	08017e62 	.word	0x08017e62

0801776c <memmove>:
 801776c:	4288      	cmp	r0, r1
 801776e:	b510      	push	{r4, lr}
 8017770:	eb01 0402 	add.w	r4, r1, r2
 8017774:	d902      	bls.n	801777c <memmove+0x10>
 8017776:	4284      	cmp	r4, r0
 8017778:	4623      	mov	r3, r4
 801777a:	d807      	bhi.n	801778c <memmove+0x20>
 801777c:	1e43      	subs	r3, r0, #1
 801777e:	42a1      	cmp	r1, r4
 8017780:	d008      	beq.n	8017794 <memmove+0x28>
 8017782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017786:	f803 2f01 	strb.w	r2, [r3, #1]!
 801778a:	e7f8      	b.n	801777e <memmove+0x12>
 801778c:	4402      	add	r2, r0
 801778e:	4601      	mov	r1, r0
 8017790:	428a      	cmp	r2, r1
 8017792:	d100      	bne.n	8017796 <memmove+0x2a>
 8017794:	bd10      	pop	{r4, pc}
 8017796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801779a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801779e:	e7f7      	b.n	8017790 <memmove+0x24>

080177a0 <_sbrk_r>:
 80177a0:	b538      	push	{r3, r4, r5, lr}
 80177a2:	4d06      	ldr	r5, [pc, #24]	@ (80177bc <_sbrk_r+0x1c>)
 80177a4:	2300      	movs	r3, #0
 80177a6:	4604      	mov	r4, r0
 80177a8:	4608      	mov	r0, r1
 80177aa:	602b      	str	r3, [r5, #0]
 80177ac:	f7ea fa7a 	bl	8001ca4 <_sbrk>
 80177b0:	1c43      	adds	r3, r0, #1
 80177b2:	d102      	bne.n	80177ba <_sbrk_r+0x1a>
 80177b4:	682b      	ldr	r3, [r5, #0]
 80177b6:	b103      	cbz	r3, 80177ba <_sbrk_r+0x1a>
 80177b8:	6023      	str	r3, [r4, #0]
 80177ba:	bd38      	pop	{r3, r4, r5, pc}
 80177bc:	240284ac 	.word	0x240284ac

080177c0 <_realloc_r>:
 80177c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177c4:	4607      	mov	r7, r0
 80177c6:	4614      	mov	r4, r2
 80177c8:	460d      	mov	r5, r1
 80177ca:	b921      	cbnz	r1, 80177d6 <_realloc_r+0x16>
 80177cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177d0:	4611      	mov	r1, r2
 80177d2:	f7ff bc5b 	b.w	801708c <_malloc_r>
 80177d6:	b92a      	cbnz	r2, 80177e4 <_realloc_r+0x24>
 80177d8:	f7ff fbec 	bl	8016fb4 <_free_r>
 80177dc:	4625      	mov	r5, r4
 80177de:	4628      	mov	r0, r5
 80177e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177e4:	f000 f81a 	bl	801781c <_malloc_usable_size_r>
 80177e8:	4284      	cmp	r4, r0
 80177ea:	4606      	mov	r6, r0
 80177ec:	d802      	bhi.n	80177f4 <_realloc_r+0x34>
 80177ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80177f2:	d8f4      	bhi.n	80177de <_realloc_r+0x1e>
 80177f4:	4621      	mov	r1, r4
 80177f6:	4638      	mov	r0, r7
 80177f8:	f7ff fc48 	bl	801708c <_malloc_r>
 80177fc:	4680      	mov	r8, r0
 80177fe:	b908      	cbnz	r0, 8017804 <_realloc_r+0x44>
 8017800:	4645      	mov	r5, r8
 8017802:	e7ec      	b.n	80177de <_realloc_r+0x1e>
 8017804:	42b4      	cmp	r4, r6
 8017806:	4622      	mov	r2, r4
 8017808:	4629      	mov	r1, r5
 801780a:	bf28      	it	cs
 801780c:	4632      	movcs	r2, r6
 801780e:	f7ff fbc3 	bl	8016f98 <memcpy>
 8017812:	4629      	mov	r1, r5
 8017814:	4638      	mov	r0, r7
 8017816:	f7ff fbcd 	bl	8016fb4 <_free_r>
 801781a:	e7f1      	b.n	8017800 <_realloc_r+0x40>

0801781c <_malloc_usable_size_r>:
 801781c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017820:	1f18      	subs	r0, r3, #4
 8017822:	2b00      	cmp	r3, #0
 8017824:	bfbc      	itt	lt
 8017826:	580b      	ldrlt	r3, [r1, r0]
 8017828:	18c0      	addlt	r0, r0, r3
 801782a:	4770      	bx	lr

0801782c <_init>:
 801782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801782e:	bf00      	nop
 8017830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017832:	bc08      	pop	{r3}
 8017834:	469e      	mov	lr, r3
 8017836:	4770      	bx	lr

08017838 <_fini>:
 8017838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801783a:	bf00      	nop
 801783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801783e:	bc08      	pop	{r3}
 8017840:	469e      	mov	lr, r3
 8017842:	4770      	bx	lr
