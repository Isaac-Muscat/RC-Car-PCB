
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018850  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08018af0  08018af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801916c  0801916c  0001a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019174  08019174  0001a174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019178  08019178  0001a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000368  24000000  0801917c  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002acf0  24000368  080194e4  0001b368  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2402b058  080194e4  0001c058  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b368  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d340  00000000  00000000  0001b396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000054f2  00000000  00000000  000486d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f70  00000000  00000000  0004dbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000184c  00000000  00000000  0004fb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003df0c  00000000  00000000  00051384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e13c  00000000  00000000  0008f290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001788ae  00000000  00000000  000bd3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00235c7a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008b88  00000000  00000000  00235cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  0023e848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000368 	.word	0x24000368
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018ad8 	.word	0x08018ad8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400036c 	.word	0x2400036c
 80002dc:	08018ad8 	.word	0x08018ad8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	@ 0x30
 80006c0:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80006c2:	f000 ff85 	bl	80015d0 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c6:	f001 ffe5 	bl	8002694 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ca:	f000 fa73 	bl	8000bb4 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80006ce:	f000 faeb 	bl	8000ca8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006d2:	f000 fd6b 	bl	80011ac <MX_GPIO_Init>
	MX_MDMA_Init();
 80006d6:	f000 fd49 	bl	800116c <MX_MDMA_Init>
	MX_DMA_Init();
 80006da:	f000 fcf7 	bl	80010cc <MX_DMA_Init>
	MX_USART1_UART_Init();
 80006de:	f000 fca3 	bl	8001028 <MX_USART1_UART_Init>
	MX_USB_DEVICE_Init();
 80006e2:	f016 fff7 	bl	80176d4 <MX_USB_DEVICE_Init>
	MX_JPEG_Init();
 80006e6:	f000 fc35 	bl	8000f54 <MX_JPEG_Init>
	MX_I2C1_Init();
 80006ea:	f000 fbb3 	bl	8000e54 <MX_I2C1_Init>
	MX_SPI4_Init();
 80006ee:	f000 fc45 	bl	8000f7c <MX_SPI4_Init>
	MX_ADC1_Init();
 80006f2:	f000 fb23 	bl	8000d3c <MX_ADC1_Init>
	MX_I2C2_Init();
 80006f6:	f000 fbed 	bl	8000ed4 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	// ------------------------------------------------------------ SETUP ADC DMA -- //

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 80006fa:	2214      	movs	r2, #20
 80006fc:	49a9      	ldr	r1, [pc, #676]	@ (80009a4 <main+0x2e8>)
 80006fe:	48aa      	ldr	r0, [pc, #680]	@ (80009a8 <main+0x2ec>)
 8000700:	f002 fc46 	bl	8002f90 <HAL_ADC_Start_DMA>

	// ------------------------------------------------------------ SETUP SSD1306 -- //

	uint8_t init_result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	777b      	strb	r3, [r7, #29]

	hssd1.i2c_handle = &hi2c2;
 8000708:	4ba8      	ldr	r3, [pc, #672]	@ (80009ac <main+0x2f0>)
 800070a:	4aa9      	ldr	r2, [pc, #676]	@ (80009b0 <main+0x2f4>)
 800070c:	601a      	str	r2, [r3, #0]
	hssd1.address = OLED_ADDR;
 800070e:	4ba7      	ldr	r3, [pc, #668]	@ (80009ac <main+0x2f0>)
 8000710:	223c      	movs	r2, #60	@ 0x3c
 8000712:	711a      	strb	r2, [r3, #4]
	hssd1.vram_full = ssd1_vram;
 8000714:	4ba5      	ldr	r3, [pc, #660]	@ (80009ac <main+0x2f0>)
 8000716:	4aa7      	ldr	r2, [pc, #668]	@ (80009b4 <main+0x2f8>)
 8000718:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd1);
 800071a:	48a4      	ldr	r0, [pc, #656]	@ (80009ac <main+0x2f0>)
 800071c:	f001 fd34 	bl	8002188 <SSD1306_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	777b      	strb	r3, [r7, #29]
	if (init_result) {
 8000724:	7f7b      	ldrb	r3, [r7, #29]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d013      	beq.n	8000752 <main+0x96>
		while (1) {
			sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 800072a:	7f7b      	ldrb	r3, [r7, #29]
 800072c:	461a      	mov	r2, r3
 800072e:	49a2      	ldr	r1, [pc, #648]	@ (80009b8 <main+0x2fc>)
 8000730:	48a2      	ldr	r0, [pc, #648]	@ (80009bc <main+0x300>)
 8000732:	f017 fddf 	bl	80182f4 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000736:	48a1      	ldr	r0, [pc, #644]	@ (80009bc <main+0x300>)
 8000738:	f7ff fdd2 	bl	80002e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	4619      	mov	r1, r3
 8000740:	489e      	ldr	r0, [pc, #632]	@ (80009bc <main+0x300>)
 8000742:	f017 f8a1 	bl	8017888 <CDC_Transmit_FS>
			HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f002 f835 	bl	80027b8 <HAL_Delay>
		while (1) {
 800074e:	bf00      	nop
 8000750:	e7eb      	b.n	800072a <main+0x6e>
		}
	}

	hssd2.i2c_handle = &hi2c1;
 8000752:	4b9b      	ldr	r3, [pc, #620]	@ (80009c0 <main+0x304>)
 8000754:	4a9b      	ldr	r2, [pc, #620]	@ (80009c4 <main+0x308>)
 8000756:	601a      	str	r2, [r3, #0]
	hssd2.address = OLED_ADDR;
 8000758:	4b99      	ldr	r3, [pc, #612]	@ (80009c0 <main+0x304>)
 800075a:	223c      	movs	r2, #60	@ 0x3c
 800075c:	711a      	strb	r2, [r3, #4]
	hssd2.vram_full = ssd2_vram;
 800075e:	4b98      	ldr	r3, [pc, #608]	@ (80009c0 <main+0x304>)
 8000760:	4a99      	ldr	r2, [pc, #612]	@ (80009c8 <main+0x30c>)
 8000762:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd2);
 8000764:	4896      	ldr	r0, [pc, #600]	@ (80009c0 <main+0x304>)
 8000766:	f001 fd0f 	bl	8002188 <SSD1306_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	777b      	strb	r3, [r7, #29]
	if (init_result) {
 800076e:	7f7b      	ldrb	r3, [r7, #29]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <main+0xe0>
		while (1) {
			sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 8000774:	7f7b      	ldrb	r3, [r7, #29]
 8000776:	461a      	mov	r2, r3
 8000778:	4994      	ldr	r1, [pc, #592]	@ (80009cc <main+0x310>)
 800077a:	4890      	ldr	r0, [pc, #576]	@ (80009bc <main+0x300>)
 800077c:	f017 fdba 	bl	80182f4 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000780:	488e      	ldr	r0, [pc, #568]	@ (80009bc <main+0x300>)
 8000782:	f7ff fdad 	bl	80002e0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	488c      	ldr	r0, [pc, #560]	@ (80009bc <main+0x300>)
 800078c:	f017 f87c 	bl	8017888 <CDC_Transmit_FS>
			HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000794:	f002 f810 	bl	80027b8 <HAL_Delay>
		while (1) {
 8000798:	bf00      	nop
 800079a:	e7eb      	b.n	8000774 <main+0xb8>
		}
	}

	// ------------------------------------------------------------ SETUP ST7789 -- //
	hst7789.spi_handle = &hspi4;
 800079c:	4b8c      	ldr	r3, [pc, #560]	@ (80009d0 <main+0x314>)
 800079e:	4a8d      	ldr	r2, [pc, #564]	@ (80009d4 <main+0x318>)
 80007a0:	601a      	str	r2, [r3, #0]
	hst7789.spi_state = 0;
 80007a2:	4b8b      	ldr	r3, [pc, #556]	@ (80009d0 <main+0x314>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	711a      	strb	r2, [r3, #4]
	hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 80007a8:	4b89      	ldr	r3, [pc, #548]	@ (80009d0 <main+0x314>)
 80007aa:	4a8b      	ldr	r2, [pc, #556]	@ (80009d8 <main+0x31c>)
 80007ac:	609a      	str	r2, [r3, #8]
	hst7789.dc_gpio_pin = SPI4_DC_Pin;
 80007ae:	4b88      	ldr	r3, [pc, #544]	@ (80009d0 <main+0x314>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	819a      	strh	r2, [r3, #12]
	hst7789.vram = st7789_vram;
 80007b4:	4b86      	ldr	r3, [pc, #536]	@ (80009d0 <main+0x314>)
 80007b6:	4a89      	ldr	r2, [pc, #548]	@ (80009dc <main+0x320>)
 80007b8:	611a      	str	r2, [r3, #16]
	init_result = ST7789_Init(&hst7789);
 80007ba:	4885      	ldr	r0, [pc, #532]	@ (80009d0 <main+0x314>)
 80007bc:	f001 fe14 	bl	80023e8 <ST7789_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	777b      	strb	r3, [r7, #29]
	if (init_result) {
 80007c4:	7f7b      	ldrb	r3, [r7, #29]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d013      	beq.n	80007f2 <main+0x136>
		while (1) {
			sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 80007ca:	7f7b      	ldrb	r3, [r7, #29]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4984      	ldr	r1, [pc, #528]	@ (80009e0 <main+0x324>)
 80007d0:	487a      	ldr	r0, [pc, #488]	@ (80009bc <main+0x300>)
 80007d2:	f017 fd8f 	bl	80182f4 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007d6:	4879      	ldr	r0, [pc, #484]	@ (80009bc <main+0x300>)
 80007d8:	f7ff fd82 	bl	80002e0 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	4619      	mov	r1, r3
 80007e0:	4876      	ldr	r0, [pc, #472]	@ (80009bc <main+0x300>)
 80007e2:	f017 f851 	bl	8017888 <CDC_Transmit_FS>
			HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ea:	f001 ffe5 	bl	80027b8 <HAL_Delay>
		while (1) {
 80007ee:	bf00      	nop
 80007f0:	e7eb      	b.n	80007ca <main+0x10e>
		}
	}

	// Clear the screen
	ST7789_Clear(&hst7789, 0x00);
 80007f2:	2100      	movs	r1, #0
 80007f4:	4876      	ldr	r0, [pc, #472]	@ (80009d0 <main+0x314>)
 80007f6:	f001 fea2 	bl	800253e <ST7789_Clear>
	ST7789_UpdateSector(&hst7789, 0);
 80007fa:	2100      	movs	r1, #0
 80007fc:	4874      	ldr	r0, [pc, #464]	@ (80009d0 <main+0x314>)
 80007fe:	f001 feb1 	bl	8002564 <ST7789_UpdateSector>
	HAL_Delay(50);
 8000802:	2032      	movs	r0, #50	@ 0x32
 8000804:	f001 ffd8 	bl	80027b8 <HAL_Delay>
	ST7789_UpdateSector(&hst7789, 1);
 8000808:	2101      	movs	r1, #1
 800080a:	4871      	ldr	r0, [pc, #452]	@ (80009d0 <main+0x314>)
 800080c:	f001 feaa 	bl	8002564 <ST7789_UpdateSector>

	// ------------------------------------------------------------ SETUP JPEG DECODE -- //
	// override the header
	// DO NOT MODIFY THE JPEG_RAW BUF BELOW BYTE 526
	memcpy(jpeg_raw1, jpeg_header, JPEG_HEADERSIZE);
 8000810:	4a74      	ldr	r2, [pc, #464]	@ (80009e4 <main+0x328>)
 8000812:	4b75      	ldr	r3, [pc, #468]	@ (80009e8 <main+0x32c>)
 8000814:	4610      	mov	r0, r2
 8000816:	4619      	mov	r1, r3
 8000818:	f240 230e 	movw	r3, #526	@ 0x20e
 800081c:	461a      	mov	r2, r3
 800081e:	f017 fdcf 	bl	80183c0 <memcpy>
	memcpy(jpeg_raw2, jpeg_header, JPEG_HEADERSIZE);
 8000822:	4a72      	ldr	r2, [pc, #456]	@ (80009ec <main+0x330>)
 8000824:	4b70      	ldr	r3, [pc, #448]	@ (80009e8 <main+0x32c>)
 8000826:	4610      	mov	r0, r2
 8000828:	4619      	mov	r1, r3
 800082a:	f240 230e 	movw	r3, #526	@ 0x20e
 800082e:	461a      	mov	r2, r3
 8000830:	f017 fdc6 	bl	80183c0 <memcpy>

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 8000834:	4b6e      	ldr	r3, [pc, #440]	@ (80009f0 <main+0x334>)
 8000836:	4a6f      	ldr	r2, [pc, #444]	@ (80009f4 <main+0x338>)
 8000838:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 5;
 800083a:	4b6d      	ldr	r3, [pc, #436]	@ (80009f0 <main+0x334>)
 800083c:	2205      	movs	r2, #5
 800083e:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 5;
 8000840:	4b6b      	ldr	r3, [pc, #428]	@ (80009f0 <main+0x334>)
 8000842:	2205      	movs	r2, #5
 8000844:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 8000848:	4869      	ldr	r0, [pc, #420]	@ (80009f0 <main+0x334>)
 800084a:	f014 fde8 	bl	801541e <XBEE_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00e      	beq.n	8000872 <main+0x1b6>
		sprintf(ssd_msg, " Failed to Init XBEE");
 8000854:	4968      	ldr	r1, [pc, #416]	@ (80009f8 <main+0x33c>)
 8000856:	4869      	ldr	r0, [pc, #420]	@ (80009fc <main+0x340>)
 8000858:	f017 fd4c 	bl	80182f4 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 800085c:	4867      	ldr	r0, [pc, #412]	@ (80009fc <main+0x340>)
 800085e:	f7ff fd3f 	bl	80002e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	4864      	ldr	r0, [pc, #400]	@ (80009fc <main+0x340>)
 800086a:	f000 fe8b 	bl	8001584 <WriteDebug>
		while (1) { }
 800086e:	bf00      	nop
 8000870:	e7fd      	b.n	800086e <main+0x1b2>
	}

	uint32_t old_t = HAL_GetTick();
 8000872:	f001 ff95 	bl	80027a0 <HAL_GetTick>
 8000876:	61b8      	str	r0, [r7, #24]

	sprintf(ssd_msg, " JPEG X");
 8000878:	4961      	ldr	r1, [pc, #388]	@ (8000a00 <main+0x344>)
 800087a:	4860      	ldr	r0, [pc, #384]	@ (80009fc <main+0x340>)
 800087c:	f017 fd3a 	bl	80182f4 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8000880:	485e      	ldr	r0, [pc, #376]	@ (80009fc <main+0x340>)
 8000882:	f7ff fd2d 	bl	80002e0 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4619      	mov	r1, r3
 800088c:	485b      	ldr	r0, [pc, #364]	@ (80009fc <main+0x340>)
 800088e:	f000 fe79 	bl	8001584 <WriteDebug>

		// If there's a packet, process it
		// If the packet is good, push it to the screen
		uint16_t rx_byte;
		uint8_t *rx_packet;
		uint8_t ret = XBEE_RXPacket(&hxbee, &rx_packet, &rx_byte);
 8000892:	1dba      	adds	r2, r7, #6
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4855      	ldr	r0, [pc, #340]	@ (80009f0 <main+0x334>)
 800089a:	f014 fe13 	bl	80154c4 <XBEE_RXPacket>
 800089e:	4603      	mov	r3, r0
 80008a0:	75fb      	strb	r3, [r7, #23]
		if (ret == 0) {
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d175      	bne.n	8000994 <main+0x2d8>
			if (rx_byte <= JPEG_WIDTH*JPEG_HEIGHT/64 + 1) {
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	2b37      	cmp	r3, #55	@ 0x37
 80008ac:	d872      	bhi.n	8000994 <main+0x2d8>
				// Data was fully sent
				if (rx_byte < uart_rx_lastPacketNum && jpeg_state == 0) {
 80008ae:	88fa      	ldrh	r2, [r7, #6]
 80008b0:	4b54      	ldr	r3, [pc, #336]	@ (8000a04 <main+0x348>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d24f      	bcs.n	8000958 <main+0x29c>
 80008b8:	4b53      	ldr	r3, [pc, #332]	@ (8000a08 <main+0x34c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d14b      	bne.n	8000958 <main+0x29c>
					// Start the jpeg decode
					jpeg_size = uart_rx_lastPacketNum*64 + JPEG_HEADERSIZE;
 80008c0:	4b50      	ldr	r3, [pc, #320]	@ (8000a04 <main+0x348>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4b4f      	ldr	r3, [pc, #316]	@ (8000a0c <main+0x350>)
 80008d0:	801a      	strh	r2, [r3, #0]
					HAL_StatusTypeDef ret;
					if (jpeg_currentraw)
 80008d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000a10 <main+0x354>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00e      	beq.n	80008f8 <main+0x23c>
						ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw1, jpeg_size, jpeg_out, JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT*64);
 80008da:	4b4c      	ldr	r3, [pc, #304]	@ (8000a0c <main+0x350>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	4b4b      	ldr	r3, [pc, #300]	@ (8000a14 <main+0x358>)
 80008e8:	493e      	ldr	r1, [pc, #248]	@ (80009e4 <main+0x328>)
 80008ea:	484b      	ldr	r0, [pc, #300]	@ (8000a18 <main+0x35c>)
 80008ec:	f009 f9d7 	bl	8009c9e <HAL_JPEG_Decode_DMA>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80008f6:	e00d      	b.n	8000914 <main+0x258>
					else {
						ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw2, jpeg_size, jpeg_out, JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT*64);
 80008f8:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <main+0x350>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	4b43      	ldr	r3, [pc, #268]	@ (8000a14 <main+0x358>)
 8000906:	4939      	ldr	r1, [pc, #228]	@ (80009ec <main+0x330>)
 8000908:	4843      	ldr	r0, [pc, #268]	@ (8000a18 <main+0x35c>)
 800090a:	f009 f9c8 	bl	8009c9e <HAL_JPEG_Decode_DMA>
 800090e:	4603      	mov	r3, r0
 8000910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					}
					jpeg_currentraw = !jpeg_currentraw;
 8000914:	4b3e      	ldr	r3, [pc, #248]	@ (8000a10 <main+0x354>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf0c      	ite	eq
 800091c:	2301      	moveq	r3, #1
 800091e:	2300      	movne	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	4b3a      	ldr	r3, [pc, #232]	@ (8000a10 <main+0x354>)
 8000926:	701a      	strb	r2, [r3, #0]

					if (ret) {
 8000928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <main+0x296>
						sprintf(ssd_msg, " JPEG FAIL %d", ret);
 8000930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000934:	461a      	mov	r2, r3
 8000936:	4939      	ldr	r1, [pc, #228]	@ (8000a1c <main+0x360>)
 8000938:	4830      	ldr	r0, [pc, #192]	@ (80009fc <main+0x340>)
 800093a:	f017 fcdb 	bl	80182f4 <siprintf>
						WriteDebug(ssd_msg, strlen(ssd_msg));
 800093e:	482f      	ldr	r0, [pc, #188]	@ (80009fc <main+0x340>)
 8000940:	f7ff fcce 	bl	80002e0 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	482c      	ldr	r0, [pc, #176]	@ (80009fc <main+0x340>)
 800094c:	f000 fe1a 	bl	8001584 <WriteDebug>
 8000950:	e002      	b.n	8000958 <main+0x29c>
					} else {
						jpeg_state = 1;
 8000952:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <main+0x34c>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
					}
				}
				uart_rx_lastPacketNum = rx_byte;
 8000958:	88fa      	ldrh	r2, [r7, #6]
 800095a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <main+0x348>)
 800095c:	801a      	strh	r2, [r3, #0]

				// fill in the received data
				if (jpeg_currentraw)
 800095e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <main+0x354>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d00b      	beq.n	800097e <main+0x2c2>
					memcpy(jpeg_raw1 + JPEG_HEADERSIZE + rx_byte * 64, rx_packet, 64);
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	019b      	lsls	r3, r3, #6
 800096a:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 800096e:	4a1d      	ldr	r2, [pc, #116]	@ (80009e4 <main+0x328>)
 8000970:	4413      	add	r3, r2
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	2240      	movs	r2, #64	@ 0x40
 8000976:	4618      	mov	r0, r3
 8000978:	f017 fd22 	bl	80183c0 <memcpy>
 800097c:	e00a      	b.n	8000994 <main+0x2d8>
				else {
					memcpy(jpeg_raw2 + JPEG_HEADERSIZE + rx_byte * 64, rx_packet, 64);
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	019b      	lsls	r3, r3, #6
 8000982:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8000986:	4a19      	ldr	r2, [pc, #100]	@ (80009ec <main+0x330>)
 8000988:	4413      	add	r3, r2
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	2240      	movs	r2, #64	@ 0x40
 800098e:	4618      	mov	r0, r3
 8000990:	f017 fd16 	bl	80183c0 <memcpy>
				}
			}
		}

		// If the JPEG is decoded, process it
		if (jpeg_state == 2) {
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <main+0x34c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b02      	cmp	r3, #2
 800099a:	f040 80f9 	bne.w	8000b90 <main+0x4d4>
			// Loop through every mcu block
			for (uint16_t mcu_x = 0; mcu_x < JPEG_MCU_WIDTH; mcu_x++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80009a2:	e0e1      	b.n	8000b68 <main+0x4ac>
 80009a4:	24026a3c 	.word	0x24026a3c
 80009a8:	24000384 	.word	0x24000384
 80009ac:	24000934 	.word	0x24000934
 80009b0:	240004b4 	.word	0x240004b4
 80009b4:	2400095c 	.word	0x2400095c
 80009b8:	08018af0 	.word	0x08018af0
 80009bc:	240011c0 	.word	0x240011c0
 80009c0:	24000948 	.word	0x24000948
 80009c4:	24000460 	.word	0x24000460
 80009c8:	24000d5c 	.word	0x24000d5c
 80009cc:	08018b0c 	.word	0x08018b0c
 80009d0:	24001224 	.word	0x24001224
 80009d4:	24000728 	.word	0x24000728
 80009d8:	58021000 	.word	0x58021000
 80009dc:	2400123c 	.word	0x2400123c
 80009e0:	08018b28 	.word	0x08018b28
 80009e4:	24026a98 	.word	0x24026a98
 80009e8:	24000004 	.word	0x24000004
 80009ec:	24027818 	.word	0x24027818
 80009f0:	24026a70 	.word	0x24026a70
 80009f4:	24000828 	.word	0x24000828
 80009f8:	08018b44 	.word	0x08018b44
 80009fc:	2400115c 	.word	0x2400115c
 8000a00:	08018b5c 	.word	0x08018b5c
 8000a04:	24026a94 	.word	0x24026a94
 8000a08:	2402931a 	.word	0x2402931a
 8000a0c:	24029318 	.word	0x24029318
 8000a10:	24026a96 	.word	0x24026a96
 8000a14:	24028598 	.word	0x24028598
 8000a18:	240005f8 	.word	0x240005f8
 8000a1c:	08018b64 	.word	0x08018b64
				uint16_t mcu_idx = current_mcu_y*JPEG_MCU_WIDTH + mcu_x;
 8000a20:	4b60      	ldr	r3, [pc, #384]	@ (8000ba4 <main+0x4e8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a30:	4413      	add	r3, r2
 8000a32:	82bb      	strh	r3, [r7, #20]

				for (uint16_t y = 0; y < 8; y++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000a38:	e08f      	b.n	8000b5a <main+0x49e>
					for (uint16_t x = 0; x < 8; x++) {
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	843b      	strh	r3, [r7, #32]
 8000a3e:	e085      	b.n	8000b4c <main+0x490>
						// Bounds check
						if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 8000a40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a42:	00da      	lsls	r2, r3, #3
 8000a44:	8c3b      	ldrh	r3, [r7, #32]
 8000a46:	4413      	add	r3, r2
 8000a48:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a4a:	dc77      	bgt.n	8000b3c <main+0x480>
						// COLOR FORMAT
						// |RRRRR GGG|GGG BBBBB|
						// TODO: stop transmitting overscan to save bandwidth

						uint32_t pix_x = (mcu_x*8 + x)*5;
 8000a4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a4e:	00da      	lsls	r2, r3, #3
 8000a50:	8c3b      	ldrh	r3, [r7, #32]
 8000a52:	441a      	add	r2, r3
 8000a54:	4613      	mov	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
						if (pix_x >= LCD_WIDTH-1) continue;
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	2bee      	cmp	r3, #238	@ 0xee
 8000a60:	d86e      	bhi.n	8000b40 <main+0x484>
						pix_x = LCD_WIDTH - pix_x - 1;
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8000a68:	613b      	str	r3, [r7, #16]
						uint32_t pix_y = (current_mcu_y*8 + y)*5;
 8000a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba4 <main+0x4e8>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	00da      	lsls	r2, r3, #3
 8000a70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000a72:	441a      	add	r2, r3
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
						if (pix_y >= LCD_HEIGHT-2) continue;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8000a82:	d25f      	bcs.n	8000b44 <main+0x488>

						uint8_t sample = jpeg_out[mcu_idx*64 + y*8 + x];
 8000a84:	8abb      	ldrh	r3, [r7, #20]
 8000a86:	00da      	lsls	r2, r3, #3
 8000a88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000a8a:	4413      	add	r3, r2
 8000a8c:	00da      	lsls	r2, r3, #3
 8000a8e:	8c3b      	ldrh	r3, [r7, #32]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a45      	ldr	r2, [pc, #276]	@ (8000ba8 <main+0x4ec>)
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	72fb      	strb	r3, [r7, #11]
						uint8_t msb = (sample & 0b11111000) | ((sample & 0b11100000)>>5);
 8000a98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a9c:	f023 0307 	bic.w	r3, r3, #7
 8000aa0:	b25a      	sxtb	r2, r3
 8000aa2:	7afb      	ldrb	r3, [r7, #11]
 8000aa4:	095b      	lsrs	r3, r3, #5
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b25b      	sxtb	r3, r3
 8000aae:	72bb      	strb	r3, [r7, #10]
						uint8_t lsb = ((sample & 0b11111000) >> 3) | ((sample & 0b00011100)<<3);
 8000ab0:	7afb      	ldrb	r3, [r7, #11]
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	f023 031f 	bic.w	r3, r3, #31
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	727b      	strb	r3, [r7, #9]

						// TODO: Speed this up as much as possible, even if it means skipping lines
						// Loop through the pixels in a box
						for (uint8_t xOff = 0; xOff < 3; xOff++) {
 8000acc:	2300      	movs	r3, #0
 8000ace:	77fb      	strb	r3, [r7, #31]
 8000ad0:	e030      	b.n	8000b34 <main+0x478>
							for (uint8_t yOff = 0; yOff < 3; yOff++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	77bb      	strb	r3, [r7, #30]
 8000ad6:	e027      	b.n	8000b28 <main+0x46c>
								hst7789.vram[(pix_y+yOff)*LCD_WIDTH*2 + (pix_x+xOff)*2    ] = msb;
 8000ad8:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <main+0x4f0>)
 8000ada:	6919      	ldr	r1, [r3, #16]
 8000adc:	7fba      	ldrb	r2, [r7, #30]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	441a      	add	r2, r3
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	011b      	lsls	r3, r3, #4
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	011b      	lsls	r3, r3, #4
 8000aea:	4618      	mov	r0, r3
 8000aec:	7ffa      	ldrb	r2, [r7, #31]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4413      	add	r3, r2
 8000af2:	4403      	add	r3, r0
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	440b      	add	r3, r1
 8000af8:	7aba      	ldrb	r2, [r7, #10]
 8000afa:	701a      	strb	r2, [r3, #0]
								hst7789.vram[(pix_y+yOff)*LCD_WIDTH*2 + (pix_x+xOff)*2 + 1] = lsb;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <main+0x4f0>)
 8000afe:	6919      	ldr	r1, [r3, #16]
 8000b00:	7fba      	ldrb	r2, [r7, #30]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	441a      	add	r2, r3
 8000b06:	4613      	mov	r3, r2
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	011b      	lsls	r3, r3, #4
 8000b0e:	4618      	mov	r0, r3
 8000b10:	7ffa      	ldrb	r2, [r7, #31]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4413      	add	r3, r2
 8000b16:	4403      	add	r3, r0
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	440b      	add	r3, r1
 8000b1e:	7a7a      	ldrb	r2, [r7, #9]
 8000b20:	701a      	strb	r2, [r3, #0]
							for (uint8_t yOff = 0; yOff < 3; yOff++) {
 8000b22:	7fbb      	ldrb	r3, [r7, #30]
 8000b24:	3301      	adds	r3, #1
 8000b26:	77bb      	strb	r3, [r7, #30]
 8000b28:	7fbb      	ldrb	r3, [r7, #30]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d9d4      	bls.n	8000ad8 <main+0x41c>
						for (uint8_t xOff = 0; xOff < 3; xOff++) {
 8000b2e:	7ffb      	ldrb	r3, [r7, #31]
 8000b30:	3301      	adds	r3, #1
 8000b32:	77fb      	strb	r3, [r7, #31]
 8000b34:	7ffb      	ldrb	r3, [r7, #31]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d9cb      	bls.n	8000ad2 <main+0x416>
 8000b3a:	e004      	b.n	8000b46 <main+0x48a>
						if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 8000b3c:	bf00      	nop
 8000b3e:	e002      	b.n	8000b46 <main+0x48a>
						if (pix_x >= LCD_WIDTH-1) continue;
 8000b40:	bf00      	nop
 8000b42:	e000      	b.n	8000b46 <main+0x48a>
						if (pix_y >= LCD_HEIGHT-2) continue;
 8000b44:	bf00      	nop
					for (uint16_t x = 0; x < 8; x++) {
 8000b46:	8c3b      	ldrh	r3, [r7, #32]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	843b      	strh	r3, [r7, #32]
 8000b4c:	8c3b      	ldrh	r3, [r7, #32]
 8000b4e:	2b07      	cmp	r3, #7
 8000b50:	f67f af76 	bls.w	8000a40 <main+0x384>
				for (uint16_t y = 0; y < 8; y++) {
 8000b54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000b56:	3301      	adds	r3, #1
 8000b58:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000b5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000b5c:	2b07      	cmp	r3, #7
 8000b5e:	f67f af6c 	bls.w	8000a3a <main+0x37e>
			for (uint16_t mcu_x = 0; mcu_x < JPEG_MCU_WIDTH; mcu_x++) {
 8000b62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000b64:	3301      	adds	r3, #1
 8000b66:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000b68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000b6a:	2b05      	cmp	r3, #5
 8000b6c:	f67f af58 	bls.w	8000a20 <main+0x364>
				}
			}



			current_mcu_y++;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <main+0x4e8>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <main+0x4e8>)
 8000b7a:	701a      	strb	r2, [r3, #0]
//			}
//			if (current_mcu_y == 10) {
//				ST7789_UpdateSector(&hst7789, 1);
//			}

			if (current_mcu_y >= JPEG_MCU_HEIGHT) {
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <main+0x4e8>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d905      	bls.n	8000b90 <main+0x4d4>
				//ST7789_UpdateSector(&hst7789, 2);
				current_mcu_y = 0;
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <main+0x4e8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
				// Flag JPEG as idle
				jpeg_state = 0;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <main+0x4f4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
			//HAL_Delay(10);
			//ST7789_Update(&hst7789, 1);

		}

		if (hst7789.spi_state == 0)
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <main+0x4f0>)
 8000b92:	791b      	ldrb	r3, [r3, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f47f ae7c 	bne.w	8000892 <main+0x1d6>
			ST7789_UpdateAutomatic(&hst7789);
 8000b9a:	4804      	ldr	r0, [pc, #16]	@ (8000bac <main+0x4f0>)
 8000b9c:	f001 fd42 	bl	8002624 <ST7789_UpdateAutomatic>
	{
 8000ba0:	e677      	b.n	8000892 <main+0x1d6>
 8000ba2:	bf00      	nop
 8000ba4:	2402931b 	.word	0x2402931b
 8000ba8:	24028598 	.word	0x24028598
 8000bac:	24001224 	.word	0x24001224
 8000bb0:	2402931a 	.word	0x2402931a

08000bb4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b09c      	sub	sp, #112	@ 0x70
 8000bb8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	224c      	movs	r2, #76	@ 0x4c
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f017 fbb8 	bl	8018338 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2220      	movs	r2, #32
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f017 fbb2 	bl	8018338 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f00c fc03 	bl	800d3e0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b30      	ldr	r3, [pc, #192]	@ (8000ca0 <SystemClock_Config+0xec>)
 8000be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be2:	4a2f      	ldr	r2, [pc, #188]	@ (8000ca0 <SystemClock_Config+0xec>)
 8000be4:	f023 0301 	bic.w	r3, r3, #1
 8000be8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000bea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <SystemClock_Config+0xec>)
 8000bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca4 <SystemClock_Config+0xf0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca4 <SystemClock_Config+0xf0>)
 8000bfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <SystemClock_Config+0xf0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c0c:	bf00      	nop
 8000c0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <SystemClock_Config+0xf0>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c1a:	d1f8      	bne.n	8000c0e <SystemClock_Config+0x5a>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 8000c32:	2318      	movs	r3, #24
 8000c34:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c42:	230c      	movs	r3, #12
 8000c44:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00c fc0e 	bl	800d474 <HAL_RCC_OscConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000c5e:	f000 fce3 	bl	8001628 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c62:	233f      	movs	r3, #63	@ 0x3f
 8000c64:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c66:	2303      	movs	r3, #3
 8000c68:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c72:	2340      	movs	r3, #64	@ 0x40
 8000c74:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c76:	2340      	movs	r3, #64	@ 0x40
 8000c78:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c7e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c80:	2340      	movs	r3, #64	@ 0x40
 8000c82:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2102      	movs	r1, #2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f00d f84d 	bl	800dd28 <HAL_RCC_ClockConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8000c94:	f000 fcc8 	bl	8001628 <Error_Handler>
	}
}
 8000c98:	bf00      	nop
 8000c9a:	3770      	adds	r7, #112	@ 0x70
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	58000400 	.word	0x58000400
 8000ca4:	58024800 	.word	0x58024800

08000ca8 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0b0      	sub	sp, #192	@ 0xc0
 8000cac:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	22c0      	movs	r2, #192	@ 0xc0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f017 fb3f 	bl	8018338 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C2
 8000cba:	4a1f      	ldr	r2, [pc, #124]	@ (8000d38 <PeriphCommonClock_Config+0x90>)
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e9c7 2300 	strd	r2, r3, [r7]
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SPI4;
	PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 20;
 8000ccc:	2314      	movs	r3, #20
 8000cce:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000cec:	2302      	movs	r3, #2
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000cf8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000cfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d02:	643b      	str	r3, [r7, #64]	@ 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000d08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d0c:	667b      	str	r3, [r7, #100]	@ 0x64
	PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00d fb8e 	bl	800e440 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <PeriphCommonClock_Config+0x86>
	{
		Error_Handler();
 8000d2a:	f000 fc7d 	bl	8001628 <Error_Handler>
	}
}
 8000d2e:	bf00      	nop
 8000d30:	37c0      	adds	r7, #192	@ 0xc0
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	00082008 	.word	0x00082008

08000d3c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d4e:	463b      	mov	r3, r7
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
 8000d5c:	615a      	str	r2, [r3, #20]
 8000d5e:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000d60:	4b38      	ldr	r3, [pc, #224]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000d62:	4a39      	ldr	r2, [pc, #228]	@ (8000e48 <MX_ADC1_Init+0x10c>)
 8000d64:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000d66:	4b37      	ldr	r3, [pc, #220]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000d68:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000d6c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000d6e:	4b35      	ldr	r3, [pc, #212]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d74:	4b33      	ldr	r3, [pc, #204]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d7a:	4b32      	ldr	r3, [pc, #200]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d80:	4b30      	ldr	r3, [pc, #192]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000d86:	4b2f      	ldr	r3, [pc, #188]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 2;
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d92:	4b2c      	ldr	r3, [pc, #176]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d98:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d9e:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000da4:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000da6:	2203      	movs	r2, #3
 8000da8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000daa:	4b26      	ldr	r3, [pc, #152]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000db0:	4b24      	ldr	r3, [pc, #144]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000db6:	4b23      	ldr	r3, [pc, #140]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Oversampling.Ratio = 1;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc4:	481f      	ldr	r0, [pc, #124]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000dc6:	f001 ff41 	bl	8002c4c <HAL_ADC_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8000dd0:	f000 fc2a 	bl	8001628 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4819      	ldr	r0, [pc, #100]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000de0:	f002 feee 	bl	8003bc0 <HAL_ADCEx_MultiModeConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_ADC1_Init+0xb2>
	{
		Error_Handler();
 8000dea:	f000 fc1d 	bl	8001628 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <MX_ADC1_Init+0x110>)
 8000df0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df2:	2306      	movs	r3, #6
 8000df4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000df6:	2307      	movs	r3, #7
 8000df8:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dfa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000dfe:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e00:	2304      	movs	r3, #4
 8000e02:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000e12:	f002 f995 	bl	8003140 <HAL_ADC_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_ADC1_Init+0xe4>
	{
		Error_Handler();
 8000e1c:	f000 fc04 	bl	8001628 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000e20:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <MX_ADC1_Init+0x114>)
 8000e22:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e24:	230c      	movs	r3, #12
 8000e26:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000e2e:	f002 f987 	bl	8003140 <HAL_ADC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_ADC1_Init+0x100>
	{
		Error_Handler();
 8000e38:	f000 fbf6 	bl	8001628 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	@ 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	24000384 	.word	0x24000384
 8000e48:	40022000 	.word	0x40022000
 8000e4c:	0c900008 	.word	0x0c900008
 8000e50:	10c00010 	.word	0x10c00010

08000e54 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ecc <MX_I2C1_Init+0x78>)
 8000e5c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00401959;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000e60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed0 <MX_I2C1_Init+0x7c>)
 8000e62:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e8e:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000e90:	f006 f91c 	bl	80070cc <HAL_I2C_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000e9a:	f000 fbc5 	bl	8001628 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000ea2:	f008 fd4d 	bl	8009940 <HAL_I2CEx_ConfigAnalogFilter>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000eac:	f000 fbbc 	bl	8001628 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_I2C1_Init+0x74>)
 8000eb4:	f008 fd8f 	bl	80099d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000ebe:	f000 fbb3 	bl	8001628 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	24000460 	.word	0x24000460
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	00401959 	.word	0x00401959

08000ed4 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000eda:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <MX_I2C2_Init+0x78>)
 8000edc:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00401959;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <MX_I2C2_Init+0x7c>)
 8000ee2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f0e:	480e      	ldr	r0, [pc, #56]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000f10:	f006 f8dc 	bl	80070cc <HAL_I2C_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8000f1a:	f000 fb85 	bl	8001628 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000f22:	f008 fd0d 	bl	8009940 <HAL_I2CEx_ConfigAnalogFilter>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8000f2c:	f000 fb7c 	bl	8001628 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000f34:	f008 fd4f 	bl	80099d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8000f3e:	f000 fb73 	bl	8001628 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	240004b4 	.word	0x240004b4
 8000f4c:	40005800 	.word	0x40005800
 8000f50:	00401959 	.word	0x00401959

08000f54 <MX_JPEG_Init>:
 * @brief JPEG Initialization Function
 * @param None
 * @retval None
 */
static void MX_JPEG_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	/* USER CODE END JPEG_Init 0 */

	/* USER CODE BEGIN JPEG_Init 1 */

	/* USER CODE END JPEG_Init 1 */
	hjpeg.Instance = JPEG;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_JPEG_Init+0x20>)
 8000f5a:	4a07      	ldr	r2, [pc, #28]	@ (8000f78 <MX_JPEG_Init+0x24>)
 8000f5c:	601a      	str	r2, [r3, #0]
	if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_JPEG_Init+0x20>)
 8000f60:	f008 fd86 	bl	8009a70 <HAL_JPEG_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_JPEG_Init+0x1a>
	{
		Error_Handler();
 8000f6a:	f000 fb5d 	bl	8001628 <Error_Handler>
	}
	/* USER CODE BEGIN JPEG_Init 2 */

	/* USER CODE END JPEG_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	240005f8 	.word	0x240005f8
 8000f78:	52003000 	.word	0x52003000

08000f7c <MX_SPI4_Init>:
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8000f80:	4b27      	ldr	r3, [pc, #156]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000f82:	4a28      	ldr	r2, [pc, #160]	@ (8001024 <MX_SPI4_Init+0xa8>)
 8000f84:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f86:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000f88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f8c:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000f8e:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000f90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f94:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f96:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000faa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fae:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi4.Init.CRCPolynomial = 0x0;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd4:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	@ 0x44
	hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_SPI4_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800100c:	4804      	ldr	r0, [pc, #16]	@ (8001020 <MX_SPI4_Init+0xa4>)
 800100e:	f00f ff15 	bl	8010e3c <HAL_SPI_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_SPI4_Init+0xa0>
	{
		Error_Handler();
 8001018:	f000 fb06 	bl	8001628 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	24000728 	.word	0x24000728
 8001024:	40013400 	.word	0x40013400

08001028 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 800102e:	4a25      	ldr	r2, [pc, #148]	@ (80010c4 <MX_USART1_UART_Init+0x9c>)
 8001030:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 111111;
 8001032:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 8001034:	4a24      	ldr	r2, [pc, #144]	@ (80010c8 <MX_USART1_UART_Init+0xa0>)
 8001036:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001038:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800103e:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800104a:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 800104c:	220c      	movs	r2, #12
 800104e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105c:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001068:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 800106a:	2220      	movs	r2, #32
 800106c:	629a      	str	r2, [r3, #40]	@ 0x28
	huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 8001070:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001076:	4812      	ldr	r0, [pc, #72]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 8001078:	f010 fe8b 	bl	8011d92 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART1_UART_Init+0x5e>
	{
		Error_Handler();
 8001082:	f000 fad1 	bl	8001628 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 800108a:	f012 fda6 	bl	8013bda <HAL_UARTEx_SetTxFifoThreshold>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART1_UART_Init+0x70>
	{
		Error_Handler();
 8001094:	f000 fac8 	bl	8001628 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 800109c:	f012 fddb 	bl	8013c56 <HAL_UARTEx_SetRxFifoThreshold>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART1_UART_Init+0x82>
	{
		Error_Handler();
 80010a6:	f000 fabf 	bl	8001628 <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <MX_USART1_UART_Init+0x98>)
 80010ac:	f012 fd5a 	bl	8013b64 <HAL_UARTEx_EnableFifoMode>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART1_UART_Init+0x92>
	{
		Error_Handler();
 80010b6:	f000 fab7 	bl	8001628 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	24000828 	.word	0x24000828
 80010c4:	40011000 	.word	0x40011000
 80010c8:	0001b207 	.word	0x0001b207

080010cc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <MX_DMA_Init+0x9c>)
 80010d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010d8:	4a23      	ldr	r2, [pc, #140]	@ (8001168 <MX_DMA_Init+0x9c>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <MX_DMA_Init+0x9c>)
 80010e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80010f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <MX_DMA_Init+0x9c>)
 80010f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001168 <MX_DMA_Init+0x9c>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_DMA_Init+0x9c>)
 8001102:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	200b      	movs	r0, #11
 8001114:	f002 ff0d 	bl	8003f32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001118:	200b      	movs	r0, #11
 800111a:	f002 ff24 	bl	8003f66 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	200c      	movs	r0, #12
 8001124:	f002 ff05 	bl	8003f32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001128:	200c      	movs	r0, #12
 800112a:	f002 ff1c 	bl	8003f66 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	200d      	movs	r0, #13
 8001134:	f002 fefd 	bl	8003f32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001138:	200d      	movs	r0, #13
 800113a:	f002 ff14 	bl	8003f66 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	200e      	movs	r0, #14
 8001144:	f002 fef5 	bl	8003f32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001148:	200e      	movs	r0, #14
 800114a:	f002 ff0c 	bl	8003f66 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2038      	movs	r0, #56	@ 0x38
 8001154:	f002 feed 	bl	8003f32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001158:	2038      	movs	r0, #56	@ 0x38
 800115a:	f002 ff04 	bl	8003f66 <HAL_NVIC_EnableIRQ>

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	58024400 	.word	0x58024400

0800116c <MX_MDMA_Init>:

/**
 * Enable MDMA controller clock
 */
static void MX_MDMA_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

	/* MDMA controller clock enable */
	__HAL_RCC_MDMA_CLK_ENABLE();
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <MX_MDMA_Init+0x3c>)
 8001174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001178:	4a0b      	ldr	r2, [pc, #44]	@ (80011a8 <MX_MDMA_Init+0x3c>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_MDMA_Init+0x3c>)
 8001184:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
	/* Local variables */

	/* MDMA interrupt initialization */
	/* MDMA_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	207a      	movs	r0, #122	@ 0x7a
 8001196:	f002 fecc 	bl	8003f32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800119a:	207a      	movs	r0, #122	@ 0x7a
 800119c:	f002 fee3 	bl	8003f66 <HAL_NVIC_EnableIRQ>

}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	58024400 	.word	0x58024400

080011ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80011c2:	4b47      	ldr	r3, [pc, #284]	@ (80012e0 <MX_GPIO_Init+0x134>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c8:	4a45      	ldr	r2, [pc, #276]	@ (80012e0 <MX_GPIO_Init+0x134>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d2:	4b43      	ldr	r3, [pc, #268]	@ (80012e0 <MX_GPIO_Init+0x134>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011e0:	4b3f      	ldr	r3, [pc, #252]	@ (80012e0 <MX_GPIO_Init+0x134>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e6:	4a3e      	ldr	r2, [pc, #248]	@ (80012e0 <MX_GPIO_Init+0x134>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f0:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <MX_GPIO_Init+0x134>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b38      	ldr	r3, [pc, #224]	@ (80012e0 <MX_GPIO_Init+0x134>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001204:	4a36      	ldr	r2, [pc, #216]	@ (80012e0 <MX_GPIO_Init+0x134>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800120e:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <MX_GPIO_Init+0x134>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800121c:	4b30      	ldr	r3, [pc, #192]	@ (80012e0 <MX_GPIO_Init+0x134>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001222:	4a2f      	ldr	r2, [pc, #188]	@ (80012e0 <MX_GPIO_Init+0x134>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800122c:	4b2c      	ldr	r3, [pc, #176]	@ (80012e0 <MX_GPIO_Init+0x134>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <MX_GPIO_Init+0x134>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001240:	4a27      	ldr	r2, [pc, #156]	@ (80012e0 <MX_GPIO_Init+0x134>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <MX_GPIO_Init+0x134>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2120      	movs	r1, #32
 800125c:	4821      	ldr	r0, [pc, #132]	@ (80012e4 <MX_GPIO_Init+0x138>)
 800125e:	f005 ff1b 	bl	8007098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001268:	481f      	ldr	r0, [pc, #124]	@ (80012e8 <MX_GPIO_Init+0x13c>)
 800126a:	f005 ff15 	bl	8007098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI4_DC_Pin */
	GPIO_InitStruct.Pin = SPI4_DC_Pin;
 800126e:	2320      	movs	r3, #32
 8001270:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <MX_GPIO_Init+0x138>)
 8001286:	f005 fd57 	bl	8006d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_L_Pin */
	GPIO_InitStruct.Pin = BTN_L_Pin;
 800128a:	2320      	movs	r3, #32
 800128c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN_L_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4813      	ldr	r0, [pc, #76]	@ (80012ec <MX_GPIO_Init+0x140>)
 800129e:	f005 fd4b 	bl	8006d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_R_Pin */
	GPIO_InitStruct.Pin = BTN_R_Pin;
 80012a2:	2320      	movs	r3, #32
 80012a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_GPIO_Init+0x13c>)
 80012b6:	f005 fd3f 	bl	8006d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI4_RST_Pin */
	GPIO_InitStruct.Pin = SPI4_RST_Pin;
 80012ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_GPIO_Init+0x13c>)
 80012d4:	f005 fd30 	bl	8006d38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	@ 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	58024400 	.word	0x58024400
 80012e4:	58021000 	.word	0x58021000
 80012e8:	58020800 	.word	0x58020800
 80012ec:	58020000 	.word	0x58020000

080012f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	uint8_t ret = XBEE_DMACallback(&hxbee);
 80012f8:	480d      	ldr	r0, [pc, #52]	@ (8001330 <HAL_UART_RxCpltCallback+0x40>)
 80012fa:	f014 f935 	bl	8015568 <XBEE_DMACallback>
 80012fe:	4603      	mov	r3, r0
 8001300:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00e      	beq.n	8001326 <HAL_UART_RxCpltCallback+0x36>
		sprintf(ssd_msg, " PKT Err: %d", ret);
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	461a      	mov	r2, r3
 800130c:	4909      	ldr	r1, [pc, #36]	@ (8001334 <HAL_UART_RxCpltCallback+0x44>)
 800130e:	480a      	ldr	r0, [pc, #40]	@ (8001338 <HAL_UART_RxCpltCallback+0x48>)
 8001310:	f016 fff0 	bl	80182f4 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001314:	4808      	ldr	r0, [pc, #32]	@ (8001338 <HAL_UART_RxCpltCallback+0x48>)
 8001316:	f7fe ffe3 	bl	80002e0 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <HAL_UART_RxCpltCallback+0x48>)
 8001322:	f000 f92f 	bl	8001584 <WriteDebug>
	//	// B0 B1 B2 B3 B4 XX XX B7
	//	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate
	//
	//	// Packet is ready
	//	uart_rx_packetState = 0;
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	24026a70 	.word	0x24026a70
 8001334:	08018b74 	.word	0x08018b74
 8001338:	2400115c 	.word	0x2400115c

0800133c <HAL_JPEG_DecodeCpltCallback>:

// ------------------------------------------------------------ OVERRIDE JPEG DMA CALLBACKS -- //
// JPEG hardware has completed the current image
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef * hjpeg) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	//sprintf(ssd_msg, " JPEG CPLT %d", hjpeg->OutDataLength);
	//WriteDebug(ssd_msg, strlen(ssd_msg));
	jpeg_state = 2;
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2402931a 	.word	0x2402931a

0800135c <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 8001364:	4909      	ldr	r1, [pc, #36]	@ (800138c <HAL_JPEG_ErrorCallback+0x30>)
 8001366:	480a      	ldr	r0, [pc, #40]	@ (8001390 <HAL_JPEG_ErrorCallback+0x34>)
 8001368:	f016 ffc4 	bl	80182f4 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 800136c:	4808      	ldr	r0, [pc, #32]	@ (8001390 <HAL_JPEG_ErrorCallback+0x34>)
 800136e:	f7fe ffb7 	bl	80002e0 <strlen>
 8001372:	4603      	mov	r3, r0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	@ (8001390 <HAL_JPEG_ErrorCallback+0x34>)
 800137a:	f000 f903 	bl	8001584 <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 2;
 800137e:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_JPEG_ErrorCallback+0x38>)
 8001380:	2202      	movs	r2, #2
 8001382:	701a      	strb	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	08018b84 	.word	0x08018b84
 8001390:	2400115c 	.word	0x2400115c
 8001394:	2402931a 	.word	0x2402931a

08001398 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef * hjpeg, uint8_t * pDataOut, uint32_t OutDataLength) {
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
	//	sprintf(ssd_msg, " JPEG D %d", OutDataLength);
	//	WriteDebug(ssd_msg, strlen(ssd_msg));
	//HAL_JPEG_Abort(hjpeg);
	jpeg_state = 2;
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <HAL_JPEG_DataReadyCallback+0x20>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	701a      	strb	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2402931a 	.word	0x2402931a

080013bc <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <HAL_SPI_TxCpltCallback+0x18>)
 80013c6:	f001 f957 	bl	8002678 <ST7789_DMATransmitCplt>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	24001224 	.word	0x24001224

080013d8 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	// Roll the blunt (rolling average)
	//adc_average[0] = 0;
	//adc_average[1] = 0;
	uint16_t adc_newavg[2] = {0, 0};
 80013e0:	2300      	movs	r3, #0
 80013e2:	81bb      	strh	r3, [r7, #12]
 80013e4:	2300      	movs	r3, #0
 80013e6:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 20; i++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	e01f      	b.n	800142e <HAL_ADC_ConvCpltCallback+0x56>
		// Accumulate the samples
		// Have to pre-divide so the result fits in a uint16
		adc_newavg[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	bfb8      	it	lt
 80013f8:	425b      	neglt	r3, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	0053      	lsls	r3, r2, #1
 80013fe:	3318      	adds	r3, #24
 8001400:	443b      	add	r3, r7
 8001402:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8001406:	4858      	ldr	r0, [pc, #352]	@ (8001568 <HAL_ADC_ConvCpltCallback+0x190>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800140e:	4857      	ldr	r0, [pc, #348]	@ (800156c <HAL_ADC_ConvCpltCallback+0x194>)
 8001410:	fba0 0303 	umull	r0, r3, r0, r3
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	b29b      	uxth	r3, r3
 8001418:	440b      	add	r3, r1
 800141a:	b299      	uxth	r1, r3
 800141c:	0053      	lsls	r3, r2, #1
 800141e:	3318      	adds	r3, #24
 8001420:	443b      	add	r3, r7
 8001422:	460a      	mov	r2, r1
 8001424:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (int i = 0; i < 20; i++) {
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b13      	cmp	r3, #19
 8001432:	dddc      	ble.n	80013ee <HAL_ADC_ConvCpltCallback+0x16>
	}

	for (int i = 0; i < 2; i++) {
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	e081      	b.n	800153e <HAL_ADC_ConvCpltCallback+0x166>
		// Interpolate for smoother control
		adc_average[i] *= 0.4;
 800143a:	4a4d      	ldr	r2, [pc, #308]	@ (8001570 <HAL_ADC_ConvCpltCallback+0x198>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800144a:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8001558 <HAL_ADC_ConvCpltCallback+0x180>
 800144e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001452:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001456:	ee17 3a90 	vmov	r3, s15
 800145a:	b299      	uxth	r1, r3
 800145c:	4a44      	ldr	r2, [pc, #272]	@ (8001570 <HAL_ADC_ConvCpltCallback+0x198>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_average[i] += adc_newavg[i]*0.6;
 8001464:	4a42      	ldr	r2, [pc, #264]	@ (8001570 <HAL_ADC_ConvCpltCallback+0x198>)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	3318      	adds	r3, #24
 800147a:	443b      	add	r3, r7
 800147c:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001488:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8001560 <HAL_ADC_ConvCpltCallback+0x188>
 800148c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001490:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001494:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001498:	ee17 3a90 	vmov	r3, s15
 800149c:	b299      	uxth	r1, r3
 800149e:	4a34      	ldr	r2, [pc, #208]	@ (8001570 <HAL_ADC_ConvCpltCallback+0x198>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 80014a6:	4a32      	ldr	r2, [pc, #200]	@ (8001570 <HAL_ADC_ConvCpltCallback+0x198>)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	0bdb      	lsrs	r3, r3, #15
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4619      	mov	r1, r3
 80014ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001574 <HAL_ADC_ConvCpltCallback+0x19c>)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4413      	add	r3, r2
 80014c0:	460a      	mov	r2, r1
 80014c2:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 80014c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001570 <HAL_ADC_ConvCpltCallback+0x198>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014cc:	09db      	lsrs	r3, r3, #7
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b2d9      	uxtb	r1, r3
 80014d2:	4a29      	ldr	r2, [pc, #164]	@ (8001578 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4413      	add	r3, r2
 80014d8:	460a      	mov	r2, r1
 80014da:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 80014dc:	4a25      	ldr	r2, [pc, #148]	@ (8001574 <HAL_ADC_ConvCpltCallback+0x19c>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00a      	beq.n	80014fe <HAL_ADC_ConvCpltCallback+0x126>
 80014e8:	4a23      	ldr	r2, [pc, #140]	@ (8001578 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	b2d9      	uxtb	r1, r3
 80014f4:	4a20      	ldr	r2, [pc, #128]	@ (8001578 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4413      	add	r3, r2
 80014fa:	460a      	mov	r2, r1
 80014fc:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 80014fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4413      	add	r3, r2
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d204      	bcs.n	8001518 <HAL_ADC_ConvCpltCallback+0x140>
			slider_magnitude[i] = 0;
 800150e:	4a1a      	ldr	r2, [pc, #104]	@ (8001578 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4413      	add	r3, r2
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 8001518:	4a17      	ldr	r2, [pc, #92]	@ (8001578 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800152a:	429a      	cmp	r2, r3
 800152c:	dd04      	ble.n	8001538 <HAL_ADC_ConvCpltCallback+0x160>
			slider_magnitude[i] = 0xFF;
 800152e:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4413      	add	r3, r2
 8001534:	22ff      	movs	r2, #255	@ 0xff
 8001536:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	3301      	adds	r3, #1
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b01      	cmp	r3, #1
 8001542:	f77f af7a 	ble.w	800143a <HAL_ADC_ConvCpltCallback+0x62>

	}
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	f3af 8000 	nop.w
 8001558:	9999999a 	.word	0x9999999a
 800155c:	3fd99999 	.word	0x3fd99999
 8001560:	33333333 	.word	0x33333333
 8001564:	3fe33333 	.word	0x3fe33333
 8001568:	24026a3c 	.word	0x24026a3c
 800156c:	cccccccd 	.word	0xcccccccd
 8001570:	24026a64 	.word	0x24026a64
 8001574:	24026a6c 	.word	0x24026a6c
 8001578:	24026a68 	.word	0x24026a68
 800157c:	24000000 	.word	0x24000000
 8001580:	24000001 	.word	0x24000001

08001584 <WriteDebug>:
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
	}
}

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear(&hssd1);
 8001590:	480d      	ldr	r0, [pc, #52]	@ (80015c8 <WriteDebug+0x44>)
 8001592:	f000 fe43 	bl	800221c <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8001596:	480d      	ldr	r0, [pc, #52]	@ (80015cc <WriteDebug+0x48>)
 8001598:	f000 fe40 	bl	800221c <SSD1306_Clear>
	SSD1306_DrawString(&hssd1, str_ptr, str_len);
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	461a      	mov	r2, r3
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4809      	ldr	r0, [pc, #36]	@ (80015c8 <WriteDebug+0x44>)
 80015a4:	f000 feb8 	bl	8002318 <SSD1306_DrawString>
	SSD1306_DrawString(&hssd2, str_ptr, str_len);
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	461a      	mov	r2, r3
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4807      	ldr	r0, [pc, #28]	@ (80015cc <WriteDebug+0x48>)
 80015b0:	f000 feb2 	bl	8002318 <SSD1306_DrawString>
	SSD1306_Update(&hssd1);
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <WriteDebug+0x44>)
 80015b6:	f000 fe45 	bl	8002244 <SSD1306_Update>
	SSD1306_Update(&hssd2);
 80015ba:	4804      	ldr	r0, [pc, #16]	@ (80015cc <WriteDebug+0x48>)
 80015bc:	f000 fe42 	bl	8002244 <SSD1306_Update>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	24000934 	.word	0x24000934
 80015cc:	24000948 	.word	0x24000948

080015d0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80015d6:	463b      	mov	r3, r7
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 80015e2:	f002 fcdb 	bl	8003f9c <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015e6:	2301      	movs	r3, #1
 80015e8:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015f2:	231f      	movs	r3, #31
 80015f4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80015f6:	2387      	movs	r3, #135	@ 0x87
 80015f8:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80015fe:	2300      	movs	r3, #0
 8001600:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001602:	2301      	movs	r3, #1
 8001604:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001606:	2301      	movs	r3, #1
 8001608:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001612:	463b      	mov	r3, r7
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fcf9 	bl	800400c <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800161a:	2004      	movs	r0, #4
 800161c:	f002 fcd6 	bl	8003fcc <HAL_MPU_Enable>

}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <Error_Handler+0x8>

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <HAL_MspInit+0x30>)
 800163c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001640:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_MspInit+0x30>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_MspInit+0x30>)
 800164c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	58024400 	.word	0x58024400

08001668 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a3e      	ldr	r2, [pc, #248]	@ (8001780 <HAL_ADC_MspInit+0x118>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d175      	bne.n	8001776 <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800168a:	4b3e      	ldr	r3, [pc, #248]	@ (8001784 <HAL_ADC_MspInit+0x11c>)
 800168c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001690:	4a3c      	ldr	r2, [pc, #240]	@ (8001784 <HAL_ADC_MspInit+0x11c>)
 8001692:	f043 0320 	orr.w	r3, r3, #32
 8001696:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800169a:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <HAL_ADC_MspInit+0x11c>)
 800169c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016a0:	f003 0320 	and.w	r3, r3, #32
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <HAL_ADC_MspInit+0x11c>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ae:	4a35      	ldr	r2, [pc, #212]	@ (8001784 <HAL_ADC_MspInit+0x11c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <HAL_ADC_MspInit+0x11c>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001784 <HAL_ADC_MspInit+0x11c>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001784 <HAL_ADC_MspInit+0x11c>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <HAL_ADC_MspInit+0x11c>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 80016e4:	2340      	movs	r3, #64	@ 0x40
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e8:	2303      	movs	r3, #3
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4824      	ldr	r0, [pc, #144]	@ (8001788 <HAL_ADC_MspInit+0x120>)
 80016f8:	f005 fb1e 	bl	8006d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 80016fc:	2310      	movs	r3, #16
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001700:	2303      	movs	r3, #3
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	481f      	ldr	r0, [pc, #124]	@ (800178c <HAL_ADC_MspInit+0x124>)
 8001710:	f005 fb12 	bl	8006d38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream3;
 8001714:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 8001716:	4a1f      	ldr	r2, [pc, #124]	@ (8001794 <HAL_ADC_MspInit+0x12c>)
 8001718:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800171a:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 800171c:	2209      	movs	r2, #9
 800171e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 800172e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001732:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 8001736:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800173a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 800173e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001742:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 8001746:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800174a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800174c:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 800174e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001752:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800175a:	480d      	ldr	r0, [pc, #52]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 800175c:	f002 fc96 	bl	800408c <HAL_DMA_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001766:	f7ff ff5f 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 800176e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001770:	4a07      	ldr	r2, [pc, #28]	@ (8001790 <HAL_ADC_MspInit+0x128>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	@ 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40022000 	.word	0x40022000
 8001784:	58024400 	.word	0x58024400
 8001788:	58020000 	.word	0x58020000
 800178c:	58020800 	.word	0x58020800
 8001790:	240003e8 	.word	0x240003e8
 8001794:	40020058 	.word	0x40020058

08001798 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	@ 0x30
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a73      	ldr	r2, [pc, #460]	@ (8001984 <HAL_I2C_MspInit+0x1ec>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d16d      	bne.n	8001896 <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4b73      	ldr	r3, [pc, #460]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c0:	4a71      	ldr	r2, [pc, #452]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80017d8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017de:	2312      	movs	r3, #18
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ea:	2304      	movs	r3, #4
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4865      	ldr	r0, [pc, #404]	@ (800198c <HAL_I2C_MspInit+0x1f4>)
 80017f6:	f005 fa9f 	bl	8006d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017fa:	4b63      	ldr	r3, [pc, #396]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 80017fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001800:	4a61      	ldr	r2, [pc, #388]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 8001802:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001806:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800180a:	4b5f      	ldr	r3, [pc, #380]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 800180c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001818:	4b5d      	ldr	r3, [pc, #372]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 800181a:	4a5e      	ldr	r2, [pc, #376]	@ (8001994 <HAL_I2C_MspInit+0x1fc>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800181e:	4b5c      	ldr	r3, [pc, #368]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 8001820:	2222      	movs	r2, #34	@ 0x22
 8001822:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001824:	4b5a      	ldr	r3, [pc, #360]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 8001826:	2240      	movs	r2, #64	@ 0x40
 8001828:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b59      	ldr	r3, [pc, #356]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b57      	ldr	r3, [pc, #348]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 8001832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001836:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001838:	4b55      	ldr	r3, [pc, #340]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183e:	4b54      	ldr	r3, [pc, #336]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001844:	4b52      	ldr	r3, [pc, #328]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800184a:	4b51      	ldr	r3, [pc, #324]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 800184c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001850:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001852:	4b4f      	ldr	r3, [pc, #316]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001858:	484d      	ldr	r0, [pc, #308]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 800185a:	f002 fc17 	bl	800408c <HAL_DMA_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001864:	f7ff fee0 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a49      	ldr	r2, [pc, #292]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 800186c:	639a      	str	r2, [r3, #56]	@ 0x38
 800186e:	4a48      	ldr	r2, [pc, #288]	@ (8001990 <HAL_I2C_MspInit+0x1f8>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	201f      	movs	r0, #31
 800187a:	f002 fb5a 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800187e:	201f      	movs	r0, #31
 8001880:	f002 fb71 	bl	8003f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	2020      	movs	r0, #32
 800188a:	f002 fb52 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800188e:	2020      	movs	r0, #32
 8001890:	f002 fb69 	bl	8003f66 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001894:	e071      	b.n	800197a <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a3f      	ldr	r2, [pc, #252]	@ (8001998 <HAL_I2C_MspInit+0x200>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d16c      	bne.n	800197a <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b39      	ldr	r3, [pc, #228]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a6:	4a38      	ldr	r2, [pc, #224]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b0:	4b35      	ldr	r3, [pc, #212]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c4:	2312      	movs	r3, #18
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018d0:	2304      	movs	r3, #4
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	482c      	ldr	r0, [pc, #176]	@ (800198c <HAL_I2C_MspInit+0x1f4>)
 80018dc:	f005 fa2c 	bl	8006d38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018e0:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 80018e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018e6:	4a28      	ldr	r2, [pc, #160]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 80018e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018f0:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <HAL_I2C_MspInit+0x1f0>)
 80018f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 80018fe:	4b27      	ldr	r3, [pc, #156]	@ (800199c <HAL_I2C_MspInit+0x204>)
 8001900:	4a27      	ldr	r2, [pc, #156]	@ (80019a0 <HAL_I2C_MspInit+0x208>)
 8001902:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001904:	4b25      	ldr	r3, [pc, #148]	@ (800199c <HAL_I2C_MspInit+0x204>)
 8001906:	2224      	movs	r2, #36	@ 0x24
 8001908:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190a:	4b24      	ldr	r3, [pc, #144]	@ (800199c <HAL_I2C_MspInit+0x204>)
 800190c:	2240      	movs	r2, #64	@ 0x40
 800190e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b22      	ldr	r3, [pc, #136]	@ (800199c <HAL_I2C_MspInit+0x204>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b21      	ldr	r3, [pc, #132]	@ (800199c <HAL_I2C_MspInit+0x204>)
 8001918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191e:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <HAL_I2C_MspInit+0x204>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001924:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <HAL_I2C_MspInit+0x204>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800192a:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <HAL_I2C_MspInit+0x204>)
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001930:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <HAL_I2C_MspInit+0x204>)
 8001932:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001936:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <HAL_I2C_MspInit+0x204>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800193e:	4817      	ldr	r0, [pc, #92]	@ (800199c <HAL_I2C_MspInit+0x204>)
 8001940:	f002 fba4 	bl	800408c <HAL_DMA_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 800194a:	f7ff fe6d 	bl	8001628 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a12      	ldr	r2, [pc, #72]	@ (800199c <HAL_I2C_MspInit+0x204>)
 8001952:	639a      	str	r2, [r3, #56]	@ 0x38
 8001954:	4a11      	ldr	r2, [pc, #68]	@ (800199c <HAL_I2C_MspInit+0x204>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2021      	movs	r0, #33	@ 0x21
 8001960:	f002 fae7 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001964:	2021      	movs	r0, #33	@ 0x21
 8001966:	f002 fafe 	bl	8003f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	2022      	movs	r0, #34	@ 0x22
 8001970:	f002 fadf 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001974:	2022      	movs	r0, #34	@ 0x22
 8001976:	f002 faf6 	bl	8003f66 <HAL_NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3730      	adds	r7, #48	@ 0x30
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40005400 	.word	0x40005400
 8001988:	58024400 	.word	0x58024400
 800198c:	58020400 	.word	0x58020400
 8001990:	24000508 	.word	0x24000508
 8001994:	40020040 	.word	0x40020040
 8001998:	40005800 	.word	0x40005800
 800199c:	24000580 	.word	0x24000580
 80019a0:	40020028 	.word	0x40020028

080019a4 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a55      	ldr	r2, [pc, #340]	@ (8001b08 <HAL_JPEG_MspInit+0x164>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	f040 80a3 	bne.w	8001afe <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80019b8:	4b54      	ldr	r3, [pc, #336]	@ (8001b0c <HAL_JPEG_MspInit+0x168>)
 80019ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019be:	4a53      	ldr	r2, [pc, #332]	@ (8001b0c <HAL_JPEG_MspInit+0x168>)
 80019c0:	f043 0320 	orr.w	r3, r3, #32
 80019c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80019c8:	4b50      	ldr	r3, [pc, #320]	@ (8001b0c <HAL_JPEG_MspInit+0x168>)
 80019ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 80019d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 80019d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001b14 <HAL_JPEG_MspInit+0x170>)
 80019da:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80019dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 80019de:	2211      	movs	r2, #17
 80019e0:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80019e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80019e8:	4b49      	ldr	r3, [pc, #292]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 80019ea:	2240      	movs	r2, #64	@ 0x40
 80019ec:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80019ee:	4b48      	ldr	r3, [pc, #288]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80019f4:	4b46      	ldr	r3, [pc, #280]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80019fa:	4b45      	ldr	r3, [pc, #276]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001a00:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001a06:	4b42      	ldr	r3, [pc, #264]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a08:	2280      	movs	r2, #128	@ 0x80
 8001a0a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001a0c:	4b40      	ldr	r3, [pc, #256]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a12:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001a14:	4b3e      	ldr	r3, [pc, #248]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a16:	2220      	movs	r2, #32
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001a1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001a20:	4b3b      	ldr	r3, [pc, #236]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001a26:	4b3a      	ldr	r3, [pc, #232]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001a2c:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001a32:	4837      	ldr	r0, [pc, #220]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a34:	f009 fe92 	bl	800b75c <HAL_MDMA_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001a3e:	f7ff fdf3 	bl	8001628 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	4832      	ldr	r0, [pc, #200]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a48:	f009 fed4 	bl	800b7f4 <HAL_MDMA_ConfigPostRequestMask>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001a52:	f7ff fde9 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a2d      	ldr	r2, [pc, #180]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001b10 <HAL_JPEG_MspInit+0x16c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001a64:	4a2d      	ldr	r2, [pc, #180]	@ (8001b1c <HAL_JPEG_MspInit+0x178>)
 8001a66:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001a68:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001a6a:	2214      	movs	r2, #20
 8001a6c:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001a74:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001a76:	2240      	movs	r2, #64	@ 0x40
 8001a78:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001a7a:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001a86:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001a88:	2208      	movs	r2, #8
 8001a8a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001a8e:	2220      	movs	r2, #32
 8001a90:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001a92:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001a9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001ab8:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001abe:	4816      	ldr	r0, [pc, #88]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001ac0:	f009 fe4c 	bl	800b75c <HAL_MDMA_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001aca:	f7ff fdad 	bl	8001628 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4811      	ldr	r0, [pc, #68]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001ad4:	f009 fe8e 	bl	800b7f4 <HAL_MDMA_ConfigPostRequestMask>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001ade:	f7ff fda3 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001ae6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8001b18 <HAL_JPEG_MspInit+0x174>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2079      	movs	r0, #121	@ 0x79
 8001af4:	f002 fa1d 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001af8:	2079      	movs	r0, #121	@ 0x79
 8001afa:	f002 fa34 	bl	8003f66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	52003000 	.word	0x52003000
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	24000650 	.word	0x24000650
 8001b14:	52000040 	.word	0x52000040
 8001b18:	240006bc 	.word	0x240006bc
 8001b1c:	52000080 	.word	0x52000080

08001b20 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c34 <HAL_SPI_MspInit+0x114>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d173      	bne.n	8001c2a <HAL_SPI_MspInit+0x10a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001b42:	4b3d      	ldr	r3, [pc, #244]	@ (8001c38 <HAL_SPI_MspInit+0x118>)
 8001b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b48:	4a3b      	ldr	r2, [pc, #236]	@ (8001c38 <HAL_SPI_MspInit+0x118>)
 8001b4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b52:	4b39      	ldr	r3, [pc, #228]	@ (8001c38 <HAL_SPI_MspInit+0x118>)
 8001b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b60:	4b35      	ldr	r3, [pc, #212]	@ (8001c38 <HAL_SPI_MspInit+0x118>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b66:	4a34      	ldr	r2, [pc, #208]	@ (8001c38 <HAL_SPI_MspInit+0x118>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b70:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <HAL_SPI_MspInit+0x118>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001b7e:	2344      	movs	r3, #68	@ 0x44
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4828      	ldr	r0, [pc, #160]	@ (8001c3c <HAL_SPI_MspInit+0x11c>)
 8001b9a:	f005 f8cd 	bl	8006d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001bae:	2305      	movs	r3, #5
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4820      	ldr	r0, [pc, #128]	@ (8001c3c <HAL_SPI_MspInit+0x11c>)
 8001bba:	f005 f8bd 	bl	8006d38 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8001bbe:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001bc0:	4a20      	ldr	r2, [pc, #128]	@ (8001c44 <HAL_SPI_MspInit+0x124>)
 8001bc2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001bc6:	2254      	movs	r2, #84	@ 0x54
 8001bc8:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001bcc:	2240      	movs	r2, #64	@ 0x40
 8001bce:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001bd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bdc:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be4:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001bf2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001bf6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001bfe:	4810      	ldr	r0, [pc, #64]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001c00:	f002 fa44 	bl	800408c <HAL_DMA_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 8001c0a:	f7ff fd0d 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001c12:	679a      	str	r2, [r3, #120]	@ 0x78
 8001c14:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <HAL_SPI_MspInit+0x120>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2054      	movs	r0, #84	@ 0x54
 8001c20:	f002 f987 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001c24:	2054      	movs	r0, #84	@ 0x54
 8001c26:	f002 f99e 	bl	8003f66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	@ 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40013400 	.word	0x40013400
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	58021000 	.word	0x58021000
 8001c40:	240007b0 	.word	0x240007b0
 8001c44:	40020010 	.word	0x40020010

08001c48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0ba      	sub	sp, #232	@ 0xe8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	22c0      	movs	r2, #192	@ 0xc0
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f016 fb65 	bl	8018338 <memset>
  if(huart->Instance==USART1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a43      	ldr	r2, [pc, #268]	@ (8001d80 <HAL_UART_MspInit+0x138>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d17e      	bne.n	8001d76 <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c78:	f04f 0201 	mov.w	r2, #1
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f00c fbd6 	bl	800e440 <HAL_RCCEx_PeriphCLKConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c9a:	f7ff fcc5 	bl	8001628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9e:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <HAL_UART_MspInit+0x13c>)
 8001ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ca4:	4a37      	ldr	r2, [pc, #220]	@ (8001d84 <HAL_UART_MspInit+0x13c>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cae:	4b35      	ldr	r3, [pc, #212]	@ (8001d84 <HAL_UART_MspInit+0x13c>)
 8001cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbc:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <HAL_UART_MspInit+0x13c>)
 8001cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc2:	4a30      	ldr	r2, [pc, #192]	@ (8001d84 <HAL_UART_MspInit+0x13c>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_UART_MspInit+0x13c>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cda:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4821      	ldr	r0, [pc, #132]	@ (8001d88 <HAL_UART_MspInit+0x140>)
 8001d02:	f005 f819 	bl	8006d38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d08:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <HAL_UART_MspInit+0x148>)
 8001d0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d0e:	2229      	movs	r2, #41	@ 0x29
 8001d10:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d24:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d26:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d38:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d3c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d40:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d42:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d48:	4810      	ldr	r0, [pc, #64]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d4a:	f002 f99f 	bl	800408c <HAL_DMA_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001d54:	f7ff fc68 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d60:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <HAL_UART_MspInit+0x144>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2025      	movs	r0, #37	@ 0x25
 8001d6c:	f002 f8e1 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d70:	2025      	movs	r0, #37	@ 0x25
 8001d72:	f002 f8f8 	bl	8003f66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d76:	bf00      	nop
 8001d78:	37e8      	adds	r7, #232	@ 0xe8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40011000 	.word	0x40011000
 8001d84:	58024400 	.word	0x58024400
 8001d88:	58020400 	.word	0x58020400
 8001d8c:	240008bc 	.word	0x240008bc
 8001d90:	40020410 	.word	0x40020410

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <NMI_Handler+0x4>

08001d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <MemManage_Handler+0x4>

08001dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <BusFault_Handler+0x4>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <UsageFault_Handler+0x4>

08001dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dea:	f000 fcc5 	bl	8002778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <DMA1_Stream0_IRQHandler+0x10>)
 8001dfa:	f003 fc71 	bl	80056e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	240007b0 	.word	0x240007b0

08001e08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <DMA1_Stream1_IRQHandler+0x10>)
 8001e0e:	f003 fc67 	bl	80056e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	24000580 	.word	0x24000580

08001e1c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <DMA1_Stream2_IRQHandler+0x10>)
 8001e22:	f003 fc5d 	bl	80056e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	24000508 	.word	0x24000508

08001e30 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <DMA1_Stream3_IRQHandler+0x10>)
 8001e36:	f003 fc53 	bl	80056e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	240003e8 	.word	0x240003e8

08001e44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <I2C1_EV_IRQHandler+0x10>)
 8001e4a:	f005 fc07 	bl	800765c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	24000460 	.word	0x24000460

08001e58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <I2C1_ER_IRQHandler+0x10>)
 8001e5e:	f005 fc17 	bl	8007690 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	24000460 	.word	0x24000460

08001e6c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <I2C2_EV_IRQHandler+0x10>)
 8001e72:	f005 fbf3 	bl	800765c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	240004b4 	.word	0x240004b4

08001e80 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <I2C2_ER_IRQHandler+0x10>)
 8001e86:	f005 fc03 	bl	8007690 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	240004b4 	.word	0x240004b4

08001e94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <USART1_IRQHandler+0x10>)
 8001e9a:	f010 f8a5 	bl	8011fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	24000828 	.word	0x24000828

08001ea8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <DMA2_Stream0_IRQHandler+0x10>)
 8001eae:	f003 fc17 	bl	80056e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	240008bc 	.word	0x240008bc

08001ebc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001ec0:	4802      	ldr	r0, [pc, #8]	@ (8001ecc <SPI4_IRQHandler+0x10>)
 8001ec2:	f00f fc0f 	bl	80116e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	24000728 	.word	0x24000728

08001ed0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ed4:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <OTG_FS_IRQHandler+0x10>)
 8001ed6:	f00a f924 	bl	800c122 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2402a80c 	.word	0x2402a80c

08001ee4 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <JPEG_IRQHandler+0x10>)
 8001eea:	f007 ffb3 	bl	8009e54 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	240005f8 	.word	0x240005f8

08001ef8 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001efc:	4803      	ldr	r0, [pc, #12]	@ (8001f0c <MDMA_IRQHandler+0x14>)
 8001efe:	f009 fd73 	bl	800b9e8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8001f02:	4803      	ldr	r0, [pc, #12]	@ (8001f10 <MDMA_IRQHandler+0x18>)
 8001f04:	f009 fd70 	bl	800b9e8 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	24000650 	.word	0x24000650
 8001f10:	240006bc 	.word	0x240006bc

08001f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <_sbrk+0x5c>)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <_sbrk+0x60>)
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <_sbrk+0x64>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	@ (8001f7c <_sbrk+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f44:	f016 fa10 	bl	8018368 <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e009      	b.n	8001f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	@ (8001f78 <_sbrk+0x64>)
 8001f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	24080000 	.word	0x24080000
 8001f74:	00000400 	.word	0x00000400
 8001f78:	24029320 	.word	0x24029320
 8001f7c:	2402b058 	.word	0x2402b058

08001f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f84:	4b43      	ldr	r3, [pc, #268]	@ (8002094 <SystemInit+0x114>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8a:	4a42      	ldr	r2, [pc, #264]	@ (8002094 <SystemInit+0x114>)
 8001f8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f94:	4b40      	ldr	r3, [pc, #256]	@ (8002098 <SystemInit+0x118>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	2b06      	cmp	r3, #6
 8001f9e:	d807      	bhi.n	8001fb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8002098 <SystemInit+0x118>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 030f 	bic.w	r3, r3, #15
 8001fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8002098 <SystemInit+0x118>)
 8001faa:	f043 0307 	orr.w	r3, r3, #7
 8001fae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800209c <SystemInit+0x11c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a39      	ldr	r2, [pc, #228]	@ (800209c <SystemInit+0x11c>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fbc:	4b37      	ldr	r3, [pc, #220]	@ (800209c <SystemInit+0x11c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001fc2:	4b36      	ldr	r3, [pc, #216]	@ (800209c <SystemInit+0x11c>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4935      	ldr	r1, [pc, #212]	@ (800209c <SystemInit+0x11c>)
 8001fc8:	4b35      	ldr	r3, [pc, #212]	@ (80020a0 <SystemInit+0x120>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fce:	4b32      	ldr	r3, [pc, #200]	@ (8002098 <SystemInit+0x118>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fda:	4b2f      	ldr	r3, [pc, #188]	@ (8002098 <SystemInit+0x118>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 030f 	bic.w	r3, r3, #15
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <SystemInit+0x118>)
 8001fe4:	f043 0307 	orr.w	r3, r3, #7
 8001fe8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001fea:	4b2c      	ldr	r3, [pc, #176]	@ (800209c <SystemInit+0x11c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <SystemInit+0x11c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ff6:	4b29      	ldr	r3, [pc, #164]	@ (800209c <SystemInit+0x11c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <SystemInit+0x11c>)
 8001ffe:	4a29      	ldr	r2, [pc, #164]	@ (80020a4 <SystemInit+0x124>)
 8002000:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002002:	4b26      	ldr	r3, [pc, #152]	@ (800209c <SystemInit+0x11c>)
 8002004:	4a28      	ldr	r2, [pc, #160]	@ (80020a8 <SystemInit+0x128>)
 8002006:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002008:	4b24      	ldr	r3, [pc, #144]	@ (800209c <SystemInit+0x11c>)
 800200a:	4a28      	ldr	r2, [pc, #160]	@ (80020ac <SystemInit+0x12c>)
 800200c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800200e:	4b23      	ldr	r3, [pc, #140]	@ (800209c <SystemInit+0x11c>)
 8002010:	2200      	movs	r2, #0
 8002012:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <SystemInit+0x11c>)
 8002016:	4a25      	ldr	r2, [pc, #148]	@ (80020ac <SystemInit+0x12c>)
 8002018:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800201a:	4b20      	ldr	r3, [pc, #128]	@ (800209c <SystemInit+0x11c>)
 800201c:	2200      	movs	r2, #0
 800201e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002020:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <SystemInit+0x11c>)
 8002022:	4a22      	ldr	r2, [pc, #136]	@ (80020ac <SystemInit+0x12c>)
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002026:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <SystemInit+0x11c>)
 8002028:	2200      	movs	r2, #0
 800202a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800202c:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <SystemInit+0x11c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1a      	ldr	r2, [pc, #104]	@ (800209c <SystemInit+0x11c>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002036:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002038:	4b18      	ldr	r3, [pc, #96]	@ (800209c <SystemInit+0x11c>)
 800203a:	2200      	movs	r2, #0
 800203c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <SystemInit+0x130>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <SystemInit+0x134>)
 8002044:	4013      	ands	r3, r2
 8002046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800204a:	d202      	bcs.n	8002052 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800204c:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <SystemInit+0x138>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <SystemInit+0x11c>)
 8002054:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d113      	bne.n	8002088 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002060:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <SystemInit+0x11c>)
 8002062:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002066:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <SystemInit+0x11c>)
 8002068:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800206c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002070:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <SystemInit+0x13c>)
 8002072:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002076:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <SystemInit+0x11c>)
 800207a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800207e:	4a07      	ldr	r2, [pc, #28]	@ (800209c <SystemInit+0x11c>)
 8002080:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002084:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00
 8002098:	52002000 	.word	0x52002000
 800209c:	58024400 	.word	0x58024400
 80020a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80020a4:	02020200 	.word	0x02020200
 80020a8:	01ff0000 	.word	0x01ff0000
 80020ac:	01010280 	.word	0x01010280
 80020b0:	5c001000 	.word	0x5c001000
 80020b4:	ffff0000 	.word	0xffff0000
 80020b8:	51008108 	.word	0x51008108
 80020bc:	52004000 	.word	0x52004000

080020c0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80020c4:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <ExitRun0Mode+0x2c>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a08      	ldr	r2, [pc, #32]	@ (80020ec <ExitRun0Mode+0x2c>)
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80020d0:	bf00      	nop
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <ExitRun0Mode+0x2c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f9      	beq.n	80020d2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	58024800 	.word	0x58024800

080020f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020f0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800212c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80020f4:	f7ff ffe4 	bl	80020c0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020f8:	f7ff ff42 	bl	8001f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480c      	ldr	r0, [pc, #48]	@ (8002130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020fe:	490d      	ldr	r1, [pc, #52]	@ (8002134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002100:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002114:	4c0a      	ldr	r4, [pc, #40]	@ (8002140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002122:	f016 f927 	bl	8018374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002126:	f7fe fac9 	bl	80006bc <main>
  bx  lr
 800212a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800212c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002130:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002134:	24000368 	.word	0x24000368
  ldr r2, =_sidata
 8002138:	0801917c 	.word	0x0801917c
  ldr r2, =_sbss
 800213c:	24000368 	.word	0x24000368
  ldr r4, =_ebss
 8002140:	2402b058 	.word	0x2402b058

08002144 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC3_IRQHandler>

08002146 <SSD1306_SendCommand>:
    0x06, 0x00, 0b00010000, 0b00001000, 0b00010000, 0b00100000, 0b00010000, 0x00  // ------ 126 - ~
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af02      	add	r7, sp, #8
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 8002152:	2380      	movs	r3, #128	@ 0x80
 8002154:	733b      	strb	r3, [r7, #12]
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	791b      	ldrb	r3, [r3, #4]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	b299      	uxth	r1, r3
 8002166:	f107 020c 	add.w	r2, r7, #12
 800216a:	2364      	movs	r3, #100	@ 0x64
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2302      	movs	r3, #2
 8002170:	f005 f848 	bl	8007204 <HAL_I2C_Master_Transmit>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <SSD1306_SendCommand+0x38>
		return ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 80021a0:	2312      	movs	r3, #18
 80021a2:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 80021a8:	e02c      	b.n	8002204 <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 80021aa:	897b      	ldrh	r3, [r7, #10]
 80021ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002218 <SSD1306_Init+0x90>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 80021b2:	897b      	ldrh	r3, [r7, #10]
 80021b4:	3301      	adds	r3, #1
 80021b6:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 80021b8:	897b      	ldrh	r3, [r7, #10]
 80021ba:	4a17      	ldr	r2, [pc, #92]	@ (8002218 <SSD1306_Init+0x90>)
 80021bc:	5cd3      	ldrb	r3, [r2, r3]
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ffc0 	bl	8002146 <SSD1306_SendCommand>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <SSD1306_Init+0x4a>
 80021cc:	897b      	ldrh	r3, [r7, #10]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	e01e      	b.n	8002210 <SSD1306_Init+0x88>
	        cmd_idx++;
 80021d2:	897b      	ldrh	r3, [r7, #10]
 80021d4:	3301      	adds	r3, #1
 80021d6:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 80021d8:	e00f      	b.n	80021fa <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 80021da:	897b      	ldrh	r3, [r7, #10]
 80021dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002218 <SSD1306_Init+0x90>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffaf 	bl	8002146 <SSD1306_SendCommand>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <SSD1306_Init+0x6c>
 80021ee:	897b      	ldrh	r3, [r7, #10]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	e00d      	b.n	8002210 <SSD1306_Init+0x88>
	            cmd_idx++;
 80021f4:	897b      	ldrh	r3, [r7, #10]
 80021f6:	3301      	adds	r3, #1
 80021f8:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 80021fa:	89bb      	ldrh	r3, [r7, #12]
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	81ba      	strh	r2, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ea      	bne.n	80021da <SSD1306_Init+0x52>
	while (n_commands--) {
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	1e5a      	subs	r2, r3, #1
 8002208:	81fa      	strh	r2, [r7, #14]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1cd      	bne.n	80021aa <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	08018bf0 	.word	0x08018bf0

0800221c <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f016 f87f 	bl	8018338 <memset>
	return 0;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2240      	movs	r2, #64	@ 0x40
 8002252:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	791b      	ldrb	r3, [r3, #4]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	b299      	uxth	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	f240 4301 	movw	r3, #1025	@ 0x401
 8002268:	f005 f8e4 	bl	8007434 <HAL_I2C_Master_Transmit_DMA>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
	// Account for newline
	if (ch == '\n') {
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	2b0a      	cmp	r3, #10
 8002288:	d109      	bne.n	800229e <SSD1306_DrawChar+0x26>
		hssd->str_cursor = (hssd->str_cursor/128)*128;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8a1b      	ldrh	r3, [r3, #16]
 800228e:	09db      	lsrs	r3, r3, #7
 8002290:	b29b      	uxth	r3, r3
 8002292:	01db      	lsls	r3, r3, #7
 8002294:	b29a      	uxth	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	821a      	strh	r2, [r3, #16]
		return SUCCESS;
 800229a:	2300      	movs	r3, #0
 800229c:	e036      	b.n	800230c <SSD1306_DrawChar+0x94>
	}
	if (ch < 32 || ch > 126) return ERROR;	// char is unable to be rendered
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	2b1f      	cmp	r3, #31
 80022a2:	d902      	bls.n	80022aa <SSD1306_DrawChar+0x32>
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80022a8:	d901      	bls.n	80022ae <SSD1306_DrawChar+0x36>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e02e      	b.n	800230c <SSD1306_DrawChar+0x94>
	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	3b20      	subs	r3, #32
 80022b2:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b60      	cmp	r3, #96	@ 0x60
 80022b8:	d906      	bls.n	80022c8 <SSD1306_DrawChar+0x50>
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	2b7a      	cmp	r3, #122	@ 0x7a
 80022be:	d803      	bhi.n	80022c8 <SSD1306_DrawChar+0x50>
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	3b20      	subs	r3, #32
 80022c4:	73fb      	strb	r3, [r7, #15]
 80022c6:	e005      	b.n	80022d4 <SSD1306_DrawChar+0x5c>
	else if (ch >= 123) newC -= 26;			// remap the brace set to align with the font table
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	2b7a      	cmp	r3, #122	@ 0x7a
 80022cc:	d902      	bls.n	80022d4 <SSD1306_DrawChar+0x5c>
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	3b1a      	subs	r3, #26
 80022d2:	73fb      	strb	r3, [r7, #15]

	uint8_t len = ALPHNUM[newC*8];
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002314 <SSD1306_DrawChar+0x9c>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	73bb      	strb	r3, [r7, #14]
	memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	8a12      	ldrh	r2, [r2, #16]
 80022e6:	1898      	adds	r0, r3, r2
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <SSD1306_DrawChar+0x9c>)
 80022f0:	4413      	add	r3, r2
 80022f2:	7bba      	ldrb	r2, [r7, #14]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f016 f863 	bl	80183c0 <memcpy>
	hssd->str_cursor += len;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	8a1a      	ldrh	r2, [r3, #16]
 80022fe:	7bbb      	ldrb	r3, [r7, #14]
 8002300:	b29b      	uxth	r3, r3
 8002302:	4413      	add	r3, r2
 8002304:	b29a      	uxth	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	08018c24 	.word	0x08018c24

08002318 <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < length; i++) {
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
 800232a:	e013      	b.n	8002354 <SSD1306_DrawString+0x3c>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x06;
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff ff9e 	bl	8002278 <SSD1306_DrawChar>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <SSD1306_DrawString+0x36>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8a1b      	ldrh	r3, [r3, #16]
 8002346:	3306      	adds	r3, #6
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	3301      	adds	r3, #1
 8002352:	75fb      	strb	r3, [r7, #23]
 8002354:	7dfa      	ldrb	r2, [r7, #23]
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	429a      	cmp	r2, r3
 800235a:	d3e7      	bcc.n	800232c <SSD1306_DrawString+0x14>
	}

	return SUCCESS;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6898      	ldr	r0, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	899b      	ldrh	r3, [r3, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	4619      	mov	r1, r3
 800237e:	f004 fe8b 	bl	8007098 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	1cf9      	adds	r1, r7, #3
 8002388:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800238c:	2201      	movs	r2, #1
 800238e:	f00e fe79 	bl	8011084 <HAL_SPI_Transmit>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <ST7789_SendByte_Command+0x36>
		return ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6898      	ldr	r0, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	899b      	ldrh	r3, [r3, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	4619      	mov	r1, r3
 80023be:	f004 fe6b 	bl	8007098 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	1cf9      	adds	r1, r7, #3
 80023c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023cc:	2201      	movs	r2, #1
 80023ce:	f00e fe59 	bl	8011084 <HAL_SPI_Transmit>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <ST7789_SendByte_Data+0x36>
		return ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

	hst7789->updating_sector = 0;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	751a      	strb	r2, [r3, #20]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f107 0109 	add.w	r1, r7, #9
 8002402:	2201      	movs	r2, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f00f f82b 	bl	8011460 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 800240a:	200a      	movs	r0, #10
 800240c:	f000 f9d4 	bl	80027b8 <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 8002410:	2313      	movs	r3, #19
 8002412:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8002414:	2301      	movs	r3, #1
 8002416:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002418:	e02c      	b.n	8002474 <ST7789_Init+0x8c>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 800241a:	897b      	ldrh	r3, [r7, #10]
 800241c:	4a1a      	ldr	r2, [pc, #104]	@ (8002488 <ST7789_Init+0xa0>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 8002422:	897b      	ldrh	r3, [r7, #10]
 8002424:	3301      	adds	r3, #1
 8002426:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 8002428:	897b      	ldrh	r3, [r7, #10]
 800242a:	4a17      	ldr	r2, [pc, #92]	@ (8002488 <ST7789_Init+0xa0>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	4619      	mov	r1, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff98 	bl	8002366 <ST7789_SendByte_Command>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <ST7789_Init+0x5a>
 800243c:	897b      	ldrh	r3, [r7, #10]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e01e      	b.n	8002480 <ST7789_Init+0x98>
	    cmd_idx++;
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	3301      	adds	r3, #1
 8002446:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 8002448:	e00f      	b.n	800246a <ST7789_Init+0x82>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 800244a:	897b      	ldrh	r3, [r7, #10]
 800244c:	4a0e      	ldr	r2, [pc, #56]	@ (8002488 <ST7789_Init+0xa0>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	4619      	mov	r1, r3
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa7 	bl	80023a6 <ST7789_SendByte_Data>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <ST7789_Init+0x7c>
 800245e:	897b      	ldrh	r3, [r7, #10]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e00d      	b.n	8002480 <ST7789_Init+0x98>
				cmd_idx++;
 8002464:	897b      	ldrh	r3, [r7, #10]
 8002466:	3301      	adds	r3, #1
 8002468:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 800246a:	89bb      	ldrh	r3, [r7, #12]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	81ba      	strh	r2, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ea      	bne.n	800244a <ST7789_Init+0x62>
	while (n_commands--) {
 8002474:	89fb      	ldrh	r3, [r7, #14]
 8002476:	1e5a      	subs	r2, r3, #1
 8002478:	81fa      	strh	r2, [r7, #14]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1cd      	bne.n	800241a <ST7789_Init+0x32>
	    }
	}
	return SUCCESS;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	08018e4c 	.word	0x08018e4c

0800248c <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	817b      	strh	r3, [r7, #10]
 800249e:	460b      	mov	r3, r1
 80024a0:	813b      	strh	r3, [r7, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 80024a6:	212a      	movs	r1, #42	@ 0x2a
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff ff5c 	bl	8002366 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff ff74 	bl	80023a6 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 80024be:	897b      	ldrh	r3, [r7, #10]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	4619      	mov	r1, r3
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff ff6e 	bl	80023a6 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	121b      	asrs	r3, r3, #8
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff ff66 	bl	80023a6 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff ff5e 	bl	80023a6 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 80024ea:	212b      	movs	r1, #43	@ 0x2b
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7ff ff3a 	bl	8002366 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 80024f2:	893b      	ldrh	r3, [r7, #8]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4619      	mov	r1, r3
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff ff52 	bl	80023a6 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 8002502:	893b      	ldrh	r3, [r7, #8]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	4619      	mov	r1, r3
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff ff4c 	bl	80023a6 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 800250e:	8b3b      	ldrh	r3, [r7, #24]
 8002510:	3b01      	subs	r3, #1
 8002512:	121b      	asrs	r3, r3, #8
 8002514:	b2db      	uxtb	r3, r3
 8002516:	4619      	mov	r1, r3
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff ff44 	bl	80023a6 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 800251e:	8b3b      	ldrh	r3, [r7, #24]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	4619      	mov	r1, r3
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff ff3c 	bl	80023a6 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 800252e:	212c      	movs	r1, #44	@ 0x2c
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7ff ff18 	bl	8002366 <ST7789_SendByte_Command>
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789, uint8_t col) {
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
	// fill VRAM with white
	memset(hst7789->vram, col, LCD_WIDTH*LCD_HEIGHT*2);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	78f9      	ldrb	r1, [r7, #3]
 8002550:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8002554:	4618      	mov	r0, r3
 8002556:	f015 feef 	bl	8018338 <memset>
	return SUCCESS;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <ST7789_UpdateSector>:

uint8_t ST7789_UpdateSector(ST7789_HandleTypeDef *hst7789, uint8_t screen_section) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af02      	add	r7, sp, #8
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
	// Check for bounds/busy
	if (hst7789->spi_state == 1) return ERROR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	791b      	ldrb	r3, [r3, #4]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <ST7789_UpdateSector+0x18>
 8002578:	2301      	movs	r3, #1
 800257a:	e04e      	b.n	800261a <ST7789_UpdateSector+0xb6>
	if (screen_section > 2) return ERROR;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <ST7789_UpdateSector+0x22>
 8002582:	2301      	movs	r3, #1
 8002584:	e049      	b.n	800261a <ST7789_UpdateSector+0xb6>

	hst7789->updating_sector = screen_section;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	751a      	strb	r2, [r3, #20]

	// Flag as busy
	hst7789->spi_state = 1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	711a      	strb	r2, [r3, #4]

	// Set the window based on the vram offset
	ST7789_SetWindow(hst7789, 0, (screen_section*0xEA60)/(LCD_WIDTH*2), LCD_WIDTH, LCD_HEIGHT);
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	b29b      	uxth	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	0152      	lsls	r2, r2, #5
 800259a:	1ad2      	subs	r2, r2, r3
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	4413      	add	r3, r2
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	23f0      	movs	r3, #240	@ 0xf0
 80025aa:	2100      	movs	r1, #0
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff6d 	bl	800248c <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (~CMD)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6898      	ldr	r0, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	899b      	ldrh	r3, [r3, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	4619      	mov	r1, r3
 80025be:	f004 fd6b 	bl	8007098 <HAL_GPIO_WritePin>


	if (screen_section != 2) {
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d013      	beq.n	80025f0 <ST7789_UpdateSector+0x8c>
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0xEA60))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80025d6:	fb01 f202 	mul.w	r2, r1, r2
 80025da:	4413      	add	r3, r2
 80025dc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80025e0:	4619      	mov	r1, r3
 80025e2:	f00e ff3d 	bl	8011460 <HAL_SPI_Transmit_DMA>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <ST7789_UpdateSector+0xb4>
			return ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e014      	b.n	800261a <ST7789_UpdateSector+0xb6>
	} else {
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0x8340))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80025fe:	fb01 f202 	mul.w	r2, r1, r2
 8002602:	4413      	add	r3, r2
 8002604:	f248 3240 	movw	r2, #33600	@ 0x8340
 8002608:	4619      	mov	r1, r3
 800260a:	f00e ff29 	bl	8011460 <HAL_SPI_Transmit_DMA>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <ST7789_UpdateSector+0xb4>
			return ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <ST7789_UpdateSector+0xb6>
	}
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <ST7789_UpdateAutomatic>:

uint8_t ST7789_UpdateAutomatic(ST7789_HandleTypeDef *hst7789) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	// perform a screen update
	if (ST7789_UpdateSector(hst7789, hst7789->updating_sector)) return ERROR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7d1b      	ldrb	r3, [r3, #20]
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff96 	bl	8002564 <ST7789_UpdateSector>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <ST7789_UpdateAutomatic+0x1e>
 800263e:	2301      	movs	r3, #1
 8002640:	e013      	b.n	800266a <ST7789_UpdateAutomatic+0x46>

	// increment the sector to be updated
	hst7789->updating_sector++;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7d1b      	ldrb	r3, [r3, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	751a      	strb	r2, [r3, #20]
	hst7789->updating_sector %= 3;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7d1a      	ldrb	r2, [r3, #20]
 8002652:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <ST7789_UpdateAutomatic+0x50>)
 8002654:	fba3 1302 	umull	r1, r3, r3, r2
 8002658:	0859      	lsrs	r1, r3, #1
 800265a:	460b      	mov	r3, r1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	440b      	add	r3, r1
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	b2da      	uxtb	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	751a      	strb	r2, [r3, #20]

	return SUCCESS;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	aaaaaaab 	.word	0xaaaaaaab

08002678 <ST7789_DMATransmitCplt>:


void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	// Flag idle
	hst7789->spi_state = 0;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	711a      	strb	r2, [r3, #4]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269a:	2003      	movs	r0, #3
 800269c:	f001 fc3e 	bl	8003f1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026a0:	f00b fcf8 	bl	800e094 <HAL_RCC_GetSysClockFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <HAL_Init+0x68>)
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	4913      	ldr	r1, [pc, #76]	@ (8002700 <HAL_Init+0x6c>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
 80026bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026be:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <HAL_Init+0x68>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002700 <HAL_Init+0x6c>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002704 <HAL_Init+0x70>)
 80026d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002708 <HAL_Init+0x74>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026de:	200f      	movs	r0, #15
 80026e0:	f000 f814 	bl	800270c <HAL_InitTick>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e002      	b.n	80026f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026ee:	f7fe ffa1 	bl	8001634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	58024400 	.word	0x58024400
 8002700:	08018be0 	.word	0x08018be0
 8002704:	24000218 	.word	0x24000218
 8002708:	24000214 	.word	0x24000214

0800270c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002714:	4b15      	ldr	r3, [pc, #84]	@ (800276c <HAL_InitTick+0x60>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e021      	b.n	8002764 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002720:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <HAL_InitTick+0x64>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <HAL_InitTick+0x60>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800272e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	4618      	mov	r0, r3
 8002738:	f001 fc23 	bl	8003f82 <HAL_SYSTICK_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e00e      	b.n	8002764 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b0f      	cmp	r3, #15
 800274a:	d80a      	bhi.n	8002762 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800274c:	2200      	movs	r2, #0
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f001 fbed 	bl	8003f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002758:	4a06      	ldr	r2, [pc, #24]	@ (8002774 <HAL_InitTick+0x68>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	24000220 	.word	0x24000220
 8002770:	24000214 	.word	0x24000214
 8002774:	2400021c 	.word	0x2400021c

08002778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_IncTick+0x20>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_IncTick+0x24>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4413      	add	r3, r2
 8002788:	4a04      	ldr	r2, [pc, #16]	@ (800279c <HAL_IncTick+0x24>)
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	24000220 	.word	0x24000220
 800279c:	24029324 	.word	0x24029324

080027a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return uwTick;
 80027a4:	4b03      	ldr	r3, [pc, #12]	@ (80027b4 <HAL_GetTick+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	24029324 	.word	0x24029324

080027b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff ffee 	bl	80027a0 <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d005      	beq.n	80027de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d2:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <HAL_Delay+0x44>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027de:	bf00      	nop
 80027e0:	f7ff ffde 	bl	80027a0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d8f7      	bhi.n	80027e0 <HAL_Delay+0x28>
  {
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	24000220 	.word	0x24000220

08002800 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_GetREVID+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0c1b      	lsrs	r3, r3, #16
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	5c001000 	.word	0x5c001000

08002818 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	609a      	str	r2, [r3, #8]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <LL_ADC_SetChannelPreselection+0x24>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	0e9b      	lsrs	r3, r3, #26
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2201      	movs	r2, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	e015      	b.n	80028d0 <LL_ADC_SetChannelPreselection+0x50>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e003      	b.n	80028c6 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2201      	movs	r2, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	69d2      	ldr	r2, [r2, #28]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3360      	adds	r3, #96	@ 0x60
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	430b      	orrs	r3, r1
 8002914:	431a      	orrs	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	431a      	orrs	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	611a      	str	r2, [r3, #16]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3360      	adds	r3, #96	@ 0x60
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	601a      	str	r2, [r3, #0]
  }
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3330      	adds	r3, #48	@ 0x30
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	4413      	add	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	211f      	movs	r1, #31
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	401a      	ands	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	0e9b      	lsrs	r3, r3, #26
 80029ec:	f003 011f 	and.w	r1, r3, #31
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	431a      	orrs	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a00:	bf00      	nop
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60da      	str	r2, [r3, #12]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b087      	sub	sp, #28
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3314      	adds	r3, #20
 8002a42:	461a      	mov	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	0e5b      	lsrs	r3, r3, #25
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	4413      	add	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	0d1b      	lsrs	r3, r3, #20
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2107      	movs	r1, #7
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	401a      	ands	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	0d1b      	lsrs	r3, r3, #20
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	431a      	orrs	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0318 	and.w	r3, r3, #24
 8002aaa:	4908      	ldr	r1, [pc, #32]	@ (8002acc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002aac:	40d9      	lsrs	r1, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	400b      	ands	r3, r1
 8002ab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	000fffff 	.word	0x000fffff

08002ad0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 031f 	and.w	r3, r3, #31
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6093      	str	r3, [r2, #8]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	5fffffc0 	.word	0x5fffffc0

08002b10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b24:	d101      	bne.n	8002b2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <LL_ADC_EnableInternalRegulator+0x24>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	6fffffc0 	.word	0x6fffffc0

08002b60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b74:	d101      	bne.n	8002b7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <LL_ADC_Enable+0x24>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	7fffffc0 	.word	0x7fffffc0

08002bb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <LL_ADC_IsEnabled+0x18>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <LL_ADC_IsEnabled+0x1a>
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <LL_ADC_REG_StartConversion+0x24>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	f043 0204 	orr.w	r2, r3, #4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	7fffffc0 	.word	0x7fffffc0

08002c00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d101      	bne.n	8002c18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d101      	bne.n	8002c3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b089      	sub	sp, #36	@ 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e18f      	b.n	8002f86 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7fe fcf7 	bl	8001668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff3f 	bl	8002b10 <LL_ADC_IsDeepPowerDownEnabled>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff25 	bl	8002aec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff5a 	bl	8002b60 <LL_ADC_IsInternalRegulatorEnabled>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d114      	bne.n	8002cdc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff3e 	bl	8002b38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cbc:	4b87      	ldr	r3, [pc, #540]	@ (8002edc <HAL_ADC_Init+0x290>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	4a87      	ldr	r2, [pc, #540]	@ (8002ee0 <HAL_ADC_Init+0x294>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	3301      	adds	r3, #1
 8002ccc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cce:	e002      	b.n	8002cd6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff3d 	bl	8002b60 <LL_ADC_IsInternalRegulatorEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf0:	f043 0210 	orr.w	r2, r3, #16
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff77 	bl	8002c00 <LL_ADC_REG_IsConversionOngoing>
 8002d12:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 8129 	bne.w	8002f74 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f040 8125 	bne.w	8002f74 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d32:	f043 0202 	orr.w	r2, r3, #2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff36 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d136      	bne.n	8002db8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a65      	ldr	r2, [pc, #404]	@ (8002ee4 <HAL_ADC_Init+0x298>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d004      	beq.n	8002d5e <HAL_ADC_Init+0x112>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a63      	ldr	r2, [pc, #396]	@ (8002ee8 <HAL_ADC_Init+0x29c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10e      	bne.n	8002d7c <HAL_ADC_Init+0x130>
 8002d5e:	4861      	ldr	r0, [pc, #388]	@ (8002ee4 <HAL_ADC_Init+0x298>)
 8002d60:	f7ff ff26 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d64:	4604      	mov	r4, r0
 8002d66:	4860      	ldr	r0, [pc, #384]	@ (8002ee8 <HAL_ADC_Init+0x29c>)
 8002d68:	f7ff ff22 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4323      	orrs	r3, r4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e008      	b.n	8002d8e <HAL_ADC_Init+0x142>
 8002d7c:	485b      	ldr	r0, [pc, #364]	@ (8002eec <HAL_ADC_Init+0x2a0>)
 8002d7e:	f7ff ff17 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d012      	beq.n	8002db8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a53      	ldr	r2, [pc, #332]	@ (8002ee4 <HAL_ADC_Init+0x298>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_ADC_Init+0x15a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a51      	ldr	r2, [pc, #324]	@ (8002ee8 <HAL_ADC_Init+0x29c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_Init+0x15e>
 8002da6:	4a52      	ldr	r2, [pc, #328]	@ (8002ef0 <HAL_ADC_Init+0x2a4>)
 8002da8:	e000      	b.n	8002dac <HAL_ADC_Init+0x160>
 8002daa:	4a52      	ldr	r2, [pc, #328]	@ (8002ef4 <HAL_ADC_Init+0x2a8>)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f7ff fd30 	bl	8002818 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002db8:	f7ff fd22 	bl	8002800 <HAL_GetREVID>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d914      	bls.n	8002df0 <HAL_ADC_Init+0x1a4>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d110      	bne.n	8002df0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7d5b      	ldrb	r3, [r3, #21]
 8002dd2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dd8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002dde:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7f1b      	ldrb	r3, [r3, #28]
 8002de4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002de6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002de8:	f043 030c 	orr.w	r3, r3, #12
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	e00d      	b.n	8002e0c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7d5b      	ldrb	r3, [r3, #21]
 8002df4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dfa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e00:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7f1b      	ldrb	r3, [r3, #28]
 8002e06:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7f1b      	ldrb	r3, [r3, #28]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d106      	bne.n	8002e22 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	045b      	lsls	r3, r3, #17
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef8 <HAL_ADC_Init+0x2ac>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	69b9      	ldr	r1, [r7, #24]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fed2 	bl	8002c00 <LL_ADC_REG_IsConversionOngoing>
 8002e5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fedf 	bl	8002c26 <LL_ADC_INJ_IsConversionOngoing>
 8002e68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d15f      	bne.n	8002f30 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d15c      	bne.n	8002f30 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7d1b      	ldrb	r3, [r3, #20]
 8002e7a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002efc <HAL_ADC_Init+0x2b0>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	69b9      	ldr	r1, [r7, #24]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d130      	bne.n	8002f04 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	4b14      	ldr	r3, [pc, #80]	@ (8002f00 <HAL_ADC_Init+0x2b4>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	0411      	lsls	r1, r2, #16
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	611a      	str	r2, [r3, #16]
 8002ed8:	e01c      	b.n	8002f14 <HAL_ADC_Init+0x2c8>
 8002eda:	bf00      	nop
 8002edc:	24000214 	.word	0x24000214
 8002ee0:	053e2d63 	.word	0x053e2d63
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	40022100 	.word	0x40022100
 8002eec:	58026000 	.word	0x58026000
 8002ef0:	40022300 	.word	0x40022300
 8002ef4:	58026300 	.word	0x58026300
 8002ef8:	fff0c003 	.word	0xfff0c003
 8002efc:	ffffbffc 	.word	0xffffbffc
 8002f00:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fd16 	bl	800395c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f023 010f 	bic.w	r1, r3, #15
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f50:	e007      	b.n	8002f62 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 020f 	bic.w	r2, r2, #15
 8002f60:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f66:	f023 0303 	bic.w	r3, r3, #3
 8002f6a:	f043 0201 	orr.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f72:	e007      	b.n	8002f84 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	f043 0210 	orr.w	r2, r3, #16
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}
 8002f8e:	bf00      	nop

08002f90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a55      	ldr	r2, [pc, #340]	@ (80030f8 <HAL_ADC_Start_DMA+0x168>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_ADC_Start_DMA+0x20>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a54      	ldr	r2, [pc, #336]	@ (80030fc <HAL_ADC_Start_DMA+0x16c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_Start_DMA+0x24>
 8002fb0:	4b53      	ldr	r3, [pc, #332]	@ (8003100 <HAL_ADC_Start_DMA+0x170>)
 8002fb2:	e000      	b.n	8002fb6 <HAL_ADC_Start_DMA+0x26>
 8002fb4:	4b53      	ldr	r3, [pc, #332]	@ (8003104 <HAL_ADC_Start_DMA+0x174>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fd8a 	bl	8002ad0 <LL_ADC_GetMultimode>
 8002fbc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fe1c 	bl	8002c00 <LL_ADC_REG_IsConversionOngoing>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 808c 	bne.w	80030e8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_Start_DMA+0x4e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e087      	b.n	80030ee <HAL_ADC_Start_DMA+0x15e>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d002      	beq.n	8002ff8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b09      	cmp	r3, #9
 8002ff6:	d170      	bne.n	80030da <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fb91 	bl	8003720 <ADC_Enable>
 8002ffe:	4603      	mov	r3, r0
 8003000:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d163      	bne.n	80030d0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800300c:	4b3e      	ldr	r3, [pc, #248]	@ (8003108 <HAL_ADC_Start_DMA+0x178>)
 800300e:	4013      	ands	r3, r2
 8003010:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a37      	ldr	r2, [pc, #220]	@ (80030fc <HAL_ADC_Start_DMA+0x16c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d002      	beq.n	8003028 <HAL_ADC_Start_DMA+0x98>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	e000      	b.n	800302a <HAL_ADC_Start_DMA+0x9a>
 8003028:	4b33      	ldr	r3, [pc, #204]	@ (80030f8 <HAL_ADC_Start_DMA+0x168>)
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	4293      	cmp	r3, r2
 8003030:	d002      	beq.n	8003038 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	f023 0206 	bic.w	r2, r3, #6
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	659a      	str	r2, [r3, #88]	@ 0x58
 800305c:	e002      	b.n	8003064 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003068:	4a28      	ldr	r2, [pc, #160]	@ (800310c <HAL_ADC_Start_DMA+0x17c>)
 800306a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003070:	4a27      	ldr	r2, [pc, #156]	@ (8003110 <HAL_ADC_Start_DMA+0x180>)
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003078:	4a26      	ldr	r2, [pc, #152]	@ (8003114 <HAL_ADC_Start_DMA+0x184>)
 800307a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	221c      	movs	r2, #28
 8003082:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0210 	orr.w	r2, r2, #16
 800309a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	4619      	mov	r1, r3
 80030a6:	4610      	mov	r0, r2
 80030a8:	f7ff fcb0 	bl	8002a0c <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3340      	adds	r3, #64	@ 0x40
 80030b6:	4619      	mov	r1, r3
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f001 fb42 	bl	8004744 <HAL_DMA_Start_IT>
 80030c0:	4603      	mov	r3, r0
 80030c2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fd85 	bl	8002bd8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80030ce:	e00d      	b.n	80030ec <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80030d8:	e008      	b.n	80030ec <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80030e6:	e001      	b.n	80030ec <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
 80030ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40022000 	.word	0x40022000
 80030fc:	40022100 	.word	0x40022100
 8003100:	40022300 	.word	0x40022300
 8003104:	58026300 	.word	0x58026300
 8003108:	fffff0fe 	.word	0xfffff0fe
 800310c:	08003835 	.word	0x08003835
 8003110:	0800390d 	.word	0x0800390d
 8003114:	08003929 	.word	0x08003929

08003118 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b08d      	sub	sp, #52	@ 0x34
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a65      	ldr	r2, [pc, #404]	@ (80032f0 <HAL_ADC_ConfigChannel+0x1b0>)
 800315a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_ADC_ConfigChannel+0x2a>
 8003166:	2302      	movs	r3, #2
 8003168:	e2c7      	b.n	80036fa <HAL_ADC_ConfigChannel+0x5ba>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fd42 	bl	8002c00 <LL_ADC_REG_IsConversionOngoing>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 82ac 	bne.w	80036dc <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	db2c      	blt.n	80031e6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003194:	2b00      	cmp	r3, #0
 8003196:	d108      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x6a>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0e9b      	lsrs	r3, r3, #26
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2201      	movs	r2, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	e016      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x98>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	613b      	str	r3, [r7, #16]
  return result;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80031c2:	2320      	movs	r3, #32
 80031c4:	e003      	b.n	80031ce <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	2201      	movs	r2, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	69d1      	ldr	r1, [r2, #28]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	430b      	orrs	r3, r1
 80031e4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f7ff fbde 	bl	80029b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fcff 	bl	8002c00 <LL_ADC_REG_IsConversionOngoing>
 8003202:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fd0c 	bl	8002c26 <LL_ADC_INJ_IsConversionOngoing>
 800320e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 80b8 	bne.w	8003388 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 80b4 	bne.w	8003388 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	461a      	mov	r2, r3
 800322e:	f7ff fc00 	bl	8002a32 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003232:	4b30      	ldr	r3, [pc, #192]	@ (80032f4 <HAL_ADC_ConfigChannel+0x1b4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800323a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800323e:	d10b      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x118>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	e01d      	b.n	8003294 <HAL_ADC_ConfigChannel+0x154>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10b      	bne.n	800327e <HAL_ADC_ConfigChannel+0x13e>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	e00a      	b.n	8003294 <HAL_ADC_ConfigChannel+0x154>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b04      	cmp	r3, #4
 800329c:	d02c      	beq.n	80032f8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6919      	ldr	r1, [r3, #16]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f7ff fb1b 	bl	80028e6 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6919      	ldr	r1, [r3, #16]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	7e5b      	ldrb	r3, [r3, #25]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x186>
 80032c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80032c4:	e000      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x188>
 80032c6:	2300      	movs	r3, #0
 80032c8:	461a      	mov	r2, r3
 80032ca:	f7ff fb45 	bl	8002958 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6919      	ldr	r1, [r3, #16]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	7e1b      	ldrb	r3, [r3, #24]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d102      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x1a4>
 80032de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80032e2:	e000      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x1a6>
 80032e4:	2300      	movs	r3, #0
 80032e6:	461a      	mov	r2, r3
 80032e8:	f7ff fb1d 	bl	8002926 <LL_ADC_SetDataRightShift>
 80032ec:	e04c      	b.n	8003388 <HAL_ADC_ConfigChannel+0x248>
 80032ee:	bf00      	nop
 80032f0:	47ff0000 	.word	0x47ff0000
 80032f4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	069b      	lsls	r3, r3, #26
 8003308:	429a      	cmp	r2, r3
 800330a:	d107      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800331a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003322:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	069b      	lsls	r3, r3, #26
 800332c:	429a      	cmp	r2, r3
 800332e:	d107      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800333e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003346:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	069b      	lsls	r3, r3, #26
 8003350:	429a      	cmp	r2, r3
 8003352:	d107      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003362:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800336a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	069b      	lsls	r3, r3, #26
 8003374:	429a      	cmp	r2, r3
 8003376:	d107      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003386:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fc0f 	bl	8002bb0 <LL_ADC_IsEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 81aa 	bne.w	80036ee <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f7ff fb6e 	bl	8002a88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a87      	ldr	r2, [pc, #540]	@ (80035d0 <HAL_ADC_ConfigChannel+0x490>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	f040 809a 	bne.w	80034ec <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4984      	ldr	r1, [pc, #528]	@ (80035d4 <HAL_ADC_ConfigChannel+0x494>)
 80033c2:	428b      	cmp	r3, r1
 80033c4:	d147      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x316>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4983      	ldr	r1, [pc, #524]	@ (80035d8 <HAL_ADC_ConfigChannel+0x498>)
 80033cc:	428b      	cmp	r3, r1
 80033ce:	d040      	beq.n	8003452 <HAL_ADC_ConfigChannel+0x312>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4981      	ldr	r1, [pc, #516]	@ (80035dc <HAL_ADC_ConfigChannel+0x49c>)
 80033d6:	428b      	cmp	r3, r1
 80033d8:	d039      	beq.n	800344e <HAL_ADC_ConfigChannel+0x30e>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4980      	ldr	r1, [pc, #512]	@ (80035e0 <HAL_ADC_ConfigChannel+0x4a0>)
 80033e0:	428b      	cmp	r3, r1
 80033e2:	d032      	beq.n	800344a <HAL_ADC_ConfigChannel+0x30a>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	497e      	ldr	r1, [pc, #504]	@ (80035e4 <HAL_ADC_ConfigChannel+0x4a4>)
 80033ea:	428b      	cmp	r3, r1
 80033ec:	d02b      	beq.n	8003446 <HAL_ADC_ConfigChannel+0x306>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	497d      	ldr	r1, [pc, #500]	@ (80035e8 <HAL_ADC_ConfigChannel+0x4a8>)
 80033f4:	428b      	cmp	r3, r1
 80033f6:	d024      	beq.n	8003442 <HAL_ADC_ConfigChannel+0x302>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	497b      	ldr	r1, [pc, #492]	@ (80035ec <HAL_ADC_ConfigChannel+0x4ac>)
 80033fe:	428b      	cmp	r3, r1
 8003400:	d01d      	beq.n	800343e <HAL_ADC_ConfigChannel+0x2fe>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	497a      	ldr	r1, [pc, #488]	@ (80035f0 <HAL_ADC_ConfigChannel+0x4b0>)
 8003408:	428b      	cmp	r3, r1
 800340a:	d016      	beq.n	800343a <HAL_ADC_ConfigChannel+0x2fa>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4978      	ldr	r1, [pc, #480]	@ (80035f4 <HAL_ADC_ConfigChannel+0x4b4>)
 8003412:	428b      	cmp	r3, r1
 8003414:	d00f      	beq.n	8003436 <HAL_ADC_ConfigChannel+0x2f6>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4977      	ldr	r1, [pc, #476]	@ (80035f8 <HAL_ADC_ConfigChannel+0x4b8>)
 800341c:	428b      	cmp	r3, r1
 800341e:	d008      	beq.n	8003432 <HAL_ADC_ConfigChannel+0x2f2>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4975      	ldr	r1, [pc, #468]	@ (80035fc <HAL_ADC_ConfigChannel+0x4bc>)
 8003426:	428b      	cmp	r3, r1
 8003428:	d101      	bne.n	800342e <HAL_ADC_ConfigChannel+0x2ee>
 800342a:	4b75      	ldr	r3, [pc, #468]	@ (8003600 <HAL_ADC_ConfigChannel+0x4c0>)
 800342c:	e05a      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 800342e:	2300      	movs	r3, #0
 8003430:	e058      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 8003432:	4b74      	ldr	r3, [pc, #464]	@ (8003604 <HAL_ADC_ConfigChannel+0x4c4>)
 8003434:	e056      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 8003436:	4b74      	ldr	r3, [pc, #464]	@ (8003608 <HAL_ADC_ConfigChannel+0x4c8>)
 8003438:	e054      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 800343a:	4b6e      	ldr	r3, [pc, #440]	@ (80035f4 <HAL_ADC_ConfigChannel+0x4b4>)
 800343c:	e052      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 800343e:	4b6c      	ldr	r3, [pc, #432]	@ (80035f0 <HAL_ADC_ConfigChannel+0x4b0>)
 8003440:	e050      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 8003442:	4b72      	ldr	r3, [pc, #456]	@ (800360c <HAL_ADC_ConfigChannel+0x4cc>)
 8003444:	e04e      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 8003446:	4b72      	ldr	r3, [pc, #456]	@ (8003610 <HAL_ADC_ConfigChannel+0x4d0>)
 8003448:	e04c      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 800344a:	4b72      	ldr	r3, [pc, #456]	@ (8003614 <HAL_ADC_ConfigChannel+0x4d4>)
 800344c:	e04a      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 800344e:	4b72      	ldr	r3, [pc, #456]	@ (8003618 <HAL_ADC_ConfigChannel+0x4d8>)
 8003450:	e048      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 8003452:	2301      	movs	r3, #1
 8003454:	e046      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4970      	ldr	r1, [pc, #448]	@ (800361c <HAL_ADC_ConfigChannel+0x4dc>)
 800345c:	428b      	cmp	r3, r1
 800345e:	d140      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x3a2>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	495c      	ldr	r1, [pc, #368]	@ (80035d8 <HAL_ADC_ConfigChannel+0x498>)
 8003466:	428b      	cmp	r3, r1
 8003468:	d039      	beq.n	80034de <HAL_ADC_ConfigChannel+0x39e>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	495b      	ldr	r1, [pc, #364]	@ (80035dc <HAL_ADC_ConfigChannel+0x49c>)
 8003470:	428b      	cmp	r3, r1
 8003472:	d032      	beq.n	80034da <HAL_ADC_ConfigChannel+0x39a>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4959      	ldr	r1, [pc, #356]	@ (80035e0 <HAL_ADC_ConfigChannel+0x4a0>)
 800347a:	428b      	cmp	r3, r1
 800347c:	d02b      	beq.n	80034d6 <HAL_ADC_ConfigChannel+0x396>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4958      	ldr	r1, [pc, #352]	@ (80035e4 <HAL_ADC_ConfigChannel+0x4a4>)
 8003484:	428b      	cmp	r3, r1
 8003486:	d024      	beq.n	80034d2 <HAL_ADC_ConfigChannel+0x392>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4956      	ldr	r1, [pc, #344]	@ (80035e8 <HAL_ADC_ConfigChannel+0x4a8>)
 800348e:	428b      	cmp	r3, r1
 8003490:	d01d      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x38e>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4955      	ldr	r1, [pc, #340]	@ (80035ec <HAL_ADC_ConfigChannel+0x4ac>)
 8003498:	428b      	cmp	r3, r1
 800349a:	d016      	beq.n	80034ca <HAL_ADC_ConfigChannel+0x38a>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4953      	ldr	r1, [pc, #332]	@ (80035f0 <HAL_ADC_ConfigChannel+0x4b0>)
 80034a2:	428b      	cmp	r3, r1
 80034a4:	d00f      	beq.n	80034c6 <HAL_ADC_ConfigChannel+0x386>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4952      	ldr	r1, [pc, #328]	@ (80035f4 <HAL_ADC_ConfigChannel+0x4b4>)
 80034ac:	428b      	cmp	r3, r1
 80034ae:	d008      	beq.n	80034c2 <HAL_ADC_ConfigChannel+0x382>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4951      	ldr	r1, [pc, #324]	@ (80035fc <HAL_ADC_ConfigChannel+0x4bc>)
 80034b6:	428b      	cmp	r3, r1
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x37e>
 80034ba:	4b51      	ldr	r3, [pc, #324]	@ (8003600 <HAL_ADC_ConfigChannel+0x4c0>)
 80034bc:	e012      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 80034be:	2300      	movs	r3, #0
 80034c0:	e010      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 80034c2:	4b51      	ldr	r3, [pc, #324]	@ (8003608 <HAL_ADC_ConfigChannel+0x4c8>)
 80034c4:	e00e      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 80034c6:	4b4b      	ldr	r3, [pc, #300]	@ (80035f4 <HAL_ADC_ConfigChannel+0x4b4>)
 80034c8:	e00c      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 80034ca:	4b49      	ldr	r3, [pc, #292]	@ (80035f0 <HAL_ADC_ConfigChannel+0x4b0>)
 80034cc:	e00a      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 80034ce:	4b4f      	ldr	r3, [pc, #316]	@ (800360c <HAL_ADC_ConfigChannel+0x4cc>)
 80034d0:	e008      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 80034d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003610 <HAL_ADC_ConfigChannel+0x4d0>)
 80034d4:	e006      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 80034d6:	4b4f      	ldr	r3, [pc, #316]	@ (8003614 <HAL_ADC_ConfigChannel+0x4d4>)
 80034d8:	e004      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 80034da:	4b4f      	ldr	r3, [pc, #316]	@ (8003618 <HAL_ADC_ConfigChannel+0x4d8>)
 80034dc:	e002      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3a4>
 80034e2:	2300      	movs	r3, #0
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f7ff f9ca 	bl	8002880 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f280 80fc 	bge.w	80036ee <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a36      	ldr	r2, [pc, #216]	@ (80035d4 <HAL_ADC_ConfigChannel+0x494>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_ADC_ConfigChannel+0x3ca>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a45      	ldr	r2, [pc, #276]	@ (800361c <HAL_ADC_ConfigChannel+0x4dc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0x3ce>
 800350a:	4b45      	ldr	r3, [pc, #276]	@ (8003620 <HAL_ADC_ConfigChannel+0x4e0>)
 800350c:	e000      	b.n	8003510 <HAL_ADC_ConfigChannel+0x3d0>
 800350e:	4b45      	ldr	r3, [pc, #276]	@ (8003624 <HAL_ADC_ConfigChannel+0x4e4>)
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff f9a7 	bl	8002864 <LL_ADC_GetCommonPathInternalCh>
 8003516:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2d      	ldr	r2, [pc, #180]	@ (80035d4 <HAL_ADC_ConfigChannel+0x494>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_ADC_ConfigChannel+0x3ec>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3d      	ldr	r2, [pc, #244]	@ (800361c <HAL_ADC_ConfigChannel+0x4dc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d10e      	bne.n	800354a <HAL_ADC_ConfigChannel+0x40a>
 800352c:	4829      	ldr	r0, [pc, #164]	@ (80035d4 <HAL_ADC_ConfigChannel+0x494>)
 800352e:	f7ff fb3f 	bl	8002bb0 <LL_ADC_IsEnabled>
 8003532:	4604      	mov	r4, r0
 8003534:	4839      	ldr	r0, [pc, #228]	@ (800361c <HAL_ADC_ConfigChannel+0x4dc>)
 8003536:	f7ff fb3b 	bl	8002bb0 <LL_ADC_IsEnabled>
 800353a:	4603      	mov	r3, r0
 800353c:	4323      	orrs	r3, r4
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	e008      	b.n	800355c <HAL_ADC_ConfigChannel+0x41c>
 800354a:	4837      	ldr	r0, [pc, #220]	@ (8003628 <HAL_ADC_ConfigChannel+0x4e8>)
 800354c:	f7ff fb30 	bl	8002bb0 <LL_ADC_IsEnabled>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf0c      	ite	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	2300      	movne	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80b3 	beq.w	80036c8 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a31      	ldr	r2, [pc, #196]	@ (800362c <HAL_ADC_ConfigChannel+0x4ec>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d165      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x4f8>
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d160      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2b      	ldr	r2, [pc, #172]	@ (8003628 <HAL_ADC_ConfigChannel+0x4e8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	f040 80b6 	bne.w	80036ee <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a13      	ldr	r2, [pc, #76]	@ (80035d4 <HAL_ADC_ConfigChannel+0x494>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_ADC_ConfigChannel+0x456>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a22      	ldr	r2, [pc, #136]	@ (800361c <HAL_ADC_ConfigChannel+0x4dc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_ADC_ConfigChannel+0x45a>
 8003596:	4a22      	ldr	r2, [pc, #136]	@ (8003620 <HAL_ADC_ConfigChannel+0x4e0>)
 8003598:	e000      	b.n	800359c <HAL_ADC_ConfigChannel+0x45c>
 800359a:	4a22      	ldr	r2, [pc, #136]	@ (8003624 <HAL_ADC_ConfigChannel+0x4e4>)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f7ff f94a 	bl	800283e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035aa:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <HAL_ADC_ConfigChannel+0x4f0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	4a20      	ldr	r2, [pc, #128]	@ (8003634 <HAL_ADC_ConfigChannel+0x4f4>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	3301      	adds	r3, #1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80035be:	e002      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f9      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035cc:	e08f      	b.n	80036ee <HAL_ADC_ConfigChannel+0x5ae>
 80035ce:	bf00      	nop
 80035d0:	47ff0000 	.word	0x47ff0000
 80035d4:	40022000 	.word	0x40022000
 80035d8:	04300002 	.word	0x04300002
 80035dc:	08600004 	.word	0x08600004
 80035e0:	0c900008 	.word	0x0c900008
 80035e4:	10c00010 	.word	0x10c00010
 80035e8:	14f00020 	.word	0x14f00020
 80035ec:	2a000400 	.word	0x2a000400
 80035f0:	2e300800 	.word	0x2e300800
 80035f4:	32601000 	.word	0x32601000
 80035f8:	43210000 	.word	0x43210000
 80035fc:	4b840000 	.word	0x4b840000
 8003600:	4fb80000 	.word	0x4fb80000
 8003604:	47520000 	.word	0x47520000
 8003608:	36902000 	.word	0x36902000
 800360c:	25b00200 	.word	0x25b00200
 8003610:	21800100 	.word	0x21800100
 8003614:	1d500080 	.word	0x1d500080
 8003618:	19200040 	.word	0x19200040
 800361c:	40022100 	.word	0x40022100
 8003620:	40022300 	.word	0x40022300
 8003624:	58026300 	.word	0x58026300
 8003628:	58026000 	.word	0x58026000
 800362c:	cb840000 	.word	0xcb840000
 8003630:	24000214 	.word	0x24000214
 8003634:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a31      	ldr	r2, [pc, #196]	@ (8003704 <HAL_ADC_ConfigChannel+0x5c4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d11e      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x540>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d119      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a2d      	ldr	r2, [pc, #180]	@ (8003708 <HAL_ADC_ConfigChannel+0x5c8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d14b      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2c      	ldr	r2, [pc, #176]	@ (800370c <HAL_ADC_ConfigChannel+0x5cc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_ADC_ConfigChannel+0x52a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2a      	ldr	r2, [pc, #168]	@ (8003710 <HAL_ADC_ConfigChannel+0x5d0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_ADC_ConfigChannel+0x52e>
 800366a:	4a2a      	ldr	r2, [pc, #168]	@ (8003714 <HAL_ADC_ConfigChannel+0x5d4>)
 800366c:	e000      	b.n	8003670 <HAL_ADC_ConfigChannel+0x530>
 800366e:	4a2a      	ldr	r2, [pc, #168]	@ (8003718 <HAL_ADC_ConfigChannel+0x5d8>)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f7ff f8e0 	bl	800283e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800367e:	e036      	b.n	80036ee <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a25      	ldr	r2, [pc, #148]	@ (800371c <HAL_ADC_ConfigChannel+0x5dc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d131      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x5ae>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d12c      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1b      	ldr	r2, [pc, #108]	@ (8003708 <HAL_ADC_ConfigChannel+0x5c8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d127      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1a      	ldr	r2, [pc, #104]	@ (800370c <HAL_ADC_ConfigChannel+0x5cc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_ADC_ConfigChannel+0x572>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a18      	ldr	r2, [pc, #96]	@ (8003710 <HAL_ADC_ConfigChannel+0x5d0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x576>
 80036b2:	4a18      	ldr	r2, [pc, #96]	@ (8003714 <HAL_ADC_ConfigChannel+0x5d4>)
 80036b4:	e000      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x578>
 80036b6:	4a18      	ldr	r2, [pc, #96]	@ (8003718 <HAL_ADC_ConfigChannel+0x5d8>)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f7ff f8bc 	bl	800283e <LL_ADC_SetCommonPathInternalCh>
 80036c6:	e012      	b.n	80036ee <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80036da:	e008      	b.n	80036ee <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3734      	adds	r7, #52	@ 0x34
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd90      	pop	{r4, r7, pc}
 8003702:	bf00      	nop
 8003704:	c7520000 	.word	0xc7520000
 8003708:	58026000 	.word	0x58026000
 800370c:	40022000 	.word	0x40022000
 8003710:	40022100 	.word	0x40022100
 8003714:	40022300 	.word	0x40022300
 8003718:	58026300 	.word	0x58026300
 800371c:	cfb80000 	.word	0xcfb80000

08003720 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fa3f 	bl	8002bb0 <LL_ADC_IsEnabled>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d16e      	bne.n	8003816 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	4b38      	ldr	r3, [pc, #224]	@ (8003820 <ADC_Enable+0x100>)
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374a:	f043 0210 	orr.w	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003756:	f043 0201 	orr.w	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e05a      	b.n	8003818 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fa0e 	bl	8002b88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800376c:	f7ff f818 	bl	80027a0 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2b      	ldr	r2, [pc, #172]	@ (8003824 <ADC_Enable+0x104>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <ADC_Enable+0x66>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a29      	ldr	r2, [pc, #164]	@ (8003828 <ADC_Enable+0x108>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <ADC_Enable+0x6a>
 8003786:	4b29      	ldr	r3, [pc, #164]	@ (800382c <ADC_Enable+0x10c>)
 8003788:	e000      	b.n	800378c <ADC_Enable+0x6c>
 800378a:	4b29      	ldr	r3, [pc, #164]	@ (8003830 <ADC_Enable+0x110>)
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff f99f 	bl	8002ad0 <LL_ADC_GetMultimode>
 8003792:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a23      	ldr	r2, [pc, #140]	@ (8003828 <ADC_Enable+0x108>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d002      	beq.n	80037a4 <ADC_Enable+0x84>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	e000      	b.n	80037a6 <ADC_Enable+0x86>
 80037a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003824 <ADC_Enable+0x104>)
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02c      	beq.n	8003808 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d130      	bne.n	8003816 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037b4:	e028      	b.n	8003808 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff f9f8 	bl	8002bb0 <LL_ADC_IsEnabled>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff f9dc 	bl	8002b88 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037d0:	f7fe ffe6 	bl	80027a0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d914      	bls.n	8003808 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d00d      	beq.n	8003808 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f043 0210 	orr.w	r2, r3, #16
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e007      	b.n	8003818 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d1cf      	bne.n	80037b6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	8000003f 	.word	0x8000003f
 8003824:	40022000 	.word	0x40022000
 8003828:	40022100 	.word	0x40022100
 800382c:	40022300 	.word	0x40022300
 8003830:	58026300 	.word	0x58026300

08003834 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800384a:	2b00      	cmp	r3, #0
 800384c:	d14b      	bne.n	80038e6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d021      	beq.n	80038ac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff f88e 	bl	800298e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d032      	beq.n	80038de <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d12b      	bne.n	80038de <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003896:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11f      	bne.n	80038de <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a2:	f043 0201 	orr.w	r2, r3, #1
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80038aa:	e018      	b.n	80038de <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d111      	bne.n	80038de <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7fd fd7a 	bl	80013d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038e4:	e00e      	b.n	8003904 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff fc1a 	bl	800312c <HAL_ADC_ErrorCallback>
}
 80038f8:	e004      	b.n	8003904 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003918:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fbfc 	bl	8003118 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003946:	f043 0204 	orr.w	r2, r3, #4
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7ff fbec 	bl	800312c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a7a      	ldr	r2, [pc, #488]	@ (8003b54 <ADC_ConfigureBoostMode+0x1f8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <ADC_ConfigureBoostMode+0x1c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a79      	ldr	r2, [pc, #484]	@ (8003b58 <ADC_ConfigureBoostMode+0x1fc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d109      	bne.n	800398c <ADC_ConfigureBoostMode+0x30>
 8003978:	4b78      	ldr	r3, [pc, #480]	@ (8003b5c <ADC_ConfigureBoostMode+0x200>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf14      	ite	ne
 8003984:	2301      	movne	r3, #1
 8003986:	2300      	moveq	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	e008      	b.n	800399e <ADC_ConfigureBoostMode+0x42>
 800398c:	4b74      	ldr	r3, [pc, #464]	@ (8003b60 <ADC_ConfigureBoostMode+0x204>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01c      	beq.n	80039dc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039a2:	f00a fcf1 	bl	800e388 <HAL_RCC_GetHCLKFreq>
 80039a6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039b0:	d010      	beq.n	80039d4 <ADC_ConfigureBoostMode+0x78>
 80039b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039b6:	d873      	bhi.n	8003aa0 <ADC_ConfigureBoostMode+0x144>
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039bc:	d002      	beq.n	80039c4 <ADC_ConfigureBoostMode+0x68>
 80039be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039c2:	d16d      	bne.n	8003aa0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	60fb      	str	r3, [r7, #12]
        break;
 80039d2:	e068      	b.n	8003aa6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	60fb      	str	r3, [r7, #12]
        break;
 80039da:	e064      	b.n	8003aa6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039dc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80039e0:	f04f 0100 	mov.w	r1, #0
 80039e4:	f00b ff36 	bl	800f854 <HAL_RCCEx_GetPeriphCLKFreq>
 80039e8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80039f2:	d051      	beq.n	8003a98 <ADC_ConfigureBoostMode+0x13c>
 80039f4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80039f8:	d854      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x148>
 80039fa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80039fe:	d047      	beq.n	8003a90 <ADC_ConfigureBoostMode+0x134>
 8003a00:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003a04:	d84e      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x148>
 8003a06:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003a0a:	d03d      	beq.n	8003a88 <ADC_ConfigureBoostMode+0x12c>
 8003a0c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003a10:	d848      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x148>
 8003a12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a16:	d033      	beq.n	8003a80 <ADC_ConfigureBoostMode+0x124>
 8003a18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a1c:	d842      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x148>
 8003a1e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003a22:	d029      	beq.n	8003a78 <ADC_ConfigureBoostMode+0x11c>
 8003a24:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003a28:	d83c      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x148>
 8003a2a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003a2e:	d01a      	beq.n	8003a66 <ADC_ConfigureBoostMode+0x10a>
 8003a30:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003a34:	d836      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x148>
 8003a36:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003a3a:	d014      	beq.n	8003a66 <ADC_ConfigureBoostMode+0x10a>
 8003a3c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003a40:	d830      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x148>
 8003a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a46:	d00e      	beq.n	8003a66 <ADC_ConfigureBoostMode+0x10a>
 8003a48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a4c:	d82a      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x148>
 8003a4e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a52:	d008      	beq.n	8003a66 <ADC_ConfigureBoostMode+0x10a>
 8003a54:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a58:	d824      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x148>
 8003a5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a5e:	d002      	beq.n	8003a66 <ADC_ConfigureBoostMode+0x10a>
 8003a60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a64:	d11e      	bne.n	8003aa4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0c9b      	lsrs	r3, r3, #18
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	60fb      	str	r3, [r7, #12]
        break;
 8003a76:	e016      	b.n	8003aa6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	60fb      	str	r3, [r7, #12]
        break;
 8003a7e:	e012      	b.n	8003aa6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	60fb      	str	r3, [r7, #12]
        break;
 8003a86:	e00e      	b.n	8003aa6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	60fb      	str	r3, [r7, #12]
        break;
 8003a8e:	e00a      	b.n	8003aa6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	09db      	lsrs	r3, r3, #7
 8003a94:	60fb      	str	r3, [r7, #12]
        break;
 8003a96:	e006      	b.n	8003aa6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	0a1b      	lsrs	r3, r3, #8
 8003a9c:	60fb      	str	r3, [r7, #12]
        break;
 8003a9e:	e002      	b.n	8003aa6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003aa0:	bf00      	nop
 8003aa2:	e000      	b.n	8003aa6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003aa4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003aa6:	f7fe feab 	bl	8002800 <HAL_GetREVID>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d815      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b64 <ADC_ConfigureBoostMode+0x208>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d908      	bls.n	8003ace <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003acc:	e03e      	b.n	8003b4c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003adc:	609a      	str	r2, [r3, #8]
}
 8003ade:	e035      	b.n	8003b4c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b68 <ADC_ConfigureBoostMode+0x20c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d808      	bhi.n	8003b00 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003afc:	609a      	str	r2, [r3, #8]
}
 8003afe:	e025      	b.n	8003b4c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a1a      	ldr	r2, [pc, #104]	@ (8003b6c <ADC_ConfigureBoostMode+0x210>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d80a      	bhi.n	8003b1e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b1a:	609a      	str	r2, [r3, #8]
}
 8003b1c:	e016      	b.n	8003b4c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a13      	ldr	r2, [pc, #76]	@ (8003b70 <ADC_ConfigureBoostMode+0x214>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d80a      	bhi.n	8003b3c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b38:	609a      	str	r2, [r3, #8]
}
 8003b3a:	e007      	b.n	8003b4c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40022000 	.word	0x40022000
 8003b58:	40022100 	.word	0x40022100
 8003b5c:	40022300 	.word	0x40022300
 8003b60:	58026300 	.word	0x58026300
 8003b64:	01312d00 	.word	0x01312d00
 8003b68:	005f5e10 	.word	0x005f5e10
 8003b6c:	00bebc20 	.word	0x00bebc20
 8003b70:	017d7840 	.word	0x017d7840

08003b74 <LL_ADC_IsEnabled>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <LL_ADC_IsEnabled+0x18>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <LL_ADC_IsEnabled+0x1a>
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d101      	bne.n	8003bb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b09f      	sub	sp, #124	@ 0x7c
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e0be      	b.n	8003d5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a5c      	ldr	r2, [pc, #368]	@ (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d102      	bne.n	8003bfe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	e001      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e09d      	b.n	8003d5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ffb9 	bl	8003b9a <LL_ADC_REG_IsConversionOngoing>
 8003c28:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff ffb3 	bl	8003b9a <LL_ADC_REG_IsConversionOngoing>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d17f      	bne.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d17c      	bne.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a47      	ldr	r2, [pc, #284]	@ (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a46      	ldr	r2, [pc, #280]	@ (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d101      	bne.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003c54:	4b45      	ldr	r3, [pc, #276]	@ (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c56:	e000      	b.n	8003c5a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003c58:	4b45      	ldr	r3, [pc, #276]	@ (8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d039      	beq.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c74:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a3a      	ldr	r2, [pc, #232]	@ (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a38      	ldr	r2, [pc, #224]	@ (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10e      	bne.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c8a:	4836      	ldr	r0, [pc, #216]	@ (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c8c:	f7ff ff72 	bl	8003b74 <LL_ADC_IsEnabled>
 8003c90:	4604      	mov	r4, r0
 8003c92:	4835      	ldr	r0, [pc, #212]	@ (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c94:	f7ff ff6e 	bl	8003b74 <LL_ADC_IsEnabled>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4323      	orrs	r3, r4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e008      	b.n	8003cba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003ca8:	4832      	ldr	r0, [pc, #200]	@ (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003caa:	f7ff ff63 	bl	8003b74 <LL_ADC_IsEnabled>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d047      	beq.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	6811      	ldr	r1, [r2, #0]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	6892      	ldr	r2, [r2, #8]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cd4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cd6:	e03a      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ce2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10e      	bne.n	8003d16 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003cf8:	481a      	ldr	r0, [pc, #104]	@ (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cfa:	f7ff ff3b 	bl	8003b74 <LL_ADC_IsEnabled>
 8003cfe:	4604      	mov	r4, r0
 8003d00:	4819      	ldr	r0, [pc, #100]	@ (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d02:	f7ff ff37 	bl	8003b74 <LL_ADC_IsEnabled>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4323      	orrs	r3, r4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	e008      	b.n	8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003d16:	4817      	ldr	r0, [pc, #92]	@ (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d18:	f7ff ff2c 	bl	8003b74 <LL_ADC_IsEnabled>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d010      	beq.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	4b11      	ldr	r3, [pc, #68]	@ (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d36:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d38:	e009      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	f043 0220 	orr.w	r2, r3, #32
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003d4c:	e000      	b.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d4e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d58:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	377c      	adds	r7, #124	@ 0x7c
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd90      	pop	{r4, r7, pc}
 8003d64:	40022000 	.word	0x40022000
 8003d68:	40022100 	.word	0x40022100
 8003d6c:	40022300 	.word	0x40022300
 8003d70:	58026300 	.word	0x58026300
 8003d74:	58026000 	.word	0x58026000
 8003d78:	fffff0e0 	.word	0xfffff0e0

08003d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dbc <__NVIC_SetPriorityGrouping+0x40>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003da4:	4b06      	ldr	r3, [pc, #24]	@ (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003daa:	4a04      	ldr	r2, [pc, #16]	@ (8003dbc <__NVIC_SetPriorityGrouping+0x40>)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	60d3      	str	r3, [r2, #12]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000ed00 	.word	0xe000ed00
 8003dc0:	05fa0000 	.word	0x05fa0000

08003dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc8:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <__NVIC_GetPriorityGrouping+0x18>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	f003 0307 	and.w	r3, r3, #7
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	db0b      	blt.n	8003e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	f003 021f 	and.w	r2, r3, #31
 8003df8:	4907      	ldr	r1, [pc, #28]	@ (8003e18 <__NVIC_EnableIRQ+0x38>)
 8003dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2001      	movs	r0, #1
 8003e02:	fa00 f202 	lsl.w	r2, r0, r2
 8003e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db0a      	blt.n	8003e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	490c      	ldr	r1, [pc, #48]	@ (8003e68 <__NVIC_SetPriority+0x4c>)
 8003e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e44:	e00a      	b.n	8003e5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4908      	ldr	r1, [pc, #32]	@ (8003e6c <__NVIC_SetPriority+0x50>)
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3b04      	subs	r3, #4
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	440b      	add	r3, r1
 8003e5a:	761a      	strb	r2, [r3, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000e100 	.word	0xe000e100
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	@ 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f1c3 0307 	rsb	r3, r3, #7
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	bf28      	it	cs
 8003e8e:	2304      	movcs	r3, #4
 8003e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d902      	bls.n	8003ea0 <NVIC_EncodePriority+0x30>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3b03      	subs	r3, #3
 8003e9e:	e000      	b.n	8003ea2 <NVIC_EncodePriority+0x32>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43d9      	mvns	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	4313      	orrs	r3, r2
         );
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	@ 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ee8:	d301      	bcc.n	8003eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00f      	b.n	8003f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eee:	4a0a      	ldr	r2, [pc, #40]	@ (8003f18 <SysTick_Config+0x40>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	f7ff ff8e 	bl	8003e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f00:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <SysTick_Config+0x40>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f06:	4b04      	ldr	r3, [pc, #16]	@ (8003f18 <SysTick_Config+0x40>)
 8003f08:	2207      	movs	r2, #7
 8003f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	e000e010 	.word	0xe000e010

08003f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff29 	bl	8003d7c <__NVIC_SetPriorityGrouping>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f40:	f7ff ff40 	bl	8003dc4 <__NVIC_GetPriorityGrouping>
 8003f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff ff90 	bl	8003e70 <NVIC_EncodePriority>
 8003f50:	4602      	mov	r2, r0
 8003f52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff5f 	bl	8003e1c <__NVIC_SetPriority>
}
 8003f5e:	bf00      	nop
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff33 	bl	8003de0 <__NVIC_EnableIRQ>
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ffa4 	bl	8003ed8 <SysTick_Config>
 8003f90:	4603      	mov	r3, r0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003fa0:	f3bf 8f5f 	dmb	sy
}
 8003fa4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003fa6:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <HAL_MPU_Disable+0x28>)
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	4a06      	ldr	r2, [pc, #24]	@ (8003fc4 <HAL_MPU_Disable+0x28>)
 8003fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003fb2:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_MPU_Disable+0x2c>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
}
 8003fb8:	bf00      	nop
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	e000ed00 	.word	0xe000ed00
 8003fc8:	e000ed90 	.word	0xe000ed90

08003fcc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004004 <HAL_MPU_Enable+0x38>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003fde:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <HAL_MPU_Enable+0x3c>)
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	4a09      	ldr	r2, [pc, #36]	@ (8004008 <HAL_MPU_Enable+0x3c>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003fea:	f3bf 8f4f 	dsb	sy
}
 8003fee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ff0:	f3bf 8f6f 	isb	sy
}
 8003ff4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000ed90 	.word	0xe000ed90
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	785a      	ldrb	r2, [r3, #1]
 8004018:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_MPU_ConfigRegion+0x7c>)
 800401a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800401c:	4b1a      	ldr	r3, [pc, #104]	@ (8004088 <HAL_MPU_ConfigRegion+0x7c>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	4a19      	ldr	r2, [pc, #100]	@ (8004088 <HAL_MPU_ConfigRegion+0x7c>)
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004028:	4a17      	ldr	r2, [pc, #92]	@ (8004088 <HAL_MPU_ConfigRegion+0x7c>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	7b1b      	ldrb	r3, [r3, #12]
 8004034:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7adb      	ldrb	r3, [r3, #11]
 800403a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800403c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7a9b      	ldrb	r3, [r3, #10]
 8004042:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004044:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7b5b      	ldrb	r3, [r3, #13]
 800404a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800404c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	7b9b      	ldrb	r3, [r3, #14]
 8004052:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004054:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	7bdb      	ldrb	r3, [r3, #15]
 800405a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800405c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	7a5b      	ldrb	r3, [r3, #9]
 8004062:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004064:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	7a1b      	ldrb	r3, [r3, #8]
 800406a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800406c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	7812      	ldrb	r2, [r2, #0]
 8004072:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004074:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004076:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004078:	6113      	str	r3, [r2, #16]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	e000ed90 	.word	0xe000ed90

0800408c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004094:	f7fe fb84 	bl	80027a0 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e316      	b.n	80046d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a66      	ldr	r2, [pc, #408]	@ (8004244 <HAL_DMA_Init+0x1b8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d04a      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a65      	ldr	r2, [pc, #404]	@ (8004248 <HAL_DMA_Init+0x1bc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d045      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a63      	ldr	r2, [pc, #396]	@ (800424c <HAL_DMA_Init+0x1c0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d040      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a62      	ldr	r2, [pc, #392]	@ (8004250 <HAL_DMA_Init+0x1c4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d03b      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a60      	ldr	r2, [pc, #384]	@ (8004254 <HAL_DMA_Init+0x1c8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d036      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a5f      	ldr	r2, [pc, #380]	@ (8004258 <HAL_DMA_Init+0x1cc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d031      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a5d      	ldr	r2, [pc, #372]	@ (800425c <HAL_DMA_Init+0x1d0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d02c      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004260 <HAL_DMA_Init+0x1d4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d027      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a5a      	ldr	r2, [pc, #360]	@ (8004264 <HAL_DMA_Init+0x1d8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d022      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a59      	ldr	r2, [pc, #356]	@ (8004268 <HAL_DMA_Init+0x1dc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d01d      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a57      	ldr	r2, [pc, #348]	@ (800426c <HAL_DMA_Init+0x1e0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d018      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a56      	ldr	r2, [pc, #344]	@ (8004270 <HAL_DMA_Init+0x1e4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a54      	ldr	r2, [pc, #336]	@ (8004274 <HAL_DMA_Init+0x1e8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00e      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a53      	ldr	r2, [pc, #332]	@ (8004278 <HAL_DMA_Init+0x1ec>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d009      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a51      	ldr	r2, [pc, #324]	@ (800427c <HAL_DMA_Init+0x1f0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <HAL_DMA_Init+0xb8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a50      	ldr	r2, [pc, #320]	@ (8004280 <HAL_DMA_Init+0x1f4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d101      	bne.n	8004148 <HAL_DMA_Init+0xbc>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_DMA_Init+0xbe>
 8004148:	2300      	movs	r3, #0
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 813b 	beq.w	80043c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a37      	ldr	r2, [pc, #220]	@ (8004244 <HAL_DMA_Init+0x1b8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d04a      	beq.n	8004200 <HAL_DMA_Init+0x174>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a36      	ldr	r2, [pc, #216]	@ (8004248 <HAL_DMA_Init+0x1bc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d045      	beq.n	8004200 <HAL_DMA_Init+0x174>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a34      	ldr	r2, [pc, #208]	@ (800424c <HAL_DMA_Init+0x1c0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d040      	beq.n	8004200 <HAL_DMA_Init+0x174>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a33      	ldr	r2, [pc, #204]	@ (8004250 <HAL_DMA_Init+0x1c4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d03b      	beq.n	8004200 <HAL_DMA_Init+0x174>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a31      	ldr	r2, [pc, #196]	@ (8004254 <HAL_DMA_Init+0x1c8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d036      	beq.n	8004200 <HAL_DMA_Init+0x174>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a30      	ldr	r2, [pc, #192]	@ (8004258 <HAL_DMA_Init+0x1cc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d031      	beq.n	8004200 <HAL_DMA_Init+0x174>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2e      	ldr	r2, [pc, #184]	@ (800425c <HAL_DMA_Init+0x1d0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02c      	beq.n	8004200 <HAL_DMA_Init+0x174>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004260 <HAL_DMA_Init+0x1d4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d027      	beq.n	8004200 <HAL_DMA_Init+0x174>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004264 <HAL_DMA_Init+0x1d8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d022      	beq.n	8004200 <HAL_DMA_Init+0x174>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2a      	ldr	r2, [pc, #168]	@ (8004268 <HAL_DMA_Init+0x1dc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d01d      	beq.n	8004200 <HAL_DMA_Init+0x174>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a28      	ldr	r2, [pc, #160]	@ (800426c <HAL_DMA_Init+0x1e0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_DMA_Init+0x174>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a27      	ldr	r2, [pc, #156]	@ (8004270 <HAL_DMA_Init+0x1e4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <HAL_DMA_Init+0x174>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a25      	ldr	r2, [pc, #148]	@ (8004274 <HAL_DMA_Init+0x1e8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_DMA_Init+0x174>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a24      	ldr	r2, [pc, #144]	@ (8004278 <HAL_DMA_Init+0x1ec>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_DMA_Init+0x174>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a22      	ldr	r2, [pc, #136]	@ (800427c <HAL_DMA_Init+0x1f0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_DMA_Init+0x174>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a21      	ldr	r2, [pc, #132]	@ (8004280 <HAL_DMA_Init+0x1f4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d108      	bne.n	8004212 <HAL_DMA_Init+0x186>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0201 	bic.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	e007      	b.n	8004222 <HAL_DMA_Init+0x196>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004222:	e02f      	b.n	8004284 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004224:	f7fe fabc 	bl	80027a0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b05      	cmp	r3, #5
 8004230:	d928      	bls.n	8004284 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2203      	movs	r2, #3
 800423c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e246      	b.n	80046d2 <HAL_DMA_Init+0x646>
 8004244:	40020010 	.word	0x40020010
 8004248:	40020028 	.word	0x40020028
 800424c:	40020040 	.word	0x40020040
 8004250:	40020058 	.word	0x40020058
 8004254:	40020070 	.word	0x40020070
 8004258:	40020088 	.word	0x40020088
 800425c:	400200a0 	.word	0x400200a0
 8004260:	400200b8 	.word	0x400200b8
 8004264:	40020410 	.word	0x40020410
 8004268:	40020428 	.word	0x40020428
 800426c:	40020440 	.word	0x40020440
 8004270:	40020458 	.word	0x40020458
 8004274:	40020470 	.word	0x40020470
 8004278:	40020488 	.word	0x40020488
 800427c:	400204a0 	.word	0x400204a0
 8004280:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1c8      	bne.n	8004224 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4b83      	ldr	r3, [pc, #524]	@ (80044ac <HAL_DMA_Init+0x420>)
 800429e:	4013      	ands	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80042aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d107      	bne.n	80042e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e0:	4313      	orrs	r3, r2
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80042e8:	4b71      	ldr	r3, [pc, #452]	@ (80044b0 <HAL_DMA_Init+0x424>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b71      	ldr	r3, [pc, #452]	@ (80044b4 <HAL_DMA_Init+0x428>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f4:	d328      	bcc.n	8004348 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b28      	cmp	r3, #40	@ 0x28
 80042fc:	d903      	bls.n	8004306 <HAL_DMA_Init+0x27a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b2e      	cmp	r3, #46	@ 0x2e
 8004304:	d917      	bls.n	8004336 <HAL_DMA_Init+0x2aa>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b3e      	cmp	r3, #62	@ 0x3e
 800430c:	d903      	bls.n	8004316 <HAL_DMA_Init+0x28a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b42      	cmp	r3, #66	@ 0x42
 8004314:	d90f      	bls.n	8004336 <HAL_DMA_Init+0x2aa>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b46      	cmp	r3, #70	@ 0x46
 800431c:	d903      	bls.n	8004326 <HAL_DMA_Init+0x29a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b48      	cmp	r3, #72	@ 0x48
 8004324:	d907      	bls.n	8004336 <HAL_DMA_Init+0x2aa>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b4e      	cmp	r3, #78	@ 0x4e
 800432c:	d905      	bls.n	800433a <HAL_DMA_Init+0x2ae>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b52      	cmp	r3, #82	@ 0x52
 8004334:	d801      	bhi.n	800433a <HAL_DMA_Init+0x2ae>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <HAL_DMA_Init+0x2b0>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004346:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f023 0307 	bic.w	r3, r3, #7
 800435e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	2b04      	cmp	r3, #4
 8004370:	d117      	bne.n	80043a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f002 fb4d 	bl	8006a24 <DMA_CheckFifoParam>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2240      	movs	r2, #64	@ 0x40
 8004394:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e197      	b.n	80046d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f002 fa88 	bl	80068c0 <DMA_CalcBaseAndBitshift>
 80043b0:	4603      	mov	r3, r0
 80043b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	223f      	movs	r2, #63	@ 0x3f
 80043be:	409a      	lsls	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	e0cd      	b.n	8004562 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3b      	ldr	r2, [pc, #236]	@ (80044b8 <HAL_DMA_Init+0x42c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <HAL_DMA_Init+0x38a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a39      	ldr	r2, [pc, #228]	@ (80044bc <HAL_DMA_Init+0x430>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01d      	beq.n	8004416 <HAL_DMA_Init+0x38a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a38      	ldr	r2, [pc, #224]	@ (80044c0 <HAL_DMA_Init+0x434>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <HAL_DMA_Init+0x38a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a36      	ldr	r2, [pc, #216]	@ (80044c4 <HAL_DMA_Init+0x438>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_DMA_Init+0x38a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a35      	ldr	r2, [pc, #212]	@ (80044c8 <HAL_DMA_Init+0x43c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <HAL_DMA_Init+0x38a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a33      	ldr	r2, [pc, #204]	@ (80044cc <HAL_DMA_Init+0x440>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <HAL_DMA_Init+0x38a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a32      	ldr	r2, [pc, #200]	@ (80044d0 <HAL_DMA_Init+0x444>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_DMA_Init+0x38a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a30      	ldr	r2, [pc, #192]	@ (80044d4 <HAL_DMA_Init+0x448>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_DMA_Init+0x38e>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_DMA_Init+0x390>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8097 	beq.w	8004550 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a24      	ldr	r2, [pc, #144]	@ (80044b8 <HAL_DMA_Init+0x42c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d021      	beq.n	8004470 <HAL_DMA_Init+0x3e4>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a22      	ldr	r2, [pc, #136]	@ (80044bc <HAL_DMA_Init+0x430>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01c      	beq.n	8004470 <HAL_DMA_Init+0x3e4>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a21      	ldr	r2, [pc, #132]	@ (80044c0 <HAL_DMA_Init+0x434>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d017      	beq.n	8004470 <HAL_DMA_Init+0x3e4>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1f      	ldr	r2, [pc, #124]	@ (80044c4 <HAL_DMA_Init+0x438>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d012      	beq.n	8004470 <HAL_DMA_Init+0x3e4>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1e      	ldr	r2, [pc, #120]	@ (80044c8 <HAL_DMA_Init+0x43c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00d      	beq.n	8004470 <HAL_DMA_Init+0x3e4>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1c      	ldr	r2, [pc, #112]	@ (80044cc <HAL_DMA_Init+0x440>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d008      	beq.n	8004470 <HAL_DMA_Init+0x3e4>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1b      	ldr	r2, [pc, #108]	@ (80044d0 <HAL_DMA_Init+0x444>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <HAL_DMA_Init+0x3e4>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <HAL_DMA_Init+0x448>)
 800446e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4b13      	ldr	r3, [pc, #76]	@ (80044d8 <HAL_DMA_Init+0x44c>)
 800448c:	4013      	ands	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b40      	cmp	r3, #64	@ 0x40
 8004496:	d021      	beq.n	80044dc <HAL_DMA_Init+0x450>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b80      	cmp	r3, #128	@ 0x80
 800449e:	d102      	bne.n	80044a6 <HAL_DMA_Init+0x41a>
 80044a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044a4:	e01b      	b.n	80044de <HAL_DMA_Init+0x452>
 80044a6:	2300      	movs	r3, #0
 80044a8:	e019      	b.n	80044de <HAL_DMA_Init+0x452>
 80044aa:	bf00      	nop
 80044ac:	fe10803f 	.word	0xfe10803f
 80044b0:	5c001000 	.word	0x5c001000
 80044b4:	ffff0000 	.word	0xffff0000
 80044b8:	58025408 	.word	0x58025408
 80044bc:	5802541c 	.word	0x5802541c
 80044c0:	58025430 	.word	0x58025430
 80044c4:	58025444 	.word	0x58025444
 80044c8:	58025458 	.word	0x58025458
 80044cc:	5802546c 	.word	0x5802546c
 80044d0:	58025480 	.word	0x58025480
 80044d4:	58025494 	.word	0x58025494
 80044d8:	fffe000f 	.word	0xfffe000f
 80044dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68d2      	ldr	r2, [r2, #12]
 80044e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80044fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800450c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	4b6e      	ldr	r3, [pc, #440]	@ (80046dc <HAL_DMA_Init+0x650>)
 8004524:	4413      	add	r3, r2
 8004526:	4a6e      	ldr	r2, [pc, #440]	@ (80046e0 <HAL_DMA_Init+0x654>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	091b      	lsrs	r3, r3, #4
 800452e:	009a      	lsls	r2, r3, #2
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f002 f9c3 	bl	80068c0 <DMA_CalcBaseAndBitshift>
 800453a:	4603      	mov	r3, r0
 800453c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2201      	movs	r2, #1
 8004548:	409a      	lsls	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	e008      	b.n	8004562 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2240      	movs	r2, #64	@ 0x40
 8004554:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2203      	movs	r2, #3
 800455a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0b7      	b.n	80046d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a5f      	ldr	r2, [pc, #380]	@ (80046e4 <HAL_DMA_Init+0x658>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d072      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a5d      	ldr	r2, [pc, #372]	@ (80046e8 <HAL_DMA_Init+0x65c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d06d      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a5c      	ldr	r2, [pc, #368]	@ (80046ec <HAL_DMA_Init+0x660>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d068      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a5a      	ldr	r2, [pc, #360]	@ (80046f0 <HAL_DMA_Init+0x664>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d063      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a59      	ldr	r2, [pc, #356]	@ (80046f4 <HAL_DMA_Init+0x668>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d05e      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a57      	ldr	r2, [pc, #348]	@ (80046f8 <HAL_DMA_Init+0x66c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d059      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a56      	ldr	r2, [pc, #344]	@ (80046fc <HAL_DMA_Init+0x670>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d054      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a54      	ldr	r2, [pc, #336]	@ (8004700 <HAL_DMA_Init+0x674>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d04f      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a53      	ldr	r2, [pc, #332]	@ (8004704 <HAL_DMA_Init+0x678>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d04a      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a51      	ldr	r2, [pc, #324]	@ (8004708 <HAL_DMA_Init+0x67c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d045      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a50      	ldr	r2, [pc, #320]	@ (800470c <HAL_DMA_Init+0x680>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d040      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a4e      	ldr	r2, [pc, #312]	@ (8004710 <HAL_DMA_Init+0x684>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d03b      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a4d      	ldr	r2, [pc, #308]	@ (8004714 <HAL_DMA_Init+0x688>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d036      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004718 <HAL_DMA_Init+0x68c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d031      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a4a      	ldr	r2, [pc, #296]	@ (800471c <HAL_DMA_Init+0x690>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d02c      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a48      	ldr	r2, [pc, #288]	@ (8004720 <HAL_DMA_Init+0x694>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d027      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a47      	ldr	r2, [pc, #284]	@ (8004724 <HAL_DMA_Init+0x698>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d022      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a45      	ldr	r2, [pc, #276]	@ (8004728 <HAL_DMA_Init+0x69c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01d      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a44      	ldr	r2, [pc, #272]	@ (800472c <HAL_DMA_Init+0x6a0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d018      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a42      	ldr	r2, [pc, #264]	@ (8004730 <HAL_DMA_Init+0x6a4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a41      	ldr	r2, [pc, #260]	@ (8004734 <HAL_DMA_Init+0x6a8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00e      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a3f      	ldr	r2, [pc, #252]	@ (8004738 <HAL_DMA_Init+0x6ac>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a3e      	ldr	r2, [pc, #248]	@ (800473c <HAL_DMA_Init+0x6b0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_DMA_Init+0x5c6>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a3c      	ldr	r2, [pc, #240]	@ (8004740 <HAL_DMA_Init+0x6b4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <HAL_DMA_Init+0x5ca>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <HAL_DMA_Init+0x5cc>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d032      	beq.n	80046c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f002 fa5d 	bl	8006b1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b80      	cmp	r3, #128	@ 0x80
 8004668:	d102      	bne.n	8004670 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004684:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d010      	beq.n	80046b0 <HAL_DMA_Init+0x624>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b08      	cmp	r3, #8
 8004694:	d80c      	bhi.n	80046b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f002 fada 	bl	8006c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	e008      	b.n	80046c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	a7fdabf8 	.word	0xa7fdabf8
 80046e0:	cccccccd 	.word	0xcccccccd
 80046e4:	40020010 	.word	0x40020010
 80046e8:	40020028 	.word	0x40020028
 80046ec:	40020040 	.word	0x40020040
 80046f0:	40020058 	.word	0x40020058
 80046f4:	40020070 	.word	0x40020070
 80046f8:	40020088 	.word	0x40020088
 80046fc:	400200a0 	.word	0x400200a0
 8004700:	400200b8 	.word	0x400200b8
 8004704:	40020410 	.word	0x40020410
 8004708:	40020428 	.word	0x40020428
 800470c:	40020440 	.word	0x40020440
 8004710:	40020458 	.word	0x40020458
 8004714:	40020470 	.word	0x40020470
 8004718:	40020488 	.word	0x40020488
 800471c:	400204a0 	.word	0x400204a0
 8004720:	400204b8 	.word	0x400204b8
 8004724:	58025408 	.word	0x58025408
 8004728:	5802541c 	.word	0x5802541c
 800472c:	58025430 	.word	0x58025430
 8004730:	58025444 	.word	0x58025444
 8004734:	58025458 	.word	0x58025458
 8004738:	5802546c 	.word	0x5802546c
 800473c:	58025480 	.word	0x58025480
 8004740:	58025494 	.word	0x58025494

08004744 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e226      	b.n	8004bae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_DMA_Start_IT+0x2a>
 800476a:	2302      	movs	r3, #2
 800476c:	e21f      	b.n	8004bae <HAL_DMA_Start_IT+0x46a>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	f040 820a 	bne.w	8004b98 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a68      	ldr	r2, [pc, #416]	@ (8004938 <HAL_DMA_Start_IT+0x1f4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d04a      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a66      	ldr	r2, [pc, #408]	@ (800493c <HAL_DMA_Start_IT+0x1f8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d045      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a65      	ldr	r2, [pc, #404]	@ (8004940 <HAL_DMA_Start_IT+0x1fc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d040      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a63      	ldr	r2, [pc, #396]	@ (8004944 <HAL_DMA_Start_IT+0x200>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d03b      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a62      	ldr	r2, [pc, #392]	@ (8004948 <HAL_DMA_Start_IT+0x204>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d036      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a60      	ldr	r2, [pc, #384]	@ (800494c <HAL_DMA_Start_IT+0x208>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d031      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a5f      	ldr	r2, [pc, #380]	@ (8004950 <HAL_DMA_Start_IT+0x20c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d02c      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004954 <HAL_DMA_Start_IT+0x210>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d027      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004958 <HAL_DMA_Start_IT+0x214>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d022      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a5a      	ldr	r2, [pc, #360]	@ (800495c <HAL_DMA_Start_IT+0x218>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d01d      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a59      	ldr	r2, [pc, #356]	@ (8004960 <HAL_DMA_Start_IT+0x21c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d018      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a57      	ldr	r2, [pc, #348]	@ (8004964 <HAL_DMA_Start_IT+0x220>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a56      	ldr	r2, [pc, #344]	@ (8004968 <HAL_DMA_Start_IT+0x224>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00e      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a54      	ldr	r2, [pc, #336]	@ (800496c <HAL_DMA_Start_IT+0x228>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d009      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a53      	ldr	r2, [pc, #332]	@ (8004970 <HAL_DMA_Start_IT+0x22c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_DMA_Start_IT+0xee>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a51      	ldr	r2, [pc, #324]	@ (8004974 <HAL_DMA_Start_IT+0x230>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <HAL_DMA_Start_IT+0x100>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e007      	b.n	8004854 <HAL_DMA_Start_IT+0x110>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f001 fe84 	bl	8006568 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a34      	ldr	r2, [pc, #208]	@ (8004938 <HAL_DMA_Start_IT+0x1f4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d04a      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a33      	ldr	r2, [pc, #204]	@ (800493c <HAL_DMA_Start_IT+0x1f8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d045      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a31      	ldr	r2, [pc, #196]	@ (8004940 <HAL_DMA_Start_IT+0x1fc>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d040      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a30      	ldr	r2, [pc, #192]	@ (8004944 <HAL_DMA_Start_IT+0x200>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d03b      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2e      	ldr	r2, [pc, #184]	@ (8004948 <HAL_DMA_Start_IT+0x204>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d036      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2d      	ldr	r2, [pc, #180]	@ (800494c <HAL_DMA_Start_IT+0x208>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d031      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004950 <HAL_DMA_Start_IT+0x20c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02c      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <HAL_DMA_Start_IT+0x210>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d027      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a28      	ldr	r2, [pc, #160]	@ (8004958 <HAL_DMA_Start_IT+0x214>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d022      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a27      	ldr	r2, [pc, #156]	@ (800495c <HAL_DMA_Start_IT+0x218>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d01d      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a25      	ldr	r2, [pc, #148]	@ (8004960 <HAL_DMA_Start_IT+0x21c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d018      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a24      	ldr	r2, [pc, #144]	@ (8004964 <HAL_DMA_Start_IT+0x220>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d013      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a22      	ldr	r2, [pc, #136]	@ (8004968 <HAL_DMA_Start_IT+0x224>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00e      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a21      	ldr	r2, [pc, #132]	@ (800496c <HAL_DMA_Start_IT+0x228>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d009      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004970 <HAL_DMA_Start_IT+0x22c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_DMA_Start_IT+0x1bc>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004974 <HAL_DMA_Start_IT+0x230>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_DMA_Start_IT+0x1c0>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <HAL_DMA_Start_IT+0x1c2>
 8004904:	2300      	movs	r3, #0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d036      	beq.n	8004978 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f023 021e 	bic.w	r2, r3, #30
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0216 	orr.w	r2, r2, #22
 800491c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d03e      	beq.n	80049a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0208 	orr.w	r2, r2, #8
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e035      	b.n	80049a4 <HAL_DMA_Start_IT+0x260>
 8004938:	40020010 	.word	0x40020010
 800493c:	40020028 	.word	0x40020028
 8004940:	40020040 	.word	0x40020040
 8004944:	40020058 	.word	0x40020058
 8004948:	40020070 	.word	0x40020070
 800494c:	40020088 	.word	0x40020088
 8004950:	400200a0 	.word	0x400200a0
 8004954:	400200b8 	.word	0x400200b8
 8004958:	40020410 	.word	0x40020410
 800495c:	40020428 	.word	0x40020428
 8004960:	40020440 	.word	0x40020440
 8004964:	40020458 	.word	0x40020458
 8004968:	40020470 	.word	0x40020470
 800496c:	40020488 	.word	0x40020488
 8004970:	400204a0 	.word	0x400204a0
 8004974:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 020e 	bic.w	r2, r3, #14
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 020a 	orr.w	r2, r2, #10
 800498a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0204 	orr.w	r2, r2, #4
 80049a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a83      	ldr	r2, [pc, #524]	@ (8004bb8 <HAL_DMA_Start_IT+0x474>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d072      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a82      	ldr	r2, [pc, #520]	@ (8004bbc <HAL_DMA_Start_IT+0x478>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d06d      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a80      	ldr	r2, [pc, #512]	@ (8004bc0 <HAL_DMA_Start_IT+0x47c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d068      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a7f      	ldr	r2, [pc, #508]	@ (8004bc4 <HAL_DMA_Start_IT+0x480>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d063      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a7d      	ldr	r2, [pc, #500]	@ (8004bc8 <HAL_DMA_Start_IT+0x484>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d05e      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a7c      	ldr	r2, [pc, #496]	@ (8004bcc <HAL_DMA_Start_IT+0x488>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d059      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a7a      	ldr	r2, [pc, #488]	@ (8004bd0 <HAL_DMA_Start_IT+0x48c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d054      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a79      	ldr	r2, [pc, #484]	@ (8004bd4 <HAL_DMA_Start_IT+0x490>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d04f      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a77      	ldr	r2, [pc, #476]	@ (8004bd8 <HAL_DMA_Start_IT+0x494>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d04a      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a76      	ldr	r2, [pc, #472]	@ (8004bdc <HAL_DMA_Start_IT+0x498>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d045      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a74      	ldr	r2, [pc, #464]	@ (8004be0 <HAL_DMA_Start_IT+0x49c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d040      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a73      	ldr	r2, [pc, #460]	@ (8004be4 <HAL_DMA_Start_IT+0x4a0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d03b      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a71      	ldr	r2, [pc, #452]	@ (8004be8 <HAL_DMA_Start_IT+0x4a4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d036      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a70      	ldr	r2, [pc, #448]	@ (8004bec <HAL_DMA_Start_IT+0x4a8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d031      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a6e      	ldr	r2, [pc, #440]	@ (8004bf0 <HAL_DMA_Start_IT+0x4ac>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d02c      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6d      	ldr	r2, [pc, #436]	@ (8004bf4 <HAL_DMA_Start_IT+0x4b0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d027      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6b      	ldr	r2, [pc, #428]	@ (8004bf8 <HAL_DMA_Start_IT+0x4b4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d022      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6a      	ldr	r2, [pc, #424]	@ (8004bfc <HAL_DMA_Start_IT+0x4b8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d01d      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a68      	ldr	r2, [pc, #416]	@ (8004c00 <HAL_DMA_Start_IT+0x4bc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d018      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a67      	ldr	r2, [pc, #412]	@ (8004c04 <HAL_DMA_Start_IT+0x4c0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a65      	ldr	r2, [pc, #404]	@ (8004c08 <HAL_DMA_Start_IT+0x4c4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00e      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a64      	ldr	r2, [pc, #400]	@ (8004c0c <HAL_DMA_Start_IT+0x4c8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d009      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a62      	ldr	r2, [pc, #392]	@ (8004c10 <HAL_DMA_Start_IT+0x4cc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_DMA_Start_IT+0x350>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a61      	ldr	r2, [pc, #388]	@ (8004c14 <HAL_DMA_Start_IT+0x4d0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d101      	bne.n	8004a98 <HAL_DMA_Start_IT+0x354>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <HAL_DMA_Start_IT+0x356>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01a      	beq.n	8004ad4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ace:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ad2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a37      	ldr	r2, [pc, #220]	@ (8004bb8 <HAL_DMA_Start_IT+0x474>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d04a      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a36      	ldr	r2, [pc, #216]	@ (8004bbc <HAL_DMA_Start_IT+0x478>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d045      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a34      	ldr	r2, [pc, #208]	@ (8004bc0 <HAL_DMA_Start_IT+0x47c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d040      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a33      	ldr	r2, [pc, #204]	@ (8004bc4 <HAL_DMA_Start_IT+0x480>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d03b      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a31      	ldr	r2, [pc, #196]	@ (8004bc8 <HAL_DMA_Start_IT+0x484>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d036      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a30      	ldr	r2, [pc, #192]	@ (8004bcc <HAL_DMA_Start_IT+0x488>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d031      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2e      	ldr	r2, [pc, #184]	@ (8004bd0 <HAL_DMA_Start_IT+0x48c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d02c      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8004bd4 <HAL_DMA_Start_IT+0x490>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d027      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a2b      	ldr	r2, [pc, #172]	@ (8004bd8 <HAL_DMA_Start_IT+0x494>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d022      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2a      	ldr	r2, [pc, #168]	@ (8004bdc <HAL_DMA_Start_IT+0x498>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d01d      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a28      	ldr	r2, [pc, #160]	@ (8004be0 <HAL_DMA_Start_IT+0x49c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d018      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a27      	ldr	r2, [pc, #156]	@ (8004be4 <HAL_DMA_Start_IT+0x4a0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a25      	ldr	r2, [pc, #148]	@ (8004be8 <HAL_DMA_Start_IT+0x4a4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00e      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a24      	ldr	r2, [pc, #144]	@ (8004bec <HAL_DMA_Start_IT+0x4a8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d009      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a22      	ldr	r2, [pc, #136]	@ (8004bf0 <HAL_DMA_Start_IT+0x4ac>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_DMA_Start_IT+0x430>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a21      	ldr	r2, [pc, #132]	@ (8004bf4 <HAL_DMA_Start_IT+0x4b0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d108      	bne.n	8004b86 <HAL_DMA_Start_IT+0x442>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e012      	b.n	8004bac <HAL_DMA_Start_IT+0x468>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e009      	b.n	8004bac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40020010 	.word	0x40020010
 8004bbc:	40020028 	.word	0x40020028
 8004bc0:	40020040 	.word	0x40020040
 8004bc4:	40020058 	.word	0x40020058
 8004bc8:	40020070 	.word	0x40020070
 8004bcc:	40020088 	.word	0x40020088
 8004bd0:	400200a0 	.word	0x400200a0
 8004bd4:	400200b8 	.word	0x400200b8
 8004bd8:	40020410 	.word	0x40020410
 8004bdc:	40020428 	.word	0x40020428
 8004be0:	40020440 	.word	0x40020440
 8004be4:	40020458 	.word	0x40020458
 8004be8:	40020470 	.word	0x40020470
 8004bec:	40020488 	.word	0x40020488
 8004bf0:	400204a0 	.word	0x400204a0
 8004bf4:	400204b8 	.word	0x400204b8
 8004bf8:	58025408 	.word	0x58025408
 8004bfc:	5802541c 	.word	0x5802541c
 8004c00:	58025430 	.word	0x58025430
 8004c04:	58025444 	.word	0x58025444
 8004c08:	58025458 	.word	0x58025458
 8004c0c:	5802546c 	.word	0x5802546c
 8004c10:	58025480 	.word	0x58025480
 8004c14:	58025494 	.word	0x58025494

08004c18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004c20:	f7fd fdbe 	bl	80027a0 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e2dc      	b.n	80051ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d008      	beq.n	8004c4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2280      	movs	r2, #128	@ 0x80
 8004c40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e2cd      	b.n	80051ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a76      	ldr	r2, [pc, #472]	@ (8004e2c <HAL_DMA_Abort+0x214>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d04a      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a74      	ldr	r2, [pc, #464]	@ (8004e30 <HAL_DMA_Abort+0x218>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d045      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a73      	ldr	r2, [pc, #460]	@ (8004e34 <HAL_DMA_Abort+0x21c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d040      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a71      	ldr	r2, [pc, #452]	@ (8004e38 <HAL_DMA_Abort+0x220>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d03b      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a70      	ldr	r2, [pc, #448]	@ (8004e3c <HAL_DMA_Abort+0x224>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d036      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a6e      	ldr	r2, [pc, #440]	@ (8004e40 <HAL_DMA_Abort+0x228>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d031      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a6d      	ldr	r2, [pc, #436]	@ (8004e44 <HAL_DMA_Abort+0x22c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d02c      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a6b      	ldr	r2, [pc, #428]	@ (8004e48 <HAL_DMA_Abort+0x230>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d027      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a6a      	ldr	r2, [pc, #424]	@ (8004e4c <HAL_DMA_Abort+0x234>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d022      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a68      	ldr	r2, [pc, #416]	@ (8004e50 <HAL_DMA_Abort+0x238>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d01d      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a67      	ldr	r2, [pc, #412]	@ (8004e54 <HAL_DMA_Abort+0x23c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d018      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a65      	ldr	r2, [pc, #404]	@ (8004e58 <HAL_DMA_Abort+0x240>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a64      	ldr	r2, [pc, #400]	@ (8004e5c <HAL_DMA_Abort+0x244>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00e      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a62      	ldr	r2, [pc, #392]	@ (8004e60 <HAL_DMA_Abort+0x248>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d009      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a61      	ldr	r2, [pc, #388]	@ (8004e64 <HAL_DMA_Abort+0x24c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d004      	beq.n	8004cee <HAL_DMA_Abort+0xd6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8004e68 <HAL_DMA_Abort+0x250>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d101      	bne.n	8004cf2 <HAL_DMA_Abort+0xda>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <HAL_DMA_Abort+0xdc>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d013      	beq.n	8004d20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 021e 	bic.w	r2, r2, #30
 8004d06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695a      	ldr	r2, [r3, #20]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e00a      	b.n	8004d36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 020e 	bic.w	r2, r2, #14
 8004d2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e2c <HAL_DMA_Abort+0x214>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d072      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a3a      	ldr	r2, [pc, #232]	@ (8004e30 <HAL_DMA_Abort+0x218>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d06d      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a39      	ldr	r2, [pc, #228]	@ (8004e34 <HAL_DMA_Abort+0x21c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d068      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a37      	ldr	r2, [pc, #220]	@ (8004e38 <HAL_DMA_Abort+0x220>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d063      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a36      	ldr	r2, [pc, #216]	@ (8004e3c <HAL_DMA_Abort+0x224>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d05e      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a34      	ldr	r2, [pc, #208]	@ (8004e40 <HAL_DMA_Abort+0x228>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d059      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a33      	ldr	r2, [pc, #204]	@ (8004e44 <HAL_DMA_Abort+0x22c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d054      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a31      	ldr	r2, [pc, #196]	@ (8004e48 <HAL_DMA_Abort+0x230>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d04f      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a30      	ldr	r2, [pc, #192]	@ (8004e4c <HAL_DMA_Abort+0x234>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d04a      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a2e      	ldr	r2, [pc, #184]	@ (8004e50 <HAL_DMA_Abort+0x238>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d045      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004e54 <HAL_DMA_Abort+0x23c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d040      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e58 <HAL_DMA_Abort+0x240>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d03b      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e5c <HAL_DMA_Abort+0x244>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d036      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a28      	ldr	r2, [pc, #160]	@ (8004e60 <HAL_DMA_Abort+0x248>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d031      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a27      	ldr	r2, [pc, #156]	@ (8004e64 <HAL_DMA_Abort+0x24c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d02c      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a25      	ldr	r2, [pc, #148]	@ (8004e68 <HAL_DMA_Abort+0x250>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d027      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a24      	ldr	r2, [pc, #144]	@ (8004e6c <HAL_DMA_Abort+0x254>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d022      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a22      	ldr	r2, [pc, #136]	@ (8004e70 <HAL_DMA_Abort+0x258>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01d      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a21      	ldr	r2, [pc, #132]	@ (8004e74 <HAL_DMA_Abort+0x25c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d018      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e78 <HAL_DMA_Abort+0x260>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1e      	ldr	r2, [pc, #120]	@ (8004e7c <HAL_DMA_Abort+0x264>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00e      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004e80 <HAL_DMA_Abort+0x268>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d009      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1b      	ldr	r2, [pc, #108]	@ (8004e84 <HAL_DMA_Abort+0x26c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d004      	beq.n	8004e26 <HAL_DMA_Abort+0x20e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a19      	ldr	r2, [pc, #100]	@ (8004e88 <HAL_DMA_Abort+0x270>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d132      	bne.n	8004e8c <HAL_DMA_Abort+0x274>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e031      	b.n	8004e8e <HAL_DMA_Abort+0x276>
 8004e2a:	bf00      	nop
 8004e2c:	40020010 	.word	0x40020010
 8004e30:	40020028 	.word	0x40020028
 8004e34:	40020040 	.word	0x40020040
 8004e38:	40020058 	.word	0x40020058
 8004e3c:	40020070 	.word	0x40020070
 8004e40:	40020088 	.word	0x40020088
 8004e44:	400200a0 	.word	0x400200a0
 8004e48:	400200b8 	.word	0x400200b8
 8004e4c:	40020410 	.word	0x40020410
 8004e50:	40020428 	.word	0x40020428
 8004e54:	40020440 	.word	0x40020440
 8004e58:	40020458 	.word	0x40020458
 8004e5c:	40020470 	.word	0x40020470
 8004e60:	40020488 	.word	0x40020488
 8004e64:	400204a0 	.word	0x400204a0
 8004e68:	400204b8 	.word	0x400204b8
 8004e6c:	58025408 	.word	0x58025408
 8004e70:	5802541c 	.word	0x5802541c
 8004e74:	58025430 	.word	0x58025430
 8004e78:	58025444 	.word	0x58025444
 8004e7c:	58025458 	.word	0x58025458
 8004e80:	5802546c 	.word	0x5802546c
 8004e84:	58025480 	.word	0x58025480
 8004e88:	58025494 	.word	0x58025494
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a6d      	ldr	r2, [pc, #436]	@ (800505c <HAL_DMA_Abort+0x444>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d04a      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6b      	ldr	r2, [pc, #428]	@ (8005060 <HAL_DMA_Abort+0x448>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d045      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6a      	ldr	r2, [pc, #424]	@ (8005064 <HAL_DMA_Abort+0x44c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d040      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a68      	ldr	r2, [pc, #416]	@ (8005068 <HAL_DMA_Abort+0x450>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d03b      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a67      	ldr	r2, [pc, #412]	@ (800506c <HAL_DMA_Abort+0x454>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d036      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a65      	ldr	r2, [pc, #404]	@ (8005070 <HAL_DMA_Abort+0x458>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d031      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a64      	ldr	r2, [pc, #400]	@ (8005074 <HAL_DMA_Abort+0x45c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d02c      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a62      	ldr	r2, [pc, #392]	@ (8005078 <HAL_DMA_Abort+0x460>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d027      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a61      	ldr	r2, [pc, #388]	@ (800507c <HAL_DMA_Abort+0x464>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a5f      	ldr	r2, [pc, #380]	@ (8005080 <HAL_DMA_Abort+0x468>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01d      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a5e      	ldr	r2, [pc, #376]	@ (8005084 <HAL_DMA_Abort+0x46c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d018      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a5c      	ldr	r2, [pc, #368]	@ (8005088 <HAL_DMA_Abort+0x470>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a5b      	ldr	r2, [pc, #364]	@ (800508c <HAL_DMA_Abort+0x474>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a59      	ldr	r2, [pc, #356]	@ (8005090 <HAL_DMA_Abort+0x478>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a58      	ldr	r2, [pc, #352]	@ (8005094 <HAL_DMA_Abort+0x47c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_DMA_Abort+0x32a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a56      	ldr	r2, [pc, #344]	@ (8005098 <HAL_DMA_Abort+0x480>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d108      	bne.n	8004f54 <HAL_DMA_Abort+0x33c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e007      	b.n	8004f64 <HAL_DMA_Abort+0x34c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f64:	e013      	b.n	8004f8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f66:	f7fd fc1b 	bl	80027a0 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b05      	cmp	r3, #5
 8004f72:	d90c      	bls.n	8004f8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e12d      	b.n	80051ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e5      	bne.n	8004f66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800505c <HAL_DMA_Abort+0x444>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d04a      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8005060 <HAL_DMA_Abort+0x448>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d045      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005064 <HAL_DMA_Abort+0x44c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d040      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8005068 <HAL_DMA_Abort+0x450>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d03b      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a29      	ldr	r2, [pc, #164]	@ (800506c <HAL_DMA_Abort+0x454>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d036      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a27      	ldr	r2, [pc, #156]	@ (8005070 <HAL_DMA_Abort+0x458>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d031      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a26      	ldr	r2, [pc, #152]	@ (8005074 <HAL_DMA_Abort+0x45c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d02c      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a24      	ldr	r2, [pc, #144]	@ (8005078 <HAL_DMA_Abort+0x460>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d027      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a23      	ldr	r2, [pc, #140]	@ (800507c <HAL_DMA_Abort+0x464>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d022      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a21      	ldr	r2, [pc, #132]	@ (8005080 <HAL_DMA_Abort+0x468>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d01d      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a20      	ldr	r2, [pc, #128]	@ (8005084 <HAL_DMA_Abort+0x46c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d018      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1e      	ldr	r2, [pc, #120]	@ (8005088 <HAL_DMA_Abort+0x470>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1d      	ldr	r2, [pc, #116]	@ (800508c <HAL_DMA_Abort+0x474>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00e      	beq.n	800503a <HAL_DMA_Abort+0x422>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1b      	ldr	r2, [pc, #108]	@ (8005090 <HAL_DMA_Abort+0x478>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d009      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1a      	ldr	r2, [pc, #104]	@ (8005094 <HAL_DMA_Abort+0x47c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d004      	beq.n	800503a <HAL_DMA_Abort+0x422>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a18      	ldr	r2, [pc, #96]	@ (8005098 <HAL_DMA_Abort+0x480>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d101      	bne.n	800503e <HAL_DMA_Abort+0x426>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <HAL_DMA_Abort+0x428>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d02b      	beq.n	800509c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005048:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	223f      	movs	r2, #63	@ 0x3f
 8005054:	409a      	lsls	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	609a      	str	r2, [r3, #8]
 800505a:	e02a      	b.n	80050b2 <HAL_DMA_Abort+0x49a>
 800505c:	40020010 	.word	0x40020010
 8005060:	40020028 	.word	0x40020028
 8005064:	40020040 	.word	0x40020040
 8005068:	40020058 	.word	0x40020058
 800506c:	40020070 	.word	0x40020070
 8005070:	40020088 	.word	0x40020088
 8005074:	400200a0 	.word	0x400200a0
 8005078:	400200b8 	.word	0x400200b8
 800507c:	40020410 	.word	0x40020410
 8005080:	40020428 	.word	0x40020428
 8005084:	40020440 	.word	0x40020440
 8005088:	40020458 	.word	0x40020458
 800508c:	40020470 	.word	0x40020470
 8005090:	40020488 	.word	0x40020488
 8005094:	400204a0 	.word	0x400204a0
 8005098:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	2201      	movs	r2, #1
 80050ac:	409a      	lsls	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a4f      	ldr	r2, [pc, #316]	@ (80051f4 <HAL_DMA_Abort+0x5dc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d072      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a4d      	ldr	r2, [pc, #308]	@ (80051f8 <HAL_DMA_Abort+0x5e0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d06d      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a4c      	ldr	r2, [pc, #304]	@ (80051fc <HAL_DMA_Abort+0x5e4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d068      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005200 <HAL_DMA_Abort+0x5e8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d063      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a49      	ldr	r2, [pc, #292]	@ (8005204 <HAL_DMA_Abort+0x5ec>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d05e      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a47      	ldr	r2, [pc, #284]	@ (8005208 <HAL_DMA_Abort+0x5f0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d059      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a46      	ldr	r2, [pc, #280]	@ (800520c <HAL_DMA_Abort+0x5f4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d054      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a44      	ldr	r2, [pc, #272]	@ (8005210 <HAL_DMA_Abort+0x5f8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d04f      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a43      	ldr	r2, [pc, #268]	@ (8005214 <HAL_DMA_Abort+0x5fc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d04a      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a41      	ldr	r2, [pc, #260]	@ (8005218 <HAL_DMA_Abort+0x600>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d045      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a40      	ldr	r2, [pc, #256]	@ (800521c <HAL_DMA_Abort+0x604>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d040      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a3e      	ldr	r2, [pc, #248]	@ (8005220 <HAL_DMA_Abort+0x608>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d03b      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a3d      	ldr	r2, [pc, #244]	@ (8005224 <HAL_DMA_Abort+0x60c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d036      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a3b      	ldr	r2, [pc, #236]	@ (8005228 <HAL_DMA_Abort+0x610>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d031      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a3a      	ldr	r2, [pc, #232]	@ (800522c <HAL_DMA_Abort+0x614>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d02c      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a38      	ldr	r2, [pc, #224]	@ (8005230 <HAL_DMA_Abort+0x618>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d027      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a37      	ldr	r2, [pc, #220]	@ (8005234 <HAL_DMA_Abort+0x61c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d022      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a35      	ldr	r2, [pc, #212]	@ (8005238 <HAL_DMA_Abort+0x620>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01d      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a34      	ldr	r2, [pc, #208]	@ (800523c <HAL_DMA_Abort+0x624>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d018      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a32      	ldr	r2, [pc, #200]	@ (8005240 <HAL_DMA_Abort+0x628>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a31      	ldr	r2, [pc, #196]	@ (8005244 <HAL_DMA_Abort+0x62c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00e      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2f      	ldr	r2, [pc, #188]	@ (8005248 <HAL_DMA_Abort+0x630>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2e      	ldr	r2, [pc, #184]	@ (800524c <HAL_DMA_Abort+0x634>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_DMA_Abort+0x58a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2c      	ldr	r2, [pc, #176]	@ (8005250 <HAL_DMA_Abort+0x638>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d101      	bne.n	80051a6 <HAL_DMA_Abort+0x58e>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <HAL_DMA_Abort+0x590>
 80051a6:	2300      	movs	r3, #0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d015      	beq.n	80051d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00c      	beq.n	80051d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40020010 	.word	0x40020010
 80051f8:	40020028 	.word	0x40020028
 80051fc:	40020040 	.word	0x40020040
 8005200:	40020058 	.word	0x40020058
 8005204:	40020070 	.word	0x40020070
 8005208:	40020088 	.word	0x40020088
 800520c:	400200a0 	.word	0x400200a0
 8005210:	400200b8 	.word	0x400200b8
 8005214:	40020410 	.word	0x40020410
 8005218:	40020428 	.word	0x40020428
 800521c:	40020440 	.word	0x40020440
 8005220:	40020458 	.word	0x40020458
 8005224:	40020470 	.word	0x40020470
 8005228:	40020488 	.word	0x40020488
 800522c:	400204a0 	.word	0x400204a0
 8005230:	400204b8 	.word	0x400204b8
 8005234:	58025408 	.word	0x58025408
 8005238:	5802541c 	.word	0x5802541c
 800523c:	58025430 	.word	0x58025430
 8005240:	58025444 	.word	0x58025444
 8005244:	58025458 	.word	0x58025458
 8005248:	5802546c 	.word	0x5802546c
 800524c:	58025480 	.word	0x58025480
 8005250:	58025494 	.word	0x58025494

08005254 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e237      	b.n	80056d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d004      	beq.n	800527c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2280      	movs	r2, #128	@ 0x80
 8005276:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e22c      	b.n	80056d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a5c      	ldr	r2, [pc, #368]	@ (80053f4 <HAL_DMA_Abort_IT+0x1a0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d04a      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a5b      	ldr	r2, [pc, #364]	@ (80053f8 <HAL_DMA_Abort_IT+0x1a4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d045      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a59      	ldr	r2, [pc, #356]	@ (80053fc <HAL_DMA_Abort_IT+0x1a8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d040      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a58      	ldr	r2, [pc, #352]	@ (8005400 <HAL_DMA_Abort_IT+0x1ac>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d03b      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a56      	ldr	r2, [pc, #344]	@ (8005404 <HAL_DMA_Abort_IT+0x1b0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d036      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a55      	ldr	r2, [pc, #340]	@ (8005408 <HAL_DMA_Abort_IT+0x1b4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d031      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a53      	ldr	r2, [pc, #332]	@ (800540c <HAL_DMA_Abort_IT+0x1b8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d02c      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a52      	ldr	r2, [pc, #328]	@ (8005410 <HAL_DMA_Abort_IT+0x1bc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d027      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a50      	ldr	r2, [pc, #320]	@ (8005414 <HAL_DMA_Abort_IT+0x1c0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d022      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a4f      	ldr	r2, [pc, #316]	@ (8005418 <HAL_DMA_Abort_IT+0x1c4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d01d      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a4d      	ldr	r2, [pc, #308]	@ (800541c <HAL_DMA_Abort_IT+0x1c8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d018      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a4c      	ldr	r2, [pc, #304]	@ (8005420 <HAL_DMA_Abort_IT+0x1cc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a4a      	ldr	r2, [pc, #296]	@ (8005424 <HAL_DMA_Abort_IT+0x1d0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00e      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a49      	ldr	r2, [pc, #292]	@ (8005428 <HAL_DMA_Abort_IT+0x1d4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d009      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a47      	ldr	r2, [pc, #284]	@ (800542c <HAL_DMA_Abort_IT+0x1d8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_DMA_Abort_IT+0xc8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a46      	ldr	r2, [pc, #280]	@ (8005430 <HAL_DMA_Abort_IT+0x1dc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d101      	bne.n	8005320 <HAL_DMA_Abort_IT+0xcc>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <HAL_DMA_Abort_IT+0xce>
 8005320:	2300      	movs	r3, #0
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 8086 	beq.w	8005434 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2204      	movs	r2, #4
 800532c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2f      	ldr	r2, [pc, #188]	@ (80053f4 <HAL_DMA_Abort_IT+0x1a0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d04a      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a2e      	ldr	r2, [pc, #184]	@ (80053f8 <HAL_DMA_Abort_IT+0x1a4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d045      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a2c      	ldr	r2, [pc, #176]	@ (80053fc <HAL_DMA_Abort_IT+0x1a8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d040      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a2b      	ldr	r2, [pc, #172]	@ (8005400 <HAL_DMA_Abort_IT+0x1ac>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d03b      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a29      	ldr	r2, [pc, #164]	@ (8005404 <HAL_DMA_Abort_IT+0x1b0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d036      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a28      	ldr	r2, [pc, #160]	@ (8005408 <HAL_DMA_Abort_IT+0x1b4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d031      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a26      	ldr	r2, [pc, #152]	@ (800540c <HAL_DMA_Abort_IT+0x1b8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02c      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a25      	ldr	r2, [pc, #148]	@ (8005410 <HAL_DMA_Abort_IT+0x1bc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d027      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a23      	ldr	r2, [pc, #140]	@ (8005414 <HAL_DMA_Abort_IT+0x1c0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d022      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a22      	ldr	r2, [pc, #136]	@ (8005418 <HAL_DMA_Abort_IT+0x1c4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d01d      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a20      	ldr	r2, [pc, #128]	@ (800541c <HAL_DMA_Abort_IT+0x1c8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005420 <HAL_DMA_Abort_IT+0x1cc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005424 <HAL_DMA_Abort_IT+0x1d0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005428 <HAL_DMA_Abort_IT+0x1d4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1a      	ldr	r2, [pc, #104]	@ (800542c <HAL_DMA_Abort_IT+0x1d8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x17c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a19      	ldr	r2, [pc, #100]	@ (8005430 <HAL_DMA_Abort_IT+0x1dc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d108      	bne.n	80053e2 <HAL_DMA_Abort_IT+0x18e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e178      	b.n	80056d4 <HAL_DMA_Abort_IT+0x480>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e16f      	b.n	80056d4 <HAL_DMA_Abort_IT+0x480>
 80053f4:	40020010 	.word	0x40020010
 80053f8:	40020028 	.word	0x40020028
 80053fc:	40020040 	.word	0x40020040
 8005400:	40020058 	.word	0x40020058
 8005404:	40020070 	.word	0x40020070
 8005408:	40020088 	.word	0x40020088
 800540c:	400200a0 	.word	0x400200a0
 8005410:	400200b8 	.word	0x400200b8
 8005414:	40020410 	.word	0x40020410
 8005418:	40020428 	.word	0x40020428
 800541c:	40020440 	.word	0x40020440
 8005420:	40020458 	.word	0x40020458
 8005424:	40020470 	.word	0x40020470
 8005428:	40020488 	.word	0x40020488
 800542c:	400204a0 	.word	0x400204a0
 8005430:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 020e 	bic.w	r2, r2, #14
 8005442:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a6c      	ldr	r2, [pc, #432]	@ (80055fc <HAL_DMA_Abort_IT+0x3a8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d04a      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a6b      	ldr	r2, [pc, #428]	@ (8005600 <HAL_DMA_Abort_IT+0x3ac>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d045      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a69      	ldr	r2, [pc, #420]	@ (8005604 <HAL_DMA_Abort_IT+0x3b0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d040      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a68      	ldr	r2, [pc, #416]	@ (8005608 <HAL_DMA_Abort_IT+0x3b4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d03b      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a66      	ldr	r2, [pc, #408]	@ (800560c <HAL_DMA_Abort_IT+0x3b8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d036      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a65      	ldr	r2, [pc, #404]	@ (8005610 <HAL_DMA_Abort_IT+0x3bc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d031      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a63      	ldr	r2, [pc, #396]	@ (8005614 <HAL_DMA_Abort_IT+0x3c0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d02c      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a62      	ldr	r2, [pc, #392]	@ (8005618 <HAL_DMA_Abort_IT+0x3c4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d027      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a60      	ldr	r2, [pc, #384]	@ (800561c <HAL_DMA_Abort_IT+0x3c8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d022      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a5f      	ldr	r2, [pc, #380]	@ (8005620 <HAL_DMA_Abort_IT+0x3cc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d01d      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005624 <HAL_DMA_Abort_IT+0x3d0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d018      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a5c      	ldr	r2, [pc, #368]	@ (8005628 <HAL_DMA_Abort_IT+0x3d4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a5a      	ldr	r2, [pc, #360]	@ (800562c <HAL_DMA_Abort_IT+0x3d8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00e      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a59      	ldr	r2, [pc, #356]	@ (8005630 <HAL_DMA_Abort_IT+0x3dc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d009      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a57      	ldr	r2, [pc, #348]	@ (8005634 <HAL_DMA_Abort_IT+0x3e0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x290>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a56      	ldr	r2, [pc, #344]	@ (8005638 <HAL_DMA_Abort_IT+0x3e4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d108      	bne.n	80054f6 <HAL_DMA_Abort_IT+0x2a2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	e007      	b.n	8005506 <HAL_DMA_Abort_IT+0x2b2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3c      	ldr	r2, [pc, #240]	@ (80055fc <HAL_DMA_Abort_IT+0x3a8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d072      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a3a      	ldr	r2, [pc, #232]	@ (8005600 <HAL_DMA_Abort_IT+0x3ac>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d06d      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a39      	ldr	r2, [pc, #228]	@ (8005604 <HAL_DMA_Abort_IT+0x3b0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d068      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a37      	ldr	r2, [pc, #220]	@ (8005608 <HAL_DMA_Abort_IT+0x3b4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d063      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a36      	ldr	r2, [pc, #216]	@ (800560c <HAL_DMA_Abort_IT+0x3b8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d05e      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a34      	ldr	r2, [pc, #208]	@ (8005610 <HAL_DMA_Abort_IT+0x3bc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d059      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a33      	ldr	r2, [pc, #204]	@ (8005614 <HAL_DMA_Abort_IT+0x3c0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d054      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a31      	ldr	r2, [pc, #196]	@ (8005618 <HAL_DMA_Abort_IT+0x3c4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d04f      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a30      	ldr	r2, [pc, #192]	@ (800561c <HAL_DMA_Abort_IT+0x3c8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d04a      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2e      	ldr	r2, [pc, #184]	@ (8005620 <HAL_DMA_Abort_IT+0x3cc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d045      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2d      	ldr	r2, [pc, #180]	@ (8005624 <HAL_DMA_Abort_IT+0x3d0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d040      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2b      	ldr	r2, [pc, #172]	@ (8005628 <HAL_DMA_Abort_IT+0x3d4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d03b      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2a      	ldr	r2, [pc, #168]	@ (800562c <HAL_DMA_Abort_IT+0x3d8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d036      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a28      	ldr	r2, [pc, #160]	@ (8005630 <HAL_DMA_Abort_IT+0x3dc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d031      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a27      	ldr	r2, [pc, #156]	@ (8005634 <HAL_DMA_Abort_IT+0x3e0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d02c      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a25      	ldr	r2, [pc, #148]	@ (8005638 <HAL_DMA_Abort_IT+0x3e4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d027      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a24      	ldr	r2, [pc, #144]	@ (800563c <HAL_DMA_Abort_IT+0x3e8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d022      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a22      	ldr	r2, [pc, #136]	@ (8005640 <HAL_DMA_Abort_IT+0x3ec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01d      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a21      	ldr	r2, [pc, #132]	@ (8005644 <HAL_DMA_Abort_IT+0x3f0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d018      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005648 <HAL_DMA_Abort_IT+0x3f4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d013      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1e      	ldr	r2, [pc, #120]	@ (800564c <HAL_DMA_Abort_IT+0x3f8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00e      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005650 <HAL_DMA_Abort_IT+0x3fc>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d009      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005654 <HAL_DMA_Abort_IT+0x400>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x3a2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a19      	ldr	r2, [pc, #100]	@ (8005658 <HAL_DMA_Abort_IT+0x404>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d132      	bne.n	800565c <HAL_DMA_Abort_IT+0x408>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e031      	b.n	800565e <HAL_DMA_Abort_IT+0x40a>
 80055fa:	bf00      	nop
 80055fc:	40020010 	.word	0x40020010
 8005600:	40020028 	.word	0x40020028
 8005604:	40020040 	.word	0x40020040
 8005608:	40020058 	.word	0x40020058
 800560c:	40020070 	.word	0x40020070
 8005610:	40020088 	.word	0x40020088
 8005614:	400200a0 	.word	0x400200a0
 8005618:	400200b8 	.word	0x400200b8
 800561c:	40020410 	.word	0x40020410
 8005620:	40020428 	.word	0x40020428
 8005624:	40020440 	.word	0x40020440
 8005628:	40020458 	.word	0x40020458
 800562c:	40020470 	.word	0x40020470
 8005630:	40020488 	.word	0x40020488
 8005634:	400204a0 	.word	0x400204a0
 8005638:	400204b8 	.word	0x400204b8
 800563c:	58025408 	.word	0x58025408
 8005640:	5802541c 	.word	0x5802541c
 8005644:	58025430 	.word	0x58025430
 8005648:	58025444 	.word	0x58025444
 800564c:	58025458 	.word	0x58025458
 8005650:	5802546c 	.word	0x5802546c
 8005654:	58025480 	.word	0x58025480
 8005658:	58025494 	.word	0x58025494
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d028      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005670:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005676:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	2201      	movs	r2, #1
 8005682:	409a      	lsls	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005690:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop

080056e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	@ 0x28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056ec:	4b67      	ldr	r3, [pc, #412]	@ (800588c <HAL_DMA_IRQHandler+0x1ac>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a67      	ldr	r2, [pc, #412]	@ (8005890 <HAL_DMA_IRQHandler+0x1b0>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	0a9b      	lsrs	r3, r3, #10
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005704:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a5f      	ldr	r2, [pc, #380]	@ (8005894 <HAL_DMA_IRQHandler+0x1b4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d04a      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a5d      	ldr	r2, [pc, #372]	@ (8005898 <HAL_DMA_IRQHandler+0x1b8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d045      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a5c      	ldr	r2, [pc, #368]	@ (800589c <HAL_DMA_IRQHandler+0x1bc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d040      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5a      	ldr	r2, [pc, #360]	@ (80058a0 <HAL_DMA_IRQHandler+0x1c0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d03b      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a59      	ldr	r2, [pc, #356]	@ (80058a4 <HAL_DMA_IRQHandler+0x1c4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d036      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a57      	ldr	r2, [pc, #348]	@ (80058a8 <HAL_DMA_IRQHandler+0x1c8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d031      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a56      	ldr	r2, [pc, #344]	@ (80058ac <HAL_DMA_IRQHandler+0x1cc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d02c      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a54      	ldr	r2, [pc, #336]	@ (80058b0 <HAL_DMA_IRQHandler+0x1d0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d027      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a53      	ldr	r2, [pc, #332]	@ (80058b4 <HAL_DMA_IRQHandler+0x1d4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a51      	ldr	r2, [pc, #324]	@ (80058b8 <HAL_DMA_IRQHandler+0x1d8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01d      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a50      	ldr	r2, [pc, #320]	@ (80058bc <HAL_DMA_IRQHandler+0x1dc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a4e      	ldr	r2, [pc, #312]	@ (80058c0 <HAL_DMA_IRQHandler+0x1e0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a4d      	ldr	r2, [pc, #308]	@ (80058c4 <HAL_DMA_IRQHandler+0x1e4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a4b      	ldr	r2, [pc, #300]	@ (80058c8 <HAL_DMA_IRQHandler+0x1e8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a4a      	ldr	r2, [pc, #296]	@ (80058cc <HAL_DMA_IRQHandler+0x1ec>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a48      	ldr	r2, [pc, #288]	@ (80058d0 <HAL_DMA_IRQHandler+0x1f0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d101      	bne.n	80057b6 <HAL_DMA_IRQHandler+0xd6>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <HAL_DMA_IRQHandler+0xd8>
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 842b 	beq.w	8006014 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2208      	movs	r2, #8
 80057c8:	409a      	lsls	r2, r3
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80a2 	beq.w	8005918 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005894 <HAL_DMA_IRQHandler+0x1b4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d04a      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005898 <HAL_DMA_IRQHandler+0x1b8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d045      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a2b      	ldr	r2, [pc, #172]	@ (800589c <HAL_DMA_IRQHandler+0x1bc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d040      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2a      	ldr	r2, [pc, #168]	@ (80058a0 <HAL_DMA_IRQHandler+0x1c0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d03b      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a28      	ldr	r2, [pc, #160]	@ (80058a4 <HAL_DMA_IRQHandler+0x1c4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d036      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a27      	ldr	r2, [pc, #156]	@ (80058a8 <HAL_DMA_IRQHandler+0x1c8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d031      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a25      	ldr	r2, [pc, #148]	@ (80058ac <HAL_DMA_IRQHandler+0x1cc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d02c      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a24      	ldr	r2, [pc, #144]	@ (80058b0 <HAL_DMA_IRQHandler+0x1d0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d027      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a22      	ldr	r2, [pc, #136]	@ (80058b4 <HAL_DMA_IRQHandler+0x1d4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d022      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a21      	ldr	r2, [pc, #132]	@ (80058b8 <HAL_DMA_IRQHandler+0x1d8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d01d      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1f      	ldr	r2, [pc, #124]	@ (80058bc <HAL_DMA_IRQHandler+0x1dc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d018      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1e      	ldr	r2, [pc, #120]	@ (80058c0 <HAL_DMA_IRQHandler+0x1e0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1c      	ldr	r2, [pc, #112]	@ (80058c4 <HAL_DMA_IRQHandler+0x1e4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00e      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1b      	ldr	r2, [pc, #108]	@ (80058c8 <HAL_DMA_IRQHandler+0x1e8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d009      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a19      	ldr	r2, [pc, #100]	@ (80058cc <HAL_DMA_IRQHandler+0x1ec>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d004      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a18      	ldr	r2, [pc, #96]	@ (80058d0 <HAL_DMA_IRQHandler+0x1f0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d12f      	bne.n	80058d4 <HAL_DMA_IRQHandler+0x1f4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	bf14      	ite	ne
 8005882:	2301      	movne	r3, #1
 8005884:	2300      	moveq	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	e02e      	b.n	80058e8 <HAL_DMA_IRQHandler+0x208>
 800588a:	bf00      	nop
 800588c:	24000214 	.word	0x24000214
 8005890:	1b4e81b5 	.word	0x1b4e81b5
 8005894:	40020010 	.word	0x40020010
 8005898:	40020028 	.word	0x40020028
 800589c:	40020040 	.word	0x40020040
 80058a0:	40020058 	.word	0x40020058
 80058a4:	40020070 	.word	0x40020070
 80058a8:	40020088 	.word	0x40020088
 80058ac:	400200a0 	.word	0x400200a0
 80058b0:	400200b8 	.word	0x400200b8
 80058b4:	40020410 	.word	0x40020410
 80058b8:	40020428 	.word	0x40020428
 80058bc:	40020440 	.word	0x40020440
 80058c0:	40020458 	.word	0x40020458
 80058c4:	40020470 	.word	0x40020470
 80058c8:	40020488 	.word	0x40020488
 80058cc:	400204a0 	.word	0x400204a0
 80058d0:	400204b8 	.word	0x400204b8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	bf14      	ite	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	2300      	moveq	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d015      	beq.n	8005918 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0204 	bic.w	r2, r2, #4
 80058fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	2208      	movs	r2, #8
 8005906:	409a      	lsls	r2, r3
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005910:	f043 0201 	orr.w	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	fa22 f303 	lsr.w	r3, r2, r3
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d06e      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a69      	ldr	r2, [pc, #420]	@ (8005ad8 <HAL_DMA_IRQHandler+0x3f8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d04a      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a67      	ldr	r2, [pc, #412]	@ (8005adc <HAL_DMA_IRQHandler+0x3fc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d045      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a66      	ldr	r2, [pc, #408]	@ (8005ae0 <HAL_DMA_IRQHandler+0x400>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d040      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a64      	ldr	r2, [pc, #400]	@ (8005ae4 <HAL_DMA_IRQHandler+0x404>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d03b      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a63      	ldr	r2, [pc, #396]	@ (8005ae8 <HAL_DMA_IRQHandler+0x408>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d036      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a61      	ldr	r2, [pc, #388]	@ (8005aec <HAL_DMA_IRQHandler+0x40c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d031      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a60      	ldr	r2, [pc, #384]	@ (8005af0 <HAL_DMA_IRQHandler+0x410>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d02c      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a5e      	ldr	r2, [pc, #376]	@ (8005af4 <HAL_DMA_IRQHandler+0x414>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d027      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a5d      	ldr	r2, [pc, #372]	@ (8005af8 <HAL_DMA_IRQHandler+0x418>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d022      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a5b      	ldr	r2, [pc, #364]	@ (8005afc <HAL_DMA_IRQHandler+0x41c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01d      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a5a      	ldr	r2, [pc, #360]	@ (8005b00 <HAL_DMA_IRQHandler+0x420>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a58      	ldr	r2, [pc, #352]	@ (8005b04 <HAL_DMA_IRQHandler+0x424>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a57      	ldr	r2, [pc, #348]	@ (8005b08 <HAL_DMA_IRQHandler+0x428>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a55      	ldr	r2, [pc, #340]	@ (8005b0c <HAL_DMA_IRQHandler+0x42c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a54      	ldr	r2, [pc, #336]	@ (8005b10 <HAL_DMA_IRQHandler+0x430>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a52      	ldr	r2, [pc, #328]	@ (8005b14 <HAL_DMA_IRQHandler+0x434>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d10a      	bne.n	80059e4 <HAL_DMA_IRQHandler+0x304>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	e003      	b.n	80059ec <HAL_DMA_IRQHandler+0x30c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00d      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	2201      	movs	r2, #1
 80059fa:	409a      	lsls	r2, r3
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a04:	f043 0202 	orr.w	r2, r3, #2
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	2204      	movs	r2, #4
 8005a16:	409a      	lsls	r2, r3
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 808f 	beq.w	8005b40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad8 <HAL_DMA_IRQHandler+0x3f8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d04a      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2a      	ldr	r2, [pc, #168]	@ (8005adc <HAL_DMA_IRQHandler+0x3fc>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d045      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a29      	ldr	r2, [pc, #164]	@ (8005ae0 <HAL_DMA_IRQHandler+0x400>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d040      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a27      	ldr	r2, [pc, #156]	@ (8005ae4 <HAL_DMA_IRQHandler+0x404>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d03b      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a26      	ldr	r2, [pc, #152]	@ (8005ae8 <HAL_DMA_IRQHandler+0x408>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d036      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a24      	ldr	r2, [pc, #144]	@ (8005aec <HAL_DMA_IRQHandler+0x40c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d031      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a23      	ldr	r2, [pc, #140]	@ (8005af0 <HAL_DMA_IRQHandler+0x410>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d02c      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a21      	ldr	r2, [pc, #132]	@ (8005af4 <HAL_DMA_IRQHandler+0x414>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d027      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a20      	ldr	r2, [pc, #128]	@ (8005af8 <HAL_DMA_IRQHandler+0x418>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d022      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1e      	ldr	r2, [pc, #120]	@ (8005afc <HAL_DMA_IRQHandler+0x41c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01d      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005b00 <HAL_DMA_IRQHandler+0x420>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d018      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	@ (8005b04 <HAL_DMA_IRQHandler+0x424>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d013      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005b08 <HAL_DMA_IRQHandler+0x428>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	@ (8005b0c <HAL_DMA_IRQHandler+0x42c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d009      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a17      	ldr	r2, [pc, #92]	@ (8005b10 <HAL_DMA_IRQHandler+0x430>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d004      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a15      	ldr	r2, [pc, #84]	@ (8005b14 <HAL_DMA_IRQHandler+0x434>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d12a      	bne.n	8005b18 <HAL_DMA_IRQHandler+0x438>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e023      	b.n	8005b20 <HAL_DMA_IRQHandler+0x440>
 8005ad8:	40020010 	.word	0x40020010
 8005adc:	40020028 	.word	0x40020028
 8005ae0:	40020040 	.word	0x40020040
 8005ae4:	40020058 	.word	0x40020058
 8005ae8:	40020070 	.word	0x40020070
 8005aec:	40020088 	.word	0x40020088
 8005af0:	400200a0 	.word	0x400200a0
 8005af4:	400200b8 	.word	0x400200b8
 8005af8:	40020410 	.word	0x40020410
 8005afc:	40020428 	.word	0x40020428
 8005b00:	40020440 	.word	0x40020440
 8005b04:	40020458 	.word	0x40020458
 8005b08:	40020470 	.word	0x40020470
 8005b0c:	40020488 	.word	0x40020488
 8005b10:	400204a0 	.word	0x400204a0
 8005b14:	400204b8 	.word	0x400204b8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b38:	f043 0204 	orr.w	r2, r3, #4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b44:	f003 031f 	and.w	r3, r3, #31
 8005b48:	2210      	movs	r2, #16
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80a6 	beq.w	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a85      	ldr	r2, [pc, #532]	@ (8005d70 <HAL_DMA_IRQHandler+0x690>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d04a      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a83      	ldr	r2, [pc, #524]	@ (8005d74 <HAL_DMA_IRQHandler+0x694>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d045      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a82      	ldr	r2, [pc, #520]	@ (8005d78 <HAL_DMA_IRQHandler+0x698>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d040      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a80      	ldr	r2, [pc, #512]	@ (8005d7c <HAL_DMA_IRQHandler+0x69c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d03b      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a7f      	ldr	r2, [pc, #508]	@ (8005d80 <HAL_DMA_IRQHandler+0x6a0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d036      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a7d      	ldr	r2, [pc, #500]	@ (8005d84 <HAL_DMA_IRQHandler+0x6a4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d031      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a7c      	ldr	r2, [pc, #496]	@ (8005d88 <HAL_DMA_IRQHandler+0x6a8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d02c      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a7a      	ldr	r2, [pc, #488]	@ (8005d8c <HAL_DMA_IRQHandler+0x6ac>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d027      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a79      	ldr	r2, [pc, #484]	@ (8005d90 <HAL_DMA_IRQHandler+0x6b0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d022      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a77      	ldr	r2, [pc, #476]	@ (8005d94 <HAL_DMA_IRQHandler+0x6b4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01d      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a76      	ldr	r2, [pc, #472]	@ (8005d98 <HAL_DMA_IRQHandler+0x6b8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d018      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a74      	ldr	r2, [pc, #464]	@ (8005d9c <HAL_DMA_IRQHandler+0x6bc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a73      	ldr	r2, [pc, #460]	@ (8005da0 <HAL_DMA_IRQHandler+0x6c0>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00e      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a71      	ldr	r2, [pc, #452]	@ (8005da4 <HAL_DMA_IRQHandler+0x6c4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d009      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a70      	ldr	r2, [pc, #448]	@ (8005da8 <HAL_DMA_IRQHandler+0x6c8>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d004      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8005dac <HAL_DMA_IRQHandler+0x6cc>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d10a      	bne.n	8005c0c <HAL_DMA_IRQHandler+0x52c>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf14      	ite	ne
 8005c04:	2301      	movne	r3, #1
 8005c06:	2300      	moveq	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	e009      	b.n	8005c20 <HAL_DMA_IRQHandler+0x540>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bf14      	ite	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	2300      	moveq	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d03e      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2210      	movs	r2, #16
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d018      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d108      	bne.n	8005c62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d024      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	4798      	blx	r3
 8005c60:	e01f      	b.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01b      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
 8005c72:	e016      	b.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d107      	bne.n	8005c92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0208 	bic.w	r2, r2, #8
 8005c90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2220      	movs	r2, #32
 8005cac:	409a      	lsls	r2, r3
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 8110 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005d70 <HAL_DMA_IRQHandler+0x690>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d04a      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a2b      	ldr	r2, [pc, #172]	@ (8005d74 <HAL_DMA_IRQHandler+0x694>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d045      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a29      	ldr	r2, [pc, #164]	@ (8005d78 <HAL_DMA_IRQHandler+0x698>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d040      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a28      	ldr	r2, [pc, #160]	@ (8005d7c <HAL_DMA_IRQHandler+0x69c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d03b      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	@ (8005d80 <HAL_DMA_IRQHandler+0x6a0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d036      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a25      	ldr	r2, [pc, #148]	@ (8005d84 <HAL_DMA_IRQHandler+0x6a4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d031      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a23      	ldr	r2, [pc, #140]	@ (8005d88 <HAL_DMA_IRQHandler+0x6a8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02c      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a22      	ldr	r2, [pc, #136]	@ (8005d8c <HAL_DMA_IRQHandler+0x6ac>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d027      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a20      	ldr	r2, [pc, #128]	@ (8005d90 <HAL_DMA_IRQHandler+0x6b0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d022      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1f      	ldr	r2, [pc, #124]	@ (8005d94 <HAL_DMA_IRQHandler+0x6b4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d01d      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1d      	ldr	r2, [pc, #116]	@ (8005d98 <HAL_DMA_IRQHandler+0x6b8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d018      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d9c <HAL_DMA_IRQHandler+0x6bc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d013      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1a      	ldr	r2, [pc, #104]	@ (8005da0 <HAL_DMA_IRQHandler+0x6c0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00e      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a19      	ldr	r2, [pc, #100]	@ (8005da4 <HAL_DMA_IRQHandler+0x6c4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d009      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a17      	ldr	r2, [pc, #92]	@ (8005da8 <HAL_DMA_IRQHandler+0x6c8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a16      	ldr	r2, [pc, #88]	@ (8005dac <HAL_DMA_IRQHandler+0x6cc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d12b      	bne.n	8005db0 <HAL_DMA_IRQHandler+0x6d0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0310 	and.w	r3, r3, #16
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bf14      	ite	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	2300      	moveq	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	e02a      	b.n	8005dc4 <HAL_DMA_IRQHandler+0x6e4>
 8005d6e:	bf00      	nop
 8005d70:	40020010 	.word	0x40020010
 8005d74:	40020028 	.word	0x40020028
 8005d78:	40020040 	.word	0x40020040
 8005d7c:	40020058 	.word	0x40020058
 8005d80:	40020070 	.word	0x40020070
 8005d84:	40020088 	.word	0x40020088
 8005d88:	400200a0 	.word	0x400200a0
 8005d8c:	400200b8 	.word	0x400200b8
 8005d90:	40020410 	.word	0x40020410
 8005d94:	40020428 	.word	0x40020428
 8005d98:	40020440 	.word	0x40020440
 8005d9c:	40020458 	.word	0x40020458
 8005da0:	40020470 	.word	0x40020470
 8005da4:	40020488 	.word	0x40020488
 8005da8:	400204a0 	.word	0x400204a0
 8005dac:	400204b8 	.word	0x400204b8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bf14      	ite	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	2300      	moveq	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8087 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	409a      	lsls	r2, r3
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d139      	bne.n	8005e5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0216 	bic.w	r2, r2, #22
 8005df4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <HAL_DMA_IRQHandler+0x736>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0208 	bic.w	r2, r2, #8
 8005e24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	223f      	movs	r2, #63	@ 0x3f
 8005e30:	409a      	lsls	r2, r3
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 834a 	beq.w	80064e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
          }
          return;
 8005e58:	e344      	b.n	80064e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d018      	beq.n	8005e9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d108      	bne.n	8005e88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d02c      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
 8005e86:	e027      	b.n	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d023      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
 8005e98:	e01e      	b.n	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10f      	bne.n	8005ec8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0210 	bic.w	r2, r2, #16
 8005eb6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8306 	beq.w	80064ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8088 	beq.w	8006000 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a7a      	ldr	r2, [pc, #488]	@ (80060e8 <HAL_DMA_IRQHandler+0xa08>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d04a      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a79      	ldr	r2, [pc, #484]	@ (80060ec <HAL_DMA_IRQHandler+0xa0c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d045      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a77      	ldr	r2, [pc, #476]	@ (80060f0 <HAL_DMA_IRQHandler+0xa10>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d040      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a76      	ldr	r2, [pc, #472]	@ (80060f4 <HAL_DMA_IRQHandler+0xa14>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d03b      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a74      	ldr	r2, [pc, #464]	@ (80060f8 <HAL_DMA_IRQHandler+0xa18>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d036      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a73      	ldr	r2, [pc, #460]	@ (80060fc <HAL_DMA_IRQHandler+0xa1c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d031      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a71      	ldr	r2, [pc, #452]	@ (8006100 <HAL_DMA_IRQHandler+0xa20>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d02c      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a70      	ldr	r2, [pc, #448]	@ (8006104 <HAL_DMA_IRQHandler+0xa24>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d027      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a6e      	ldr	r2, [pc, #440]	@ (8006108 <HAL_DMA_IRQHandler+0xa28>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d022      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a6d      	ldr	r2, [pc, #436]	@ (800610c <HAL_DMA_IRQHandler+0xa2c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d01d      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a6b      	ldr	r2, [pc, #428]	@ (8006110 <HAL_DMA_IRQHandler+0xa30>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d018      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a6a      	ldr	r2, [pc, #424]	@ (8006114 <HAL_DMA_IRQHandler+0xa34>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a68      	ldr	r2, [pc, #416]	@ (8006118 <HAL_DMA_IRQHandler+0xa38>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00e      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a67      	ldr	r2, [pc, #412]	@ (800611c <HAL_DMA_IRQHandler+0xa3c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d009      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a65      	ldr	r2, [pc, #404]	@ (8006120 <HAL_DMA_IRQHandler+0xa40>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d004      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a64      	ldr	r2, [pc, #400]	@ (8006124 <HAL_DMA_IRQHandler+0xa44>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <HAL_DMA_IRQHandler+0x8ca>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e007      	b.n	8005fba <HAL_DMA_IRQHandler+0x8da>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0201 	bic.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d307      	bcc.n	8005fd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f2      	bne.n	8005fba <HAL_DMA_IRQHandler+0x8da>
 8005fd4:	e000      	b.n	8005fd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005fd6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d004      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2203      	movs	r2, #3
 8005fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005fee:	e003      	b.n	8005ff8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8272 	beq.w	80064ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
 8006012:	e26c      	b.n	80064ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a43      	ldr	r2, [pc, #268]	@ (8006128 <HAL_DMA_IRQHandler+0xa48>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d022      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a42      	ldr	r2, [pc, #264]	@ (800612c <HAL_DMA_IRQHandler+0xa4c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d01d      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a40      	ldr	r2, [pc, #256]	@ (8006130 <HAL_DMA_IRQHandler+0xa50>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d018      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a3f      	ldr	r2, [pc, #252]	@ (8006134 <HAL_DMA_IRQHandler+0xa54>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a3d      	ldr	r2, [pc, #244]	@ (8006138 <HAL_DMA_IRQHandler+0xa58>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a3c      	ldr	r2, [pc, #240]	@ (800613c <HAL_DMA_IRQHandler+0xa5c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a3a      	ldr	r2, [pc, #232]	@ (8006140 <HAL_DMA_IRQHandler+0xa60>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a39      	ldr	r2, [pc, #228]	@ (8006144 <HAL_DMA_IRQHandler+0xa64>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d101      	bne.n	8006068 <HAL_DMA_IRQHandler+0x988>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <HAL_DMA_IRQHandler+0x98a>
 8006068:	2300      	movs	r3, #0
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 823f 	beq.w	80064ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2204      	movs	r2, #4
 8006082:	409a      	lsls	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4013      	ands	r3, r2
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80cd 	beq.w	8006228 <HAL_DMA_IRQHandler+0xb48>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80c7 	beq.w	8006228 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800609e:	f003 031f 	and.w	r3, r3, #31
 80060a2:	2204      	movs	r2, #4
 80060a4:	409a      	lsls	r2, r3
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d049      	beq.n	8006148 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 8210 	beq.w	80064e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060d0:	e20a      	b.n	80064e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 8206 	beq.w	80064e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060e4:	e200      	b.n	80064e8 <HAL_DMA_IRQHandler+0xe08>
 80060e6:	bf00      	nop
 80060e8:	40020010 	.word	0x40020010
 80060ec:	40020028 	.word	0x40020028
 80060f0:	40020040 	.word	0x40020040
 80060f4:	40020058 	.word	0x40020058
 80060f8:	40020070 	.word	0x40020070
 80060fc:	40020088 	.word	0x40020088
 8006100:	400200a0 	.word	0x400200a0
 8006104:	400200b8 	.word	0x400200b8
 8006108:	40020410 	.word	0x40020410
 800610c:	40020428 	.word	0x40020428
 8006110:	40020440 	.word	0x40020440
 8006114:	40020458 	.word	0x40020458
 8006118:	40020470 	.word	0x40020470
 800611c:	40020488 	.word	0x40020488
 8006120:	400204a0 	.word	0x400204a0
 8006124:	400204b8 	.word	0x400204b8
 8006128:	58025408 	.word	0x58025408
 800612c:	5802541c 	.word	0x5802541c
 8006130:	58025430 	.word	0x58025430
 8006134:	58025444 	.word	0x58025444
 8006138:	58025458 	.word	0x58025458
 800613c:	5802546c 	.word	0x5802546c
 8006140:	58025480 	.word	0x58025480
 8006144:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d160      	bne.n	8006214 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a7f      	ldr	r2, [pc, #508]	@ (8006354 <HAL_DMA_IRQHandler+0xc74>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d04a      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a7d      	ldr	r2, [pc, #500]	@ (8006358 <HAL_DMA_IRQHandler+0xc78>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d045      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a7c      	ldr	r2, [pc, #496]	@ (800635c <HAL_DMA_IRQHandler+0xc7c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d040      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a7a      	ldr	r2, [pc, #488]	@ (8006360 <HAL_DMA_IRQHandler+0xc80>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d03b      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a79      	ldr	r2, [pc, #484]	@ (8006364 <HAL_DMA_IRQHandler+0xc84>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d036      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a77      	ldr	r2, [pc, #476]	@ (8006368 <HAL_DMA_IRQHandler+0xc88>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d031      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a76      	ldr	r2, [pc, #472]	@ (800636c <HAL_DMA_IRQHandler+0xc8c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d02c      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a74      	ldr	r2, [pc, #464]	@ (8006370 <HAL_DMA_IRQHandler+0xc90>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d027      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a73      	ldr	r2, [pc, #460]	@ (8006374 <HAL_DMA_IRQHandler+0xc94>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d022      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a71      	ldr	r2, [pc, #452]	@ (8006378 <HAL_DMA_IRQHandler+0xc98>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01d      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a70      	ldr	r2, [pc, #448]	@ (800637c <HAL_DMA_IRQHandler+0xc9c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d018      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006380 <HAL_DMA_IRQHandler+0xca0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006384 <HAL_DMA_IRQHandler+0xca4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00e      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006388 <HAL_DMA_IRQHandler+0xca8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d009      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a6a      	ldr	r2, [pc, #424]	@ (800638c <HAL_DMA_IRQHandler+0xcac>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d004      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a68      	ldr	r2, [pc, #416]	@ (8006390 <HAL_DMA_IRQHandler+0xcb0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d108      	bne.n	8006204 <HAL_DMA_IRQHandler+0xb24>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0208 	bic.w	r2, r2, #8
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	e007      	b.n	8006214 <HAL_DMA_IRQHandler+0xb34>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0204 	bic.w	r2, r2, #4
 8006212:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 8165 	beq.w	80064e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006226:	e15f      	b.n	80064e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800622c:	f003 031f 	and.w	r3, r3, #31
 8006230:	2202      	movs	r2, #2
 8006232:	409a      	lsls	r2, r3
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80c5 	beq.w	80063c8 <HAL_DMA_IRQHandler+0xce8>
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80bf 	beq.w	80063c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2202      	movs	r2, #2
 8006254:	409a      	lsls	r2, r3
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d018      	beq.n	8006296 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 813a 	beq.w	80064ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006280:	e134      	b.n	80064ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 8130 	beq.w	80064ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006294:	e12a      	b.n	80064ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	f040 8089 	bne.w	80063b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006354 <HAL_DMA_IRQHandler+0xc74>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d04a      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a29      	ldr	r2, [pc, #164]	@ (8006358 <HAL_DMA_IRQHandler+0xc78>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d045      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a28      	ldr	r2, [pc, #160]	@ (800635c <HAL_DMA_IRQHandler+0xc7c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d040      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a26      	ldr	r2, [pc, #152]	@ (8006360 <HAL_DMA_IRQHandler+0xc80>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d03b      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a25      	ldr	r2, [pc, #148]	@ (8006364 <HAL_DMA_IRQHandler+0xc84>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d036      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a23      	ldr	r2, [pc, #140]	@ (8006368 <HAL_DMA_IRQHandler+0xc88>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d031      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a22      	ldr	r2, [pc, #136]	@ (800636c <HAL_DMA_IRQHandler+0xc8c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d02c      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a20      	ldr	r2, [pc, #128]	@ (8006370 <HAL_DMA_IRQHandler+0xc90>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d027      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006374 <HAL_DMA_IRQHandler+0xc94>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d022      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1d      	ldr	r2, [pc, #116]	@ (8006378 <HAL_DMA_IRQHandler+0xc98>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1c      	ldr	r2, [pc, #112]	@ (800637c <HAL_DMA_IRQHandler+0xc9c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1a      	ldr	r2, [pc, #104]	@ (8006380 <HAL_DMA_IRQHandler+0xca0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a19      	ldr	r2, [pc, #100]	@ (8006384 <HAL_DMA_IRQHandler+0xca4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a17      	ldr	r2, [pc, #92]	@ (8006388 <HAL_DMA_IRQHandler+0xca8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a16      	ldr	r2, [pc, #88]	@ (800638c <HAL_DMA_IRQHandler+0xcac>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a14      	ldr	r2, [pc, #80]	@ (8006390 <HAL_DMA_IRQHandler+0xcb0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d128      	bne.n	8006394 <HAL_DMA_IRQHandler+0xcb4>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0214 	bic.w	r2, r2, #20
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	e027      	b.n	80063a4 <HAL_DMA_IRQHandler+0xcc4>
 8006354:	40020010 	.word	0x40020010
 8006358:	40020028 	.word	0x40020028
 800635c:	40020040 	.word	0x40020040
 8006360:	40020058 	.word	0x40020058
 8006364:	40020070 	.word	0x40020070
 8006368:	40020088 	.word	0x40020088
 800636c:	400200a0 	.word	0x400200a0
 8006370:	400200b8 	.word	0x400200b8
 8006374:	40020410 	.word	0x40020410
 8006378:	40020428 	.word	0x40020428
 800637c:	40020440 	.word	0x40020440
 8006380:	40020458 	.word	0x40020458
 8006384:	40020470 	.word	0x40020470
 8006388:	40020488 	.word	0x40020488
 800638c:	400204a0 	.word	0x400204a0
 8006390:	400204b8 	.word	0x400204b8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 020a 	bic.w	r2, r2, #10
 80063a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8097 	beq.w	80064ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063c6:	e091      	b.n	80064ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2208      	movs	r2, #8
 80063d2:	409a      	lsls	r2, r3
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8088 	beq.w	80064ee <HAL_DMA_IRQHandler+0xe0e>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 8082 	beq.w	80064ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a41      	ldr	r2, [pc, #260]	@ (80064f4 <HAL_DMA_IRQHandler+0xe14>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d04a      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a3f      	ldr	r2, [pc, #252]	@ (80064f8 <HAL_DMA_IRQHandler+0xe18>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d045      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a3e      	ldr	r2, [pc, #248]	@ (80064fc <HAL_DMA_IRQHandler+0xe1c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d040      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a3c      	ldr	r2, [pc, #240]	@ (8006500 <HAL_DMA_IRQHandler+0xe20>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d03b      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a3b      	ldr	r2, [pc, #236]	@ (8006504 <HAL_DMA_IRQHandler+0xe24>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d036      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a39      	ldr	r2, [pc, #228]	@ (8006508 <HAL_DMA_IRQHandler+0xe28>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d031      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a38      	ldr	r2, [pc, #224]	@ (800650c <HAL_DMA_IRQHandler+0xe2c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d02c      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a36      	ldr	r2, [pc, #216]	@ (8006510 <HAL_DMA_IRQHandler+0xe30>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d027      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a35      	ldr	r2, [pc, #212]	@ (8006514 <HAL_DMA_IRQHandler+0xe34>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d022      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a33      	ldr	r2, [pc, #204]	@ (8006518 <HAL_DMA_IRQHandler+0xe38>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01d      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a32      	ldr	r2, [pc, #200]	@ (800651c <HAL_DMA_IRQHandler+0xe3c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d018      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a30      	ldr	r2, [pc, #192]	@ (8006520 <HAL_DMA_IRQHandler+0xe40>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d013      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a2f      	ldr	r2, [pc, #188]	@ (8006524 <HAL_DMA_IRQHandler+0xe44>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00e      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a2d      	ldr	r2, [pc, #180]	@ (8006528 <HAL_DMA_IRQHandler+0xe48>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d009      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2c      	ldr	r2, [pc, #176]	@ (800652c <HAL_DMA_IRQHandler+0xe4c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d004      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a2a      	ldr	r2, [pc, #168]	@ (8006530 <HAL_DMA_IRQHandler+0xe50>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d108      	bne.n	800649c <HAL_DMA_IRQHandler+0xdbc>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 021c 	bic.w	r2, r2, #28
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	e007      	b.n	80064ac <HAL_DMA_IRQHandler+0xdcc>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 020e 	bic.w	r2, r2, #14
 80064aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	2201      	movs	r2, #1
 80064b6:	409a      	lsls	r2, r3
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	4798      	blx	r3
 80064e2:	e004      	b.n	80064ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80064e4:	bf00      	nop
 80064e6:	e002      	b.n	80064ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064e8:	bf00      	nop
 80064ea:	e000      	b.n	80064ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80064ee:	3728      	adds	r7, #40	@ 0x28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40020010 	.word	0x40020010
 80064f8:	40020028 	.word	0x40020028
 80064fc:	40020040 	.word	0x40020040
 8006500:	40020058 	.word	0x40020058
 8006504:	40020070 	.word	0x40020070
 8006508:	40020088 	.word	0x40020088
 800650c:	400200a0 	.word	0x400200a0
 8006510:	400200b8 	.word	0x400200b8
 8006514:	40020410 	.word	0x40020410
 8006518:	40020428 	.word	0x40020428
 800651c:	40020440 	.word	0x40020440
 8006520:	40020458 	.word	0x40020458
 8006524:	40020470 	.word	0x40020470
 8006528:	40020488 	.word	0x40020488
 800652c:	400204a0 	.word	0x400204a0
 8006530:	400204b8 	.word	0x400204b8

08006534 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006542:	b2db      	uxtb	r3, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006580:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a7f      	ldr	r2, [pc, #508]	@ (8006784 <DMA_SetConfig+0x21c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d072      	beq.n	8006672 <DMA_SetConfig+0x10a>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a7d      	ldr	r2, [pc, #500]	@ (8006788 <DMA_SetConfig+0x220>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d06d      	beq.n	8006672 <DMA_SetConfig+0x10a>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a7c      	ldr	r2, [pc, #496]	@ (800678c <DMA_SetConfig+0x224>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d068      	beq.n	8006672 <DMA_SetConfig+0x10a>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a7a      	ldr	r2, [pc, #488]	@ (8006790 <DMA_SetConfig+0x228>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d063      	beq.n	8006672 <DMA_SetConfig+0x10a>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a79      	ldr	r2, [pc, #484]	@ (8006794 <DMA_SetConfig+0x22c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d05e      	beq.n	8006672 <DMA_SetConfig+0x10a>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a77      	ldr	r2, [pc, #476]	@ (8006798 <DMA_SetConfig+0x230>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d059      	beq.n	8006672 <DMA_SetConfig+0x10a>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a76      	ldr	r2, [pc, #472]	@ (800679c <DMA_SetConfig+0x234>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d054      	beq.n	8006672 <DMA_SetConfig+0x10a>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a74      	ldr	r2, [pc, #464]	@ (80067a0 <DMA_SetConfig+0x238>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d04f      	beq.n	8006672 <DMA_SetConfig+0x10a>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a73      	ldr	r2, [pc, #460]	@ (80067a4 <DMA_SetConfig+0x23c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d04a      	beq.n	8006672 <DMA_SetConfig+0x10a>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a71      	ldr	r2, [pc, #452]	@ (80067a8 <DMA_SetConfig+0x240>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d045      	beq.n	8006672 <DMA_SetConfig+0x10a>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a70      	ldr	r2, [pc, #448]	@ (80067ac <DMA_SetConfig+0x244>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d040      	beq.n	8006672 <DMA_SetConfig+0x10a>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a6e      	ldr	r2, [pc, #440]	@ (80067b0 <DMA_SetConfig+0x248>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d03b      	beq.n	8006672 <DMA_SetConfig+0x10a>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a6d      	ldr	r2, [pc, #436]	@ (80067b4 <DMA_SetConfig+0x24c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d036      	beq.n	8006672 <DMA_SetConfig+0x10a>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6b      	ldr	r2, [pc, #428]	@ (80067b8 <DMA_SetConfig+0x250>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d031      	beq.n	8006672 <DMA_SetConfig+0x10a>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a6a      	ldr	r2, [pc, #424]	@ (80067bc <DMA_SetConfig+0x254>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d02c      	beq.n	8006672 <DMA_SetConfig+0x10a>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a68      	ldr	r2, [pc, #416]	@ (80067c0 <DMA_SetConfig+0x258>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d027      	beq.n	8006672 <DMA_SetConfig+0x10a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a67      	ldr	r2, [pc, #412]	@ (80067c4 <DMA_SetConfig+0x25c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d022      	beq.n	8006672 <DMA_SetConfig+0x10a>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a65      	ldr	r2, [pc, #404]	@ (80067c8 <DMA_SetConfig+0x260>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d01d      	beq.n	8006672 <DMA_SetConfig+0x10a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a64      	ldr	r2, [pc, #400]	@ (80067cc <DMA_SetConfig+0x264>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d018      	beq.n	8006672 <DMA_SetConfig+0x10a>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a62      	ldr	r2, [pc, #392]	@ (80067d0 <DMA_SetConfig+0x268>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <DMA_SetConfig+0x10a>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a61      	ldr	r2, [pc, #388]	@ (80067d4 <DMA_SetConfig+0x26c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00e      	beq.n	8006672 <DMA_SetConfig+0x10a>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a5f      	ldr	r2, [pc, #380]	@ (80067d8 <DMA_SetConfig+0x270>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d009      	beq.n	8006672 <DMA_SetConfig+0x10a>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a5e      	ldr	r2, [pc, #376]	@ (80067dc <DMA_SetConfig+0x274>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d004      	beq.n	8006672 <DMA_SetConfig+0x10a>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a5c      	ldr	r2, [pc, #368]	@ (80067e0 <DMA_SetConfig+0x278>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d101      	bne.n	8006676 <DMA_SetConfig+0x10e>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <DMA_SetConfig+0x110>
 8006676:	2300      	movs	r3, #0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00d      	beq.n	8006698 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006684:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d004      	beq.n	8006698 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006696:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a39      	ldr	r2, [pc, #228]	@ (8006784 <DMA_SetConfig+0x21c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d04a      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a38      	ldr	r2, [pc, #224]	@ (8006788 <DMA_SetConfig+0x220>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d045      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a36      	ldr	r2, [pc, #216]	@ (800678c <DMA_SetConfig+0x224>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d040      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a35      	ldr	r2, [pc, #212]	@ (8006790 <DMA_SetConfig+0x228>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d03b      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a33      	ldr	r2, [pc, #204]	@ (8006794 <DMA_SetConfig+0x22c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d036      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a32      	ldr	r2, [pc, #200]	@ (8006798 <DMA_SetConfig+0x230>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d031      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a30      	ldr	r2, [pc, #192]	@ (800679c <DMA_SetConfig+0x234>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d02c      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2f      	ldr	r2, [pc, #188]	@ (80067a0 <DMA_SetConfig+0x238>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d027      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2d      	ldr	r2, [pc, #180]	@ (80067a4 <DMA_SetConfig+0x23c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d022      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2c      	ldr	r2, [pc, #176]	@ (80067a8 <DMA_SetConfig+0x240>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d01d      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a2a      	ldr	r2, [pc, #168]	@ (80067ac <DMA_SetConfig+0x244>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d018      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a29      	ldr	r2, [pc, #164]	@ (80067b0 <DMA_SetConfig+0x248>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d013      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a27      	ldr	r2, [pc, #156]	@ (80067b4 <DMA_SetConfig+0x24c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00e      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a26      	ldr	r2, [pc, #152]	@ (80067b8 <DMA_SetConfig+0x250>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d009      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a24      	ldr	r2, [pc, #144]	@ (80067bc <DMA_SetConfig+0x254>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <DMA_SetConfig+0x1d0>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a23      	ldr	r2, [pc, #140]	@ (80067c0 <DMA_SetConfig+0x258>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d101      	bne.n	800673c <DMA_SetConfig+0x1d4>
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <DMA_SetConfig+0x1d6>
 800673c:	2300      	movs	r3, #0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d059      	beq.n	80067f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006746:	f003 031f 	and.w	r3, r3, #31
 800674a:	223f      	movs	r2, #63	@ 0x3f
 800674c:	409a      	lsls	r2, r3
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006760:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b40      	cmp	r3, #64	@ 0x40
 8006770:	d138      	bne.n	80067e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006782:	e086      	b.n	8006892 <DMA_SetConfig+0x32a>
 8006784:	40020010 	.word	0x40020010
 8006788:	40020028 	.word	0x40020028
 800678c:	40020040 	.word	0x40020040
 8006790:	40020058 	.word	0x40020058
 8006794:	40020070 	.word	0x40020070
 8006798:	40020088 	.word	0x40020088
 800679c:	400200a0 	.word	0x400200a0
 80067a0:	400200b8 	.word	0x400200b8
 80067a4:	40020410 	.word	0x40020410
 80067a8:	40020428 	.word	0x40020428
 80067ac:	40020440 	.word	0x40020440
 80067b0:	40020458 	.word	0x40020458
 80067b4:	40020470 	.word	0x40020470
 80067b8:	40020488 	.word	0x40020488
 80067bc:	400204a0 	.word	0x400204a0
 80067c0:	400204b8 	.word	0x400204b8
 80067c4:	58025408 	.word	0x58025408
 80067c8:	5802541c 	.word	0x5802541c
 80067cc:	58025430 	.word	0x58025430
 80067d0:	58025444 	.word	0x58025444
 80067d4:	58025458 	.word	0x58025458
 80067d8:	5802546c 	.word	0x5802546c
 80067dc:	58025480 	.word	0x58025480
 80067e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	60da      	str	r2, [r3, #12]
}
 80067f4:	e04d      	b.n	8006892 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a29      	ldr	r2, [pc, #164]	@ (80068a0 <DMA_SetConfig+0x338>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d022      	beq.n	8006846 <DMA_SetConfig+0x2de>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a27      	ldr	r2, [pc, #156]	@ (80068a4 <DMA_SetConfig+0x33c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01d      	beq.n	8006846 <DMA_SetConfig+0x2de>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a26      	ldr	r2, [pc, #152]	@ (80068a8 <DMA_SetConfig+0x340>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d018      	beq.n	8006846 <DMA_SetConfig+0x2de>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a24      	ldr	r2, [pc, #144]	@ (80068ac <DMA_SetConfig+0x344>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <DMA_SetConfig+0x2de>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a23      	ldr	r2, [pc, #140]	@ (80068b0 <DMA_SetConfig+0x348>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <DMA_SetConfig+0x2de>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a21      	ldr	r2, [pc, #132]	@ (80068b4 <DMA_SetConfig+0x34c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <DMA_SetConfig+0x2de>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a20      	ldr	r2, [pc, #128]	@ (80068b8 <DMA_SetConfig+0x350>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <DMA_SetConfig+0x2de>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1e      	ldr	r2, [pc, #120]	@ (80068bc <DMA_SetConfig+0x354>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <DMA_SetConfig+0x2e2>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <DMA_SetConfig+0x2e4>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d020      	beq.n	8006892 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	2201      	movs	r2, #1
 800685a:	409a      	lsls	r2, r3
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b40      	cmp	r3, #64	@ 0x40
 800686e:	d108      	bne.n	8006882 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	60da      	str	r2, [r3, #12]
}
 8006880:	e007      	b.n	8006892 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	60da      	str	r2, [r3, #12]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	58025408 	.word	0x58025408
 80068a4:	5802541c 	.word	0x5802541c
 80068a8:	58025430 	.word	0x58025430
 80068ac:	58025444 	.word	0x58025444
 80068b0:	58025458 	.word	0x58025458
 80068b4:	5802546c 	.word	0x5802546c
 80068b8:	58025480 	.word	0x58025480
 80068bc:	58025494 	.word	0x58025494

080068c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a42      	ldr	r2, [pc, #264]	@ (80069d8 <DMA_CalcBaseAndBitshift+0x118>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d04a      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a41      	ldr	r2, [pc, #260]	@ (80069dc <DMA_CalcBaseAndBitshift+0x11c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d045      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a3f      	ldr	r2, [pc, #252]	@ (80069e0 <DMA_CalcBaseAndBitshift+0x120>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d040      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3e      	ldr	r2, [pc, #248]	@ (80069e4 <DMA_CalcBaseAndBitshift+0x124>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d03b      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a3c      	ldr	r2, [pc, #240]	@ (80069e8 <DMA_CalcBaseAndBitshift+0x128>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d036      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a3b      	ldr	r2, [pc, #236]	@ (80069ec <DMA_CalcBaseAndBitshift+0x12c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d031      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a39      	ldr	r2, [pc, #228]	@ (80069f0 <DMA_CalcBaseAndBitshift+0x130>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d02c      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a38      	ldr	r2, [pc, #224]	@ (80069f4 <DMA_CalcBaseAndBitshift+0x134>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d027      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a36      	ldr	r2, [pc, #216]	@ (80069f8 <DMA_CalcBaseAndBitshift+0x138>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d022      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a35      	ldr	r2, [pc, #212]	@ (80069fc <DMA_CalcBaseAndBitshift+0x13c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d01d      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a33      	ldr	r2, [pc, #204]	@ (8006a00 <DMA_CalcBaseAndBitshift+0x140>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d018      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a32      	ldr	r2, [pc, #200]	@ (8006a04 <DMA_CalcBaseAndBitshift+0x144>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d013      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a30      	ldr	r2, [pc, #192]	@ (8006a08 <DMA_CalcBaseAndBitshift+0x148>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00e      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a2f      	ldr	r2, [pc, #188]	@ (8006a0c <DMA_CalcBaseAndBitshift+0x14c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d009      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a2d      	ldr	r2, [pc, #180]	@ (8006a10 <DMA_CalcBaseAndBitshift+0x150>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d004      	beq.n	8006968 <DMA_CalcBaseAndBitshift+0xa8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2c      	ldr	r2, [pc, #176]	@ (8006a14 <DMA_CalcBaseAndBitshift+0x154>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d101      	bne.n	800696c <DMA_CalcBaseAndBitshift+0xac>
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <DMA_CalcBaseAndBitshift+0xae>
 800696c:	2300      	movs	r3, #0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d024      	beq.n	80069bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	3b10      	subs	r3, #16
 800697a:	4a27      	ldr	r2, [pc, #156]	@ (8006a18 <DMA_CalcBaseAndBitshift+0x158>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	091b      	lsrs	r3, r3, #4
 8006982:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	4a24      	ldr	r2, [pc, #144]	@ (8006a1c <DMA_CalcBaseAndBitshift+0x15c>)
 800698c:	5cd3      	ldrb	r3, [r2, r3]
 800698e:	461a      	mov	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b03      	cmp	r3, #3
 8006998:	d908      	bls.n	80069ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006a20 <DMA_CalcBaseAndBitshift+0x160>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	1d1a      	adds	r2, r3, #4
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80069aa:	e00d      	b.n	80069c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a20 <DMA_CalcBaseAndBitshift+0x160>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80069ba:	e005      	b.n	80069c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	40020010 	.word	0x40020010
 80069dc:	40020028 	.word	0x40020028
 80069e0:	40020040 	.word	0x40020040
 80069e4:	40020058 	.word	0x40020058
 80069e8:	40020070 	.word	0x40020070
 80069ec:	40020088 	.word	0x40020088
 80069f0:	400200a0 	.word	0x400200a0
 80069f4:	400200b8 	.word	0x400200b8
 80069f8:	40020410 	.word	0x40020410
 80069fc:	40020428 	.word	0x40020428
 8006a00:	40020440 	.word	0x40020440
 8006a04:	40020458 	.word	0x40020458
 8006a08:	40020470 	.word	0x40020470
 8006a0c:	40020488 	.word	0x40020488
 8006a10:	400204a0 	.word	0x400204a0
 8006a14:	400204b8 	.word	0x400204b8
 8006a18:	aaaaaaab 	.word	0xaaaaaaab
 8006a1c:	08018ea8 	.word	0x08018ea8
 8006a20:	fffffc00 	.word	0xfffffc00

08006a24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d120      	bne.n	8006a7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d858      	bhi.n	8006af2 <DMA_CheckFifoParam+0xce>
 8006a40:	a201      	add	r2, pc, #4	@ (adr r2, 8006a48 <DMA_CheckFifoParam+0x24>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a59 	.word	0x08006a59
 8006a4c:	08006a6b 	.word	0x08006a6b
 8006a50:	08006a59 	.word	0x08006a59
 8006a54:	08006af3 	.word	0x08006af3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d048      	beq.n	8006af6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a68:	e045      	b.n	8006af6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a72:	d142      	bne.n	8006afa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a78:	e03f      	b.n	8006afa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a82:	d123      	bne.n	8006acc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d838      	bhi.n	8006afe <DMA_CheckFifoParam+0xda>
 8006a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a94 <DMA_CheckFifoParam+0x70>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006aa5 	.word	0x08006aa5
 8006a98:	08006aab 	.word	0x08006aab
 8006a9c:	08006aa5 	.word	0x08006aa5
 8006aa0:	08006abd 	.word	0x08006abd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	73fb      	strb	r3, [r7, #15]
        break;
 8006aa8:	e030      	b.n	8006b0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d025      	beq.n	8006b02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006aba:	e022      	b.n	8006b02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ac4:	d11f      	bne.n	8006b06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006aca:	e01c      	b.n	8006b06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d902      	bls.n	8006ada <DMA_CheckFifoParam+0xb6>
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d003      	beq.n	8006ae0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006ad8:	e018      	b.n	8006b0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
        break;
 8006ade:	e015      	b.n	8006b0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00e      	beq.n	8006b0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73fb      	strb	r3, [r7, #15]
    break;
 8006af0:	e00b      	b.n	8006b0a <DMA_CheckFifoParam+0xe6>
        break;
 8006af2:	bf00      	nop
 8006af4:	e00a      	b.n	8006b0c <DMA_CheckFifoParam+0xe8>
        break;
 8006af6:	bf00      	nop
 8006af8:	e008      	b.n	8006b0c <DMA_CheckFifoParam+0xe8>
        break;
 8006afa:	bf00      	nop
 8006afc:	e006      	b.n	8006b0c <DMA_CheckFifoParam+0xe8>
        break;
 8006afe:	bf00      	nop
 8006b00:	e004      	b.n	8006b0c <DMA_CheckFifoParam+0xe8>
        break;
 8006b02:	bf00      	nop
 8006b04:	e002      	b.n	8006b0c <DMA_CheckFifoParam+0xe8>
        break;
 8006b06:	bf00      	nop
 8006b08:	e000      	b.n	8006b0c <DMA_CheckFifoParam+0xe8>
    break;
 8006b0a:	bf00      	nop
    }
  }

  return status;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop

08006b1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a38      	ldr	r2, [pc, #224]	@ (8006c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a36      	ldr	r2, [pc, #216]	@ (8006c14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01d      	beq.n	8006b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a35      	ldr	r2, [pc, #212]	@ (8006c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a33      	ldr	r2, [pc, #204]	@ (8006c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a32      	ldr	r2, [pc, #200]	@ (8006c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a30      	ldr	r2, [pc, #192]	@ (8006c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2d      	ldr	r2, [pc, #180]	@ (8006c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d101      	bne.n	8006b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01a      	beq.n	8006bba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	3b08      	subs	r3, #8
 8006b8c:	4a28      	ldr	r2, [pc, #160]	@ (8006c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b92:	091b      	lsrs	r3, r3, #4
 8006b94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4b26      	ldr	r3, [pc, #152]	@ (8006c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a24      	ldr	r2, [pc, #144]	@ (8006c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006ba8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f003 031f 	and.w	r3, r3, #31
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	409a      	lsls	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006bb8:	e024      	b.n	8006c04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	3b10      	subs	r3, #16
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8006c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4a1c      	ldr	r2, [pc, #112]	@ (8006c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d806      	bhi.n	8006be2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d902      	bls.n	8006be2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3308      	adds	r3, #8
 8006be0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4b18      	ldr	r3, [pc, #96]	@ (8006c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	461a      	mov	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a16      	ldr	r2, [pc, #88]	@ (8006c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006bf4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	409a      	lsls	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	58025408 	.word	0x58025408
 8006c14:	5802541c 	.word	0x5802541c
 8006c18:	58025430 	.word	0x58025430
 8006c1c:	58025444 	.word	0x58025444
 8006c20:	58025458 	.word	0x58025458
 8006c24:	5802546c 	.word	0x5802546c
 8006c28:	58025480 	.word	0x58025480
 8006c2c:	58025494 	.word	0x58025494
 8006c30:	cccccccd 	.word	0xcccccccd
 8006c34:	16009600 	.word	0x16009600
 8006c38:	58025880 	.word	0x58025880
 8006c3c:	aaaaaaab 	.word	0xaaaaaaab
 8006c40:	400204b8 	.word	0x400204b8
 8006c44:	4002040f 	.word	0x4002040f
 8006c48:	10008200 	.word	0x10008200
 8006c4c:	40020880 	.word	0x40020880

08006c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d04a      	beq.n	8006cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d847      	bhi.n	8006cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a25      	ldr	r2, [pc, #148]	@ (8006d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d022      	beq.n	8006cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a24      	ldr	r2, [pc, #144]	@ (8006d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d01d      	beq.n	8006cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a22      	ldr	r2, [pc, #136]	@ (8006d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d018      	beq.n	8006cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a21      	ldr	r2, [pc, #132]	@ (8006d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d013      	beq.n	8006cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a1f      	ldr	r2, [pc, #124]	@ (8006d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00e      	beq.n	8006cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d009      	beq.n	8006cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1c      	ldr	r2, [pc, #112]	@ (8006d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d101      	bne.n	8006cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e000      	b.n	8006cc2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4b17      	ldr	r3, [pc, #92]	@ (8006d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	461a      	mov	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a15      	ldr	r2, [pc, #84]	@ (8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006cd8:	671a      	str	r2, [r3, #112]	@ 0x70
 8006cda:	e009      	b.n	8006cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4b14      	ldr	r3, [pc, #80]	@ (8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a11      	ldr	r2, [pc, #68]	@ (8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006cee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	409a      	lsls	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	58025408 	.word	0x58025408
 8006d0c:	5802541c 	.word	0x5802541c
 8006d10:	58025430 	.word	0x58025430
 8006d14:	58025444 	.word	0x58025444
 8006d18:	58025458 	.word	0x58025458
 8006d1c:	5802546c 	.word	0x5802546c
 8006d20:	58025480 	.word	0x58025480
 8006d24:	58025494 	.word	0x58025494
 8006d28:	1600963f 	.word	0x1600963f
 8006d2c:	58025940 	.word	0x58025940
 8006d30:	1000823f 	.word	0x1000823f
 8006d34:	40020940 	.word	0x40020940

08006d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b089      	sub	sp, #36	@ 0x24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006d46:	4b89      	ldr	r3, [pc, #548]	@ (8006f6c <HAL_GPIO_Init+0x234>)
 8006d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d4a:	e194      	b.n	8007076 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	2101      	movs	r1, #1
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	fa01 f303 	lsl.w	r3, r1, r3
 8006d58:	4013      	ands	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8186 	beq.w	8007070 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d005      	beq.n	8006d7c <HAL_GPIO_Init+0x44>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d130      	bne.n	8006dde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	2203      	movs	r2, #3
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4013      	ands	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006db2:	2201      	movs	r2, #1
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dba:	43db      	mvns	r3, r3
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	091b      	lsrs	r3, r3, #4
 8006dc8:	f003 0201 	and.w	r2, r3, #1
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d017      	beq.n	8006e1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	2203      	movs	r2, #3
 8006df6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfa:	43db      	mvns	r3, r3
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d123      	bne.n	8006e6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	08da      	lsrs	r2, r3, #3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3208      	adds	r2, #8
 8006e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	220f      	movs	r2, #15
 8006e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e42:	43db      	mvns	r3, r3
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	4013      	ands	r3, r2
 8006e48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	08da      	lsrs	r2, r3, #3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3208      	adds	r2, #8
 8006e68:	69b9      	ldr	r1, [r7, #24]
 8006e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	2203      	movs	r2, #3
 8006e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	4013      	ands	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f003 0203 	and.w	r2, r3, #3
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 80e0 	beq.w	8007070 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8006f70 <HAL_GPIO_Init+0x238>)
 8006eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8006f70 <HAL_GPIO_Init+0x238>)
 8006eb8:	f043 0302 	orr.w	r3, r3, #2
 8006ebc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f70 <HAL_GPIO_Init+0x238>)
 8006ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ece:	4a29      	ldr	r2, [pc, #164]	@ (8006f74 <HAL_GPIO_Init+0x23c>)
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	089b      	lsrs	r3, r3, #2
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	220f      	movs	r2, #15
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	43db      	mvns	r3, r3
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a20      	ldr	r2, [pc, #128]	@ (8006f78 <HAL_GPIO_Init+0x240>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d052      	beq.n	8006fa0 <HAL_GPIO_Init+0x268>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a1f      	ldr	r2, [pc, #124]	@ (8006f7c <HAL_GPIO_Init+0x244>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d031      	beq.n	8006f66 <HAL_GPIO_Init+0x22e>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a1e      	ldr	r2, [pc, #120]	@ (8006f80 <HAL_GPIO_Init+0x248>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d02b      	beq.n	8006f62 <HAL_GPIO_Init+0x22a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f84 <HAL_GPIO_Init+0x24c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d025      	beq.n	8006f5e <HAL_GPIO_Init+0x226>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a1c      	ldr	r2, [pc, #112]	@ (8006f88 <HAL_GPIO_Init+0x250>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d01f      	beq.n	8006f5a <HAL_GPIO_Init+0x222>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006f8c <HAL_GPIO_Init+0x254>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d019      	beq.n	8006f56 <HAL_GPIO_Init+0x21e>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a1a      	ldr	r2, [pc, #104]	@ (8006f90 <HAL_GPIO_Init+0x258>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d013      	beq.n	8006f52 <HAL_GPIO_Init+0x21a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a19      	ldr	r2, [pc, #100]	@ (8006f94 <HAL_GPIO_Init+0x25c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00d      	beq.n	8006f4e <HAL_GPIO_Init+0x216>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a18      	ldr	r2, [pc, #96]	@ (8006f98 <HAL_GPIO_Init+0x260>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d007      	beq.n	8006f4a <HAL_GPIO_Init+0x212>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a17      	ldr	r2, [pc, #92]	@ (8006f9c <HAL_GPIO_Init+0x264>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d101      	bne.n	8006f46 <HAL_GPIO_Init+0x20e>
 8006f42:	2309      	movs	r3, #9
 8006f44:	e02d      	b.n	8006fa2 <HAL_GPIO_Init+0x26a>
 8006f46:	230a      	movs	r3, #10
 8006f48:	e02b      	b.n	8006fa2 <HAL_GPIO_Init+0x26a>
 8006f4a:	2308      	movs	r3, #8
 8006f4c:	e029      	b.n	8006fa2 <HAL_GPIO_Init+0x26a>
 8006f4e:	2307      	movs	r3, #7
 8006f50:	e027      	b.n	8006fa2 <HAL_GPIO_Init+0x26a>
 8006f52:	2306      	movs	r3, #6
 8006f54:	e025      	b.n	8006fa2 <HAL_GPIO_Init+0x26a>
 8006f56:	2305      	movs	r3, #5
 8006f58:	e023      	b.n	8006fa2 <HAL_GPIO_Init+0x26a>
 8006f5a:	2304      	movs	r3, #4
 8006f5c:	e021      	b.n	8006fa2 <HAL_GPIO_Init+0x26a>
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e01f      	b.n	8006fa2 <HAL_GPIO_Init+0x26a>
 8006f62:	2302      	movs	r3, #2
 8006f64:	e01d      	b.n	8006fa2 <HAL_GPIO_Init+0x26a>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e01b      	b.n	8006fa2 <HAL_GPIO_Init+0x26a>
 8006f6a:	bf00      	nop
 8006f6c:	58000080 	.word	0x58000080
 8006f70:	58024400 	.word	0x58024400
 8006f74:	58000400 	.word	0x58000400
 8006f78:	58020000 	.word	0x58020000
 8006f7c:	58020400 	.word	0x58020400
 8006f80:	58020800 	.word	0x58020800
 8006f84:	58020c00 	.word	0x58020c00
 8006f88:	58021000 	.word	0x58021000
 8006f8c:	58021400 	.word	0x58021400
 8006f90:	58021800 	.word	0x58021800
 8006f94:	58021c00 	.word	0x58021c00
 8006f98:	58022000 	.word	0x58022000
 8006f9c:	58022400 	.word	0x58022400
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	f002 0203 	and.w	r2, r2, #3
 8006fa8:	0092      	lsls	r2, r2, #2
 8006faa:	4093      	lsls	r3, r2
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fb2:	4938      	ldr	r1, [pc, #224]	@ (8007094 <HAL_GPIO_Init+0x35c>)
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	089b      	lsrs	r3, r3, #2
 8006fb8:	3302      	adds	r3, #2
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006fe6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007014:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	43db      	mvns	r3, r3
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	4013      	ands	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	43db      	mvns	r3, r3
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	4013      	ands	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	3301      	adds	r3, #1
 8007074:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	f47f ae63 	bne.w	8006d4c <HAL_GPIO_Init+0x14>
  }
}
 8007086:	bf00      	nop
 8007088:	bf00      	nop
 800708a:	3724      	adds	r7, #36	@ 0x24
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	58000400 	.word	0x58000400

08007098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	807b      	strh	r3, [r7, #2]
 80070a4:	4613      	mov	r3, r2
 80070a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070a8:	787b      	ldrb	r3, [r7, #1]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070ae:	887a      	ldrh	r2, [r7, #2]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80070b4:	e003      	b.n	80070be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80070b6:	887b      	ldrh	r3, [r7, #2]
 80070b8:	041a      	lsls	r2, r3, #16
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	619a      	str	r2, [r3, #24]
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
	...

080070cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e08b      	b.n	80071f6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fa fb50 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2224      	movs	r2, #36	@ 0x24
 80070fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0201 	bic.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800711c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800712c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d107      	bne.n	8007146 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007142:	609a      	str	r2, [r3, #8]
 8007144:	e006      	b.n	8007154 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007152:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d108      	bne.n	800716e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800716a:	605a      	str	r2, [r3, #4]
 800716c:	e007      	b.n	800717e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800717c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6859      	ldr	r1, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	4b1d      	ldr	r3, [pc, #116]	@ (8007200 <HAL_I2C_Init+0x134>)
 800718a:	430b      	orrs	r3, r1
 800718c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800719c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69d9      	ldr	r1, [r3, #28]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0201 	orr.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	02008000 	.word	0x02008000

08007204 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	461a      	mov	r2, r3
 8007210:	460b      	mov	r3, r1
 8007212:	817b      	strh	r3, [r7, #10]
 8007214:	4613      	mov	r3, r2
 8007216:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b20      	cmp	r3, #32
 8007222:	f040 80fd 	bne.w	8007420 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_I2C_Master_Transmit+0x30>
 8007230:	2302      	movs	r3, #2
 8007232:	e0f6      	b.n	8007422 <HAL_I2C_Master_Transmit+0x21e>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800723c:	f7fb fab0 	bl	80027a0 <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	2319      	movs	r3, #25
 8007248:	2201      	movs	r2, #1
 800724a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f002 f89e 	bl	8009390 <I2C_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e0e1      	b.n	8007422 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2221      	movs	r2, #33	@ 0x21
 8007262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2210      	movs	r2, #16
 800726a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	893a      	ldrh	r2, [r7, #8]
 800727e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800728a:	b29b      	uxth	r3, r3
 800728c:	2bff      	cmp	r3, #255	@ 0xff
 800728e:	d906      	bls.n	800729e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	22ff      	movs	r2, #255	@ 0xff
 8007294:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007296:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	e007      	b.n	80072ae <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80072a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80072ac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d024      	beq.n	8007300 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ba:	781a      	ldrb	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	3301      	adds	r3, #1
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	8979      	ldrh	r1, [r7, #10]
 80072f2:	4b4e      	ldr	r3, [pc, #312]	@ (800742c <HAL_I2C_Master_Transmit+0x228>)
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f002 fa0d 	bl	8009718 <I2C_TransferConfig>
 80072fe:	e066      	b.n	80073ce <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007304:	b2da      	uxtb	r2, r3
 8007306:	8979      	ldrh	r1, [r7, #10]
 8007308:	4b48      	ldr	r3, [pc, #288]	@ (800742c <HAL_I2C_Master_Transmit+0x228>)
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f002 fa02 	bl	8009718 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007314:	e05b      	b.n	80073ce <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	6a39      	ldr	r1, [r7, #32]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f002 f891 	bl	8009442 <I2C_WaitOnTXISFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e07b      	b.n	8007422 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732e:	781a      	ldrb	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007344:	b29b      	uxth	r3, r3
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d034      	beq.n	80073ce <HAL_I2C_Master_Transmit+0x1ca>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007368:	2b00      	cmp	r3, #0
 800736a:	d130      	bne.n	80073ce <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	2200      	movs	r2, #0
 8007374:	2180      	movs	r1, #128	@ 0x80
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f002 f80a 	bl	8009390 <I2C_WaitOnFlagUntilTimeout>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e04d      	b.n	8007422 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800738a:	b29b      	uxth	r3, r3
 800738c:	2bff      	cmp	r3, #255	@ 0xff
 800738e:	d90e      	bls.n	80073ae <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	22ff      	movs	r2, #255	@ 0xff
 8007394:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800739a:	b2da      	uxtb	r2, r3
 800739c:	8979      	ldrh	r1, [r7, #10]
 800739e:	2300      	movs	r3, #0
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f002 f9b6 	bl	8009718 <I2C_TransferConfig>
 80073ac:	e00f      	b.n	80073ce <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	8979      	ldrh	r1, [r7, #10]
 80073c0:	2300      	movs	r3, #0
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f002 f9a5 	bl	8009718 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d19e      	bne.n	8007316 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	6a39      	ldr	r1, [r7, #32]
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f002 f877 	bl	80094d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e01a      	b.n	8007422 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2220      	movs	r2, #32
 80073f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6859      	ldr	r1, [r3, #4]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007430 <HAL_I2C_Master_Transmit+0x22c>)
 8007400:	400b      	ands	r3, r1
 8007402:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	e000      	b.n	8007422 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007420:	2302      	movs	r3, #2
  }
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	80002000 	.word	0x80002000
 8007430:	fe00e800 	.word	0xfe00e800

08007434 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	@ 0x28
 8007438:	af02      	add	r7, sp, #8
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	607a      	str	r2, [r7, #4]
 800743e:	461a      	mov	r2, r3
 8007440:	460b      	mov	r3, r1
 8007442:	817b      	strh	r3, [r7, #10]
 8007444:	4613      	mov	r3, r2
 8007446:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b20      	cmp	r3, #32
 8007456:	f040 80ef 	bne.w	8007638 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007468:	d101      	bne.n	800746e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800746a:	2302      	movs	r3, #2
 800746c:	e0e5      	b.n	800763a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007474:	2b01      	cmp	r3, #1
 8007476:	d101      	bne.n	800747c <HAL_I2C_Master_Transmit_DMA+0x48>
 8007478:	2302      	movs	r3, #2
 800747a:	e0de      	b.n	800763a <HAL_I2C_Master_Transmit_DMA+0x206>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2221      	movs	r2, #33	@ 0x21
 8007488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2210      	movs	r2, #16
 8007490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	893a      	ldrh	r2, [r7, #8]
 80074a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4a66      	ldr	r2, [pc, #408]	@ (8007644 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80074aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a66      	ldr	r2, [pc, #408]	@ (8007648 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80074b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2bff      	cmp	r3, #255	@ 0xff
 80074ba:	d906      	bls.n	80074ca <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	22ff      	movs	r2, #255	@ 0xff
 80074c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80074c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074c6:	61fb      	str	r3, [r7, #28]
 80074c8:	e007      	b.n	80074da <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80074d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074d8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d01a      	beq.n	8007518 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e6:	781a      	ldrb	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074fc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007502:	b29b      	uxth	r3, r3
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d074      	beq.n	800760a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	d022      	beq.n	800756e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752c:	4a47      	ldr	r2, [pc, #284]	@ (800764c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800752e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007534:	4a46      	ldr	r2, [pc, #280]	@ (8007650 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8007536:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753c:	2200      	movs	r2, #0
 800753e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007544:	2200      	movs	r2, #0
 8007546:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007550:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007558:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800755e:	f7fd f8f1 	bl	8004744 <HAL_DMA_Start_IT>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d13a      	bne.n	80075e2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800756c:	e013      	b.n	8007596 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007582:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e051      	b.n	800763a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800759a:	b2db      	uxtb	r3, r3
 800759c:	3301      	adds	r3, #1
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	8979      	ldrh	r1, [r7, #10]
 80075a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007654 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f002 f8b5 	bl	8009718 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80075c8:	2110      	movs	r1, #16
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f002 f8d6 	bl	800977c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	e028      	b.n	8007634 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f6:	f043 0210 	orr.w	r2, r3, #16
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e017      	b.n	800763a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4a12      	ldr	r2, [pc, #72]	@ (8007658 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800760e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	b2da      	uxtb	r2, r3
 8007614:	8979      	ldrh	r1, [r7, #10]
 8007616:	4b0f      	ldr	r3, [pc, #60]	@ (8007654 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f002 f87a 	bl	8009718 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800762c:	2101      	movs	r1, #1
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f002 f8a4 	bl	800977c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	e000      	b.n	800763a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007638:	2302      	movs	r3, #2
  }
}
 800763a:	4618      	mov	r0, r3
 800763c:	3720      	adds	r7, #32
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	ffff0000 	.word	0xffff0000
 8007648:	08007c93 	.word	0x08007c93
 800764c:	0800904b 	.word	0x0800904b
 8007650:	080090e1 	.word	0x080090e1
 8007654:	80002000 	.word	0x80002000
 8007658:	08007823 	.word	0x08007823

0800765c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
  }
}
 8007688:	bf00      	nop
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d010      	beq.n	80076d6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	09db      	lsrs	r3, r3, #7
 80076b8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c4:	f043 0201 	orr.w	r2, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076d4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	0a9b      	lsrs	r3, r3, #10
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d010      	beq.n	8007704 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	09db      	lsrs	r3, r3, #7
 80076e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f2:	f043 0208 	orr.w	r2, r3, #8
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007702:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	0a5b      	lsrs	r3, r3, #9
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d010      	beq.n	8007732 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	09db      	lsrs	r3, r3, #7
 8007714:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00a      	beq.n	8007732 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007720:	f043 0202 	orr.w	r2, r3, #2
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007730:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007736:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f003 030b 	and.w	r3, r3, #11
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 fb45 	bl	8008dd4 <I2C_ITError>
  }
}
 800774a:	bf00      	nop
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800776e:	bf00      	nop
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	460b      	mov	r3, r1
 80077ac:	70fb      	strb	r3, [r7, #3]
 80077ae:	4613      	mov	r3, r2
 80077b0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b088      	sub	sp, #32
 8007826:	af02      	add	r7, sp, #8
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <I2C_Master_ISR_IT+0x1e>
 800783c:	2302      	movs	r3, #2
 800783e:	e120      	b.n	8007a82 <I2C_Master_ISR_IT+0x260>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	091b      	lsrs	r3, r3, #4
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d013      	beq.n	800787c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00d      	beq.n	800787c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2210      	movs	r2, #16
 8007866:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786c:	f043 0204 	orr.w	r2, r3, #4
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f001 fbc4 	bl	8009002 <I2C_Flush_TXDR>
 800787a:	e0ed      	b.n	8007a58 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	089b      	lsrs	r3, r3, #2
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d023      	beq.n	80078d0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	089b      	lsrs	r3, r3, #2
 800788c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01d      	beq.n	80078d0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f023 0304 	bic.w	r3, r3, #4
 800789a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80078ce:	e0c3      	b.n	8007a58 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	099b      	lsrs	r3, r3, #6
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d12a      	bne.n	8007932 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	085b      	lsrs	r3, r3, #1
 80078e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d024      	beq.n	8007932 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	085b      	lsrs	r3, r3, #1
 80078ec:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01e      	beq.n	8007932 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 80ac 	beq.w	8007a58 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007904:	781a      	ldrb	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8007930:	e092      	b.n	8007a58 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	09db      	lsrs	r3, r3, #7
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d05d      	beq.n	80079fa <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	099b      	lsrs	r3, r3, #6
 8007942:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007946:	2b00      	cmp	r3, #0
 8007948:	d057      	beq.n	80079fa <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d040      	beq.n	80079d6 <I2C_Master_ISR_IT+0x1b4>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007958:	2b00      	cmp	r3, #0
 800795a:	d13c      	bne.n	80079d6 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	b29b      	uxth	r3, r3
 8007964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007968:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800796e:	b29b      	uxth	r3, r3
 8007970:	2bff      	cmp	r3, #255	@ 0xff
 8007972:	d90e      	bls.n	8007992 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	22ff      	movs	r2, #255	@ 0xff
 8007978:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800797e:	b2da      	uxtb	r2, r3
 8007980:	8a79      	ldrh	r1, [r7, #18]
 8007982:	2300      	movs	r3, #0
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f001 fec4 	bl	8009718 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007990:	e032      	b.n	80079f8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80079a4:	d00b      	beq.n	80079be <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079aa:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80079b0:	8a79      	ldrh	r1, [r7, #18]
 80079b2:	2000      	movs	r0, #0
 80079b4:	9000      	str	r0, [sp, #0]
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f001 feae 	bl	8009718 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079bc:	e01c      	b.n	80079f8 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	8a79      	ldrh	r1, [r7, #18]
 80079c6:	2300      	movs	r3, #0
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f001 fea2 	bl	8009718 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079d4:	e010      	b.n	80079f8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079e4:	d003      	beq.n	80079ee <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 fdde 	bl	80085a8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079ec:	e034      	b.n	8007a58 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80079ee:	2140      	movs	r1, #64	@ 0x40
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f001 f9ef 	bl	8008dd4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079f6:	e02f      	b.n	8007a58 <I2C_Master_ISR_IT+0x236>
 80079f8:	e02e      	b.n	8007a58 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	099b      	lsrs	r3, r3, #6
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d028      	beq.n	8007a58 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	099b      	lsrs	r3, r3, #6
 8007a0a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d022      	beq.n	8007a58 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d119      	bne.n	8007a50 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a2a:	d015      	beq.n	8007a58 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a34:	d108      	bne.n	8007a48 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a44:	605a      	str	r2, [r3, #4]
 8007a46:	e007      	b.n	8007a58 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 fdad 	bl	80085a8 <I2C_ITMasterSeqCplt>
 8007a4e:	e003      	b.n	8007a58 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007a50:	2140      	movs	r1, #64	@ 0x40
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f001 f9be 	bl	8008dd4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d009      	beq.n	8007a78 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007a70:	6979      	ldr	r1, [r7, #20]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 fe34 	bl	80086e0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b086      	sub	sp, #24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d101      	bne.n	8007aae <I2C_Slave_ISR_IT+0x24>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e0ed      	b.n	8007c8a <I2C_Slave_ISR_IT+0x200>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	095b      	lsrs	r3, r3, #5
 8007ac6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007ace:	6939      	ldr	r1, [r7, #16]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fecf 	bl	8008874 <I2C_ITSlaveCplt>
 8007ad6:	e0d3      	b.n	8007c80 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	091b      	lsrs	r3, r3, #4
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d04d      	beq.n	8007b80 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	091b      	lsrs	r3, r3, #4
 8007ae8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d047      	beq.n	8007b80 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d128      	bne.n	8007b4c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b28      	cmp	r3, #40	@ 0x28
 8007b04:	d108      	bne.n	8007b18 <I2C_Slave_ISR_IT+0x8e>
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b0c:	d104      	bne.n	8007b18 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b0e:	6939      	ldr	r1, [r7, #16]
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f001 f909 	bl	8008d28 <I2C_ITListenCplt>
 8007b16:	e032      	b.n	8007b7e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b29      	cmp	r3, #41	@ 0x29
 8007b22:	d10e      	bne.n	8007b42 <I2C_Slave_ISR_IT+0xb8>
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b2a:	d00a      	beq.n	8007b42 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2210      	movs	r2, #16
 8007b32:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f001 fa64 	bl	8009002 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 fd71 	bl	8008622 <I2C_ITSlaveSeqCplt>
 8007b40:	e01d      	b.n	8007b7e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2210      	movs	r2, #16
 8007b48:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007b4a:	e096      	b.n	8007c7a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2210      	movs	r2, #16
 8007b52:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b58:	f043 0204 	orr.w	r2, r3, #4
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <I2C_Slave_ISR_IT+0xe6>
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b6c:	f040 8085 	bne.w	8007c7a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b74:	4619      	mov	r1, r3
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f001 f92c 	bl	8008dd4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007b7c:	e07d      	b.n	8007c7a <I2C_Slave_ISR_IT+0x1f0>
 8007b7e:	e07c      	b.n	8007c7a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	089b      	lsrs	r3, r3, #2
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d030      	beq.n	8007bee <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	089b      	lsrs	r3, r3, #2
 8007b90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d02a      	beq.n	8007bee <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d018      	beq.n	8007bd4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d14f      	bne.n	8007c7e <I2C_Slave_ISR_IT+0x1f4>
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007be4:	d04b      	beq.n	8007c7e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 fd1b 	bl	8008622 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007bec:	e047      	b.n	8007c7e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	08db      	lsrs	r3, r3, #3
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	08db      	lsrs	r3, r3, #3
 8007bfe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007c06:	6939      	ldr	r1, [r7, #16]
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fc49 	bl	80084a0 <I2C_ITAddrCplt>
 8007c0e:	e037      	b.n	8007c80 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	085b      	lsrs	r3, r3, #1
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d031      	beq.n	8007c80 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d02b      	beq.n	8007c80 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d018      	beq.n	8007c64 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c36:	781a      	ldrb	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007c62:	e00d      	b.n	8007c80 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c6a:	d002      	beq.n	8007c72 <I2C_Slave_ISR_IT+0x1e8>
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d106      	bne.n	8007c80 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 fcd5 	bl	8008622 <I2C_ITSlaveSeqCplt>
 8007c78:	e002      	b.n	8007c80 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8007c7e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b088      	sub	sp, #32
 8007c96:	af02      	add	r7, sp, #8
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <I2C_Master_ISR_DMA+0x1a>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e0e1      	b.n	8007e70 <I2C_Master_ISR_DMA+0x1de>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	091b      	lsrs	r3, r3, #4
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d017      	beq.n	8007cf0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d011      	beq.n	8007cf0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2210      	movs	r2, #16
 8007cd2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cd8:	f043 0204 	orr.w	r2, r3, #4
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007ce0:	2120      	movs	r1, #32
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f001 fd4a 	bl	800977c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f001 f98a 	bl	8009002 <I2C_Flush_TXDR>
 8007cee:	e0ba      	b.n	8007e66 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	09db      	lsrs	r3, r3, #7
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d072      	beq.n	8007de2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	099b      	lsrs	r3, r3, #6
 8007d00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d06c      	beq.n	8007de2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d16:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d04e      	beq.n	8007dc0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d2e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	2bff      	cmp	r3, #255	@ 0xff
 8007d38:	d906      	bls.n	8007d48 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	22ff      	movs	r2, #255	@ 0xff
 8007d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007d40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	e010      	b.n	8007d6a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d5a:	d003      	beq.n	8007d64 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e002      	b.n	8007d6a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007d64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d68:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	8a79      	ldrh	r1, [r7, #18]
 8007d72:	2300      	movs	r3, #0
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f001 fccd 	bl	8009718 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b22      	cmp	r3, #34	@ 0x22
 8007d9a:	d108      	bne.n	8007dae <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007daa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007dac:	e05b      	b.n	8007e66 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007dbc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007dbe:	e052      	b.n	8007e66 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dce:	d003      	beq.n	8007dd8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fbe9 	bl	80085a8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007dd6:	e046      	b.n	8007e66 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007dd8:	2140      	movs	r1, #64	@ 0x40
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fffa 	bl	8008dd4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007de0:	e041      	b.n	8007e66 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	099b      	lsrs	r3, r3, #6
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d029      	beq.n	8007e42 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	099b      	lsrs	r3, r3, #6
 8007df2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d023      	beq.n	8007e42 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d119      	bne.n	8007e38 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e12:	d027      	beq.n	8007e64 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e1c:	d108      	bne.n	8007e30 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e2c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007e2e:	e019      	b.n	8007e64 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 fbb9 	bl	80085a8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007e36:	e015      	b.n	8007e64 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007e38:	2140      	movs	r1, #64	@ 0x40
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 ffca 	bl	8008dd4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007e40:	e010      	b.n	8007e64 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	095b      	lsrs	r3, r3, #5
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00b      	beq.n	8007e66 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	095b      	lsrs	r3, r3, #5
 8007e52:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d005      	beq.n	8007e66 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fc3f 	bl	80086e0 <I2C_ITMasterCplt>
 8007e62:	e000      	b.n	8007e66 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007e64:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007e84:	4b92      	ldr	r3, [pc, #584]	@ (80080d0 <I2C_Mem_ISR_DMA+0x258>)
 8007e86:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <I2C_Mem_ISR_DMA+0x1e>
 8007e92:	2302      	movs	r3, #2
 8007e94:	e118      	b.n	80080c8 <I2C_Mem_ISR_DMA+0x250>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	091b      	lsrs	r3, r3, #4
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d017      	beq.n	8007eda <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	091b      	lsrs	r3, r3, #4
 8007eae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d011      	beq.n	8007eda <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2210      	movs	r2, #16
 8007ebc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec2:	f043 0204 	orr.w	r2, r3, #4
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007eca:	2120      	movs	r1, #32
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f001 fc55 	bl	800977c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f001 f895 	bl	8009002 <I2C_Flush_TXDR>
 8007ed8:	e0f1      	b.n	80080be <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00f      	beq.n	8007f06 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	085b      	lsrs	r3, r3, #1
 8007eea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007efa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295
 8007f02:	651a      	str	r2, [r3, #80]	@ 0x50
 8007f04:	e0db      	b.n	80080be <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	09db      	lsrs	r3, r3, #7
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d060      	beq.n	8007fd4 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	099b      	lsrs	r3, r3, #6
 8007f16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d05a      	beq.n	8007fd4 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007f1e:	2101      	movs	r1, #1
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f001 fcaf 	bl	8009884 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007f26:	2110      	movs	r1, #16
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f001 fc27 	bl	800977c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d048      	beq.n	8007fca <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2bff      	cmp	r3, #255	@ 0xff
 8007f40:	d910      	bls.n	8007f64 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	22ff      	movs	r2, #255	@ 0xff
 8007f46:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f4c:	b299      	uxth	r1, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	2300      	movs	r3, #0
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f001 fbdb 	bl	8009718 <I2C_TransferConfig>
 8007f62:	e011      	b.n	8007f88 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f72:	b299      	uxth	r1, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f001 fbc8 	bl	8009718 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b22      	cmp	r3, #34	@ 0x22
 8007fa4:	d108      	bne.n	8007fb8 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fb4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007fb6:	e082      	b.n	80080be <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fc6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007fc8:	e079      	b.n	80080be <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007fca:	2140      	movs	r1, #64	@ 0x40
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 ff01 	bl	8008dd4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007fd2:	e074      	b.n	80080be <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	099b      	lsrs	r3, r3, #6
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d05e      	beq.n	800809e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	099b      	lsrs	r3, r3, #6
 8007fe4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d058      	beq.n	800809e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007fec:	2101      	movs	r1, #1
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f001 fc48 	bl	8009884 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007ff4:	2110      	movs	r1, #16
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f001 fbc0 	bl	800977c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b22      	cmp	r3, #34	@ 0x22
 8008006:	d101      	bne.n	800800c <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8008008:	4b32      	ldr	r3, [pc, #200]	@ (80080d4 <I2C_Mem_ISR_DMA+0x25c>)
 800800a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008010:	b29b      	uxth	r3, r3
 8008012:	2bff      	cmp	r3, #255	@ 0xff
 8008014:	d910      	bls.n	8008038 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	22ff      	movs	r2, #255	@ 0xff
 800801a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008020:	b299      	uxth	r1, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008026:	b2da      	uxtb	r2, r3
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f001 fb71 	bl	8009718 <I2C_TransferConfig>
 8008036:	e011      	b.n	800805c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008046:	b299      	uxth	r1, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800804c:	b2da      	uxtb	r2, r3
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f001 fb5e 	bl	8009718 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008060:	b29a      	uxth	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	b29a      	uxth	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b22      	cmp	r3, #34	@ 0x22
 8008078:	d108      	bne.n	800808c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008088:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800808a:	e018      	b.n	80080be <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800809a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800809c:	e00f      	b.n	80080be <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	095b      	lsrs	r3, r3, #5
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	095b      	lsrs	r3, r3, #5
 80080ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fb11 	bl	80086e0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	80002000 	.word	0x80002000
 80080d4:	80002400 	.word	0x80002400

080080d8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d101      	bne.n	80080fc <I2C_Slave_ISR_DMA+0x24>
 80080f8:	2302      	movs	r3, #2
 80080fa:	e1cc      	b.n	8008496 <I2C_Slave_ISR_DMA+0x3be>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	095b      	lsrs	r3, r3, #5
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	095b      	lsrs	r3, r3, #5
 8008114:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fba8 	bl	8008874 <I2C_ITSlaveCplt>
 8008124:	e1b2      	b.n	800848c <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	091b      	lsrs	r3, r3, #4
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 819c 	beq.w	800846c <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	091b      	lsrs	r3, r3, #4
 8008138:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 8195 	beq.w	800846c <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	0b9b      	lsrs	r3, r3, #14
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d106      	bne.n	800815c <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	0bdb      	lsrs	r3, r3, #15
 8008152:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 8181 	beq.w	800845e <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d07c      	beq.n	800825e <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	0bdb      	lsrs	r3, r3, #15
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d076      	beq.n	800825e <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a75      	ldr	r2, [pc, #468]	@ (800834c <I2C_Slave_ISR_DMA+0x274>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d059      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a73      	ldr	r2, [pc, #460]	@ (8008350 <I2C_Slave_ISR_DMA+0x278>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d053      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a71      	ldr	r2, [pc, #452]	@ (8008354 <I2C_Slave_ISR_DMA+0x27c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d04d      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a6f      	ldr	r2, [pc, #444]	@ (8008358 <I2C_Slave_ISR_DMA+0x280>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d047      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a6d      	ldr	r2, [pc, #436]	@ (800835c <I2C_Slave_ISR_DMA+0x284>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d041      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a6b      	ldr	r2, [pc, #428]	@ (8008360 <I2C_Slave_ISR_DMA+0x288>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d03b      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a69      	ldr	r2, [pc, #420]	@ (8008364 <I2C_Slave_ISR_DMA+0x28c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d035      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a67      	ldr	r2, [pc, #412]	@ (8008368 <I2C_Slave_ISR_DMA+0x290>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d02f      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a65      	ldr	r2, [pc, #404]	@ (800836c <I2C_Slave_ISR_DMA+0x294>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d029      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a63      	ldr	r2, [pc, #396]	@ (8008370 <I2C_Slave_ISR_DMA+0x298>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d023      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a61      	ldr	r2, [pc, #388]	@ (8008374 <I2C_Slave_ISR_DMA+0x29c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d01d      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a5f      	ldr	r2, [pc, #380]	@ (8008378 <I2C_Slave_ISR_DMA+0x2a0>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d017      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a5d      	ldr	r2, [pc, #372]	@ (800837c <I2C_Slave_ISR_DMA+0x2a4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d011      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a5b      	ldr	r2, [pc, #364]	@ (8008380 <I2C_Slave_ISR_DMA+0x2a8>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00b      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a59      	ldr	r2, [pc, #356]	@ (8008384 <I2C_Slave_ISR_DMA+0x2ac>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d005      	beq.n	8008230 <I2C_Slave_ISR_DMA+0x158>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a57      	ldr	r2, [pc, #348]	@ (8008388 <I2C_Slave_ISR_DMA+0x2b0>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d109      	bne.n	8008244 <I2C_Slave_ISR_DMA+0x16c>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	bf0c      	ite	eq
 800823c:	2301      	moveq	r3, #1
 800823e:	2300      	movne	r3, #0
 8008240:	b2db      	uxtb	r3, r3
 8008242:	e008      	b.n	8008256 <I2C_Slave_ISR_DMA+0x17e>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	bf0c      	ite	eq
 8008250:	2301      	moveq	r3, #1
 8008252:	2300      	movne	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800825a:	2301      	movs	r3, #1
 800825c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 809f 	beq.w	80083a6 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	0b9b      	lsrs	r3, r3, #14
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 8098 	beq.w	80083a6 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a33      	ldr	r2, [pc, #204]	@ (800834c <I2C_Slave_ISR_DMA+0x274>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d059      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a31      	ldr	r2, [pc, #196]	@ (8008350 <I2C_Slave_ISR_DMA+0x278>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d053      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a2f      	ldr	r2, [pc, #188]	@ (8008354 <I2C_Slave_ISR_DMA+0x27c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d04d      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008358 <I2C_Slave_ISR_DMA+0x280>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d047      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a2b      	ldr	r2, [pc, #172]	@ (800835c <I2C_Slave_ISR_DMA+0x284>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d041      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a29      	ldr	r2, [pc, #164]	@ (8008360 <I2C_Slave_ISR_DMA+0x288>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d03b      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a27      	ldr	r2, [pc, #156]	@ (8008364 <I2C_Slave_ISR_DMA+0x28c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d035      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a25      	ldr	r2, [pc, #148]	@ (8008368 <I2C_Slave_ISR_DMA+0x290>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d02f      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a23      	ldr	r2, [pc, #140]	@ (800836c <I2C_Slave_ISR_DMA+0x294>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d029      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a21      	ldr	r2, [pc, #132]	@ (8008370 <I2C_Slave_ISR_DMA+0x298>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d023      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008374 <I2C_Slave_ISR_DMA+0x29c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d01d      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a1d      	ldr	r2, [pc, #116]	@ (8008378 <I2C_Slave_ISR_DMA+0x2a0>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d017      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a1b      	ldr	r2, [pc, #108]	@ (800837c <I2C_Slave_ISR_DMA+0x2a4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d011      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a19      	ldr	r2, [pc, #100]	@ (8008380 <I2C_Slave_ISR_DMA+0x2a8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00b      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a17      	ldr	r2, [pc, #92]	@ (8008384 <I2C_Slave_ISR_DMA+0x2ac>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d005      	beq.n	8008336 <I2C_Slave_ISR_DMA+0x25e>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a15      	ldr	r2, [pc, #84]	@ (8008388 <I2C_Slave_ISR_DMA+0x2b0>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d12a      	bne.n	800838c <I2C_Slave_ISR_DMA+0x2b4>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	bf0c      	ite	eq
 8008342:	2301      	moveq	r3, #1
 8008344:	2300      	movne	r3, #0
 8008346:	b2db      	uxtb	r3, r3
 8008348:	e029      	b.n	800839e <I2C_Slave_ISR_DMA+0x2c6>
 800834a:	bf00      	nop
 800834c:	40020010 	.word	0x40020010
 8008350:	40020028 	.word	0x40020028
 8008354:	40020040 	.word	0x40020040
 8008358:	40020058 	.word	0x40020058
 800835c:	40020070 	.word	0x40020070
 8008360:	40020088 	.word	0x40020088
 8008364:	400200a0 	.word	0x400200a0
 8008368:	400200b8 	.word	0x400200b8
 800836c:	40020410 	.word	0x40020410
 8008370:	40020428 	.word	0x40020428
 8008374:	40020440 	.word	0x40020440
 8008378:	40020458 	.word	0x40020458
 800837c:	40020470 	.word	0x40020470
 8008380:	40020488 	.word	0x40020488
 8008384:	400204a0 	.word	0x400204a0
 8008388:	400204b8 	.word	0x400204b8
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	bf0c      	ite	eq
 8008398:	2301      	moveq	r3, #1
 800839a:	2300      	movne	r3, #0
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 80083a2:	2301      	movs	r3, #1
 80083a4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d128      	bne.n	80083fe <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b28      	cmp	r3, #40	@ 0x28
 80083b6:	d108      	bne.n	80083ca <I2C_Slave_ISR_DMA+0x2f2>
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083be:	d104      	bne.n	80083ca <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 fcb0 	bl	8008d28 <I2C_ITListenCplt>
 80083c8:	e048      	b.n	800845c <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b29      	cmp	r3, #41	@ 0x29
 80083d4:	d10e      	bne.n	80083f4 <I2C_Slave_ISR_DMA+0x31c>
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80083dc:	d00a      	beq.n	80083f4 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2210      	movs	r2, #16
 80083e4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 fe0b 	bl	8009002 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f918 	bl	8008622 <I2C_ITSlaveSeqCplt>
 80083f2:	e033      	b.n	800845c <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2210      	movs	r2, #16
 80083fa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80083fc:	e034      	b.n	8008468 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2210      	movs	r2, #16
 8008404:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800840a:	f043 0204 	orr.w	r2, r3, #4
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008418:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <I2C_Slave_ISR_DMA+0x350>
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008426:	d11f      	bne.n	8008468 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	2b21      	cmp	r3, #33	@ 0x21
 800842c:	d002      	beq.n	8008434 <I2C_Slave_ISR_DMA+0x35c>
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	2b29      	cmp	r3, #41	@ 0x29
 8008432:	d103      	bne.n	800843c <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2221      	movs	r2, #33	@ 0x21
 8008438:	631a      	str	r2, [r3, #48]	@ 0x30
 800843a:	e008      	b.n	800844e <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	2b22      	cmp	r3, #34	@ 0x22
 8008440:	d002      	beq.n	8008448 <I2C_Slave_ISR_DMA+0x370>
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	2b2a      	cmp	r3, #42	@ 0x2a
 8008446:	d102      	bne.n	800844e <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2222      	movs	r2, #34	@ 0x22
 800844c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008452:	4619      	mov	r1, r3
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 fcbd 	bl	8008dd4 <I2C_ITError>
      if (treatdmanack == 1U)
 800845a:	e005      	b.n	8008468 <I2C_Slave_ISR_DMA+0x390>
 800845c:	e004      	b.n	8008468 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2210      	movs	r2, #16
 8008464:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008466:	e011      	b.n	800848c <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8008468:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800846a:	e00f      	b.n	800848c <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	08db      	lsrs	r3, r3, #3
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	08db      	lsrs	r3, r3, #3
 800847c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008484:	68b9      	ldr	r1, [r7, #8]
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 f80a 	bl	80084a0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3720      	adds	r7, #32
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop

080084a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80084b6:	2b28      	cmp	r3, #40	@ 0x28
 80084b8:	d16a      	bne.n	8008590 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	0c1b      	lsrs	r3, r3, #16
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	0c1b      	lsrs	r3, r3, #16
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80084d8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084e6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80084f4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d138      	bne.n	8008570 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80084fe:	897b      	ldrh	r3, [r7, #10]
 8008500:	09db      	lsrs	r3, r3, #7
 8008502:	b29a      	uxth	r2, r3
 8008504:	89bb      	ldrh	r3, [r7, #12]
 8008506:	4053      	eors	r3, r2
 8008508:	b29b      	uxth	r3, r3
 800850a:	f003 0306 	and.w	r3, r3, #6
 800850e:	2b00      	cmp	r3, #0
 8008510:	d11c      	bne.n	800854c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008512:	897b      	ldrh	r3, [r7, #10]
 8008514:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008524:	2b02      	cmp	r3, #2
 8008526:	d13b      	bne.n	80085a0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2208      	movs	r2, #8
 8008534:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800853e:	89ba      	ldrh	r2, [r7, #12]
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff f92c 	bl	80077a2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800854a:	e029      	b.n	80085a0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800854c:	893b      	ldrh	r3, [r7, #8]
 800854e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008550:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 f995 	bl	8009884 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008562:	89ba      	ldrh	r2, [r7, #12]
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff f91a 	bl	80077a2 <HAL_I2C_AddrCallback>
}
 800856e:	e017      	b.n	80085a0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008570:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 f985 	bl	8009884 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008582:	89ba      	ldrh	r2, [r7, #12]
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff f90a 	bl	80077a2 <HAL_I2C_AddrCallback>
}
 800858e:	e007      	b.n	80085a0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2208      	movs	r2, #8
 8008596:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80085a0:	bf00      	nop
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b21      	cmp	r3, #33	@ 0x21
 80085c2:	d115      	bne.n	80085f0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2211      	movs	r2, #17
 80085d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80085d8:	2101      	movs	r1, #1
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 f952 	bl	8009884 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff f8b2 	bl	8007752 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085ee:	e014      	b.n	800861a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2212      	movs	r2, #18
 80085fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008604:	2102      	movs	r1, #2
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 f93c 	bl	8009884 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff f8a6 	bl	8007766 <HAL_I2C_MasterRxCpltCallback>
}
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	0b9b      	lsrs	r3, r3, #14
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	d008      	beq.n	8008658 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	e00d      	b.n	8008674 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	0bdb      	lsrs	r3, r3, #15
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d007      	beq.n	8008674 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008672:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b29      	cmp	r3, #41	@ 0x29
 800867e:	d112      	bne.n	80086a6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2228      	movs	r2, #40	@ 0x28
 8008684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2221      	movs	r2, #33	@ 0x21
 800868c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800868e:	2101      	movs	r1, #1
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 f8f7 	bl	8009884 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff f86b 	bl	800777a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80086a4:	e017      	b.n	80086d6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b0:	d111      	bne.n	80086d6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2228      	movs	r2, #40	@ 0x28
 80086b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2222      	movs	r2, #34	@ 0x22
 80086be:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80086c0:	2102      	movs	r1, #2
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 f8de 	bl	8009884 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff f85c 	bl	800778e <HAL_I2C_SlaveRxCpltCallback>
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2220      	movs	r2, #32
 80086f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b21      	cmp	r3, #33	@ 0x21
 8008700:	d107      	bne.n	8008712 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008702:	2101      	movs	r1, #1
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 f8bd 	bl	8009884 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2211      	movs	r2, #17
 800870e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008710:	e00c      	b.n	800872c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b22      	cmp	r3, #34	@ 0x22
 800871c:	d106      	bne.n	800872c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800871e:	2102      	movs	r1, #2
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 f8af 	bl	8009884 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2212      	movs	r2, #18
 800872a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6859      	ldr	r1, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4b4d      	ldr	r3, [pc, #308]	@ (800886c <I2C_ITMasterCplt+0x18c>)
 8008738:	400b      	ands	r3, r1
 800873a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a4a      	ldr	r2, [pc, #296]	@ (8008870 <I2C_ITMasterCplt+0x190>)
 8008746:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	091b      	lsrs	r3, r3, #4
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d009      	beq.n	8008768 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2210      	movs	r2, #16
 800875a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008760:	f043 0204 	orr.w	r2, r3, #4
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b60      	cmp	r3, #96	@ 0x60
 8008772:	d10b      	bne.n	800878c <I2C_ITMasterCplt+0xac>
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	089b      	lsrs	r3, r3, #2
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008786:	b2db      	uxtb	r3, r3
 8008788:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800878a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fc38 	bl	8009002 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008796:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b60      	cmp	r3, #96	@ 0x60
 80087a2:	d002      	beq.n	80087aa <I2C_ITMasterCplt+0xca>
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d006      	beq.n	80087b8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fb0f 	bl	8008dd4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80087b6:	e054      	b.n	8008862 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b21      	cmp	r3, #33	@ 0x21
 80087c2:	d124      	bne.n	800880e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b40      	cmp	r3, #64	@ 0x40
 80087dc:	d10b      	bne.n	80087f6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fe ffef 	bl	80077d2 <HAL_I2C_MemTxCpltCallback>
}
 80087f4:	e035      	b.n	8008862 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7fe ffa3 	bl	8007752 <HAL_I2C_MasterTxCpltCallback>
}
 800880c:	e029      	b.n	8008862 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b22      	cmp	r3, #34	@ 0x22
 8008818:	d123      	bne.n	8008862 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2220      	movs	r2, #32
 800881e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b40      	cmp	r3, #64	@ 0x40
 8008832:	d10b      	bne.n	800884c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7fe ffce 	bl	80077e6 <HAL_I2C_MemRxCpltCallback>
}
 800884a:	e00a      	b.n	8008862 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7fe ff82 	bl	8007766 <HAL_I2C_MasterRxCpltCallback>
}
 8008862:	bf00      	nop
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	fe00e800 	.word	0xfe00e800
 8008870:	ffff0000 	.word	0xffff0000

08008874 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008896:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2220      	movs	r2, #32
 800889e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	2b21      	cmp	r3, #33	@ 0x21
 80088a4:	d002      	beq.n	80088ac <I2C_ITSlaveCplt+0x38>
 80088a6:	7afb      	ldrb	r3, [r7, #11]
 80088a8:	2b29      	cmp	r3, #41	@ 0x29
 80088aa:	d108      	bne.n	80088be <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80088ac:	f248 0101 	movw	r1, #32769	@ 0x8001
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 ffe7 	bl	8009884 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2221      	movs	r2, #33	@ 0x21
 80088ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80088bc:	e019      	b.n	80088f2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80088be:	7afb      	ldrb	r3, [r7, #11]
 80088c0:	2b22      	cmp	r3, #34	@ 0x22
 80088c2:	d002      	beq.n	80088ca <I2C_ITSlaveCplt+0x56>
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c8:	d108      	bne.n	80088dc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80088ca:	f248 0102 	movw	r1, #32770	@ 0x8002
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 ffd8 	bl	8009884 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2222      	movs	r2, #34	@ 0x22
 80088d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80088da:	e00a      	b.n	80088f2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80088dc:	7afb      	ldrb	r3, [r7, #11]
 80088de:	2b28      	cmp	r3, #40	@ 0x28
 80088e0:	d107      	bne.n	80088f2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80088e2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 ffcc 	bl	8009884 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008900:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6859      	ldr	r1, [r3, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	4b80      	ldr	r3, [pc, #512]	@ (8008b10 <I2C_ITSlaveCplt+0x29c>)
 800890e:	400b      	ands	r3, r1
 8008910:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fb75 	bl	8009002 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	0b9b      	lsrs	r3, r3, #14
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d07a      	beq.n	8008a1a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008932:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 8112 	beq.w	8008b62 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a73      	ldr	r2, [pc, #460]	@ (8008b14 <I2C_ITSlaveCplt+0x2a0>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d059      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a71      	ldr	r2, [pc, #452]	@ (8008b18 <I2C_ITSlaveCplt+0x2a4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d053      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a6f      	ldr	r2, [pc, #444]	@ (8008b1c <I2C_ITSlaveCplt+0x2a8>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d04d      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a6d      	ldr	r2, [pc, #436]	@ (8008b20 <I2C_ITSlaveCplt+0x2ac>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d047      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a6b      	ldr	r2, [pc, #428]	@ (8008b24 <I2C_ITSlaveCplt+0x2b0>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d041      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a69      	ldr	r2, [pc, #420]	@ (8008b28 <I2C_ITSlaveCplt+0x2b4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d03b      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a67      	ldr	r2, [pc, #412]	@ (8008b2c <I2C_ITSlaveCplt+0x2b8>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d035      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a65      	ldr	r2, [pc, #404]	@ (8008b30 <I2C_ITSlaveCplt+0x2bc>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d02f      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a63      	ldr	r2, [pc, #396]	@ (8008b34 <I2C_ITSlaveCplt+0x2c0>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d029      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a61      	ldr	r2, [pc, #388]	@ (8008b38 <I2C_ITSlaveCplt+0x2c4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d023      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a5f      	ldr	r2, [pc, #380]	@ (8008b3c <I2C_ITSlaveCplt+0x2c8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d01d      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a5d      	ldr	r2, [pc, #372]	@ (8008b40 <I2C_ITSlaveCplt+0x2cc>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d017      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a5b      	ldr	r2, [pc, #364]	@ (8008b44 <I2C_ITSlaveCplt+0x2d0>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d011      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a59      	ldr	r2, [pc, #356]	@ (8008b48 <I2C_ITSlaveCplt+0x2d4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d00b      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a57      	ldr	r2, [pc, #348]	@ (8008b4c <I2C_ITSlaveCplt+0x2d8>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d005      	beq.n	80089fe <I2C_ITSlaveCplt+0x18a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a55      	ldr	r2, [pc, #340]	@ (8008b50 <I2C_ITSlaveCplt+0x2dc>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d105      	bne.n	8008a0a <I2C_ITSlaveCplt+0x196>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	e004      	b.n	8008a14 <I2C_ITSlaveCplt+0x1a0>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008a18:	e0a3      	b.n	8008b62 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	0bdb      	lsrs	r3, r3, #15
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 809d 	beq.w	8008b62 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a36:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8090 	beq.w	8008b62 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a32      	ldr	r2, [pc, #200]	@ (8008b14 <I2C_ITSlaveCplt+0x2a0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d059      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a30      	ldr	r2, [pc, #192]	@ (8008b18 <I2C_ITSlaveCplt+0x2a4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d053      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a2e      	ldr	r2, [pc, #184]	@ (8008b1c <I2C_ITSlaveCplt+0x2a8>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d04d      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8008b20 <I2C_ITSlaveCplt+0x2ac>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d047      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a2a      	ldr	r2, [pc, #168]	@ (8008b24 <I2C_ITSlaveCplt+0x2b0>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d041      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a28      	ldr	r2, [pc, #160]	@ (8008b28 <I2C_ITSlaveCplt+0x2b4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d03b      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a26      	ldr	r2, [pc, #152]	@ (8008b2c <I2C_ITSlaveCplt+0x2b8>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d035      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a24      	ldr	r2, [pc, #144]	@ (8008b30 <I2C_ITSlaveCplt+0x2bc>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d02f      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a22      	ldr	r2, [pc, #136]	@ (8008b34 <I2C_ITSlaveCplt+0x2c0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d029      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a20      	ldr	r2, [pc, #128]	@ (8008b38 <I2C_ITSlaveCplt+0x2c4>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d023      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8008b3c <I2C_ITSlaveCplt+0x2c8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d01d      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1c      	ldr	r2, [pc, #112]	@ (8008b40 <I2C_ITSlaveCplt+0x2cc>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d017      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8008b44 <I2C_ITSlaveCplt+0x2d0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d011      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a18      	ldr	r2, [pc, #96]	@ (8008b48 <I2C_ITSlaveCplt+0x2d4>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d00b      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a16      	ldr	r2, [pc, #88]	@ (8008b4c <I2C_ITSlaveCplt+0x2d8>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d005      	beq.n	8008b02 <I2C_ITSlaveCplt+0x28e>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a14      	ldr	r2, [pc, #80]	@ (8008b50 <I2C_ITSlaveCplt+0x2dc>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d128      	bne.n	8008b54 <I2C_ITSlaveCplt+0x2e0>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	e027      	b.n	8008b5e <I2C_ITSlaveCplt+0x2ea>
 8008b0e:	bf00      	nop
 8008b10:	fe00e800 	.word	0xfe00e800
 8008b14:	40020010 	.word	0x40020010
 8008b18:	40020028 	.word	0x40020028
 8008b1c:	40020040 	.word	0x40020040
 8008b20:	40020058 	.word	0x40020058
 8008b24:	40020070 	.word	0x40020070
 8008b28:	40020088 	.word	0x40020088
 8008b2c:	400200a0 	.word	0x400200a0
 8008b30:	400200b8 	.word	0x400200b8
 8008b34:	40020410 	.word	0x40020410
 8008b38:	40020428 	.word	0x40020428
 8008b3c:	40020440 	.word	0x40020440
 8008b40:	40020458 	.word	0x40020458
 8008b44:	40020470 	.word	0x40020470
 8008b48:	40020488 	.word	0x40020488
 8008b4c:	400204a0 	.word	0x400204a0
 8008b50:	400204b8 	.word	0x400204b8
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	089b      	lsrs	r3, r3, #2
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d020      	beq.n	8008bb0 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f023 0304 	bic.w	r3, r3, #4
 8008b74:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b80:	b2d2      	uxtb	r2, r2
 8008b82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00c      	beq.n	8008bb0 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d005      	beq.n	8008bc6 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bbe:	f043 0204 	orr.w	r2, r3, #4
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	091b      	lsrs	r3, r3, #4
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d04a      	beq.n	8008c68 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	091b      	lsrs	r3, r3, #4
 8008bd6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d044      	beq.n	8008c68 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d128      	bne.n	8008c3a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b28      	cmp	r3, #40	@ 0x28
 8008bf2:	d108      	bne.n	8008c06 <I2C_ITSlaveCplt+0x392>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bfa:	d104      	bne.n	8008c06 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008bfc:	6979      	ldr	r1, [r7, #20]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f892 	bl	8008d28 <I2C_ITListenCplt>
 8008c04:	e030      	b.n	8008c68 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b29      	cmp	r3, #41	@ 0x29
 8008c10:	d10e      	bne.n	8008c30 <I2C_ITSlaveCplt+0x3bc>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008c18:	d00a      	beq.n	8008c30 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2210      	movs	r2, #16
 8008c20:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f9ed 	bl	8009002 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff fcfa 	bl	8008622 <I2C_ITSlaveSeqCplt>
 8008c2e:	e01b      	b.n	8008c68 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2210      	movs	r2, #16
 8008c36:	61da      	str	r2, [r3, #28]
 8008c38:	e016      	b.n	8008c68 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2210      	movs	r2, #16
 8008c40:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c46:	f043 0204 	orr.w	r2, r3, #4
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <I2C_ITSlaveCplt+0x3e8>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c5a:	d105      	bne.n	8008c68 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f8b6 	bl	8008dd4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d010      	beq.n	8008ca0 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f8a5 	bl	8008dd4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b28      	cmp	r3, #40	@ 0x28
 8008c94:	d141      	bne.n	8008d1a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008c96:	6979      	ldr	r1, [r7, #20]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f845 	bl	8008d28 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008c9e:	e03c      	b.n	8008d1a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ca8:	d014      	beq.n	8008cd4 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff fcb9 	bl	8008622 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8008d24 <I2C_ITSlaveCplt+0x4b0>)
 8008cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7fe fd76 	bl	80077be <HAL_I2C_ListenCpltCallback>
}
 8008cd2:	e022      	b.n	8008d1a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b22      	cmp	r3, #34	@ 0x22
 8008cde:	d10e      	bne.n	8008cfe <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7fe fd49 	bl	800778e <HAL_I2C_SlaveRxCpltCallback>
}
 8008cfc:	e00d      	b.n	8008d1a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7fe fd30 	bl	800777a <HAL_I2C_SlaveTxCpltCallback>
}
 8008d1a:	bf00      	nop
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	ffff0000 	.word	0xffff0000

08008d28 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a26      	ldr	r2, [pc, #152]	@ (8008dd0 <I2C_ITListenCplt+0xa8>)
 8008d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	089b      	lsrs	r3, r3, #2
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d022      	beq.n	8008da6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d012      	beq.n	8008da6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d84:	3b01      	subs	r3, #1
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9e:	f043 0204 	orr.w	r2, r3, #4
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008da6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fd6a 	bl	8009884 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2210      	movs	r2, #16
 8008db6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7fe fcfc 	bl	80077be <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	ffff0000 	.word	0xffff0000

08008dd4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008de4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a6d      	ldr	r2, [pc, #436]	@ (8008fa8 <I2C_ITError+0x1d4>)
 8008df2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	431a      	orrs	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	2b28      	cmp	r3, #40	@ 0x28
 8008e0a:	d005      	beq.n	8008e18 <I2C_ITError+0x44>
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	2b29      	cmp	r3, #41	@ 0x29
 8008e10:	d002      	beq.n	8008e18 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e16:	d10b      	bne.n	8008e30 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008e18:	2103      	movs	r1, #3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fd32 	bl	8009884 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2228      	movs	r2, #40	@ 0x28
 8008e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a60      	ldr	r2, [pc, #384]	@ (8008fac <I2C_ITError+0x1d8>)
 8008e2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8008e2e:	e030      	b.n	8008e92 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008e30:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fd25 	bl	8009884 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f8e1 	bl	8009002 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b60      	cmp	r3, #96	@ 0x60
 8008e4a:	d01f      	beq.n	8008e8c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f003 0320 	and.w	r3, r3, #32
 8008e5e:	2b20      	cmp	r3, #32
 8008e60:	d114      	bne.n	8008e8c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	2b10      	cmp	r3, #16
 8008e6e:	d109      	bne.n	8008e84 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2210      	movs	r2, #16
 8008e76:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7c:	f043 0204 	orr.w	r2, r3, #4
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e96:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d039      	beq.n	8008f14 <I2C_ITError+0x140>
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b11      	cmp	r3, #17
 8008ea4:	d002      	beq.n	8008eac <I2C_ITError+0xd8>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b21      	cmp	r3, #33	@ 0x21
 8008eaa:	d133      	bne.n	8008f14 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eba:	d107      	bne.n	8008ecc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008eca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fd fb2f 	bl	8006534 <HAL_DMA_GetState>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d017      	beq.n	8008f0c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee0:	4a33      	ldr	r2, [pc, #204]	@ (8008fb0 <I2C_ITError+0x1dc>)
 8008ee2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fc f9af 	bl	8005254 <HAL_DMA_Abort_IT>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d04d      	beq.n	8008f98 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008f06:	4610      	mov	r0, r2
 8008f08:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f0a:	e045      	b.n	8008f98 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f851 	bl	8008fb4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f12:	e041      	b.n	8008f98 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d039      	beq.n	8008f90 <I2C_ITError+0x1bc>
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2b12      	cmp	r3, #18
 8008f20:	d002      	beq.n	8008f28 <I2C_ITError+0x154>
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b22      	cmp	r3, #34	@ 0x22
 8008f26:	d133      	bne.n	8008f90 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f36:	d107      	bne.n	8008f48 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fd faf1 	bl	8006534 <HAL_DMA_GetState>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d017      	beq.n	8008f88 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5c:	4a14      	ldr	r2, [pc, #80]	@ (8008fb0 <I2C_ITError+0x1dc>)
 8008f5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fc f971 	bl	8005254 <HAL_DMA_Abort_IT>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d011      	beq.n	8008f9c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008f82:	4610      	mov	r0, r2
 8008f84:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f86:	e009      	b.n	8008f9c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f813 	bl	8008fb4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f8e:	e005      	b.n	8008f9c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f80f 	bl	8008fb4 <I2C_TreatErrorCallback>
  }
}
 8008f96:	e002      	b.n	8008f9e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f98:	bf00      	nop
 8008f9a:	e000      	b.n	8008f9e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008f9c:	bf00      	nop
}
 8008f9e:	bf00      	nop
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	ffff0000 	.word	0xffff0000
 8008fac:	08007a8b 	.word	0x08007a8b
 8008fb0:	08009355 	.word	0x08009355

08008fb4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b60      	cmp	r3, #96	@ 0x60
 8008fc6:	d10e      	bne.n	8008fe6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7fe fc15 	bl	800780e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008fe4:	e009      	b.n	8008ffa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7fe fc00 	bl	80077fa <HAL_I2C_ErrorCallback>
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	f003 0302 	and.w	r3, r3, #2
 8009014:	2b02      	cmp	r3, #2
 8009016:	d103      	bne.n	8009020 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2200      	movs	r2, #0
 800901e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b01      	cmp	r3, #1
 800902c:	d007      	beq.n	800903e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	699a      	ldr	r2, [r3, #24]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f042 0201 	orr.w	r2, r2, #1
 800903c:	619a      	str	r2, [r3, #24]
  }
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b084      	sub	sp, #16
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009056:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009066:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800906c:	b29b      	uxth	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d104      	bne.n	800907c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009072:	2120      	movs	r1, #32
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 fb81 	bl	800977c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800907a:	e02d      	b.n	80090d8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009084:	441a      	add	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800908e:	b29b      	uxth	r3, r3
 8009090:	2bff      	cmp	r3, #255	@ 0xff
 8009092:	d903      	bls.n	800909c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	22ff      	movs	r2, #255	@ 0xff
 8009098:	851a      	strh	r2, [r3, #40]	@ 0x28
 800909a:	e004      	b.n	80090a6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ae:	4619      	mov	r1, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3328      	adds	r3, #40	@ 0x28
 80090b6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80090bc:	f7fb fb42 	bl	8004744 <HAL_DMA_Start_IT>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d004      	beq.n	80090d0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80090c6:	2110      	movs	r1, #16
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f7ff fe83 	bl	8008dd4 <I2C_ITError>
}
 80090ce:	e003      	b.n	80090d8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80090d0:	2140      	movs	r1, #64	@ 0x40
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fb52 	bl	800977c <I2C_Enable_IRQ>
}
 80090d8:	bf00      	nop
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d076      	beq.n	80091e8 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a71      	ldr	r2, [pc, #452]	@ (80092c8 <I2C_DMAError+0x1e8>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d059      	beq.n	80091ba <I2C_DMAError+0xda>
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a6f      	ldr	r2, [pc, #444]	@ (80092cc <I2C_DMAError+0x1ec>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d053      	beq.n	80091ba <I2C_DMAError+0xda>
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a6d      	ldr	r2, [pc, #436]	@ (80092d0 <I2C_DMAError+0x1f0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d04d      	beq.n	80091ba <I2C_DMAError+0xda>
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a6b      	ldr	r2, [pc, #428]	@ (80092d4 <I2C_DMAError+0x1f4>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d047      	beq.n	80091ba <I2C_DMAError+0xda>
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a69      	ldr	r2, [pc, #420]	@ (80092d8 <I2C_DMAError+0x1f8>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d041      	beq.n	80091ba <I2C_DMAError+0xda>
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a67      	ldr	r2, [pc, #412]	@ (80092dc <I2C_DMAError+0x1fc>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d03b      	beq.n	80091ba <I2C_DMAError+0xda>
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a65      	ldr	r2, [pc, #404]	@ (80092e0 <I2C_DMAError+0x200>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d035      	beq.n	80091ba <I2C_DMAError+0xda>
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a63      	ldr	r2, [pc, #396]	@ (80092e4 <I2C_DMAError+0x204>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d02f      	beq.n	80091ba <I2C_DMAError+0xda>
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a61      	ldr	r2, [pc, #388]	@ (80092e8 <I2C_DMAError+0x208>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d029      	beq.n	80091ba <I2C_DMAError+0xda>
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a5f      	ldr	r2, [pc, #380]	@ (80092ec <I2C_DMAError+0x20c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d023      	beq.n	80091ba <I2C_DMAError+0xda>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a5d      	ldr	r2, [pc, #372]	@ (80092f0 <I2C_DMAError+0x210>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d01d      	beq.n	80091ba <I2C_DMAError+0xda>
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a5b      	ldr	r2, [pc, #364]	@ (80092f4 <I2C_DMAError+0x214>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d017      	beq.n	80091ba <I2C_DMAError+0xda>
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a59      	ldr	r2, [pc, #356]	@ (80092f8 <I2C_DMAError+0x218>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d011      	beq.n	80091ba <I2C_DMAError+0xda>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a57      	ldr	r2, [pc, #348]	@ (80092fc <I2C_DMAError+0x21c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d00b      	beq.n	80091ba <I2C_DMAError+0xda>
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a55      	ldr	r2, [pc, #340]	@ (8009300 <I2C_DMAError+0x220>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d005      	beq.n	80091ba <I2C_DMAError+0xda>
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a53      	ldr	r2, [pc, #332]	@ (8009304 <I2C_DMAError+0x224>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d109      	bne.n	80091ce <I2C_DMAError+0xee>
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bf0c      	ite	eq
 80091c6:	2301      	moveq	r3, #1
 80091c8:	2300      	movne	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	e008      	b.n	80091e0 <I2C_DMAError+0x100>
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	bf0c      	ite	eq
 80091da:	2301      	moveq	r3, #1
 80091dc:	2300      	movne	r3, #0
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80091e4:	2301      	movs	r3, #1
 80091e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 8098 	beq.w	8009322 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a33      	ldr	r2, [pc, #204]	@ (80092c8 <I2C_DMAError+0x1e8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d059      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a31      	ldr	r2, [pc, #196]	@ (80092cc <I2C_DMAError+0x1ec>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d053      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a2f      	ldr	r2, [pc, #188]	@ (80092d0 <I2C_DMAError+0x1f0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d04d      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a2d      	ldr	r2, [pc, #180]	@ (80092d4 <I2C_DMAError+0x1f4>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d047      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a2b      	ldr	r2, [pc, #172]	@ (80092d8 <I2C_DMAError+0x1f8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d041      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a29      	ldr	r2, [pc, #164]	@ (80092dc <I2C_DMAError+0x1fc>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d03b      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a27      	ldr	r2, [pc, #156]	@ (80092e0 <I2C_DMAError+0x200>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d035      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a25      	ldr	r2, [pc, #148]	@ (80092e4 <I2C_DMAError+0x204>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d02f      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a23      	ldr	r2, [pc, #140]	@ (80092e8 <I2C_DMAError+0x208>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d029      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a21      	ldr	r2, [pc, #132]	@ (80092ec <I2C_DMAError+0x20c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d023      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a1f      	ldr	r2, [pc, #124]	@ (80092f0 <I2C_DMAError+0x210>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d01d      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a1d      	ldr	r2, [pc, #116]	@ (80092f4 <I2C_DMAError+0x214>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d017      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a1b      	ldr	r2, [pc, #108]	@ (80092f8 <I2C_DMAError+0x218>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d011      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a19      	ldr	r2, [pc, #100]	@ (80092fc <I2C_DMAError+0x21c>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d00b      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a17      	ldr	r2, [pc, #92]	@ (8009300 <I2C_DMAError+0x220>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d005      	beq.n	80092b2 <I2C_DMAError+0x1d2>
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a15      	ldr	r2, [pc, #84]	@ (8009304 <I2C_DMAError+0x224>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d12a      	bne.n	8009308 <I2C_DMAError+0x228>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bf0c      	ite	eq
 80092be:	2301      	moveq	r3, #1
 80092c0:	2300      	movne	r3, #0
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	e029      	b.n	800931a <I2C_DMAError+0x23a>
 80092c6:	bf00      	nop
 80092c8:	40020010 	.word	0x40020010
 80092cc:	40020028 	.word	0x40020028
 80092d0:	40020040 	.word	0x40020040
 80092d4:	40020058 	.word	0x40020058
 80092d8:	40020070 	.word	0x40020070
 80092dc:	40020088 	.word	0x40020088
 80092e0:	400200a0 	.word	0x400200a0
 80092e4:	400200b8 	.word	0x400200b8
 80092e8:	40020410 	.word	0x40020410
 80092ec:	40020428 	.word	0x40020428
 80092f0:	40020440 	.word	0x40020440
 80092f4:	40020458 	.word	0x40020458
 80092f8:	40020470 	.word	0x40020470
 80092fc:	40020488 	.word	0x40020488
 8009300:	400204a0 	.word	0x400204a0
 8009304:	400204b8 	.word	0x400204b8
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	bf0c      	ite	eq
 8009314:	2301      	moveq	r3, #1
 8009316:	2300      	movne	r3, #0
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800931e:	2301      	movs	r3, #1
 8009320:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7fd f914 	bl	8006550 <HAL_DMA_GetError>
 8009328:	4603      	mov	r3, r0
 800932a:	2b02      	cmp	r3, #2
 800932c:	d00e      	beq.n	800934c <I2C_DMAError+0x26c>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009342:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009344:	2110      	movs	r1, #16
 8009346:	68b8      	ldr	r0, [r7, #8]
 8009348:	f7ff fd44 	bl	8008dd4 <I2C_ITError>
  }
}
 800934c:	bf00      	nop
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009360:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936e:	2200      	movs	r2, #0
 8009370:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800937e:	2200      	movs	r2, #0
 8009380:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff fe16 	bl	8008fb4 <I2C_TreatErrorCallback>
}
 8009388:	bf00      	nop
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	603b      	str	r3, [r7, #0]
 800939c:	4613      	mov	r3, r2
 800939e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093a0:	e03b      	b.n	800941a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 f8d6 	bl	8009558 <I2C_IsErrorOccurred>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e041      	b.n	800943a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093bc:	d02d      	beq.n	800941a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093be:	f7f9 f9ef 	bl	80027a0 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d302      	bcc.n	80093d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d122      	bne.n	800941a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699a      	ldr	r2, [r3, #24]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	4013      	ands	r3, r2
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	bf0c      	ite	eq
 80093e4:	2301      	moveq	r3, #1
 80093e6:	2300      	movne	r3, #0
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	461a      	mov	r2, r3
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d113      	bne.n	800941a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f6:	f043 0220 	orr.w	r2, r3, #32
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2220      	movs	r2, #32
 8009402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e00f      	b.n	800943a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	699a      	ldr	r2, [r3, #24]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4013      	ands	r3, r2
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	429a      	cmp	r2, r3
 8009428:	bf0c      	ite	eq
 800942a:	2301      	moveq	r3, #1
 800942c:	2300      	movne	r3, #0
 800942e:	b2db      	uxtb	r3, r3
 8009430:	461a      	mov	r2, r3
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	429a      	cmp	r2, r3
 8009436:	d0b4      	beq.n	80093a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800944e:	e033      	b.n	80094b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	68b9      	ldr	r1, [r7, #8]
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 f87f 	bl	8009558 <I2C_IsErrorOccurred>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e031      	b.n	80094c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946a:	d025      	beq.n	80094b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800946c:	f7f9 f998 	bl	80027a0 <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	429a      	cmp	r2, r3
 800947a:	d302      	bcc.n	8009482 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d11a      	bne.n	80094b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b02      	cmp	r3, #2
 800948e:	d013      	beq.n	80094b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009494:	f043 0220 	orr.w	r2, r3, #32
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2220      	movs	r2, #32
 80094a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e007      	b.n	80094c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	f003 0302 	and.w	r3, r3, #2
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d1c4      	bne.n	8009450 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094dc:	e02f      	b.n	800953e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	68b9      	ldr	r1, [r7, #8]
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 f838 	bl	8009558 <I2C_IsErrorOccurred>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e02d      	b.n	800954e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f2:	f7f9 f955 	bl	80027a0 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d302      	bcc.n	8009508 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d11a      	bne.n	800953e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b20      	cmp	r3, #32
 8009514:	d013      	beq.n	800953e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800951a:	f043 0220 	orr.w	r2, r3, #32
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2220      	movs	r2, #32
 8009526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e007      	b.n	800954e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b20      	cmp	r3, #32
 800954a:	d1c8      	bne.n	80094de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	@ 0x28
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	f003 0310 	and.w	r3, r3, #16
 8009580:	2b00      	cmp	r3, #0
 8009582:	d068      	beq.n	8009656 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2210      	movs	r2, #16
 800958a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800958c:	e049      	b.n	8009622 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d045      	beq.n	8009622 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009596:	f7f9 f903 	bl	80027a0 <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d302      	bcc.n	80095ac <I2C_IsErrorOccurred+0x54>
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d13a      	bne.n	8009622 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095ce:	d121      	bne.n	8009614 <I2C_IsErrorOccurred+0xbc>
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095d6:	d01d      	beq.n	8009614 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80095d8:	7cfb      	ldrb	r3, [r7, #19]
 80095da:	2b20      	cmp	r3, #32
 80095dc:	d01a      	beq.n	8009614 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80095ee:	f7f9 f8d7 	bl	80027a0 <HAL_GetTick>
 80095f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095f4:	e00e      	b.n	8009614 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80095f6:	f7f9 f8d3 	bl	80027a0 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	2b19      	cmp	r3, #25
 8009602:	d907      	bls.n	8009614 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	f043 0320 	orr.w	r3, r3, #32
 800960a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009612:	e006      	b.n	8009622 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	f003 0320 	and.w	r3, r3, #32
 800961e:	2b20      	cmp	r3, #32
 8009620:	d1e9      	bne.n	80095f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	f003 0320 	and.w	r3, r3, #32
 800962c:	2b20      	cmp	r3, #32
 800962e:	d003      	beq.n	8009638 <I2C_IsErrorOccurred+0xe0>
 8009630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0aa      	beq.n	800958e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800963c:	2b00      	cmp	r3, #0
 800963e:	d103      	bne.n	8009648 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2220      	movs	r2, #32
 8009646:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	f043 0304 	orr.w	r3, r3, #4
 800964e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00b      	beq.n	8009680 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	f043 0301 	orr.w	r3, r3, #1
 800966e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00b      	beq.n	80096a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	f043 0308 	orr.w	r3, r3, #8
 8009690:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800969a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00b      	beq.n	80096c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	f043 0302 	orr.w	r3, r3, #2
 80096b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80096c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d01c      	beq.n	8009706 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7ff fc98 	bl	8009002 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6859      	ldr	r1, [r3, #4]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009714 <I2C_IsErrorOccurred+0x1bc>)
 80096de:	400b      	ands	r3, r1
 80096e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	431a      	orrs	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2220      	movs	r2, #32
 80096f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009706:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800970a:	4618      	mov	r0, r3
 800970c:	3728      	adds	r7, #40	@ 0x28
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	fe00e800 	.word	0xfe00e800

08009718 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	607b      	str	r3, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	817b      	strh	r3, [r7, #10]
 8009726:	4613      	mov	r3, r2
 8009728:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800972a:	897b      	ldrh	r3, [r7, #10]
 800972c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009730:	7a7b      	ldrb	r3, [r7, #9]
 8009732:	041b      	lsls	r3, r3, #16
 8009734:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009738:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	4313      	orrs	r3, r2
 8009742:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009746:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	0d5b      	lsrs	r3, r3, #21
 8009752:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009756:	4b08      	ldr	r3, [pc, #32]	@ (8009778 <I2C_TransferConfig+0x60>)
 8009758:	430b      	orrs	r3, r1
 800975a:	43db      	mvns	r3, r3
 800975c:	ea02 0103 	and.w	r1, r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	430a      	orrs	r2, r1
 8009768:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800976a:	bf00      	nop
 800976c:	371c      	adds	r7, #28
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	03ff63ff 	.word	0x03ff63ff

0800977c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009790:	4a39      	ldr	r2, [pc, #228]	@ (8009878 <I2C_Enable_IRQ+0xfc>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d032      	beq.n	80097fc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800979a:	4a38      	ldr	r2, [pc, #224]	@ (800987c <I2C_Enable_IRQ+0x100>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d02d      	beq.n	80097fc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80097a4:	4a36      	ldr	r2, [pc, #216]	@ (8009880 <I2C_Enable_IRQ+0x104>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d028      	beq.n	80097fc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80097aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	da03      	bge.n	80097ba <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80097b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80097ba:	887b      	ldrh	r3, [r7, #2]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80097ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80097cc:	887b      	ldrh	r3, [r7, #2]
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80097dc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80097de:	887b      	ldrh	r3, [r7, #2]
 80097e0:	2b10      	cmp	r3, #16
 80097e2:	d103      	bne.n	80097ec <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80097ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80097ec:	887b      	ldrh	r3, [r7, #2]
 80097ee:	2b20      	cmp	r3, #32
 80097f0:	d133      	bne.n	800985a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f043 0320 	orr.w	r3, r3, #32
 80097f8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80097fa:	e02e      	b.n	800985a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80097fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009800:	2b00      	cmp	r3, #0
 8009802:	da03      	bge.n	800980c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800980a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800980c:	887b      	ldrh	r3, [r7, #2]
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b00      	cmp	r3, #0
 8009814:	d003      	beq.n	800981e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800981c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800981e:	887b      	ldrh	r3, [r7, #2]
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	2b00      	cmp	r3, #0
 8009826:	d003      	beq.n	8009830 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800982e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009830:	887b      	ldrh	r3, [r7, #2]
 8009832:	2b10      	cmp	r3, #16
 8009834:	d103      	bne.n	800983e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800983c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800983e:	887b      	ldrh	r3, [r7, #2]
 8009840:	2b20      	cmp	r3, #32
 8009842:	d103      	bne.n	800984c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800984a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800984c:	887b      	ldrh	r3, [r7, #2]
 800984e:	2b40      	cmp	r3, #64	@ 0x40
 8009850:	d103      	bne.n	800985a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009858:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6819      	ldr	r1, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	430a      	orrs	r2, r1
 8009868:	601a      	str	r2, [r3, #0]
}
 800986a:	bf00      	nop
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	08007c93 	.word	0x08007c93
 800987c:	080080d9 	.word	0x080080d9
 8009880:	08007e79 	.word	0x08007e79

08009884 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009890:	2300      	movs	r3, #0
 8009892:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009894:	887b      	ldrh	r3, [r7, #2]
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00f      	beq.n	80098be <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80098a4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80098b2:	2b28      	cmp	r3, #40	@ 0x28
 80098b4:	d003      	beq.n	80098be <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80098bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80098be:	887b      	ldrh	r3, [r7, #2]
 80098c0:	f003 0302 	and.w	r3, r3, #2
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00f      	beq.n	80098e8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80098ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80098dc:	2b28      	cmp	r3, #40	@ 0x28
 80098de:	d003      	beq.n	80098e8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80098e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80098e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	da03      	bge.n	80098f8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80098f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80098f8:	887b      	ldrh	r3, [r7, #2]
 80098fa:	2b10      	cmp	r3, #16
 80098fc:	d103      	bne.n	8009906 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009904:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009906:	887b      	ldrh	r3, [r7, #2]
 8009908:	2b20      	cmp	r3, #32
 800990a:	d103      	bne.n	8009914 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f043 0320 	orr.w	r3, r3, #32
 8009912:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009914:	887b      	ldrh	r3, [r7, #2]
 8009916:	2b40      	cmp	r3, #64	@ 0x40
 8009918:	d103      	bne.n	8009922 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009920:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6819      	ldr	r1, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	43da      	mvns	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	400a      	ands	r2, r1
 8009932:	601a      	str	r2, [r3, #0]
}
 8009934:	bf00      	nop
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b20      	cmp	r3, #32
 8009954:	d138      	bne.n	80099c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800995c:	2b01      	cmp	r3, #1
 800995e:	d101      	bne.n	8009964 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009960:	2302      	movs	r3, #2
 8009962:	e032      	b.n	80099ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2224      	movs	r2, #36	@ 0x24
 8009970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0201 	bic.w	r2, r2, #1
 8009982:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009992:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6819      	ldr	r1, [r3, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	430a      	orrs	r2, r1
 80099a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f042 0201 	orr.w	r2, r2, #1
 80099b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2220      	movs	r2, #32
 80099b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	e000      	b.n	80099ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80099c8:	2302      	movs	r3, #2
  }
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	d139      	bne.n	8009a60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d101      	bne.n	80099fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80099f6:	2302      	movs	r3, #2
 80099f8:	e033      	b.n	8009a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2224      	movs	r2, #36	@ 0x24
 8009a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f022 0201 	bic.w	r2, r2, #1
 8009a18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009a28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	021b      	lsls	r3, r3, #8
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 0201 	orr.w	r2, r2, #1
 8009a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	e000      	b.n	8009a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009a60:	2302      	movs	r3, #2
  }
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
	...

08009a70 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e070      	b.n	8009b64 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d106      	bne.n	8009a9c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7f7 ff84 	bl	80019a4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0201 	orr.w	r2, r2, #1
 8009ab2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0201 	bic.w	r2, r2, #1
 8009ac2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009ad2:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009af2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009b02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a19      	ldr	r2, [pc, #100]	@ (8009b6c <HAL_JPEG_Init+0xfc>)
 8009b08:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a18      	ldr	r2, [pc, #96]	@ (8009b70 <HAL_JPEG_Init+0x100>)
 8009b0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fccd 	bl	800a4bc <JPEG_Set_HuffEnc_Mem>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d004      	beq.n	8009b32 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e018      	b.n	8009b64 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b40:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	08019090 	.word	0x08019090
 8009b70:	080190d0 	.word	0x080190d0

08009b74 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <HAL_JPEG_GetInfo+0x16>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d101      	bne.n	8009b8e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e083      	b.n	8009c96 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	f003 0303 	and.w	r3, r3, #3
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d103      	bne.n	8009ba4 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2210      	movs	r2, #16
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e017      	b.n	8009bd4 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d103      	bne.n	8009bba <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	e00c      	b.n	8009bd4 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f003 0303 	and.w	r3, r3, #3
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d103      	bne.n	8009bd0 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2230      	movs	r2, #48	@ 0x30
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	e001      	b.n	8009bd4 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e060      	b.n	8009c96 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	0c1b      	lsrs	r3, r3, #16
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	0c1b      	lsrs	r3, r3, #16
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b10      	cmp	r3, #16
 8009bf6:	d003      	beq.n	8009c00 <HAL_JPEG_GetInfo+0x8c>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b30      	cmp	r3, #48	@ 0x30
 8009bfe:	d140      	bne.n	8009c82 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	091b      	lsrs	r3, r3, #4
 8009c08:	f003 030f 	and.w	r3, r3, #15
 8009c0c:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	091b      	lsrs	r3, r3, #4
 8009c16:	f003 030f 	and.w	r3, r3, #15
 8009c1a:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	091b      	lsrs	r3, r3, #4
 8009c24:	f003 030f 	and.w	r3, r3, #15
 8009c28:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d109      	bne.n	8009c44 <HAL_JPEG_GetInfo+0xd0>
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d106      	bne.n	8009c44 <HAL_JPEG_GetInfo+0xd0>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d103      	bne.n	8009c44 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	605a      	str	r2, [r3, #4]
 8009c42:	e01d      	b.n	8009c80 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d109      	bne.n	8009c5e <HAL_JPEG_GetInfo+0xea>
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d106      	bne.n	8009c5e <HAL_JPEG_GetInfo+0xea>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d103      	bne.n	8009c5e <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	605a      	str	r2, [r3, #4]
 8009c5c:	e010      	b.n	8009c80 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d109      	bne.n	8009c78 <HAL_JPEG_GetInfo+0x104>
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <HAL_JPEG_GetInfo+0x104>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d103      	bne.n	8009c78 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	2201      	movs	r2, #1
 8009c74:	605a      	str	r2, [r3, #4]
 8009c76:	e003      	b.n	8009c80 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009c7e:	e003      	b.n	8009c88 <HAL_JPEG_GetInfo+0x114>
 8009c80:	e002      	b.n	8009c88 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2200      	movs	r2, #0
 8009c86:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 fd09 	bl	800b6a0 <JPEG_GetQuality>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	60f8      	str	r0, [r7, #12]
 8009ca6:	60b9      	str	r1, [r7, #8]
 8009ca8:	607a      	str	r2, [r7, #4]
 8009caa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d005      	beq.n	8009cbe <HAL_JPEG_Decode_DMA+0x20>
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <HAL_JPEG_Decode_DMA+0x20>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e04c      	b.n	8009d5c <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d101      	bne.n	8009cd0 <HAL_JPEG_Decode_DMA+0x32>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e045      	b.n	8009d5c <HAL_JPEG_Decode_DMA+0xbe>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d134      	bne.n	8009d4e <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2204      	movs	r2, #4
 8009ce8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cf0:	f023 020f 	bic.w	r2, r3, #15
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cfc:	f043 020e 	orr.w	r2, r3, #14
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 fe49 	bl	800a9c0 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f001 f96a 	bl	800b008 <JPEG_DMA_StartProcess>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00f      	beq.n	8009d5a <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2206      	movs	r2, #6
 8009d3e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e006      	b.n	8009d5c <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8009d56:	2302      	movs	r3, #2
 8009d58:	e000      	b.n	8009d5c <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d76:	f003 030c 	and.w	r3, r3, #12
 8009d7a:	2b0c      	cmp	r3, #12
 8009d7c:	d116      	bne.n	8009dac <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	f003 0302 	and.w	r3, r3, #2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d033      	beq.n	8009e06 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009da2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	655a      	str	r2, [r3, #84]	@ 0x54
 8009daa:	e02c      	b.n	8009e06 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009db0:	f003 030c 	and.w	r3, r3, #12
 8009db4:	2b08      	cmp	r3, #8
 8009db6:	d126      	bne.n	8009e06 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d009      	beq.n	8009dd6 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dc6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f043 0306 	orr.w	r3, r3, #6
 8009dd4:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	f003 0302 	and.w	r3, r3, #2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d009      	beq.n	8009df4 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8009df2:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	43da      	mvns	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	400a      	ands	r2, r1
 8009e04:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8009e1e:	bf00      	nop
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8009e32:	bf00      	nop
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b083      	sub	sp, #12
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	3b03      	subs	r3, #3
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d813      	bhi.n	8009e92 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e6e:	f003 030c 	and.w	r3, r3, #12
 8009e72:	2b08      	cmp	r3, #8
 8009e74:	d103      	bne.n	8009e7e <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fe16 	bl	800aaa8 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8009e7c:	e00b      	b.n	8009e96 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e82:	f003 030c 	and.w	r3, r3, #12
 8009e86:	2b0c      	cmp	r3, #12
 8009e88:	d105      	bne.n	8009e96 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 f956 	bl	800b13c <JPEG_DMA_ContinueProcess>
      break;
 8009e90:	e001      	b.n	8009e96 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8009e92:	bf00      	nop
 8009e94:	e000      	b.n	8009e98 <HAL_JPEG_IRQHandler+0x44>
      break;
 8009e96:	bf00      	nop
  }
}
 8009e98:	bf00      	nop
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b08b      	sub	sp, #44	@ 0x2c
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	61fb      	str	r3, [r7, #28]
 8009eb6:	e020      	b.n	8009efa <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8009ec2:	6a3a      	ldr	r2, [r7, #32]
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ecc:	d90f      	bls.n	8009eee <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e055      	b.n	8009f7e <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	68b9      	ldr	r1, [r7, #8]
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	440b      	add	r3, r1
 8009edc:	3201      	adds	r2, #1
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	701a      	strb	r2, [r3, #0]
      p++;
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	623b      	str	r3, [r7, #32]
      i--;
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eea:	3b01      	subs	r3, #1
 8009eec:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8009eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1ee      	bne.n	8009ed2 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	61fb      	str	r3, [r7, #28]
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	2b0f      	cmp	r3, #15
 8009efe:	d9db      	bls.n	8009eb8 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	4413      	add	r3, r2
 8009f06:	2200      	movs	r2, #0
 8009f08:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	6a3a      	ldr	r2, [r7, #32]
 8009f0e:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	617b      	str	r3, [r7, #20]
  p = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8009f1e:	e027      	b.n	8009f70 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	4413      	add	r3, r2
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	601a      	str	r2, [r3, #0]
      p++;
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	623b      	str	r3, [r7, #32]
      code++;
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	3301      	adds	r3, #1
 8009f36:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d0eb      	beq.n	8009f20 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b1f      	cmp	r3, #31
 8009f4c:	d901      	bls.n	8009f52 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e015      	b.n	8009f7e <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009f52:	2201      	movs	r2, #1
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5a:	69ba      	ldr	r2, [r7, #24]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d301      	bcc.n	8009f64 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e00c      	b.n	8009f7e <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	61bb      	str	r3, [r7, #24]
    si++;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	4413      	add	r3, r2
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1dd      	bne.n	8009f38 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	372c      	adds	r7, #44	@ 0x2c
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009f96:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009f9a:	6018      	str	r0, [r3, #0]
 8009f9c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009fa0:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009fa4:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009fa6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009faa:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	f107 0308 	add.w	r3, r7, #8
 8009fb4:	f107 020c 	add.w	r2, r7, #12
 8009fb8:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8009fbc:	f7ff ff70 	bl	8009ea0 <JPEG_Bits_To_SizeCodes>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8009fc6:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009fce:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009fd2:	e075      	b.n	800a0c0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8009fda:	e067      	b.n	800a0ac <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8009fdc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009fe0:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009fea:	4413      	add	r3, r2
 8009fec:	3310      	adds	r3, #16
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8009ff4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d103      	bne.n	800a004 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8009ffc:	23a0      	movs	r3, #160	@ 0xa0
 8009ffe:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800a002:	e021      	b.n	800a048 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a004:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a008:	2bf0      	cmp	r3, #240	@ 0xf0
 800a00a:	d103      	bne.n	800a014 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800a00c:	23a1      	movs	r3, #161	@ 0xa1
 800a00e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800a012:	e019      	b.n	800a048 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800a014:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a018:	091b      	lsrs	r3, r3, #4
 800a01a:	f003 030f 	and.w	r3, r3, #15
 800a01e:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800a022:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a026:	f003 030f 	and.w	r3, r3, #15
 800a02a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800a02e:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	461a      	mov	r2, r3
 800a03c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a040:	4413      	add	r3, r2
 800a042:	3b01      	subs	r3, #1
 800a044:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a048:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a04c:	2ba1      	cmp	r3, #161	@ 0xa1
 800a04e:	d901      	bls.n	800a054 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a050:	2301      	movs	r3, #1
 800a052:	e035      	b.n	800a0c0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a054:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a058:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a05c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800a060:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a064:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a068:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a06c:	6819      	ldr	r1, [r3, #0]
 800a06e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a072:	3328      	adds	r3, #40	@ 0x28
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	440b      	add	r3, r1
 800a078:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a07a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a07e:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800a082:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a086:	4413      	add	r3, r2
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	b2d9      	uxtb	r1, r3
 800a08e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a092:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a09c:	4413      	add	r3, r2
 800a09e:	460a      	mov	r2, r1
 800a0a0:	701a      	strb	r2, [r3, #0]
      k++;
 800a0a2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800a0ac:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a0b0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d38e      	bcc.n	8009fdc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a0d6:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a0da:	6018      	str	r0, [r3, #0]
 800a0dc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a0e0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a0e4:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a0e6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a0ea:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a0ee:	6818      	ldr	r0, [r3, #0]
 800a0f0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800a0f4:	f107 0208 	add.w	r2, r7, #8
 800a0f8:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800a0fc:	f7ff fed0 	bl	8009ea0 <JPEG_Bits_To_SizeCodes>
 800a100:	4603      	mov	r3, r0
 800a102:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800a106:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800a10e:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800a112:	e048      	b.n	800a1a6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800a11a:	e03d      	b.n	800a198 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800a11c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a120:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a12a:	4413      	add	r3, r2
 800a12c:	3310      	adds	r3, #16
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a134:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a138:	2b0b      	cmp	r3, #11
 800a13a:	d901      	bls.n	800a140 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a13c:	2301      	movs	r3, #1
 800a13e:	e032      	b.n	800a1a6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a140:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a144:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800a148:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800a14c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a150:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a154:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a15e:	3302      	adds	r3, #2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	440b      	add	r3, r1
 800a164:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a166:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a16a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800a16e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a172:	4413      	add	r3, r2
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	3b01      	subs	r3, #1
 800a178:	b2d9      	uxtb	r1, r3
 800a17a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a17e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a188:	4413      	add	r3, r2
 800a18a:	460a      	mov	r2, r1
 800a18c:	701a      	strb	r2, [r3, #0]
      k++;
 800a18e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a192:	3301      	adds	r3, #1
 800a194:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800a198:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800a19c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d3bb      	bcc.n	800a11c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b09a      	sub	sp, #104	@ 0x68
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d106      	bne.n	800a1d8 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800a1d2:	3318      	adds	r3, #24
 800a1d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1d6:	e00f      	b.n	800a1f8 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d106      	bne.n	800a1f4 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800a1ee:	3318      	adds	r3, #24
 800a1f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1f2:	e001      	b.n	800a1f8 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e059      	b.n	800a2ac <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d055      	beq.n	800a2aa <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a1fe:	f107 0314 	add.w	r3, r7, #20
 800a202:	4619      	mov	r1, r3
 800a204:	68b8      	ldr	r0, [r7, #8]
 800a206:	f7ff ff60 	bl	800a0ca <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800a20a:	4603      	mov	r3, r0
 800a20c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800a210:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800a218:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a21c:	e046      	b.n	800a2ac <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800a21e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a220:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800a222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a224:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a228:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a22a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a22c:	3304      	adds	r3, #4
 800a22e:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800a230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a232:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a236:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800a238:	230c      	movs	r3, #12
 800a23a:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800a23c:	e032      	b.n	800a2a4 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800a23e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a240:	3b01      	subs	r3, #1
 800a242:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 800a244:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a246:	3b04      	subs	r3, #4
 800a248:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a24a:	f107 0214 	add.w	r2, r7, #20
 800a24e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a250:	4413      	add	r3, r2
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	021b      	lsls	r3, r3, #8
 800a256:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a25a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a25c:	3302      	adds	r3, #2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	3368      	adds	r3, #104	@ 0x68
 800a262:	443b      	add	r3, r7
 800a264:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	4313      	orrs	r3, r2
 800a26c:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800a26e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a270:	3b01      	subs	r3, #1
 800a272:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a274:	f107 0214 	add.w	r2, r7, #20
 800a278:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a27a:	4413      	add	r3, r2
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	021b      	lsls	r3, r3, #8
 800a280:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a286:	3302      	adds	r3, #2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	3368      	adds	r3, #104	@ 0x68
 800a28c:	443b      	add	r3, r7
 800a28e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a292:	b2db      	uxtb	r3, r3
 800a294:	4313      	orrs	r3, r2
 800a296:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a29a:	041a      	lsls	r2, r3, #16
 800a29c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a29e:	431a      	orrs	r2, r3
 800a2a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2a2:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a2a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d8c9      	bhi.n	800a23e <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3768      	adds	r7, #104	@ 0x68
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a2c0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a2c4:	6018      	str	r0, [r3, #0]
 800a2c6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a2ca:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a2ce:	6019      	str	r1, [r3, #0]
 800a2d0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a2d4:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800a2d8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a2da:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a2de:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2ea:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800a2ee:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800a2f2:	6812      	ldr	r2, [r2, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d10c      	bne.n	800a312 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a2f8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a2fc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a308:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a30c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800a310:	e01d      	b.n	800a34e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a312:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a316:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a322:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800a326:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800a32a:	6812      	ldr	r2, [r2, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d10c      	bne.n	800a34a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a330:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a334:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a340:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a344:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800a348:	e001      	b.n	800a34e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e0a8      	b.n	800a4a0 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800a34e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a352:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 80a0 	beq.w	800a49e <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800a35e:	f107 0214 	add.w	r2, r7, #20
 800a362:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a366:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a36a:	4611      	mov	r1, r2
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	f7ff fe0c 	bl	8009f8a <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800a372:	4603      	mov	r3, r0
 800a374:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800a378:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800a380:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800a384:	e08c      	b.n	800a4a0 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800a386:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a38a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800a38e:	2300      	movs	r3, #0
 800a390:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800a394:	e00e      	b.n	800a3b4 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800a396:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a39a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a39e:	601a      	str	r2, [r3, #0]
      addressDef++;
 800a3a0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800a3aa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800a3b4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d9ec      	bls.n	800a396 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800a3bc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3c0:	4a3a      	ldr	r2, [pc, #232]	@ (800a4ac <JPEG_Set_HuffAC_Mem+0x1f8>)
 800a3c2:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a3c4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800a3ce:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3d2:	4a37      	ldr	r2, [pc, #220]	@ (800a4b0 <JPEG_Set_HuffAC_Mem+0x1fc>)
 800a3d4:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a3d6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3da:	3304      	adds	r3, #4
 800a3dc:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800a3e0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3e4:	4a33      	ldr	r2, [pc, #204]	@ (800a4b4 <JPEG_Set_HuffAC_Mem+0x200>)
 800a3e6:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a3e8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800a3f2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a3f6:	4a30      	ldr	r2, [pc, #192]	@ (800a4b8 <JPEG_Set_HuffAC_Mem+0x204>)
 800a3f8:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800a3fa:	23a2      	movs	r3, #162	@ 0xa2
 800a3fc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800a400:	e049      	b.n	800a496 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800a402:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a406:	3b01      	subs	r3, #1
 800a408:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800a40c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a410:	3b04      	subs	r3, #4
 800a412:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a416:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a41a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a41e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a422:	4413      	add	r3, r2
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	021b      	lsls	r3, r3, #8
 800a428:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a42c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a430:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a434:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a438:	3328      	adds	r3, #40	@ 0x28
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	440b      	add	r3, r1
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	b2db      	uxtb	r3, r3
 800a442:	4313      	orrs	r3, r2
 800a444:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800a448:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a44c:	3b01      	subs	r3, #1
 800a44e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a452:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a456:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a45a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a45e:	4413      	add	r3, r2
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	021b      	lsls	r3, r3, #8
 800a464:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a468:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a46c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a470:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a474:	3328      	adds	r3, #40	@ 0x28
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	440b      	add	r3, r1
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	4313      	orrs	r3, r2
 800a480:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a484:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800a488:	041a      	lsls	r2, r3, #16
 800a48a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800a48e:	431a      	orrs	r2, r3
 800a490:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a494:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a496:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d8b1      	bhi.n	800a402 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	0fd10fd0 	.word	0x0fd10fd0
 800a4b0:	0fd30fd2 	.word	0x0fd30fd2
 800a4b4:	0fd50fd4 	.word	0x0fd50fd4
 800a4b8:	0fd70fd6 	.word	0x0fd70fd6

0800a4bc <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f84d 	bl	800a564 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	491f      	ldr	r1, [pc, #124]	@ (800a554 <JPEG_Set_HuffEnc_Mem+0x98>)
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff feec 	bl	800a2b4 <JPEG_Set_HuffAC_Mem>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	e030      	b.n	800a54c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	4918      	ldr	r1, [pc, #96]	@ (800a558 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff fedc 	bl	800a2b4 <JPEG_Set_HuffAC_Mem>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	e020      	b.n	800a54c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a512:	461a      	mov	r2, r3
 800a514:	4911      	ldr	r1, [pc, #68]	@ (800a55c <JPEG_Set_HuffEnc_Mem+0xa0>)
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff fe4a 	bl	800a1b0 <JPEG_Set_HuffDC_Mem>
 800a51c:	4603      	mov	r3, r0
 800a51e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	e010      	b.n	800a54c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a532:	461a      	mov	r2, r3
 800a534:	490a      	ldr	r1, [pc, #40]	@ (800a560 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7ff fe3a 	bl	800a1b0 <JPEG_Set_HuffDC_Mem>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800a546:	7bfb      	ldrb	r3, [r7, #15]
 800a548:	e000      	b.n	800a54c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	08018ee8 	.word	0x08018ee8
 800a558:	08018f9c 	.word	0x08018f9c
 800a55c:	08018eb0 	.word	0x08018eb0
 800a560:	08018ecc 	.word	0x08018ecc

0800a564 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800a564:	b480      	push	{r7}
 800a566:	b08b      	sub	sp, #44	@ 0x2c
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800a56c:	4b80      	ldr	r3, [pc, #512]	@ (800a770 <JPEG_Set_Huff_DHTMem+0x20c>)
 800a56e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800a570:	4b80      	ldr	r3, [pc, #512]	@ (800a774 <JPEG_Set_Huff_DHTMem+0x210>)
 800a572:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800a574:	4b80      	ldr	r3, [pc, #512]	@ (800a778 <JPEG_Set_Huff_DHTMem+0x214>)
 800a576:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800a578:	4b80      	ldr	r3, [pc, #512]	@ (800a77c <JPEG_Set_Huff_DHTMem+0x218>)
 800a57a:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a584:	330c      	adds	r3, #12
 800a586:	623b      	str	r3, [r7, #32]
  index = 16;
 800a588:	2310      	movs	r3, #16
 800a58a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a58c:	e01d      	b.n	800a5ca <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	3b01      	subs	r3, #1
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	5cd3      	ldrb	r3, [r2, r3]
 800a596:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59a:	3b02      	subs	r3, #2
 800a59c:	6979      	ldr	r1, [r7, #20]
 800a59e:	5ccb      	ldrb	r3, [r1, r3]
 800a5a0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a5a2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a6:	3b03      	subs	r3, #3
 800a5a8:	6979      	ldr	r1, [r7, #20]
 800a5aa:	5ccb      	ldrb	r3, [r1, r3]
 800a5ac:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a5ae:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a5b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5b2:	3a04      	subs	r2, #4
 800a5b4:	6979      	ldr	r1, [r7, #20]
 800a5b6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a5b8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	601a      	str	r2, [r3, #0]
    address--;
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	3b04      	subs	r3, #4
 800a5c2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c6:	3b04      	subs	r3, #4
 800a5c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	2b03      	cmp	r3, #3
 800a5ce:	d8de      	bhi.n	800a58e <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a5d8:	3318      	adds	r3, #24
 800a5da:	623b      	str	r3, [r7, #32]
  index = 12;
 800a5dc:	230c      	movs	r3, #12
 800a5de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a5e0:	e021      	b.n	800a626 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	7c1b      	ldrb	r3, [r3, #16]
 800a5ec:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	3b02      	subs	r3, #2
 800a5f2:	6979      	ldr	r1, [r7, #20]
 800a5f4:	440b      	add	r3, r1
 800a5f6:	7c1b      	ldrb	r3, [r3, #16]
 800a5f8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a5fa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fe:	3b03      	subs	r3, #3
 800a600:	6979      	ldr	r1, [r7, #20]
 800a602:	440b      	add	r3, r1
 800a604:	7c1b      	ldrb	r3, [r3, #16]
 800a606:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a608:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800a60a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a60c:	3a04      	subs	r2, #4
 800a60e:	6979      	ldr	r1, [r7, #20]
 800a610:	440a      	add	r2, r1
 800a612:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a614:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	601a      	str	r2, [r3, #0]
    address--;
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	3b04      	subs	r3, #4
 800a61e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a622:	3b04      	subs	r3, #4
 800a624:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d8da      	bhi.n	800a5e2 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a634:	3328      	adds	r3, #40	@ 0x28
 800a636:	623b      	str	r3, [r7, #32]
  index = 16;
 800a638:	2310      	movs	r3, #16
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a63c:	e01d      	b.n	800a67a <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a640:	3b01      	subs	r3, #1
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	5cd3      	ldrb	r3, [r2, r3]
 800a646:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64a:	3b02      	subs	r3, #2
 800a64c:	69f9      	ldr	r1, [r7, #28]
 800a64e:	5ccb      	ldrb	r3, [r1, r3]
 800a650:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a652:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	3b03      	subs	r3, #3
 800a658:	69f9      	ldr	r1, [r7, #28]
 800a65a:	5ccb      	ldrb	r3, [r1, r3]
 800a65c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a65e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a662:	3a04      	subs	r2, #4
 800a664:	69f9      	ldr	r1, [r7, #28]
 800a666:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a668:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	601a      	str	r2, [r3, #0]
    address--;
 800a66e:	6a3b      	ldr	r3, [r7, #32]
 800a670:	3b04      	subs	r3, #4
 800a672:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a676:	3b04      	subs	r3, #4
 800a678:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67c:	2b03      	cmp	r3, #3
 800a67e:	d8de      	bhi.n	800a63e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a688:	33cc      	adds	r3, #204	@ 0xcc
 800a68a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	4b3b      	ldr	r3, [pc, #236]	@ (800a780 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a692:	4013      	ands	r3, r2
 800a694:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800a69c:	021a      	lsls	r2, r3, #8
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	69fa      	ldr	r2, [r7, #28]
 800a6a4:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a6ac:	6a3b      	ldr	r3, [r7, #32]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a6b2:	6a3b      	ldr	r3, [r7, #32]
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	623b      	str	r3, [r7, #32]
  index = 160;
 800a6b8:	23a0      	movs	r3, #160	@ 0xa0
 800a6ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a6bc:	e021      	b.n	800a702 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	7c1b      	ldrb	r3, [r3, #16]
 800a6c8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6cc:	3b02      	subs	r3, #2
 800a6ce:	69f9      	ldr	r1, [r7, #28]
 800a6d0:	440b      	add	r3, r1
 800a6d2:	7c1b      	ldrb	r3, [r3, #16]
 800a6d4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a6d6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6da:	3b03      	subs	r3, #3
 800a6dc:	69f9      	ldr	r1, [r7, #28]
 800a6de:	440b      	add	r3, r1
 800a6e0:	7c1b      	ldrb	r3, [r3, #16]
 800a6e2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a6e4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a6e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6e8:	3a04      	subs	r2, #4
 800a6ea:	69f9      	ldr	r1, [r7, #28]
 800a6ec:	440a      	add	r2, r1
 800a6ee:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a6f0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	601a      	str	r2, [r3, #0]
    address--;
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	3b04      	subs	r3, #4
 800a6fa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fe:	3b04      	subs	r3, #4
 800a700:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a704:	2b03      	cmp	r3, #3
 800a706:	d8da      	bhi.n	800a6be <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a710:	33cc      	adds	r3, #204	@ 0xcc
 800a712:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	785b      	ldrb	r3, [r3, #1]
 800a720:	061a      	lsls	r2, r3, #24
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	431a      	orrs	r2, r3
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	041b      	lsls	r3, r3, #16
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a73e:	33dc      	adds	r3, #220	@ 0xdc
 800a740:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	4b0e      	ldr	r3, [pc, #56]	@ (800a780 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a748:	4013      	ands	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	7bdb      	ldrb	r3, [r3, #15]
 800a750:	021a      	lsls	r2, r3, #8
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	4313      	orrs	r3, r2
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	7b92      	ldrb	r2, [r2, #14]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	3b04      	subs	r3, #4
 800a768:	623b      	str	r3, [r7, #32]
  index = 12;
 800a76a:	230c      	movs	r3, #12
 800a76c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a76e:	e027      	b.n	800a7c0 <JPEG_Set_Huff_DHTMem+0x25c>
 800a770:	08018ee8 	.word	0x08018ee8
 800a774:	08018f9c 	.word	0x08018f9c
 800a778:	08018eb0 	.word	0x08018eb0
 800a77c:	08018ecc 	.word	0x08018ecc
 800a780:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a786:	3301      	adds	r3, #1
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	5cd3      	ldrb	r3, [r2, r3]
 800a78c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a78e:	6939      	ldr	r1, [r7, #16]
 800a790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a792:	440b      	add	r3, r1
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a798:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79c:	3b01      	subs	r3, #1
 800a79e:	6939      	ldr	r1, [r7, #16]
 800a7a0:	5ccb      	ldrb	r3, [r1, r3]
 800a7a2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a7a4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800a7a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7a8:	3a02      	subs	r2, #2
 800a7aa:	6939      	ldr	r1, [r7, #16]
 800a7ac:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a7ae:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	601a      	str	r2, [r3, #0]
    address--;
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	3b04      	subs	r3, #4
 800a7b8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7bc:	3b04      	subs	r3, #4
 800a7be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d8de      	bhi.n	800a784 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a7ce:	33dc      	adds	r3, #220	@ 0xdc
 800a7d0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	7c5b      	ldrb	r3, [r3, #17]
 800a7de:	061a      	lsls	r2, r3, #24
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	7c1b      	ldrb	r3, [r3, #16]
 800a7e8:	041b      	lsls	r3, r3, #16
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a7fc:	33e8      	adds	r3, #232	@ 0xe8
 800a7fe:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	4b6d      	ldr	r3, [pc, #436]	@ (800a9bc <JPEG_Set_Huff_DHTMem+0x458>)
 800a806:	4013      	ands	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	7edb      	ldrb	r3, [r3, #27]
 800a80e:	021a      	lsls	r2, r3, #8
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	4313      	orrs	r3, r2
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	7e92      	ldrb	r2, [r2, #26]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	3b04      	subs	r3, #4
 800a826:	623b      	str	r3, [r7, #32]
  index = 8;
 800a828:	2308      	movs	r3, #8
 800a82a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a82c:	e021      	b.n	800a872 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a830:	3301      	adds	r3, #1
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	4413      	add	r3, r2
 800a836:	7c1b      	ldrb	r3, [r3, #16]
 800a838:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a83a:	6939      	ldr	r1, [r7, #16]
 800a83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83e:	440b      	add	r3, r1
 800a840:	3310      	adds	r3, #16
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a846:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84a:	3b01      	subs	r3, #1
 800a84c:	6939      	ldr	r1, [r7, #16]
 800a84e:	440b      	add	r3, r1
 800a850:	7c1b      	ldrb	r3, [r3, #16]
 800a852:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a854:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800a856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a858:	3a02      	subs	r2, #2
 800a85a:	6939      	ldr	r1, [r7, #16]
 800a85c:	440a      	add	r2, r1
 800a85e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a860:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	601a      	str	r2, [r3, #0]
    address--;
 800a866:	6a3b      	ldr	r3, [r7, #32]
 800a868:	3b04      	subs	r3, #4
 800a86a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	3b04      	subs	r3, #4
 800a870:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	2b03      	cmp	r3, #3
 800a876:	d8da      	bhi.n	800a82e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a880:	33e8      	adds	r3, #232	@ 0xe8
 800a882:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a884:	6a3b      	ldr	r3, [r7, #32]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	b29b      	uxth	r3, r3
 800a88a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	785b      	ldrb	r3, [r3, #1]
 800a890:	061a      	lsls	r2, r3, #24
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	431a      	orrs	r2, r3
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	041b      	lsls	r3, r3, #16
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a8ae:	33f8      	adds	r3, #248	@ 0xf8
 800a8b0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	4b41      	ldr	r3, [pc, #260]	@ (800a9bc <JPEG_Set_Huff_DHTMem+0x458>)
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	7bdb      	ldrb	r3, [r3, #15]
 800a8c0:	021a      	lsls	r2, r3, #8
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	7b92      	ldrb	r2, [r2, #14]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	3b04      	subs	r3, #4
 800a8d8:	623b      	str	r3, [r7, #32]
  index = 12;
 800a8da:	230c      	movs	r3, #12
 800a8dc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a8de:	e01d      	b.n	800a91c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	69ba      	ldr	r2, [r7, #24]
 800a8e6:	5cd3      	ldrb	r3, [r2, r3]
 800a8e8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a8ea:	69b9      	ldr	r1, [r7, #24]
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ee:	440b      	add	r3, r1
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a8f4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	69b9      	ldr	r1, [r7, #24]
 800a8fc:	5ccb      	ldrb	r3, [r1, r3]
 800a8fe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a900:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800a902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a904:	3a02      	subs	r2, #2
 800a906:	69b9      	ldr	r1, [r7, #24]
 800a908:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a90a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	601a      	str	r2, [r3, #0]
    address--;
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	3b04      	subs	r3, #4
 800a914:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a918:	3b04      	subs	r3, #4
 800a91a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d8de      	bhi.n	800a8e0 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a92a:	33f8      	adds	r3, #248	@ 0xf8
 800a92c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	b29b      	uxth	r3, r3
 800a934:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	7c5b      	ldrb	r3, [r3, #17]
 800a93a:	061a      	lsls	r2, r3, #24
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	431a      	orrs	r2, r3
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	7c1b      	ldrb	r3, [r3, #16]
 800a944:	041b      	lsls	r3, r3, #16
 800a946:	4313      	orrs	r3, r2
 800a948:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a958:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800a95c:	623b      	str	r3, [r7, #32]
  index = 160;
 800a95e:	23a0      	movs	r3, #160	@ 0xa0
 800a960:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a962:	e021      	b.n	800a9a8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	3301      	adds	r3, #1
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	4413      	add	r3, r2
 800a96c:	7c1b      	ldrb	r3, [r3, #16]
 800a96e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a970:	69b9      	ldr	r1, [r7, #24]
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	440b      	add	r3, r1
 800a976:	3310      	adds	r3, #16
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a97c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a980:	3b01      	subs	r3, #1
 800a982:	69b9      	ldr	r1, [r7, #24]
 800a984:	440b      	add	r3, r1
 800a986:	7c1b      	ldrb	r3, [r3, #16]
 800a988:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a98a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a98c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a98e:	3a02      	subs	r2, #2
 800a990:	69b9      	ldr	r1, [r7, #24]
 800a992:	440a      	add	r2, r1
 800a994:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a996:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	601a      	str	r2, [r3, #0]
    address--;
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	3b04      	subs	r3, #4
 800a9a0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	3b04      	subs	r3, #4
 800a9a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9aa:	2b03      	cmp	r3, #3
 800a9ac:	d8da      	bhi.n	800a964 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800a9ae:	bf00      	nop
 800a9b0:	bf00      	nop
 800a9b2:	372c      	adds	r7, #44	@ 0x2c
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	ffff0000 	.word	0xffff0000

0800a9c0 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9d8:	f003 0303 	and.w	r3, r3, #3
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d108      	bne.n	800a9f2 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f042 0208 	orr.w	r2, r2, #8
 800a9ee:	605a      	str	r2, [r3, #4]
 800a9f0:	e007      	b.n	800aa02 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f022 0208 	bic.w	r2, r2, #8
 800aa00:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f022 0201 	bic.w	r2, r2, #1
 800aa10:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aa20:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aa30:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa40:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa50:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f042 0201 	orr.w	r2, r2, #1
 800aa60:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa66:	f003 030c 	and.w	r3, r3, #12
 800aa6a:	2b08      	cmp	r3, #8
 800aa6c:	d108      	bne.n	800aa80 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800aa7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800aa7e:	e00d      	b.n	800aa9c <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa84:	f003 030c 	and.w	r3, r3, #12
 800aa88:	2b0c      	cmp	r3, #12
 800aa8a:	d107      	bne.n	800aa9c <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aab4:	f003 0303 	and.w	r3, r3, #3
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d125      	bne.n	800ab08 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d01e      	beq.n	800ab08 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	3304      	adds	r3, #4
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7ff f84f 	bl	8009b74 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3304      	adds	r3, #4
 800aae0:	4619      	mov	r1, r3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f7ff f996 	bl	8009e14 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aaf6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab06:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d116      	bne.n	800ab42 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ab22:	2108      	movs	r1, #8
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f988 	bl	800ae3a <JPEG_ReadInputData>
 800ab2a:	e00a      	b.n	800ab42 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab32:	f003 0304 	and.w	r3, r3, #4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f97c 	bl	800ae3a <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d116      	bne.n	800ab7c <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab54:	f003 0308 	and.w	r3, r3, #8
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d004      	beq.n	800ab66 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ab5c:	2108      	movs	r1, #8
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f864 	bl	800ac2c <JPEG_StoreOutputData>
 800ab64:	e00a      	b.n	800ab7c <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab6c:	f003 0310 	and.w	r3, r3, #16
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d003      	beq.n	800ab7c <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800ab74:	2101      	movs	r1, #1
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f858 	bl	800ac2c <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab86:	2b20      	cmp	r3, #32
 800ab88:	d14b      	bne.n	800ac22 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f022 0201 	bic.w	r2, r2, #1
 800ab98:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab9e:	f003 030c 	and.w	r3, r3, #12
 800aba2:	2b08      	cmp	r3, #8
 800aba4:	d107      	bne.n	800abb6 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800abb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800abc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00a      	beq.n	800abe4 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	69d9      	ldr	r1, [r3, #28]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd6:	461a      	mov	r2, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7f6 fbdd 	bl	8001398 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe8:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abee:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f003 0303 	and.w	r3, r3, #3
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d103      	bne.n	800ac18 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7f6 fb93 	bl	800133c <HAL_JPEG_DecodeCpltCallback>
 800ac16:	e002      	b.n	800ac1e <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f7ff f906 	bl	8009e2a <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e000      	b.n	800ac24 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	440b      	add	r3, r1
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d34b      	bcc.n	800ace0 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	617b      	str	r3, [r7, #20]
 800ac4c:	e031      	b.n	800acb2 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac54:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	69da      	ldr	r2, [r3, #28]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5e:	4413      	add	r3, r2
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	b2d2      	uxtb	r2, r2
 800ac64:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	0a19      	lsrs	r1, r3, #8
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	69da      	ldr	r2, [r3, #28]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac72:	3301      	adds	r3, #1
 800ac74:	4413      	add	r3, r2
 800ac76:	b2ca      	uxtb	r2, r1
 800ac78:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	0c19      	lsrs	r1, r3, #16
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	69da      	ldr	r2, [r3, #28]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac86:	3302      	adds	r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	b2ca      	uxtb	r2, r1
 800ac8c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	0e19      	lsrs	r1, r3, #24
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	69da      	ldr	r2, [r3, #28]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac9a:	3303      	adds	r3, #3
 800ac9c:	4413      	add	r3, r2
 800ac9e:	b2ca      	uxtb	r2, r1
 800aca0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca6:	1d1a      	adds	r2, r3, #4
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	3301      	adds	r3, #1
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d3c9      	bcc.n	800ac4e <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc2:	429a      	cmp	r2, r3
 800acc4:	f040 80b5 	bne.w	800ae32 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	69d9      	ldr	r1, [r3, #28]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd0:	461a      	mov	r2, r3
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7f6 fb60 	bl	8001398 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800acde:	e0a8      	b.n	800ae32 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace8:	429a      	cmp	r2, r3
 800acea:	f240 80a2 	bls.w	800ae32 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	089b      	lsrs	r3, r3, #2
 800acfa:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800acfc:	2300      	movs	r3, #0
 800acfe:	617b      	str	r3, [r7, #20]
 800ad00:	e031      	b.n	800ad66 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad08:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	69da      	ldr	r2, [r3, #28]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad12:	4413      	add	r3, r2
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	b2d2      	uxtb	r2, r2
 800ad18:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	0a19      	lsrs	r1, r3, #8
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	69da      	ldr	r2, [r3, #28]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad26:	3301      	adds	r3, #1
 800ad28:	4413      	add	r3, r2
 800ad2a:	b2ca      	uxtb	r2, r1
 800ad2c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	0c19      	lsrs	r1, r3, #16
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	69da      	ldr	r2, [r3, #28]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3a:	3302      	adds	r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	b2ca      	uxtb	r2, r1
 800ad40:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	0e19      	lsrs	r1, r3, #24
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	69da      	ldr	r2, [r3, #28]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4e:	3303      	adds	r3, #3
 800ad50:	4413      	add	r3, r2
 800ad52:	b2ca      	uxtb	r2, r1
 800ad54:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5a:	1d1a      	adds	r2, r3, #4
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	3301      	adds	r3, #1
 800ad64:	617b      	str	r3, [r7, #20]
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d3c9      	bcc.n	800ad02 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d10b      	bne.n	800ad92 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	69d9      	ldr	r1, [r3, #28]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad82:	461a      	mov	r2, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7f6 fb07 	bl	8001398 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ad90:	e04f      	b.n	800ae32 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ada4:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
 800adaa:	e015      	b.n	800add8 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f003 0303 	and.w	r3, r3, #3
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	fa22 f103 	lsr.w	r1, r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	69da      	ldr	r2, [r3, #28]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc2:	4413      	add	r3, r2
 800adc4:	b2ca      	uxtb	r2, r1
 800adc6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adcc:	1c5a      	adds	r2, r3, #1
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	3301      	adds	r3, #1
 800add6:	617b      	str	r3, [r7, #20]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	429a      	cmp	r2, r3
 800adde:	d3e5      	bcc.n	800adac <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	69d9      	ldr	r1, [r3, #28]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade8:	461a      	mov	r2, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7f6 fad4 	bl	8001398 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f1c3 0304 	rsb	r3, r3, #4
 800adfc:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	617b      	str	r3, [r7, #20]
 800ae02:	e013      	b.n	800ae2c <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	00db      	lsls	r3, r3, #3
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	fa22 f103 	lsr.w	r1, r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	69da      	ldr	r2, [r3, #28]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae16:	4413      	add	r3, r2
 800ae18:	b2ca      	uxtb	r2, r1
 800ae1a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	617b      	str	r3, [r7, #20]
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	2b03      	cmp	r3, #3
 800ae30:	d9e8      	bls.n	800ae04 <JPEG_StoreOutputData+0x1d8>
}
 800ae32:	bf00      	nop
 800ae34:	3718      	adds	r7, #24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b088      	sub	sp, #32
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <JPEG_ReadInputData+0x1c>
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d104      	bne.n	800ae60 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800ae56:	2101      	movs	r1, #1
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7fe ff83 	bl	8009d64 <HAL_JPEG_Pause>
 800ae5e:	e028      	b.n	800aeb2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d906      	bls.n	800ae7a <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a1b      	ldr	r3, [r3, #32]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	61fb      	str	r3, [r7, #28]
 800ae78:	e01b      	b.n	800aeb2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d115      	bne.n	800aeb2 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a1b      	ldr	r3, [r3, #32]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7fe ffd6 	bl	8009e3e <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d905      	bls.n	800aea6 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae9e:	f023 0203 	bic.w	r2, r3, #3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb0:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f040 809f 	bne.w	800affe <JPEG_ReadInputData+0x1c4>
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 809b 	beq.w	800affe <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	089b      	lsrs	r3, r3, #2
 800aecc:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d335      	bcc.n	800af42 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800aed6:	2300      	movs	r3, #0
 800aed8:	61bb      	str	r3, [r7, #24]
 800aeda:	e02d      	b.n	800af38 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	699a      	ldr	r2, [r3, #24]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	4413      	add	r3, r2
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	699a      	ldr	r2, [r3, #24]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3301      	adds	r3, #1
 800aef6:	4413      	add	r3, r2
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800aefc:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6999      	ldr	r1, [r3, #24]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3302      	adds	r3, #2
 800af08:	440b      	add	r3, r1
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800af0e:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	699a      	ldr	r2, [r3, #24]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	3303      	adds	r3, #3
 800af1a:	4413      	add	r3, r2
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800af24:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af26:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a1b      	ldr	r3, [r3, #32]
 800af2c:	1d1a      	adds	r2, r3, #4
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	3301      	adds	r3, #1
 800af36:	61bb      	str	r3, [r7, #24]
 800af38:	69ba      	ldr	r2, [r7, #24]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d3cd      	bcc.n	800aedc <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800af40:	e05d      	b.n	800affe <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d035      	beq.n	800afb4 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800af48:	2300      	movs	r3, #0
 800af4a:	61bb      	str	r3, [r7, #24]
 800af4c:	e02d      	b.n	800afaa <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	699a      	ldr	r2, [r3, #24]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4413      	add	r3, r2
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	699a      	ldr	r2, [r3, #24]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3301      	adds	r3, #1
 800af68:	4413      	add	r3, r2
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af6e:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6999      	ldr	r1, [r3, #24]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3302      	adds	r3, #2
 800af7a:	440b      	add	r3, r1
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800af80:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	699a      	ldr	r2, [r3, #24]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	3303      	adds	r3, #3
 800af8c:	4413      	add	r3, r2
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800af96:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af98:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	1d1a      	adds	r2, r3, #4
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	3301      	adds	r3, #1
 800afa8:	61bb      	str	r3, [r7, #24]
 800afaa:	69ba      	ldr	r2, [r7, #24]
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d3cd      	bcc.n	800af4e <JPEG_ReadInputData+0x114>
}
 800afb2:	e024      	b.n	800affe <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800afb8:	2300      	movs	r3, #0
 800afba:	61bb      	str	r3, [r7, #24]
 800afbc:	e017      	b.n	800afee <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	699a      	ldr	r2, [r3, #24]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a1b      	ldr	r3, [r3, #32]
 800afc6:	4413      	add	r3, r2
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	f003 0303 	and.w	r3, r3, #3
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	fa02 f303 	lsl.w	r3, r2, r3
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	4313      	orrs	r3, r2
 800afdc:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	1c5a      	adds	r2, r3, #1
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	3301      	adds	r3, #1
 800afec:	61bb      	str	r3, [r7, #24]
 800afee:	69ba      	ldr	r2, [r7, #24]
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d3e3      	bcc.n	800afbe <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800affe:	bf00      	nop
 800b000:	3720      	adds	r7, #32
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
	...

0800b008 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b008:	b590      	push	{r4, r7, lr}
 800b00a:	b087      	sub	sp, #28
 800b00c:	af02      	add	r7, sp, #8
 800b00e:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b016:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01e:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	429a      	cmp	r2, r3
 800b028:	d804      	bhi.n	800b034 <JPEG_DMA_StartProcess+0x2c>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	429a      	cmp	r2, r3
 800b032:	d901      	bls.n	800b038 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e074      	b.n	800b122 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b03c:	4a3b      	ldr	r2, [pc, #236]	@ (800b12c <JPEG_DMA_StartProcess+0x124>)
 800b03e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b044:	4a3a      	ldr	r2, [pc, #232]	@ (800b130 <JPEG_DMA_StartProcess+0x128>)
 800b046:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b04c:	4a39      	ldr	r2, [pc, #228]	@ (800b134 <JPEG_DMA_StartProcess+0x12c>)
 800b04e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b054:	4a36      	ldr	r2, [pc, #216]	@ (800b130 <JPEG_DMA_StartProcess+0x128>)
 800b056:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b05c:	4a36      	ldr	r2, [pc, #216]	@ (800b138 <JPEG_DMA_StartProcess+0x130>)
 800b05e:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d002      	beq.n	800b06c <JPEG_DMA_StartProcess+0x64>
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d107      	bne.n	800b07c <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b070:	f043 0204 	orr.w	r2, r3, #4
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	e052      	b.n	800b122 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b084:	68f9      	ldr	r1, [r7, #12]
 800b086:	fbb3 f1f1 	udiv	r1, r3, r1
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	fb00 f101 	mul.w	r1, r0, r1
 800b090:	1a5b      	subs	r3, r3, r1
 800b092:	1ad2      	subs	r2, r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	fbb3 f1f1 	udiv	r1, r3, r1
 800b0a6:	68b8      	ldr	r0, [r7, #8]
 800b0a8:	fb00 f101 	mul.w	r1, r0, r1
 800b0ac:	1a5b      	subs	r3, r3, r1
 800b0ae:	1ad2      	subs	r2, r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3344      	adds	r3, #68	@ 0x44
 800b0be:	4619      	mov	r1, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	461c      	mov	r4, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	9200      	str	r2, [sp, #0]
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	f000 fbe2 	bl	800b898 <HAL_MDMA_Start_IT>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d007      	beq.n	800b0ea <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0de:	f043 0204 	orr.w	r2, r3, #4
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e01b      	b.n	800b122 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3340      	adds	r3, #64	@ 0x40
 800b0fa:	461c      	mov	r4, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b100:	2201      	movs	r2, #1
 800b102:	9200      	str	r2, [sp, #0]
 800b104:	4622      	mov	r2, r4
 800b106:	f000 fbc7 	bl	800b898 <HAL_MDMA_Start_IT>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d007      	beq.n	800b120 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b114:	f043 0204 	orr.w	r2, r3, #4
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e000      	b.n	800b122 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	bd90      	pop	{r4, r7, pc}
 800b12a:	bf00      	nop
 800b12c:	0800b43b 	.word	0x0800b43b
 800b130:	0800b629 	.word	0x0800b629
 800b134:	0800b567 	.word	0x0800b567
 800b138:	0800b679 	.word	0x0800b679

0800b13c <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b148:	f003 0303 	and.w	r3, r3, #3
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d125      	bne.n	800b19c <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d01e      	beq.n	800b19c <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3304      	adds	r3, #4
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7fe fd05 	bl	8009b74 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3304      	adds	r3, #4
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7fe fe4c 	bl	8009e14 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b18a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b19a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1a2:	f003 0320 	and.w	r3, r3, #32
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d039      	beq.n	800b21e <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1ae:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f022 0201 	bic.w	r2, r2, #1
 800b1c4:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b1d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b1e4:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d104      	bne.n	800b1fe <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f000 fbce 	bl	800b99a <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d105      	bne.n	800b218 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b210:	4618      	mov	r0, r3
 800b212:	f000 fbc2 	bl	800b99a <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800b216:	e002      	b.n	800b21e <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f804 	bl	800b226 <JPEG_DMA_EndProcess>
}
 800b21e:	bf00      	nop
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b084      	sub	sp, #16
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b23e:	1ad2      	subs	r2, r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d10a      	bne.n	800b266 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	69d9      	ldr	r1, [r3, #28]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b258:	461a      	mov	r2, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7f6 f89c 	bl	8001398 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b26c:	f003 0310 	and.w	r3, r3, #16
 800b270:	2b00      	cmp	r3, #0
 800b272:	d134      	bne.n	800b2de <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	69d9      	ldr	r1, [r3, #28]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b284:	461a      	mov	r2, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7f6 f886 	bl	8001398 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f022 0201 	bic.w	r2, r2, #1
 800b2a0:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2a6:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2ac:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f003 0303 	and.w	r3, r3, #3
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d103      	bne.n	800b2d6 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7f6 f834 	bl	800133c <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800b2d4:	e00c      	b.n	800b2f0 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7fe fda7 	bl	8009e2a <HAL_JPEG_EncodeCpltCallback>
}
 800b2dc:	e008      	b.n	800b2f0 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d102      	bne.n	800b2f0 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f804 	bl	800b2f8 <JPEG_DMA_PollResidualData>
}
 800b2f0:	bf00      	nop
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b300:	2310      	movs	r3, #16
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	e04f      	b.n	800b3a6 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b30a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d146      	bne.n	800b3a0 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b318:	f003 0310 	and.w	r3, r3, #16
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d03f      	beq.n	800b3a0 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b326:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	69da      	ldr	r2, [r3, #28]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b330:	4413      	add	r3, r2
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	b2d2      	uxtb	r2, r2
 800b336:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	0a19      	lsrs	r1, r3, #8
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	69da      	ldr	r2, [r3, #28]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b344:	3301      	adds	r3, #1
 800b346:	4413      	add	r3, r2
 800b348:	b2ca      	uxtb	r2, r1
 800b34a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	0c19      	lsrs	r1, r3, #16
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	69da      	ldr	r2, [r3, #28]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b358:	3302      	adds	r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	b2ca      	uxtb	r2, r1
 800b35e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	0e19      	lsrs	r1, r3, #24
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	69da      	ldr	r2, [r3, #28]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b36c:	3303      	adds	r3, #3
 800b36e:	4413      	add	r3, r2
 800b370:	b2ca      	uxtb	r2, r1
 800b372:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b378:	1d1a      	adds	r2, r3, #4
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b386:	429a      	cmp	r2, r3
 800b388:	d10a      	bne.n	800b3a0 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	69d9      	ldr	r1, [r3, #28]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b392:	461a      	mov	r2, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7f5 ffff 	bl	8001398 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	617b      	str	r3, [r7, #20]
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1ac      	bne.n	800b306 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3b0:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3b8:	f003 0310 	and.w	r3, r3, #16
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d004      	beq.n	800b3ca <JPEG_DMA_PollResidualData+0xd2>
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d133      	bne.n	800b432 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f022 0201 	bic.w	r2, r2, #1
 800b3d8:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	69d9      	ldr	r1, [r3, #28]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7f5 ffd3 	bl	8001398 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3fc:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b402:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f003 0303 	and.w	r3, r3, #3
 800b420:	2b02      	cmp	r3, #2
 800b422:	d103      	bne.n	800b42c <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7f5 ff89 	bl	800133c <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800b42a:	e002      	b.n	800b432 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7fe fcfc 	bl	8009e2a <HAL_JPEG_EncodeCpltCallback>
}
 800b432:	bf00      	nop
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b43a:	b590      	push	{r4, r7, lr}
 800b43c:	b087      	sub	sp, #28
 800b43e:	af02      	add	r7, sp, #8
 800b440:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b446:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b456:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b45c:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b460:	4013      	ands	r3, r2
 800b462:	2b0c      	cmp	r3, #12
 800b464:	d17c      	bne.n	800b560 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b46c:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b47c:	1ad2      	subs	r2, r2, r3
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	4619      	mov	r1, r3
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7fe fcd8 	bl	8009e3e <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	429a      	cmp	r2, r3
 800b496:	d81f      	bhi.n	800b4d8 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10d      	bne.n	800b4ba <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4a2:	f043 0204 	orr.w	r2, r3, #4
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2206      	movs	r2, #6
 800b4ae:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f7f5 ff52 	bl	800135c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b4b8:	e052      	b.n	800b560 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c2:	68b9      	ldr	r1, [r7, #8]
 800b4c4:	fbb3 f1f1 	udiv	r1, r3, r1
 800b4c8:	68b8      	ldr	r0, [r7, #8]
 800b4ca:	fb00 f101 	mul.w	r1, r0, r1
 800b4ce:	1a5b      	subs	r3, r3, r1
 800b4d0:	1ad2      	subs	r2, r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	629a      	str	r2, [r3, #40]	@ 0x28
 800b4d6:	e010      	b.n	800b4fa <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00c      	beq.n	800b4fa <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e4:	f003 0303 	and.w	r3, r3, #3
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d006      	beq.n	800b4fa <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f0:	089b      	lsrs	r3, r3, #2
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	009a      	lsls	r2, r3, #2
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d124      	bne.n	800b550 <JPEG_MDMAInCpltCallback+0x116>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d020      	beq.n	800b550 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	4619      	mov	r1, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3340      	adds	r3, #64	@ 0x40
 800b51e:	461c      	mov	r4, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b524:	2201      	movs	r2, #1
 800b526:	9200      	str	r2, [sp, #0]
 800b528:	4622      	mov	r2, r4
 800b52a:	f000 f9b5 	bl	800b898 <HAL_MDMA_Start_IT>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00d      	beq.n	800b550 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b538:	f043 0204 	orr.w	r2, r3, #4
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2206      	movs	r2, #6
 800b544:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f7f5 ff07 	bl	800135c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b54e:	e007      	b.n	800b560 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b55e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	bd90      	pop	{r4, r7, pc}

0800b566 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b566:	b590      	push	{r4, r7, lr}
 800b568:	b087      	sub	sp, #28
 800b56a:	af02      	add	r7, sp, #8
 800b56c:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b572:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b582:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b588:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b58c:	4013      	ands	r3, r2
 800b58e:	2b0c      	cmp	r3, #12
 800b590:	d147      	bne.n	800b622 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b598:	f003 0320 	and.w	r3, r3, #32
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d138      	bne.n	800b612 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	695b      	ldr	r3, [r3, #20]
 800b5aa:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b5ae:	1ad2      	subs	r2, r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	69d9      	ldr	r1, [r3, #28]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5bc:	461a      	mov	r2, r3
 800b5be:	68f8      	ldr	r0, [r7, #12]
 800b5c0:	f7f5 feea 	bl	8001398 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d120      	bne.n	800b612 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3344      	adds	r3, #68	@ 0x44
 800b5da:	4619      	mov	r1, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	69db      	ldr	r3, [r3, #28]
 800b5e0:	461c      	mov	r4, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	9200      	str	r2, [sp, #0]
 800b5ea:	4622      	mov	r2, r4
 800b5ec:	f000 f954 	bl	800b898 <HAL_MDMA_Start_IT>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00d      	beq.n	800b612 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5fa:	f043 0204 	orr.w	r2, r3, #4
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2206      	movs	r2, #6
 800b606:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f7f5 fea6 	bl	800135c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800b610:	e007      	b.n	800b622 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b620:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	bd90      	pop	{r4, r7, pc}

0800b628 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b634:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f022 0201 	bic.w	r2, r2, #1
 800b644:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b654:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b662:	f043 0204 	orr.w	r2, r3, #4
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f7f5 fe76 	bl	800135c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800b670:	bf00      	nop
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b684:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b68a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d002      	beq.n	800b698 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f7ff fdc7 	bl	800b226 <JPEG_DMA_EndProcess>
  }
}
 800b698:	bf00      	nop
 800b69a:	3710      	adds	r7, #16
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b08b      	sub	sp, #44	@ 0x2c
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3350      	adds	r3, #80	@ 0x50
 800b6b2:	61bb      	str	r3, [r7, #24]

  i = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b6b8:	e042      	b.n	800b740 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	61fb      	str	r3, [r7, #28]
 800b6c4:	e033      	b.n	800b72e <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	00db      	lsls	r3, r3, #3
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d103      	bne.n	800b6e2 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800b6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6dc:	3364      	adds	r3, #100	@ 0x64
 800b6de:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6e0:	e022      	b.n	800b728 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	2264      	movs	r2, #100	@ 0x64
 800b6e6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b6ee:	6a38      	ldr	r0, [r7, #32]
 800b6f0:	69f9      	ldr	r1, [r7, #28]
 800b6f2:	4401      	add	r1, r0
 800b6f4:	4818      	ldr	r0, [pc, #96]	@ (800b758 <JPEG_GetQuality+0xb8>)
 800b6f6:	5c41      	ldrb	r1, [r0, r1]
 800b6f8:	440a      	add	r2, r1
 800b6fa:	7812      	ldrb	r2, [r2, #0]
 800b6fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b700:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b64      	cmp	r3, #100	@ 0x64
 800b706:	d807      	bhi.n	800b718 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800b70e:	085b      	lsrs	r3, r3, #1
 800b710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b712:	4413      	add	r3, r2
 800b714:	627b      	str	r3, [r7, #36]	@ 0x24
 800b716:	e007      	b.n	800b728 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800b718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b724:	4413      	add	r3, r2
 800b726:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	3301      	adds	r3, #1
 800b72c:	61fb      	str	r3, [r7, #28]
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	2b03      	cmp	r3, #3
 800b732:	d9c8      	bls.n	800b6c6 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	3304      	adds	r3, #4
 800b738:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	3304      	adds	r3, #4
 800b73e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	2b3c      	cmp	r3, #60	@ 0x3c
 800b744:	d9b9      	bls.n	800b6ba <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b748:	099b      	lsrs	r3, r3, #6
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	372c      	adds	r7, #44	@ 0x2c
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	08019050 	.word	0x08019050

0800b75c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b764:	f7f7 f81c 	bl	80027a0 <HAL_GetTick>
 800b768:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e03b      	b.n	800b7ec <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2202      	movs	r2, #2
 800b780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68da      	ldr	r2, [r3, #12]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f022 0201 	bic.w	r2, r2, #1
 800b792:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b794:	e00f      	b.n	800b7b6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b796:	f7f7 f803 	bl	80027a0 <HAL_GetTick>
 800b79a:	4602      	mov	r2, r0
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	2b05      	cmp	r3, #5
 800b7a2:	d908      	bls.n	800b7b6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2240      	movs	r2, #64	@ 0x40
 800b7a8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2203      	movs	r2, #3
 800b7ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e01a      	b.n	800b7ec <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	f003 0301 	and.w	r3, r3, #1
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e8      	bne.n	800b796 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fad3 	bl	800bd70 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d101      	bne.n	800b80e <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	e03e      	b.n	800b88c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b814:	2b01      	cmp	r3, #1
 800b816:	d101      	bne.n	800b81c <HAL_MDMA_ConfigPostRequestMask+0x28>
 800b818:	2302      	movs	r3, #2
 800b81a:	e037      	b.n	800b88c <HAL_MDMA_ConfigPostRequestMask+0x98>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d126      	bne.n	800b87e <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d11c      	bne.n	800b878 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d108      	bne.n	800b866 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	691a      	ldr	r2, [r3, #16]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b862:	611a      	str	r2, [r3, #16]
 800b864:	e00d      	b.n	800b882 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	691a      	ldr	r2, [r3, #16]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b874:	611a      	str	r2, [r3, #16]
 800b876:	e004      	b.n	800b882 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	75fb      	strb	r3, [r7, #23]
 800b87c:	e001      	b.n	800b882 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	371c      	adds	r7, #28
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af02      	add	r7, sp, #8
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
 800b8a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e070      	b.n	800b992 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d101      	bne.n	800b8be <HAL_MDMA_Start_IT+0x26>
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	e069      	b.n	800b992 <HAL_MDMA_Start_IT+0xfa>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d158      	bne.n	800b984 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68da      	ldr	r2, [r3, #12]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 0201 	bic.w	r2, r2, #1
 800b8ee:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	68b9      	ldr	r1, [r7, #8]
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 f9c8 	bl	800bc90 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68da      	ldr	r2, [r3, #12]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f042 0206 	orr.w	r2, r2, #6
 800b90e:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d007      	beq.n	800b928 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68da      	ldr	r2, [r3, #12]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f042 0210 	orr.w	r2, r2, #16
 800b926:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d007      	beq.n	800b940 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68da      	ldr	r2, [r3, #12]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f042 0208 	orr.w	r2, r2, #8
 800b93e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b944:	2b00      	cmp	r3, #0
 800b946:	d007      	beq.n	800b958 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	68da      	ldr	r2, [r3, #12]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f042 0220 	orr.w	r2, r2, #32
 800b956:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68da      	ldr	r2, [r3, #12]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f042 0201 	orr.w	r2, r2, #1
 800b966:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b970:	d10e      	bne.n	800b990 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68da      	ldr	r2, [r3, #12]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b980:	60da      	str	r2, [r3, #12]
 800b982:	e005      	b.n	800b990 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800b98c:	2302      	movs	r3, #2
 800b98e:	e000      	b.n	800b992 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d101      	bne.n	800b9ac <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e017      	b.n	800b9dc <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d004      	beq.n	800b9c2 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2280      	movs	r2, #128	@ 0x80
 800b9bc:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e00c      	b.n	800b9dc <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2204      	movs	r2, #4
 800b9c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68da      	ldr	r2, [r3, #12]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f022 0201 	bic.w	r2, r2, #1
 800b9d8:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b9f4:	4b91      	ldr	r3, [pc, #580]	@ (800bc3c <HAL_MDMA_IRQHandler+0x254>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a91      	ldr	r2, [pc, #580]	@ (800bc40 <HAL_MDMA_IRQHandler+0x258>)
 800b9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b9fe:	0a9b      	lsrs	r3, r3, #10
 800ba00:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	4b8e      	ldr	r3, [pc, #568]	@ (800bc44 <HAL_MDMA_IRQHandler+0x25c>)
 800ba0a:	4413      	add	r3, r2
 800ba0c:	099b      	lsrs	r3, r3, #6
 800ba0e:	f003 031f 	and.w	r3, r3, #31
 800ba12:	2201      	movs	r2, #1
 800ba14:	fa02 f303 	lsl.w	r3, r2, r3
 800ba18:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800ba1a:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	4013      	ands	r3, r2
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 812d 	beq.w	800bc84 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d054      	beq.n	800bae2 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	f003 0302 	and.w	r3, r3, #2
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d04d      	beq.n	800bae2 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68da      	ldr	r2, [r3, #12]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f022 0202 	bic.w	r2, r2, #2
 800ba54:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d106      	bne.n	800ba76 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba6c:	f043 0201 	orr.w	r2, r3, #1
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	669a      	str	r2, [r3, #104]	@ 0x68
 800ba74:	e005      	b.n	800ba82 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba7a:	f043 0202 	orr.w	r2, r3, #2
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d005      	beq.n	800ba98 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba90:	f043 0204 	orr.w	r2, r3, #4
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d005      	beq.n	800baae <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800baa6:	f043 0208 	orr.w	r2, r3, #8
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d005      	beq.n	800bac4 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800babc:	f043 0210 	orr.w	r2, r3, #16
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d005      	beq.n	800bada <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bad2:	f043 0220 	orr.w	r2, r3, #32
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2201      	movs	r2, #1
 800bae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 0310 	and.w	r3, r3, #16
 800baec:	2b00      	cmp	r3, #0
 800baee:	d012      	beq.n	800bb16 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	f003 0320 	and.w	r3, r3, #32
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00b      	beq.n	800bb16 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2210      	movs	r2, #16
 800bb04:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 0308 	and.w	r3, r3, #8
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d012      	beq.n	800bb4a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	f003 0310 	and.w	r3, r3, #16
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d00b      	beq.n	800bb4a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2208      	movs	r2, #8
 800bb38:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 0304 	and.w	r3, r3, #4
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d012      	beq.n	800bb7e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	f003 0308 	and.w	r3, r3, #8
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00b      	beq.n	800bb7e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2204      	movs	r2, #4
 800bb6c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d039      	beq.n	800bc00 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	f003 0304 	and.w	r3, r3, #4
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d032      	beq.n	800bc00 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800bba8:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b04      	cmp	r3, #4
 800bbb4:	d110      	bne.n	800bbd8 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d05c      	beq.n	800bc88 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	4798      	blx	r3
        }
        return;
 800bbd6:	e057      	b.n	800bc88 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2202      	movs	r2, #2
 800bbde:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d003      	beq.n	800bc00 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d040      	beq.n	800bc8a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2204      	movs	r2, #4
 800bc0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68da      	ldr	r2, [r3, #12]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f022 0201 	bic.w	r2, r2, #1
 800bc1e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	3301      	adds	r3, #1
 800bc24:	60bb      	str	r3, [r7, #8]
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d30d      	bcc.n	800bc48 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1f2      	bne.n	800bc20 <HAL_MDMA_IRQHandler+0x238>
 800bc3a:	e006      	b.n	800bc4a <HAL_MDMA_IRQHandler+0x262>
 800bc3c:	24000214 	.word	0x24000214
 800bc40:	1b4e81b5 	.word	0x1b4e81b5
 800bc44:	adffffc0 	.word	0xadffffc0
        break;
 800bc48:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d004      	beq.n	800bc6a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2203      	movs	r2, #3
 800bc64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800bc68:	e003      	b.n	800bc72 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d007      	beq.n	800bc8a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	4798      	blx	r3
 800bc82:	e002      	b.n	800bc8a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800bc84:	bf00      	nop
 800bc86:	e000      	b.n	800bc8a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800bc88:	bf00      	nop
    }
  }
}
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
 800bc9c:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	695a      	ldr	r2, [r3, #20]
 800bca4:	4b31      	ldr	r3, [pc, #196]	@ (800bd6c <MDMA_SetConfig+0xdc>)
 800bca6:	4013      	ands	r3, r2
 800bca8:	683a      	ldr	r2, [r7, #0]
 800bcaa:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	6812      	ldr	r2, [r2, #0]
 800bcb2:	430b      	orrs	r3, r1
 800bcb4:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	695b      	ldr	r3, [r3, #20]
 800bcbc:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	051a      	lsls	r2, r3, #20
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	430a      	orrs	r2, r1
 800bccc:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	221f      	movs	r2, #31
 800bcd4:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bcec:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcf4:	d002      	beq.n	800bcfc <MDMA_SetConfig+0x6c>
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d108      	bne.n	800bd0e <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800bd0a:	629a      	str	r2, [r3, #40]	@ 0x28
 800bd0c:	e007      	b.n	800bd1e <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bd1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800bd24:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd2c:	d002      	beq.n	800bd34 <MDMA_SetConfig+0xa4>
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d108      	bne.n	800bd46 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bd42:	629a      	str	r2, [r3, #40]	@ 0x28
 800bd44:	e007      	b.n	800bd56 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bd54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800bd60:	bf00      	nop
 800bd62:	371c      	adds	r7, #28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	fffe0000 	.word	0xfffe0000

0800bd70 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	68d9      	ldr	r1, [r3, #12]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	691a      	ldr	r2, [r3, #16]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	430a      	orrs	r2, r1
 800bd86:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	695a      	ldr	r2, [r3, #20]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bd96:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bda2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bdae:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800bdb8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bdc4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bdc6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdd0:	d107      	bne.n	800bde2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	691a      	ldr	r2, [r3, #16]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800bde0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2200      	movs	r2, #0
 800bde8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	da11      	bge.n	800be16 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	695a      	ldr	r2, [r3, #20]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800be00:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be06:	425b      	negs	r3, r3
 800be08:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	b292      	uxth	r2, r2
 800be12:	621a      	str	r2, [r3, #32]
 800be14:	e006      	b.n	800be24 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be1a:	461a      	mov	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	b292      	uxth	r2, r2
 800be22:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be28:	2b00      	cmp	r3, #0
 800be2a:	da15      	bge.n	800be58 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	695a      	ldr	r2, [r3, #20]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800be3a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be40:	425b      	negs	r3, r3
 800be42:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6a19      	ldr	r1, [r3, #32]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	041a      	lsls	r2, r3, #16
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	430a      	orrs	r2, r1
 800be54:	621a      	str	r2, [r3, #32]
 800be56:	e009      	b.n	800be6c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6a19      	ldr	r1, [r3, #32]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be62:	041a      	lsls	r2, r3, #16
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	430a      	orrs	r2, r1
 800be6a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be74:	d006      	beq.n	800be84 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	b2d2      	uxtb	r2, r2
 800be80:	629a      	str	r2, [r3, #40]	@ 0x28
 800be82:	e003      	b.n	800be8c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2200      	movs	r2, #0
 800be8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2200      	movs	r2, #0
 800be92:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800be94:	bf00      	nop
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af02      	add	r7, sp, #8
 800bea6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e0fe      	b.n	800c0b0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d106      	bne.n	800becc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f00b fe26 	bl	8017b18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2203      	movs	r2, #3
 800bed0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4618      	mov	r0, r3
 800beda:	f008 f86e 	bl	8013fba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6818      	ldr	r0, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	7c1a      	ldrb	r2, [r3, #16]
 800bee6:	f88d 2000 	strb.w	r2, [sp]
 800beea:	3304      	adds	r3, #4
 800beec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800beee:	f007 ff3f 	bl	8013d70 <USB_CoreInit>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d005      	beq.n	800bf04 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2202      	movs	r2, #2
 800befc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e0d5      	b.n	800c0b0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f008 f866 	bl	8013fdc <USB_SetCurrentMode>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d005      	beq.n	800bf22 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e0c6      	b.n	800c0b0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf22:	2300      	movs	r3, #0
 800bf24:	73fb      	strb	r3, [r7, #15]
 800bf26:	e04a      	b.n	800bfbe <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bf28:	7bfa      	ldrb	r2, [r7, #15]
 800bf2a:	6879      	ldr	r1, [r7, #4]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	00db      	lsls	r3, r3, #3
 800bf30:	4413      	add	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	440b      	add	r3, r1
 800bf36:	3315      	adds	r3, #21
 800bf38:	2201      	movs	r2, #1
 800bf3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bf3c:	7bfa      	ldrb	r2, [r7, #15]
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	4613      	mov	r3, r2
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	4413      	add	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	440b      	add	r3, r1
 800bf4a:	3314      	adds	r3, #20
 800bf4c:	7bfa      	ldrb	r2, [r7, #15]
 800bf4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bf50:	7bfa      	ldrb	r2, [r7, #15]
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
 800bf54:	b298      	uxth	r0, r3
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	440b      	add	r3, r1
 800bf62:	332e      	adds	r3, #46	@ 0x2e
 800bf64:	4602      	mov	r2, r0
 800bf66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bf68:	7bfa      	ldrb	r2, [r7, #15]
 800bf6a:	6879      	ldr	r1, [r7, #4]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	4413      	add	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	440b      	add	r3, r1
 800bf76:	3318      	adds	r3, #24
 800bf78:	2200      	movs	r2, #0
 800bf7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bf7c:	7bfa      	ldrb	r2, [r7, #15]
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	4613      	mov	r3, r2
 800bf82:	00db      	lsls	r3, r3, #3
 800bf84:	4413      	add	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	440b      	add	r3, r1
 800bf8a:	331c      	adds	r3, #28
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bf90:	7bfa      	ldrb	r2, [r7, #15]
 800bf92:	6879      	ldr	r1, [r7, #4]
 800bf94:	4613      	mov	r3, r2
 800bf96:	00db      	lsls	r3, r3, #3
 800bf98:	4413      	add	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	440b      	add	r3, r1
 800bf9e:	3320      	adds	r3, #32
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bfa4:	7bfa      	ldrb	r2, [r7, #15]
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	00db      	lsls	r3, r3, #3
 800bfac:	4413      	add	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	3324      	adds	r3, #36	@ 0x24
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bfb8:	7bfb      	ldrb	r3, [r7, #15]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	73fb      	strb	r3, [r7, #15]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	791b      	ldrb	r3, [r3, #4]
 800bfc2:	7bfa      	ldrb	r2, [r7, #15]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d3af      	bcc.n	800bf28 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73fb      	strb	r3, [r7, #15]
 800bfcc:	e044      	b.n	800c058 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bfce:	7bfa      	ldrb	r2, [r7, #15]
 800bfd0:	6879      	ldr	r1, [r7, #4]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	4413      	add	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	440b      	add	r3, r1
 800bfdc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bfe4:	7bfa      	ldrb	r2, [r7, #15]
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	4613      	mov	r3, r2
 800bfea:	00db      	lsls	r3, r3, #3
 800bfec:	4413      	add	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	440b      	add	r3, r1
 800bff2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800bff6:	7bfa      	ldrb	r2, [r7, #15]
 800bff8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bffa:	7bfa      	ldrb	r2, [r7, #15]
 800bffc:	6879      	ldr	r1, [r7, #4]
 800bffe:	4613      	mov	r3, r2
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	4413      	add	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	440b      	add	r3, r1
 800c008:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c00c:	2200      	movs	r2, #0
 800c00e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c010:	7bfa      	ldrb	r2, [r7, #15]
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	4613      	mov	r3, r2
 800c016:	00db      	lsls	r3, r3, #3
 800c018:	4413      	add	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	440b      	add	r3, r1
 800c01e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c026:	7bfa      	ldrb	r2, [r7, #15]
 800c028:	6879      	ldr	r1, [r7, #4]
 800c02a:	4613      	mov	r3, r2
 800c02c:	00db      	lsls	r3, r3, #3
 800c02e:	4413      	add	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	440b      	add	r3, r1
 800c034:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c038:	2200      	movs	r2, #0
 800c03a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c03c:	7bfa      	ldrb	r2, [r7, #15]
 800c03e:	6879      	ldr	r1, [r7, #4]
 800c040:	4613      	mov	r3, r2
 800c042:	00db      	lsls	r3, r3, #3
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	440b      	add	r3, r1
 800c04a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c04e:	2200      	movs	r2, #0
 800c050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	3301      	adds	r3, #1
 800c056:	73fb      	strb	r3, [r7, #15]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	791b      	ldrb	r3, [r3, #4]
 800c05c:	7bfa      	ldrb	r2, [r7, #15]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d3b5      	bcc.n	800bfce <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6818      	ldr	r0, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	7c1a      	ldrb	r2, [r3, #16]
 800c06a:	f88d 2000 	strb.w	r2, [sp]
 800c06e:	3304      	adds	r3, #4
 800c070:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c072:	f007 ffff 	bl	8014074 <USB_DevInit>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d005      	beq.n	800c088 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2202      	movs	r2, #2
 800c080:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	e013      	b.n	800c0b0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	7b1b      	ldrb	r3, [r3, #12]
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d102      	bne.n	800c0a4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f001 f96e 	bl	800d380 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f009 f842 	bl	8015132 <USB_DevDisconnect>

  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d101      	bne.n	800c0d4 <HAL_PCD_Start+0x1c>
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	e022      	b.n	800c11a <HAL_PCD_Start+0x62>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d009      	beq.n	800c0fc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d105      	bne.n	800c0fc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4618      	mov	r0, r3
 800c102:	f007 ff49 	bl	8013f98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f008 fff0 	bl	80150f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c122:	b590      	push	{r4, r7, lr}
 800c124:	b08d      	sub	sp, #52	@ 0x34
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4618      	mov	r0, r3
 800c13a:	f009 f8ae 	bl	801529a <USB_GetMode>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	f040 84b9 	bne.w	800cab8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f009 f812 	bl	8015174 <USB_ReadInterrupts>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 84af 	beq.w	800cab6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	0a1b      	lsrs	r3, r3, #8
 800c162:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4618      	mov	r0, r3
 800c172:	f008 ffff 	bl	8015174 <USB_ReadInterrupts>
 800c176:	4603      	mov	r3, r0
 800c178:	f003 0302 	and.w	r3, r3, #2
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d107      	bne.n	800c190 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	695a      	ldr	r2, [r3, #20]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f002 0202 	and.w	r2, r2, #2
 800c18e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4618      	mov	r0, r3
 800c196:	f008 ffed 	bl	8015174 <USB_ReadInterrupts>
 800c19a:	4603      	mov	r3, r0
 800c19c:	f003 0310 	and.w	r3, r3, #16
 800c1a0:	2b10      	cmp	r3, #16
 800c1a2:	d161      	bne.n	800c268 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	699a      	ldr	r2, [r3, #24]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f022 0210 	bic.w	r2, r2, #16
 800c1b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c1b4:	6a3b      	ldr	r3, [r7, #32]
 800c1b6:	6a1b      	ldr	r3, [r3, #32]
 800c1b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	f003 020f 	and.w	r2, r3, #15
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	00db      	lsls	r3, r3, #3
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c1da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c1de:	d124      	bne.n	800c22a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c1e0:	69ba      	ldr	r2, [r7, #24]
 800c1e2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d035      	beq.n	800c258 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	091b      	lsrs	r3, r3, #4
 800c1f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c1f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	6a38      	ldr	r0, [r7, #32]
 800c200:	f008 fe24 	bl	8014e4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	68da      	ldr	r2, [r3, #12]
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	091b      	lsrs	r3, r3, #4
 800c20c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c210:	441a      	add	r2, r3
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	695a      	ldr	r2, [r3, #20]
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	091b      	lsrs	r3, r3, #4
 800c21e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c222:	441a      	add	r2, r3
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	615a      	str	r2, [r3, #20]
 800c228:	e016      	b.n	800c258 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c230:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c234:	d110      	bne.n	800c258 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c23c:	2208      	movs	r2, #8
 800c23e:	4619      	mov	r1, r3
 800c240:	6a38      	ldr	r0, [r7, #32]
 800c242:	f008 fe03 	bl	8014e4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	695a      	ldr	r2, [r3, #20]
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	091b      	lsrs	r3, r3, #4
 800c24e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c252:	441a      	add	r2, r3
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	699a      	ldr	r2, [r3, #24]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f042 0210 	orr.w	r2, r2, #16
 800c266:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f008 ff81 	bl	8015174 <USB_ReadInterrupts>
 800c272:	4603      	mov	r3, r0
 800c274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c278:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c27c:	f040 80a7 	bne.w	800c3ce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c280:	2300      	movs	r3, #0
 800c282:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f008 ff86 	bl	801519a <USB_ReadDevAllOutEpInterrupt>
 800c28e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c290:	e099      	b.n	800c3c6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c294:	f003 0301 	and.w	r3, r3, #1
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 808e 	beq.w	800c3ba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2a4:	b2d2      	uxtb	r2, r2
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f008 ffaa 	bl	8015202 <USB_ReadDevOutEPInterrupt>
 800c2ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	f003 0301 	and.w	r3, r3, #1
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00c      	beq.n	800c2d4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	015a      	lsls	r2, r3, #5
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c2cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fed0 	bl	800d074 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	f003 0308 	and.w	r3, r3, #8
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00c      	beq.n	800c2f8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	2308      	movs	r3, #8
 800c2ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c2f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 ffa6 	bl	800d244 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	f003 0310 	and.w	r3, r3, #16
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d008      	beq.n	800c314 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c304:	015a      	lsls	r2, r3, #5
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	4413      	add	r3, r2
 800c30a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c30e:	461a      	mov	r2, r3
 800c310:	2310      	movs	r3, #16
 800c312:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	f003 0302 	and.w	r3, r3, #2
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d030      	beq.n	800c380 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c31e:	6a3b      	ldr	r3, [r7, #32]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c326:	2b80      	cmp	r3, #128	@ 0x80
 800c328:	d109      	bne.n	800c33e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	69fa      	ldr	r2, [r7, #28]
 800c334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c338:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c33c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c340:	4613      	mov	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	4413      	add	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	4413      	add	r3, r2
 800c350:	3304      	adds	r3, #4
 800c352:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	78db      	ldrb	r3, [r3, #3]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d108      	bne.n	800c36e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2200      	movs	r2, #0
 800c360:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c364:	b2db      	uxtb	r3, r3
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f00b fcfb 	bl	8017d64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c370:	015a      	lsls	r2, r3, #5
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	4413      	add	r3, r2
 800c376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c37a:	461a      	mov	r2, r3
 800c37c:	2302      	movs	r3, #2
 800c37e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	f003 0320 	and.w	r3, r3, #32
 800c386:	2b00      	cmp	r3, #0
 800c388:	d008      	beq.n	800c39c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c396:	461a      	mov	r2, r3
 800c398:	2320      	movs	r3, #32
 800c39a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d009      	beq.n	800c3ba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	015a      	lsls	r2, r3, #5
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c3b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3bc:	3301      	adds	r3, #1
 800c3be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	085b      	lsrs	r3, r3, #1
 800c3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f47f af62 	bne.w	800c292 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f008 fece 	bl	8015174 <USB_ReadInterrupts>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c3de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c3e2:	f040 80db 	bne.w	800c59c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f008 feef 	bl	80151ce <USB_ReadDevAllInEpInterrupt>
 800c3f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c3f6:	e0cd      	b.n	800c594 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f000 80c2 	beq.w	800c588 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c40a:	b2d2      	uxtb	r2, r2
 800c40c:	4611      	mov	r1, r2
 800c40e:	4618      	mov	r0, r3
 800c410:	f008 ff15 	bl	801523e <USB_ReadDevInEPInterrupt>
 800c414:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d057      	beq.n	800c4d0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c422:	f003 030f 	and.w	r3, r3, #15
 800c426:	2201      	movs	r2, #1
 800c428:	fa02 f303 	lsl.w	r3, r2, r3
 800c42c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	43db      	mvns	r3, r3
 800c43a:	69f9      	ldr	r1, [r7, #28]
 800c43c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c440:	4013      	ands	r3, r2
 800c442:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c446:	015a      	lsls	r2, r3, #5
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	4413      	add	r3, r2
 800c44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c450:	461a      	mov	r2, r3
 800c452:	2301      	movs	r3, #1
 800c454:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	799b      	ldrb	r3, [r3, #6]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d132      	bne.n	800c4c4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c45e:	6879      	ldr	r1, [r7, #4]
 800c460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c462:	4613      	mov	r3, r2
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	4413      	add	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	440b      	add	r3, r1
 800c46c:	3320      	adds	r3, #32
 800c46e:	6819      	ldr	r1, [r3, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c474:	4613      	mov	r3, r2
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4403      	add	r3, r0
 800c47e:	331c      	adds	r3, #28
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4419      	add	r1, r3
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c488:	4613      	mov	r3, r2
 800c48a:	00db      	lsls	r3, r3, #3
 800c48c:	4413      	add	r3, r2
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	4403      	add	r3, r0
 800c492:	3320      	adds	r3, #32
 800c494:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d113      	bne.n	800c4c4 <HAL_PCD_IRQHandler+0x3a2>
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	00db      	lsls	r3, r3, #3
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	440b      	add	r3, r1
 800c4aa:	3324      	adds	r3, #36	@ 0x24
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d108      	bne.n	800c4c4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6818      	ldr	r0, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c4bc:	461a      	mov	r2, r3
 800c4be:	2101      	movs	r1, #1
 800c4c0:	f008 ff1e 	bl	8015300 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f00b fbc5 	bl	8017c5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f003 0308 	and.w	r3, r3, #8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d008      	beq.n	800c4ec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4dc:	015a      	lsls	r2, r3, #5
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	2308      	movs	r3, #8
 800c4ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	f003 0310 	and.w	r3, r3, #16
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d008      	beq.n	800c508 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	015a      	lsls	r2, r3, #5
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c502:	461a      	mov	r2, r3
 800c504:	2310      	movs	r3, #16
 800c506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d008      	beq.n	800c524 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c514:	015a      	lsls	r2, r3, #5
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	4413      	add	r3, r2
 800c51a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c51e:	461a      	mov	r2, r3
 800c520:	2340      	movs	r3, #64	@ 0x40
 800c522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f003 0302 	and.w	r3, r3, #2
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d023      	beq.n	800c576 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c52e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c530:	6a38      	ldr	r0, [r7, #32]
 800c532:	f007 fefd 	bl	8014330 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c538:	4613      	mov	r3, r2
 800c53a:	00db      	lsls	r3, r3, #3
 800c53c:	4413      	add	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	3310      	adds	r3, #16
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	4413      	add	r3, r2
 800c546:	3304      	adds	r3, #4
 800c548:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	78db      	ldrb	r3, [r3, #3]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d108      	bne.n	800c564 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2200      	movs	r2, #0
 800c556:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f00b fc12 	bl	8017d88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	015a      	lsls	r2, r3, #5
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	4413      	add	r3, r2
 800c56c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c570:	461a      	mov	r2, r3
 800c572:	2302      	movs	r3, #2
 800c574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d003      	beq.n	800c588 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fcea 	bl	800cf5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58a:	3301      	adds	r3, #1
 800c58c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c590:	085b      	lsrs	r3, r3, #1
 800c592:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c596:	2b00      	cmp	r3, #0
 800c598:	f47f af2e 	bne.w	800c3f8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f008 fde7 	bl	8015174 <USB_ReadInterrupts>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5b0:	d122      	bne.n	800c5f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	69fa      	ldr	r2, [r7, #28]
 800c5bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c5c0:	f023 0301 	bic.w	r3, r3, #1
 800c5c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d108      	bne.n	800c5e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c5d8:	2100      	movs	r1, #0
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fef4 	bl	800d3c8 <HAL_PCDEx_LPM_Callback>
 800c5e0:	e002      	b.n	800c5e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f00b fbb0 	bl	8017d48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	695a      	ldr	r2, [r3, #20]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c5f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f008 fdb9 	bl	8015174 <USB_ReadInterrupts>
 800c602:	4603      	mov	r3, r0
 800c604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c60c:	d112      	bne.n	800c634 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d102      	bne.n	800c624 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f00b fb6c 	bl	8017cfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	695a      	ldr	r2, [r3, #20]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c632:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4618      	mov	r0, r3
 800c63a:	f008 fd9b 	bl	8015174 <USB_ReadInterrupts>
 800c63e:	4603      	mov	r3, r0
 800c640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c648:	d121      	bne.n	800c68e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	695a      	ldr	r2, [r3, #20]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c658:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c660:	2b00      	cmp	r3, #0
 800c662:	d111      	bne.n	800c688 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c672:	089b      	lsrs	r3, r3, #2
 800c674:	f003 020f 	and.w	r2, r3, #15
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c67e:	2101      	movs	r1, #1
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 fea1 	bl	800d3c8 <HAL_PCDEx_LPM_Callback>
 800c686:	e002      	b.n	800c68e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f00b fb37 	bl	8017cfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4618      	mov	r0, r3
 800c694:	f008 fd6e 	bl	8015174 <USB_ReadInterrupts>
 800c698:	4603      	mov	r3, r0
 800c69a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c69e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6a2:	f040 80b7 	bne.w	800c814 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	69fa      	ldr	r2, [r7, #28]
 800c6b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c6b4:	f023 0301 	bic.w	r3, r3, #1
 800c6b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2110      	movs	r1, #16
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f007 fe35 	bl	8014330 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6ca:	e046      	b.n	800c75a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ce:	015a      	lsls	r2, r3, #5
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6d8:	461a      	mov	r2, r3
 800c6da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c6de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6f0:	0151      	lsls	r1, r2, #5
 800c6f2:	69fa      	ldr	r2, [r7, #28]
 800c6f4:	440a      	add	r2, r1
 800c6f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c702:	015a      	lsls	r2, r3, #5
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	4413      	add	r3, r2
 800c708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c70c:	461a      	mov	r2, r3
 800c70e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c712:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c716:	015a      	lsls	r2, r3, #5
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	4413      	add	r3, r2
 800c71c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c724:	0151      	lsls	r1, r2, #5
 800c726:	69fa      	ldr	r2, [r7, #28]
 800c728:	440a      	add	r2, r1
 800c72a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c72e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c732:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c744:	0151      	lsls	r1, r2, #5
 800c746:	69fa      	ldr	r2, [r7, #28]
 800c748:	440a      	add	r2, r1
 800c74a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c74e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c752:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c756:	3301      	adds	r3, #1
 800c758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	791b      	ldrb	r3, [r3, #4]
 800c75e:	461a      	mov	r2, r3
 800c760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c762:	4293      	cmp	r3, r2
 800c764:	d3b2      	bcc.n	800c6cc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	69fa      	ldr	r2, [r7, #28]
 800c770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c774:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c778:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	7bdb      	ldrb	r3, [r3, #15]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d016      	beq.n	800c7b0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c78c:	69fa      	ldr	r2, [r7, #28]
 800c78e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c792:	f043 030b 	orr.w	r3, r3, #11
 800c796:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7a2:	69fa      	ldr	r2, [r7, #28]
 800c7a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7a8:	f043 030b 	orr.w	r3, r3, #11
 800c7ac:	6453      	str	r3, [r2, #68]	@ 0x44
 800c7ae:	e015      	b.n	800c7dc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7b6:	695a      	ldr	r2, [r3, #20]
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7be:	4619      	mov	r1, r3
 800c7c0:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	69fa      	ldr	r2, [r7, #28]
 800c7d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7d6:	f043 030b 	orr.w	r3, r3, #11
 800c7da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	69fa      	ldr	r2, [r7, #28]
 800c7e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c7ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6818      	ldr	r0, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c7fe:	461a      	mov	r2, r3
 800c800:	f008 fd7e 	bl	8015300 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	695a      	ldr	r2, [r3, #20]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4618      	mov	r0, r3
 800c81a:	f008 fcab 	bl	8015174 <USB_ReadInterrupts>
 800c81e:	4603      	mov	r3, r0
 800c820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c828:	d123      	bne.n	800c872 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4618      	mov	r0, r3
 800c830:	f008 fd42 	bl	80152b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4618      	mov	r0, r3
 800c83a:	f007 fdf2 	bl	8014422 <USB_GetDevSpeed>
 800c83e:	4603      	mov	r3, r0
 800c840:	461a      	mov	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681c      	ldr	r4, [r3, #0]
 800c84a:	f001 fd9d 	bl	800e388 <HAL_RCC_GetHCLKFreq>
 800c84e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c854:	461a      	mov	r2, r3
 800c856:	4620      	mov	r0, r4
 800c858:	f007 fafc 	bl	8013e54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f00b fa24 	bl	8017caa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	695a      	ldr	r2, [r3, #20]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c870:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4618      	mov	r0, r3
 800c878:	f008 fc7c 	bl	8015174 <USB_ReadInterrupts>
 800c87c:	4603      	mov	r3, r0
 800c87e:	f003 0308 	and.w	r3, r3, #8
 800c882:	2b08      	cmp	r3, #8
 800c884:	d10a      	bne.n	800c89c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f00b fa01 	bl	8017c8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	695a      	ldr	r2, [r3, #20]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f002 0208 	and.w	r2, r2, #8
 800c89a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f008 fc67 	bl	8015174 <USB_ReadInterrupts>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8ac:	2b80      	cmp	r3, #128	@ 0x80
 800c8ae:	d123      	bne.n	800c8f8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	699b      	ldr	r3, [r3, #24]
 800c8b4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c8bc:	2301      	movs	r3, #1
 800c8be:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8c0:	e014      	b.n	800c8ec <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c8c2:	6879      	ldr	r1, [r7, #4]
 800c8c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	00db      	lsls	r3, r3, #3
 800c8ca:	4413      	add	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	440b      	add	r3, r1
 800c8d0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d105      	bne.n	800c8e6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fb0a 	bl	800cefa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	791b      	ldrb	r3, [r3, #4]
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d3e4      	bcc.n	800c8c2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f008 fc39 	bl	8015174 <USB_ReadInterrupts>
 800c902:	4603      	mov	r3, r0
 800c904:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c90c:	d13c      	bne.n	800c988 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c90e:	2301      	movs	r3, #1
 800c910:	627b      	str	r3, [r7, #36]	@ 0x24
 800c912:	e02b      	b.n	800c96c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c916:	015a      	lsls	r2, r3, #5
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c924:	6879      	ldr	r1, [r7, #4]
 800c926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c928:	4613      	mov	r3, r2
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	4413      	add	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	440b      	add	r3, r1
 800c932:	3318      	adds	r3, #24
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d115      	bne.n	800c966 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c93a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	da12      	bge.n	800c966 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c944:	4613      	mov	r3, r2
 800c946:	00db      	lsls	r3, r3, #3
 800c948:	4413      	add	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	440b      	add	r3, r1
 800c94e:	3317      	adds	r3, #23
 800c950:	2201      	movs	r2, #1
 800c952:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c956:	b2db      	uxtb	r3, r3
 800c958:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 faca 	bl	800cefa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c968:	3301      	adds	r3, #1
 800c96a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	791b      	ldrb	r3, [r3, #4]
 800c970:	461a      	mov	r2, r3
 800c972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c974:	4293      	cmp	r3, r2
 800c976:	d3cd      	bcc.n	800c914 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	695a      	ldr	r2, [r3, #20]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f008 fbf1 	bl	8015174 <USB_ReadInterrupts>
 800c992:	4603      	mov	r3, r0
 800c994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c998:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c99c:	d156      	bne.n	800ca4c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c99e:	2301      	movs	r3, #1
 800c9a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9a2:	e045      	b.n	800ca30 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a6:	015a      	lsls	r2, r3, #5
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c9b4:	6879      	ldr	r1, [r7, #4]
 800c9b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	4413      	add	r3, r2
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	440b      	add	r3, r1
 800c9c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d12e      	bne.n	800ca2a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c9cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	da2b      	bge.n	800ca2a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	0c1a      	lsrs	r2, r3, #16
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c9dc:	4053      	eors	r3, r2
 800c9de:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d121      	bne.n	800ca2a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c9e6:	6879      	ldr	r1, [r7, #4]
 800c9e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	00db      	lsls	r3, r3, #3
 800c9ee:	4413      	add	r3, r2
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	440b      	add	r3, r1
 800c9f4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c9fc:	6a3b      	ldr	r3, [r7, #32]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	695b      	ldr	r3, [r3, #20]
 800ca0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10a      	bne.n	800ca2a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	69fa      	ldr	r2, [r7, #28]
 800ca1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ca26:	6053      	str	r3, [r2, #4]
            break;
 800ca28:	e008      	b.n	800ca3c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	791b      	ldrb	r3, [r3, #4]
 800ca34:	461a      	mov	r2, r3
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d3b3      	bcc.n	800c9a4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	695a      	ldr	r2, [r3, #20]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800ca4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f008 fb8f 	bl	8015174 <USB_ReadInterrupts>
 800ca56:	4603      	mov	r3, r0
 800ca58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ca5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca60:	d10a      	bne.n	800ca78 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f00b f9a2 	bl	8017dac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	695a      	ldr	r2, [r3, #20]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ca76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f008 fb79 	bl	8015174 <USB_ReadInterrupts>
 800ca82:	4603      	mov	r3, r0
 800ca84:	f003 0304 	and.w	r3, r3, #4
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	d115      	bne.n	800cab8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	f003 0304 	and.w	r3, r3, #4
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d002      	beq.n	800caa4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f00b f992 	bl	8017dc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	6859      	ldr	r1, [r3, #4]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	69ba      	ldr	r2, [r7, #24]
 800cab0:	430a      	orrs	r2, r1
 800cab2:	605a      	str	r2, [r3, #4]
 800cab4:	e000      	b.n	800cab8 <HAL_PCD_IRQHandler+0x996>
      return;
 800cab6:	bf00      	nop
    }
  }
}
 800cab8:	3734      	adds	r7, #52	@ 0x34
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd90      	pop	{r4, r7, pc}

0800cabe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b082      	sub	sp, #8
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	460b      	mov	r3, r1
 800cac8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d101      	bne.n	800cad8 <HAL_PCD_SetAddress+0x1a>
 800cad4:	2302      	movs	r3, #2
 800cad6:	e012      	b.n	800cafe <HAL_PCD_SetAddress+0x40>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	78fa      	ldrb	r2, [r7, #3]
 800cae4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	78fa      	ldrb	r2, [r7, #3]
 800caec:	4611      	mov	r1, r2
 800caee:	4618      	mov	r0, r3
 800caf0:	f008 fad8 	bl	80150a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b084      	sub	sp, #16
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	4608      	mov	r0, r1
 800cb10:	4611      	mov	r1, r2
 800cb12:	461a      	mov	r2, r3
 800cb14:	4603      	mov	r3, r0
 800cb16:	70fb      	strb	r3, [r7, #3]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	803b      	strh	r3, [r7, #0]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800cb20:	2300      	movs	r3, #0
 800cb22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cb24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	da0f      	bge.n	800cb4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb2c:	78fb      	ldrb	r3, [r7, #3]
 800cb2e:	f003 020f 	and.w	r2, r3, #15
 800cb32:	4613      	mov	r3, r2
 800cb34:	00db      	lsls	r3, r3, #3
 800cb36:	4413      	add	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	3310      	adds	r3, #16
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	4413      	add	r3, r2
 800cb40:	3304      	adds	r3, #4
 800cb42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2201      	movs	r2, #1
 800cb48:	705a      	strb	r2, [r3, #1]
 800cb4a:	e00f      	b.n	800cb6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb4c:	78fb      	ldrb	r3, [r7, #3]
 800cb4e:	f003 020f 	and.w	r2, r3, #15
 800cb52:	4613      	mov	r3, r2
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	4413      	add	r3, r2
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	4413      	add	r3, r2
 800cb62:	3304      	adds	r3, #4
 800cb64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cb6c:	78fb      	ldrb	r3, [r7, #3]
 800cb6e:	f003 030f 	and.w	r3, r3, #15
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800cb78:	883b      	ldrh	r3, [r7, #0]
 800cb7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	78ba      	ldrb	r2, [r7, #2]
 800cb86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	785b      	ldrb	r3, [r3, #1]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d004      	beq.n	800cb9a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	461a      	mov	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cb9a:	78bb      	ldrb	r3, [r7, #2]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d102      	bne.n	800cba6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d101      	bne.n	800cbb4 <HAL_PCD_EP_Open+0xae>
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	e00e      	b.n	800cbd2 <HAL_PCD_EP_Open+0xcc>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68f9      	ldr	r1, [r7, #12]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f007 fc52 	bl	801446c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800cbd0:	7afb      	ldrb	r3, [r7, #11]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b084      	sub	sp, #16
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cbe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	da0f      	bge.n	800cc0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cbee:	78fb      	ldrb	r3, [r7, #3]
 800cbf0:	f003 020f 	and.w	r2, r3, #15
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	4413      	add	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	3310      	adds	r3, #16
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	4413      	add	r3, r2
 800cc02:	3304      	adds	r3, #4
 800cc04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2201      	movs	r2, #1
 800cc0a:	705a      	strb	r2, [r3, #1]
 800cc0c:	e00f      	b.n	800cc2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc0e:	78fb      	ldrb	r3, [r7, #3]
 800cc10:	f003 020f 	and.w	r2, r3, #15
 800cc14:	4613      	mov	r3, r2
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	4413      	add	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	4413      	add	r3, r2
 800cc24:	3304      	adds	r3, #4
 800cc26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc2e:	78fb      	ldrb	r3, [r7, #3]
 800cc30:	f003 030f 	and.w	r3, r3, #15
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d101      	bne.n	800cc48 <HAL_PCD_EP_Close+0x6e>
 800cc44:	2302      	movs	r3, #2
 800cc46:	e00e      	b.n	800cc66 <HAL_PCD_EP_Close+0x8c>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	68f9      	ldr	r1, [r7, #12]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f007 fc90 	bl	801457c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b086      	sub	sp, #24
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	60f8      	str	r0, [r7, #12]
 800cc76:	607a      	str	r2, [r7, #4]
 800cc78:	603b      	str	r3, [r7, #0]
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc7e:	7afb      	ldrb	r3, [r7, #11]
 800cc80:	f003 020f 	and.w	r2, r3, #15
 800cc84:	4613      	mov	r3, r2
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	4413      	add	r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	4413      	add	r3, r2
 800cc94:	3304      	adds	r3, #4
 800cc96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	2200      	movs	r2, #0
 800cca8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2200      	movs	r2, #0
 800ccae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ccb0:	7afb      	ldrb	r3, [r7, #11]
 800ccb2:	f003 030f 	and.w	r3, r3, #15
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	799b      	ldrb	r3, [r3, #6]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d102      	bne.n	800ccca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6818      	ldr	r0, [r3, #0]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	799b      	ldrb	r3, [r3, #6]
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	6979      	ldr	r1, [r7, #20]
 800ccd6:	f007 fd2d 	bl	8014734 <USB_EPStartXfer>

  return HAL_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3718      	adds	r7, #24
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	460b      	mov	r3, r1
 800ccee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ccf0:	78fb      	ldrb	r3, [r7, #3]
 800ccf2:	f003 020f 	and.w	r2, r3, #15
 800ccf6:	6879      	ldr	r1, [r7, #4]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	4413      	add	r3, r2
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	440b      	add	r3, r1
 800cd02:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800cd06:	681b      	ldr	r3, [r3, #0]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b086      	sub	sp, #24
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	607a      	str	r2, [r7, #4]
 800cd1e:	603b      	str	r3, [r7, #0]
 800cd20:	460b      	mov	r3, r1
 800cd22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd24:	7afb      	ldrb	r3, [r7, #11]
 800cd26:	f003 020f 	and.w	r2, r3, #15
 800cd2a:	4613      	mov	r3, r2
 800cd2c:	00db      	lsls	r3, r3, #3
 800cd2e:	4413      	add	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	3310      	adds	r3, #16
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	4413      	add	r3, r2
 800cd38:	3304      	adds	r3, #4
 800cd3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	683a      	ldr	r2, [r7, #0]
 800cd46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2201      	movs	r2, #1
 800cd52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cd54:	7afb      	ldrb	r3, [r7, #11]
 800cd56:	f003 030f 	and.w	r3, r3, #15
 800cd5a:	b2da      	uxtb	r2, r3
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	799b      	ldrb	r3, [r3, #6]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d102      	bne.n	800cd6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6818      	ldr	r0, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	799b      	ldrb	r3, [r3, #6]
 800cd76:	461a      	mov	r2, r3
 800cd78:	6979      	ldr	r1, [r7, #20]
 800cd7a:	f007 fcdb 	bl	8014734 <USB_EPStartXfer>

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	460b      	mov	r3, r1
 800cd92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cd94:	78fb      	ldrb	r3, [r7, #3]
 800cd96:	f003 030f 	and.w	r3, r3, #15
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	7912      	ldrb	r2, [r2, #4]
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d901      	bls.n	800cda6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e04f      	b.n	800ce46 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cda6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	da0f      	bge.n	800cdce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cdae:	78fb      	ldrb	r3, [r7, #3]
 800cdb0:	f003 020f 	and.w	r2, r3, #15
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	00db      	lsls	r3, r3, #3
 800cdb8:	4413      	add	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	3310      	adds	r3, #16
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	705a      	strb	r2, [r3, #1]
 800cdcc:	e00d      	b.n	800cdea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cdce:	78fa      	ldrb	r2, [r7, #3]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	00db      	lsls	r3, r3, #3
 800cdd4:	4413      	add	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	4413      	add	r3, r2
 800cde0:	3304      	adds	r3, #4
 800cde2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2200      	movs	r2, #0
 800cde8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2201      	movs	r2, #1
 800cdee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	f003 030f 	and.w	r3, r3, #15
 800cdf6:	b2da      	uxtb	r2, r3
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d101      	bne.n	800ce0a <HAL_PCD_EP_SetStall+0x82>
 800ce06:	2302      	movs	r3, #2
 800ce08:	e01d      	b.n	800ce46 <HAL_PCD_EP_SetStall+0xbe>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68f9      	ldr	r1, [r7, #12]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f008 f86f 	bl	8014efc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ce1e:	78fb      	ldrb	r3, [r7, #3]
 800ce20:	f003 030f 	and.w	r3, r3, #15
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d109      	bne.n	800ce3c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6818      	ldr	r0, [r3, #0]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	7999      	ldrb	r1, [r3, #6]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ce36:	461a      	mov	r2, r3
 800ce38:	f008 fa62 	bl	8015300 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
 800ce56:	460b      	mov	r3, r1
 800ce58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ce5a:	78fb      	ldrb	r3, [r7, #3]
 800ce5c:	f003 030f 	and.w	r3, r3, #15
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	7912      	ldrb	r2, [r2, #4]
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d901      	bls.n	800ce6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e042      	b.n	800cef2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ce6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	da0f      	bge.n	800ce94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce74:	78fb      	ldrb	r3, [r7, #3]
 800ce76:	f003 020f 	and.w	r2, r3, #15
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	00db      	lsls	r3, r3, #3
 800ce7e:	4413      	add	r3, r2
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	3310      	adds	r3, #16
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	4413      	add	r3, r2
 800ce88:	3304      	adds	r3, #4
 800ce8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	705a      	strb	r2, [r3, #1]
 800ce92:	e00f      	b.n	800ceb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce94:	78fb      	ldrb	r3, [r7, #3]
 800ce96:	f003 020f 	and.w	r2, r3, #15
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	4413      	add	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	4413      	add	r3, r2
 800ceaa:	3304      	adds	r3, #4
 800ceac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ceba:	78fb      	ldrb	r3, [r7, #3]
 800cebc:	f003 030f 	and.w	r3, r3, #15
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d101      	bne.n	800ced4 <HAL_PCD_EP_ClrStall+0x86>
 800ced0:	2302      	movs	r3, #2
 800ced2:	e00e      	b.n	800cef2 <HAL_PCD_EP_ClrStall+0xa4>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	68f9      	ldr	r1, [r7, #12]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f008 f878 	bl	8014fd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b084      	sub	sp, #16
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	460b      	mov	r3, r1
 800cf04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800cf06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	da0c      	bge.n	800cf28 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf0e:	78fb      	ldrb	r3, [r7, #3]
 800cf10:	f003 020f 	and.w	r2, r3, #15
 800cf14:	4613      	mov	r3, r2
 800cf16:	00db      	lsls	r3, r3, #3
 800cf18:	4413      	add	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	3310      	adds	r3, #16
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	4413      	add	r3, r2
 800cf22:	3304      	adds	r3, #4
 800cf24:	60fb      	str	r3, [r7, #12]
 800cf26:	e00c      	b.n	800cf42 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf28:	78fb      	ldrb	r3, [r7, #3]
 800cf2a:	f003 020f 	and.w	r2, r3, #15
 800cf2e:	4613      	mov	r3, r2
 800cf30:	00db      	lsls	r3, r3, #3
 800cf32:	4413      	add	r3, r2
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	3304      	adds	r3, #4
 800cf40:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68f9      	ldr	r1, [r7, #12]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f007 fe97 	bl	8014c7c <USB_EPStopXfer>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	72fb      	strb	r3, [r7, #11]

  return ret;
 800cf52:	7afb      	ldrb	r3, [r7, #11]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3710      	adds	r7, #16
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08a      	sub	sp, #40	@ 0x28
 800cf60:	af02      	add	r7, sp, #8
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	4613      	mov	r3, r2
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	4413      	add	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	3310      	adds	r3, #16
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	4413      	add	r3, r2
 800cf80:	3304      	adds	r3, #4
 800cf82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	695a      	ldr	r2, [r3, #20]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d901      	bls.n	800cf94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e06b      	b.n	800d06c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	691a      	ldr	r2, [r3, #16]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	695b      	ldr	r3, [r3, #20]
 800cf9c:	1ad3      	subs	r3, r2, r3
 800cf9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	69fa      	ldr	r2, [r7, #28]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d902      	bls.n	800cfb0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	3303      	adds	r3, #3
 800cfb4:	089b      	lsrs	r3, r3, #2
 800cfb6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfb8:	e02a      	b.n	800d010 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	691a      	ldr	r2, [r3, #16]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	695b      	ldr	r3, [r3, #20]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	69fa      	ldr	r2, [r7, #28]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d902      	bls.n	800cfd6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	3303      	adds	r3, #3
 800cfda:	089b      	lsrs	r3, r3, #2
 800cfdc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	68d9      	ldr	r1, [r3, #12]
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	4603      	mov	r3, r0
 800cff2:	6978      	ldr	r0, [r7, #20]
 800cff4:	f007 feec 	bl	8014dd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	68da      	ldr	r2, [r3, #12]
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	441a      	add	r2, r3
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	695a      	ldr	r2, [r3, #20]
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	441a      	add	r2, r3
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	015a      	lsls	r2, r3, #5
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	4413      	add	r3, r2
 800d018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d01c:	699b      	ldr	r3, [r3, #24]
 800d01e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d020:	69ba      	ldr	r2, [r7, #24]
 800d022:	429a      	cmp	r2, r3
 800d024:	d809      	bhi.n	800d03a <PCD_WriteEmptyTxFifo+0xde>
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	695a      	ldr	r2, [r3, #20]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d02e:	429a      	cmp	r2, r3
 800d030:	d203      	bcs.n	800d03a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1bf      	bne.n	800cfba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	691a      	ldr	r2, [r3, #16]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	695b      	ldr	r3, [r3, #20]
 800d042:	429a      	cmp	r2, r3
 800d044:	d811      	bhi.n	800d06a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	f003 030f 	and.w	r3, r3, #15
 800d04c:	2201      	movs	r2, #1
 800d04e:	fa02 f303 	lsl.w	r3, r2, r3
 800d052:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d05a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	43db      	mvns	r3, r3
 800d060:	6939      	ldr	r1, [r7, #16]
 800d062:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d066:	4013      	ands	r3, r2
 800d068:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3720      	adds	r7, #32
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b088      	sub	sp, #32
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	333c      	adds	r3, #60	@ 0x3c
 800d08c:	3304      	adds	r3, #4
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	015a      	lsls	r2, r3, #5
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	4413      	add	r3, r2
 800d09a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	799b      	ldrb	r3, [r3, #6]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d17b      	bne.n	800d1a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	f003 0308 	and.w	r3, r3, #8
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d015      	beq.n	800d0e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	4a61      	ldr	r2, [pc, #388]	@ (800d23c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	f240 80b9 	bls.w	800d230 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f000 80b3 	beq.w	800d230 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0dc:	6093      	str	r3, [r2, #8]
 800d0de:	e0a7      	b.n	800d230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	f003 0320 	and.w	r3, r3, #32
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d009      	beq.n	800d0fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	2320      	movs	r3, #32
 800d0fa:	6093      	str	r3, [r2, #8]
 800d0fc:	e098      	b.n	800d230 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d104:	2b00      	cmp	r3, #0
 800d106:	f040 8093 	bne.w	800d230 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	4a4b      	ldr	r2, [pc, #300]	@ (800d23c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d90f      	bls.n	800d132 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00a      	beq.n	800d132 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	015a      	lsls	r2, r3, #5
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	4413      	add	r3, r2
 800d124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d128:	461a      	mov	r2, r3
 800d12a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d12e:	6093      	str	r3, [r2, #8]
 800d130:	e07e      	b.n	800d230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	4613      	mov	r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	4413      	add	r3, r2
 800d144:	3304      	adds	r3, #4
 800d146:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6a1a      	ldr	r2, [r3, #32]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	0159      	lsls	r1, r3, #5
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	440b      	add	r3, r1
 800d154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d158:	691b      	ldr	r3, [r3, #16]
 800d15a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d15e:	1ad2      	subs	r2, r2, r3
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d114      	bne.n	800d194 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d109      	bne.n	800d186 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6818      	ldr	r0, [r3, #0]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d17c:	461a      	mov	r2, r3
 800d17e:	2101      	movs	r1, #1
 800d180:	f008 f8be 	bl	8015300 <USB_EP0_OutStart>
 800d184:	e006      	b.n	800d194 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68da      	ldr	r2, [r3, #12]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	695b      	ldr	r3, [r3, #20]
 800d18e:	441a      	add	r2, r3
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	b2db      	uxtb	r3, r3
 800d198:	4619      	mov	r1, r3
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f00a fd42 	bl	8017c24 <HAL_PCD_DataOutStageCallback>
 800d1a0:	e046      	b.n	800d230 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	4a26      	ldr	r2, [pc, #152]	@ (800d240 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d124      	bne.n	800d1f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00a      	beq.n	800d1ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	015a      	lsls	r2, r3, #5
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1c6:	6093      	str	r3, [r2, #8]
 800d1c8:	e032      	b.n	800d230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	f003 0320 	and.w	r3, r3, #32
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d008      	beq.n	800d1e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	2320      	movs	r3, #32
 800d1e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f00a fd19 	bl	8017c24 <HAL_PCD_DataOutStageCallback>
 800d1f2:	e01d      	b.n	800d230 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d114      	bne.n	800d224 <PCD_EP_OutXfrComplete_int+0x1b0>
 800d1fa:	6879      	ldr	r1, [r7, #4]
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	4613      	mov	r3, r2
 800d200:	00db      	lsls	r3, r3, #3
 800d202:	4413      	add	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	440b      	add	r3, r1
 800d208:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d108      	bne.n	800d224 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6818      	ldr	r0, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d21c:	461a      	mov	r2, r3
 800d21e:	2100      	movs	r1, #0
 800d220:	f008 f86e 	bl	8015300 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	b2db      	uxtb	r3, r3
 800d228:	4619      	mov	r1, r3
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f00a fcfa 	bl	8017c24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3720      	adds	r7, #32
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	4f54300a 	.word	0x4f54300a
 800d240:	4f54310a 	.word	0x4f54310a

0800d244 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b086      	sub	sp, #24
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	333c      	adds	r3, #60	@ 0x3c
 800d25c:	3304      	adds	r3, #4
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	015a      	lsls	r2, r3, #5
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	4413      	add	r3, r2
 800d26a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	4a15      	ldr	r2, [pc, #84]	@ (800d2cc <PCD_EP_OutSetupPacket_int+0x88>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d90e      	bls.n	800d298 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d280:	2b00      	cmp	r3, #0
 800d282:	d009      	beq.n	800d298 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	015a      	lsls	r2, r3, #5
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	4413      	add	r3, r2
 800d28c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d290:	461a      	mov	r2, r3
 800d292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d296:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f00a fcb1 	bl	8017c00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d2cc <PCD_EP_OutSetupPacket_int+0x88>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d90c      	bls.n	800d2c0 <PCD_EP_OutSetupPacket_int+0x7c>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	799b      	ldrb	r3, [r3, #6]
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d108      	bne.n	800d2c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	2101      	movs	r1, #1
 800d2bc:	f008 f820 	bl	8015300 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3718      	adds	r7, #24
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	4f54300a 	.word	0x4f54300a

0800d2d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	460b      	mov	r3, r1
 800d2da:	70fb      	strb	r3, [r7, #3]
 800d2dc:	4613      	mov	r3, r2
 800d2de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d2e8:	78fb      	ldrb	r3, [r7, #3]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d107      	bne.n	800d2fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d2ee:	883b      	ldrh	r3, [r7, #0]
 800d2f0:	0419      	lsls	r1, r3, #16
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	430a      	orrs	r2, r1
 800d2fa:	629a      	str	r2, [r3, #40]	@ 0x28
 800d2fc:	e028      	b.n	800d350 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d304:	0c1b      	lsrs	r3, r3, #16
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	4413      	add	r3, r2
 800d30a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d30c:	2300      	movs	r3, #0
 800d30e:	73fb      	strb	r3, [r7, #15]
 800d310:	e00d      	b.n	800d32e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	7bfb      	ldrb	r3, [r7, #15]
 800d318:	3340      	adds	r3, #64	@ 0x40
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4413      	add	r3, r2
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	0c1b      	lsrs	r3, r3, #16
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	4413      	add	r3, r2
 800d326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d328:	7bfb      	ldrb	r3, [r7, #15]
 800d32a:	3301      	adds	r3, #1
 800d32c:	73fb      	strb	r3, [r7, #15]
 800d32e:	7bfa      	ldrb	r2, [r7, #15]
 800d330:	78fb      	ldrb	r3, [r7, #3]
 800d332:	3b01      	subs	r3, #1
 800d334:	429a      	cmp	r2, r3
 800d336:	d3ec      	bcc.n	800d312 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d338:	883b      	ldrh	r3, [r7, #0]
 800d33a:	0418      	lsls	r0, r3, #16
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6819      	ldr	r1, [r3, #0]
 800d340:	78fb      	ldrb	r3, [r7, #3]
 800d342:	3b01      	subs	r3, #1
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	4302      	orrs	r2, r0
 800d348:	3340      	adds	r3, #64	@ 0x40
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	440b      	add	r3, r1
 800d34e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3714      	adds	r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d35e:	b480      	push	{r7}
 800d360:	b083      	sub	sp, #12
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	460b      	mov	r3, r1
 800d368:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	887a      	ldrh	r2, [r7, #2]
 800d370:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2201      	movs	r2, #1
 800d392:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3ae:	4b05      	ldr	r3, [pc, #20]	@ (800d3c4 <HAL_PCDEx_ActivateLPM+0x44>)
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d3b6:	2300      	movs	r3, #0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3714      	adds	r7, #20
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr
 800d3c4:	10000003 	.word	0x10000003

0800d3c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d3e8:	4b19      	ldr	r3, [pc, #100]	@ (800d450 <HAL_PWREx_ConfigSupply+0x70>)
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	f003 0304 	and.w	r3, r3, #4
 800d3f0:	2b04      	cmp	r3, #4
 800d3f2:	d00a      	beq.n	800d40a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d3f4:	4b16      	ldr	r3, [pc, #88]	@ (800d450 <HAL_PWREx_ConfigSupply+0x70>)
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	f003 0307 	and.w	r3, r3, #7
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d001      	beq.n	800d406 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	e01f      	b.n	800d446 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d406:	2300      	movs	r3, #0
 800d408:	e01d      	b.n	800d446 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d40a:	4b11      	ldr	r3, [pc, #68]	@ (800d450 <HAL_PWREx_ConfigSupply+0x70>)
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	f023 0207 	bic.w	r2, r3, #7
 800d412:	490f      	ldr	r1, [pc, #60]	@ (800d450 <HAL_PWREx_ConfigSupply+0x70>)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4313      	orrs	r3, r2
 800d418:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d41a:	f7f5 f9c1 	bl	80027a0 <HAL_GetTick>
 800d41e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d420:	e009      	b.n	800d436 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d422:	f7f5 f9bd 	bl	80027a0 <HAL_GetTick>
 800d426:	4602      	mov	r2, r0
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d430:	d901      	bls.n	800d436 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d432:	2301      	movs	r3, #1
 800d434:	e007      	b.n	800d446 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d436:	4b06      	ldr	r3, [pc, #24]	@ (800d450 <HAL_PWREx_ConfigSupply+0x70>)
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d43e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d442:	d1ee      	bne.n	800d422 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d444:	2300      	movs	r3, #0
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	58024800 	.word	0x58024800

0800d454 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d454:	b480      	push	{r7}
 800d456:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d458:	4b05      	ldr	r3, [pc, #20]	@ (800d470 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	4a04      	ldr	r2, [pc, #16]	@ (800d470 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d45e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d462:	60d3      	str	r3, [r2, #12]
}
 800d464:	bf00      	nop
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	58024800 	.word	0x58024800

0800d474 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b08c      	sub	sp, #48	@ 0x30
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d102      	bne.n	800d488 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	f000 bc48 	b.w	800dd18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f003 0301 	and.w	r3, r3, #1
 800d490:	2b00      	cmp	r3, #0
 800d492:	f000 8088 	beq.w	800d5a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d496:	4b99      	ldr	r3, [pc, #612]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d498:	691b      	ldr	r3, [r3, #16]
 800d49a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d4a0:	4b96      	ldr	r3, [pc, #600]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a8:	2b10      	cmp	r3, #16
 800d4aa:	d007      	beq.n	800d4bc <HAL_RCC_OscConfig+0x48>
 800d4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ae:	2b18      	cmp	r3, #24
 800d4b0:	d111      	bne.n	800d4d6 <HAL_RCC_OscConfig+0x62>
 800d4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b4:	f003 0303 	and.w	r3, r3, #3
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d10c      	bne.n	800d4d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4bc:	4b8f      	ldr	r3, [pc, #572]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d06d      	beq.n	800d5a4 <HAL_RCC_OscConfig+0x130>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d169      	bne.n	800d5a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	f000 bc21 	b.w	800dd18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4de:	d106      	bne.n	800d4ee <HAL_RCC_OscConfig+0x7a>
 800d4e0:	4b86      	ldr	r3, [pc, #536]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a85      	ldr	r2, [pc, #532]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d4e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d4ea:	6013      	str	r3, [r2, #0]
 800d4ec:	e02e      	b.n	800d54c <HAL_RCC_OscConfig+0xd8>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d10c      	bne.n	800d510 <HAL_RCC_OscConfig+0x9c>
 800d4f6:	4b81      	ldr	r3, [pc, #516]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4a80      	ldr	r2, [pc, #512]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d4fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	4b7e      	ldr	r3, [pc, #504]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a7d      	ldr	r2, [pc, #500]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d508:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d50c:	6013      	str	r3, [r2, #0]
 800d50e:	e01d      	b.n	800d54c <HAL_RCC_OscConfig+0xd8>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d518:	d10c      	bne.n	800d534 <HAL_RCC_OscConfig+0xc0>
 800d51a:	4b78      	ldr	r3, [pc, #480]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4a77      	ldr	r2, [pc, #476]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d524:	6013      	str	r3, [r2, #0]
 800d526:	4b75      	ldr	r3, [pc, #468]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a74      	ldr	r2, [pc, #464]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d52c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d530:	6013      	str	r3, [r2, #0]
 800d532:	e00b      	b.n	800d54c <HAL_RCC_OscConfig+0xd8>
 800d534:	4b71      	ldr	r3, [pc, #452]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a70      	ldr	r2, [pc, #448]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d53a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d53e:	6013      	str	r3, [r2, #0]
 800d540:	4b6e      	ldr	r3, [pc, #440]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a6d      	ldr	r2, [pc, #436]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d54a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d013      	beq.n	800d57c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d554:	f7f5 f924 	bl	80027a0 <HAL_GetTick>
 800d558:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d55a:	e008      	b.n	800d56e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d55c:	f7f5 f920 	bl	80027a0 <HAL_GetTick>
 800d560:	4602      	mov	r2, r0
 800d562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	2b64      	cmp	r3, #100	@ 0x64
 800d568:	d901      	bls.n	800d56e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d56a:	2303      	movs	r3, #3
 800d56c:	e3d4      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d56e:	4b63      	ldr	r3, [pc, #396]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d576:	2b00      	cmp	r3, #0
 800d578:	d0f0      	beq.n	800d55c <HAL_RCC_OscConfig+0xe8>
 800d57a:	e014      	b.n	800d5a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d57c:	f7f5 f910 	bl	80027a0 <HAL_GetTick>
 800d580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d582:	e008      	b.n	800d596 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d584:	f7f5 f90c 	bl	80027a0 <HAL_GetTick>
 800d588:	4602      	mov	r2, r0
 800d58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58c:	1ad3      	subs	r3, r2, r3
 800d58e:	2b64      	cmp	r3, #100	@ 0x64
 800d590:	d901      	bls.n	800d596 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d592:	2303      	movs	r3, #3
 800d594:	e3c0      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d596:	4b59      	ldr	r3, [pc, #356]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d1f0      	bne.n	800d584 <HAL_RCC_OscConfig+0x110>
 800d5a2:	e000      	b.n	800d5a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f003 0302 	and.w	r3, r3, #2
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f000 80ca 	beq.w	800d748 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d5b4:	4b51      	ldr	r3, [pc, #324]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d5bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d5be:	4b4f      	ldr	r3, [pc, #316]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d007      	beq.n	800d5da <HAL_RCC_OscConfig+0x166>
 800d5ca:	6a3b      	ldr	r3, [r7, #32]
 800d5cc:	2b18      	cmp	r3, #24
 800d5ce:	d156      	bne.n	800d67e <HAL_RCC_OscConfig+0x20a>
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	f003 0303 	and.w	r3, r3, #3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d151      	bne.n	800d67e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d5da:	4b48      	ldr	r3, [pc, #288]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f003 0304 	and.w	r3, r3, #4
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d005      	beq.n	800d5f2 <HAL_RCC_OscConfig+0x17e>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d101      	bne.n	800d5f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e392      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d5f2:	4b42      	ldr	r3, [pc, #264]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f023 0219 	bic.w	r2, r3, #25
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	493f      	ldr	r1, [pc, #252]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d600:	4313      	orrs	r3, r2
 800d602:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d604:	f7f5 f8cc 	bl	80027a0 <HAL_GetTick>
 800d608:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d60a:	e008      	b.n	800d61e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d60c:	f7f5 f8c8 	bl	80027a0 <HAL_GetTick>
 800d610:	4602      	mov	r2, r0
 800d612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d614:	1ad3      	subs	r3, r2, r3
 800d616:	2b02      	cmp	r3, #2
 800d618:	d901      	bls.n	800d61e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d61a:	2303      	movs	r3, #3
 800d61c:	e37c      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d61e:	4b37      	ldr	r3, [pc, #220]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f003 0304 	and.w	r3, r3, #4
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0f0      	beq.n	800d60c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d62a:	f7f5 f8e9 	bl	8002800 <HAL_GetREVID>
 800d62e:	4603      	mov	r3, r0
 800d630:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d634:	4293      	cmp	r3, r2
 800d636:	d817      	bhi.n	800d668 <HAL_RCC_OscConfig+0x1f4>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	2b40      	cmp	r3, #64	@ 0x40
 800d63e:	d108      	bne.n	800d652 <HAL_RCC_OscConfig+0x1de>
 800d640:	4b2e      	ldr	r3, [pc, #184]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d648:	4a2c      	ldr	r2, [pc, #176]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d64a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d64e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d650:	e07a      	b.n	800d748 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d652:	4b2a      	ldr	r3, [pc, #168]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	691b      	ldr	r3, [r3, #16]
 800d65e:	031b      	lsls	r3, r3, #12
 800d660:	4926      	ldr	r1, [pc, #152]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d662:	4313      	orrs	r3, r2
 800d664:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d666:	e06f      	b.n	800d748 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d668:	4b24      	ldr	r3, [pc, #144]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	061b      	lsls	r3, r3, #24
 800d676:	4921      	ldr	r1, [pc, #132]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d678:	4313      	orrs	r3, r2
 800d67a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d67c:	e064      	b.n	800d748 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d047      	beq.n	800d716 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d686:	4b1d      	ldr	r3, [pc, #116]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f023 0219 	bic.w	r2, r3, #25
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	491a      	ldr	r1, [pc, #104]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d694:	4313      	orrs	r3, r2
 800d696:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d698:	f7f5 f882 	bl	80027a0 <HAL_GetTick>
 800d69c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d69e:	e008      	b.n	800d6b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d6a0:	f7f5 f87e 	bl	80027a0 <HAL_GetTick>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	2b02      	cmp	r3, #2
 800d6ac:	d901      	bls.n	800d6b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	e332      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d6b2:	4b12      	ldr	r3, [pc, #72]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f003 0304 	and.w	r3, r3, #4
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d0f0      	beq.n	800d6a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d6be:	f7f5 f89f 	bl	8002800 <HAL_GetREVID>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d819      	bhi.n	800d700 <HAL_RCC_OscConfig+0x28c>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	2b40      	cmp	r3, #64	@ 0x40
 800d6d2:	d108      	bne.n	800d6e6 <HAL_RCC_OscConfig+0x272>
 800d6d4:	4b09      	ldr	r3, [pc, #36]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d6dc:	4a07      	ldr	r2, [pc, #28]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d6de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d6e2:	6053      	str	r3, [r2, #4]
 800d6e4:	e030      	b.n	800d748 <HAL_RCC_OscConfig+0x2d4>
 800d6e6:	4b05      	ldr	r3, [pc, #20]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	691b      	ldr	r3, [r3, #16]
 800d6f2:	031b      	lsls	r3, r3, #12
 800d6f4:	4901      	ldr	r1, [pc, #4]	@ (800d6fc <HAL_RCC_OscConfig+0x288>)
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	604b      	str	r3, [r1, #4]
 800d6fa:	e025      	b.n	800d748 <HAL_RCC_OscConfig+0x2d4>
 800d6fc:	58024400 	.word	0x58024400
 800d700:	4b9a      	ldr	r3, [pc, #616]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	691b      	ldr	r3, [r3, #16]
 800d70c:	061b      	lsls	r3, r3, #24
 800d70e:	4997      	ldr	r1, [pc, #604]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d710:	4313      	orrs	r3, r2
 800d712:	604b      	str	r3, [r1, #4]
 800d714:	e018      	b.n	800d748 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d716:	4b95      	ldr	r3, [pc, #596]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a94      	ldr	r2, [pc, #592]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d71c:	f023 0301 	bic.w	r3, r3, #1
 800d720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d722:	f7f5 f83d 	bl	80027a0 <HAL_GetTick>
 800d726:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d728:	e008      	b.n	800d73c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d72a:	f7f5 f839 	bl	80027a0 <HAL_GetTick>
 800d72e:	4602      	mov	r2, r0
 800d730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d732:	1ad3      	subs	r3, r2, r3
 800d734:	2b02      	cmp	r3, #2
 800d736:	d901      	bls.n	800d73c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d738:	2303      	movs	r3, #3
 800d73a:	e2ed      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d73c:	4b8b      	ldr	r3, [pc, #556]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f003 0304 	and.w	r3, r3, #4
 800d744:	2b00      	cmp	r3, #0
 800d746:	d1f0      	bne.n	800d72a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f003 0310 	and.w	r3, r3, #16
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 80a9 	beq.w	800d8a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d756:	4b85      	ldr	r3, [pc, #532]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d75e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d760:	4b82      	ldr	r3, [pc, #520]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d764:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	2b08      	cmp	r3, #8
 800d76a:	d007      	beq.n	800d77c <HAL_RCC_OscConfig+0x308>
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	2b18      	cmp	r3, #24
 800d770:	d13a      	bne.n	800d7e8 <HAL_RCC_OscConfig+0x374>
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	f003 0303 	and.w	r3, r3, #3
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d135      	bne.n	800d7e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d77c:	4b7b      	ldr	r3, [pc, #492]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d784:	2b00      	cmp	r3, #0
 800d786:	d005      	beq.n	800d794 <HAL_RCC_OscConfig+0x320>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	69db      	ldr	r3, [r3, #28]
 800d78c:	2b80      	cmp	r3, #128	@ 0x80
 800d78e:	d001      	beq.n	800d794 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	e2c1      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d794:	f7f5 f834 	bl	8002800 <HAL_GetREVID>
 800d798:	4603      	mov	r3, r0
 800d79a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d817      	bhi.n	800d7d2 <HAL_RCC_OscConfig+0x35e>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a1b      	ldr	r3, [r3, #32]
 800d7a6:	2b20      	cmp	r3, #32
 800d7a8:	d108      	bne.n	800d7bc <HAL_RCC_OscConfig+0x348>
 800d7aa:	4b70      	ldr	r3, [pc, #448]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d7b2:	4a6e      	ldr	r2, [pc, #440]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d7b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d7b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d7ba:	e075      	b.n	800d8a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d7bc:	4b6b      	ldr	r3, [pc, #428]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6a1b      	ldr	r3, [r3, #32]
 800d7c8:	069b      	lsls	r3, r3, #26
 800d7ca:	4968      	ldr	r1, [pc, #416]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d7d0:	e06a      	b.n	800d8a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d7d2:	4b66      	ldr	r3, [pc, #408]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a1b      	ldr	r3, [r3, #32]
 800d7de:	061b      	lsls	r3, r3, #24
 800d7e0:	4962      	ldr	r1, [pc, #392]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d7e6:	e05f      	b.n	800d8a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	69db      	ldr	r3, [r3, #28]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d042      	beq.n	800d876 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d7f0:	4b5e      	ldr	r3, [pc, #376]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a5d      	ldr	r2, [pc, #372]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7fc:	f7f4 ffd0 	bl	80027a0 <HAL_GetTick>
 800d800:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d802:	e008      	b.n	800d816 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d804:	f7f4 ffcc 	bl	80027a0 <HAL_GetTick>
 800d808:	4602      	mov	r2, r0
 800d80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d901      	bls.n	800d816 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800d812:	2303      	movs	r3, #3
 800d814:	e280      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d816:	4b55      	ldr	r3, [pc, #340]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d0f0      	beq.n	800d804 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d822:	f7f4 ffed 	bl	8002800 <HAL_GetREVID>
 800d826:	4603      	mov	r3, r0
 800d828:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d817      	bhi.n	800d860 <HAL_RCC_OscConfig+0x3ec>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a1b      	ldr	r3, [r3, #32]
 800d834:	2b20      	cmp	r3, #32
 800d836:	d108      	bne.n	800d84a <HAL_RCC_OscConfig+0x3d6>
 800d838:	4b4c      	ldr	r3, [pc, #304]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d840:	4a4a      	ldr	r2, [pc, #296]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d842:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d846:	6053      	str	r3, [r2, #4]
 800d848:	e02e      	b.n	800d8a8 <HAL_RCC_OscConfig+0x434>
 800d84a:	4b48      	ldr	r3, [pc, #288]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a1b      	ldr	r3, [r3, #32]
 800d856:	069b      	lsls	r3, r3, #26
 800d858:	4944      	ldr	r1, [pc, #272]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d85a:	4313      	orrs	r3, r2
 800d85c:	604b      	str	r3, [r1, #4]
 800d85e:	e023      	b.n	800d8a8 <HAL_RCC_OscConfig+0x434>
 800d860:	4b42      	ldr	r3, [pc, #264]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6a1b      	ldr	r3, [r3, #32]
 800d86c:	061b      	lsls	r3, r3, #24
 800d86e:	493f      	ldr	r1, [pc, #252]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d870:	4313      	orrs	r3, r2
 800d872:	60cb      	str	r3, [r1, #12]
 800d874:	e018      	b.n	800d8a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d876:	4b3d      	ldr	r3, [pc, #244]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a3c      	ldr	r2, [pc, #240]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d87c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d882:	f7f4 ff8d 	bl	80027a0 <HAL_GetTick>
 800d886:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d888:	e008      	b.n	800d89c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d88a:	f7f4 ff89 	bl	80027a0 <HAL_GetTick>
 800d88e:	4602      	mov	r2, r0
 800d890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	2b02      	cmp	r3, #2
 800d896:	d901      	bls.n	800d89c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d898:	2303      	movs	r3, #3
 800d89a:	e23d      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d89c:	4b33      	ldr	r3, [pc, #204]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1f0      	bne.n	800d88a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f003 0308 	and.w	r3, r3, #8
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d036      	beq.n	800d922 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	695b      	ldr	r3, [r3, #20]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d019      	beq.n	800d8f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d8bc:	4b2b      	ldr	r3, [pc, #172]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d8be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8c0:	4a2a      	ldr	r2, [pc, #168]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d8c2:	f043 0301 	orr.w	r3, r3, #1
 800d8c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8c8:	f7f4 ff6a 	bl	80027a0 <HAL_GetTick>
 800d8cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d8ce:	e008      	b.n	800d8e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8d0:	f7f4 ff66 	bl	80027a0 <HAL_GetTick>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d8:	1ad3      	subs	r3, r2, r3
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	d901      	bls.n	800d8e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	e21a      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d8e2:	4b22      	ldr	r3, [pc, #136]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d8e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8e6:	f003 0302 	and.w	r3, r3, #2
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d0f0      	beq.n	800d8d0 <HAL_RCC_OscConfig+0x45c>
 800d8ee:	e018      	b.n	800d922 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d8f0:	4b1e      	ldr	r3, [pc, #120]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d8f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8f4:	4a1d      	ldr	r2, [pc, #116]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d8f6:	f023 0301 	bic.w	r3, r3, #1
 800d8fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8fc:	f7f4 ff50 	bl	80027a0 <HAL_GetTick>
 800d900:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d902:	e008      	b.n	800d916 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d904:	f7f4 ff4c 	bl	80027a0 <HAL_GetTick>
 800d908:	4602      	mov	r2, r0
 800d90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d901      	bls.n	800d916 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d912:	2303      	movs	r3, #3
 800d914:	e200      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d916:	4b15      	ldr	r3, [pc, #84]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d91a:	f003 0302 	and.w	r3, r3, #2
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1f0      	bne.n	800d904 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f003 0320 	and.w	r3, r3, #32
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d039      	beq.n	800d9a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	699b      	ldr	r3, [r3, #24]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d01c      	beq.n	800d970 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d936:	4b0d      	ldr	r3, [pc, #52]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a0c      	ldr	r2, [pc, #48]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d93c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d940:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d942:	f7f4 ff2d 	bl	80027a0 <HAL_GetTick>
 800d946:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d948:	e008      	b.n	800d95c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d94a:	f7f4 ff29 	bl	80027a0 <HAL_GetTick>
 800d94e:	4602      	mov	r2, r0
 800d950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	2b02      	cmp	r3, #2
 800d956:	d901      	bls.n	800d95c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d958:	2303      	movs	r3, #3
 800d95a:	e1dd      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d95c:	4b03      	ldr	r3, [pc, #12]	@ (800d96c <HAL_RCC_OscConfig+0x4f8>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d964:	2b00      	cmp	r3, #0
 800d966:	d0f0      	beq.n	800d94a <HAL_RCC_OscConfig+0x4d6>
 800d968:	e01b      	b.n	800d9a2 <HAL_RCC_OscConfig+0x52e>
 800d96a:	bf00      	nop
 800d96c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d970:	4b9b      	ldr	r3, [pc, #620]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a9a      	ldr	r2, [pc, #616]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800d976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d97a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d97c:	f7f4 ff10 	bl	80027a0 <HAL_GetTick>
 800d980:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d982:	e008      	b.n	800d996 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d984:	f7f4 ff0c 	bl	80027a0 <HAL_GetTick>
 800d988:	4602      	mov	r2, r0
 800d98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d98c:	1ad3      	subs	r3, r2, r3
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d901      	bls.n	800d996 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d992:	2303      	movs	r3, #3
 800d994:	e1c0      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d996:	4b92      	ldr	r3, [pc, #584]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1f0      	bne.n	800d984 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f003 0304 	and.w	r3, r3, #4
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f000 8081 	beq.w	800dab2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d9b0:	4b8c      	ldr	r3, [pc, #560]	@ (800dbe4 <HAL_RCC_OscConfig+0x770>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a8b      	ldr	r2, [pc, #556]	@ (800dbe4 <HAL_RCC_OscConfig+0x770>)
 800d9b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d9ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d9bc:	f7f4 fef0 	bl	80027a0 <HAL_GetTick>
 800d9c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d9c2:	e008      	b.n	800d9d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9c4:	f7f4 feec 	bl	80027a0 <HAL_GetTick>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	2b64      	cmp	r3, #100	@ 0x64
 800d9d0:	d901      	bls.n	800d9d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d9d2:	2303      	movs	r3, #3
 800d9d4:	e1a0      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d9d6:	4b83      	ldr	r3, [pc, #524]	@ (800dbe4 <HAL_RCC_OscConfig+0x770>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d0f0      	beq.n	800d9c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d106      	bne.n	800d9f8 <HAL_RCC_OscConfig+0x584>
 800d9ea:	4b7d      	ldr	r3, [pc, #500]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800d9ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9ee:	4a7c      	ldr	r2, [pc, #496]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800d9f0:	f043 0301 	orr.w	r3, r3, #1
 800d9f4:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9f6:	e02d      	b.n	800da54 <HAL_RCC_OscConfig+0x5e0>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d10c      	bne.n	800da1a <HAL_RCC_OscConfig+0x5a6>
 800da00:	4b77      	ldr	r3, [pc, #476]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da04:	4a76      	ldr	r2, [pc, #472]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da06:	f023 0301 	bic.w	r3, r3, #1
 800da0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800da0c:	4b74      	ldr	r3, [pc, #464]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da10:	4a73      	ldr	r2, [pc, #460]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da12:	f023 0304 	bic.w	r3, r3, #4
 800da16:	6713      	str	r3, [r2, #112]	@ 0x70
 800da18:	e01c      	b.n	800da54 <HAL_RCC_OscConfig+0x5e0>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	2b05      	cmp	r3, #5
 800da20:	d10c      	bne.n	800da3c <HAL_RCC_OscConfig+0x5c8>
 800da22:	4b6f      	ldr	r3, [pc, #444]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da26:	4a6e      	ldr	r2, [pc, #440]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da28:	f043 0304 	orr.w	r3, r3, #4
 800da2c:	6713      	str	r3, [r2, #112]	@ 0x70
 800da2e:	4b6c      	ldr	r3, [pc, #432]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da32:	4a6b      	ldr	r2, [pc, #428]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da34:	f043 0301 	orr.w	r3, r3, #1
 800da38:	6713      	str	r3, [r2, #112]	@ 0x70
 800da3a:	e00b      	b.n	800da54 <HAL_RCC_OscConfig+0x5e0>
 800da3c:	4b68      	ldr	r3, [pc, #416]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da40:	4a67      	ldr	r2, [pc, #412]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da42:	f023 0301 	bic.w	r3, r3, #1
 800da46:	6713      	str	r3, [r2, #112]	@ 0x70
 800da48:	4b65      	ldr	r3, [pc, #404]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da4c:	4a64      	ldr	r2, [pc, #400]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da4e:	f023 0304 	bic.w	r3, r3, #4
 800da52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d015      	beq.n	800da88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da5c:	f7f4 fea0 	bl	80027a0 <HAL_GetTick>
 800da60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da62:	e00a      	b.n	800da7a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da64:	f7f4 fe9c 	bl	80027a0 <HAL_GetTick>
 800da68:	4602      	mov	r2, r0
 800da6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6c:	1ad3      	subs	r3, r2, r3
 800da6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da72:	4293      	cmp	r3, r2
 800da74:	d901      	bls.n	800da7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800da76:	2303      	movs	r3, #3
 800da78:	e14e      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da7a:	4b59      	ldr	r3, [pc, #356]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800da7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da7e:	f003 0302 	and.w	r3, r3, #2
 800da82:	2b00      	cmp	r3, #0
 800da84:	d0ee      	beq.n	800da64 <HAL_RCC_OscConfig+0x5f0>
 800da86:	e014      	b.n	800dab2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da88:	f7f4 fe8a 	bl	80027a0 <HAL_GetTick>
 800da8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800da8e:	e00a      	b.n	800daa6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da90:	f7f4 fe86 	bl	80027a0 <HAL_GetTick>
 800da94:	4602      	mov	r2, r0
 800da96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da98:	1ad3      	subs	r3, r2, r3
 800da9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d901      	bls.n	800daa6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800daa2:	2303      	movs	r3, #3
 800daa4:	e138      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800daa6:	4b4e      	ldr	r3, [pc, #312]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800daa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daaa:	f003 0302 	and.w	r3, r3, #2
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1ee      	bne.n	800da90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f000 812d 	beq.w	800dd16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800dabc:	4b48      	ldr	r3, [pc, #288]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dac4:	2b18      	cmp	r3, #24
 800dac6:	f000 80bd 	beq.w	800dc44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dace:	2b02      	cmp	r3, #2
 800dad0:	f040 809e 	bne.w	800dc10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dad4:	4b42      	ldr	r3, [pc, #264]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a41      	ldr	r2, [pc, #260]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dada:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dae0:	f7f4 fe5e 	bl	80027a0 <HAL_GetTick>
 800dae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dae6:	e008      	b.n	800dafa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dae8:	f7f4 fe5a 	bl	80027a0 <HAL_GetTick>
 800daec:	4602      	mov	r2, r0
 800daee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	d901      	bls.n	800dafa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800daf6:	2303      	movs	r3, #3
 800daf8:	e10e      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dafa:	4b39      	ldr	r3, [pc, #228]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1f0      	bne.n	800dae8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db06:	4b36      	ldr	r3, [pc, #216]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db0a:	4b37      	ldr	r3, [pc, #220]	@ (800dbe8 <HAL_RCC_OscConfig+0x774>)
 800db0c:	4013      	ands	r3, r2
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800db16:	0112      	lsls	r2, r2, #4
 800db18:	430a      	orrs	r2, r1
 800db1a:	4931      	ldr	r1, [pc, #196]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db1c:	4313      	orrs	r3, r2
 800db1e:	628b      	str	r3, [r1, #40]	@ 0x28
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db24:	3b01      	subs	r3, #1
 800db26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db2e:	3b01      	subs	r3, #1
 800db30:	025b      	lsls	r3, r3, #9
 800db32:	b29b      	uxth	r3, r3
 800db34:	431a      	orrs	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db3a:	3b01      	subs	r3, #1
 800db3c:	041b      	lsls	r3, r3, #16
 800db3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800db42:	431a      	orrs	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db48:	3b01      	subs	r3, #1
 800db4a:	061b      	lsls	r3, r3, #24
 800db4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800db50:	4923      	ldr	r1, [pc, #140]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db52:	4313      	orrs	r3, r2
 800db54:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800db56:	4b22      	ldr	r3, [pc, #136]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db5a:	4a21      	ldr	r2, [pc, #132]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db5c:	f023 0301 	bic.w	r3, r3, #1
 800db60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800db62:	4b1f      	ldr	r3, [pc, #124]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db66:	4b21      	ldr	r3, [pc, #132]	@ (800dbec <HAL_RCC_OscConfig+0x778>)
 800db68:	4013      	ands	r3, r2
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800db6e:	00d2      	lsls	r2, r2, #3
 800db70:	491b      	ldr	r1, [pc, #108]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db72:	4313      	orrs	r3, r2
 800db74:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800db76:	4b1a      	ldr	r3, [pc, #104]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7a:	f023 020c 	bic.w	r2, r3, #12
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db82:	4917      	ldr	r1, [pc, #92]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db84:	4313      	orrs	r3, r2
 800db86:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800db88:	4b15      	ldr	r3, [pc, #84]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8c:	f023 0202 	bic.w	r2, r3, #2
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db94:	4912      	ldr	r1, [pc, #72]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db96:	4313      	orrs	r3, r2
 800db98:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800db9a:	4b11      	ldr	r3, [pc, #68]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800db9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db9e:	4a10      	ldr	r2, [pc, #64]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dba6:	4b0e      	ldr	r3, [pc, #56]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbaa:	4a0d      	ldr	r2, [pc, #52]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dbac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dbb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800dbb2:	4b0b      	ldr	r3, [pc, #44]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dbb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbb6:	4a0a      	ldr	r2, [pc, #40]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dbb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800dbbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800dbbe:	4b08      	ldr	r3, [pc, #32]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc2:	4a07      	ldr	r2, [pc, #28]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dbc4:	f043 0301 	orr.w	r3, r3, #1
 800dbc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dbca:	4b05      	ldr	r3, [pc, #20]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a04      	ldr	r2, [pc, #16]	@ (800dbe0 <HAL_RCC_OscConfig+0x76c>)
 800dbd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbd6:	f7f4 fde3 	bl	80027a0 <HAL_GetTick>
 800dbda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dbdc:	e011      	b.n	800dc02 <HAL_RCC_OscConfig+0x78e>
 800dbde:	bf00      	nop
 800dbe0:	58024400 	.word	0x58024400
 800dbe4:	58024800 	.word	0x58024800
 800dbe8:	fffffc0c 	.word	0xfffffc0c
 800dbec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbf0:	f7f4 fdd6 	bl	80027a0 <HAL_GetTick>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d901      	bls.n	800dc02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800dbfe:	2303      	movs	r3, #3
 800dc00:	e08a      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dc02:	4b47      	ldr	r3, [pc, #284]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d0f0      	beq.n	800dbf0 <HAL_RCC_OscConfig+0x77c>
 800dc0e:	e082      	b.n	800dd16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc10:	4b43      	ldr	r3, [pc, #268]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a42      	ldr	r2, [pc, #264]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dc16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dc1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc1c:	f7f4 fdc0 	bl	80027a0 <HAL_GetTick>
 800dc20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dc22:	e008      	b.n	800dc36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc24:	f7f4 fdbc 	bl	80027a0 <HAL_GetTick>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	d901      	bls.n	800dc36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800dc32:	2303      	movs	r3, #3
 800dc34:	e070      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dc36:	4b3a      	ldr	r3, [pc, #232]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1f0      	bne.n	800dc24 <HAL_RCC_OscConfig+0x7b0>
 800dc42:	e068      	b.n	800dd16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800dc44:	4b36      	ldr	r3, [pc, #216]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dc46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dc4a:	4b35      	ldr	r3, [pc, #212]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dc4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d031      	beq.n	800dcbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	f003 0203 	and.w	r2, r3, #3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d12a      	bne.n	800dcbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	091b      	lsrs	r3, r3, #4
 800dc6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d122      	bne.n	800dcbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d11a      	bne.n	800dcbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	0a5b      	lsrs	r3, r3, #9
 800dc8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d111      	bne.n	800dcbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	0c1b      	lsrs	r3, r3, #16
 800dc9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dca4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d108      	bne.n	800dcbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	0e1b      	lsrs	r3, r3, #24
 800dcae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d001      	beq.n	800dcc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e02b      	b.n	800dd18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800dcc0:	4b17      	ldr	r3, [pc, #92]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dcc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcc4:	08db      	lsrs	r3, r3, #3
 800dcc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dcca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dcd0:	693a      	ldr	r2, [r7, #16]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d01f      	beq.n	800dd16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800dcd6:	4b12      	ldr	r3, [pc, #72]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dcd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcda:	4a11      	ldr	r2, [pc, #68]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dcdc:	f023 0301 	bic.w	r3, r3, #1
 800dce0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dce2:	f7f4 fd5d 	bl	80027a0 <HAL_GetTick>
 800dce6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800dce8:	bf00      	nop
 800dcea:	f7f4 fd59 	bl	80027a0 <HAL_GetTick>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d0f9      	beq.n	800dcea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dcf6:	4b0a      	ldr	r3, [pc, #40]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dcf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dcfa:	4b0a      	ldr	r3, [pc, #40]	@ (800dd24 <HAL_RCC_OscConfig+0x8b0>)
 800dcfc:	4013      	ands	r3, r2
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800dd02:	00d2      	lsls	r2, r2, #3
 800dd04:	4906      	ldr	r1, [pc, #24]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dd06:	4313      	orrs	r3, r2
 800dd08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800dd0a:	4b05      	ldr	r3, [pc, #20]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dd0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd0e:	4a04      	ldr	r2, [pc, #16]	@ (800dd20 <HAL_RCC_OscConfig+0x8ac>)
 800dd10:	f043 0301 	orr.w	r3, r3, #1
 800dd14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3730      	adds	r7, #48	@ 0x30
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	58024400 	.word	0x58024400
 800dd24:	ffff0007 	.word	0xffff0007

0800dd28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d101      	bne.n	800dd3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e19c      	b.n	800e076 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dd3c:	4b8a      	ldr	r3, [pc, #552]	@ (800df68 <HAL_RCC_ClockConfig+0x240>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f003 030f 	and.w	r3, r3, #15
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d910      	bls.n	800dd6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd4a:	4b87      	ldr	r3, [pc, #540]	@ (800df68 <HAL_RCC_ClockConfig+0x240>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f023 020f 	bic.w	r2, r3, #15
 800dd52:	4985      	ldr	r1, [pc, #532]	@ (800df68 <HAL_RCC_ClockConfig+0x240>)
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd5a:	4b83      	ldr	r3, [pc, #524]	@ (800df68 <HAL_RCC_ClockConfig+0x240>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f003 030f 	and.w	r3, r3, #15
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d001      	beq.n	800dd6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e184      	b.n	800e076 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f003 0304 	and.w	r3, r3, #4
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d010      	beq.n	800dd9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	691a      	ldr	r2, [r3, #16]
 800dd7c:	4b7b      	ldr	r3, [pc, #492]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800dd7e:	699b      	ldr	r3, [r3, #24]
 800dd80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d908      	bls.n	800dd9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dd88:	4b78      	ldr	r3, [pc, #480]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800dd8a:	699b      	ldr	r3, [r3, #24]
 800dd8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	4975      	ldr	r1, [pc, #468]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800dd96:	4313      	orrs	r3, r2
 800dd98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f003 0308 	and.w	r3, r3, #8
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d010      	beq.n	800ddc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	695a      	ldr	r2, [r3, #20]
 800ddaa:	4b70      	ldr	r3, [pc, #448]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800ddac:	69db      	ldr	r3, [r3, #28]
 800ddae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d908      	bls.n	800ddc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ddb6:	4b6d      	ldr	r3, [pc, #436]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800ddb8:	69db      	ldr	r3, [r3, #28]
 800ddba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	496a      	ldr	r1, [pc, #424]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f003 0310 	and.w	r3, r3, #16
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d010      	beq.n	800ddf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	699a      	ldr	r2, [r3, #24]
 800ddd8:	4b64      	ldr	r3, [pc, #400]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800ddda:	69db      	ldr	r3, [r3, #28]
 800dddc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d908      	bls.n	800ddf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dde4:	4b61      	ldr	r3, [pc, #388]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800dde6:	69db      	ldr	r3, [r3, #28]
 800dde8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	699b      	ldr	r3, [r3, #24]
 800ddf0:	495e      	ldr	r1, [pc, #376]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f003 0320 	and.w	r3, r3, #32
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d010      	beq.n	800de24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	69da      	ldr	r2, [r3, #28]
 800de06:	4b59      	ldr	r3, [pc, #356]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800de08:	6a1b      	ldr	r3, [r3, #32]
 800de0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800de0e:	429a      	cmp	r2, r3
 800de10:	d908      	bls.n	800de24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800de12:	4b56      	ldr	r3, [pc, #344]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	69db      	ldr	r3, [r3, #28]
 800de1e:	4953      	ldr	r1, [pc, #332]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800de20:	4313      	orrs	r3, r2
 800de22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f003 0302 	and.w	r3, r3, #2
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d010      	beq.n	800de52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	68da      	ldr	r2, [r3, #12]
 800de34:	4b4d      	ldr	r3, [pc, #308]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800de36:	699b      	ldr	r3, [r3, #24]
 800de38:	f003 030f 	and.w	r3, r3, #15
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d908      	bls.n	800de52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de40:	4b4a      	ldr	r3, [pc, #296]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800de42:	699b      	ldr	r3, [r3, #24]
 800de44:	f023 020f 	bic.w	r2, r3, #15
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	4947      	ldr	r1, [pc, #284]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800de4e:	4313      	orrs	r3, r2
 800de50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f003 0301 	and.w	r3, r3, #1
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d055      	beq.n	800df0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800de5e:	4b43      	ldr	r3, [pc, #268]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800de60:	699b      	ldr	r3, [r3, #24]
 800de62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	4940      	ldr	r1, [pc, #256]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800de6c:	4313      	orrs	r3, r2
 800de6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	2b02      	cmp	r3, #2
 800de76:	d107      	bne.n	800de88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800de78:	4b3c      	ldr	r3, [pc, #240]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de80:	2b00      	cmp	r3, #0
 800de82:	d121      	bne.n	800dec8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800de84:	2301      	movs	r3, #1
 800de86:	e0f6      	b.n	800e076 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	2b03      	cmp	r3, #3
 800de8e:	d107      	bne.n	800dea0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800de90:	4b36      	ldr	r3, [pc, #216]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d115      	bne.n	800dec8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	e0ea      	b.n	800e076 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d107      	bne.n	800deb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dea8:	4b30      	ldr	r3, [pc, #192]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d109      	bne.n	800dec8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800deb4:	2301      	movs	r3, #1
 800deb6:	e0de      	b.n	800e076 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800deb8:	4b2c      	ldr	r3, [pc, #176]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f003 0304 	and.w	r3, r3, #4
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d101      	bne.n	800dec8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	e0d6      	b.n	800e076 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dec8:	4b28      	ldr	r3, [pc, #160]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800deca:	691b      	ldr	r3, [r3, #16]
 800decc:	f023 0207 	bic.w	r2, r3, #7
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	4925      	ldr	r1, [pc, #148]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800ded6:	4313      	orrs	r3, r2
 800ded8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800deda:	f7f4 fc61 	bl	80027a0 <HAL_GetTick>
 800dede:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dee0:	e00a      	b.n	800def8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dee2:	f7f4 fc5d 	bl	80027a0 <HAL_GetTick>
 800dee6:	4602      	mov	r2, r0
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800def0:	4293      	cmp	r3, r2
 800def2:	d901      	bls.n	800def8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800def4:	2303      	movs	r3, #3
 800def6:	e0be      	b.n	800e076 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800def8:	4b1c      	ldr	r3, [pc, #112]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800defa:	691b      	ldr	r3, [r3, #16]
 800defc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	429a      	cmp	r2, r3
 800df08:	d1eb      	bne.n	800dee2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f003 0302 	and.w	r3, r3, #2
 800df12:	2b00      	cmp	r3, #0
 800df14:	d010      	beq.n	800df38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68da      	ldr	r2, [r3, #12]
 800df1a:	4b14      	ldr	r3, [pc, #80]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800df1c:	699b      	ldr	r3, [r3, #24]
 800df1e:	f003 030f 	and.w	r3, r3, #15
 800df22:	429a      	cmp	r2, r3
 800df24:	d208      	bcs.n	800df38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df26:	4b11      	ldr	r3, [pc, #68]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800df28:	699b      	ldr	r3, [r3, #24]
 800df2a:	f023 020f 	bic.w	r2, r3, #15
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	490e      	ldr	r1, [pc, #56]	@ (800df6c <HAL_RCC_ClockConfig+0x244>)
 800df34:	4313      	orrs	r3, r2
 800df36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800df38:	4b0b      	ldr	r3, [pc, #44]	@ (800df68 <HAL_RCC_ClockConfig+0x240>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f003 030f 	and.w	r3, r3, #15
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	429a      	cmp	r2, r3
 800df44:	d214      	bcs.n	800df70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df46:	4b08      	ldr	r3, [pc, #32]	@ (800df68 <HAL_RCC_ClockConfig+0x240>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f023 020f 	bic.w	r2, r3, #15
 800df4e:	4906      	ldr	r1, [pc, #24]	@ (800df68 <HAL_RCC_ClockConfig+0x240>)
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	4313      	orrs	r3, r2
 800df54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df56:	4b04      	ldr	r3, [pc, #16]	@ (800df68 <HAL_RCC_ClockConfig+0x240>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f003 030f 	and.w	r3, r3, #15
 800df5e:	683a      	ldr	r2, [r7, #0]
 800df60:	429a      	cmp	r2, r3
 800df62:	d005      	beq.n	800df70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800df64:	2301      	movs	r3, #1
 800df66:	e086      	b.n	800e076 <HAL_RCC_ClockConfig+0x34e>
 800df68:	52002000 	.word	0x52002000
 800df6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 0304 	and.w	r3, r3, #4
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d010      	beq.n	800df9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	691a      	ldr	r2, [r3, #16]
 800df80:	4b3f      	ldr	r3, [pc, #252]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800df82:	699b      	ldr	r3, [r3, #24]
 800df84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800df88:	429a      	cmp	r2, r3
 800df8a:	d208      	bcs.n	800df9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800df8c:	4b3c      	ldr	r3, [pc, #240]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800df8e:	699b      	ldr	r3, [r3, #24]
 800df90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	4939      	ldr	r1, [pc, #228]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800df9a:	4313      	orrs	r3, r2
 800df9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f003 0308 	and.w	r3, r3, #8
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d010      	beq.n	800dfcc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	695a      	ldr	r2, [r3, #20]
 800dfae:	4b34      	ldr	r3, [pc, #208]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800dfb0:	69db      	ldr	r3, [r3, #28]
 800dfb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d208      	bcs.n	800dfcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dfba:	4b31      	ldr	r3, [pc, #196]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800dfbc:	69db      	ldr	r3, [r3, #28]
 800dfbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	695b      	ldr	r3, [r3, #20]
 800dfc6:	492e      	ldr	r1, [pc, #184]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f003 0310 	and.w	r3, r3, #16
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d010      	beq.n	800dffa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	699a      	ldr	r2, [r3, #24]
 800dfdc:	4b28      	ldr	r3, [pc, #160]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800dfde:	69db      	ldr	r3, [r3, #28]
 800dfe0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d208      	bcs.n	800dffa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dfe8:	4b25      	ldr	r3, [pc, #148]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800dfea:	69db      	ldr	r3, [r3, #28]
 800dfec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	4922      	ldr	r1, [pc, #136]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800dff6:	4313      	orrs	r3, r2
 800dff8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f003 0320 	and.w	r3, r3, #32
 800e002:	2b00      	cmp	r3, #0
 800e004:	d010      	beq.n	800e028 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	69da      	ldr	r2, [r3, #28]
 800e00a:	4b1d      	ldr	r3, [pc, #116]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800e00c:	6a1b      	ldr	r3, [r3, #32]
 800e00e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e012:	429a      	cmp	r2, r3
 800e014:	d208      	bcs.n	800e028 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e016:	4b1a      	ldr	r3, [pc, #104]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800e018:	6a1b      	ldr	r3, [r3, #32]
 800e01a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	69db      	ldr	r3, [r3, #28]
 800e022:	4917      	ldr	r1, [pc, #92]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800e024:	4313      	orrs	r3, r2
 800e026:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e028:	f000 f834 	bl	800e094 <HAL_RCC_GetSysClockFreq>
 800e02c:	4602      	mov	r2, r0
 800e02e:	4b14      	ldr	r3, [pc, #80]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800e030:	699b      	ldr	r3, [r3, #24]
 800e032:	0a1b      	lsrs	r3, r3, #8
 800e034:	f003 030f 	and.w	r3, r3, #15
 800e038:	4912      	ldr	r1, [pc, #72]	@ (800e084 <HAL_RCC_ClockConfig+0x35c>)
 800e03a:	5ccb      	ldrb	r3, [r1, r3]
 800e03c:	f003 031f 	and.w	r3, r3, #31
 800e040:	fa22 f303 	lsr.w	r3, r2, r3
 800e044:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e046:	4b0e      	ldr	r3, [pc, #56]	@ (800e080 <HAL_RCC_ClockConfig+0x358>)
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	f003 030f 	and.w	r3, r3, #15
 800e04e:	4a0d      	ldr	r2, [pc, #52]	@ (800e084 <HAL_RCC_ClockConfig+0x35c>)
 800e050:	5cd3      	ldrb	r3, [r2, r3]
 800e052:	f003 031f 	and.w	r3, r3, #31
 800e056:	693a      	ldr	r2, [r7, #16]
 800e058:	fa22 f303 	lsr.w	r3, r2, r3
 800e05c:	4a0a      	ldr	r2, [pc, #40]	@ (800e088 <HAL_RCC_ClockConfig+0x360>)
 800e05e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e060:	4a0a      	ldr	r2, [pc, #40]	@ (800e08c <HAL_RCC_ClockConfig+0x364>)
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e066:	4b0a      	ldr	r3, [pc, #40]	@ (800e090 <HAL_RCC_ClockConfig+0x368>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7f4 fb4e 	bl	800270c <HAL_InitTick>
 800e070:	4603      	mov	r3, r0
 800e072:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e074:	7bfb      	ldrb	r3, [r7, #15]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3718      	adds	r7, #24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	58024400 	.word	0x58024400
 800e084:	08018be0 	.word	0x08018be0
 800e088:	24000218 	.word	0x24000218
 800e08c:	24000214 	.word	0x24000214
 800e090:	2400021c 	.word	0x2400021c

0800e094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e094:	b480      	push	{r7}
 800e096:	b089      	sub	sp, #36	@ 0x24
 800e098:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e09a:	4bb3      	ldr	r3, [pc, #716]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e0a2:	2b18      	cmp	r3, #24
 800e0a4:	f200 8155 	bhi.w	800e352 <HAL_RCC_GetSysClockFreq+0x2be>
 800e0a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e0b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ae:	bf00      	nop
 800e0b0:	0800e115 	.word	0x0800e115
 800e0b4:	0800e353 	.word	0x0800e353
 800e0b8:	0800e353 	.word	0x0800e353
 800e0bc:	0800e353 	.word	0x0800e353
 800e0c0:	0800e353 	.word	0x0800e353
 800e0c4:	0800e353 	.word	0x0800e353
 800e0c8:	0800e353 	.word	0x0800e353
 800e0cc:	0800e353 	.word	0x0800e353
 800e0d0:	0800e13b 	.word	0x0800e13b
 800e0d4:	0800e353 	.word	0x0800e353
 800e0d8:	0800e353 	.word	0x0800e353
 800e0dc:	0800e353 	.word	0x0800e353
 800e0e0:	0800e353 	.word	0x0800e353
 800e0e4:	0800e353 	.word	0x0800e353
 800e0e8:	0800e353 	.word	0x0800e353
 800e0ec:	0800e353 	.word	0x0800e353
 800e0f0:	0800e141 	.word	0x0800e141
 800e0f4:	0800e353 	.word	0x0800e353
 800e0f8:	0800e353 	.word	0x0800e353
 800e0fc:	0800e353 	.word	0x0800e353
 800e100:	0800e353 	.word	0x0800e353
 800e104:	0800e353 	.word	0x0800e353
 800e108:	0800e353 	.word	0x0800e353
 800e10c:	0800e353 	.word	0x0800e353
 800e110:	0800e147 	.word	0x0800e147
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e114:	4b94      	ldr	r3, [pc, #592]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f003 0320 	and.w	r3, r3, #32
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d009      	beq.n	800e134 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e120:	4b91      	ldr	r3, [pc, #580]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	08db      	lsrs	r3, r3, #3
 800e126:	f003 0303 	and.w	r3, r3, #3
 800e12a:	4a90      	ldr	r2, [pc, #576]	@ (800e36c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e12c:	fa22 f303 	lsr.w	r3, r2, r3
 800e130:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e132:	e111      	b.n	800e358 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e134:	4b8d      	ldr	r3, [pc, #564]	@ (800e36c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e136:	61bb      	str	r3, [r7, #24]
      break;
 800e138:	e10e      	b.n	800e358 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e13a:	4b8d      	ldr	r3, [pc, #564]	@ (800e370 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e13c:	61bb      	str	r3, [r7, #24]
      break;
 800e13e:	e10b      	b.n	800e358 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e140:	4b8c      	ldr	r3, [pc, #560]	@ (800e374 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e142:	61bb      	str	r3, [r7, #24]
      break;
 800e144:	e108      	b.n	800e358 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e146:	4b88      	ldr	r3, [pc, #544]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e14a:	f003 0303 	and.w	r3, r3, #3
 800e14e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e150:	4b85      	ldr	r3, [pc, #532]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e154:	091b      	lsrs	r3, r3, #4
 800e156:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e15a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e15c:	4b82      	ldr	r3, [pc, #520]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e160:	f003 0301 	and.w	r3, r3, #1
 800e164:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e166:	4b80      	ldr	r3, [pc, #512]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e16a:	08db      	lsrs	r3, r3, #3
 800e16c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	fb02 f303 	mul.w	r3, r2, r3
 800e176:	ee07 3a90 	vmov	s15, r3
 800e17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e17e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 80e1 	beq.w	800e34c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	f000 8083 	beq.w	800e298 <HAL_RCC_GetSysClockFreq+0x204>
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	2b02      	cmp	r3, #2
 800e196:	f200 80a1 	bhi.w	800e2dc <HAL_RCC_GetSysClockFreq+0x248>
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d003      	beq.n	800e1a8 <HAL_RCC_GetSysClockFreq+0x114>
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d056      	beq.n	800e254 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e1a6:	e099      	b.n	800e2dc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1a8:	4b6f      	ldr	r3, [pc, #444]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f003 0320 	and.w	r3, r3, #32
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d02d      	beq.n	800e210 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e1b4:	4b6c      	ldr	r3, [pc, #432]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	08db      	lsrs	r3, r3, #3
 800e1ba:	f003 0303 	and.w	r3, r3, #3
 800e1be:	4a6b      	ldr	r2, [pc, #428]	@ (800e36c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e1c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	ee07 3a90 	vmov	s15, r3
 800e1cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	ee07 3a90 	vmov	s15, r3
 800e1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1de:	4b62      	ldr	r3, [pc, #392]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1e6:	ee07 3a90 	vmov	s15, r3
 800e1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800e1f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e378 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e20a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e20e:	e087      	b.n	800e320 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	ee07 3a90 	vmov	s15, r3
 800e216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e21a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e37c <HAL_RCC_GetSysClockFreq+0x2e8>
 800e21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e222:	4b51      	ldr	r3, [pc, #324]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e22a:	ee07 3a90 	vmov	s15, r3
 800e22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e232:	ed97 6a02 	vldr	s12, [r7, #8]
 800e236:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e378 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e24e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e252:	e065      	b.n	800e320 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	ee07 3a90 	vmov	s15, r3
 800e25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e25e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e380 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e266:	4b40      	ldr	r3, [pc, #256]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e26e:	ee07 3a90 	vmov	s15, r3
 800e272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e276:	ed97 6a02 	vldr	s12, [r7, #8]
 800e27a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e378 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e296:	e043      	b.n	800e320 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	ee07 3a90 	vmov	s15, r3
 800e29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e384 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2b2:	ee07 3a90 	vmov	s15, r3
 800e2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800e2be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e378 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e2da:	e021      	b.n	800e320 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	ee07 3a90 	vmov	s15, r3
 800e2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e380 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e2f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2f6:	ee07 3a90 	vmov	s15, r3
 800e2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800e302:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e378 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e30e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e31a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e31e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e320:	4b11      	ldr	r3, [pc, #68]	@ (800e368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e324:	0a5b      	lsrs	r3, r3, #9
 800e326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e32a:	3301      	adds	r3, #1
 800e32c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	ee07 3a90 	vmov	s15, r3
 800e334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e338:	edd7 6a07 	vldr	s13, [r7, #28]
 800e33c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e344:	ee17 3a90 	vmov	r3, s15
 800e348:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e34a:	e005      	b.n	800e358 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e34c:	2300      	movs	r3, #0
 800e34e:	61bb      	str	r3, [r7, #24]
      break;
 800e350:	e002      	b.n	800e358 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e352:	4b07      	ldr	r3, [pc, #28]	@ (800e370 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e354:	61bb      	str	r3, [r7, #24]
      break;
 800e356:	bf00      	nop
  }

  return sysclockfreq;
 800e358:	69bb      	ldr	r3, [r7, #24]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3724      	adds	r7, #36	@ 0x24
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop
 800e368:	58024400 	.word	0x58024400
 800e36c:	03d09000 	.word	0x03d09000
 800e370:	003d0900 	.word	0x003d0900
 800e374:	017d7840 	.word	0x017d7840
 800e378:	46000000 	.word	0x46000000
 800e37c:	4c742400 	.word	0x4c742400
 800e380:	4a742400 	.word	0x4a742400
 800e384:	4bbebc20 	.word	0x4bbebc20

0800e388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e38e:	f7ff fe81 	bl	800e094 <HAL_RCC_GetSysClockFreq>
 800e392:	4602      	mov	r2, r0
 800e394:	4b10      	ldr	r3, [pc, #64]	@ (800e3d8 <HAL_RCC_GetHCLKFreq+0x50>)
 800e396:	699b      	ldr	r3, [r3, #24]
 800e398:	0a1b      	lsrs	r3, r3, #8
 800e39a:	f003 030f 	and.w	r3, r3, #15
 800e39e:	490f      	ldr	r1, [pc, #60]	@ (800e3dc <HAL_RCC_GetHCLKFreq+0x54>)
 800e3a0:	5ccb      	ldrb	r3, [r1, r3]
 800e3a2:	f003 031f 	and.w	r3, r3, #31
 800e3a6:	fa22 f303 	lsr.w	r3, r2, r3
 800e3aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d8 <HAL_RCC_GetHCLKFreq+0x50>)
 800e3ae:	699b      	ldr	r3, [r3, #24]
 800e3b0:	f003 030f 	and.w	r3, r3, #15
 800e3b4:	4a09      	ldr	r2, [pc, #36]	@ (800e3dc <HAL_RCC_GetHCLKFreq+0x54>)
 800e3b6:	5cd3      	ldrb	r3, [r2, r3]
 800e3b8:	f003 031f 	and.w	r3, r3, #31
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	fa22 f303 	lsr.w	r3, r2, r3
 800e3c2:	4a07      	ldr	r2, [pc, #28]	@ (800e3e0 <HAL_RCC_GetHCLKFreq+0x58>)
 800e3c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e3c6:	4a07      	ldr	r2, [pc, #28]	@ (800e3e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e3cc:	4b04      	ldr	r3, [pc, #16]	@ (800e3e0 <HAL_RCC_GetHCLKFreq+0x58>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3708      	adds	r7, #8
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	58024400 	.word	0x58024400
 800e3dc:	08018be0 	.word	0x08018be0
 800e3e0:	24000218 	.word	0x24000218
 800e3e4:	24000214 	.word	0x24000214

0800e3e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e3ec:	f7ff ffcc 	bl	800e388 <HAL_RCC_GetHCLKFreq>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	4b06      	ldr	r3, [pc, #24]	@ (800e40c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e3f4:	69db      	ldr	r3, [r3, #28]
 800e3f6:	091b      	lsrs	r3, r3, #4
 800e3f8:	f003 0307 	and.w	r3, r3, #7
 800e3fc:	4904      	ldr	r1, [pc, #16]	@ (800e410 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e3fe:	5ccb      	ldrb	r3, [r1, r3]
 800e400:	f003 031f 	and.w	r3, r3, #31
 800e404:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e408:	4618      	mov	r0, r3
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	58024400 	.word	0x58024400
 800e410:	08018be0 	.word	0x08018be0

0800e414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e418:	f7ff ffb6 	bl	800e388 <HAL_RCC_GetHCLKFreq>
 800e41c:	4602      	mov	r2, r0
 800e41e:	4b06      	ldr	r3, [pc, #24]	@ (800e438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e420:	69db      	ldr	r3, [r3, #28]
 800e422:	0a1b      	lsrs	r3, r3, #8
 800e424:	f003 0307 	and.w	r3, r3, #7
 800e428:	4904      	ldr	r1, [pc, #16]	@ (800e43c <HAL_RCC_GetPCLK2Freq+0x28>)
 800e42a:	5ccb      	ldrb	r3, [r1, r3]
 800e42c:	f003 031f 	and.w	r3, r3, #31
 800e430:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e434:	4618      	mov	r0, r3
 800e436:	bd80      	pop	{r7, pc}
 800e438:	58024400 	.word	0x58024400
 800e43c:	08018be0 	.word	0x08018be0

0800e440 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e444:	b0ca      	sub	sp, #296	@ 0x128
 800e446:	af00      	add	r7, sp, #0
 800e448:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e44c:	2300      	movs	r3, #0
 800e44e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e452:	2300      	movs	r3, #0
 800e454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e460:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e464:	2500      	movs	r5, #0
 800e466:	ea54 0305 	orrs.w	r3, r4, r5
 800e46a:	d049      	beq.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e472:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e476:	d02f      	beq.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e478:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e47c:	d828      	bhi.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e47e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e482:	d01a      	beq.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e488:	d822      	bhi.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d003      	beq.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e48e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e492:	d007      	beq.n	800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e494:	e01c      	b.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e496:	4bb8      	ldr	r3, [pc, #736]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e49a:	4ab7      	ldr	r2, [pc, #732]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e49c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e4a2:	e01a      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4a8:	3308      	adds	r3, #8
 800e4aa:	2102      	movs	r1, #2
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f002 fb61 	bl	8010b74 <RCCEx_PLL2_Config>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e4b8:	e00f      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4be:	3328      	adds	r3, #40	@ 0x28
 800e4c0:	2102      	movs	r1, #2
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f002 fc08 	bl	8010cd8 <RCCEx_PLL3_Config>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e4ce:	e004      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e4d6:	e000      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e4d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d10a      	bne.n	800e4f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e4e2:	4ba5      	ldr	r3, [pc, #660]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e4e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4f0:	4aa1      	ldr	r2, [pc, #644]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e4f2:	430b      	orrs	r3, r1
 800e4f4:	6513      	str	r3, [r2, #80]	@ 0x50
 800e4f6:	e003      	b.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e508:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e50c:	f04f 0900 	mov.w	r9, #0
 800e510:	ea58 0309 	orrs.w	r3, r8, r9
 800e514:	d047      	beq.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e51a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e51c:	2b04      	cmp	r3, #4
 800e51e:	d82a      	bhi.n	800e576 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e520:	a201      	add	r2, pc, #4	@ (adr r2, 800e528 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e526:	bf00      	nop
 800e528:	0800e53d 	.word	0x0800e53d
 800e52c:	0800e54b 	.word	0x0800e54b
 800e530:	0800e561 	.word	0x0800e561
 800e534:	0800e57f 	.word	0x0800e57f
 800e538:	0800e57f 	.word	0x0800e57f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e53c:	4b8e      	ldr	r3, [pc, #568]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e540:	4a8d      	ldr	r2, [pc, #564]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e548:	e01a      	b.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e54e:	3308      	adds	r3, #8
 800e550:	2100      	movs	r1, #0
 800e552:	4618      	mov	r0, r3
 800e554:	f002 fb0e 	bl	8010b74 <RCCEx_PLL2_Config>
 800e558:	4603      	mov	r3, r0
 800e55a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e55e:	e00f      	b.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e564:	3328      	adds	r3, #40	@ 0x28
 800e566:	2100      	movs	r1, #0
 800e568:	4618      	mov	r0, r3
 800e56a:	f002 fbb5 	bl	8010cd8 <RCCEx_PLL3_Config>
 800e56e:	4603      	mov	r3, r0
 800e570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e574:	e004      	b.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e57c:	e000      	b.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e57e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e584:	2b00      	cmp	r3, #0
 800e586:	d10a      	bne.n	800e59e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e588:	4b7b      	ldr	r3, [pc, #492]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e58a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e58c:	f023 0107 	bic.w	r1, r3, #7
 800e590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e596:	4a78      	ldr	r2, [pc, #480]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e598:	430b      	orrs	r3, r1
 800e59a:	6513      	str	r3, [r2, #80]	@ 0x50
 800e59c:	e003      	b.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e59e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800e5b2:	f04f 0b00 	mov.w	fp, #0
 800e5b6:	ea5a 030b 	orrs.w	r3, sl, fp
 800e5ba:	d04c      	beq.n	800e656 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e5c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5c6:	d030      	beq.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e5c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5cc:	d829      	bhi.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e5ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800e5d0:	d02d      	beq.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e5d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800e5d4:	d825      	bhi.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e5d6:	2b80      	cmp	r3, #128	@ 0x80
 800e5d8:	d018      	beq.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e5da:	2b80      	cmp	r3, #128	@ 0x80
 800e5dc:	d821      	bhi.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d002      	beq.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e5e2:	2b40      	cmp	r3, #64	@ 0x40
 800e5e4:	d007      	beq.n	800e5f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e5e6:	e01c      	b.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5e8:	4b63      	ldr	r3, [pc, #396]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ec:	4a62      	ldr	r2, [pc, #392]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e5ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e5f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e5f4:	e01c      	b.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	4618      	mov	r0, r3
 800e600:	f002 fab8 	bl	8010b74 <RCCEx_PLL2_Config>
 800e604:	4603      	mov	r3, r0
 800e606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e60a:	e011      	b.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e610:	3328      	adds	r3, #40	@ 0x28
 800e612:	2100      	movs	r1, #0
 800e614:	4618      	mov	r0, r3
 800e616:	f002 fb5f 	bl	8010cd8 <RCCEx_PLL3_Config>
 800e61a:	4603      	mov	r3, r0
 800e61c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e620:	e006      	b.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e628:	e002      	b.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e62a:	bf00      	nop
 800e62c:	e000      	b.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e62e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10a      	bne.n	800e64e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e638:	4b4f      	ldr	r3, [pc, #316]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e63a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e63c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800e640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e646:	4a4c      	ldr	r2, [pc, #304]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e648:	430b      	orrs	r3, r1
 800e64a:	6513      	str	r3, [r2, #80]	@ 0x50
 800e64c:	e003      	b.n	800e656 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e64e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800e662:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800e666:	2300      	movs	r3, #0
 800e668:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800e66c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800e670:	460b      	mov	r3, r1
 800e672:	4313      	orrs	r3, r2
 800e674:	d053      	beq.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e67a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e67e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e682:	d035      	beq.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e684:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e688:	d82e      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e68a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e68e:	d031      	beq.n	800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e690:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e694:	d828      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e69a:	d01a      	beq.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e69c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e6a0:	d822      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d003      	beq.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e6a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e6aa:	d007      	beq.n	800e6bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e6ac:	e01c      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6ae:	4b32      	ldr	r3, [pc, #200]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6b2:	4a31      	ldr	r2, [pc, #196]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e6b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e6b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e6ba:	e01c      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6c0:	3308      	adds	r3, #8
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f002 fa55 	bl	8010b74 <RCCEx_PLL2_Config>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e6d0:	e011      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6d6:	3328      	adds	r3, #40	@ 0x28
 800e6d8:	2100      	movs	r1, #0
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f002 fafc 	bl	8010cd8 <RCCEx_PLL3_Config>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e6e6:	e006      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e6ee:	e002      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e6f0:	bf00      	nop
 800e6f2:	e000      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e6f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d10b      	bne.n	800e716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e6fe:	4b1e      	ldr	r3, [pc, #120]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e702:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e70a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e70e:	4a1a      	ldr	r2, [pc, #104]	@ (800e778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e710:	430b      	orrs	r3, r1
 800e712:	6593      	str	r3, [r2, #88]	@ 0x58
 800e714:	e003      	b.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e71a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e726:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e72a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e72e:	2300      	movs	r3, #0
 800e730:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e734:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800e738:	460b      	mov	r3, r1
 800e73a:	4313      	orrs	r3, r2
 800e73c:	d056      	beq.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e742:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e746:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e74a:	d038      	beq.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e74c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e750:	d831      	bhi.n	800e7b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e752:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e756:	d034      	beq.n	800e7c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e758:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e75c:	d82b      	bhi.n	800e7b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e75e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e762:	d01d      	beq.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e764:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e768:	d825      	bhi.n	800e7b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d006      	beq.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e76e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e772:	d00a      	beq.n	800e78a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e774:	e01f      	b.n	800e7b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e776:	bf00      	nop
 800e778:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e77c:	4ba2      	ldr	r3, [pc, #648]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e780:	4aa1      	ldr	r2, [pc, #644]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e788:	e01c      	b.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e78e:	3308      	adds	r3, #8
 800e790:	2100      	movs	r1, #0
 800e792:	4618      	mov	r0, r3
 800e794:	f002 f9ee 	bl	8010b74 <RCCEx_PLL2_Config>
 800e798:	4603      	mov	r3, r0
 800e79a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e79e:	e011      	b.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7a4:	3328      	adds	r3, #40	@ 0x28
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f002 fa95 	bl	8010cd8 <RCCEx_PLL3_Config>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e7b4:	e006      	b.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e7bc:	e002      	b.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e7be:	bf00      	nop
 800e7c0:	e000      	b.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e7c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d10b      	bne.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e7cc:	4b8e      	ldr	r3, [pc, #568]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e7ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e7dc:	4a8a      	ldr	r2, [pc, #552]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e7de:	430b      	orrs	r3, r1
 800e7e0:	6593      	str	r3, [r2, #88]	@ 0x58
 800e7e2:	e003      	b.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e7f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e802:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e806:	460b      	mov	r3, r1
 800e808:	4313      	orrs	r3, r2
 800e80a:	d03a      	beq.n	800e882 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800e80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e812:	2b30      	cmp	r3, #48	@ 0x30
 800e814:	d01f      	beq.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e816:	2b30      	cmp	r3, #48	@ 0x30
 800e818:	d819      	bhi.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e81a:	2b20      	cmp	r3, #32
 800e81c:	d00c      	beq.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e81e:	2b20      	cmp	r3, #32
 800e820:	d815      	bhi.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e822:	2b00      	cmp	r3, #0
 800e824:	d019      	beq.n	800e85a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e826:	2b10      	cmp	r3, #16
 800e828:	d111      	bne.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e82a:	4b77      	ldr	r3, [pc, #476]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e82e:	4a76      	ldr	r2, [pc, #472]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e834:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e836:	e011      	b.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e83c:	3308      	adds	r3, #8
 800e83e:	2102      	movs	r1, #2
 800e840:	4618      	mov	r0, r3
 800e842:	f002 f997 	bl	8010b74 <RCCEx_PLL2_Config>
 800e846:	4603      	mov	r3, r0
 800e848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e84c:	e006      	b.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e84e:	2301      	movs	r3, #1
 800e850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e854:	e002      	b.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e856:	bf00      	nop
 800e858:	e000      	b.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e85a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e85c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10a      	bne.n	800e87a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e864:	4b68      	ldr	r3, [pc, #416]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e868:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e872:	4a65      	ldr	r2, [pc, #404]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e874:	430b      	orrs	r3, r1
 800e876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e878:	e003      	b.n	800e882 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e87a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e87e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e88e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e892:	2300      	movs	r3, #0
 800e894:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e898:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e89c:	460b      	mov	r3, r1
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	d051      	beq.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e8ac:	d035      	beq.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800e8ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e8b2:	d82e      	bhi.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e8b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e8b8:	d031      	beq.n	800e91e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e8ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e8be:	d828      	bhi.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e8c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e8c4:	d01a      	beq.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e8c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e8ca:	d822      	bhi.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d003      	beq.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e8d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8d4:	d007      	beq.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800e8d6:	e01c      	b.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8d8:	4b4b      	ldr	r3, [pc, #300]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8dc:	4a4a      	ldr	r2, [pc, #296]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e8de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e8e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e8e4:	e01c      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8ea:	3308      	adds	r3, #8
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f002 f940 	bl	8010b74 <RCCEx_PLL2_Config>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e8fa:	e011      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e8fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e900:	3328      	adds	r3, #40	@ 0x28
 800e902:	2100      	movs	r1, #0
 800e904:	4618      	mov	r0, r3
 800e906:	f002 f9e7 	bl	8010cd8 <RCCEx_PLL3_Config>
 800e90a:	4603      	mov	r3, r0
 800e90c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e910:	e006      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e912:	2301      	movs	r3, #1
 800e914:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e918:	e002      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e91a:	bf00      	nop
 800e91c:	e000      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e91e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e924:	2b00      	cmp	r3, #0
 800e926:	d10a      	bne.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e928:	4b37      	ldr	r3, [pc, #220]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e92a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e92c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e936:	4a34      	ldr	r2, [pc, #208]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e938:	430b      	orrs	r3, r1
 800e93a:	6513      	str	r3, [r2, #80]	@ 0x50
 800e93c:	e003      	b.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e93e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e956:	2300      	movs	r3, #0
 800e958:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e95c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e960:	460b      	mov	r3, r1
 800e962:	4313      	orrs	r3, r2
 800e964:	d056      	beq.n	800ea14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e96a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e96c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e970:	d033      	beq.n	800e9da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e972:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e976:	d82c      	bhi.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e978:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e97c:	d02f      	beq.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e97e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e982:	d826      	bhi.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e988:	d02b      	beq.n	800e9e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e98a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e98e:	d820      	bhi.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e994:	d012      	beq.n	800e9bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e99a:	d81a      	bhi.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d022      	beq.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e9a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9a4:	d115      	bne.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9aa:	3308      	adds	r3, #8
 800e9ac:	2101      	movs	r1, #1
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f002 f8e0 	bl	8010b74 <RCCEx_PLL2_Config>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e9ba:	e015      	b.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9c0:	3328      	adds	r3, #40	@ 0x28
 800e9c2:	2101      	movs	r1, #1
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f002 f987 	bl	8010cd8 <RCCEx_PLL3_Config>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e9d0:	e00a      	b.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e9d8:	e006      	b.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e9da:	bf00      	nop
 800e9dc:	e004      	b.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e9de:	bf00      	nop
 800e9e0:	e002      	b.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e9e2:	bf00      	nop
 800e9e4:	e000      	b.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e9e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d10d      	bne.n	800ea0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e9f0:	4b05      	ldr	r3, [pc, #20]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e9f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9fe:	4a02      	ldr	r2, [pc, #8]	@ (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ea00:	430b      	orrs	r3, r1
 800ea02:	6513      	str	r3, [r2, #80]	@ 0x50
 800ea04:	e006      	b.n	800ea14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ea06:	bf00      	nop
 800ea08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ea14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800ea20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ea24:	2300      	movs	r3, #0
 800ea26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ea2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	4313      	orrs	r3, r2
 800ea32:	d055      	beq.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ea34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ea3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ea40:	d033      	beq.n	800eaaa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ea42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ea46:	d82c      	bhi.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea4c:	d02f      	beq.n	800eaae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ea4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea52:	d826      	bhi.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ea58:	d02b      	beq.n	800eab2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ea5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ea5e:	d820      	bhi.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea64:	d012      	beq.n	800ea8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ea66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea6a:	d81a      	bhi.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d022      	beq.n	800eab6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ea70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea74:	d115      	bne.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea7a:	3308      	adds	r3, #8
 800ea7c:	2101      	movs	r1, #1
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f002 f878 	bl	8010b74 <RCCEx_PLL2_Config>
 800ea84:	4603      	mov	r3, r0
 800ea86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ea8a:	e015      	b.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea90:	3328      	adds	r3, #40	@ 0x28
 800ea92:	2101      	movs	r1, #1
 800ea94:	4618      	mov	r0, r3
 800ea96:	f002 f91f 	bl	8010cd8 <RCCEx_PLL3_Config>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800eaa0:	e00a      	b.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eaa8:	e006      	b.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800eaaa:	bf00      	nop
 800eaac:	e004      	b.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800eaae:	bf00      	nop
 800eab0:	e002      	b.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800eab2:	bf00      	nop
 800eab4:	e000      	b.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800eab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10b      	bne.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800eac0:	4ba3      	ldr	r3, [pc, #652]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eac4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800eac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eacc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ead0:	4a9f      	ldr	r2, [pc, #636]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ead2:	430b      	orrs	r3, r1
 800ead4:	6593      	str	r3, [r2, #88]	@ 0x58
 800ead6:	e003      	b.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ead8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eadc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800eae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800eaec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800eaf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800eafa:	460b      	mov	r3, r1
 800eafc:	4313      	orrs	r3, r2
 800eafe:	d037      	beq.n	800eb70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800eb00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb0a:	d00e      	beq.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800eb0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb10:	d816      	bhi.n	800eb40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d018      	beq.n	800eb48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800eb16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb1a:	d111      	bne.n	800eb40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb1c:	4b8c      	ldr	r3, [pc, #560]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb20:	4a8b      	ldr	r2, [pc, #556]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800eb28:	e00f      	b.n	800eb4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb2e:	3308      	adds	r3, #8
 800eb30:	2101      	movs	r1, #1
 800eb32:	4618      	mov	r0, r3
 800eb34:	f002 f81e 	bl	8010b74 <RCCEx_PLL2_Config>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800eb3e:	e004      	b.n	800eb4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb40:	2301      	movs	r3, #1
 800eb42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eb46:	e000      	b.n	800eb4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800eb48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10a      	bne.n	800eb68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800eb52:	4b7f      	ldr	r3, [pc, #508]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800eb5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb60:	4a7b      	ldr	r2, [pc, #492]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb62:	430b      	orrs	r3, r1
 800eb64:	6513      	str	r3, [r2, #80]	@ 0x50
 800eb66:	e003      	b.n	800eb70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800eb70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800eb7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800eb80:	2300      	movs	r3, #0
 800eb82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eb86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	d039      	beq.n	800ec04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800eb90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb96:	2b03      	cmp	r3, #3
 800eb98:	d81c      	bhi.n	800ebd4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800eb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800eba0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800eb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba0:	0800ebdd 	.word	0x0800ebdd
 800eba4:	0800ebb1 	.word	0x0800ebb1
 800eba8:	0800ebbf 	.word	0x0800ebbf
 800ebac:	0800ebdd 	.word	0x0800ebdd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebb0:	4b67      	ldr	r3, [pc, #412]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ebb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb4:	4a66      	ldr	r2, [pc, #408]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ebb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ebba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ebbc:	e00f      	b.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ebbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebc2:	3308      	adds	r3, #8
 800ebc4:	2102      	movs	r1, #2
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f001 ffd4 	bl	8010b74 <RCCEx_PLL2_Config>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ebd2:	e004      	b.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ebda:	e000      	b.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ebdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10a      	bne.n	800ebfc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ebe6:	4b5a      	ldr	r3, [pc, #360]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ebe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebea:	f023 0103 	bic.w	r1, r3, #3
 800ebee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ebf4:	4a56      	ldr	r2, [pc, #344]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ebf6:	430b      	orrs	r3, r1
 800ebf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ebfa:	e003      	b.n	800ec04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ec04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ec10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ec14:	2300      	movs	r3, #0
 800ec16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ec1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ec1e:	460b      	mov	r3, r1
 800ec20:	4313      	orrs	r3, r2
 800ec22:	f000 809f 	beq.w	800ed64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ec26:	4b4b      	ldr	r3, [pc, #300]	@ (800ed54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a4a      	ldr	r2, [pc, #296]	@ (800ed54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ec2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ec32:	f7f3 fdb5 	bl	80027a0 <HAL_GetTick>
 800ec36:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ec3a:	e00b      	b.n	800ec54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ec3c:	f7f3 fdb0 	bl	80027a0 <HAL_GetTick>
 800ec40:	4602      	mov	r2, r0
 800ec42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ec46:	1ad3      	subs	r3, r2, r3
 800ec48:	2b64      	cmp	r3, #100	@ 0x64
 800ec4a:	d903      	bls.n	800ec54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ec4c:	2303      	movs	r3, #3
 800ec4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ec52:	e005      	b.n	800ec60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ec54:	4b3f      	ldr	r3, [pc, #252]	@ (800ed54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d0ed      	beq.n	800ec3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ec60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d179      	bne.n	800ed5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ec68:	4b39      	ldr	r3, [pc, #228]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ec6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ec74:	4053      	eors	r3, r2
 800ec76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d015      	beq.n	800ecaa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ec7e:	4b34      	ldr	r3, [pc, #208]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ec8a:	4b31      	ldr	r3, [pc, #196]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec8e:	4a30      	ldr	r2, [pc, #192]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ec94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ec96:	4b2e      	ldr	r3, [pc, #184]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec9a:	4a2d      	ldr	r2, [pc, #180]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eca0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800eca2:	4a2b      	ldr	r2, [pc, #172]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eca4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800eca8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ecaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ecb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ecb6:	d118      	bne.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecb8:	f7f3 fd72 	bl	80027a0 <HAL_GetTick>
 800ecbc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ecc0:	e00d      	b.n	800ecde <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ecc2:	f7f3 fd6d 	bl	80027a0 <HAL_GetTick>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800eccc:	1ad2      	subs	r2, r2, r3
 800ecce:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d903      	bls.n	800ecde <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ecd6:	2303      	movs	r3, #3
 800ecd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800ecdc:	e005      	b.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ecde:	4b1c      	ldr	r3, [pc, #112]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ece0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ece2:	f003 0302 	and.w	r3, r3, #2
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d0eb      	beq.n	800ecc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ecea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d129      	bne.n	800ed46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ecf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ecfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ecfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed02:	d10e      	bne.n	800ed22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ed04:	4b12      	ldr	r3, [pc, #72]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed06:	691b      	ldr	r3, [r3, #16]
 800ed08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ed0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ed14:	091a      	lsrs	r2, r3, #4
 800ed16:	4b10      	ldr	r3, [pc, #64]	@ (800ed58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ed18:	4013      	ands	r3, r2
 800ed1a:	4a0d      	ldr	r2, [pc, #52]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed1c:	430b      	orrs	r3, r1
 800ed1e:	6113      	str	r3, [r2, #16]
 800ed20:	e005      	b.n	800ed2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ed22:	4b0b      	ldr	r3, [pc, #44]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	4a0a      	ldr	r2, [pc, #40]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ed2c:	6113      	str	r3, [r2, #16]
 800ed2e:	4b08      	ldr	r3, [pc, #32]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ed32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ed3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed3e:	4a04      	ldr	r2, [pc, #16]	@ (800ed50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed40:	430b      	orrs	r3, r1
 800ed42:	6713      	str	r3, [r2, #112]	@ 0x70
 800ed44:	e00e      	b.n	800ed64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ed46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ed4e:	e009      	b.n	800ed64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ed50:	58024400 	.word	0x58024400
 800ed54:	58024800 	.word	0x58024800
 800ed58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ed64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6c:	f002 0301 	and.w	r3, r2, #1
 800ed70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ed74:	2300      	movs	r3, #0
 800ed76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ed7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4313      	orrs	r3, r2
 800ed82:	f000 8089 	beq.w	800ee98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ed86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed8c:	2b28      	cmp	r3, #40	@ 0x28
 800ed8e:	d86b      	bhi.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ed90:	a201      	add	r2, pc, #4	@ (adr r2, 800ed98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ed92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed96:	bf00      	nop
 800ed98:	0800ee71 	.word	0x0800ee71
 800ed9c:	0800ee69 	.word	0x0800ee69
 800eda0:	0800ee69 	.word	0x0800ee69
 800eda4:	0800ee69 	.word	0x0800ee69
 800eda8:	0800ee69 	.word	0x0800ee69
 800edac:	0800ee69 	.word	0x0800ee69
 800edb0:	0800ee69 	.word	0x0800ee69
 800edb4:	0800ee69 	.word	0x0800ee69
 800edb8:	0800ee3d 	.word	0x0800ee3d
 800edbc:	0800ee69 	.word	0x0800ee69
 800edc0:	0800ee69 	.word	0x0800ee69
 800edc4:	0800ee69 	.word	0x0800ee69
 800edc8:	0800ee69 	.word	0x0800ee69
 800edcc:	0800ee69 	.word	0x0800ee69
 800edd0:	0800ee69 	.word	0x0800ee69
 800edd4:	0800ee69 	.word	0x0800ee69
 800edd8:	0800ee53 	.word	0x0800ee53
 800eddc:	0800ee69 	.word	0x0800ee69
 800ede0:	0800ee69 	.word	0x0800ee69
 800ede4:	0800ee69 	.word	0x0800ee69
 800ede8:	0800ee69 	.word	0x0800ee69
 800edec:	0800ee69 	.word	0x0800ee69
 800edf0:	0800ee69 	.word	0x0800ee69
 800edf4:	0800ee69 	.word	0x0800ee69
 800edf8:	0800ee71 	.word	0x0800ee71
 800edfc:	0800ee69 	.word	0x0800ee69
 800ee00:	0800ee69 	.word	0x0800ee69
 800ee04:	0800ee69 	.word	0x0800ee69
 800ee08:	0800ee69 	.word	0x0800ee69
 800ee0c:	0800ee69 	.word	0x0800ee69
 800ee10:	0800ee69 	.word	0x0800ee69
 800ee14:	0800ee69 	.word	0x0800ee69
 800ee18:	0800ee71 	.word	0x0800ee71
 800ee1c:	0800ee69 	.word	0x0800ee69
 800ee20:	0800ee69 	.word	0x0800ee69
 800ee24:	0800ee69 	.word	0x0800ee69
 800ee28:	0800ee69 	.word	0x0800ee69
 800ee2c:	0800ee69 	.word	0x0800ee69
 800ee30:	0800ee69 	.word	0x0800ee69
 800ee34:	0800ee69 	.word	0x0800ee69
 800ee38:	0800ee71 	.word	0x0800ee71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee40:	3308      	adds	r3, #8
 800ee42:	2101      	movs	r1, #1
 800ee44:	4618      	mov	r0, r3
 800ee46:	f001 fe95 	bl	8010b74 <RCCEx_PLL2_Config>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ee50:	e00f      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee56:	3328      	adds	r3, #40	@ 0x28
 800ee58:	2101      	movs	r1, #1
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f001 ff3c 	bl	8010cd8 <RCCEx_PLL3_Config>
 800ee60:	4603      	mov	r3, r0
 800ee62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ee66:	e004      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ee6e:	e000      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ee70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d10a      	bne.n	800ee90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ee7a:	4bbf      	ldr	r3, [pc, #764]	@ (800f178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ee82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee88:	4abb      	ldr	r2, [pc, #748]	@ (800f178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee8a:	430b      	orrs	r3, r1
 800ee8c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ee8e:	e003      	b.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ee98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea0:	f002 0302 	and.w	r3, r2, #2
 800eea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eea8:	2300      	movs	r3, #0
 800eeaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800eeae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800eeb2:	460b      	mov	r3, r1
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	d041      	beq.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800eeb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eebe:	2b05      	cmp	r3, #5
 800eec0:	d824      	bhi.n	800ef0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800eec2:	a201      	add	r2, pc, #4	@ (adr r2, 800eec8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800eec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec8:	0800ef15 	.word	0x0800ef15
 800eecc:	0800eee1 	.word	0x0800eee1
 800eed0:	0800eef7 	.word	0x0800eef7
 800eed4:	0800ef15 	.word	0x0800ef15
 800eed8:	0800ef15 	.word	0x0800ef15
 800eedc:	0800ef15 	.word	0x0800ef15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eee4:	3308      	adds	r3, #8
 800eee6:	2101      	movs	r1, #1
 800eee8:	4618      	mov	r0, r3
 800eeea:	f001 fe43 	bl	8010b74 <RCCEx_PLL2_Config>
 800eeee:	4603      	mov	r3, r0
 800eef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eef4:	e00f      	b.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eefa:	3328      	adds	r3, #40	@ 0x28
 800eefc:	2101      	movs	r1, #1
 800eefe:	4618      	mov	r0, r3
 800ef00:	f001 feea 	bl	8010cd8 <RCCEx_PLL3_Config>
 800ef04:	4603      	mov	r3, r0
 800ef06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ef0a:	e004      	b.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ef12:	e000      	b.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ef14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10a      	bne.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ef1e:	4b96      	ldr	r3, [pc, #600]	@ (800f178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ef20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef22:	f023 0107 	bic.w	r1, r3, #7
 800ef26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef2c:	4a92      	ldr	r2, [pc, #584]	@ (800f178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ef2e:	430b      	orrs	r3, r1
 800ef30:	6553      	str	r3, [r2, #84]	@ 0x54
 800ef32:	e003      	b.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ef3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef44:	f002 0304 	and.w	r3, r2, #4
 800ef48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ef56:	460b      	mov	r3, r1
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	d044      	beq.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ef5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef64:	2b05      	cmp	r3, #5
 800ef66:	d825      	bhi.n	800efb4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ef68:	a201      	add	r2, pc, #4	@ (adr r2, 800ef70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ef6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef6e:	bf00      	nop
 800ef70:	0800efbd 	.word	0x0800efbd
 800ef74:	0800ef89 	.word	0x0800ef89
 800ef78:	0800ef9f 	.word	0x0800ef9f
 800ef7c:	0800efbd 	.word	0x0800efbd
 800ef80:	0800efbd 	.word	0x0800efbd
 800ef84:	0800efbd 	.word	0x0800efbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef8c:	3308      	adds	r3, #8
 800ef8e:	2101      	movs	r1, #1
 800ef90:	4618      	mov	r0, r3
 800ef92:	f001 fdef 	bl	8010b74 <RCCEx_PLL2_Config>
 800ef96:	4603      	mov	r3, r0
 800ef98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ef9c:	e00f      	b.n	800efbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efa2:	3328      	adds	r3, #40	@ 0x28
 800efa4:	2101      	movs	r1, #1
 800efa6:	4618      	mov	r0, r3
 800efa8:	f001 fe96 	bl	8010cd8 <RCCEx_PLL3_Config>
 800efac:	4603      	mov	r3, r0
 800efae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800efb2:	e004      	b.n	800efbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800efb4:	2301      	movs	r3, #1
 800efb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800efba:	e000      	b.n	800efbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800efbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10b      	bne.n	800efde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800efc6:	4b6c      	ldr	r3, [pc, #432]	@ (800f178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800efc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efca:	f023 0107 	bic.w	r1, r3, #7
 800efce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800efd6:	4a68      	ldr	r2, [pc, #416]	@ (800f178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800efd8:	430b      	orrs	r3, r1
 800efda:	6593      	str	r3, [r2, #88]	@ 0x58
 800efdc:	e003      	b.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800efe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800efe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efee:	f002 0320 	and.w	r3, r2, #32
 800eff2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eff6:	2300      	movs	r3, #0
 800eff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800effc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f000:	460b      	mov	r3, r1
 800f002:	4313      	orrs	r3, r2
 800f004:	d055      	beq.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f00e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f012:	d033      	beq.n	800f07c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f014:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f018:	d82c      	bhi.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f01a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f01e:	d02f      	beq.n	800f080 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f024:	d826      	bhi.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f026:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f02a:	d02b      	beq.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f02c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f030:	d820      	bhi.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f036:	d012      	beq.n	800f05e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f038:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f03c:	d81a      	bhi.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d022      	beq.n	800f088 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f046:	d115      	bne.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f04c:	3308      	adds	r3, #8
 800f04e:	2100      	movs	r1, #0
 800f050:	4618      	mov	r0, r3
 800f052:	f001 fd8f 	bl	8010b74 <RCCEx_PLL2_Config>
 800f056:	4603      	mov	r3, r0
 800f058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f05c:	e015      	b.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f062:	3328      	adds	r3, #40	@ 0x28
 800f064:	2102      	movs	r1, #2
 800f066:	4618      	mov	r0, r3
 800f068:	f001 fe36 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f06c:	4603      	mov	r3, r0
 800f06e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f072:	e00a      	b.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f074:	2301      	movs	r3, #1
 800f076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f07a:	e006      	b.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f07c:	bf00      	nop
 800f07e:	e004      	b.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f080:	bf00      	nop
 800f082:	e002      	b.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f084:	bf00      	nop
 800f086:	e000      	b.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f08a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d10b      	bne.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f092:	4b39      	ldr	r3, [pc, #228]	@ (800f178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f096:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0a2:	4a35      	ldr	r2, [pc, #212]	@ (800f178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f0a4:	430b      	orrs	r3, r1
 800f0a6:	6553      	str	r3, [r2, #84]	@ 0x54
 800f0a8:	e003      	b.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800f0be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f0c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	d058      	beq.n	800f184 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f0da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f0de:	d033      	beq.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f0e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f0e4:	d82c      	bhi.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0ea:	d02f      	beq.n	800f14c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f0ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0f0:	d826      	bhi.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f0f6:	d02b      	beq.n	800f150 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f0f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f0fc:	d820      	bhi.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f102:	d012      	beq.n	800f12a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f108:	d81a      	bhi.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d022      	beq.n	800f154 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f10e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f112:	d115      	bne.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f118:	3308      	adds	r3, #8
 800f11a:	2100      	movs	r1, #0
 800f11c:	4618      	mov	r0, r3
 800f11e:	f001 fd29 	bl	8010b74 <RCCEx_PLL2_Config>
 800f122:	4603      	mov	r3, r0
 800f124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f128:	e015      	b.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f12e:	3328      	adds	r3, #40	@ 0x28
 800f130:	2102      	movs	r1, #2
 800f132:	4618      	mov	r0, r3
 800f134:	f001 fdd0 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f138:	4603      	mov	r3, r0
 800f13a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f13e:	e00a      	b.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f140:	2301      	movs	r3, #1
 800f142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f146:	e006      	b.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f148:	bf00      	nop
 800f14a:	e004      	b.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f14c:	bf00      	nop
 800f14e:	e002      	b.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f150:	bf00      	nop
 800f152:	e000      	b.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f154:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10e      	bne.n	800f17c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f15e:	4b06      	ldr	r3, [pc, #24]	@ (800f178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f162:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800f166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f16a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f16e:	4a02      	ldr	r2, [pc, #8]	@ (800f178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f170:	430b      	orrs	r3, r1
 800f172:	6593      	str	r3, [r2, #88]	@ 0x58
 800f174:	e006      	b.n	800f184 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f176:	bf00      	nop
 800f178:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f17c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800f190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f194:	2300      	movs	r3, #0
 800f196:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f19a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800f19e:	460b      	mov	r3, r1
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	d055      	beq.n	800f250 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f1ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f1b0:	d033      	beq.n	800f21a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f1b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f1b6:	d82c      	bhi.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f1b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1bc:	d02f      	beq.n	800f21e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f1be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1c2:	d826      	bhi.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f1c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f1c8:	d02b      	beq.n	800f222 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f1ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f1ce:	d820      	bhi.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f1d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f1d4:	d012      	beq.n	800f1fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f1d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f1da:	d81a      	bhi.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d022      	beq.n	800f226 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f1e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f1e4:	d115      	bne.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1ea:	3308      	adds	r3, #8
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f001 fcc0 	bl	8010b74 <RCCEx_PLL2_Config>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f1fa:	e015      	b.n	800f228 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f200:	3328      	adds	r3, #40	@ 0x28
 800f202:	2102      	movs	r1, #2
 800f204:	4618      	mov	r0, r3
 800f206:	f001 fd67 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f20a:	4603      	mov	r3, r0
 800f20c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f210:	e00a      	b.n	800f228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f212:	2301      	movs	r3, #1
 800f214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f218:	e006      	b.n	800f228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f21a:	bf00      	nop
 800f21c:	e004      	b.n	800f228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f21e:	bf00      	nop
 800f220:	e002      	b.n	800f228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f222:	bf00      	nop
 800f224:	e000      	b.n	800f228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f226:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d10b      	bne.n	800f248 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f230:	4ba1      	ldr	r3, [pc, #644]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f234:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800f238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f23c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f240:	4a9d      	ldr	r2, [pc, #628]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f242:	430b      	orrs	r3, r1
 800f244:	6593      	str	r3, [r2, #88]	@ 0x58
 800f246:	e003      	b.n	800f250 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f24c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f258:	f002 0308 	and.w	r3, r2, #8
 800f25c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f260:	2300      	movs	r3, #0
 800f262:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f266:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800f26a:	460b      	mov	r3, r1
 800f26c:	4313      	orrs	r3, r2
 800f26e:	d01e      	beq.n	800f2ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f27c:	d10c      	bne.n	800f298 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f282:	3328      	adds	r3, #40	@ 0x28
 800f284:	2102      	movs	r1, #2
 800f286:	4618      	mov	r0, r3
 800f288:	f001 fd26 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d002      	beq.n	800f298 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f292:	2301      	movs	r3, #1
 800f294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f298:	4b87      	ldr	r3, [pc, #540]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f29a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f29c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2a8:	4a83      	ldr	r2, [pc, #524]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f2aa:	430b      	orrs	r3, r1
 800f2ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b6:	f002 0310 	and.w	r3, r2, #16
 800f2ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f2be:	2300      	movs	r3, #0
 800f2c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f2c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	d01e      	beq.n	800f30c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f2d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2da:	d10c      	bne.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2e0:	3328      	adds	r3, #40	@ 0x28
 800f2e2:	2102      	movs	r1, #2
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f001 fcf7 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d002      	beq.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f2f6:	4b70      	ldr	r3, [pc, #448]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f2f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f302:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f306:	4a6c      	ldr	r2, [pc, #432]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f308:	430b      	orrs	r3, r1
 800f30a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f314:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f31c:	2300      	movs	r3, #0
 800f31e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f322:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f326:	460b      	mov	r3, r1
 800f328:	4313      	orrs	r3, r2
 800f32a:	d03e      	beq.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f338:	d022      	beq.n	800f380 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f33a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f33e:	d81b      	bhi.n	800f378 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f340:	2b00      	cmp	r3, #0
 800f342:	d003      	beq.n	800f34c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f348:	d00b      	beq.n	800f362 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f34a:	e015      	b.n	800f378 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f350:	3308      	adds	r3, #8
 800f352:	2100      	movs	r1, #0
 800f354:	4618      	mov	r0, r3
 800f356:	f001 fc0d 	bl	8010b74 <RCCEx_PLL2_Config>
 800f35a:	4603      	mov	r3, r0
 800f35c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f360:	e00f      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f366:	3328      	adds	r3, #40	@ 0x28
 800f368:	2102      	movs	r1, #2
 800f36a:	4618      	mov	r0, r3
 800f36c:	f001 fcb4 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f370:	4603      	mov	r3, r0
 800f372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f376:	e004      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f378:	2301      	movs	r3, #1
 800f37a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f37e:	e000      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f380:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f386:	2b00      	cmp	r3, #0
 800f388:	d10b      	bne.n	800f3a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f38a:	4b4b      	ldr	r3, [pc, #300]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f38e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f396:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f39a:	4a47      	ldr	r2, [pc, #284]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f39c:	430b      	orrs	r3, r1
 800f39e:	6593      	str	r3, [r2, #88]	@ 0x58
 800f3a0:	e003      	b.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f3a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f3b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f3bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	d03b      	beq.n	800f43e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f3d2:	d01f      	beq.n	800f414 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f3d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f3d8:	d818      	bhi.n	800f40c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f3da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3de:	d003      	beq.n	800f3e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f3e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f3e4:	d007      	beq.n	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f3e6:	e011      	b.n	800f40c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3e8:	4b33      	ldr	r3, [pc, #204]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ec:	4a32      	ldr	r2, [pc, #200]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f3ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f3f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f3f4:	e00f      	b.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3fa:	3328      	adds	r3, #40	@ 0x28
 800f3fc:	2101      	movs	r1, #1
 800f3fe:	4618      	mov	r0, r3
 800f400:	f001 fc6a 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f404:	4603      	mov	r3, r0
 800f406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f40a:	e004      	b.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f40c:	2301      	movs	r3, #1
 800f40e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f412:	e000      	b.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f414:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d10b      	bne.n	800f436 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f41e:	4b26      	ldr	r3, [pc, #152]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f422:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f42e:	4a22      	ldr	r2, [pc, #136]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f430:	430b      	orrs	r3, r1
 800f432:	6553      	str	r3, [r2, #84]	@ 0x54
 800f434:	e003      	b.n	800f43e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f43a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f446:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f44a:	673b      	str	r3, [r7, #112]	@ 0x70
 800f44c:	2300      	movs	r3, #0
 800f44e:	677b      	str	r3, [r7, #116]	@ 0x74
 800f450:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f454:	460b      	mov	r3, r1
 800f456:	4313      	orrs	r3, r2
 800f458:	d034      	beq.n	800f4c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f460:	2b00      	cmp	r3, #0
 800f462:	d003      	beq.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f468:	d007      	beq.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f46a:	e011      	b.n	800f490 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f46c:	4b12      	ldr	r3, [pc, #72]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f470:	4a11      	ldr	r2, [pc, #68]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f478:	e00e      	b.n	800f498 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f47e:	3308      	adds	r3, #8
 800f480:	2102      	movs	r1, #2
 800f482:	4618      	mov	r0, r3
 800f484:	f001 fb76 	bl	8010b74 <RCCEx_PLL2_Config>
 800f488:	4603      	mov	r3, r0
 800f48a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f48e:	e003      	b.n	800f498 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f490:	2301      	movs	r3, #1
 800f492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f496:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d10d      	bne.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f4a0:	4b05      	ldr	r3, [pc, #20]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f4a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f4a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4ae:	4a02      	ldr	r2, [pc, #8]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f4b0:	430b      	orrs	r3, r1
 800f4b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f4b4:	e006      	b.n	800f4c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f4b6:	bf00      	nop
 800f4b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f4d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f4d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f4da:	460b      	mov	r3, r1
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	d00c      	beq.n	800f4fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f4e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4e4:	3328      	adds	r3, #40	@ 0x28
 800f4e6:	2102      	movs	r1, #2
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f001 fbf5 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d002      	beq.n	800f4fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f502:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f506:	663b      	str	r3, [r7, #96]	@ 0x60
 800f508:	2300      	movs	r3, #0
 800f50a:	667b      	str	r3, [r7, #100]	@ 0x64
 800f50c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f510:	460b      	mov	r3, r1
 800f512:	4313      	orrs	r3, r2
 800f514:	d038      	beq.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f51e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f522:	d018      	beq.n	800f556 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f524:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f528:	d811      	bhi.n	800f54e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f52a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f52e:	d014      	beq.n	800f55a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f534:	d80b      	bhi.n	800f54e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f536:	2b00      	cmp	r3, #0
 800f538:	d011      	beq.n	800f55e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f53a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f53e:	d106      	bne.n	800f54e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f540:	4bc3      	ldr	r3, [pc, #780]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f544:	4ac2      	ldr	r2, [pc, #776]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f54a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f54c:	e008      	b.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f554:	e004      	b.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f556:	bf00      	nop
 800f558:	e002      	b.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f55a:	bf00      	nop
 800f55c:	e000      	b.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f55e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f564:	2b00      	cmp	r3, #0
 800f566:	d10b      	bne.n	800f580 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f568:	4bb9      	ldr	r3, [pc, #740]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f56a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f56c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f578:	4ab5      	ldr	r2, [pc, #724]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f57a:	430b      	orrs	r3, r1
 800f57c:	6553      	str	r3, [r2, #84]	@ 0x54
 800f57e:	e003      	b.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f590:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f594:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f596:	2300      	movs	r3, #0
 800f598:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f59a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f59e:	460b      	mov	r3, r1
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	d009      	beq.n	800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f5a4:	4baa      	ldr	r3, [pc, #680]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5b2:	4aa7      	ldr	r2, [pc, #668]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5b4:	430b      	orrs	r3, r1
 800f5b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800f5c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	657b      	str	r3, [r7, #84]	@ 0x54
 800f5ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	d00a      	beq.n	800f5ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f5d4:	4b9e      	ldr	r3, [pc, #632]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5d6:	691b      	ldr	r3, [r3, #16]
 800f5d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800f5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f5e4:	4a9a      	ldr	r2, [pc, #616]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5e6:	430b      	orrs	r3, r1
 800f5e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f5f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f5fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f600:	460b      	mov	r3, r1
 800f602:	4313      	orrs	r3, r2
 800f604:	d009      	beq.n	800f61a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f606:	4b92      	ldr	r3, [pc, #584]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f60a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f614:	4a8e      	ldr	r2, [pc, #568]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f616:	430b      	orrs	r3, r1
 800f618:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f622:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f626:	643b      	str	r3, [r7, #64]	@ 0x40
 800f628:	2300      	movs	r3, #0
 800f62a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f62c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f630:	460b      	mov	r3, r1
 800f632:	4313      	orrs	r3, r2
 800f634:	d00e      	beq.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f636:	4b86      	ldr	r3, [pc, #536]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f638:	691b      	ldr	r3, [r3, #16]
 800f63a:	4a85      	ldr	r2, [pc, #532]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f63c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f640:	6113      	str	r3, [r2, #16]
 800f642:	4b83      	ldr	r3, [pc, #524]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f644:	6919      	ldr	r1, [r3, #16]
 800f646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f64a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f64e:	4a80      	ldr	r2, [pc, #512]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f650:	430b      	orrs	r3, r1
 800f652:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f660:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f662:	2300      	movs	r3, #0
 800f664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f666:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f66a:	460b      	mov	r3, r1
 800f66c:	4313      	orrs	r3, r2
 800f66e:	d009      	beq.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f670:	4b77      	ldr	r3, [pc, #476]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f674:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f67c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f67e:	4a74      	ldr	r2, [pc, #464]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f680:	430b      	orrs	r3, r1
 800f682:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f690:	633b      	str	r3, [r7, #48]	@ 0x30
 800f692:	2300      	movs	r3, #0
 800f694:	637b      	str	r3, [r7, #52]	@ 0x34
 800f696:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f69a:	460b      	mov	r3, r1
 800f69c:	4313      	orrs	r3, r2
 800f69e:	d00a      	beq.n	800f6b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f6a0:	4b6b      	ldr	r3, [pc, #428]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f6a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f6b0:	4a67      	ldr	r2, [pc, #412]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f6b2:	430b      	orrs	r3, r1
 800f6b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6be:	2100      	movs	r1, #0
 800f6c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f6c2:	f003 0301 	and.w	r3, r3, #1
 800f6c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f6c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	d011      	beq.n	800f6f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6d6:	3308      	adds	r3, #8
 800f6d8:	2100      	movs	r1, #0
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f001 fa4a 	bl	8010b74 <RCCEx_PLL2_Config>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f6e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d003      	beq.n	800f6f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fe:	2100      	movs	r1, #0
 800f700:	6239      	str	r1, [r7, #32]
 800f702:	f003 0302 	and.w	r3, r3, #2
 800f706:	627b      	str	r3, [r7, #36]	@ 0x24
 800f708:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f70c:	460b      	mov	r3, r1
 800f70e:	4313      	orrs	r3, r2
 800f710:	d011      	beq.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f716:	3308      	adds	r3, #8
 800f718:	2101      	movs	r1, #1
 800f71a:	4618      	mov	r0, r3
 800f71c:	f001 fa2a 	bl	8010b74 <RCCEx_PLL2_Config>
 800f720:	4603      	mov	r3, r0
 800f722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d003      	beq.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f72e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73e:	2100      	movs	r1, #0
 800f740:	61b9      	str	r1, [r7, #24]
 800f742:	f003 0304 	and.w	r3, r3, #4
 800f746:	61fb      	str	r3, [r7, #28]
 800f748:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f74c:	460b      	mov	r3, r1
 800f74e:	4313      	orrs	r3, r2
 800f750:	d011      	beq.n	800f776 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f756:	3308      	adds	r3, #8
 800f758:	2102      	movs	r1, #2
 800f75a:	4618      	mov	r0, r3
 800f75c:	f001 fa0a 	bl	8010b74 <RCCEx_PLL2_Config>
 800f760:	4603      	mov	r3, r0
 800f762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d003      	beq.n	800f776 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f76e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	2100      	movs	r1, #0
 800f780:	6139      	str	r1, [r7, #16]
 800f782:	f003 0308 	and.w	r3, r3, #8
 800f786:	617b      	str	r3, [r7, #20]
 800f788:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f78c:	460b      	mov	r3, r1
 800f78e:	4313      	orrs	r3, r2
 800f790:	d011      	beq.n	800f7b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f796:	3328      	adds	r3, #40	@ 0x28
 800f798:	2100      	movs	r1, #0
 800f79a:	4618      	mov	r0, r3
 800f79c:	f001 fa9c 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800f7a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d003      	beq.n	800f7b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7be:	2100      	movs	r1, #0
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	f003 0310 	and.w	r3, r3, #16
 800f7c6:	60fb      	str	r3, [r7, #12]
 800f7c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	d011      	beq.n	800f7f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7d6:	3328      	adds	r3, #40	@ 0x28
 800f7d8:	2101      	movs	r1, #1
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f001 fa7c 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f7e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d003      	beq.n	800f7f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fe:	2100      	movs	r1, #0
 800f800:	6039      	str	r1, [r7, #0]
 800f802:	f003 0320 	and.w	r3, r3, #32
 800f806:	607b      	str	r3, [r7, #4]
 800f808:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f80c:	460b      	mov	r3, r1
 800f80e:	4313      	orrs	r3, r2
 800f810:	d011      	beq.n	800f836 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f816:	3328      	adds	r3, #40	@ 0x28
 800f818:	2102      	movs	r1, #2
 800f81a:	4618      	mov	r0, r3
 800f81c:	f001 fa5c 	bl	8010cd8 <RCCEx_PLL3_Config>
 800f820:	4603      	mov	r3, r0
 800f822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d003      	beq.n	800f836 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f82e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800f836:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d101      	bne.n	800f842 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800f83e:	2300      	movs	r3, #0
 800f840:	e000      	b.n	800f844 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800f842:	2301      	movs	r3, #1
}
 800f844:	4618      	mov	r0, r3
 800f846:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800f84a:	46bd      	mov	sp, r7
 800f84c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f850:	58024400 	.word	0x58024400

0800f854 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b090      	sub	sp, #64	@ 0x40
 800f858:	af00      	add	r7, sp, #0
 800f85a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f85e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f862:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f866:	430b      	orrs	r3, r1
 800f868:	f040 8094 	bne.w	800f994 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f86c:	4b9e      	ldr	r3, [pc, #632]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f86e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f870:	f003 0307 	and.w	r3, r3, #7
 800f874:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f878:	2b04      	cmp	r3, #4
 800f87a:	f200 8087 	bhi.w	800f98c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f87e:	a201      	add	r2, pc, #4	@ (adr r2, 800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f884:	0800f899 	.word	0x0800f899
 800f888:	0800f8c1 	.word	0x0800f8c1
 800f88c:	0800f8e9 	.word	0x0800f8e9
 800f890:	0800f985 	.word	0x0800f985
 800f894:	0800f911 	.word	0x0800f911
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f898:	4b93      	ldr	r3, [pc, #588]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f8a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f8a4:	d108      	bne.n	800f8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f8a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f001 f810 	bl	80108d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8b4:	f000 bd45 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8bc:	f000 bd41 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f8c0:	4b89      	ldr	r3, [pc, #548]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f8c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f8cc:	d108      	bne.n	800f8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8ce:	f107 0318 	add.w	r3, r7, #24
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f000 fd54 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f8d8:	69bb      	ldr	r3, [r7, #24]
 800f8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8dc:	f000 bd31 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8e4:	f000 bd2d 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f8e8:	4b7f      	ldr	r3, [pc, #508]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f8f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8f4:	d108      	bne.n	800f908 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8f6:	f107 030c 	add.w	r3, r7, #12
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f000 fe94 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f904:	f000 bd1d 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f908:	2300      	movs	r3, #0
 800f90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f90c:	f000 bd19 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f910:	4b75      	ldr	r3, [pc, #468]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f914:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f918:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f91a:	4b73      	ldr	r3, [pc, #460]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f003 0304 	and.w	r3, r3, #4
 800f922:	2b04      	cmp	r3, #4
 800f924:	d10c      	bne.n	800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d109      	bne.n	800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f92c:	4b6e      	ldr	r3, [pc, #440]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	08db      	lsrs	r3, r3, #3
 800f932:	f003 0303 	and.w	r3, r3, #3
 800f936:	4a6d      	ldr	r2, [pc, #436]	@ (800faec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f938:	fa22 f303 	lsr.w	r3, r2, r3
 800f93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f93e:	e01f      	b.n	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f940:	4b69      	ldr	r3, [pc, #420]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f94c:	d106      	bne.n	800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f94e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f954:	d102      	bne.n	800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f956:	4b66      	ldr	r3, [pc, #408]	@ (800faf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f95a:	e011      	b.n	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f95c:	4b62      	ldr	r3, [pc, #392]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f968:	d106      	bne.n	800f978 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f96c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f970:	d102      	bne.n	800f978 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f972:	4b60      	ldr	r3, [pc, #384]	@ (800faf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f976:	e003      	b.n	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f978:	2300      	movs	r3, #0
 800f97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f97c:	f000 bce1 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f980:	f000 bcdf 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f984:	4b5c      	ldr	r3, [pc, #368]	@ (800faf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f988:	f000 bcdb 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f98c:	2300      	movs	r3, #0
 800f98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f990:	f000 bcd7 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f994:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f998:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800f99c:	430b      	orrs	r3, r1
 800f99e:	f040 80ad 	bne.w	800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f9a2:	4b51      	ldr	r3, [pc, #324]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f9a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9a6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800f9aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9b2:	d056      	beq.n	800fa62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9ba:	f200 8090 	bhi.w	800fade <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c0:	2bc0      	cmp	r3, #192	@ 0xc0
 800f9c2:	f000 8088 	beq.w	800fad6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c8:	2bc0      	cmp	r3, #192	@ 0xc0
 800f9ca:	f200 8088 	bhi.w	800fade <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d0:	2b80      	cmp	r3, #128	@ 0x80
 800f9d2:	d032      	beq.n	800fa3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d6:	2b80      	cmp	r3, #128	@ 0x80
 800f9d8:	f200 8081 	bhi.w	800fade <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d003      	beq.n	800f9ea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e4:	2b40      	cmp	r3, #64	@ 0x40
 800f9e6:	d014      	beq.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f9e8:	e079      	b.n	800fade <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f9ea:	4b3f      	ldr	r3, [pc, #252]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f9f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f9f6:	d108      	bne.n	800fa0a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f9f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f000 ff67 	bl	80108d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fa02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa06:	f000 bc9c 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa0e:	f000 bc98 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa12:	4b35      	ldr	r3, [pc, #212]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fa1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fa1e:	d108      	bne.n	800fa32 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa20:	f107 0318 	add.w	r3, r7, #24
 800fa24:	4618      	mov	r0, r3
 800fa26:	f000 fcab 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa2e:	f000 bc88 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa32:	2300      	movs	r3, #0
 800fa34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa36:	f000 bc84 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fa3a:	4b2b      	ldr	r3, [pc, #172]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fa42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa46:	d108      	bne.n	800fa5a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa48:	f107 030c 	add.w	r3, r7, #12
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f000 fdeb 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa56:	f000 bc74 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa5e:	f000 bc70 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fa62:	4b21      	ldr	r3, [pc, #132]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fa6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fa6c:	4b1e      	ldr	r3, [pc, #120]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f003 0304 	and.w	r3, r3, #4
 800fa74:	2b04      	cmp	r3, #4
 800fa76:	d10c      	bne.n	800fa92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800fa78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d109      	bne.n	800fa92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fa7e:	4b1a      	ldr	r3, [pc, #104]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	08db      	lsrs	r3, r3, #3
 800fa84:	f003 0303 	and.w	r3, r3, #3
 800fa88:	4a18      	ldr	r2, [pc, #96]	@ (800faec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fa8a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fa90:	e01f      	b.n	800fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fa92:	4b15      	ldr	r3, [pc, #84]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa9e:	d106      	bne.n	800faae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800faa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800faa6:	d102      	bne.n	800faae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800faa8:	4b11      	ldr	r3, [pc, #68]	@ (800faf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800faaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800faac:	e011      	b.n	800fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800faae:	4b0e      	ldr	r3, [pc, #56]	@ (800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800faba:	d106      	bne.n	800faca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800fabc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fabe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fac2:	d102      	bne.n	800faca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fac4:	4b0b      	ldr	r3, [pc, #44]	@ (800faf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fac8:	e003      	b.n	800fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800faca:	2300      	movs	r3, #0
 800facc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800face:	f000 bc38 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fad2:	f000 bc36 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fad6:	4b08      	ldr	r3, [pc, #32]	@ (800faf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fada:	f000 bc32 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fae2:	f000 bc2e 	b.w	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fae6:	bf00      	nop
 800fae8:	58024400 	.word	0x58024400
 800faec:	03d09000 	.word	0x03d09000
 800faf0:	003d0900 	.word	0x003d0900
 800faf4:	017d7840 	.word	0x017d7840
 800faf8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800fafc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb00:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800fb04:	430b      	orrs	r3, r1
 800fb06:	f040 809c 	bne.w	800fc42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800fb0a:	4b9e      	ldr	r3, [pc, #632]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb0e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800fb12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fb1a:	d054      	beq.n	800fbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800fb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fb22:	f200 808b 	bhi.w	800fc3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800fb2c:	f000 8083 	beq.w	800fc36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800fb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800fb36:	f200 8081 	bhi.w	800fc3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fb40:	d02f      	beq.n	800fba2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800fb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fb48:	d878      	bhi.n	800fc3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d004      	beq.n	800fb5a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800fb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fb56:	d012      	beq.n	800fb7e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800fb58:	e070      	b.n	800fc3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fb5a:	4b8a      	ldr	r3, [pc, #552]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fb66:	d107      	bne.n	800fb78 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f000 feaf 	bl	80108d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb76:	e3e4      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb7c:	e3e1      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fb7e:	4b81      	ldr	r3, [pc, #516]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fb8a:	d107      	bne.n	800fb9c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb8c:	f107 0318 	add.w	r3, r7, #24
 800fb90:	4618      	mov	r0, r3
 800fb92:	f000 fbf5 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb9a:	e3d2      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fba0:	e3cf      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fba2:	4b78      	ldr	r3, [pc, #480]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fbaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fbae:	d107      	bne.n	800fbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbb0:	f107 030c 	add.w	r3, r7, #12
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f000 fd37 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbbe:	e3c0      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbc4:	e3bd      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fbc6:	4b6f      	ldr	r3, [pc, #444]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fbc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fbca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fbce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fbd0:	4b6c      	ldr	r3, [pc, #432]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	f003 0304 	and.w	r3, r3, #4
 800fbd8:	2b04      	cmp	r3, #4
 800fbda:	d10c      	bne.n	800fbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800fbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d109      	bne.n	800fbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fbe2:	4b68      	ldr	r3, [pc, #416]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	08db      	lsrs	r3, r3, #3
 800fbe8:	f003 0303 	and.w	r3, r3, #3
 800fbec:	4a66      	ldr	r2, [pc, #408]	@ (800fd88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800fbee:	fa22 f303 	lsr.w	r3, r2, r3
 800fbf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fbf4:	e01e      	b.n	800fc34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fbf6:	4b63      	ldr	r3, [pc, #396]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fc02:	d106      	bne.n	800fc12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800fc04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc0a:	d102      	bne.n	800fc12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fc0c:	4b5f      	ldr	r3, [pc, #380]	@ (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800fc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc10:	e010      	b.n	800fc34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fc12:	4b5c      	ldr	r3, [pc, #368]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fc1e:	d106      	bne.n	800fc2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800fc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc26:	d102      	bne.n	800fc2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fc28:	4b59      	ldr	r3, [pc, #356]	@ (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800fc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc2c:	e002      	b.n	800fc34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fc32:	e386      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fc34:	e385      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fc36:	4b57      	ldr	r3, [pc, #348]	@ (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800fc38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc3a:	e382      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc40:	e37f      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800fc42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc46:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800fc4a:	430b      	orrs	r3, r1
 800fc4c:	f040 80a7 	bne.w	800fd9e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800fc50:	4b4c      	ldr	r3, [pc, #304]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fc52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc54:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800fc58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc60:	d055      	beq.n	800fd0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800fc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc68:	f200 8096 	bhi.w	800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800fc72:	f000 8084 	beq.w	800fd7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800fc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800fc7c:	f200 808c 	bhi.w	800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc86:	d030      	beq.n	800fcea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800fc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc8e:	f200 8083 	bhi.w	800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d004      	beq.n	800fca2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800fc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc9e:	d012      	beq.n	800fcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800fca0:	e07a      	b.n	800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fca2:	4b38      	ldr	r3, [pc, #224]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fcaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fcae:	d107      	bne.n	800fcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fcb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f000 fe0b 	bl	80108d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fcba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcbe:	e340      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcc4:	e33d      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fcc6:	4b2f      	ldr	r3, [pc, #188]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fcce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fcd2:	d107      	bne.n	800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcd4:	f107 0318 	add.w	r3, r7, #24
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f000 fb51 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fcde:	69bb      	ldr	r3, [r7, #24]
 800fce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fce2:	e32e      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fce4:	2300      	movs	r3, #0
 800fce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fce8:	e32b      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fcea:	4b26      	ldr	r3, [pc, #152]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fcf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcf6:	d107      	bne.n	800fd08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcf8:	f107 030c 	add.w	r3, r7, #12
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f000 fc93 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd06:	e31c      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd0c:	e319      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fd0e:	4b1d      	ldr	r3, [pc, #116]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fd16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fd18:	4b1a      	ldr	r3, [pc, #104]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f003 0304 	and.w	r3, r3, #4
 800fd20:	2b04      	cmp	r3, #4
 800fd22:	d10c      	bne.n	800fd3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800fd24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d109      	bne.n	800fd3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd2a:	4b16      	ldr	r3, [pc, #88]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	08db      	lsrs	r3, r3, #3
 800fd30:	f003 0303 	and.w	r3, r3, #3
 800fd34:	4a14      	ldr	r2, [pc, #80]	@ (800fd88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800fd36:	fa22 f303 	lsr.w	r3, r2, r3
 800fd3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd3c:	e01e      	b.n	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fd3e:	4b11      	ldr	r3, [pc, #68]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd4a:	d106      	bne.n	800fd5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800fd4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd52:	d102      	bne.n	800fd5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fd54:	4b0d      	ldr	r3, [pc, #52]	@ (800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800fd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd58:	e010      	b.n	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fd5a:	4b0a      	ldr	r3, [pc, #40]	@ (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fd66:	d106      	bne.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800fd68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd6e:	d102      	bne.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fd70:	4b07      	ldr	r3, [pc, #28]	@ (800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800fd72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd74:	e002      	b.n	800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fd76:	2300      	movs	r3, #0
 800fd78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fd7a:	e2e2      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fd7c:	e2e1      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fd7e:	4b05      	ldr	r3, [pc, #20]	@ (800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800fd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd82:	e2de      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fd84:	58024400 	.word	0x58024400
 800fd88:	03d09000 	.word	0x03d09000
 800fd8c:	003d0900 	.word	0x003d0900
 800fd90:	017d7840 	.word	0x017d7840
 800fd94:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd9c:	e2d1      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800fd9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fda2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800fda6:	430b      	orrs	r3, r1
 800fda8:	f040 809c 	bne.w	800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800fdac:	4b93      	ldr	r3, [pc, #588]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fdae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdb0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800fdb4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fdbc:	d054      	beq.n	800fe68 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800fdbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fdc4:	f200 808b 	bhi.w	800fede <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800fdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fdce:	f000 8083 	beq.w	800fed8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fdd8:	f200 8081 	bhi.w	800fede <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800fddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fde2:	d02f      	beq.n	800fe44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800fde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fdea:	d878      	bhi.n	800fede <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800fdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d004      	beq.n	800fdfc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fdf8:	d012      	beq.n	800fe20 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800fdfa:	e070      	b.n	800fede <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fdfc:	4b7f      	ldr	r3, [pc, #508]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fe04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fe08:	d107      	bne.n	800fe1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fe0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f000 fd5e 	bl	80108d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fe14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe18:	e293      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe1e:	e290      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fe20:	4b76      	ldr	r3, [pc, #472]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fe28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fe2c:	d107      	bne.n	800fe3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe2e:	f107 0318 	add.w	r3, r7, #24
 800fe32:	4618      	mov	r0, r3
 800fe34:	f000 faa4 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fe38:	69bb      	ldr	r3, [r7, #24]
 800fe3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe3c:	e281      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe42:	e27e      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fe44:	4b6d      	ldr	r3, [pc, #436]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fe4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fe50:	d107      	bne.n	800fe62 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe52:	f107 030c 	add.w	r3, r7, #12
 800fe56:	4618      	mov	r0, r3
 800fe58:	f000 fbe6 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe60:	e26f      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe66:	e26c      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fe68:	4b64      	ldr	r3, [pc, #400]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fe70:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fe72:	4b62      	ldr	r3, [pc, #392]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f003 0304 	and.w	r3, r3, #4
 800fe7a:	2b04      	cmp	r3, #4
 800fe7c:	d10c      	bne.n	800fe98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800fe7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d109      	bne.n	800fe98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe84:	4b5d      	ldr	r3, [pc, #372]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	08db      	lsrs	r3, r3, #3
 800fe8a:	f003 0303 	and.w	r3, r3, #3
 800fe8e:	4a5c      	ldr	r2, [pc, #368]	@ (8010000 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800fe90:	fa22 f303 	lsr.w	r3, r2, r3
 800fe94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe96:	e01e      	b.n	800fed6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fe98:	4b58      	ldr	r3, [pc, #352]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fea4:	d106      	bne.n	800feb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800fea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800feac:	d102      	bne.n	800feb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800feae:	4b55      	ldr	r3, [pc, #340]	@ (8010004 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800feb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800feb2:	e010      	b.n	800fed6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800feb4:	4b51      	ldr	r3, [pc, #324]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800febc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fec0:	d106      	bne.n	800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800fec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fec8:	d102      	bne.n	800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800feca:	4b4f      	ldr	r3, [pc, #316]	@ (8010008 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800fecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fece:	e002      	b.n	800fed6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fed0:	2300      	movs	r3, #0
 800fed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fed4:	e235      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fed6:	e234      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fed8:	4b4c      	ldr	r3, [pc, #304]	@ (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800feda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fedc:	e231      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fede:	2300      	movs	r3, #0
 800fee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fee2:	e22e      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800fee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fee8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800feec:	430b      	orrs	r3, r1
 800feee:	f040 808f 	bne.w	8010010 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800fef2:	4b42      	ldr	r3, [pc, #264]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fef6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800fefa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800fefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fefe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ff02:	d06b      	beq.n	800ffdc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ff04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ff0a:	d874      	bhi.n	800fff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ff0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ff12:	d056      	beq.n	800ffc2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ff14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ff1a:	d86c      	bhi.n	800fff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ff1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ff22:	d03b      	beq.n	800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ff24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ff2a:	d864      	bhi.n	800fff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ff2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ff32:	d021      	beq.n	800ff78 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ff34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ff3a:	d85c      	bhi.n	800fff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ff3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d004      	beq.n	800ff4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ff42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff48:	d004      	beq.n	800ff54 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ff4a:	e054      	b.n	800fff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ff4c:	f7fe fa4c 	bl	800e3e8 <HAL_RCC_GetPCLK1Freq>
 800ff50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff52:	e1f6      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ff54:	4b29      	ldr	r3, [pc, #164]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ff60:	d107      	bne.n	800ff72 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff62:	f107 0318 	add.w	r3, r7, #24
 800ff66:	4618      	mov	r0, r3
 800ff68:	f000 fa0a 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff70:	e1e7      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff72:	2300      	movs	r3, #0
 800ff74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff76:	e1e4      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff78:	4b20      	ldr	r3, [pc, #128]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ff80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff84:	d107      	bne.n	800ff96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff86:	f107 030c 	add.w	r3, r7, #12
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f000 fb4c 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff94:	e1d5      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff9a:	e1d2      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ff9c:	4b17      	ldr	r3, [pc, #92]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f003 0304 	and.w	r3, r3, #4
 800ffa4:	2b04      	cmp	r3, #4
 800ffa6:	d109      	bne.n	800ffbc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ffa8:	4b14      	ldr	r3, [pc, #80]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	08db      	lsrs	r3, r3, #3
 800ffae:	f003 0303 	and.w	r3, r3, #3
 800ffb2:	4a13      	ldr	r2, [pc, #76]	@ (8010000 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ffb4:	fa22 f303 	lsr.w	r3, r2, r3
 800ffb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffba:	e1c2      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffc0:	e1bf      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ffc2:	4b0e      	ldr	r3, [pc, #56]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ffca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ffce:	d102      	bne.n	800ffd6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ffd0:	4b0c      	ldr	r3, [pc, #48]	@ (8010004 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ffd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffd4:	e1b5      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffda:	e1b2      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ffdc:	4b07      	ldr	r3, [pc, #28]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ffe8:	d102      	bne.n	800fff0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ffea:	4b07      	ldr	r3, [pc, #28]	@ (8010008 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ffec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffee:	e1a8      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fff4:	e1a5      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fff6:	2300      	movs	r3, #0
 800fff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fffa:	e1a2      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fffc:	58024400 	.word	0x58024400
 8010000:	03d09000 	.word	0x03d09000
 8010004:	003d0900 	.word	0x003d0900
 8010008:	017d7840 	.word	0x017d7840
 801000c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010014:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8010018:	430b      	orrs	r3, r1
 801001a:	d173      	bne.n	8010104 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801001c:	4b9c      	ldr	r3, [pc, #624]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801001e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010020:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010024:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801002c:	d02f      	beq.n	801008e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801002e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010034:	d863      	bhi.n	80100fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010038:	2b00      	cmp	r3, #0
 801003a:	d004      	beq.n	8010046 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 801003c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801003e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010042:	d012      	beq.n	801006a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010044:	e05b      	b.n	80100fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010046:	4b92      	ldr	r3, [pc, #584]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801004e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010052:	d107      	bne.n	8010064 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010054:	f107 0318 	add.w	r3, r7, #24
 8010058:	4618      	mov	r0, r3
 801005a:	f000 f991 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010062:	e16e      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010064:	2300      	movs	r3, #0
 8010066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010068:	e16b      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801006a:	4b89      	ldr	r3, [pc, #548]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010076:	d107      	bne.n	8010088 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010078:	f107 030c 	add.w	r3, r7, #12
 801007c:	4618      	mov	r0, r3
 801007e:	f000 fad3 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010086:	e15c      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010088:	2300      	movs	r3, #0
 801008a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801008c:	e159      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801008e:	4b80      	ldr	r3, [pc, #512]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010092:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010096:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010098:	4b7d      	ldr	r3, [pc, #500]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f003 0304 	and.w	r3, r3, #4
 80100a0:	2b04      	cmp	r3, #4
 80100a2:	d10c      	bne.n	80100be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80100a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d109      	bne.n	80100be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80100aa:	4b79      	ldr	r3, [pc, #484]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	08db      	lsrs	r3, r3, #3
 80100b0:	f003 0303 	and.w	r3, r3, #3
 80100b4:	4a77      	ldr	r2, [pc, #476]	@ (8010294 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80100b6:	fa22 f303 	lsr.w	r3, r2, r3
 80100ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100bc:	e01e      	b.n	80100fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80100be:	4b74      	ldr	r3, [pc, #464]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80100ca:	d106      	bne.n	80100da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80100cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80100d2:	d102      	bne.n	80100da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80100d4:	4b70      	ldr	r3, [pc, #448]	@ (8010298 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80100d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100d8:	e010      	b.n	80100fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80100da:	4b6d      	ldr	r3, [pc, #436]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80100e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80100e6:	d106      	bne.n	80100f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80100e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80100ee:	d102      	bne.n	80100f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80100f0:	4b6a      	ldr	r3, [pc, #424]	@ (801029c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80100f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100f4:	e002      	b.n	80100fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80100f6:	2300      	movs	r3, #0
 80100f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80100fa:	e122      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80100fc:	e121      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80100fe:	2300      	movs	r3, #0
 8010100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010102:	e11e      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010108:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801010c:	430b      	orrs	r3, r1
 801010e:	d133      	bne.n	8010178 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010110:	4b5f      	ldr	r3, [pc, #380]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010118:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801011a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801011c:	2b00      	cmp	r3, #0
 801011e:	d004      	beq.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010126:	d012      	beq.n	801014e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010128:	e023      	b.n	8010172 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801012a:	4b59      	ldr	r3, [pc, #356]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010136:	d107      	bne.n	8010148 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801013c:	4618      	mov	r0, r3
 801013e:	f000 fbc7 	bl	80108d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010146:	e0fc      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010148:	2300      	movs	r3, #0
 801014a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801014c:	e0f9      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801014e:	4b50      	ldr	r3, [pc, #320]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801015a:	d107      	bne.n	801016c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801015c:	f107 0318 	add.w	r3, r7, #24
 8010160:	4618      	mov	r0, r3
 8010162:	f000 f90d 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010166:	6a3b      	ldr	r3, [r7, #32]
 8010168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801016a:	e0ea      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801016c:	2300      	movs	r3, #0
 801016e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010170:	e0e7      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010172:	2300      	movs	r3, #0
 8010174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010176:	e0e4      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010178:	e9d7 2300 	ldrd	r2, r3, [r7]
 801017c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8010180:	430b      	orrs	r3, r1
 8010182:	f040 808d 	bne.w	80102a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010186:	4b42      	ldr	r3, [pc, #264]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801018a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801018e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010196:	d06b      	beq.n	8010270 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801019a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801019e:	d874      	bhi.n	801028a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80101a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101a6:	d056      	beq.n	8010256 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80101a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101ae:	d86c      	bhi.n	801028a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80101b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80101b6:	d03b      	beq.n	8010230 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80101b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80101be:	d864      	bhi.n	801028a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80101c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80101c6:	d021      	beq.n	801020c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80101c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80101ce:	d85c      	bhi.n	801028a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80101d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d004      	beq.n	80101e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80101d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80101dc:	d004      	beq.n	80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80101de:	e054      	b.n	801028a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80101e0:	f000 f8b8 	bl	8010354 <HAL_RCCEx_GetD3PCLK1Freq>
 80101e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80101e6:	e0ac      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80101e8:	4b29      	ldr	r3, [pc, #164]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80101f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80101f4:	d107      	bne.n	8010206 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101f6:	f107 0318 	add.w	r3, r7, #24
 80101fa:	4618      	mov	r0, r3
 80101fc:	f000 f8c0 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010204:	e09d      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010206:	2300      	movs	r3, #0
 8010208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801020a:	e09a      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801020c:	4b20      	ldr	r3, [pc, #128]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010218:	d107      	bne.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801021a:	f107 030c 	add.w	r3, r7, #12
 801021e:	4618      	mov	r0, r3
 8010220:	f000 fa02 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010228:	e08b      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801022a:	2300      	movs	r3, #0
 801022c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801022e:	e088      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010230:	4b17      	ldr	r3, [pc, #92]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f003 0304 	and.w	r3, r3, #4
 8010238:	2b04      	cmp	r3, #4
 801023a:	d109      	bne.n	8010250 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801023c:	4b14      	ldr	r3, [pc, #80]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	08db      	lsrs	r3, r3, #3
 8010242:	f003 0303 	and.w	r3, r3, #3
 8010246:	4a13      	ldr	r2, [pc, #76]	@ (8010294 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010248:	fa22 f303 	lsr.w	r3, r2, r3
 801024c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801024e:	e078      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010250:	2300      	movs	r3, #0
 8010252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010254:	e075      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010256:	4b0e      	ldr	r3, [pc, #56]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801025e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010262:	d102      	bne.n	801026a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010264:	4b0c      	ldr	r3, [pc, #48]	@ (8010298 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010268:	e06b      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801026a:	2300      	movs	r3, #0
 801026c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801026e:	e068      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010270:	4b07      	ldr	r3, [pc, #28]	@ (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010278:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801027c:	d102      	bne.n	8010284 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801027e:	4b07      	ldr	r3, [pc, #28]	@ (801029c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010282:	e05e      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010284:	2300      	movs	r3, #0
 8010286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010288:	e05b      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801028a:	2300      	movs	r3, #0
 801028c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801028e:	e058      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010290:	58024400 	.word	0x58024400
 8010294:	03d09000 	.word	0x03d09000
 8010298:	003d0900 	.word	0x003d0900
 801029c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80102a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102a4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80102a8:	430b      	orrs	r3, r1
 80102aa:	d148      	bne.n	801033e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80102ac:	4b27      	ldr	r3, [pc, #156]	@ (801034c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80102ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80102b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80102b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80102bc:	d02a      	beq.n	8010314 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80102be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80102c4:	d838      	bhi.n	8010338 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80102c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d004      	beq.n	80102d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80102cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80102d2:	d00d      	beq.n	80102f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80102d4:	e030      	b.n	8010338 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80102d6:	4b1d      	ldr	r3, [pc, #116]	@ (801034c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80102de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80102e2:	d102      	bne.n	80102ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80102e4:	4b1a      	ldr	r3, [pc, #104]	@ (8010350 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80102e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102e8:	e02b      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102ee:	e028      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80102f0:	4b16      	ldr	r3, [pc, #88]	@ (801034c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80102fc:	d107      	bne.n	801030e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010302:	4618      	mov	r0, r3
 8010304:	f000 fae4 	bl	80108d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801030a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801030c:	e019      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010312:	e016      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010314:	4b0d      	ldr	r3, [pc, #52]	@ (801034c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801031c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010320:	d107      	bne.n	8010332 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010322:	f107 0318 	add.w	r3, r7, #24
 8010326:	4618      	mov	r0, r3
 8010328:	f000 f82a 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010330:	e007      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010336:	e004      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010338:	2300      	movs	r3, #0
 801033a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801033c:	e001      	b.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801033e:	2300      	movs	r3, #0
 8010340:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8010342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010344:	4618      	mov	r0, r3
 8010346:	3740      	adds	r7, #64	@ 0x40
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	58024400 	.word	0x58024400
 8010350:	017d7840 	.word	0x017d7840

08010354 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010358:	f7fe f816 	bl	800e388 <HAL_RCC_GetHCLKFreq>
 801035c:	4602      	mov	r2, r0
 801035e:	4b06      	ldr	r3, [pc, #24]	@ (8010378 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010360:	6a1b      	ldr	r3, [r3, #32]
 8010362:	091b      	lsrs	r3, r3, #4
 8010364:	f003 0307 	and.w	r3, r3, #7
 8010368:	4904      	ldr	r1, [pc, #16]	@ (801037c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801036a:	5ccb      	ldrb	r3, [r1, r3]
 801036c:	f003 031f 	and.w	r3, r3, #31
 8010370:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010374:	4618      	mov	r0, r3
 8010376:	bd80      	pop	{r7, pc}
 8010378:	58024400 	.word	0x58024400
 801037c:	08018be0 	.word	0x08018be0

08010380 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010380:	b480      	push	{r7}
 8010382:	b089      	sub	sp, #36	@ 0x24
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010388:	4ba1      	ldr	r3, [pc, #644]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801038a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801038c:	f003 0303 	and.w	r3, r3, #3
 8010390:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010392:	4b9f      	ldr	r3, [pc, #636]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010396:	0b1b      	lsrs	r3, r3, #12
 8010398:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801039c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801039e:	4b9c      	ldr	r3, [pc, #624]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80103a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103a2:	091b      	lsrs	r3, r3, #4
 80103a4:	f003 0301 	and.w	r3, r3, #1
 80103a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80103aa:	4b99      	ldr	r3, [pc, #612]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80103ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ae:	08db      	lsrs	r3, r3, #3
 80103b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103b4:	693a      	ldr	r2, [r7, #16]
 80103b6:	fb02 f303 	mul.w	r3, r2, r3
 80103ba:	ee07 3a90 	vmov	s15, r3
 80103be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f000 8111 	beq.w	80105f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	2b02      	cmp	r3, #2
 80103d2:	f000 8083 	beq.w	80104dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	2b02      	cmp	r3, #2
 80103da:	f200 80a1 	bhi.w	8010520 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d003      	beq.n	80103ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80103e4:	69bb      	ldr	r3, [r7, #24]
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d056      	beq.n	8010498 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80103ea:	e099      	b.n	8010520 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103ec:	4b88      	ldr	r3, [pc, #544]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f003 0320 	and.w	r3, r3, #32
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d02d      	beq.n	8010454 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103f8:	4b85      	ldr	r3, [pc, #532]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	08db      	lsrs	r3, r3, #3
 80103fe:	f003 0303 	and.w	r3, r3, #3
 8010402:	4a84      	ldr	r2, [pc, #528]	@ (8010614 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010404:	fa22 f303 	lsr.w	r3, r2, r3
 8010408:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	ee07 3a90 	vmov	s15, r3
 8010410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	ee07 3a90 	vmov	s15, r3
 801041a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801041e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010422:	4b7b      	ldr	r3, [pc, #492]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801042a:	ee07 3a90 	vmov	s15, r3
 801042e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010432:	ed97 6a03 	vldr	s12, [r7, #12]
 8010436:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801043a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801043e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801044a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801044e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010452:	e087      	b.n	8010564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	ee07 3a90 	vmov	s15, r3
 801045a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801045e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801061c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010466:	4b6a      	ldr	r3, [pc, #424]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801046a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801046e:	ee07 3a90 	vmov	s15, r3
 8010472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010476:	ed97 6a03 	vldr	s12, [r7, #12]
 801047a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801047e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801048a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801048e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010496:	e065      	b.n	8010564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	ee07 3a90 	vmov	s15, r3
 801049e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010620 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80104a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104aa:	4b59      	ldr	r3, [pc, #356]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80104ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104b2:	ee07 3a90 	vmov	s15, r3
 80104b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80104be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80104c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80104ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104da:	e043      	b.n	8010564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	ee07 3a90 	vmov	s15, r3
 80104e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80104ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104ee:	4b48      	ldr	r3, [pc, #288]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80104f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104f6:	ee07 3a90 	vmov	s15, r3
 80104fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8010502:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801050a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801050e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010516:	ee67 7a27 	vmul.f32	s15, s14, s15
 801051a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801051e:	e021      	b.n	8010564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	ee07 3a90 	vmov	s15, r3
 8010526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801052a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010620 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801052e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010532:	4b37      	ldr	r3, [pc, #220]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801053a:	ee07 3a90 	vmov	s15, r3
 801053e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010542:	ed97 6a03 	vldr	s12, [r7, #12]
 8010546:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801054a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801054e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801055a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801055e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010562:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010564:	4b2a      	ldr	r3, [pc, #168]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010568:	0a5b      	lsrs	r3, r3, #9
 801056a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801056e:	ee07 3a90 	vmov	s15, r3
 8010572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801057a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801057e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801058a:	ee17 2a90 	vmov	r2, s15
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010592:	4b1f      	ldr	r3, [pc, #124]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010596:	0c1b      	lsrs	r3, r3, #16
 8010598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801059c:	ee07 3a90 	vmov	s15, r3
 80105a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80105a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80105b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105b8:	ee17 2a90 	vmov	r2, s15
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80105c0:	4b13      	ldr	r3, [pc, #76]	@ (8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80105c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105c4:	0e1b      	lsrs	r3, r3, #24
 80105c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80105ca:	ee07 3a90 	vmov	s15, r3
 80105ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80105d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105da:	edd7 6a07 	vldr	s13, [r7, #28]
 80105de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105e6:	ee17 2a90 	vmov	r2, s15
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80105ee:	e008      	b.n	8010602 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2200      	movs	r2, #0
 80105f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2200      	movs	r2, #0
 80105fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2200      	movs	r2, #0
 8010600:	609a      	str	r2, [r3, #8]
}
 8010602:	bf00      	nop
 8010604:	3724      	adds	r7, #36	@ 0x24
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop
 8010610:	58024400 	.word	0x58024400
 8010614:	03d09000 	.word	0x03d09000
 8010618:	46000000 	.word	0x46000000
 801061c:	4c742400 	.word	0x4c742400
 8010620:	4a742400 	.word	0x4a742400
 8010624:	4bbebc20 	.word	0x4bbebc20

08010628 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010628:	b480      	push	{r7}
 801062a:	b089      	sub	sp, #36	@ 0x24
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010630:	4ba1      	ldr	r3, [pc, #644]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010634:	f003 0303 	and.w	r3, r3, #3
 8010638:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801063a:	4b9f      	ldr	r3, [pc, #636]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801063c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801063e:	0d1b      	lsrs	r3, r3, #20
 8010640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010644:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010646:	4b9c      	ldr	r3, [pc, #624]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801064a:	0a1b      	lsrs	r3, r3, #8
 801064c:	f003 0301 	and.w	r3, r3, #1
 8010650:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010652:	4b99      	ldr	r3, [pc, #612]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010656:	08db      	lsrs	r3, r3, #3
 8010658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801065c:	693a      	ldr	r2, [r7, #16]
 801065e:	fb02 f303 	mul.w	r3, r2, r3
 8010662:	ee07 3a90 	vmov	s15, r3
 8010666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801066a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	2b00      	cmp	r3, #0
 8010672:	f000 8111 	beq.w	8010898 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010676:	69bb      	ldr	r3, [r7, #24]
 8010678:	2b02      	cmp	r3, #2
 801067a:	f000 8083 	beq.w	8010784 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	2b02      	cmp	r3, #2
 8010682:	f200 80a1 	bhi.w	80107c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010686:	69bb      	ldr	r3, [r7, #24]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d003      	beq.n	8010694 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	2b01      	cmp	r3, #1
 8010690:	d056      	beq.n	8010740 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010692:	e099      	b.n	80107c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010694:	4b88      	ldr	r3, [pc, #544]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f003 0320 	and.w	r3, r3, #32
 801069c:	2b00      	cmp	r3, #0
 801069e:	d02d      	beq.n	80106fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80106a0:	4b85      	ldr	r3, [pc, #532]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	08db      	lsrs	r3, r3, #3
 80106a6:	f003 0303 	and.w	r3, r3, #3
 80106aa:	4a84      	ldr	r2, [pc, #528]	@ (80108bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80106ac:	fa22 f303 	lsr.w	r3, r2, r3
 80106b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	ee07 3a90 	vmov	s15, r3
 80106b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	ee07 3a90 	vmov	s15, r3
 80106c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80106c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80106ca:	4b7b      	ldr	r3, [pc, #492]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80106cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106d2:	ee07 3a90 	vmov	s15, r3
 80106d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80106da:	ed97 6a03 	vldr	s12, [r7, #12]
 80106de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80108c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80106e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80106e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80106ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80106ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80106f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80106fa:	e087      	b.n	801080c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	ee07 3a90 	vmov	s15, r3
 8010702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010706:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80108c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801070a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801070e:	4b6a      	ldr	r3, [pc, #424]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010716:	ee07 3a90 	vmov	s15, r3
 801071a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801071e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010722:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80108c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801072a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801072e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010736:	ee67 7a27 	vmul.f32	s15, s14, s15
 801073a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801073e:	e065      	b.n	801080c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	ee07 3a90 	vmov	s15, r3
 8010746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801074a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80108c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801074e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010752:	4b59      	ldr	r3, [pc, #356]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801075a:	ee07 3a90 	vmov	s15, r3
 801075e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010762:	ed97 6a03 	vldr	s12, [r7, #12]
 8010766:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80108c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801076a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801076e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801077a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801077e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010782:	e043      	b.n	801080c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	ee07 3a90 	vmov	s15, r3
 801078a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801078e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80108cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010796:	4b48      	ldr	r3, [pc, #288]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801079a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801079e:	ee07 3a90 	vmov	s15, r3
 80107a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80107a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80107aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80108c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80107ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80107b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80107b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80107ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80107be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80107c6:	e021      	b.n	801080c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	ee07 3a90 	vmov	s15, r3
 80107ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80108c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80107d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80107da:	4b37      	ldr	r3, [pc, #220]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80107dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107e2:	ee07 3a90 	vmov	s15, r3
 80107e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80107ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80107ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80108c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80107f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80107f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80107fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80107fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801080a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801080c:	4b2a      	ldr	r3, [pc, #168]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801080e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010810:	0a5b      	lsrs	r3, r3, #9
 8010812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010816:	ee07 3a90 	vmov	s15, r3
 801081a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801081e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010826:	edd7 6a07 	vldr	s13, [r7, #28]
 801082a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801082e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010832:	ee17 2a90 	vmov	r2, s15
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801083a:	4b1f      	ldr	r3, [pc, #124]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801083e:	0c1b      	lsrs	r3, r3, #16
 8010840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010844:	ee07 3a90 	vmov	s15, r3
 8010848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801084c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010854:	edd7 6a07 	vldr	s13, [r7, #28]
 8010858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801085c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010860:	ee17 2a90 	vmov	r2, s15
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010868:	4b13      	ldr	r3, [pc, #76]	@ (80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801086c:	0e1b      	lsrs	r3, r3, #24
 801086e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010872:	ee07 3a90 	vmov	s15, r3
 8010876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801087a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801087e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010882:	edd7 6a07 	vldr	s13, [r7, #28]
 8010886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801088a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801088e:	ee17 2a90 	vmov	r2, s15
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010896:	e008      	b.n	80108aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2200      	movs	r2, #0
 80108a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2200      	movs	r2, #0
 80108a8:	609a      	str	r2, [r3, #8]
}
 80108aa:	bf00      	nop
 80108ac:	3724      	adds	r7, #36	@ 0x24
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr
 80108b6:	bf00      	nop
 80108b8:	58024400 	.word	0x58024400
 80108bc:	03d09000 	.word	0x03d09000
 80108c0:	46000000 	.word	0x46000000
 80108c4:	4c742400 	.word	0x4c742400
 80108c8:	4a742400 	.word	0x4a742400
 80108cc:	4bbebc20 	.word	0x4bbebc20

080108d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b089      	sub	sp, #36	@ 0x24
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80108d8:	4ba0      	ldr	r3, [pc, #640]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108dc:	f003 0303 	and.w	r3, r3, #3
 80108e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80108e2:	4b9e      	ldr	r3, [pc, #632]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108e6:	091b      	lsrs	r3, r3, #4
 80108e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80108ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80108ee:	4b9b      	ldr	r3, [pc, #620]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108f2:	f003 0301 	and.w	r3, r3, #1
 80108f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80108f8:	4b98      	ldr	r3, [pc, #608]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108fc:	08db      	lsrs	r3, r3, #3
 80108fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010902:	693a      	ldr	r2, [r7, #16]
 8010904:	fb02 f303 	mul.w	r3, r2, r3
 8010908:	ee07 3a90 	vmov	s15, r3
 801090c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010910:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	2b00      	cmp	r3, #0
 8010918:	f000 8111 	beq.w	8010b3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	2b02      	cmp	r3, #2
 8010920:	f000 8083 	beq.w	8010a2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	2b02      	cmp	r3, #2
 8010928:	f200 80a1 	bhi.w	8010a6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801092c:	69bb      	ldr	r3, [r7, #24]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d003      	beq.n	801093a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	2b01      	cmp	r3, #1
 8010936:	d056      	beq.n	80109e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010938:	e099      	b.n	8010a6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801093a:	4b88      	ldr	r3, [pc, #544]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f003 0320 	and.w	r3, r3, #32
 8010942:	2b00      	cmp	r3, #0
 8010944:	d02d      	beq.n	80109a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010946:	4b85      	ldr	r3, [pc, #532]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	08db      	lsrs	r3, r3, #3
 801094c:	f003 0303 	and.w	r3, r3, #3
 8010950:	4a83      	ldr	r2, [pc, #524]	@ (8010b60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010952:	fa22 f303 	lsr.w	r3, r2, r3
 8010956:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	ee07 3a90 	vmov	s15, r3
 801095e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	ee07 3a90 	vmov	s15, r3
 8010968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801096c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010970:	4b7a      	ldr	r3, [pc, #488]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010978:	ee07 3a90 	vmov	s15, r3
 801097c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010980:	ed97 6a03 	vldr	s12, [r7, #12]
 8010984:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010b64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801098c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010990:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010998:	ee67 7a27 	vmul.f32	s15, s14, s15
 801099c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80109a0:	e087      	b.n	8010ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	ee07 3a90 	vmov	s15, r3
 80109a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109ac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010b68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80109b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109b4:	4b69      	ldr	r3, [pc, #420]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80109b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109bc:	ee07 3a90 	vmov	s15, r3
 80109c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80109c8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010b64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80109cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80109d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109e4:	e065      	b.n	8010ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	ee07 3a90 	vmov	s15, r3
 80109ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109f0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8010b6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80109f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109f8:	4b58      	ldr	r3, [pc, #352]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80109fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a00:	ee07 3a90 	vmov	s15, r3
 8010a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a08:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a0c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010b64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a28:	e043      	b.n	8010ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	ee07 3a90 	vmov	s15, r3
 8010a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a34:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8010b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a3c:	4b47      	ldr	r3, [pc, #284]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a44:	ee07 3a90 	vmov	s15, r3
 8010a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a50:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010b64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a6c:	e021      	b.n	8010ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	ee07 3a90 	vmov	s15, r3
 8010a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a78:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010b68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a80:	4b36      	ldr	r3, [pc, #216]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a88:	ee07 3a90 	vmov	s15, r3
 8010a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a90:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a94:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010b64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010aa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010aac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ab0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ab6:	0a5b      	lsrs	r3, r3, #9
 8010ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010abc:	ee07 3a90 	vmov	s15, r3
 8010ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ad8:	ee17 2a90 	vmov	r2, s15
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ae4:	0c1b      	lsrs	r3, r3, #16
 8010ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010aea:	ee07 3a90 	vmov	s15, r3
 8010aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010af2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8010afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b06:	ee17 2a90 	vmov	r2, s15
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010b0e:	4b13      	ldr	r3, [pc, #76]	@ (8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b12:	0e1b      	lsrs	r3, r3, #24
 8010b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b18:	ee07 3a90 	vmov	s15, r3
 8010b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010b24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8010b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b34:	ee17 2a90 	vmov	r2, s15
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010b3c:	e008      	b.n	8010b50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2200      	movs	r2, #0
 8010b42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2200      	movs	r2, #0
 8010b48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	609a      	str	r2, [r3, #8]
}
 8010b50:	bf00      	nop
 8010b52:	3724      	adds	r7, #36	@ 0x24
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr
 8010b5c:	58024400 	.word	0x58024400
 8010b60:	03d09000 	.word	0x03d09000
 8010b64:	46000000 	.word	0x46000000
 8010b68:	4c742400 	.word	0x4c742400
 8010b6c:	4a742400 	.word	0x4a742400
 8010b70:	4bbebc20 	.word	0x4bbebc20

08010b74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010b82:	4b53      	ldr	r3, [pc, #332]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b86:	f003 0303 	and.w	r3, r3, #3
 8010b8a:	2b03      	cmp	r3, #3
 8010b8c:	d101      	bne.n	8010b92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e099      	b.n	8010cc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010b92:	4b4f      	ldr	r3, [pc, #316]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4a4e      	ldr	r2, [pc, #312]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010b98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010b9e:	f7f1 fdff 	bl	80027a0 <HAL_GetTick>
 8010ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010ba4:	e008      	b.n	8010bb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010ba6:	f7f1 fdfb 	bl	80027a0 <HAL_GetTick>
 8010baa:	4602      	mov	r2, r0
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	1ad3      	subs	r3, r2, r3
 8010bb0:	2b02      	cmp	r3, #2
 8010bb2:	d901      	bls.n	8010bb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010bb4:	2303      	movs	r3, #3
 8010bb6:	e086      	b.n	8010cc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010bb8:	4b45      	ldr	r3, [pc, #276]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d1f0      	bne.n	8010ba6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010bc4:	4b42      	ldr	r3, [pc, #264]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bc8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	031b      	lsls	r3, r3, #12
 8010bd2:	493f      	ldr	r1, [pc, #252]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	3b01      	subs	r3, #1
 8010bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	689b      	ldr	r3, [r3, #8]
 8010be6:	3b01      	subs	r3, #1
 8010be8:	025b      	lsls	r3, r3, #9
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	431a      	orrs	r2, r3
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	041b      	lsls	r3, r3, #16
 8010bf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010bfa:	431a      	orrs	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	691b      	ldr	r3, [r3, #16]
 8010c00:	3b01      	subs	r3, #1
 8010c02:	061b      	lsls	r3, r3, #24
 8010c04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010c08:	4931      	ldr	r1, [pc, #196]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010c0e:	4b30      	ldr	r3, [pc, #192]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	695b      	ldr	r3, [r3, #20]
 8010c1a:	492d      	ldr	r1, [pc, #180]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010c20:	4b2b      	ldr	r3, [pc, #172]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c24:	f023 0220 	bic.w	r2, r3, #32
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	699b      	ldr	r3, [r3, #24]
 8010c2c:	4928      	ldr	r1, [pc, #160]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010c32:	4b27      	ldr	r3, [pc, #156]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c36:	4a26      	ldr	r2, [pc, #152]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c38:	f023 0310 	bic.w	r3, r3, #16
 8010c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010c3e:	4b24      	ldr	r3, [pc, #144]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010c42:	4b24      	ldr	r3, [pc, #144]	@ (8010cd4 <RCCEx_PLL2_Config+0x160>)
 8010c44:	4013      	ands	r3, r2
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	69d2      	ldr	r2, [r2, #28]
 8010c4a:	00d2      	lsls	r2, r2, #3
 8010c4c:	4920      	ldr	r1, [pc, #128]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c4e:	4313      	orrs	r3, r2
 8010c50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010c52:	4b1f      	ldr	r3, [pc, #124]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c56:	4a1e      	ldr	r2, [pc, #120]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c58:	f043 0310 	orr.w	r3, r3, #16
 8010c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d106      	bne.n	8010c72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010c64:	4b1a      	ldr	r3, [pc, #104]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c68:	4a19      	ldr	r2, [pc, #100]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010c70:	e00f      	b.n	8010c92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	d106      	bne.n	8010c86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010c78:	4b15      	ldr	r3, [pc, #84]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c7c:	4a14      	ldr	r2, [pc, #80]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010c82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010c84:	e005      	b.n	8010c92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010c86:	4b12      	ldr	r3, [pc, #72]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c8a:	4a11      	ldr	r2, [pc, #68]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010c90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010c92:	4b0f      	ldr	r3, [pc, #60]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4a0e      	ldr	r2, [pc, #56]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010c98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c9e:	f7f1 fd7f 	bl	80027a0 <HAL_GetTick>
 8010ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010ca4:	e008      	b.n	8010cb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010ca6:	f7f1 fd7b 	bl	80027a0 <HAL_GetTick>
 8010caa:	4602      	mov	r2, r0
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	1ad3      	subs	r3, r2, r3
 8010cb0:	2b02      	cmp	r3, #2
 8010cb2:	d901      	bls.n	8010cb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010cb4:	2303      	movs	r3, #3
 8010cb6:	e006      	b.n	8010cc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010cb8:	4b05      	ldr	r3, [pc, #20]	@ (8010cd0 <RCCEx_PLL2_Config+0x15c>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d0f0      	beq.n	8010ca6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3710      	adds	r7, #16
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	58024400 	.word	0x58024400
 8010cd4:	ffff0007 	.word	0xffff0007

08010cd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b084      	sub	sp, #16
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010ce6:	4b53      	ldr	r3, [pc, #332]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cea:	f003 0303 	and.w	r3, r3, #3
 8010cee:	2b03      	cmp	r3, #3
 8010cf0:	d101      	bne.n	8010cf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e099      	b.n	8010e2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4a4e      	ldr	r2, [pc, #312]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010d02:	f7f1 fd4d 	bl	80027a0 <HAL_GetTick>
 8010d06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010d08:	e008      	b.n	8010d1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010d0a:	f7f1 fd49 	bl	80027a0 <HAL_GetTick>
 8010d0e:	4602      	mov	r2, r0
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	1ad3      	subs	r3, r2, r3
 8010d14:	2b02      	cmp	r3, #2
 8010d16:	d901      	bls.n	8010d1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010d18:	2303      	movs	r3, #3
 8010d1a:	e086      	b.n	8010e2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010d1c:	4b45      	ldr	r3, [pc, #276]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d1f0      	bne.n	8010d0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010d28:	4b42      	ldr	r3, [pc, #264]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	051b      	lsls	r3, r3, #20
 8010d36:	493f      	ldr	r1, [pc, #252]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010d38:	4313      	orrs	r3, r2
 8010d3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	3b01      	subs	r3, #1
 8010d42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	689b      	ldr	r3, [r3, #8]
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	025b      	lsls	r3, r3, #9
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	431a      	orrs	r2, r3
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	68db      	ldr	r3, [r3, #12]
 8010d56:	3b01      	subs	r3, #1
 8010d58:	041b      	lsls	r3, r3, #16
 8010d5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010d5e:	431a      	orrs	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	691b      	ldr	r3, [r3, #16]
 8010d64:	3b01      	subs	r3, #1
 8010d66:	061b      	lsls	r3, r3, #24
 8010d68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010d6c:	4931      	ldr	r1, [pc, #196]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010d72:	4b30      	ldr	r3, [pc, #192]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	695b      	ldr	r3, [r3, #20]
 8010d7e:	492d      	ldr	r1, [pc, #180]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010d80:	4313      	orrs	r3, r2
 8010d82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010d84:	4b2b      	ldr	r3, [pc, #172]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	699b      	ldr	r3, [r3, #24]
 8010d90:	4928      	ldr	r1, [pc, #160]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010d92:	4313      	orrs	r3, r2
 8010d94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010d96:	4b27      	ldr	r3, [pc, #156]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d9a:	4a26      	ldr	r2, [pc, #152]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010da0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010da2:	4b24      	ldr	r3, [pc, #144]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010da6:	4b24      	ldr	r3, [pc, #144]	@ (8010e38 <RCCEx_PLL3_Config+0x160>)
 8010da8:	4013      	ands	r3, r2
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	69d2      	ldr	r2, [r2, #28]
 8010dae:	00d2      	lsls	r2, r2, #3
 8010db0:	4920      	ldr	r1, [pc, #128]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010db2:	4313      	orrs	r3, r2
 8010db4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010db6:	4b1f      	ldr	r3, [pc, #124]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dba:	4a1e      	ldr	r2, [pc, #120]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d106      	bne.n	8010dd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dcc:	4a19      	ldr	r2, [pc, #100]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010dce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010dd4:	e00f      	b.n	8010df6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	2b01      	cmp	r3, #1
 8010dda:	d106      	bne.n	8010dea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010ddc:	4b15      	ldr	r3, [pc, #84]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010de0:	4a14      	ldr	r2, [pc, #80]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010de2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010de6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010de8:	e005      	b.n	8010df6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010dea:	4b12      	ldr	r3, [pc, #72]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dee:	4a11      	ldr	r2, [pc, #68]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010df0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010df4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010df6:	4b0f      	ldr	r3, [pc, #60]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010e02:	f7f1 fccd 	bl	80027a0 <HAL_GetTick>
 8010e06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010e08:	e008      	b.n	8010e1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010e0a:	f7f1 fcc9 	bl	80027a0 <HAL_GetTick>
 8010e0e:	4602      	mov	r2, r0
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	1ad3      	subs	r3, r2, r3
 8010e14:	2b02      	cmp	r3, #2
 8010e16:	d901      	bls.n	8010e1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010e18:	2303      	movs	r3, #3
 8010e1a:	e006      	b.n	8010e2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010e1c:	4b05      	ldr	r3, [pc, #20]	@ (8010e34 <RCCEx_PLL3_Config+0x15c>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d0f0      	beq.n	8010e0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3710      	adds	r7, #16
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	bf00      	nop
 8010e34:	58024400 	.word	0x58024400
 8010e38:	ffff0007 	.word	0xffff0007

08010e3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b084      	sub	sp, #16
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d101      	bne.n	8010e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	e10f      	b.n	801106e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2200      	movs	r2, #0
 8010e52:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4a87      	ldr	r2, [pc, #540]	@ (8011078 <HAL_SPI_Init+0x23c>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d00f      	beq.n	8010e7e <HAL_SPI_Init+0x42>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a86      	ldr	r2, [pc, #536]	@ (801107c <HAL_SPI_Init+0x240>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d00a      	beq.n	8010e7e <HAL_SPI_Init+0x42>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4a84      	ldr	r2, [pc, #528]	@ (8011080 <HAL_SPI_Init+0x244>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d005      	beq.n	8010e7e <HAL_SPI_Init+0x42>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	2b0f      	cmp	r3, #15
 8010e78:	d901      	bls.n	8010e7e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e0f7      	b.n	801106e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f000 ff6c 	bl	8011d5c <SPI_GetPacketSize>
 8010e84:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	4a7b      	ldr	r2, [pc, #492]	@ (8011078 <HAL_SPI_Init+0x23c>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d00c      	beq.n	8010eaa <HAL_SPI_Init+0x6e>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4a79      	ldr	r2, [pc, #484]	@ (801107c <HAL_SPI_Init+0x240>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d007      	beq.n	8010eaa <HAL_SPI_Init+0x6e>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4a78      	ldr	r2, [pc, #480]	@ (8011080 <HAL_SPI_Init+0x244>)
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	d002      	beq.n	8010eaa <HAL_SPI_Init+0x6e>
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2b08      	cmp	r3, #8
 8010ea8:	d811      	bhi.n	8010ece <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010eae:	4a72      	ldr	r2, [pc, #456]	@ (8011078 <HAL_SPI_Init+0x23c>)
 8010eb0:	4293      	cmp	r3, r2
 8010eb2:	d009      	beq.n	8010ec8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	4a70      	ldr	r2, [pc, #448]	@ (801107c <HAL_SPI_Init+0x240>)
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	d004      	beq.n	8010ec8 <HAL_SPI_Init+0x8c>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4a6f      	ldr	r2, [pc, #444]	@ (8011080 <HAL_SPI_Init+0x244>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d104      	bne.n	8010ed2 <HAL_SPI_Init+0x96>
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2b10      	cmp	r3, #16
 8010ecc:	d901      	bls.n	8010ed2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e0cd      	b.n	801106e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d106      	bne.n	8010eec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f7f0 fe1a 	bl	8001b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2202      	movs	r2, #2
 8010ef0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f022 0201 	bic.w	r2, r2, #1
 8010f02:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	689b      	ldr	r3, [r3, #8]
 8010f0a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8010f0e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	699b      	ldr	r3, [r3, #24]
 8010f14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010f18:	d119      	bne.n	8010f4e <HAL_SPI_Init+0x112>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010f22:	d103      	bne.n	8010f2c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d008      	beq.n	8010f3e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10c      	bne.n	8010f4e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f3c:	d107      	bne.n	8010f4e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	681a      	ldr	r2, [r3, #0]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010f4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d00f      	beq.n	8010f7a <HAL_SPI_Init+0x13e>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	2b06      	cmp	r3, #6
 8010f60:	d90b      	bls.n	8010f7a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	430a      	orrs	r2, r1
 8010f76:	601a      	str	r2, [r3, #0]
 8010f78:	e007      	b.n	8010f8a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	681a      	ldr	r2, [r3, #0]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010f88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	69da      	ldr	r2, [r3, #28]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f92:	431a      	orrs	r2, r3
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	431a      	orrs	r2, r3
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f9c:	ea42 0103 	orr.w	r1, r2, r3
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	68da      	ldr	r2, [r3, #12]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	430a      	orrs	r2, r1
 8010faa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fb4:	431a      	orrs	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fba:	431a      	orrs	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	699b      	ldr	r3, [r3, #24]
 8010fc0:	431a      	orrs	r2, r3
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	691b      	ldr	r3, [r3, #16]
 8010fc6:	431a      	orrs	r2, r3
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	695b      	ldr	r3, [r3, #20]
 8010fcc:	431a      	orrs	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6a1b      	ldr	r3, [r3, #32]
 8010fd2:	431a      	orrs	r2, r3
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	431a      	orrs	r2, r3
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010fde:	431a      	orrs	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	689b      	ldr	r3, [r3, #8]
 8010fe4:	431a      	orrs	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010fea:	ea42 0103 	orr.w	r1, r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	430a      	orrs	r2, r1
 8010ff8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d113      	bne.n	801102a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	689b      	ldr	r3, [r3, #8]
 8011008:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011014:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	689b      	ldr	r3, [r3, #8]
 801101c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011028:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f022 0201 	bic.w	r2, r2, #1
 8011038:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011042:	2b00      	cmp	r3, #0
 8011044:	d00a      	beq.n	801105c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	430a      	orrs	r2, r1
 801105a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2200      	movs	r2, #0
 8011060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2201      	movs	r2, #1
 8011068:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801106c:	2300      	movs	r3, #0
}
 801106e:	4618      	mov	r0, r3
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	40013000 	.word	0x40013000
 801107c:	40003800 	.word	0x40003800
 8011080:	40003c00 	.word	0x40003c00

08011084 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b088      	sub	sp, #32
 8011088:	af02      	add	r7, sp, #8
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	603b      	str	r3, [r7, #0]
 8011090:	4613      	mov	r3, r2
 8011092:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	3320      	adds	r3, #32
 801109a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801109c:	f7f1 fb80 	bl	80027a0 <HAL_GetTick>
 80110a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d001      	beq.n	80110b2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80110ae:	2302      	movs	r3, #2
 80110b0:	e1d1      	b.n	8011456 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d002      	beq.n	80110be <HAL_SPI_Transmit+0x3a>
 80110b8:	88fb      	ldrh	r3, [r7, #6]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d101      	bne.n	80110c2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80110be:	2301      	movs	r3, #1
 80110c0:	e1c9      	b.n	8011456 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d101      	bne.n	80110d0 <HAL_SPI_Transmit+0x4c>
 80110cc:	2302      	movs	r3, #2
 80110ce:	e1c2      	b.n	8011456 <HAL_SPI_Transmit+0x3d2>
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2201      	movs	r2, #1
 80110d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2203      	movs	r2, #3
 80110dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	2200      	movs	r2, #0
 80110e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	68ba      	ldr	r2, [r7, #8]
 80110ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	88fa      	ldrh	r2, [r7, #6]
 80110f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	88fa      	ldrh	r2, [r7, #6]
 80110fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2200      	movs	r2, #0
 8011102:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2200      	movs	r2, #0
 8011108:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	2200      	movs	r2, #0
 8011110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2200      	movs	r2, #0
 8011118:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2200      	movs	r2, #0
 801111e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	689b      	ldr	r3, [r3, #8]
 8011124:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011128:	d108      	bne.n	801113c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011138:	601a      	str	r2, [r3, #0]
 801113a:	e009      	b.n	8011150 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801114e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	685a      	ldr	r2, [r3, #4]
 8011156:	4b96      	ldr	r3, [pc, #600]	@ (80113b0 <HAL_SPI_Transmit+0x32c>)
 8011158:	4013      	ands	r3, r2
 801115a:	88f9      	ldrh	r1, [r7, #6]
 801115c:	68fa      	ldr	r2, [r7, #12]
 801115e:	6812      	ldr	r2, [r2, #0]
 8011160:	430b      	orrs	r3, r1
 8011162:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f042 0201 	orr.w	r2, r2, #1
 8011172:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801117c:	d107      	bne.n	801118e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801118c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	2b0f      	cmp	r3, #15
 8011194:	d947      	bls.n	8011226 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011196:	e03f      	b.n	8011218 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	695b      	ldr	r3, [r3, #20]
 801119e:	f003 0302 	and.w	r3, r3, #2
 80111a2:	2b02      	cmp	r3, #2
 80111a4:	d114      	bne.n	80111d0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	6812      	ldr	r2, [r2, #0]
 80111b0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111b6:	1d1a      	adds	r2, r3, #4
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	3b01      	subs	r3, #1
 80111c6:	b29a      	uxth	r2, r3
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80111ce:	e023      	b.n	8011218 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80111d0:	f7f1 fae6 	bl	80027a0 <HAL_GetTick>
 80111d4:	4602      	mov	r2, r0
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	683a      	ldr	r2, [r7, #0]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d803      	bhi.n	80111e8 <HAL_SPI_Transmit+0x164>
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111e6:	d102      	bne.n	80111ee <HAL_SPI_Transmit+0x16a>
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d114      	bne.n	8011218 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f000 fce6 	bl	8011bc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80111fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2201      	movs	r2, #1
 8011208:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2200      	movs	r2, #0
 8011210:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011214:	2303      	movs	r3, #3
 8011216:	e11e      	b.n	8011456 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801121e:	b29b      	uxth	r3, r3
 8011220:	2b00      	cmp	r3, #0
 8011222:	d1b9      	bne.n	8011198 <HAL_SPI_Transmit+0x114>
 8011224:	e0f1      	b.n	801140a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	2b07      	cmp	r3, #7
 801122c:	f240 80e6 	bls.w	80113fc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011230:	e05d      	b.n	80112ee <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	695b      	ldr	r3, [r3, #20]
 8011238:	f003 0302 	and.w	r3, r3, #2
 801123c:	2b02      	cmp	r3, #2
 801123e:	d132      	bne.n	80112a6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011246:	b29b      	uxth	r3, r3
 8011248:	2b01      	cmp	r3, #1
 801124a:	d918      	bls.n	801127e <HAL_SPI_Transmit+0x1fa>
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011250:	2b00      	cmp	r3, #0
 8011252:	d014      	beq.n	801127e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	6812      	ldr	r2, [r2, #0]
 801125e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011264:	1d1a      	adds	r2, r3, #4
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011270:	b29b      	uxth	r3, r3
 8011272:	3b02      	subs	r3, #2
 8011274:	b29a      	uxth	r2, r3
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801127c:	e037      	b.n	80112ee <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011282:	881a      	ldrh	r2, [r3, #0]
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801128c:	1c9a      	adds	r2, r3, #2
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011298:	b29b      	uxth	r3, r3
 801129a:	3b01      	subs	r3, #1
 801129c:	b29a      	uxth	r2, r3
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80112a4:	e023      	b.n	80112ee <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80112a6:	f7f1 fa7b 	bl	80027a0 <HAL_GetTick>
 80112aa:	4602      	mov	r2, r0
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	1ad3      	subs	r3, r2, r3
 80112b0:	683a      	ldr	r2, [r7, #0]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d803      	bhi.n	80112be <HAL_SPI_Transmit+0x23a>
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112bc:	d102      	bne.n	80112c4 <HAL_SPI_Transmit+0x240>
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d114      	bne.n	80112ee <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	f000 fc7b 	bl	8011bc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80112d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2201      	movs	r2, #1
 80112de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80112ea:	2303      	movs	r3, #3
 80112ec:	e0b3      	b.n	8011456 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80112f4:	b29b      	uxth	r3, r3
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d19b      	bne.n	8011232 <HAL_SPI_Transmit+0x1ae>
 80112fa:	e086      	b.n	801140a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	695b      	ldr	r3, [r3, #20]
 8011302:	f003 0302 	and.w	r3, r3, #2
 8011306:	2b02      	cmp	r3, #2
 8011308:	d154      	bne.n	80113b4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011310:	b29b      	uxth	r3, r3
 8011312:	2b03      	cmp	r3, #3
 8011314:	d918      	bls.n	8011348 <HAL_SPI_Transmit+0x2c4>
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801131a:	2b40      	cmp	r3, #64	@ 0x40
 801131c:	d914      	bls.n	8011348 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	6812      	ldr	r2, [r2, #0]
 8011328:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801132e:	1d1a      	adds	r2, r3, #4
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801133a:	b29b      	uxth	r3, r3
 801133c:	3b04      	subs	r3, #4
 801133e:	b29a      	uxth	r2, r3
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011346:	e059      	b.n	80113fc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801134e:	b29b      	uxth	r3, r3
 8011350:	2b01      	cmp	r3, #1
 8011352:	d917      	bls.n	8011384 <HAL_SPI_Transmit+0x300>
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011358:	2b00      	cmp	r3, #0
 801135a:	d013      	beq.n	8011384 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011360:	881a      	ldrh	r2, [r3, #0]
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801136a:	1c9a      	adds	r2, r3, #2
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011376:	b29b      	uxth	r3, r3
 8011378:	3b02      	subs	r3, #2
 801137a:	b29a      	uxth	r2, r3
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011382:	e03b      	b.n	80113fc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	3320      	adds	r3, #32
 801138e:	7812      	ldrb	r2, [r2, #0]
 8011390:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011396:	1c5a      	adds	r2, r3, #1
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	3b01      	subs	r3, #1
 80113a6:	b29a      	uxth	r2, r3
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80113ae:	e025      	b.n	80113fc <HAL_SPI_Transmit+0x378>
 80113b0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80113b4:	f7f1 f9f4 	bl	80027a0 <HAL_GetTick>
 80113b8:	4602      	mov	r2, r0
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	1ad3      	subs	r3, r2, r3
 80113be:	683a      	ldr	r2, [r7, #0]
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d803      	bhi.n	80113cc <HAL_SPI_Transmit+0x348>
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ca:	d102      	bne.n	80113d2 <HAL_SPI_Transmit+0x34e>
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d114      	bne.n	80113fc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80113d2:	68f8      	ldr	r0, [r7, #12]
 80113d4:	f000 fbf4 	bl	8011bc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80113de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2201      	movs	r2, #1
 80113ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2200      	movs	r2, #0
 80113f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80113f8:	2303      	movs	r3, #3
 80113fa:	e02c      	b.n	8011456 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011402:	b29b      	uxth	r3, r3
 8011404:	2b00      	cmp	r3, #0
 8011406:	f47f af79 	bne.w	80112fc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	9300      	str	r3, [sp, #0]
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	2200      	movs	r2, #0
 8011412:	2108      	movs	r1, #8
 8011414:	68f8      	ldr	r0, [r7, #12]
 8011416:	f000 fc73 	bl	8011d00 <SPI_WaitOnFlagUntilTimeout>
 801141a:	4603      	mov	r3, r0
 801141c:	2b00      	cmp	r3, #0
 801141e:	d007      	beq.n	8011430 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011426:	f043 0220 	orr.w	r2, r3, #32
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f000 fbc5 	bl	8011bc0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	2201      	movs	r2, #1
 801143a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2200      	movs	r2, #0
 8011442:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801144c:	2b00      	cmp	r3, #0
 801144e:	d001      	beq.n	8011454 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8011450:	2301      	movs	r3, #1
 8011452:	e000      	b.n	8011456 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8011454:	2300      	movs	r3, #0
  }
}
 8011456:	4618      	mov	r0, r3
 8011458:	3718      	adds	r7, #24
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop

08011460 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b084      	sub	sp, #16
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	4613      	mov	r3, r2
 801146c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011474:	b2db      	uxtb	r3, r3
 8011476:	2b01      	cmp	r3, #1
 8011478:	d001      	beq.n	801147e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 801147a:	2302      	movs	r3, #2
 801147c:	e126      	b.n	80116cc <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d002      	beq.n	801148a <HAL_SPI_Transmit_DMA+0x2a>
 8011484:	88fb      	ldrh	r3, [r7, #6]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d101      	bne.n	801148e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 801148a:	2301      	movs	r3, #1
 801148c:	e11e      	b.n	80116cc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011494:	2b01      	cmp	r3, #1
 8011496:	d101      	bne.n	801149c <HAL_SPI_Transmit_DMA+0x3c>
 8011498:	2302      	movs	r3, #2
 801149a:	e117      	b.n	80116cc <HAL_SPI_Transmit_DMA+0x26c>
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2201      	movs	r2, #1
 80114a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2203      	movs	r2, #3
 80114a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2200      	movs	r2, #0
 80114b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	68ba      	ldr	r2, [r7, #8]
 80114b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	88fa      	ldrh	r2, [r7, #6]
 80114be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	88fa      	ldrh	r2, [r7, #6]
 80114c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	2200      	movs	r2, #0
 80114ce:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	2200      	movs	r2, #0
 80114d4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2200      	movs	r2, #0
 80114da:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2200      	movs	r2, #0
 80114e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	2200      	movs	r2, #0
 80114e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80114f4:	d108      	bne.n	8011508 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011504:	601a      	str	r2, [r3, #0]
 8011506:	e009      	b.n	801151c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801151a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	68db      	ldr	r3, [r3, #12]
 8011520:	2b0f      	cmp	r3, #15
 8011522:	d905      	bls.n	8011530 <HAL_SPI_Transmit_DMA+0xd0>
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011528:	699b      	ldr	r3, [r3, #24]
 801152a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801152e:	d10f      	bne.n	8011550 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011534:	2b07      	cmp	r3, #7
 8011536:	d911      	bls.n	801155c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801153c:	699b      	ldr	r3, [r3, #24]
 801153e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011542:	d00b      	beq.n	801155c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011548:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801154a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801154e:	d005      	beq.n	801155c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	2200      	movs	r2, #0
 8011554:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8011558:	2301      	movs	r3, #1
 801155a:	e0b7      	b.n	80116cc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	2b07      	cmp	r3, #7
 8011562:	d820      	bhi.n	80115a6 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011568:	699b      	ldr	r3, [r3, #24]
 801156a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801156e:	d109      	bne.n	8011584 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011576:	b29b      	uxth	r3, r3
 8011578:	3301      	adds	r3, #1
 801157a:	105b      	asrs	r3, r3, #1
 801157c:	b29a      	uxth	r2, r3
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011588:	699b      	ldr	r3, [r3, #24]
 801158a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801158e:	d11e      	bne.n	80115ce <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011596:	b29b      	uxth	r3, r3
 8011598:	3303      	adds	r3, #3
 801159a:	109b      	asrs	r3, r3, #2
 801159c:	b29a      	uxth	r2, r3
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80115a4:	e013      	b.n	80115ce <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	2b0f      	cmp	r3, #15
 80115ac:	d80f      	bhi.n	80115ce <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80115b2:	699b      	ldr	r3, [r3, #24]
 80115b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80115b8:	d109      	bne.n	80115ce <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	3301      	adds	r3, #1
 80115c4:	105b      	asrs	r3, r3, #1
 80115c6:	b29a      	uxth	r2, r3
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80115d2:	4a40      	ldr	r2, [pc, #256]	@ (80116d4 <HAL_SPI_Transmit_DMA+0x274>)
 80115d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80115da:	4a3f      	ldr	r2, [pc, #252]	@ (80116d8 <HAL_SPI_Transmit_DMA+0x278>)
 80115dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80115e2:	4a3e      	ldr	r2, [pc, #248]	@ (80116dc <HAL_SPI_Transmit_DMA+0x27c>)
 80115e4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80115ea:	2200      	movs	r2, #0
 80115ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	689a      	ldr	r2, [r3, #8]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80115fc:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011606:	4619      	mov	r1, r3
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	3320      	adds	r3, #32
 801160e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011616:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8011618:	f7f3 f894 	bl	8004744 <HAL_DMA_Start_IT>
 801161c:	4603      	mov	r3, r0
 801161e:	2b00      	cmp	r3, #0
 8011620:	d011      	beq.n	8011646 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011628:	f043 0210 	orr.w	r2, r3, #16
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	2201      	movs	r2, #1
 8011636:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2200      	movs	r2, #0
 801163e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8011642:	2301      	movs	r3, #1
 8011644:	e042      	b.n	80116cc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801164a:	69db      	ldr	r3, [r3, #28]
 801164c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011650:	d108      	bne.n	8011664 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	6859      	ldr	r1, [r3, #4]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	4b20      	ldr	r3, [pc, #128]	@ (80116e0 <HAL_SPI_Transmit_DMA+0x280>)
 801165e:	400b      	ands	r3, r1
 8011660:	6053      	str	r3, [r2, #4]
 8011662:	e009      	b.n	8011678 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	685a      	ldr	r2, [r3, #4]
 801166a:	4b1d      	ldr	r3, [pc, #116]	@ (80116e0 <HAL_SPI_Transmit_DMA+0x280>)
 801166c:	4013      	ands	r3, r2
 801166e:	88f9      	ldrh	r1, [r7, #6]
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	6812      	ldr	r2, [r2, #0]
 8011674:	430b      	orrs	r3, r1
 8011676:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	689a      	ldr	r2, [r3, #8]
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011686:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	691a      	ldr	r2, [r3, #16]
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8011696:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f042 0201 	orr.w	r2, r2, #1
 80116a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80116b0:	d107      	bne.n	80116c2 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80116c0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	2200      	movs	r2, #0
 80116c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80116ca:	2300      	movs	r3, #0
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3710      	adds	r7, #16
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	08011b2b 	.word	0x08011b2b
 80116d8:	08011ae5 	.word	0x08011ae5
 80116dc:	08011b47 	.word	0x08011b47
 80116e0:	ffff0000 	.word	0xffff0000

080116e4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b08a      	sub	sp, #40	@ 0x28
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	691b      	ldr	r3, [r3, #16]
 80116f2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	695b      	ldr	r3, [r3, #20]
 80116fa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80116fc:	6a3a      	ldr	r2, [r7, #32]
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	4013      	ands	r3, r2
 8011702:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	689b      	ldr	r3, [r3, #8]
 801170a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801170c:	2300      	movs	r3, #0
 801170e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011716:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	3330      	adds	r3, #48	@ 0x30
 801171e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011720:	69fb      	ldr	r3, [r7, #28]
 8011722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011726:	2b00      	cmp	r3, #0
 8011728:	d010      	beq.n	801174c <HAL_SPI_IRQHandler+0x68>
 801172a:	6a3b      	ldr	r3, [r7, #32]
 801172c:	f003 0308 	and.w	r3, r3, #8
 8011730:	2b00      	cmp	r3, #0
 8011732:	d00b      	beq.n	801174c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	699a      	ldr	r2, [r3, #24]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011742:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f000 f9c3 	bl	8011ad0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801174a:	e192      	b.n	8011a72 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801174c:	69bb      	ldr	r3, [r7, #24]
 801174e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011752:	2b00      	cmp	r3, #0
 8011754:	d113      	bne.n	801177e <HAL_SPI_IRQHandler+0x9a>
 8011756:	69bb      	ldr	r3, [r7, #24]
 8011758:	f003 0320 	and.w	r3, r3, #32
 801175c:	2b00      	cmp	r3, #0
 801175e:	d10e      	bne.n	801177e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011766:	2b00      	cmp	r3, #0
 8011768:	d009      	beq.n	801177e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	4798      	blx	r3
    handled = 1UL;
 801177a:	2301      	movs	r3, #1
 801177c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011784:	2b00      	cmp	r3, #0
 8011786:	d10f      	bne.n	80117a8 <HAL_SPI_IRQHandler+0xc4>
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	f003 0301 	and.w	r3, r3, #1
 801178e:	2b00      	cmp	r3, #0
 8011790:	d00a      	beq.n	80117a8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011792:	69bb      	ldr	r3, [r7, #24]
 8011794:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011798:	2b00      	cmp	r3, #0
 801179a:	d105      	bne.n	80117a8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	4798      	blx	r3
    handled = 1UL;
 80117a4:	2301      	movs	r3, #1
 80117a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80117a8:	69bb      	ldr	r3, [r7, #24]
 80117aa:	f003 0320 	and.w	r3, r3, #32
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d10f      	bne.n	80117d2 <HAL_SPI_IRQHandler+0xee>
 80117b2:	69bb      	ldr	r3, [r7, #24]
 80117b4:	f003 0302 	and.w	r3, r3, #2
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00a      	beq.n	80117d2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80117bc:	69bb      	ldr	r3, [r7, #24]
 80117be:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d105      	bne.n	80117d2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	4798      	blx	r3
    handled = 1UL;
 80117ce:	2301      	movs	r3, #1
 80117d0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80117d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	f040 8147 	bne.w	8011a68 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	f003 0308 	and.w	r3, r3, #8
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f000 808b 	beq.w	80118fc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	699a      	ldr	r2, [r3, #24]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f042 0208 	orr.w	r2, r2, #8
 80117f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	699a      	ldr	r2, [r3, #24]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f042 0210 	orr.w	r2, r2, #16
 8011804:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	699a      	ldr	r2, [r3, #24]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011814:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	691a      	ldr	r2, [r3, #16]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f022 0208 	bic.w	r2, r2, #8
 8011824:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	689b      	ldr	r3, [r3, #8]
 801182c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011830:	2b00      	cmp	r3, #0
 8011832:	d13d      	bne.n	80118b0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011834:	e036      	b.n	80118a4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	68db      	ldr	r3, [r3, #12]
 801183a:	2b0f      	cmp	r3, #15
 801183c:	d90b      	bls.n	8011856 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011846:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011848:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801184e:	1d1a      	adds	r2, r3, #4
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	665a      	str	r2, [r3, #100]	@ 0x64
 8011854:	e01d      	b.n	8011892 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	2b07      	cmp	r3, #7
 801185c:	d90b      	bls.n	8011876 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011862:	68fa      	ldr	r2, [r7, #12]
 8011864:	8812      	ldrh	r2, [r2, #0]
 8011866:	b292      	uxth	r2, r2
 8011868:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801186e:	1c9a      	adds	r2, r3, #2
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	665a      	str	r2, [r3, #100]	@ 0x64
 8011874:	e00d      	b.n	8011892 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011882:	7812      	ldrb	r2, [r2, #0]
 8011884:	b2d2      	uxtb	r2, r2
 8011886:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801188c:	1c5a      	adds	r2, r3, #1
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011898:	b29b      	uxth	r3, r3
 801189a:	3b01      	subs	r3, #1
 801189c:	b29a      	uxth	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d1c2      	bne.n	8011836 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f000 f985 	bl	8011bc0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2201      	movs	r2, #1
 80118ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d003      	beq.n	80118d0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f000 f8f7 	bl	8011abc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80118ce:	e0d0      	b.n	8011a72 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80118d0:	7cfb      	ldrb	r3, [r7, #19]
 80118d2:	2b05      	cmp	r3, #5
 80118d4:	d103      	bne.n	80118de <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f000 f8dc 	bl	8011a94 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80118dc:	e0c6      	b.n	8011a6c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80118de:	7cfb      	ldrb	r3, [r7, #19]
 80118e0:	2b04      	cmp	r3, #4
 80118e2:	d103      	bne.n	80118ec <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f000 f8cb 	bl	8011a80 <HAL_SPI_RxCpltCallback>
    return;
 80118ea:	e0bf      	b.n	8011a6c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80118ec:	7cfb      	ldrb	r3, [r7, #19]
 80118ee:	2b03      	cmp	r3, #3
 80118f0:	f040 80bc 	bne.w	8011a6c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f7ef fd61 	bl	80013bc <HAL_SPI_TxCpltCallback>
    return;
 80118fa:	e0b7      	b.n	8011a6c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8011902:	2b00      	cmp	r3, #0
 8011904:	f000 80b5 	beq.w	8011a72 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011908:	69bb      	ldr	r3, [r7, #24]
 801190a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00f      	beq.n	8011932 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011918:	f043 0204 	orr.w	r2, r3, #4
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	699a      	ldr	r2, [r3, #24]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011930:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011938:	2b00      	cmp	r3, #0
 801193a:	d00f      	beq.n	801195c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011942:	f043 0201 	orr.w	r2, r3, #1
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	699a      	ldr	r2, [r3, #24]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801195a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801195c:	69bb      	ldr	r3, [r7, #24]
 801195e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011962:	2b00      	cmp	r3, #0
 8011964:	d00f      	beq.n	8011986 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801196c:	f043 0208 	orr.w	r2, r3, #8
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	699a      	ldr	r2, [r3, #24]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011984:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	f003 0320 	and.w	r3, r3, #32
 801198c:	2b00      	cmp	r3, #0
 801198e:	d00f      	beq.n	80119b0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011996:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	699a      	ldr	r2, [r3, #24]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f042 0220 	orr.w	r2, r2, #32
 80119ae:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d05a      	beq.n	8011a70 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	f022 0201 	bic.w	r2, r2, #1
 80119c8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	6919      	ldr	r1, [r3, #16]
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	4b28      	ldr	r3, [pc, #160]	@ (8011a78 <HAL_SPI_IRQHandler+0x394>)
 80119d6:	400b      	ands	r3, r1
 80119d8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80119e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80119e4:	d138      	bne.n	8011a58 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	689a      	ldr	r2, [r3, #8]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80119f4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d013      	beq.n	8011a26 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a02:	4a1e      	ldr	r2, [pc, #120]	@ (8011a7c <HAL_SPI_IRQHandler+0x398>)
 8011a04:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7f3 fc22 	bl	8005254 <HAL_DMA_Abort_IT>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d007      	beq.n	8011a26 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d020      	beq.n	8011a70 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a32:	4a12      	ldr	r2, [pc, #72]	@ (8011a7c <HAL_SPI_IRQHandler+0x398>)
 8011a34:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7f3 fc0a 	bl	8005254 <HAL_DMA_Abort_IT>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d014      	beq.n	8011a70 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011a56:	e00b      	b.n	8011a70 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f000 f82b 	bl	8011abc <HAL_SPI_ErrorCallback>
    return;
 8011a66:	e003      	b.n	8011a70 <HAL_SPI_IRQHandler+0x38c>
    return;
 8011a68:	bf00      	nop
 8011a6a:	e002      	b.n	8011a72 <HAL_SPI_IRQHandler+0x38e>
    return;
 8011a6c:	bf00      	nop
 8011a6e:	e000      	b.n	8011a72 <HAL_SPI_IRQHandler+0x38e>
    return;
 8011a70:	bf00      	nop
  }
}
 8011a72:	3728      	adds	r7, #40	@ 0x28
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	fffffc94 	.word	0xfffffc94
 8011a7c:	08011b8d 	.word	0x08011b8d

08011a80 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8011a88:	bf00      	nop
 8011a8a:	370c      	adds	r7, #12
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a92:	4770      	bx	lr

08011a94 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011a94:	b480      	push	{r7}
 8011a96:	b083      	sub	sp, #12
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011a9c:	bf00      	nop
 8011a9e:	370c      	adds	r7, #12
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8011ab0:	bf00      	nop
 8011ab2:	370c      	adds	r7, #12
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aba:	4770      	bx	lr

08011abc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011ac4:	bf00      	nop
 8011ac6:	370c      	adds	r7, #12
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr

08011ad0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b083      	sub	sp, #12
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8011ad8:	bf00      	nop
 8011ada:	370c      	adds	r7, #12
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr

08011ae4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011af0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	2b07      	cmp	r3, #7
 8011afc:	d011      	beq.n	8011b22 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b02:	69db      	ldr	r3, [r3, #28]
 8011b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b08:	d103      	bne.n	8011b12 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8011b0a:	68f8      	ldr	r0, [r7, #12]
 8011b0c:	f7ef fc56 	bl	80013bc <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8011b10:	e007      	b.n	8011b22 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	691a      	ldr	r2, [r3, #16]
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	f042 0208 	orr.w	r2, r2, #8
 8011b20:	611a      	str	r2, [r3, #16]
}
 8011b22:	bf00      	nop
 8011b24:	3710      	adds	r7, #16
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}

08011b2a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b084      	sub	sp, #16
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b36:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f7ff ffb5 	bl	8011aa8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011b3e:	bf00      	nop
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}

08011b46 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8011b46:	b580      	push	{r7, lr}
 8011b48:	b084      	sub	sp, #16
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b52:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7f4 fcfb 	bl	8006550 <HAL_DMA_GetError>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b02      	cmp	r3, #2
 8011b5e:	d011      	beq.n	8011b84 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8011b60:	68f8      	ldr	r0, [r7, #12]
 8011b62:	f000 f82d 	bl	8011bc0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011b6c:	f043 0210 	orr.w	r2, r3, #16
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2201      	movs	r2, #1
 8011b7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8011b7e:	68f8      	ldr	r0, [r7, #12]
 8011b80:	f7ff ff9c 	bl	8011abc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8011b84:	bf00      	nop
 8011b86:	3710      	adds	r7, #16
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b084      	sub	sp, #16
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2201      	movs	r2, #1
 8011bae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011bb2:	68f8      	ldr	r0, [r7, #12]
 8011bb4:	f7ff ff82 	bl	8011abc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011bb8:	bf00      	nop
 8011bba:	3710      	adds	r7, #16
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b085      	sub	sp, #20
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	695b      	ldr	r3, [r3, #20]
 8011bce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	699a      	ldr	r2, [r3, #24]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f042 0208 	orr.w	r2, r2, #8
 8011bde:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	699a      	ldr	r2, [r3, #24]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f042 0210 	orr.w	r2, r2, #16
 8011bee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f022 0201 	bic.w	r2, r2, #1
 8011bfe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	6919      	ldr	r1, [r3, #16]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8011cfc <SPI_CloseTransfer+0x13c>)
 8011c0c:	400b      	ands	r3, r1
 8011c0e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	689a      	ldr	r2, [r3, #8]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011c1e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011c26:	b2db      	uxtb	r3, r3
 8011c28:	2b04      	cmp	r3, #4
 8011c2a:	d014      	beq.n	8011c56 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	f003 0320 	and.w	r3, r3, #32
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00f      	beq.n	8011c56 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	699a      	ldr	r2, [r3, #24]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f042 0220 	orr.w	r2, r2, #32
 8011c54:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011c5c:	b2db      	uxtb	r3, r3
 8011c5e:	2b03      	cmp	r3, #3
 8011c60:	d014      	beq.n	8011c8c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d00f      	beq.n	8011c8c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c72:	f043 0204 	orr.w	r2, r3, #4
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	699a      	ldr	r2, [r3, #24]
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011c8a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d00f      	beq.n	8011cb6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c9c:	f043 0201 	orr.w	r2, r3, #1
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	699a      	ldr	r2, [r3, #24]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011cb4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00f      	beq.n	8011ce0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011cc6:	f043 0208 	orr.w	r2, r3, #8
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	699a      	ldr	r2, [r3, #24]
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011cde:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2200      	movs	r2, #0
 8011cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8011cf0:	bf00      	nop
 8011cf2:	3714      	adds	r7, #20
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr
 8011cfc:	fffffc90 	.word	0xfffffc90

08011d00 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	60f8      	str	r0, [r7, #12]
 8011d08:	60b9      	str	r1, [r7, #8]
 8011d0a:	603b      	str	r3, [r7, #0]
 8011d0c:	4613      	mov	r3, r2
 8011d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011d10:	e010      	b.n	8011d34 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011d12:	f7f0 fd45 	bl	80027a0 <HAL_GetTick>
 8011d16:	4602      	mov	r2, r0
 8011d18:	69bb      	ldr	r3, [r7, #24]
 8011d1a:	1ad3      	subs	r3, r2, r3
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d803      	bhi.n	8011d2a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d28:	d102      	bne.n	8011d30 <SPI_WaitOnFlagUntilTimeout+0x30>
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d101      	bne.n	8011d34 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011d30:	2303      	movs	r3, #3
 8011d32:	e00f      	b.n	8011d54 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	695a      	ldr	r2, [r3, #20]
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	4013      	ands	r3, r2
 8011d3e:	68ba      	ldr	r2, [r7, #8]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	bf0c      	ite	eq
 8011d44:	2301      	moveq	r3, #1
 8011d46:	2300      	movne	r3, #0
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	79fb      	ldrb	r3, [r7, #7]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d0df      	beq.n	8011d12 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011d52:	2300      	movs	r3, #0
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3710      	adds	r7, #16
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b085      	sub	sp, #20
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d68:	095b      	lsrs	r3, r3, #5
 8011d6a:	3301      	adds	r3, #1
 8011d6c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	68db      	ldr	r3, [r3, #12]
 8011d72:	3301      	adds	r3, #1
 8011d74:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	3307      	adds	r3, #7
 8011d7a:	08db      	lsrs	r3, r3, #3
 8011d7c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	68fa      	ldr	r2, [r7, #12]
 8011d82:	fb02 f303 	mul.w	r3, r2, r3
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3714      	adds	r7, #20
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr

08011d92 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b082      	sub	sp, #8
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d101      	bne.n	8011da4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011da0:	2301      	movs	r3, #1
 8011da2:	e042      	b.n	8011e2a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d106      	bne.n	8011dbc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2200      	movs	r2, #0
 8011db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7ef ff46 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2224      	movs	r2, #36	@ 0x24
 8011dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	681a      	ldr	r2, [r3, #0]
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f022 0201 	bic.w	r2, r2, #1
 8011dd2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d002      	beq.n	8011de2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f001 fa6b 	bl	80132b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 fd00 	bl	80127e8 <UART_SetConfig>
 8011de8:	4603      	mov	r3, r0
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	d101      	bne.n	8011df2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011dee:	2301      	movs	r3, #1
 8011df0:	e01b      	b.n	8011e2a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	685a      	ldr	r2, [r3, #4]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011e00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	689a      	ldr	r2, [r3, #8]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011e10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	681a      	ldr	r2, [r3, #0]
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f042 0201 	orr.w	r2, r2, #1
 8011e20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f001 faea 	bl	80133fc <UART_CheckIdleState>
 8011e28:	4603      	mov	r3, r0
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3708      	adds	r7, #8
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b08a      	sub	sp, #40	@ 0x28
 8011e36:	af02      	add	r7, sp, #8
 8011e38:	60f8      	str	r0, [r7, #12]
 8011e3a:	60b9      	str	r1, [r7, #8]
 8011e3c:	603b      	str	r3, [r7, #0]
 8011e3e:	4613      	mov	r3, r2
 8011e40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e48:	2b20      	cmp	r3, #32
 8011e4a:	d17b      	bne.n	8011f44 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d002      	beq.n	8011e58 <HAL_UART_Transmit+0x26>
 8011e52:	88fb      	ldrh	r3, [r7, #6]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d101      	bne.n	8011e5c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011e58:	2301      	movs	r3, #1
 8011e5a:	e074      	b.n	8011f46 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2221      	movs	r2, #33	@ 0x21
 8011e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011e6c:	f7f0 fc98 	bl	80027a0 <HAL_GetTick>
 8011e70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	88fa      	ldrh	r2, [r7, #6]
 8011e76:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	88fa      	ldrh	r2, [r7, #6]
 8011e7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	689b      	ldr	r3, [r3, #8]
 8011e86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011e8a:	d108      	bne.n	8011e9e <HAL_UART_Transmit+0x6c>
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	691b      	ldr	r3, [r3, #16]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d104      	bne.n	8011e9e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011e94:	2300      	movs	r3, #0
 8011e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	61bb      	str	r3, [r7, #24]
 8011e9c:	e003      	b.n	8011ea6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011ea6:	e030      	b.n	8011f0a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	9300      	str	r3, [sp, #0]
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	2180      	movs	r1, #128	@ 0x80
 8011eb2:	68f8      	ldr	r0, [r7, #12]
 8011eb4:	f001 fb4c 	bl	8013550 <UART_WaitOnFlagUntilTimeout>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d005      	beq.n	8011eca <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	2220      	movs	r2, #32
 8011ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8011ec6:	2303      	movs	r3, #3
 8011ec8:	e03d      	b.n	8011f46 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d10b      	bne.n	8011ee8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011ed0:	69bb      	ldr	r3, [r7, #24]
 8011ed2:	881b      	ldrh	r3, [r3, #0]
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011ede:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011ee0:	69bb      	ldr	r3, [r7, #24]
 8011ee2:	3302      	adds	r3, #2
 8011ee4:	61bb      	str	r3, [r7, #24]
 8011ee6:	e007      	b.n	8011ef8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	781a      	ldrb	r2, [r3, #0]
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	3301      	adds	r3, #1
 8011ef6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	3b01      	subs	r3, #1
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d1c8      	bne.n	8011ea8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	9300      	str	r3, [sp, #0]
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	2140      	movs	r1, #64	@ 0x40
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	f001 fb15 	bl	8013550 <UART_WaitOnFlagUntilTimeout>
 8011f26:	4603      	mov	r3, r0
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d005      	beq.n	8011f38 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	2220      	movs	r2, #32
 8011f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8011f34:	2303      	movs	r3, #3
 8011f36:	e006      	b.n	8011f46 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	2220      	movs	r2, #32
 8011f3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8011f40:	2300      	movs	r3, #0
 8011f42:	e000      	b.n	8011f46 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011f44:	2302      	movs	r3, #2
  }
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3720      	adds	r7, #32
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
	...

08011f50 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b08a      	sub	sp, #40	@ 0x28
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	60f8      	str	r0, [r7, #12]
 8011f58:	60b9      	str	r1, [r7, #8]
 8011f5a:	4613      	mov	r3, r2
 8011f5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011f64:	2b20      	cmp	r3, #32
 8011f66:	d137      	bne.n	8011fd8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d002      	beq.n	8011f74 <HAL_UART_Receive_DMA+0x24>
 8011f6e:	88fb      	ldrh	r3, [r7, #6]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d101      	bne.n	8011f78 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8011f74:	2301      	movs	r3, #1
 8011f76:	e030      	b.n	8011fda <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	4a18      	ldr	r2, [pc, #96]	@ (8011fe4 <HAL_UART_Receive_DMA+0x94>)
 8011f84:	4293      	cmp	r3, r2
 8011f86:	d01f      	beq.n	8011fc8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d018      	beq.n	8011fc8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	e853 3f00 	ldrex	r3, [r3]
 8011fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb4:	623b      	str	r3, [r7, #32]
 8011fb6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fb8:	69f9      	ldr	r1, [r7, #28]
 8011fba:	6a3a      	ldr	r2, [r7, #32]
 8011fbc:	e841 2300 	strex	r3, r2, [r1]
 8011fc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8011fc2:	69bb      	ldr	r3, [r7, #24]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d1e6      	bne.n	8011f96 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011fc8:	88fb      	ldrh	r3, [r7, #6]
 8011fca:	461a      	mov	r2, r3
 8011fcc:	68b9      	ldr	r1, [r7, #8]
 8011fce:	68f8      	ldr	r0, [r7, #12]
 8011fd0:	f001 fb2c 	bl	801362c <UART_Start_Receive_DMA>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	e000      	b.n	8011fda <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011fd8:	2302      	movs	r3, #2
  }
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3728      	adds	r7, #40	@ 0x28
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
 8011fe2:	bf00      	nop
 8011fe4:	58000c00 	.word	0x58000c00

08011fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b0ba      	sub	sp, #232	@ 0xe8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	69db      	ldr	r3, [r3, #28]
 8011ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	689b      	ldr	r3, [r3, #8]
 801200a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801200e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012012:	f640 030f 	movw	r3, #2063	@ 0x80f
 8012016:	4013      	ands	r3, r2
 8012018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801201c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012020:	2b00      	cmp	r3, #0
 8012022:	d11b      	bne.n	801205c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012028:	f003 0320 	and.w	r3, r3, #32
 801202c:	2b00      	cmp	r3, #0
 801202e:	d015      	beq.n	801205c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012034:	f003 0320 	and.w	r3, r3, #32
 8012038:	2b00      	cmp	r3, #0
 801203a:	d105      	bne.n	8012048 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801203c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012044:	2b00      	cmp	r3, #0
 8012046:	d009      	beq.n	801205c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801204c:	2b00      	cmp	r3, #0
 801204e:	f000 8393 	beq.w	8012778 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	4798      	blx	r3
      }
      return;
 801205a:	e38d      	b.n	8012778 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801205c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012060:	2b00      	cmp	r3, #0
 8012062:	f000 8123 	beq.w	80122ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012066:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801206a:	4b8d      	ldr	r3, [pc, #564]	@ (80122a0 <HAL_UART_IRQHandler+0x2b8>)
 801206c:	4013      	ands	r3, r2
 801206e:	2b00      	cmp	r3, #0
 8012070:	d106      	bne.n	8012080 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012072:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8012076:	4b8b      	ldr	r3, [pc, #556]	@ (80122a4 <HAL_UART_IRQHandler+0x2bc>)
 8012078:	4013      	ands	r3, r2
 801207a:	2b00      	cmp	r3, #0
 801207c:	f000 8116 	beq.w	80122ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012084:	f003 0301 	and.w	r3, r3, #1
 8012088:	2b00      	cmp	r3, #0
 801208a:	d011      	beq.n	80120b0 <HAL_UART_IRQHandler+0xc8>
 801208c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012094:	2b00      	cmp	r3, #0
 8012096:	d00b      	beq.n	80120b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	2201      	movs	r2, #1
 801209e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80120a6:	f043 0201 	orr.w	r2, r3, #1
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80120b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80120b4:	f003 0302 	and.w	r3, r3, #2
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d011      	beq.n	80120e0 <HAL_UART_IRQHandler+0xf8>
 80120bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80120c0:	f003 0301 	and.w	r3, r3, #1
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d00b      	beq.n	80120e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2202      	movs	r2, #2
 80120ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80120d6:	f043 0204 	orr.w	r2, r3, #4
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80120e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80120e4:	f003 0304 	and.w	r3, r3, #4
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d011      	beq.n	8012110 <HAL_UART_IRQHandler+0x128>
 80120ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80120f0:	f003 0301 	and.w	r3, r3, #1
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d00b      	beq.n	8012110 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2204      	movs	r2, #4
 80120fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012106:	f043 0202 	orr.w	r2, r3, #2
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012114:	f003 0308 	and.w	r3, r3, #8
 8012118:	2b00      	cmp	r3, #0
 801211a:	d017      	beq.n	801214c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801211c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012120:	f003 0320 	and.w	r3, r3, #32
 8012124:	2b00      	cmp	r3, #0
 8012126:	d105      	bne.n	8012134 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012128:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801212c:	4b5c      	ldr	r3, [pc, #368]	@ (80122a0 <HAL_UART_IRQHandler+0x2b8>)
 801212e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012130:	2b00      	cmp	r3, #0
 8012132:	d00b      	beq.n	801214c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2208      	movs	r2, #8
 801213a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012142:	f043 0208 	orr.w	r2, r3, #8
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801214c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012154:	2b00      	cmp	r3, #0
 8012156:	d012      	beq.n	801217e <HAL_UART_IRQHandler+0x196>
 8012158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801215c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012160:	2b00      	cmp	r3, #0
 8012162:	d00c      	beq.n	801217e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801216c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012174:	f043 0220 	orr.w	r2, r3, #32
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012184:	2b00      	cmp	r3, #0
 8012186:	f000 82f9 	beq.w	801277c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801218a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801218e:	f003 0320 	and.w	r3, r3, #32
 8012192:	2b00      	cmp	r3, #0
 8012194:	d013      	beq.n	80121be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801219a:	f003 0320 	and.w	r3, r3, #32
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d105      	bne.n	80121ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80121a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80121a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d007      	beq.n	80121be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d003      	beq.n	80121be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80121c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	689b      	ldr	r3, [r3, #8]
 80121ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121d2:	2b40      	cmp	r3, #64	@ 0x40
 80121d4:	d005      	beq.n	80121e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80121d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80121da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d054      	beq.n	801228c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f001 fb0a 	bl	80137fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	689b      	ldr	r3, [r3, #8]
 80121ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121f2:	2b40      	cmp	r3, #64	@ 0x40
 80121f4:	d146      	bne.n	8012284 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	3308      	adds	r3, #8
 80121fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012200:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012204:	e853 3f00 	ldrex	r3, [r3]
 8012208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801220c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	3308      	adds	r3, #8
 801221e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012222:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801222a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801222e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012232:	e841 2300 	strex	r3, r2, [r1]
 8012236:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801223a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801223e:	2b00      	cmp	r3, #0
 8012240:	d1d9      	bne.n	80121f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012248:	2b00      	cmp	r3, #0
 801224a:	d017      	beq.n	801227c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012252:	4a15      	ldr	r2, [pc, #84]	@ (80122a8 <HAL_UART_IRQHandler+0x2c0>)
 8012254:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801225c:	4618      	mov	r0, r3
 801225e:	f7f2 fff9 	bl	8005254 <HAL_DMA_Abort_IT>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d019      	beq.n	801229c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801226e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012270:	687a      	ldr	r2, [r7, #4]
 8012272:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8012276:	4610      	mov	r0, r2
 8012278:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801227a:	e00f      	b.n	801229c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 fa9d 	bl	80127bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012282:	e00b      	b.n	801229c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 fa99 	bl	80127bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801228a:	e007      	b.n	801229c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 fa95 	bl	80127bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2200      	movs	r2, #0
 8012296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801229a:	e26f      	b.n	801277c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801229c:	bf00      	nop
    return;
 801229e:	e26d      	b.n	801277c <HAL_UART_IRQHandler+0x794>
 80122a0:	10000001 	.word	0x10000001
 80122a4:	04000120 	.word	0x04000120
 80122a8:	08013aaf 	.word	0x08013aaf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122b0:	2b01      	cmp	r3, #1
 80122b2:	f040 8203 	bne.w	80126bc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80122b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122ba:	f003 0310 	and.w	r3, r3, #16
 80122be:	2b00      	cmp	r3, #0
 80122c0:	f000 81fc 	beq.w	80126bc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80122c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80122c8:	f003 0310 	and.w	r3, r3, #16
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	f000 81f5 	beq.w	80126bc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2210      	movs	r2, #16
 80122d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	689b      	ldr	r3, [r3, #8]
 80122e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80122e4:	2b40      	cmp	r3, #64	@ 0x40
 80122e6:	f040 816d 	bne.w	80125c4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	4aa4      	ldr	r2, [pc, #656]	@ (8012584 <HAL_UART_IRQHandler+0x59c>)
 80122f4:	4293      	cmp	r3, r2
 80122f6:	d068      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4aa1      	ldr	r2, [pc, #644]	@ (8012588 <HAL_UART_IRQHandler+0x5a0>)
 8012302:	4293      	cmp	r3, r2
 8012304:	d061      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	4a9f      	ldr	r2, [pc, #636]	@ (801258c <HAL_UART_IRQHandler+0x5a4>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d05a      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	4a9c      	ldr	r2, [pc, #624]	@ (8012590 <HAL_UART_IRQHandler+0x5a8>)
 801231e:	4293      	cmp	r3, r2
 8012320:	d053      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	4a9a      	ldr	r2, [pc, #616]	@ (8012594 <HAL_UART_IRQHandler+0x5ac>)
 801232c:	4293      	cmp	r3, r2
 801232e:	d04c      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	4a97      	ldr	r2, [pc, #604]	@ (8012598 <HAL_UART_IRQHandler+0x5b0>)
 801233a:	4293      	cmp	r3, r2
 801233c:	d045      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	4a95      	ldr	r2, [pc, #596]	@ (801259c <HAL_UART_IRQHandler+0x5b4>)
 8012348:	4293      	cmp	r3, r2
 801234a:	d03e      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4a92      	ldr	r2, [pc, #584]	@ (80125a0 <HAL_UART_IRQHandler+0x5b8>)
 8012356:	4293      	cmp	r3, r2
 8012358:	d037      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	4a90      	ldr	r2, [pc, #576]	@ (80125a4 <HAL_UART_IRQHandler+0x5bc>)
 8012364:	4293      	cmp	r3, r2
 8012366:	d030      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4a8d      	ldr	r2, [pc, #564]	@ (80125a8 <HAL_UART_IRQHandler+0x5c0>)
 8012372:	4293      	cmp	r3, r2
 8012374:	d029      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	4a8b      	ldr	r2, [pc, #556]	@ (80125ac <HAL_UART_IRQHandler+0x5c4>)
 8012380:	4293      	cmp	r3, r2
 8012382:	d022      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	4a88      	ldr	r2, [pc, #544]	@ (80125b0 <HAL_UART_IRQHandler+0x5c8>)
 801238e:	4293      	cmp	r3, r2
 8012390:	d01b      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	4a86      	ldr	r2, [pc, #536]	@ (80125b4 <HAL_UART_IRQHandler+0x5cc>)
 801239c:	4293      	cmp	r3, r2
 801239e:	d014      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	4a83      	ldr	r2, [pc, #524]	@ (80125b8 <HAL_UART_IRQHandler+0x5d0>)
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d00d      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	4a81      	ldr	r2, [pc, #516]	@ (80125bc <HAL_UART_IRQHandler+0x5d4>)
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d006      	beq.n	80123ca <HAL_UART_IRQHandler+0x3e2>
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	4a7e      	ldr	r2, [pc, #504]	@ (80125c0 <HAL_UART_IRQHandler+0x5d8>)
 80123c6:	4293      	cmp	r3, r2
 80123c8:	d106      	bne.n	80123d8 <HAL_UART_IRQHandler+0x3f0>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	e005      	b.n	80123e4 <HAL_UART_IRQHandler+0x3fc>
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	b29b      	uxth	r3, r3
 80123e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80123e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	f000 80ad 	beq.w	801254c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80123f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80123fc:	429a      	cmp	r2, r3
 80123fe:	f080 80a5 	bcs.w	801254c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012408:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012412:	69db      	ldr	r3, [r3, #28]
 8012414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012418:	f000 8087 	beq.w	801252a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012428:	e853 3f00 	ldrex	r3, [r3]
 801242c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8012430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	461a      	mov	r2, r3
 8012442:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012446:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801244a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801244e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8012452:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012456:	e841 2300 	strex	r3, r2, [r1]
 801245a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801245e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012462:	2b00      	cmp	r3, #0
 8012464:	d1da      	bne.n	801241c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	3308      	adds	r3, #8
 801246c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801246e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012470:	e853 3f00 	ldrex	r3, [r3]
 8012474:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012478:	f023 0301 	bic.w	r3, r3, #1
 801247c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	3308      	adds	r3, #8
 8012486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801248a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801248e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012490:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012492:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012496:	e841 2300 	strex	r3, r2, [r1]
 801249a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801249c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d1e1      	bne.n	8012466 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	3308      	adds	r3, #8
 80124a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80124ac:	e853 3f00 	ldrex	r3, [r3]
 80124b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80124b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80124b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80124b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	3308      	adds	r3, #8
 80124c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80124c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80124c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80124cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80124ce:	e841 2300 	strex	r3, r2, [r1]
 80124d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80124d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d1e3      	bne.n	80124a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2220      	movs	r2, #32
 80124de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2200      	movs	r2, #0
 80124e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124f0:	e853 3f00 	ldrex	r3, [r3]
 80124f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80124f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80124f8:	f023 0310 	bic.w	r3, r3, #16
 80124fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	461a      	mov	r2, r3
 8012506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801250a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801250c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801250e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012510:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012512:	e841 2300 	strex	r3, r2, [r1]
 8012516:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801251a:	2b00      	cmp	r3, #0
 801251c:	d1e4      	bne.n	80124e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012524:	4618      	mov	r0, r3
 8012526:	f7f2 fb77 	bl	8004c18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2202      	movs	r2, #2
 801252e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801253c:	b29b      	uxth	r3, r3
 801253e:	1ad3      	subs	r3, r2, r3
 8012540:	b29b      	uxth	r3, r3
 8012542:	4619      	mov	r1, r3
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f000 f943 	bl	80127d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801254a:	e119      	b.n	8012780 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012556:	429a      	cmp	r2, r3
 8012558:	f040 8112 	bne.w	8012780 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012562:	69db      	ldr	r3, [r3, #28]
 8012564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012568:	f040 810a 	bne.w	8012780 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2202      	movs	r2, #2
 8012570:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012578:	4619      	mov	r1, r3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 f928 	bl	80127d0 <HAL_UARTEx_RxEventCallback>
      return;
 8012580:	e0fe      	b.n	8012780 <HAL_UART_IRQHandler+0x798>
 8012582:	bf00      	nop
 8012584:	40020010 	.word	0x40020010
 8012588:	40020028 	.word	0x40020028
 801258c:	40020040 	.word	0x40020040
 8012590:	40020058 	.word	0x40020058
 8012594:	40020070 	.word	0x40020070
 8012598:	40020088 	.word	0x40020088
 801259c:	400200a0 	.word	0x400200a0
 80125a0:	400200b8 	.word	0x400200b8
 80125a4:	40020410 	.word	0x40020410
 80125a8:	40020428 	.word	0x40020428
 80125ac:	40020440 	.word	0x40020440
 80125b0:	40020458 	.word	0x40020458
 80125b4:	40020470 	.word	0x40020470
 80125b8:	40020488 	.word	0x40020488
 80125bc:	400204a0 	.word	0x400204a0
 80125c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80125d0:	b29b      	uxth	r3, r3
 80125d2:	1ad3      	subs	r3, r2, r3
 80125d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80125de:	b29b      	uxth	r3, r3
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	f000 80cf 	beq.w	8012784 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80125e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	f000 80ca 	beq.w	8012784 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125f8:	e853 3f00 	ldrex	r3, [r3]
 80125fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80125fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012604:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	461a      	mov	r2, r3
 801260e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012612:	647b      	str	r3, [r7, #68]	@ 0x44
 8012614:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012616:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801261a:	e841 2300 	strex	r3, r2, [r1]
 801261e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012622:	2b00      	cmp	r3, #0
 8012624:	d1e4      	bne.n	80125f0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	3308      	adds	r3, #8
 801262c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012630:	e853 3f00 	ldrex	r3, [r3]
 8012634:	623b      	str	r3, [r7, #32]
   return(result);
 8012636:	6a3a      	ldr	r2, [r7, #32]
 8012638:	4b55      	ldr	r3, [pc, #340]	@ (8012790 <HAL_UART_IRQHandler+0x7a8>)
 801263a:	4013      	ands	r3, r2
 801263c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	3308      	adds	r3, #8
 8012646:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801264a:	633a      	str	r2, [r7, #48]	@ 0x30
 801264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801264e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012652:	e841 2300 	strex	r3, r2, [r1]
 8012656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801265a:	2b00      	cmp	r3, #0
 801265c:	d1e3      	bne.n	8012626 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2220      	movs	r2, #32
 8012662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2200      	movs	r2, #0
 801266a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2200      	movs	r2, #0
 8012670:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	e853 3f00 	ldrex	r3, [r3]
 801267e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	f023 0310 	bic.w	r3, r3, #16
 8012686:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	461a      	mov	r2, r3
 8012690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012694:	61fb      	str	r3, [r7, #28]
 8012696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012698:	69b9      	ldr	r1, [r7, #24]
 801269a:	69fa      	ldr	r2, [r7, #28]
 801269c:	e841 2300 	strex	r3, r2, [r1]
 80126a0:	617b      	str	r3, [r7, #20]
   return(result);
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d1e4      	bne.n	8012672 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2202      	movs	r2, #2
 80126ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80126ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80126b2:	4619      	mov	r1, r3
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f000 f88b 	bl	80127d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80126ba:	e063      	b.n	8012784 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80126bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d00e      	beq.n	80126e6 <HAL_UART_IRQHandler+0x6fe>
 80126c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80126cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d008      	beq.n	80126e6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80126dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f001 fa22 	bl	8013b28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80126e4:	e051      	b.n	801278a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80126e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d014      	beq.n	801271c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80126f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80126f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d105      	bne.n	801270a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80126fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012706:	2b00      	cmp	r3, #0
 8012708:	d008      	beq.n	801271c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801270e:	2b00      	cmp	r3, #0
 8012710:	d03a      	beq.n	8012788 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	4798      	blx	r3
    }
    return;
 801271a:	e035      	b.n	8012788 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801271c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012724:	2b00      	cmp	r3, #0
 8012726:	d009      	beq.n	801273c <HAL_UART_IRQHandler+0x754>
 8012728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801272c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012730:	2b00      	cmp	r3, #0
 8012732:	d003      	beq.n	801273c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f001 f9cc 	bl	8013ad2 <UART_EndTransmit_IT>
    return;
 801273a:	e026      	b.n	801278a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801273c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012744:	2b00      	cmp	r3, #0
 8012746:	d009      	beq.n	801275c <HAL_UART_IRQHandler+0x774>
 8012748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801274c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012750:	2b00      	cmp	r3, #0
 8012752:	d003      	beq.n	801275c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f001 f9fb 	bl	8013b50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801275a:	e016      	b.n	801278a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801275c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012764:	2b00      	cmp	r3, #0
 8012766:	d010      	beq.n	801278a <HAL_UART_IRQHandler+0x7a2>
 8012768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801276c:	2b00      	cmp	r3, #0
 801276e:	da0c      	bge.n	801278a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f001 f9e3 	bl	8013b3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012776:	e008      	b.n	801278a <HAL_UART_IRQHandler+0x7a2>
      return;
 8012778:	bf00      	nop
 801277a:	e006      	b.n	801278a <HAL_UART_IRQHandler+0x7a2>
    return;
 801277c:	bf00      	nop
 801277e:	e004      	b.n	801278a <HAL_UART_IRQHandler+0x7a2>
      return;
 8012780:	bf00      	nop
 8012782:	e002      	b.n	801278a <HAL_UART_IRQHandler+0x7a2>
      return;
 8012784:	bf00      	nop
 8012786:	e000      	b.n	801278a <HAL_UART_IRQHandler+0x7a2>
    return;
 8012788:	bf00      	nop
  }
}
 801278a:	37e8      	adds	r7, #232	@ 0xe8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	effffffe 	.word	0xeffffffe

08012794 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801279c:	bf00      	nop
 801279e:	370c      	adds	r7, #12
 80127a0:	46bd      	mov	sp, r7
 80127a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a6:	4770      	bx	lr

080127a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80127a8:	b480      	push	{r7}
 80127aa:	b083      	sub	sp, #12
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80127b0:	bf00      	nop
 80127b2:	370c      	adds	r7, #12
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr

080127bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80127c4:	bf00      	nop
 80127c6:	370c      	adds	r7, #12
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr

080127d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80127d0:	b480      	push	{r7}
 80127d2:	b083      	sub	sp, #12
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	460b      	mov	r3, r1
 80127da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80127dc:	bf00      	nop
 80127de:	370c      	adds	r7, #12
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80127e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80127ec:	b092      	sub	sp, #72	@ 0x48
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80127f2:	2300      	movs	r3, #0
 80127f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	689a      	ldr	r2, [r3, #8]
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	691b      	ldr	r3, [r3, #16]
 8012800:	431a      	orrs	r2, r3
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	695b      	ldr	r3, [r3, #20]
 8012806:	431a      	orrs	r2, r3
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	69db      	ldr	r3, [r3, #28]
 801280c:	4313      	orrs	r3, r2
 801280e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	681a      	ldr	r2, [r3, #0]
 8012816:	4bbe      	ldr	r3, [pc, #760]	@ (8012b10 <UART_SetConfig+0x328>)
 8012818:	4013      	ands	r3, r2
 801281a:	697a      	ldr	r2, [r7, #20]
 801281c:	6812      	ldr	r2, [r2, #0]
 801281e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012820:	430b      	orrs	r3, r1
 8012822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	68da      	ldr	r2, [r3, #12]
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	430a      	orrs	r2, r1
 8012838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	699b      	ldr	r3, [r3, #24]
 801283e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4ab3      	ldr	r2, [pc, #716]	@ (8012b14 <UART_SetConfig+0x32c>)
 8012846:	4293      	cmp	r3, r2
 8012848:	d004      	beq.n	8012854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	6a1b      	ldr	r3, [r3, #32]
 801284e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012850:	4313      	orrs	r3, r2
 8012852:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	689a      	ldr	r2, [r3, #8]
 801285a:	4baf      	ldr	r3, [pc, #700]	@ (8012b18 <UART_SetConfig+0x330>)
 801285c:	4013      	ands	r3, r2
 801285e:	697a      	ldr	r2, [r7, #20]
 8012860:	6812      	ldr	r2, [r2, #0]
 8012862:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012864:	430b      	orrs	r3, r1
 8012866:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801286e:	f023 010f 	bic.w	r1, r3, #15
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	430a      	orrs	r2, r1
 801287c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	4aa6      	ldr	r2, [pc, #664]	@ (8012b1c <UART_SetConfig+0x334>)
 8012884:	4293      	cmp	r3, r2
 8012886:	d177      	bne.n	8012978 <UART_SetConfig+0x190>
 8012888:	4ba5      	ldr	r3, [pc, #660]	@ (8012b20 <UART_SetConfig+0x338>)
 801288a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801288c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012890:	2b28      	cmp	r3, #40	@ 0x28
 8012892:	d86d      	bhi.n	8012970 <UART_SetConfig+0x188>
 8012894:	a201      	add	r2, pc, #4	@ (adr r2, 801289c <UART_SetConfig+0xb4>)
 8012896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801289a:	bf00      	nop
 801289c:	08012941 	.word	0x08012941
 80128a0:	08012971 	.word	0x08012971
 80128a4:	08012971 	.word	0x08012971
 80128a8:	08012971 	.word	0x08012971
 80128ac:	08012971 	.word	0x08012971
 80128b0:	08012971 	.word	0x08012971
 80128b4:	08012971 	.word	0x08012971
 80128b8:	08012971 	.word	0x08012971
 80128bc:	08012949 	.word	0x08012949
 80128c0:	08012971 	.word	0x08012971
 80128c4:	08012971 	.word	0x08012971
 80128c8:	08012971 	.word	0x08012971
 80128cc:	08012971 	.word	0x08012971
 80128d0:	08012971 	.word	0x08012971
 80128d4:	08012971 	.word	0x08012971
 80128d8:	08012971 	.word	0x08012971
 80128dc:	08012951 	.word	0x08012951
 80128e0:	08012971 	.word	0x08012971
 80128e4:	08012971 	.word	0x08012971
 80128e8:	08012971 	.word	0x08012971
 80128ec:	08012971 	.word	0x08012971
 80128f0:	08012971 	.word	0x08012971
 80128f4:	08012971 	.word	0x08012971
 80128f8:	08012971 	.word	0x08012971
 80128fc:	08012959 	.word	0x08012959
 8012900:	08012971 	.word	0x08012971
 8012904:	08012971 	.word	0x08012971
 8012908:	08012971 	.word	0x08012971
 801290c:	08012971 	.word	0x08012971
 8012910:	08012971 	.word	0x08012971
 8012914:	08012971 	.word	0x08012971
 8012918:	08012971 	.word	0x08012971
 801291c:	08012961 	.word	0x08012961
 8012920:	08012971 	.word	0x08012971
 8012924:	08012971 	.word	0x08012971
 8012928:	08012971 	.word	0x08012971
 801292c:	08012971 	.word	0x08012971
 8012930:	08012971 	.word	0x08012971
 8012934:	08012971 	.word	0x08012971
 8012938:	08012971 	.word	0x08012971
 801293c:	08012969 	.word	0x08012969
 8012940:	2301      	movs	r3, #1
 8012942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012946:	e222      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012948:	2304      	movs	r3, #4
 801294a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801294e:	e21e      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012950:	2308      	movs	r3, #8
 8012952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012956:	e21a      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012958:	2310      	movs	r3, #16
 801295a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801295e:	e216      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012960:	2320      	movs	r3, #32
 8012962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012966:	e212      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012968:	2340      	movs	r3, #64	@ 0x40
 801296a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801296e:	e20e      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012970:	2380      	movs	r3, #128	@ 0x80
 8012972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012976:	e20a      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	4a69      	ldr	r2, [pc, #420]	@ (8012b24 <UART_SetConfig+0x33c>)
 801297e:	4293      	cmp	r3, r2
 8012980:	d130      	bne.n	80129e4 <UART_SetConfig+0x1fc>
 8012982:	4b67      	ldr	r3, [pc, #412]	@ (8012b20 <UART_SetConfig+0x338>)
 8012984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012986:	f003 0307 	and.w	r3, r3, #7
 801298a:	2b05      	cmp	r3, #5
 801298c:	d826      	bhi.n	80129dc <UART_SetConfig+0x1f4>
 801298e:	a201      	add	r2, pc, #4	@ (adr r2, 8012994 <UART_SetConfig+0x1ac>)
 8012990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012994:	080129ad 	.word	0x080129ad
 8012998:	080129b5 	.word	0x080129b5
 801299c:	080129bd 	.word	0x080129bd
 80129a0:	080129c5 	.word	0x080129c5
 80129a4:	080129cd 	.word	0x080129cd
 80129a8:	080129d5 	.word	0x080129d5
 80129ac:	2300      	movs	r3, #0
 80129ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129b2:	e1ec      	b.n	8012d8e <UART_SetConfig+0x5a6>
 80129b4:	2304      	movs	r3, #4
 80129b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129ba:	e1e8      	b.n	8012d8e <UART_SetConfig+0x5a6>
 80129bc:	2308      	movs	r3, #8
 80129be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129c2:	e1e4      	b.n	8012d8e <UART_SetConfig+0x5a6>
 80129c4:	2310      	movs	r3, #16
 80129c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129ca:	e1e0      	b.n	8012d8e <UART_SetConfig+0x5a6>
 80129cc:	2320      	movs	r3, #32
 80129ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129d2:	e1dc      	b.n	8012d8e <UART_SetConfig+0x5a6>
 80129d4:	2340      	movs	r3, #64	@ 0x40
 80129d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129da:	e1d8      	b.n	8012d8e <UART_SetConfig+0x5a6>
 80129dc:	2380      	movs	r3, #128	@ 0x80
 80129de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129e2:	e1d4      	b.n	8012d8e <UART_SetConfig+0x5a6>
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	4a4f      	ldr	r2, [pc, #316]	@ (8012b28 <UART_SetConfig+0x340>)
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d130      	bne.n	8012a50 <UART_SetConfig+0x268>
 80129ee:	4b4c      	ldr	r3, [pc, #304]	@ (8012b20 <UART_SetConfig+0x338>)
 80129f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129f2:	f003 0307 	and.w	r3, r3, #7
 80129f6:	2b05      	cmp	r3, #5
 80129f8:	d826      	bhi.n	8012a48 <UART_SetConfig+0x260>
 80129fa:	a201      	add	r2, pc, #4	@ (adr r2, 8012a00 <UART_SetConfig+0x218>)
 80129fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a00:	08012a19 	.word	0x08012a19
 8012a04:	08012a21 	.word	0x08012a21
 8012a08:	08012a29 	.word	0x08012a29
 8012a0c:	08012a31 	.word	0x08012a31
 8012a10:	08012a39 	.word	0x08012a39
 8012a14:	08012a41 	.word	0x08012a41
 8012a18:	2300      	movs	r3, #0
 8012a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a1e:	e1b6      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012a20:	2304      	movs	r3, #4
 8012a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a26:	e1b2      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012a28:	2308      	movs	r3, #8
 8012a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a2e:	e1ae      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012a30:	2310      	movs	r3, #16
 8012a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a36:	e1aa      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012a38:	2320      	movs	r3, #32
 8012a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a3e:	e1a6      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012a40:	2340      	movs	r3, #64	@ 0x40
 8012a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a46:	e1a2      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012a48:	2380      	movs	r3, #128	@ 0x80
 8012a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a4e:	e19e      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	4a35      	ldr	r2, [pc, #212]	@ (8012b2c <UART_SetConfig+0x344>)
 8012a56:	4293      	cmp	r3, r2
 8012a58:	d130      	bne.n	8012abc <UART_SetConfig+0x2d4>
 8012a5a:	4b31      	ldr	r3, [pc, #196]	@ (8012b20 <UART_SetConfig+0x338>)
 8012a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a5e:	f003 0307 	and.w	r3, r3, #7
 8012a62:	2b05      	cmp	r3, #5
 8012a64:	d826      	bhi.n	8012ab4 <UART_SetConfig+0x2cc>
 8012a66:	a201      	add	r2, pc, #4	@ (adr r2, 8012a6c <UART_SetConfig+0x284>)
 8012a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a6c:	08012a85 	.word	0x08012a85
 8012a70:	08012a8d 	.word	0x08012a8d
 8012a74:	08012a95 	.word	0x08012a95
 8012a78:	08012a9d 	.word	0x08012a9d
 8012a7c:	08012aa5 	.word	0x08012aa5
 8012a80:	08012aad 	.word	0x08012aad
 8012a84:	2300      	movs	r3, #0
 8012a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a8a:	e180      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012a8c:	2304      	movs	r3, #4
 8012a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a92:	e17c      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012a94:	2308      	movs	r3, #8
 8012a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a9a:	e178      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012a9c:	2310      	movs	r3, #16
 8012a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012aa2:	e174      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012aa4:	2320      	movs	r3, #32
 8012aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012aaa:	e170      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012aac:	2340      	movs	r3, #64	@ 0x40
 8012aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ab2:	e16c      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012ab4:	2380      	movs	r3, #128	@ 0x80
 8012ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012aba:	e168      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8012b30 <UART_SetConfig+0x348>)
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	d142      	bne.n	8012b4c <UART_SetConfig+0x364>
 8012ac6:	4b16      	ldr	r3, [pc, #88]	@ (8012b20 <UART_SetConfig+0x338>)
 8012ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012aca:	f003 0307 	and.w	r3, r3, #7
 8012ace:	2b05      	cmp	r3, #5
 8012ad0:	d838      	bhi.n	8012b44 <UART_SetConfig+0x35c>
 8012ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8012ad8 <UART_SetConfig+0x2f0>)
 8012ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ad8:	08012af1 	.word	0x08012af1
 8012adc:	08012af9 	.word	0x08012af9
 8012ae0:	08012b01 	.word	0x08012b01
 8012ae4:	08012b09 	.word	0x08012b09
 8012ae8:	08012b35 	.word	0x08012b35
 8012aec:	08012b3d 	.word	0x08012b3d
 8012af0:	2300      	movs	r3, #0
 8012af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012af6:	e14a      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012af8:	2304      	movs	r3, #4
 8012afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012afe:	e146      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012b00:	2308      	movs	r3, #8
 8012b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b06:	e142      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012b08:	2310      	movs	r3, #16
 8012b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b0e:	e13e      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012b10:	cfff69f3 	.word	0xcfff69f3
 8012b14:	58000c00 	.word	0x58000c00
 8012b18:	11fff4ff 	.word	0x11fff4ff
 8012b1c:	40011000 	.word	0x40011000
 8012b20:	58024400 	.word	0x58024400
 8012b24:	40004400 	.word	0x40004400
 8012b28:	40004800 	.word	0x40004800
 8012b2c:	40004c00 	.word	0x40004c00
 8012b30:	40005000 	.word	0x40005000
 8012b34:	2320      	movs	r3, #32
 8012b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b3a:	e128      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012b3c:	2340      	movs	r3, #64	@ 0x40
 8012b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b42:	e124      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012b44:	2380      	movs	r3, #128	@ 0x80
 8012b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b4a:	e120      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4acb      	ldr	r2, [pc, #812]	@ (8012e80 <UART_SetConfig+0x698>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d176      	bne.n	8012c44 <UART_SetConfig+0x45c>
 8012b56:	4bcb      	ldr	r3, [pc, #812]	@ (8012e84 <UART_SetConfig+0x69c>)
 8012b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012b5e:	2b28      	cmp	r3, #40	@ 0x28
 8012b60:	d86c      	bhi.n	8012c3c <UART_SetConfig+0x454>
 8012b62:	a201      	add	r2, pc, #4	@ (adr r2, 8012b68 <UART_SetConfig+0x380>)
 8012b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b68:	08012c0d 	.word	0x08012c0d
 8012b6c:	08012c3d 	.word	0x08012c3d
 8012b70:	08012c3d 	.word	0x08012c3d
 8012b74:	08012c3d 	.word	0x08012c3d
 8012b78:	08012c3d 	.word	0x08012c3d
 8012b7c:	08012c3d 	.word	0x08012c3d
 8012b80:	08012c3d 	.word	0x08012c3d
 8012b84:	08012c3d 	.word	0x08012c3d
 8012b88:	08012c15 	.word	0x08012c15
 8012b8c:	08012c3d 	.word	0x08012c3d
 8012b90:	08012c3d 	.word	0x08012c3d
 8012b94:	08012c3d 	.word	0x08012c3d
 8012b98:	08012c3d 	.word	0x08012c3d
 8012b9c:	08012c3d 	.word	0x08012c3d
 8012ba0:	08012c3d 	.word	0x08012c3d
 8012ba4:	08012c3d 	.word	0x08012c3d
 8012ba8:	08012c1d 	.word	0x08012c1d
 8012bac:	08012c3d 	.word	0x08012c3d
 8012bb0:	08012c3d 	.word	0x08012c3d
 8012bb4:	08012c3d 	.word	0x08012c3d
 8012bb8:	08012c3d 	.word	0x08012c3d
 8012bbc:	08012c3d 	.word	0x08012c3d
 8012bc0:	08012c3d 	.word	0x08012c3d
 8012bc4:	08012c3d 	.word	0x08012c3d
 8012bc8:	08012c25 	.word	0x08012c25
 8012bcc:	08012c3d 	.word	0x08012c3d
 8012bd0:	08012c3d 	.word	0x08012c3d
 8012bd4:	08012c3d 	.word	0x08012c3d
 8012bd8:	08012c3d 	.word	0x08012c3d
 8012bdc:	08012c3d 	.word	0x08012c3d
 8012be0:	08012c3d 	.word	0x08012c3d
 8012be4:	08012c3d 	.word	0x08012c3d
 8012be8:	08012c2d 	.word	0x08012c2d
 8012bec:	08012c3d 	.word	0x08012c3d
 8012bf0:	08012c3d 	.word	0x08012c3d
 8012bf4:	08012c3d 	.word	0x08012c3d
 8012bf8:	08012c3d 	.word	0x08012c3d
 8012bfc:	08012c3d 	.word	0x08012c3d
 8012c00:	08012c3d 	.word	0x08012c3d
 8012c04:	08012c3d 	.word	0x08012c3d
 8012c08:	08012c35 	.word	0x08012c35
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c12:	e0bc      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c14:	2304      	movs	r3, #4
 8012c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c1a:	e0b8      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c1c:	2308      	movs	r3, #8
 8012c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c22:	e0b4      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c24:	2310      	movs	r3, #16
 8012c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c2a:	e0b0      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c2c:	2320      	movs	r3, #32
 8012c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c32:	e0ac      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c34:	2340      	movs	r3, #64	@ 0x40
 8012c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c3a:	e0a8      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c3c:	2380      	movs	r3, #128	@ 0x80
 8012c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c42:	e0a4      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	4a8f      	ldr	r2, [pc, #572]	@ (8012e88 <UART_SetConfig+0x6a0>)
 8012c4a:	4293      	cmp	r3, r2
 8012c4c:	d130      	bne.n	8012cb0 <UART_SetConfig+0x4c8>
 8012c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8012e84 <UART_SetConfig+0x69c>)
 8012c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c52:	f003 0307 	and.w	r3, r3, #7
 8012c56:	2b05      	cmp	r3, #5
 8012c58:	d826      	bhi.n	8012ca8 <UART_SetConfig+0x4c0>
 8012c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8012c60 <UART_SetConfig+0x478>)
 8012c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c60:	08012c79 	.word	0x08012c79
 8012c64:	08012c81 	.word	0x08012c81
 8012c68:	08012c89 	.word	0x08012c89
 8012c6c:	08012c91 	.word	0x08012c91
 8012c70:	08012c99 	.word	0x08012c99
 8012c74:	08012ca1 	.word	0x08012ca1
 8012c78:	2300      	movs	r3, #0
 8012c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c7e:	e086      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c80:	2304      	movs	r3, #4
 8012c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c86:	e082      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c88:	2308      	movs	r3, #8
 8012c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c8e:	e07e      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c90:	2310      	movs	r3, #16
 8012c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c96:	e07a      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012c98:	2320      	movs	r3, #32
 8012c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c9e:	e076      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012ca0:	2340      	movs	r3, #64	@ 0x40
 8012ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ca6:	e072      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012ca8:	2380      	movs	r3, #128	@ 0x80
 8012caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cae:	e06e      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4a75      	ldr	r2, [pc, #468]	@ (8012e8c <UART_SetConfig+0x6a4>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d130      	bne.n	8012d1c <UART_SetConfig+0x534>
 8012cba:	4b72      	ldr	r3, [pc, #456]	@ (8012e84 <UART_SetConfig+0x69c>)
 8012cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cbe:	f003 0307 	and.w	r3, r3, #7
 8012cc2:	2b05      	cmp	r3, #5
 8012cc4:	d826      	bhi.n	8012d14 <UART_SetConfig+0x52c>
 8012cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8012ccc <UART_SetConfig+0x4e4>)
 8012cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ccc:	08012ce5 	.word	0x08012ce5
 8012cd0:	08012ced 	.word	0x08012ced
 8012cd4:	08012cf5 	.word	0x08012cf5
 8012cd8:	08012cfd 	.word	0x08012cfd
 8012cdc:	08012d05 	.word	0x08012d05
 8012ce0:	08012d0d 	.word	0x08012d0d
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cea:	e050      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012cec:	2304      	movs	r3, #4
 8012cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cf2:	e04c      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012cf4:	2308      	movs	r3, #8
 8012cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cfa:	e048      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012cfc:	2310      	movs	r3, #16
 8012cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d02:	e044      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d04:	2320      	movs	r3, #32
 8012d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d0a:	e040      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d0c:	2340      	movs	r3, #64	@ 0x40
 8012d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d12:	e03c      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d14:	2380      	movs	r3, #128	@ 0x80
 8012d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d1a:	e038      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	4a5b      	ldr	r2, [pc, #364]	@ (8012e90 <UART_SetConfig+0x6a8>)
 8012d22:	4293      	cmp	r3, r2
 8012d24:	d130      	bne.n	8012d88 <UART_SetConfig+0x5a0>
 8012d26:	4b57      	ldr	r3, [pc, #348]	@ (8012e84 <UART_SetConfig+0x69c>)
 8012d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d2a:	f003 0307 	and.w	r3, r3, #7
 8012d2e:	2b05      	cmp	r3, #5
 8012d30:	d826      	bhi.n	8012d80 <UART_SetConfig+0x598>
 8012d32:	a201      	add	r2, pc, #4	@ (adr r2, 8012d38 <UART_SetConfig+0x550>)
 8012d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d38:	08012d51 	.word	0x08012d51
 8012d3c:	08012d59 	.word	0x08012d59
 8012d40:	08012d61 	.word	0x08012d61
 8012d44:	08012d69 	.word	0x08012d69
 8012d48:	08012d71 	.word	0x08012d71
 8012d4c:	08012d79 	.word	0x08012d79
 8012d50:	2302      	movs	r3, #2
 8012d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d56:	e01a      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d58:	2304      	movs	r3, #4
 8012d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d5e:	e016      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d60:	2308      	movs	r3, #8
 8012d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d66:	e012      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d68:	2310      	movs	r3, #16
 8012d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d6e:	e00e      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d70:	2320      	movs	r3, #32
 8012d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d76:	e00a      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d78:	2340      	movs	r3, #64	@ 0x40
 8012d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d7e:	e006      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d80:	2380      	movs	r3, #128	@ 0x80
 8012d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d86:	e002      	b.n	8012d8e <UART_SetConfig+0x5a6>
 8012d88:	2380      	movs	r3, #128	@ 0x80
 8012d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	4a3f      	ldr	r2, [pc, #252]	@ (8012e90 <UART_SetConfig+0x6a8>)
 8012d94:	4293      	cmp	r3, r2
 8012d96:	f040 80f8 	bne.w	8012f8a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012d9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012d9e:	2b20      	cmp	r3, #32
 8012da0:	dc46      	bgt.n	8012e30 <UART_SetConfig+0x648>
 8012da2:	2b02      	cmp	r3, #2
 8012da4:	f2c0 8082 	blt.w	8012eac <UART_SetConfig+0x6c4>
 8012da8:	3b02      	subs	r3, #2
 8012daa:	2b1e      	cmp	r3, #30
 8012dac:	d87e      	bhi.n	8012eac <UART_SetConfig+0x6c4>
 8012dae:	a201      	add	r2, pc, #4	@ (adr r2, 8012db4 <UART_SetConfig+0x5cc>)
 8012db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012db4:	08012e37 	.word	0x08012e37
 8012db8:	08012ead 	.word	0x08012ead
 8012dbc:	08012e3f 	.word	0x08012e3f
 8012dc0:	08012ead 	.word	0x08012ead
 8012dc4:	08012ead 	.word	0x08012ead
 8012dc8:	08012ead 	.word	0x08012ead
 8012dcc:	08012e4f 	.word	0x08012e4f
 8012dd0:	08012ead 	.word	0x08012ead
 8012dd4:	08012ead 	.word	0x08012ead
 8012dd8:	08012ead 	.word	0x08012ead
 8012ddc:	08012ead 	.word	0x08012ead
 8012de0:	08012ead 	.word	0x08012ead
 8012de4:	08012ead 	.word	0x08012ead
 8012de8:	08012ead 	.word	0x08012ead
 8012dec:	08012e5f 	.word	0x08012e5f
 8012df0:	08012ead 	.word	0x08012ead
 8012df4:	08012ead 	.word	0x08012ead
 8012df8:	08012ead 	.word	0x08012ead
 8012dfc:	08012ead 	.word	0x08012ead
 8012e00:	08012ead 	.word	0x08012ead
 8012e04:	08012ead 	.word	0x08012ead
 8012e08:	08012ead 	.word	0x08012ead
 8012e0c:	08012ead 	.word	0x08012ead
 8012e10:	08012ead 	.word	0x08012ead
 8012e14:	08012ead 	.word	0x08012ead
 8012e18:	08012ead 	.word	0x08012ead
 8012e1c:	08012ead 	.word	0x08012ead
 8012e20:	08012ead 	.word	0x08012ead
 8012e24:	08012ead 	.word	0x08012ead
 8012e28:	08012ead 	.word	0x08012ead
 8012e2c:	08012e9f 	.word	0x08012e9f
 8012e30:	2b40      	cmp	r3, #64	@ 0x40
 8012e32:	d037      	beq.n	8012ea4 <UART_SetConfig+0x6bc>
 8012e34:	e03a      	b.n	8012eac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012e36:	f7fd fa8d 	bl	8010354 <HAL_RCCEx_GetD3PCLK1Freq>
 8012e3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012e3c:	e03c      	b.n	8012eb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7fd fa9c 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e4c:	e034      	b.n	8012eb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e4e:	f107 0318 	add.w	r3, r7, #24
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7fd fbe8 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e5c:	e02c      	b.n	8012eb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012e5e:	4b09      	ldr	r3, [pc, #36]	@ (8012e84 <UART_SetConfig+0x69c>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f003 0320 	and.w	r3, r3, #32
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d016      	beq.n	8012e98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012e6a:	4b06      	ldr	r3, [pc, #24]	@ (8012e84 <UART_SetConfig+0x69c>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	08db      	lsrs	r3, r3, #3
 8012e70:	f003 0303 	and.w	r3, r3, #3
 8012e74:	4a07      	ldr	r2, [pc, #28]	@ (8012e94 <UART_SetConfig+0x6ac>)
 8012e76:	fa22 f303 	lsr.w	r3, r2, r3
 8012e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012e7c:	e01c      	b.n	8012eb8 <UART_SetConfig+0x6d0>
 8012e7e:	bf00      	nop
 8012e80:	40011400 	.word	0x40011400
 8012e84:	58024400 	.word	0x58024400
 8012e88:	40007800 	.word	0x40007800
 8012e8c:	40007c00 	.word	0x40007c00
 8012e90:	58000c00 	.word	0x58000c00
 8012e94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8012e98:	4b9d      	ldr	r3, [pc, #628]	@ (8013110 <UART_SetConfig+0x928>)
 8012e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e9c:	e00c      	b.n	8012eb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012e9e:	4b9d      	ldr	r3, [pc, #628]	@ (8013114 <UART_SetConfig+0x92c>)
 8012ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ea2:	e009      	b.n	8012eb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012eaa:	e005      	b.n	8012eb8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8012eac:	2300      	movs	r3, #0
 8012eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012eb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	f000 81de 	beq.w	801327c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ec4:	4a94      	ldr	r2, [pc, #592]	@ (8013118 <UART_SetConfig+0x930>)
 8012ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012eca:	461a      	mov	r2, r3
 8012ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ed2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	685a      	ldr	r2, [r3, #4]
 8012ed8:	4613      	mov	r3, r2
 8012eda:	005b      	lsls	r3, r3, #1
 8012edc:	4413      	add	r3, r2
 8012ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d305      	bcc.n	8012ef0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d903      	bls.n	8012ef8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8012ef0:	2301      	movs	r3, #1
 8012ef2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012ef6:	e1c1      	b.n	801327c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012efa:	2200      	movs	r2, #0
 8012efc:	60bb      	str	r3, [r7, #8]
 8012efe:	60fa      	str	r2, [r7, #12]
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f04:	4a84      	ldr	r2, [pc, #528]	@ (8013118 <UART_SetConfig+0x930>)
 8012f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	603b      	str	r3, [r7, #0]
 8012f10:	607a      	str	r2, [r7, #4]
 8012f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012f1a:	f7ed fa39 	bl	8000390 <__aeabi_uldivmod>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	460b      	mov	r3, r1
 8012f22:	4610      	mov	r0, r2
 8012f24:	4619      	mov	r1, r3
 8012f26:	f04f 0200 	mov.w	r2, #0
 8012f2a:	f04f 0300 	mov.w	r3, #0
 8012f2e:	020b      	lsls	r3, r1, #8
 8012f30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012f34:	0202      	lsls	r2, r0, #8
 8012f36:	6979      	ldr	r1, [r7, #20]
 8012f38:	6849      	ldr	r1, [r1, #4]
 8012f3a:	0849      	lsrs	r1, r1, #1
 8012f3c:	2000      	movs	r0, #0
 8012f3e:	460c      	mov	r4, r1
 8012f40:	4605      	mov	r5, r0
 8012f42:	eb12 0804 	adds.w	r8, r2, r4
 8012f46:	eb43 0905 	adc.w	r9, r3, r5
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	2200      	movs	r2, #0
 8012f50:	469a      	mov	sl, r3
 8012f52:	4693      	mov	fp, r2
 8012f54:	4652      	mov	r2, sl
 8012f56:	465b      	mov	r3, fp
 8012f58:	4640      	mov	r0, r8
 8012f5a:	4649      	mov	r1, r9
 8012f5c:	f7ed fa18 	bl	8000390 <__aeabi_uldivmod>
 8012f60:	4602      	mov	r2, r0
 8012f62:	460b      	mov	r3, r1
 8012f64:	4613      	mov	r3, r2
 8012f66:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012f6e:	d308      	bcc.n	8012f82 <UART_SetConfig+0x79a>
 8012f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012f76:	d204      	bcs.n	8012f82 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012f7e:	60da      	str	r2, [r3, #12]
 8012f80:	e17c      	b.n	801327c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8012f82:	2301      	movs	r3, #1
 8012f84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012f88:	e178      	b.n	801327c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	69db      	ldr	r3, [r3, #28]
 8012f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012f92:	f040 80c5 	bne.w	8013120 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8012f96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012f9a:	2b20      	cmp	r3, #32
 8012f9c:	dc48      	bgt.n	8013030 <UART_SetConfig+0x848>
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	db7b      	blt.n	801309a <UART_SetConfig+0x8b2>
 8012fa2:	2b20      	cmp	r3, #32
 8012fa4:	d879      	bhi.n	801309a <UART_SetConfig+0x8b2>
 8012fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8012fac <UART_SetConfig+0x7c4>)
 8012fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fac:	08013037 	.word	0x08013037
 8012fb0:	0801303f 	.word	0x0801303f
 8012fb4:	0801309b 	.word	0x0801309b
 8012fb8:	0801309b 	.word	0x0801309b
 8012fbc:	08013047 	.word	0x08013047
 8012fc0:	0801309b 	.word	0x0801309b
 8012fc4:	0801309b 	.word	0x0801309b
 8012fc8:	0801309b 	.word	0x0801309b
 8012fcc:	08013057 	.word	0x08013057
 8012fd0:	0801309b 	.word	0x0801309b
 8012fd4:	0801309b 	.word	0x0801309b
 8012fd8:	0801309b 	.word	0x0801309b
 8012fdc:	0801309b 	.word	0x0801309b
 8012fe0:	0801309b 	.word	0x0801309b
 8012fe4:	0801309b 	.word	0x0801309b
 8012fe8:	0801309b 	.word	0x0801309b
 8012fec:	08013067 	.word	0x08013067
 8012ff0:	0801309b 	.word	0x0801309b
 8012ff4:	0801309b 	.word	0x0801309b
 8012ff8:	0801309b 	.word	0x0801309b
 8012ffc:	0801309b 	.word	0x0801309b
 8013000:	0801309b 	.word	0x0801309b
 8013004:	0801309b 	.word	0x0801309b
 8013008:	0801309b 	.word	0x0801309b
 801300c:	0801309b 	.word	0x0801309b
 8013010:	0801309b 	.word	0x0801309b
 8013014:	0801309b 	.word	0x0801309b
 8013018:	0801309b 	.word	0x0801309b
 801301c:	0801309b 	.word	0x0801309b
 8013020:	0801309b 	.word	0x0801309b
 8013024:	0801309b 	.word	0x0801309b
 8013028:	0801309b 	.word	0x0801309b
 801302c:	0801308d 	.word	0x0801308d
 8013030:	2b40      	cmp	r3, #64	@ 0x40
 8013032:	d02e      	beq.n	8013092 <UART_SetConfig+0x8aa>
 8013034:	e031      	b.n	801309a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013036:	f7fb f9d7 	bl	800e3e8 <HAL_RCC_GetPCLK1Freq>
 801303a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801303c:	e033      	b.n	80130a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801303e:	f7fb f9e9 	bl	800e414 <HAL_RCC_GetPCLK2Freq>
 8013042:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013044:	e02f      	b.n	80130a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801304a:	4618      	mov	r0, r3
 801304c:	f7fd f998 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013054:	e027      	b.n	80130a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013056:	f107 0318 	add.w	r3, r7, #24
 801305a:	4618      	mov	r0, r3
 801305c:	f7fd fae4 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013064:	e01f      	b.n	80130a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013066:	4b2d      	ldr	r3, [pc, #180]	@ (801311c <UART_SetConfig+0x934>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	f003 0320 	and.w	r3, r3, #32
 801306e:	2b00      	cmp	r3, #0
 8013070:	d009      	beq.n	8013086 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013072:	4b2a      	ldr	r3, [pc, #168]	@ (801311c <UART_SetConfig+0x934>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	08db      	lsrs	r3, r3, #3
 8013078:	f003 0303 	and.w	r3, r3, #3
 801307c:	4a24      	ldr	r2, [pc, #144]	@ (8013110 <UART_SetConfig+0x928>)
 801307e:	fa22 f303 	lsr.w	r3, r2, r3
 8013082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013084:	e00f      	b.n	80130a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013086:	4b22      	ldr	r3, [pc, #136]	@ (8013110 <UART_SetConfig+0x928>)
 8013088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801308a:	e00c      	b.n	80130a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801308c:	4b21      	ldr	r3, [pc, #132]	@ (8013114 <UART_SetConfig+0x92c>)
 801308e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013090:	e009      	b.n	80130a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013098:	e005      	b.n	80130a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801309a:	2300      	movs	r3, #0
 801309c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801309e:	2301      	movs	r3, #1
 80130a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80130a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80130a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	f000 80e7 	beq.w	801327c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130b2:	4a19      	ldr	r2, [pc, #100]	@ (8013118 <UART_SetConfig+0x930>)
 80130b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130b8:	461a      	mov	r2, r3
 80130ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80130c0:	005a      	lsls	r2, r3, #1
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	085b      	lsrs	r3, r3, #1
 80130c8:	441a      	add	r2, r3
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80130d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80130d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d6:	2b0f      	cmp	r3, #15
 80130d8:	d916      	bls.n	8013108 <UART_SetConfig+0x920>
 80130da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80130e0:	d212      	bcs.n	8013108 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80130e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130e4:	b29b      	uxth	r3, r3
 80130e6:	f023 030f 	bic.w	r3, r3, #15
 80130ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80130ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ee:	085b      	lsrs	r3, r3, #1
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	f003 0307 	and.w	r3, r3, #7
 80130f6:	b29a      	uxth	r2, r3
 80130f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80130fa:	4313      	orrs	r3, r2
 80130fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013104:	60da      	str	r2, [r3, #12]
 8013106:	e0b9      	b.n	801327c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013108:	2301      	movs	r3, #1
 801310a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801310e:	e0b5      	b.n	801327c <UART_SetConfig+0xa94>
 8013110:	03d09000 	.word	0x03d09000
 8013114:	003d0900 	.word	0x003d0900
 8013118:	08019110 	.word	0x08019110
 801311c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8013120:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013124:	2b20      	cmp	r3, #32
 8013126:	dc49      	bgt.n	80131bc <UART_SetConfig+0x9d4>
 8013128:	2b00      	cmp	r3, #0
 801312a:	db7c      	blt.n	8013226 <UART_SetConfig+0xa3e>
 801312c:	2b20      	cmp	r3, #32
 801312e:	d87a      	bhi.n	8013226 <UART_SetConfig+0xa3e>
 8013130:	a201      	add	r2, pc, #4	@ (adr r2, 8013138 <UART_SetConfig+0x950>)
 8013132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013136:	bf00      	nop
 8013138:	080131c3 	.word	0x080131c3
 801313c:	080131cb 	.word	0x080131cb
 8013140:	08013227 	.word	0x08013227
 8013144:	08013227 	.word	0x08013227
 8013148:	080131d3 	.word	0x080131d3
 801314c:	08013227 	.word	0x08013227
 8013150:	08013227 	.word	0x08013227
 8013154:	08013227 	.word	0x08013227
 8013158:	080131e3 	.word	0x080131e3
 801315c:	08013227 	.word	0x08013227
 8013160:	08013227 	.word	0x08013227
 8013164:	08013227 	.word	0x08013227
 8013168:	08013227 	.word	0x08013227
 801316c:	08013227 	.word	0x08013227
 8013170:	08013227 	.word	0x08013227
 8013174:	08013227 	.word	0x08013227
 8013178:	080131f3 	.word	0x080131f3
 801317c:	08013227 	.word	0x08013227
 8013180:	08013227 	.word	0x08013227
 8013184:	08013227 	.word	0x08013227
 8013188:	08013227 	.word	0x08013227
 801318c:	08013227 	.word	0x08013227
 8013190:	08013227 	.word	0x08013227
 8013194:	08013227 	.word	0x08013227
 8013198:	08013227 	.word	0x08013227
 801319c:	08013227 	.word	0x08013227
 80131a0:	08013227 	.word	0x08013227
 80131a4:	08013227 	.word	0x08013227
 80131a8:	08013227 	.word	0x08013227
 80131ac:	08013227 	.word	0x08013227
 80131b0:	08013227 	.word	0x08013227
 80131b4:	08013227 	.word	0x08013227
 80131b8:	08013219 	.word	0x08013219
 80131bc:	2b40      	cmp	r3, #64	@ 0x40
 80131be:	d02e      	beq.n	801321e <UART_SetConfig+0xa36>
 80131c0:	e031      	b.n	8013226 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80131c2:	f7fb f911 	bl	800e3e8 <HAL_RCC_GetPCLK1Freq>
 80131c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80131c8:	e033      	b.n	8013232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80131ca:	f7fb f923 	bl	800e414 <HAL_RCC_GetPCLK2Freq>
 80131ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80131d0:	e02f      	b.n	8013232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80131d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7fd f8d2 	bl	8010380 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80131dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131e0:	e027      	b.n	8013232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80131e2:	f107 0318 	add.w	r3, r7, #24
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fd fa1e 	bl	8010628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131f0:	e01f      	b.n	8013232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80131f2:	4b2d      	ldr	r3, [pc, #180]	@ (80132a8 <UART_SetConfig+0xac0>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	f003 0320 	and.w	r3, r3, #32
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d009      	beq.n	8013212 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80131fe:	4b2a      	ldr	r3, [pc, #168]	@ (80132a8 <UART_SetConfig+0xac0>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	08db      	lsrs	r3, r3, #3
 8013204:	f003 0303 	and.w	r3, r3, #3
 8013208:	4a28      	ldr	r2, [pc, #160]	@ (80132ac <UART_SetConfig+0xac4>)
 801320a:	fa22 f303 	lsr.w	r3, r2, r3
 801320e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013210:	e00f      	b.n	8013232 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8013212:	4b26      	ldr	r3, [pc, #152]	@ (80132ac <UART_SetConfig+0xac4>)
 8013214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013216:	e00c      	b.n	8013232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013218:	4b25      	ldr	r3, [pc, #148]	@ (80132b0 <UART_SetConfig+0xac8>)
 801321a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801321c:	e009      	b.n	8013232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801321e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013224:	e005      	b.n	8013232 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013226:	2300      	movs	r3, #0
 8013228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801322a:	2301      	movs	r3, #1
 801322c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013230:	bf00      	nop
    }

    if (pclk != 0U)
 8013232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013234:	2b00      	cmp	r3, #0
 8013236:	d021      	beq.n	801327c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801323c:	4a1d      	ldr	r2, [pc, #116]	@ (80132b4 <UART_SetConfig+0xacc>)
 801323e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013242:	461a      	mov	r2, r3
 8013244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013246:	fbb3 f2f2 	udiv	r2, r3, r2
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	085b      	lsrs	r3, r3, #1
 8013250:	441a      	add	r2, r3
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	fbb2 f3f3 	udiv	r3, r2, r3
 801325a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801325c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801325e:	2b0f      	cmp	r3, #15
 8013260:	d909      	bls.n	8013276 <UART_SetConfig+0xa8e>
 8013262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013268:	d205      	bcs.n	8013276 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801326a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801326c:	b29a      	uxth	r2, r3
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	60da      	str	r2, [r3, #12]
 8013274:	e002      	b.n	801327c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013276:	2301      	movs	r3, #1
 8013278:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	2201      	movs	r2, #1
 8013280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	2201      	movs	r2, #1
 8013288:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	2200      	movs	r2, #0
 8013290:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	2200      	movs	r2, #0
 8013296:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013298:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801329c:	4618      	mov	r0, r3
 801329e:	3748      	adds	r7, #72	@ 0x48
 80132a0:	46bd      	mov	sp, r7
 80132a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80132a6:	bf00      	nop
 80132a8:	58024400 	.word	0x58024400
 80132ac:	03d09000 	.word	0x03d09000
 80132b0:	003d0900 	.word	0x003d0900
 80132b4:	08019110 	.word	0x08019110

080132b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80132b8:	b480      	push	{r7}
 80132ba:	b083      	sub	sp, #12
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132c4:	f003 0308 	and.w	r3, r3, #8
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00a      	beq.n	80132e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	430a      	orrs	r2, r1
 80132e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132e6:	f003 0301 	and.w	r3, r3, #1
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d00a      	beq.n	8013304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	685b      	ldr	r3, [r3, #4]
 80132f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	430a      	orrs	r2, r1
 8013302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013308:	f003 0302 	and.w	r3, r3, #2
 801330c:	2b00      	cmp	r3, #0
 801330e:	d00a      	beq.n	8013326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	430a      	orrs	r2, r1
 8013324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801332a:	f003 0304 	and.w	r3, r3, #4
 801332e:	2b00      	cmp	r3, #0
 8013330:	d00a      	beq.n	8013348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	685b      	ldr	r3, [r3, #4]
 8013338:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	430a      	orrs	r2, r1
 8013346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801334c:	f003 0310 	and.w	r3, r3, #16
 8013350:	2b00      	cmp	r3, #0
 8013352:	d00a      	beq.n	801336a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	689b      	ldr	r3, [r3, #8]
 801335a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	430a      	orrs	r2, r1
 8013368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801336e:	f003 0320 	and.w	r3, r3, #32
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00a      	beq.n	801338c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	689b      	ldr	r3, [r3, #8]
 801337c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	430a      	orrs	r2, r1
 801338a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013394:	2b00      	cmp	r3, #0
 8013396:	d01a      	beq.n	80133ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	430a      	orrs	r2, r1
 80133ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80133b6:	d10a      	bne.n	80133ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	430a      	orrs	r2, r1
 80133cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d00a      	beq.n	80133f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	685b      	ldr	r3, [r3, #4]
 80133e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	430a      	orrs	r2, r1
 80133ee:	605a      	str	r2, [r3, #4]
  }
}
 80133f0:	bf00      	nop
 80133f2:	370c      	adds	r7, #12
 80133f4:	46bd      	mov	sp, r7
 80133f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fa:	4770      	bx	lr

080133fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b098      	sub	sp, #96	@ 0x60
 8013400:	af02      	add	r7, sp, #8
 8013402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2200      	movs	r2, #0
 8013408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801340c:	f7ef f9c8 	bl	80027a0 <HAL_GetTick>
 8013410:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f003 0308 	and.w	r3, r3, #8
 801341c:	2b08      	cmp	r3, #8
 801341e:	d12f      	bne.n	8013480 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013420:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013424:	9300      	str	r3, [sp, #0]
 8013426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013428:	2200      	movs	r2, #0
 801342a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f000 f88e 	bl	8013550 <UART_WaitOnFlagUntilTimeout>
 8013434:	4603      	mov	r3, r0
 8013436:	2b00      	cmp	r3, #0
 8013438:	d022      	beq.n	8013480 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013442:	e853 3f00 	ldrex	r3, [r3]
 8013446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801344a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801344e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	461a      	mov	r2, r3
 8013456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013458:	647b      	str	r3, [r7, #68]	@ 0x44
 801345a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801345c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801345e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013460:	e841 2300 	strex	r3, r2, [r1]
 8013464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013468:	2b00      	cmp	r3, #0
 801346a:	d1e6      	bne.n	801343a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2220      	movs	r2, #32
 8013470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2200      	movs	r2, #0
 8013478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801347c:	2303      	movs	r3, #3
 801347e:	e063      	b.n	8013548 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f003 0304 	and.w	r3, r3, #4
 801348a:	2b04      	cmp	r3, #4
 801348c:	d149      	bne.n	8013522 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801348e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013492:	9300      	str	r3, [sp, #0]
 8013494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013496:	2200      	movs	r2, #0
 8013498:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f000 f857 	bl	8013550 <UART_WaitOnFlagUntilTimeout>
 80134a2:	4603      	mov	r3, r0
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d03c      	beq.n	8013522 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b0:	e853 3f00 	ldrex	r3, [r3]
 80134b4:	623b      	str	r3, [r7, #32]
   return(result);
 80134b6:	6a3b      	ldr	r3, [r7, #32]
 80134b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80134bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	461a      	mov	r2, r3
 80134c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80134c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80134cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80134ce:	e841 2300 	strex	r3, r2, [r1]
 80134d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80134d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d1e6      	bne.n	80134a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	3308      	adds	r3, #8
 80134e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	e853 3f00 	ldrex	r3, [r3]
 80134e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	f023 0301 	bic.w	r3, r3, #1
 80134f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	3308      	adds	r3, #8
 80134f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80134fa:	61fa      	str	r2, [r7, #28]
 80134fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134fe:	69b9      	ldr	r1, [r7, #24]
 8013500:	69fa      	ldr	r2, [r7, #28]
 8013502:	e841 2300 	strex	r3, r2, [r1]
 8013506:	617b      	str	r3, [r7, #20]
   return(result);
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d1e5      	bne.n	80134da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2220      	movs	r2, #32
 8013512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2200      	movs	r2, #0
 801351a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801351e:	2303      	movs	r3, #3
 8013520:	e012      	b.n	8013548 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2220      	movs	r2, #32
 8013526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	2220      	movs	r2, #32
 801352e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2200      	movs	r2, #0
 8013536:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2200      	movs	r2, #0
 801353c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2200      	movs	r2, #0
 8013542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013546:	2300      	movs	r3, #0
}
 8013548:	4618      	mov	r0, r3
 801354a:	3758      	adds	r7, #88	@ 0x58
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}

08013550 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b084      	sub	sp, #16
 8013554:	af00      	add	r7, sp, #0
 8013556:	60f8      	str	r0, [r7, #12]
 8013558:	60b9      	str	r1, [r7, #8]
 801355a:	603b      	str	r3, [r7, #0]
 801355c:	4613      	mov	r3, r2
 801355e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013560:	e04f      	b.n	8013602 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013562:	69bb      	ldr	r3, [r7, #24]
 8013564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013568:	d04b      	beq.n	8013602 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801356a:	f7ef f919 	bl	80027a0 <HAL_GetTick>
 801356e:	4602      	mov	r2, r0
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	1ad3      	subs	r3, r2, r3
 8013574:	69ba      	ldr	r2, [r7, #24]
 8013576:	429a      	cmp	r2, r3
 8013578:	d302      	bcc.n	8013580 <UART_WaitOnFlagUntilTimeout+0x30>
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d101      	bne.n	8013584 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013580:	2303      	movs	r3, #3
 8013582:	e04e      	b.n	8013622 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	f003 0304 	and.w	r3, r3, #4
 801358e:	2b00      	cmp	r3, #0
 8013590:	d037      	beq.n	8013602 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	2b80      	cmp	r3, #128	@ 0x80
 8013596:	d034      	beq.n	8013602 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	2b40      	cmp	r3, #64	@ 0x40
 801359c:	d031      	beq.n	8013602 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	69db      	ldr	r3, [r3, #28]
 80135a4:	f003 0308 	and.w	r3, r3, #8
 80135a8:	2b08      	cmp	r3, #8
 80135aa:	d110      	bne.n	80135ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2208      	movs	r2, #8
 80135b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80135b4:	68f8      	ldr	r0, [r7, #12]
 80135b6:	f000 f921 	bl	80137fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	2208      	movs	r2, #8
 80135be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	2200      	movs	r2, #0
 80135c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80135ca:	2301      	movs	r3, #1
 80135cc:	e029      	b.n	8013622 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	69db      	ldr	r3, [r3, #28]
 80135d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80135d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80135dc:	d111      	bne.n	8013602 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80135e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80135e8:	68f8      	ldr	r0, [r7, #12]
 80135ea:	f000 f907 	bl	80137fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2220      	movs	r2, #32
 80135f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2200      	movs	r2, #0
 80135fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80135fe:	2303      	movs	r3, #3
 8013600:	e00f      	b.n	8013622 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	69da      	ldr	r2, [r3, #28]
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	4013      	ands	r3, r2
 801360c:	68ba      	ldr	r2, [r7, #8]
 801360e:	429a      	cmp	r2, r3
 8013610:	bf0c      	ite	eq
 8013612:	2301      	moveq	r3, #1
 8013614:	2300      	movne	r3, #0
 8013616:	b2db      	uxtb	r3, r3
 8013618:	461a      	mov	r2, r3
 801361a:	79fb      	ldrb	r3, [r7, #7]
 801361c:	429a      	cmp	r2, r3
 801361e:	d0a0      	beq.n	8013562 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013620:	2300      	movs	r3, #0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3710      	adds	r7, #16
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
	...

0801362c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b096      	sub	sp, #88	@ 0x58
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	4613      	mov	r3, r2
 8013638:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	68ba      	ldr	r2, [r7, #8]
 801363e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	88fa      	ldrh	r2, [r7, #6]
 8013644:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	2200      	movs	r2, #0
 801364c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	2222      	movs	r2, #34	@ 0x22
 8013654:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801365e:	2b00      	cmp	r3, #0
 8013660:	d02d      	beq.n	80136be <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013668:	4a40      	ldr	r2, [pc, #256]	@ (801376c <UART_Start_Receive_DMA+0x140>)
 801366a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013672:	4a3f      	ldr	r2, [pc, #252]	@ (8013770 <UART_Start_Receive_DMA+0x144>)
 8013674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801367c:	4a3d      	ldr	r2, [pc, #244]	@ (8013774 <UART_Start_Receive_DMA+0x148>)
 801367e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013686:	2200      	movs	r2, #0
 8013688:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	3324      	adds	r3, #36	@ 0x24
 8013696:	4619      	mov	r1, r3
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801369c:	461a      	mov	r2, r3
 801369e:	88fb      	ldrh	r3, [r7, #6]
 80136a0:	f7f1 f850 	bl	8004744 <HAL_DMA_Start_IT>
 80136a4:	4603      	mov	r3, r0
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d009      	beq.n	80136be <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	2210      	movs	r2, #16
 80136ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	2220      	movs	r2, #32
 80136b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80136ba:	2301      	movs	r3, #1
 80136bc:	e051      	b.n	8013762 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	691b      	ldr	r3, [r3, #16]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d018      	beq.n	80136f8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136ce:	e853 3f00 	ldrex	r3, [r3]
 80136d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80136d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80136da:	657b      	str	r3, [r7, #84]	@ 0x54
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	461a      	mov	r2, r3
 80136e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136e6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80136ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80136ec:	e841 2300 	strex	r3, r2, [r1]
 80136f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80136f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d1e6      	bne.n	80136c6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	3308      	adds	r3, #8
 80136fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013702:	e853 3f00 	ldrex	r3, [r3]
 8013706:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801370a:	f043 0301 	orr.w	r3, r3, #1
 801370e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	3308      	adds	r3, #8
 8013716:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013718:	637a      	str	r2, [r7, #52]	@ 0x34
 801371a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801371c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801371e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013720:	e841 2300 	strex	r3, r2, [r1]
 8013724:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8013726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013728:	2b00      	cmp	r3, #0
 801372a:	d1e5      	bne.n	80136f8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	3308      	adds	r3, #8
 8013732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	e853 3f00 	ldrex	r3, [r3]
 801373a:	613b      	str	r3, [r7, #16]
   return(result);
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	3308      	adds	r3, #8
 801374a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801374c:	623a      	str	r2, [r7, #32]
 801374e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013750:	69f9      	ldr	r1, [r7, #28]
 8013752:	6a3a      	ldr	r2, [r7, #32]
 8013754:	e841 2300 	strex	r3, r2, [r1]
 8013758:	61bb      	str	r3, [r7, #24]
   return(result);
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d1e5      	bne.n	801372c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013760:	2300      	movs	r3, #0
}
 8013762:	4618      	mov	r0, r3
 8013764:	3758      	adds	r7, #88	@ 0x58
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	080138c9 	.word	0x080138c9
 8013770:	080139f1 	.word	0x080139f1
 8013774:	08013a2f 	.word	0x08013a2f

08013778 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013778:	b480      	push	{r7}
 801377a:	b08f      	sub	sp, #60	@ 0x3c
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013786:	6a3b      	ldr	r3, [r7, #32]
 8013788:	e853 3f00 	ldrex	r3, [r3]
 801378c:	61fb      	str	r3, [r7, #28]
   return(result);
 801378e:	69fb      	ldr	r3, [r7, #28]
 8013790:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013794:	637b      	str	r3, [r7, #52]	@ 0x34
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	461a      	mov	r2, r3
 801379c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80137a0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80137a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80137a6:	e841 2300 	strex	r3, r2, [r1]
 80137aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80137ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d1e6      	bne.n	8013780 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	3308      	adds	r3, #8
 80137b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	e853 3f00 	ldrex	r3, [r3]
 80137c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80137c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	3308      	adds	r3, #8
 80137d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80137d2:	61ba      	str	r2, [r7, #24]
 80137d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137d6:	6979      	ldr	r1, [r7, #20]
 80137d8:	69ba      	ldr	r2, [r7, #24]
 80137da:	e841 2300 	strex	r3, r2, [r1]
 80137de:	613b      	str	r3, [r7, #16]
   return(result);
 80137e0:	693b      	ldr	r3, [r7, #16]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d1e5      	bne.n	80137b2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2220      	movs	r2, #32
 80137ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80137ee:	bf00      	nop
 80137f0:	373c      	adds	r7, #60	@ 0x3c
 80137f2:	46bd      	mov	sp, r7
 80137f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f8:	4770      	bx	lr
	...

080137fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80137fc:	b480      	push	{r7}
 80137fe:	b095      	sub	sp, #84	@ 0x54
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801380c:	e853 3f00 	ldrex	r3, [r3]
 8013810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	461a      	mov	r2, r3
 8013820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013822:	643b      	str	r3, [r7, #64]	@ 0x40
 8013824:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801382a:	e841 2300 	strex	r3, r2, [r1]
 801382e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013832:	2b00      	cmp	r3, #0
 8013834:	d1e6      	bne.n	8013804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	3308      	adds	r3, #8
 801383c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801383e:	6a3b      	ldr	r3, [r7, #32]
 8013840:	e853 3f00 	ldrex	r3, [r3]
 8013844:	61fb      	str	r3, [r7, #28]
   return(result);
 8013846:	69fa      	ldr	r2, [r7, #28]
 8013848:	4b1e      	ldr	r3, [pc, #120]	@ (80138c4 <UART_EndRxTransfer+0xc8>)
 801384a:	4013      	ands	r3, r2
 801384c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	3308      	adds	r3, #8
 8013854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801385a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801385c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801385e:	e841 2300 	strex	r3, r2, [r1]
 8013862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013866:	2b00      	cmp	r3, #0
 8013868:	d1e5      	bne.n	8013836 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801386e:	2b01      	cmp	r3, #1
 8013870:	d118      	bne.n	80138a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	e853 3f00 	ldrex	r3, [r3]
 801387e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	f023 0310 	bic.w	r3, r3, #16
 8013886:	647b      	str	r3, [r7, #68]	@ 0x44
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	461a      	mov	r2, r3
 801388e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013890:	61bb      	str	r3, [r7, #24]
 8013892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013894:	6979      	ldr	r1, [r7, #20]
 8013896:	69ba      	ldr	r2, [r7, #24]
 8013898:	e841 2300 	strex	r3, r2, [r1]
 801389c:	613b      	str	r3, [r7, #16]
   return(result);
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d1e6      	bne.n	8013872 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2220      	movs	r2, #32
 80138a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2200      	movs	r2, #0
 80138b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80138b8:	bf00      	nop
 80138ba:	3754      	adds	r7, #84	@ 0x54
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr
 80138c4:	effffffe 	.word	0xeffffffe

080138c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b09c      	sub	sp, #112	@ 0x70
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	69db      	ldr	r3, [r3, #28]
 80138da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80138de:	d071      	beq.n	80139c4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80138e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80138e2:	2200      	movs	r2, #0
 80138e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80138e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138f0:	e853 3f00 	ldrex	r3, [r3]
 80138f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80138f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80138f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80138fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80138fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	461a      	mov	r2, r3
 8013904:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013906:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013908:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801390a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801390c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801390e:	e841 2300 	strex	r3, r2, [r1]
 8013912:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013916:	2b00      	cmp	r3, #0
 8013918:	d1e6      	bne.n	80138e8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801391a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	3308      	adds	r3, #8
 8013920:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013924:	e853 3f00 	ldrex	r3, [r3]
 8013928:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801392a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801392c:	f023 0301 	bic.w	r3, r3, #1
 8013930:	667b      	str	r3, [r7, #100]	@ 0x64
 8013932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	3308      	adds	r3, #8
 8013938:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801393a:	647a      	str	r2, [r7, #68]	@ 0x44
 801393c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801393e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013940:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013942:	e841 2300 	strex	r3, r2, [r1]
 8013946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801394a:	2b00      	cmp	r3, #0
 801394c:	d1e5      	bne.n	801391a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801394e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	3308      	adds	r3, #8
 8013954:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013958:	e853 3f00 	ldrex	r3, [r3]
 801395c:	623b      	str	r3, [r7, #32]
   return(result);
 801395e:	6a3b      	ldr	r3, [r7, #32]
 8013960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013964:	663b      	str	r3, [r7, #96]	@ 0x60
 8013966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	3308      	adds	r3, #8
 801396c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801396e:	633a      	str	r2, [r7, #48]	@ 0x30
 8013970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013976:	e841 2300 	strex	r3, r2, [r1]
 801397a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801397e:	2b00      	cmp	r3, #0
 8013980:	d1e5      	bne.n	801394e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013984:	2220      	movs	r2, #32
 8013986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801398a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801398c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801398e:	2b01      	cmp	r3, #1
 8013990:	d118      	bne.n	80139c4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	e853 3f00 	ldrex	r3, [r3]
 801399e:	60fb      	str	r3, [r7, #12]
   return(result);
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	f023 0310 	bic.w	r3, r3, #16
 80139a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80139a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	461a      	mov	r2, r3
 80139ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80139b0:	61fb      	str	r3, [r7, #28]
 80139b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139b4:	69b9      	ldr	r1, [r7, #24]
 80139b6:	69fa      	ldr	r2, [r7, #28]
 80139b8:	e841 2300 	strex	r3, r2, [r1]
 80139bc:	617b      	str	r3, [r7, #20]
   return(result);
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d1e6      	bne.n	8013992 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80139c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80139c6:	2200      	movs	r2, #0
 80139c8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80139ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80139cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	d107      	bne.n	80139e2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80139d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80139d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80139d8:	4619      	mov	r1, r3
 80139da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80139dc:	f7fe fef8 	bl	80127d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80139e0:	e002      	b.n	80139e8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80139e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80139e4:	f7ed fc84 	bl	80012f0 <HAL_UART_RxCpltCallback>
}
 80139e8:	bf00      	nop
 80139ea:	3770      	adds	r7, #112	@ 0x70
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}

080139f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b084      	sub	sp, #16
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2201      	movs	r2, #1
 8013a02:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a08:	2b01      	cmp	r3, #1
 8013a0a:	d109      	bne.n	8013a20 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013a12:	085b      	lsrs	r3, r3, #1
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	4619      	mov	r1, r3
 8013a18:	68f8      	ldr	r0, [r7, #12]
 8013a1a:	f7fe fed9 	bl	80127d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013a1e:	e002      	b.n	8013a26 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013a20:	68f8      	ldr	r0, [r7, #12]
 8013a22:	f7fe fec1 	bl	80127a8 <HAL_UART_RxHalfCpltCallback>
}
 8013a26:	bf00      	nop
 8013a28:	3710      	adds	r7, #16
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}

08013a2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013a2e:	b580      	push	{r7, lr}
 8013a30:	b086      	sub	sp, #24
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013a42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013a44:	697b      	ldr	r3, [r7, #20]
 8013a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013a4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	689b      	ldr	r3, [r3, #8]
 8013a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013a56:	2b80      	cmp	r3, #128	@ 0x80
 8013a58:	d109      	bne.n	8013a6e <UART_DMAError+0x40>
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	2b21      	cmp	r3, #33	@ 0x21
 8013a5e:	d106      	bne.n	8013a6e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	2200      	movs	r2, #0
 8013a64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013a68:	6978      	ldr	r0, [r7, #20]
 8013a6a:	f7ff fe85 	bl	8013778 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	689b      	ldr	r3, [r3, #8]
 8013a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a78:	2b40      	cmp	r3, #64	@ 0x40
 8013a7a:	d109      	bne.n	8013a90 <UART_DMAError+0x62>
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	2b22      	cmp	r3, #34	@ 0x22
 8013a80:	d106      	bne.n	8013a90 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	2200      	movs	r2, #0
 8013a86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013a8a:	6978      	ldr	r0, [r7, #20]
 8013a8c:	f7ff feb6 	bl	80137fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013a96:	f043 0210 	orr.w	r2, r3, #16
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013aa0:	6978      	ldr	r0, [r7, #20]
 8013aa2:	f7fe fe8b 	bl	80127bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013aa6:	bf00      	nop
 8013aa8:	3718      	adds	r7, #24
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}

08013aae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013aae:	b580      	push	{r7, lr}
 8013ab0:	b084      	sub	sp, #16
 8013ab2:	af00      	add	r7, sp, #0
 8013ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013aba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013ac4:	68f8      	ldr	r0, [r7, #12]
 8013ac6:	f7fe fe79 	bl	80127bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013aca:	bf00      	nop
 8013acc:	3710      	adds	r7, #16
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}

08013ad2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b088      	sub	sp, #32
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	e853 3f00 	ldrex	r3, [r3]
 8013ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013aee:	61fb      	str	r3, [r7, #28]
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	461a      	mov	r2, r3
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	61bb      	str	r3, [r7, #24]
 8013afa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013afc:	6979      	ldr	r1, [r7, #20]
 8013afe:	69ba      	ldr	r2, [r7, #24]
 8013b00:	e841 2300 	strex	r3, r2, [r1]
 8013b04:	613b      	str	r3, [r7, #16]
   return(result);
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d1e6      	bne.n	8013ada <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2220      	movs	r2, #32
 8013b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2200      	movs	r2, #0
 8013b18:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7fe fe3a 	bl	8012794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013b20:	bf00      	nop
 8013b22:	3720      	adds	r7, #32
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013b30:	bf00      	nop
 8013b32:	370c      	adds	r7, #12
 8013b34:	46bd      	mov	sp, r7
 8013b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3a:	4770      	bx	lr

08013b3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	b083      	sub	sp, #12
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013b44:	bf00      	nop
 8013b46:	370c      	adds	r7, #12
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4e:	4770      	bx	lr

08013b50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013b50:	b480      	push	{r7}
 8013b52:	b083      	sub	sp, #12
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013b58:	bf00      	nop
 8013b5a:	370c      	adds	r7, #12
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b62:	4770      	bx	lr

08013b64 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b084      	sub	sp, #16
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d101      	bne.n	8013b7a <HAL_UARTEx_EnableFifoMode+0x16>
 8013b76:	2302      	movs	r3, #2
 8013b78:	e02b      	b.n	8013bd2 <HAL_UARTEx_EnableFifoMode+0x6e>
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2224      	movs	r2, #36	@ 0x24
 8013b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	681a      	ldr	r2, [r3, #0]
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f022 0201 	bic.w	r2, r2, #1
 8013ba0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013ba8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8013bb0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	68fa      	ldr	r2, [r7, #12]
 8013bb8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f000 f88a 	bl	8013cd4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2220      	movs	r2, #32
 8013bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2200      	movs	r2, #0
 8013bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013bd0:	2300      	movs	r3, #0
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3710      	adds	r7, #16
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}

08013bda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013bda:	b580      	push	{r7, lr}
 8013bdc:	b084      	sub	sp, #16
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
 8013be2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	d101      	bne.n	8013bf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013bee:	2302      	movs	r3, #2
 8013bf0:	e02d      	b.n	8013c4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2201      	movs	r2, #1
 8013bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2224      	movs	r2, #36	@ 0x24
 8013bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	f022 0201 	bic.w	r2, r2, #1
 8013c18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	689b      	ldr	r3, [r3, #8]
 8013c20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	683a      	ldr	r2, [r7, #0]
 8013c2a:	430a      	orrs	r2, r1
 8013c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	f000 f850 	bl	8013cd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	68fa      	ldr	r2, [r7, #12]
 8013c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2220      	movs	r2, #32
 8013c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2200      	movs	r2, #0
 8013c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013c4c:	2300      	movs	r3, #0
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	3710      	adds	r7, #16
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}

08013c56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013c56:	b580      	push	{r7, lr}
 8013c58:	b084      	sub	sp, #16
 8013c5a:	af00      	add	r7, sp, #0
 8013c5c:	6078      	str	r0, [r7, #4]
 8013c5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013c66:	2b01      	cmp	r3, #1
 8013c68:	d101      	bne.n	8013c6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013c6a:	2302      	movs	r3, #2
 8013c6c:	e02d      	b.n	8013cca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2201      	movs	r2, #1
 8013c72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2224      	movs	r2, #36	@ 0x24
 8013c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	681a      	ldr	r2, [r3, #0]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	f022 0201 	bic.w	r2, r2, #1
 8013c94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	689b      	ldr	r3, [r3, #8]
 8013c9c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	683a      	ldr	r2, [r7, #0]
 8013ca6:	430a      	orrs	r2, r1
 8013ca8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f000 f812 	bl	8013cd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	68fa      	ldr	r2, [r7, #12]
 8013cb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2220      	movs	r2, #32
 8013cbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013cc8:	2300      	movs	r3, #0
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	3710      	adds	r7, #16
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
	...

08013cd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b085      	sub	sp, #20
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d108      	bne.n	8013cf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2201      	movs	r2, #1
 8013cf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013cf4:	e031      	b.n	8013d5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013cf6:	2310      	movs	r3, #16
 8013cf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013cfa:	2310      	movs	r3, #16
 8013cfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	689b      	ldr	r3, [r3, #8]
 8013d04:	0e5b      	lsrs	r3, r3, #25
 8013d06:	b2db      	uxtb	r3, r3
 8013d08:	f003 0307 	and.w	r3, r3, #7
 8013d0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	689b      	ldr	r3, [r3, #8]
 8013d14:	0f5b      	lsrs	r3, r3, #29
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	f003 0307 	and.w	r3, r3, #7
 8013d1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013d1e:	7bbb      	ldrb	r3, [r7, #14]
 8013d20:	7b3a      	ldrb	r2, [r7, #12]
 8013d22:	4911      	ldr	r1, [pc, #68]	@ (8013d68 <UARTEx_SetNbDataToProcess+0x94>)
 8013d24:	5c8a      	ldrb	r2, [r1, r2]
 8013d26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013d2a:	7b3a      	ldrb	r2, [r7, #12]
 8013d2c:	490f      	ldr	r1, [pc, #60]	@ (8013d6c <UARTEx_SetNbDataToProcess+0x98>)
 8013d2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d34:	b29a      	uxth	r2, r3
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013d3c:	7bfb      	ldrb	r3, [r7, #15]
 8013d3e:	7b7a      	ldrb	r2, [r7, #13]
 8013d40:	4909      	ldr	r1, [pc, #36]	@ (8013d68 <UARTEx_SetNbDataToProcess+0x94>)
 8013d42:	5c8a      	ldrb	r2, [r1, r2]
 8013d44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013d48:	7b7a      	ldrb	r2, [r7, #13]
 8013d4a:	4908      	ldr	r1, [pc, #32]	@ (8013d6c <UARTEx_SetNbDataToProcess+0x98>)
 8013d4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013d4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d52:	b29a      	uxth	r2, r3
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013d5a:	bf00      	nop
 8013d5c:	3714      	adds	r7, #20
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d64:	4770      	bx	lr
 8013d66:	bf00      	nop
 8013d68:	08019128 	.word	0x08019128
 8013d6c:	08019130 	.word	0x08019130

08013d70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013d70:	b084      	sub	sp, #16
 8013d72:	b580      	push	{r7, lr}
 8013d74:	b084      	sub	sp, #16
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
 8013d7a:	f107 001c 	add.w	r0, r7, #28
 8013d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013d82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d121      	bne.n	8013dce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	68da      	ldr	r2, [r3, #12]
 8013d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8013e4c <USB_CoreInit+0xdc>)
 8013d9c:	4013      	ands	r3, r2
 8013d9e:	687a      	ldr	r2, [r7, #4]
 8013da0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	68db      	ldr	r3, [r3, #12]
 8013da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013dae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013db2:	2b01      	cmp	r3, #1
 8013db4:	d105      	bne.n	8013dc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	68db      	ldr	r3, [r3, #12]
 8013dba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013dc2:	6878      	ldr	r0, [r7, #4]
 8013dc4:	f001 fafa 	bl	80153bc <USB_CoreReset>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	73fb      	strb	r3, [r7, #15]
 8013dcc:	e01b      	b.n	8013e06 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f001 faee 	bl	80153bc <USB_CoreReset>
 8013de0:	4603      	mov	r3, r0
 8013de2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013de4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d106      	bne.n	8013dfa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013df0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	639a      	str	r2, [r3, #56]	@ 0x38
 8013df8:	e005      	b.n	8013e06 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013e06:	7fbb      	ldrb	r3, [r7, #30]
 8013e08:	2b01      	cmp	r3, #1
 8013e0a:	d116      	bne.n	8013e3a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8013e50 <USB_CoreInit+0xe0>)
 8013e1c:	4313      	orrs	r3, r2
 8013e1e:	687a      	ldr	r2, [r7, #4]
 8013e20:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	689b      	ldr	r3, [r3, #8]
 8013e26:	f043 0206 	orr.w	r2, r3, #6
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	689b      	ldr	r3, [r3, #8]
 8013e32:	f043 0220 	orr.w	r2, r3, #32
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3710      	adds	r7, #16
 8013e40:	46bd      	mov	sp, r7
 8013e42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013e46:	b004      	add	sp, #16
 8013e48:	4770      	bx	lr
 8013e4a:	bf00      	nop
 8013e4c:	ffbdffbf 	.word	0xffbdffbf
 8013e50:	03ee0000 	.word	0x03ee0000

08013e54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013e54:	b480      	push	{r7}
 8013e56:	b087      	sub	sp, #28
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	60f8      	str	r0, [r7, #12]
 8013e5c:	60b9      	str	r1, [r7, #8]
 8013e5e:	4613      	mov	r3, r2
 8013e60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013e62:	79fb      	ldrb	r3, [r7, #7]
 8013e64:	2b02      	cmp	r3, #2
 8013e66:	d165      	bne.n	8013f34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	4a41      	ldr	r2, [pc, #260]	@ (8013f70 <USB_SetTurnaroundTime+0x11c>)
 8013e6c:	4293      	cmp	r3, r2
 8013e6e:	d906      	bls.n	8013e7e <USB_SetTurnaroundTime+0x2a>
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	4a40      	ldr	r2, [pc, #256]	@ (8013f74 <USB_SetTurnaroundTime+0x120>)
 8013e74:	4293      	cmp	r3, r2
 8013e76:	d202      	bcs.n	8013e7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013e78:	230f      	movs	r3, #15
 8013e7a:	617b      	str	r3, [r7, #20]
 8013e7c:	e062      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	4a3c      	ldr	r2, [pc, #240]	@ (8013f74 <USB_SetTurnaroundTime+0x120>)
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d306      	bcc.n	8013e94 <USB_SetTurnaroundTime+0x40>
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	4a3b      	ldr	r2, [pc, #236]	@ (8013f78 <USB_SetTurnaroundTime+0x124>)
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d202      	bcs.n	8013e94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013e8e:	230e      	movs	r3, #14
 8013e90:	617b      	str	r3, [r7, #20]
 8013e92:	e057      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	4a38      	ldr	r2, [pc, #224]	@ (8013f78 <USB_SetTurnaroundTime+0x124>)
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	d306      	bcc.n	8013eaa <USB_SetTurnaroundTime+0x56>
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	4a37      	ldr	r2, [pc, #220]	@ (8013f7c <USB_SetTurnaroundTime+0x128>)
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	d202      	bcs.n	8013eaa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013ea4:	230d      	movs	r3, #13
 8013ea6:	617b      	str	r3, [r7, #20]
 8013ea8:	e04c      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	4a33      	ldr	r2, [pc, #204]	@ (8013f7c <USB_SetTurnaroundTime+0x128>)
 8013eae:	4293      	cmp	r3, r2
 8013eb0:	d306      	bcc.n	8013ec0 <USB_SetTurnaroundTime+0x6c>
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	4a32      	ldr	r2, [pc, #200]	@ (8013f80 <USB_SetTurnaroundTime+0x12c>)
 8013eb6:	4293      	cmp	r3, r2
 8013eb8:	d802      	bhi.n	8013ec0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013eba:	230c      	movs	r3, #12
 8013ebc:	617b      	str	r3, [r7, #20]
 8013ebe:	e041      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8013f80 <USB_SetTurnaroundTime+0x12c>)
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	d906      	bls.n	8013ed6 <USB_SetTurnaroundTime+0x82>
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	4a2e      	ldr	r2, [pc, #184]	@ (8013f84 <USB_SetTurnaroundTime+0x130>)
 8013ecc:	4293      	cmp	r3, r2
 8013ece:	d802      	bhi.n	8013ed6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013ed0:	230b      	movs	r3, #11
 8013ed2:	617b      	str	r3, [r7, #20]
 8013ed4:	e036      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8013f84 <USB_SetTurnaroundTime+0x130>)
 8013eda:	4293      	cmp	r3, r2
 8013edc:	d906      	bls.n	8013eec <USB_SetTurnaroundTime+0x98>
 8013ede:	68bb      	ldr	r3, [r7, #8]
 8013ee0:	4a29      	ldr	r2, [pc, #164]	@ (8013f88 <USB_SetTurnaroundTime+0x134>)
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	d802      	bhi.n	8013eec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013ee6:	230a      	movs	r3, #10
 8013ee8:	617b      	str	r3, [r7, #20]
 8013eea:	e02b      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	4a26      	ldr	r2, [pc, #152]	@ (8013f88 <USB_SetTurnaroundTime+0x134>)
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d906      	bls.n	8013f02 <USB_SetTurnaroundTime+0xae>
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	4a25      	ldr	r2, [pc, #148]	@ (8013f8c <USB_SetTurnaroundTime+0x138>)
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d202      	bcs.n	8013f02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013efc:	2309      	movs	r3, #9
 8013efe:	617b      	str	r3, [r7, #20]
 8013f00:	e020      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	4a21      	ldr	r2, [pc, #132]	@ (8013f8c <USB_SetTurnaroundTime+0x138>)
 8013f06:	4293      	cmp	r3, r2
 8013f08:	d306      	bcc.n	8013f18 <USB_SetTurnaroundTime+0xc4>
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	4a20      	ldr	r2, [pc, #128]	@ (8013f90 <USB_SetTurnaroundTime+0x13c>)
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d802      	bhi.n	8013f18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013f12:	2308      	movs	r3, #8
 8013f14:	617b      	str	r3, [r7, #20]
 8013f16:	e015      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8013f90 <USB_SetTurnaroundTime+0x13c>)
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	d906      	bls.n	8013f2e <USB_SetTurnaroundTime+0xda>
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	4a1c      	ldr	r2, [pc, #112]	@ (8013f94 <USB_SetTurnaroundTime+0x140>)
 8013f24:	4293      	cmp	r3, r2
 8013f26:	d202      	bcs.n	8013f2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013f28:	2307      	movs	r3, #7
 8013f2a:	617b      	str	r3, [r7, #20]
 8013f2c:	e00a      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013f2e:	2306      	movs	r3, #6
 8013f30:	617b      	str	r3, [r7, #20]
 8013f32:	e007      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013f34:	79fb      	ldrb	r3, [r7, #7]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d102      	bne.n	8013f40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013f3a:	2309      	movs	r3, #9
 8013f3c:	617b      	str	r3, [r7, #20]
 8013f3e:	e001      	b.n	8013f44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013f40:	2309      	movs	r3, #9
 8013f42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	68db      	ldr	r3, [r3, #12]
 8013f48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	68da      	ldr	r2, [r3, #12]
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	029b      	lsls	r3, r3, #10
 8013f58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8013f5c:	431a      	orrs	r2, r3
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013f62:	2300      	movs	r3, #0
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	371c      	adds	r7, #28
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr
 8013f70:	00d8acbf 	.word	0x00d8acbf
 8013f74:	00e4e1c0 	.word	0x00e4e1c0
 8013f78:	00f42400 	.word	0x00f42400
 8013f7c:	01067380 	.word	0x01067380
 8013f80:	011a499f 	.word	0x011a499f
 8013f84:	01312cff 	.word	0x01312cff
 8013f88:	014ca43f 	.word	0x014ca43f
 8013f8c:	016e3600 	.word	0x016e3600
 8013f90:	01a6ab1f 	.word	0x01a6ab1f
 8013f94:	01e84800 	.word	0x01e84800

08013f98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	689b      	ldr	r3, [r3, #8]
 8013fa4:	f043 0201 	orr.w	r2, r3, #1
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013fac:	2300      	movs	r3, #0
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	370c      	adds	r7, #12
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb8:	4770      	bx	lr

08013fba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013fba:	b480      	push	{r7}
 8013fbc:	b083      	sub	sp, #12
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	689b      	ldr	r3, [r3, #8]
 8013fc6:	f023 0201 	bic.w	r2, r3, #1
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013fce:	2300      	movs	r3, #0
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	370c      	adds	r7, #12
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fda:	4770      	bx	lr

08013fdc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b084      	sub	sp, #16
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	460b      	mov	r3, r1
 8013fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	68db      	ldr	r3, [r3, #12]
 8013ff0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013ff8:	78fb      	ldrb	r3, [r7, #3]
 8013ffa:	2b01      	cmp	r3, #1
 8013ffc:	d115      	bne.n	801402a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	68db      	ldr	r3, [r3, #12]
 8014002:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801400a:	200a      	movs	r0, #10
 801400c:	f7ee fbd4 	bl	80027b8 <HAL_Delay>
      ms += 10U;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	330a      	adds	r3, #10
 8014014:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f001 f93f 	bl	801529a <USB_GetMode>
 801401c:	4603      	mov	r3, r0
 801401e:	2b01      	cmp	r3, #1
 8014020:	d01e      	beq.n	8014060 <USB_SetCurrentMode+0x84>
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	2bc7      	cmp	r3, #199	@ 0xc7
 8014026:	d9f0      	bls.n	801400a <USB_SetCurrentMode+0x2e>
 8014028:	e01a      	b.n	8014060 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801402a:	78fb      	ldrb	r3, [r7, #3]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d115      	bne.n	801405c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801403c:	200a      	movs	r0, #10
 801403e:	f7ee fbbb 	bl	80027b8 <HAL_Delay>
      ms += 10U;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	330a      	adds	r3, #10
 8014046:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f001 f926 	bl	801529a <USB_GetMode>
 801404e:	4603      	mov	r3, r0
 8014050:	2b00      	cmp	r3, #0
 8014052:	d005      	beq.n	8014060 <USB_SetCurrentMode+0x84>
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	2bc7      	cmp	r3, #199	@ 0xc7
 8014058:	d9f0      	bls.n	801403c <USB_SetCurrentMode+0x60>
 801405a:	e001      	b.n	8014060 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801405c:	2301      	movs	r3, #1
 801405e:	e005      	b.n	801406c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	2bc8      	cmp	r3, #200	@ 0xc8
 8014064:	d101      	bne.n	801406a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014066:	2301      	movs	r3, #1
 8014068:	e000      	b.n	801406c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801406a:	2300      	movs	r3, #0
}
 801406c:	4618      	mov	r0, r3
 801406e:	3710      	adds	r7, #16
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}

08014074 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014074:	b084      	sub	sp, #16
 8014076:	b580      	push	{r7, lr}
 8014078:	b086      	sub	sp, #24
 801407a:	af00      	add	r7, sp, #0
 801407c:	6078      	str	r0, [r7, #4]
 801407e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8014082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014086:	2300      	movs	r3, #0
 8014088:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801408e:	2300      	movs	r3, #0
 8014090:	613b      	str	r3, [r7, #16]
 8014092:	e009      	b.n	80140a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014094:	687a      	ldr	r2, [r7, #4]
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	3340      	adds	r3, #64	@ 0x40
 801409a:	009b      	lsls	r3, r3, #2
 801409c:	4413      	add	r3, r2
 801409e:	2200      	movs	r2, #0
 80140a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	3301      	adds	r3, #1
 80140a6:	613b      	str	r3, [r7, #16]
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	2b0e      	cmp	r3, #14
 80140ac:	d9f2      	bls.n	8014094 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80140ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d11c      	bne.n	80140f0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	68fa      	ldr	r2, [r7, #12]
 80140c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80140c4:	f043 0302 	orr.w	r3, r3, #2
 80140c8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140ce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	601a      	str	r2, [r3, #0]
 80140ee:	e005      	b.n	80140fc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014102:	461a      	mov	r2, r3
 8014104:	2300      	movs	r3, #0
 8014106:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014108:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801410c:	2b01      	cmp	r3, #1
 801410e:	d10d      	bne.n	801412c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014114:	2b00      	cmp	r3, #0
 8014116:	d104      	bne.n	8014122 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014118:	2100      	movs	r1, #0
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 f968 	bl	80143f0 <USB_SetDevSpeed>
 8014120:	e008      	b.n	8014134 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014122:	2101      	movs	r1, #1
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f000 f963 	bl	80143f0 <USB_SetDevSpeed>
 801412a:	e003      	b.n	8014134 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801412c:	2103      	movs	r1, #3
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f000 f95e 	bl	80143f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014134:	2110      	movs	r1, #16
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f000 f8fa 	bl	8014330 <USB_FlushTxFifo>
 801413c:	4603      	mov	r3, r0
 801413e:	2b00      	cmp	r3, #0
 8014140:	d001      	beq.n	8014146 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8014142:	2301      	movs	r3, #1
 8014144:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f000 f924 	bl	8014394 <USB_FlushRxFifo>
 801414c:	4603      	mov	r3, r0
 801414e:	2b00      	cmp	r3, #0
 8014150:	d001      	beq.n	8014156 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8014152:	2301      	movs	r3, #1
 8014154:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801415c:	461a      	mov	r2, r3
 801415e:	2300      	movs	r3, #0
 8014160:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014168:	461a      	mov	r2, r3
 801416a:	2300      	movs	r3, #0
 801416c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014174:	461a      	mov	r2, r3
 8014176:	2300      	movs	r3, #0
 8014178:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801417a:	2300      	movs	r3, #0
 801417c:	613b      	str	r3, [r7, #16]
 801417e:	e043      	b.n	8014208 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	015a      	lsls	r2, r3, #5
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	4413      	add	r3, r2
 8014188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014192:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014196:	d118      	bne.n	80141ca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d10a      	bne.n	80141b4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801419e:	693b      	ldr	r3, [r7, #16]
 80141a0:	015a      	lsls	r2, r3, #5
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	4413      	add	r3, r2
 80141a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141aa:	461a      	mov	r2, r3
 80141ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80141b0:	6013      	str	r3, [r2, #0]
 80141b2:	e013      	b.n	80141dc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80141b4:	693b      	ldr	r3, [r7, #16]
 80141b6:	015a      	lsls	r2, r3, #5
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	4413      	add	r3, r2
 80141bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141c0:	461a      	mov	r2, r3
 80141c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80141c6:	6013      	str	r3, [r2, #0]
 80141c8:	e008      	b.n	80141dc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80141ca:	693b      	ldr	r3, [r7, #16]
 80141cc:	015a      	lsls	r2, r3, #5
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	4413      	add	r3, r2
 80141d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141d6:	461a      	mov	r2, r3
 80141d8:	2300      	movs	r3, #0
 80141da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	015a      	lsls	r2, r3, #5
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	4413      	add	r3, r2
 80141e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141e8:	461a      	mov	r2, r3
 80141ea:	2300      	movs	r3, #0
 80141ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	015a      	lsls	r2, r3, #5
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	4413      	add	r3, r2
 80141f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141fa:	461a      	mov	r2, r3
 80141fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014200:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014202:	693b      	ldr	r3, [r7, #16]
 8014204:	3301      	adds	r3, #1
 8014206:	613b      	str	r3, [r7, #16]
 8014208:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801420c:	461a      	mov	r2, r3
 801420e:	693b      	ldr	r3, [r7, #16]
 8014210:	4293      	cmp	r3, r2
 8014212:	d3b5      	bcc.n	8014180 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014214:	2300      	movs	r3, #0
 8014216:	613b      	str	r3, [r7, #16]
 8014218:	e043      	b.n	80142a2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801421a:	693b      	ldr	r3, [r7, #16]
 801421c:	015a      	lsls	r2, r3, #5
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	4413      	add	r3, r2
 8014222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801422c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014230:	d118      	bne.n	8014264 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d10a      	bne.n	801424e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	015a      	lsls	r2, r3, #5
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	4413      	add	r3, r2
 8014240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014244:	461a      	mov	r2, r3
 8014246:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801424a:	6013      	str	r3, [r2, #0]
 801424c:	e013      	b.n	8014276 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	015a      	lsls	r2, r3, #5
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	4413      	add	r3, r2
 8014256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801425a:	461a      	mov	r2, r3
 801425c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014260:	6013      	str	r3, [r2, #0]
 8014262:	e008      	b.n	8014276 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	015a      	lsls	r2, r3, #5
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	4413      	add	r3, r2
 801426c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014270:	461a      	mov	r2, r3
 8014272:	2300      	movs	r3, #0
 8014274:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	015a      	lsls	r2, r3, #5
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	4413      	add	r3, r2
 801427e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014282:	461a      	mov	r2, r3
 8014284:	2300      	movs	r3, #0
 8014286:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	015a      	lsls	r2, r3, #5
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	4413      	add	r3, r2
 8014290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014294:	461a      	mov	r2, r3
 8014296:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801429a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	3301      	adds	r3, #1
 80142a0:	613b      	str	r3, [r7, #16]
 80142a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80142a6:	461a      	mov	r2, r3
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	4293      	cmp	r3, r2
 80142ac:	d3b5      	bcc.n	801421a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80142b4:	691b      	ldr	r3, [r3, #16]
 80142b6:	68fa      	ldr	r2, [r7, #12]
 80142b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80142bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80142c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2200      	movs	r2, #0
 80142c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80142ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80142d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d105      	bne.n	80142e4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	699b      	ldr	r3, [r3, #24]
 80142dc:	f043 0210 	orr.w	r2, r3, #16
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	699a      	ldr	r2, [r3, #24]
 80142e8:	4b0f      	ldr	r3, [pc, #60]	@ (8014328 <USB_DevInit+0x2b4>)
 80142ea:	4313      	orrs	r3, r2
 80142ec:	687a      	ldr	r2, [r7, #4]
 80142ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80142f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d005      	beq.n	8014304 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	699b      	ldr	r3, [r3, #24]
 80142fc:	f043 0208 	orr.w	r2, r3, #8
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014304:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014308:	2b01      	cmp	r3, #1
 801430a:	d105      	bne.n	8014318 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	699a      	ldr	r2, [r3, #24]
 8014310:	4b06      	ldr	r3, [pc, #24]	@ (801432c <USB_DevInit+0x2b8>)
 8014312:	4313      	orrs	r3, r2
 8014314:	687a      	ldr	r2, [r7, #4]
 8014316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014318:	7dfb      	ldrb	r3, [r7, #23]
}
 801431a:	4618      	mov	r0, r3
 801431c:	3718      	adds	r7, #24
 801431e:	46bd      	mov	sp, r7
 8014320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014324:	b004      	add	sp, #16
 8014326:	4770      	bx	lr
 8014328:	803c3800 	.word	0x803c3800
 801432c:	40000004 	.word	0x40000004

08014330 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014330:	b480      	push	{r7}
 8014332:	b085      	sub	sp, #20
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801433a:	2300      	movs	r3, #0
 801433c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	3301      	adds	r3, #1
 8014342:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801434a:	d901      	bls.n	8014350 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801434c:	2303      	movs	r3, #3
 801434e:	e01b      	b.n	8014388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	691b      	ldr	r3, [r3, #16]
 8014354:	2b00      	cmp	r3, #0
 8014356:	daf2      	bge.n	801433e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014358:	2300      	movs	r3, #0
 801435a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	019b      	lsls	r3, r3, #6
 8014360:	f043 0220 	orr.w	r2, r3, #32
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	3301      	adds	r3, #1
 801436c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014374:	d901      	bls.n	801437a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014376:	2303      	movs	r3, #3
 8014378:	e006      	b.n	8014388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	691b      	ldr	r3, [r3, #16]
 801437e:	f003 0320 	and.w	r3, r3, #32
 8014382:	2b20      	cmp	r3, #32
 8014384:	d0f0      	beq.n	8014368 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014386:	2300      	movs	r3, #0
}
 8014388:	4618      	mov	r0, r3
 801438a:	3714      	adds	r7, #20
 801438c:	46bd      	mov	sp, r7
 801438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014392:	4770      	bx	lr

08014394 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014394:	b480      	push	{r7}
 8014396:	b085      	sub	sp, #20
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801439c:	2300      	movs	r3, #0
 801439e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	3301      	adds	r3, #1
 80143a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80143ac:	d901      	bls.n	80143b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80143ae:	2303      	movs	r3, #3
 80143b0:	e018      	b.n	80143e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	691b      	ldr	r3, [r3, #16]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	daf2      	bge.n	80143a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80143ba:	2300      	movs	r3, #0
 80143bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2210      	movs	r2, #16
 80143c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	3301      	adds	r3, #1
 80143c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80143d0:	d901      	bls.n	80143d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80143d2:	2303      	movs	r3, #3
 80143d4:	e006      	b.n	80143e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	691b      	ldr	r3, [r3, #16]
 80143da:	f003 0310 	and.w	r3, r3, #16
 80143de:	2b10      	cmp	r3, #16
 80143e0:	d0f0      	beq.n	80143c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80143e2:	2300      	movs	r3, #0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3714      	adds	r7, #20
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr

080143f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80143f0:	b480      	push	{r7}
 80143f2:	b085      	sub	sp, #20
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	460b      	mov	r3, r1
 80143fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	78fb      	ldrb	r3, [r7, #3]
 801440a:	68f9      	ldr	r1, [r7, #12]
 801440c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014410:	4313      	orrs	r3, r2
 8014412:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014414:	2300      	movs	r3, #0
}
 8014416:	4618      	mov	r0, r3
 8014418:	3714      	adds	r7, #20
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr

08014422 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8014422:	b480      	push	{r7}
 8014424:	b087      	sub	sp, #28
 8014426:	af00      	add	r7, sp, #0
 8014428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014434:	689b      	ldr	r3, [r3, #8]
 8014436:	f003 0306 	and.w	r3, r3, #6
 801443a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d102      	bne.n	8014448 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014442:	2300      	movs	r3, #0
 8014444:	75fb      	strb	r3, [r7, #23]
 8014446:	e00a      	b.n	801445e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	2b02      	cmp	r3, #2
 801444c:	d002      	beq.n	8014454 <USB_GetDevSpeed+0x32>
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	2b06      	cmp	r3, #6
 8014452:	d102      	bne.n	801445a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014454:	2302      	movs	r3, #2
 8014456:	75fb      	strb	r3, [r7, #23]
 8014458:	e001      	b.n	801445e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801445a:	230f      	movs	r3, #15
 801445c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801445e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014460:	4618      	mov	r0, r3
 8014462:	371c      	adds	r7, #28
 8014464:	46bd      	mov	sp, r7
 8014466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446a:	4770      	bx	lr

0801446c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801446c:	b480      	push	{r7}
 801446e:	b085      	sub	sp, #20
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
 8014474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801447a:	683b      	ldr	r3, [r7, #0]
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	785b      	ldrb	r3, [r3, #1]
 8014484:	2b01      	cmp	r3, #1
 8014486:	d139      	bne.n	80144fc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801448e:	69da      	ldr	r2, [r3, #28]
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	f003 030f 	and.w	r3, r3, #15
 8014498:	2101      	movs	r1, #1
 801449a:	fa01 f303 	lsl.w	r3, r1, r3
 801449e:	b29b      	uxth	r3, r3
 80144a0:	68f9      	ldr	r1, [r7, #12]
 80144a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80144a6:	4313      	orrs	r3, r2
 80144a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	015a      	lsls	r2, r3, #5
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	4413      	add	r3, r2
 80144b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d153      	bne.n	8014568 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	015a      	lsls	r2, r3, #5
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	4413      	add	r3, r2
 80144c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144cc:	681a      	ldr	r2, [r3, #0]
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	689b      	ldr	r3, [r3, #8]
 80144d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	791b      	ldrb	r3, [r3, #4]
 80144da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80144dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	059b      	lsls	r3, r3, #22
 80144e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80144e4:	431a      	orrs	r2, r3
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	0159      	lsls	r1, r3, #5
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	440b      	add	r3, r1
 80144ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144f2:	4619      	mov	r1, r3
 80144f4:	4b20      	ldr	r3, [pc, #128]	@ (8014578 <USB_ActivateEndpoint+0x10c>)
 80144f6:	4313      	orrs	r3, r2
 80144f8:	600b      	str	r3, [r1, #0]
 80144fa:	e035      	b.n	8014568 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014502:	69da      	ldr	r2, [r3, #28]
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	f003 030f 	and.w	r3, r3, #15
 801450c:	2101      	movs	r1, #1
 801450e:	fa01 f303 	lsl.w	r3, r1, r3
 8014512:	041b      	lsls	r3, r3, #16
 8014514:	68f9      	ldr	r1, [r7, #12]
 8014516:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801451a:	4313      	orrs	r3, r2
 801451c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	015a      	lsls	r2, r3, #5
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	4413      	add	r3, r2
 8014526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014530:	2b00      	cmp	r3, #0
 8014532:	d119      	bne.n	8014568 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	015a      	lsls	r2, r3, #5
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	4413      	add	r3, r2
 801453c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014540:	681a      	ldr	r2, [r3, #0]
 8014542:	683b      	ldr	r3, [r7, #0]
 8014544:	689b      	ldr	r3, [r3, #8]
 8014546:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	791b      	ldrb	r3, [r3, #4]
 801454e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014550:	430b      	orrs	r3, r1
 8014552:	431a      	orrs	r2, r3
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	0159      	lsls	r1, r3, #5
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	440b      	add	r3, r1
 801455c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014560:	4619      	mov	r1, r3
 8014562:	4b05      	ldr	r3, [pc, #20]	@ (8014578 <USB_ActivateEndpoint+0x10c>)
 8014564:	4313      	orrs	r3, r2
 8014566:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014568:	2300      	movs	r3, #0
}
 801456a:	4618      	mov	r0, r3
 801456c:	3714      	adds	r7, #20
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr
 8014576:	bf00      	nop
 8014578:	10008000 	.word	0x10008000

0801457c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801457c:	b480      	push	{r7}
 801457e:	b085      	sub	sp, #20
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	785b      	ldrb	r3, [r3, #1]
 8014594:	2b01      	cmp	r3, #1
 8014596:	d161      	bne.n	801465c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	015a      	lsls	r2, r3, #5
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	4413      	add	r3, r2
 80145a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80145aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80145ae:	d11f      	bne.n	80145f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	015a      	lsls	r2, r3, #5
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	4413      	add	r3, r2
 80145b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	68ba      	ldr	r2, [r7, #8]
 80145c0:	0151      	lsls	r1, r2, #5
 80145c2:	68fa      	ldr	r2, [r7, #12]
 80145c4:	440a      	add	r2, r1
 80145c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80145ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80145ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	015a      	lsls	r2, r3, #5
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	4413      	add	r3, r2
 80145d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	68ba      	ldr	r2, [r7, #8]
 80145e0:	0151      	lsls	r1, r2, #5
 80145e2:	68fa      	ldr	r2, [r7, #12]
 80145e4:	440a      	add	r2, r1
 80145e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80145ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80145ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80145f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	f003 030f 	and.w	r3, r3, #15
 8014600:	2101      	movs	r1, #1
 8014602:	fa01 f303 	lsl.w	r3, r1, r3
 8014606:	b29b      	uxth	r3, r3
 8014608:	43db      	mvns	r3, r3
 801460a:	68f9      	ldr	r1, [r7, #12]
 801460c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014610:	4013      	ands	r3, r2
 8014612:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801461a:	69da      	ldr	r2, [r3, #28]
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	f003 030f 	and.w	r3, r3, #15
 8014624:	2101      	movs	r1, #1
 8014626:	fa01 f303 	lsl.w	r3, r1, r3
 801462a:	b29b      	uxth	r3, r3
 801462c:	43db      	mvns	r3, r3
 801462e:	68f9      	ldr	r1, [r7, #12]
 8014630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014634:	4013      	ands	r3, r2
 8014636:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	015a      	lsls	r2, r3, #5
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	4413      	add	r3, r2
 8014640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014644:	681a      	ldr	r2, [r3, #0]
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	0159      	lsls	r1, r3, #5
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	440b      	add	r3, r1
 801464e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014652:	4619      	mov	r1, r3
 8014654:	4b35      	ldr	r3, [pc, #212]	@ (801472c <USB_DeactivateEndpoint+0x1b0>)
 8014656:	4013      	ands	r3, r2
 8014658:	600b      	str	r3, [r1, #0]
 801465a:	e060      	b.n	801471e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	015a      	lsls	r2, r3, #5
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	4413      	add	r3, r2
 8014664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801466e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014672:	d11f      	bne.n	80146b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	015a      	lsls	r2, r3, #5
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	4413      	add	r3, r2
 801467c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	68ba      	ldr	r2, [r7, #8]
 8014684:	0151      	lsls	r1, r2, #5
 8014686:	68fa      	ldr	r2, [r7, #12]
 8014688:	440a      	add	r2, r1
 801468a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801468e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014692:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	015a      	lsls	r2, r3, #5
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	4413      	add	r3, r2
 801469c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	68ba      	ldr	r2, [r7, #8]
 80146a4:	0151      	lsls	r1, r2, #5
 80146a6:	68fa      	ldr	r2, [r7, #12]
 80146a8:	440a      	add	r2, r1
 80146aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80146ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80146b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	f003 030f 	and.w	r3, r3, #15
 80146c4:	2101      	movs	r1, #1
 80146c6:	fa01 f303 	lsl.w	r3, r1, r3
 80146ca:	041b      	lsls	r3, r3, #16
 80146cc:	43db      	mvns	r3, r3
 80146ce:	68f9      	ldr	r1, [r7, #12]
 80146d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80146d4:	4013      	ands	r3, r2
 80146d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146de:	69da      	ldr	r2, [r3, #28]
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	f003 030f 	and.w	r3, r3, #15
 80146e8:	2101      	movs	r1, #1
 80146ea:	fa01 f303 	lsl.w	r3, r1, r3
 80146ee:	041b      	lsls	r3, r3, #16
 80146f0:	43db      	mvns	r3, r3
 80146f2:	68f9      	ldr	r1, [r7, #12]
 80146f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80146f8:	4013      	ands	r3, r2
 80146fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	015a      	lsls	r2, r3, #5
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	4413      	add	r3, r2
 8014704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	0159      	lsls	r1, r3, #5
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	440b      	add	r3, r1
 8014712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014716:	4619      	mov	r1, r3
 8014718:	4b05      	ldr	r3, [pc, #20]	@ (8014730 <USB_DeactivateEndpoint+0x1b4>)
 801471a:	4013      	ands	r3, r2
 801471c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801471e:	2300      	movs	r3, #0
}
 8014720:	4618      	mov	r0, r3
 8014722:	3714      	adds	r7, #20
 8014724:	46bd      	mov	sp, r7
 8014726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472a:	4770      	bx	lr
 801472c:	ec337800 	.word	0xec337800
 8014730:	eff37800 	.word	0xeff37800

08014734 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b08a      	sub	sp, #40	@ 0x28
 8014738:	af02      	add	r7, sp, #8
 801473a:	60f8      	str	r0, [r7, #12]
 801473c:	60b9      	str	r1, [r7, #8]
 801473e:	4613      	mov	r3, r2
 8014740:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	785b      	ldrb	r3, [r3, #1]
 8014750:	2b01      	cmp	r3, #1
 8014752:	f040 8185 	bne.w	8014a60 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	691b      	ldr	r3, [r3, #16]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d132      	bne.n	80147c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801475e:	69bb      	ldr	r3, [r7, #24]
 8014760:	015a      	lsls	r2, r3, #5
 8014762:	69fb      	ldr	r3, [r7, #28]
 8014764:	4413      	add	r3, r2
 8014766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801476a:	691a      	ldr	r2, [r3, #16]
 801476c:	69bb      	ldr	r3, [r7, #24]
 801476e:	0159      	lsls	r1, r3, #5
 8014770:	69fb      	ldr	r3, [r7, #28]
 8014772:	440b      	add	r3, r1
 8014774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014778:	4619      	mov	r1, r3
 801477a:	4ba7      	ldr	r3, [pc, #668]	@ (8014a18 <USB_EPStartXfer+0x2e4>)
 801477c:	4013      	ands	r3, r2
 801477e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014780:	69bb      	ldr	r3, [r7, #24]
 8014782:	015a      	lsls	r2, r3, #5
 8014784:	69fb      	ldr	r3, [r7, #28]
 8014786:	4413      	add	r3, r2
 8014788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801478c:	691b      	ldr	r3, [r3, #16]
 801478e:	69ba      	ldr	r2, [r7, #24]
 8014790:	0151      	lsls	r1, r2, #5
 8014792:	69fa      	ldr	r2, [r7, #28]
 8014794:	440a      	add	r2, r1
 8014796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801479a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801479e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80147a0:	69bb      	ldr	r3, [r7, #24]
 80147a2:	015a      	lsls	r2, r3, #5
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	4413      	add	r3, r2
 80147a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147ac:	691a      	ldr	r2, [r3, #16]
 80147ae:	69bb      	ldr	r3, [r7, #24]
 80147b0:	0159      	lsls	r1, r3, #5
 80147b2:	69fb      	ldr	r3, [r7, #28]
 80147b4:	440b      	add	r3, r1
 80147b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147ba:	4619      	mov	r1, r3
 80147bc:	4b97      	ldr	r3, [pc, #604]	@ (8014a1c <USB_EPStartXfer+0x2e8>)
 80147be:	4013      	ands	r3, r2
 80147c0:	610b      	str	r3, [r1, #16]
 80147c2:	e097      	b.n	80148f4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80147c4:	69bb      	ldr	r3, [r7, #24]
 80147c6:	015a      	lsls	r2, r3, #5
 80147c8:	69fb      	ldr	r3, [r7, #28]
 80147ca:	4413      	add	r3, r2
 80147cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147d0:	691a      	ldr	r2, [r3, #16]
 80147d2:	69bb      	ldr	r3, [r7, #24]
 80147d4:	0159      	lsls	r1, r3, #5
 80147d6:	69fb      	ldr	r3, [r7, #28]
 80147d8:	440b      	add	r3, r1
 80147da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147de:	4619      	mov	r1, r3
 80147e0:	4b8e      	ldr	r3, [pc, #568]	@ (8014a1c <USB_EPStartXfer+0x2e8>)
 80147e2:	4013      	ands	r3, r2
 80147e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80147e6:	69bb      	ldr	r3, [r7, #24]
 80147e8:	015a      	lsls	r2, r3, #5
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	4413      	add	r3, r2
 80147ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147f2:	691a      	ldr	r2, [r3, #16]
 80147f4:	69bb      	ldr	r3, [r7, #24]
 80147f6:	0159      	lsls	r1, r3, #5
 80147f8:	69fb      	ldr	r3, [r7, #28]
 80147fa:	440b      	add	r3, r1
 80147fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014800:	4619      	mov	r1, r3
 8014802:	4b85      	ldr	r3, [pc, #532]	@ (8014a18 <USB_EPStartXfer+0x2e4>)
 8014804:	4013      	ands	r3, r2
 8014806:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014808:	69bb      	ldr	r3, [r7, #24]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d11a      	bne.n	8014844 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	691a      	ldr	r2, [r3, #16]
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	689b      	ldr	r3, [r3, #8]
 8014816:	429a      	cmp	r2, r3
 8014818:	d903      	bls.n	8014822 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	689a      	ldr	r2, [r3, #8]
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014822:	69bb      	ldr	r3, [r7, #24]
 8014824:	015a      	lsls	r2, r3, #5
 8014826:	69fb      	ldr	r3, [r7, #28]
 8014828:	4413      	add	r3, r2
 801482a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801482e:	691b      	ldr	r3, [r3, #16]
 8014830:	69ba      	ldr	r2, [r7, #24]
 8014832:	0151      	lsls	r1, r2, #5
 8014834:	69fa      	ldr	r2, [r7, #28]
 8014836:	440a      	add	r2, r1
 8014838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801483c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014840:	6113      	str	r3, [r2, #16]
 8014842:	e044      	b.n	80148ce <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	691a      	ldr	r2, [r3, #16]
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	689b      	ldr	r3, [r3, #8]
 801484c:	4413      	add	r3, r2
 801484e:	1e5a      	subs	r2, r3, #1
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	689b      	ldr	r3, [r3, #8]
 8014854:	fbb2 f3f3 	udiv	r3, r2, r3
 8014858:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 801485a:	69bb      	ldr	r3, [r7, #24]
 801485c:	015a      	lsls	r2, r3, #5
 801485e:	69fb      	ldr	r3, [r7, #28]
 8014860:	4413      	add	r3, r2
 8014862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014866:	691a      	ldr	r2, [r3, #16]
 8014868:	8afb      	ldrh	r3, [r7, #22]
 801486a:	04d9      	lsls	r1, r3, #19
 801486c:	4b6c      	ldr	r3, [pc, #432]	@ (8014a20 <USB_EPStartXfer+0x2ec>)
 801486e:	400b      	ands	r3, r1
 8014870:	69b9      	ldr	r1, [r7, #24]
 8014872:	0148      	lsls	r0, r1, #5
 8014874:	69f9      	ldr	r1, [r7, #28]
 8014876:	4401      	add	r1, r0
 8014878:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801487c:	4313      	orrs	r3, r2
 801487e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	791b      	ldrb	r3, [r3, #4]
 8014884:	2b01      	cmp	r3, #1
 8014886:	d122      	bne.n	80148ce <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014888:	69bb      	ldr	r3, [r7, #24]
 801488a:	015a      	lsls	r2, r3, #5
 801488c:	69fb      	ldr	r3, [r7, #28]
 801488e:	4413      	add	r3, r2
 8014890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014894:	691b      	ldr	r3, [r3, #16]
 8014896:	69ba      	ldr	r2, [r7, #24]
 8014898:	0151      	lsls	r1, r2, #5
 801489a:	69fa      	ldr	r2, [r7, #28]
 801489c:	440a      	add	r2, r1
 801489e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80148a2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80148a6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	015a      	lsls	r2, r3, #5
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	4413      	add	r3, r2
 80148b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148b4:	691a      	ldr	r2, [r3, #16]
 80148b6:	8afb      	ldrh	r3, [r7, #22]
 80148b8:	075b      	lsls	r3, r3, #29
 80148ba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80148be:	69b9      	ldr	r1, [r7, #24]
 80148c0:	0148      	lsls	r0, r1, #5
 80148c2:	69f9      	ldr	r1, [r7, #28]
 80148c4:	4401      	add	r1, r0
 80148c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80148ca:	4313      	orrs	r3, r2
 80148cc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80148ce:	69bb      	ldr	r3, [r7, #24]
 80148d0:	015a      	lsls	r2, r3, #5
 80148d2:	69fb      	ldr	r3, [r7, #28]
 80148d4:	4413      	add	r3, r2
 80148d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148da:	691a      	ldr	r2, [r3, #16]
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	691b      	ldr	r3, [r3, #16]
 80148e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80148e4:	69b9      	ldr	r1, [r7, #24]
 80148e6:	0148      	lsls	r0, r1, #5
 80148e8:	69f9      	ldr	r1, [r7, #28]
 80148ea:	4401      	add	r1, r0
 80148ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80148f0:	4313      	orrs	r3, r2
 80148f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80148f4:	79fb      	ldrb	r3, [r7, #7]
 80148f6:	2b01      	cmp	r3, #1
 80148f8:	d14b      	bne.n	8014992 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	69db      	ldr	r3, [r3, #28]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d009      	beq.n	8014916 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014902:	69bb      	ldr	r3, [r7, #24]
 8014904:	015a      	lsls	r2, r3, #5
 8014906:	69fb      	ldr	r3, [r7, #28]
 8014908:	4413      	add	r3, r2
 801490a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801490e:	461a      	mov	r2, r3
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	69db      	ldr	r3, [r3, #28]
 8014914:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	791b      	ldrb	r3, [r3, #4]
 801491a:	2b01      	cmp	r3, #1
 801491c:	d128      	bne.n	8014970 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801491e:	69fb      	ldr	r3, [r7, #28]
 8014920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014924:	689b      	ldr	r3, [r3, #8]
 8014926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801492a:	2b00      	cmp	r3, #0
 801492c:	d110      	bne.n	8014950 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801492e:	69bb      	ldr	r3, [r7, #24]
 8014930:	015a      	lsls	r2, r3, #5
 8014932:	69fb      	ldr	r3, [r7, #28]
 8014934:	4413      	add	r3, r2
 8014936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	69ba      	ldr	r2, [r7, #24]
 801493e:	0151      	lsls	r1, r2, #5
 8014940:	69fa      	ldr	r2, [r7, #28]
 8014942:	440a      	add	r2, r1
 8014944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014948:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801494c:	6013      	str	r3, [r2, #0]
 801494e:	e00f      	b.n	8014970 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	015a      	lsls	r2, r3, #5
 8014954:	69fb      	ldr	r3, [r7, #28]
 8014956:	4413      	add	r3, r2
 8014958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	69ba      	ldr	r2, [r7, #24]
 8014960:	0151      	lsls	r1, r2, #5
 8014962:	69fa      	ldr	r2, [r7, #28]
 8014964:	440a      	add	r2, r1
 8014966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801496a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801496e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014970:	69bb      	ldr	r3, [r7, #24]
 8014972:	015a      	lsls	r2, r3, #5
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	4413      	add	r3, r2
 8014978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	69ba      	ldr	r2, [r7, #24]
 8014980:	0151      	lsls	r1, r2, #5
 8014982:	69fa      	ldr	r2, [r7, #28]
 8014984:	440a      	add	r2, r1
 8014986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801498a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801498e:	6013      	str	r3, [r2, #0]
 8014990:	e169      	b.n	8014c66 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	015a      	lsls	r2, r3, #5
 8014996:	69fb      	ldr	r3, [r7, #28]
 8014998:	4413      	add	r3, r2
 801499a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	69ba      	ldr	r2, [r7, #24]
 80149a2:	0151      	lsls	r1, r2, #5
 80149a4:	69fa      	ldr	r2, [r7, #28]
 80149a6:	440a      	add	r2, r1
 80149a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80149ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80149b0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	791b      	ldrb	r3, [r3, #4]
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	d015      	beq.n	80149e6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	691b      	ldr	r3, [r3, #16]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	f000 8151 	beq.w	8014c66 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80149c4:	69fb      	ldr	r3, [r7, #28]
 80149c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	f003 030f 	and.w	r3, r3, #15
 80149d4:	2101      	movs	r1, #1
 80149d6:	fa01 f303 	lsl.w	r3, r1, r3
 80149da:	69f9      	ldr	r1, [r7, #28]
 80149dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149e0:	4313      	orrs	r3, r2
 80149e2:	634b      	str	r3, [r1, #52]	@ 0x34
 80149e4:	e13f      	b.n	8014c66 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80149e6:	69fb      	ldr	r3, [r7, #28]
 80149e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149ec:	689b      	ldr	r3, [r3, #8]
 80149ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d116      	bne.n	8014a24 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80149f6:	69bb      	ldr	r3, [r7, #24]
 80149f8:	015a      	lsls	r2, r3, #5
 80149fa:	69fb      	ldr	r3, [r7, #28]
 80149fc:	4413      	add	r3, r2
 80149fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	69ba      	ldr	r2, [r7, #24]
 8014a06:	0151      	lsls	r1, r2, #5
 8014a08:	69fa      	ldr	r2, [r7, #28]
 8014a0a:	440a      	add	r2, r1
 8014a0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014a14:	6013      	str	r3, [r2, #0]
 8014a16:	e015      	b.n	8014a44 <USB_EPStartXfer+0x310>
 8014a18:	e007ffff 	.word	0xe007ffff
 8014a1c:	fff80000 	.word	0xfff80000
 8014a20:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014a24:	69bb      	ldr	r3, [r7, #24]
 8014a26:	015a      	lsls	r2, r3, #5
 8014a28:	69fb      	ldr	r3, [r7, #28]
 8014a2a:	4413      	add	r3, r2
 8014a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	69ba      	ldr	r2, [r7, #24]
 8014a34:	0151      	lsls	r1, r2, #5
 8014a36:	69fa      	ldr	r2, [r7, #28]
 8014a38:	440a      	add	r2, r1
 8014a3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014a42:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	68d9      	ldr	r1, [r3, #12]
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	781a      	ldrb	r2, [r3, #0]
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	691b      	ldr	r3, [r3, #16]
 8014a50:	b298      	uxth	r0, r3
 8014a52:	79fb      	ldrb	r3, [r7, #7]
 8014a54:	9300      	str	r3, [sp, #0]
 8014a56:	4603      	mov	r3, r0
 8014a58:	68f8      	ldr	r0, [r7, #12]
 8014a5a:	f000 f9b9 	bl	8014dd0 <USB_WritePacket>
 8014a5e:	e102      	b.n	8014c66 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014a60:	69bb      	ldr	r3, [r7, #24]
 8014a62:	015a      	lsls	r2, r3, #5
 8014a64:	69fb      	ldr	r3, [r7, #28]
 8014a66:	4413      	add	r3, r2
 8014a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a6c:	691a      	ldr	r2, [r3, #16]
 8014a6e:	69bb      	ldr	r3, [r7, #24]
 8014a70:	0159      	lsls	r1, r3, #5
 8014a72:	69fb      	ldr	r3, [r7, #28]
 8014a74:	440b      	add	r3, r1
 8014a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	4b7c      	ldr	r3, [pc, #496]	@ (8014c70 <USB_EPStartXfer+0x53c>)
 8014a7e:	4013      	ands	r3, r2
 8014a80:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014a82:	69bb      	ldr	r3, [r7, #24]
 8014a84:	015a      	lsls	r2, r3, #5
 8014a86:	69fb      	ldr	r3, [r7, #28]
 8014a88:	4413      	add	r3, r2
 8014a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a8e:	691a      	ldr	r2, [r3, #16]
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	0159      	lsls	r1, r3, #5
 8014a94:	69fb      	ldr	r3, [r7, #28]
 8014a96:	440b      	add	r3, r1
 8014a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a9c:	4619      	mov	r1, r3
 8014a9e:	4b75      	ldr	r3, [pc, #468]	@ (8014c74 <USB_EPStartXfer+0x540>)
 8014aa0:	4013      	ands	r3, r2
 8014aa2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d12f      	bne.n	8014b0a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	691b      	ldr	r3, [r3, #16]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d003      	beq.n	8014aba <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	689a      	ldr	r2, [r3, #8]
 8014ab6:	68bb      	ldr	r3, [r7, #8]
 8014ab8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014aba:	68bb      	ldr	r3, [r7, #8]
 8014abc:	689a      	ldr	r2, [r3, #8]
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014ac2:	69bb      	ldr	r3, [r7, #24]
 8014ac4:	015a      	lsls	r2, r3, #5
 8014ac6:	69fb      	ldr	r3, [r7, #28]
 8014ac8:	4413      	add	r3, r2
 8014aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ace:	691a      	ldr	r2, [r3, #16]
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	6a1b      	ldr	r3, [r3, #32]
 8014ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ad8:	69b9      	ldr	r1, [r7, #24]
 8014ada:	0148      	lsls	r0, r1, #5
 8014adc:	69f9      	ldr	r1, [r7, #28]
 8014ade:	4401      	add	r1, r0
 8014ae0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014ae4:	4313      	orrs	r3, r2
 8014ae6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014ae8:	69bb      	ldr	r3, [r7, #24]
 8014aea:	015a      	lsls	r2, r3, #5
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	4413      	add	r3, r2
 8014af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014af4:	691b      	ldr	r3, [r3, #16]
 8014af6:	69ba      	ldr	r2, [r7, #24]
 8014af8:	0151      	lsls	r1, r2, #5
 8014afa:	69fa      	ldr	r2, [r7, #28]
 8014afc:	440a      	add	r2, r1
 8014afe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b06:	6113      	str	r3, [r2, #16]
 8014b08:	e05f      	b.n	8014bca <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	691b      	ldr	r3, [r3, #16]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d123      	bne.n	8014b5a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014b12:	69bb      	ldr	r3, [r7, #24]
 8014b14:	015a      	lsls	r2, r3, #5
 8014b16:	69fb      	ldr	r3, [r7, #28]
 8014b18:	4413      	add	r3, r2
 8014b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b1e:	691a      	ldr	r2, [r3, #16]
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	689b      	ldr	r3, [r3, #8]
 8014b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014b28:	69b9      	ldr	r1, [r7, #24]
 8014b2a:	0148      	lsls	r0, r1, #5
 8014b2c:	69f9      	ldr	r1, [r7, #28]
 8014b2e:	4401      	add	r1, r0
 8014b30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014b34:	4313      	orrs	r3, r2
 8014b36:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014b38:	69bb      	ldr	r3, [r7, #24]
 8014b3a:	015a      	lsls	r2, r3, #5
 8014b3c:	69fb      	ldr	r3, [r7, #28]
 8014b3e:	4413      	add	r3, r2
 8014b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b44:	691b      	ldr	r3, [r3, #16]
 8014b46:	69ba      	ldr	r2, [r7, #24]
 8014b48:	0151      	lsls	r1, r2, #5
 8014b4a:	69fa      	ldr	r2, [r7, #28]
 8014b4c:	440a      	add	r2, r1
 8014b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b56:	6113      	str	r3, [r2, #16]
 8014b58:	e037      	b.n	8014bca <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	691a      	ldr	r2, [r3, #16]
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	689b      	ldr	r3, [r3, #8]
 8014b62:	4413      	add	r3, r2
 8014b64:	1e5a      	subs	r2, r3, #1
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	689b      	ldr	r3, [r3, #8]
 8014b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b6e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	689b      	ldr	r3, [r3, #8]
 8014b74:	8afa      	ldrh	r2, [r7, #22]
 8014b76:	fb03 f202 	mul.w	r2, r3, r2
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014b7e:	69bb      	ldr	r3, [r7, #24]
 8014b80:	015a      	lsls	r2, r3, #5
 8014b82:	69fb      	ldr	r3, [r7, #28]
 8014b84:	4413      	add	r3, r2
 8014b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b8a:	691a      	ldr	r2, [r3, #16]
 8014b8c:	8afb      	ldrh	r3, [r7, #22]
 8014b8e:	04d9      	lsls	r1, r3, #19
 8014b90:	4b39      	ldr	r3, [pc, #228]	@ (8014c78 <USB_EPStartXfer+0x544>)
 8014b92:	400b      	ands	r3, r1
 8014b94:	69b9      	ldr	r1, [r7, #24]
 8014b96:	0148      	lsls	r0, r1, #5
 8014b98:	69f9      	ldr	r1, [r7, #28]
 8014b9a:	4401      	add	r1, r0
 8014b9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014ba0:	4313      	orrs	r3, r2
 8014ba2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014ba4:	69bb      	ldr	r3, [r7, #24]
 8014ba6:	015a      	lsls	r2, r3, #5
 8014ba8:	69fb      	ldr	r3, [r7, #28]
 8014baa:	4413      	add	r3, r2
 8014bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bb0:	691a      	ldr	r2, [r3, #16]
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	6a1b      	ldr	r3, [r3, #32]
 8014bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014bba:	69b9      	ldr	r1, [r7, #24]
 8014bbc:	0148      	lsls	r0, r1, #5
 8014bbe:	69f9      	ldr	r1, [r7, #28]
 8014bc0:	4401      	add	r1, r0
 8014bc2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014bc6:	4313      	orrs	r3, r2
 8014bc8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014bca:	79fb      	ldrb	r3, [r7, #7]
 8014bcc:	2b01      	cmp	r3, #1
 8014bce:	d10d      	bne.n	8014bec <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	68db      	ldr	r3, [r3, #12]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d009      	beq.n	8014bec <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	68d9      	ldr	r1, [r3, #12]
 8014bdc:	69bb      	ldr	r3, [r7, #24]
 8014bde:	015a      	lsls	r2, r3, #5
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	4413      	add	r3, r2
 8014be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014be8:	460a      	mov	r2, r1
 8014bea:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	791b      	ldrb	r3, [r3, #4]
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	d128      	bne.n	8014c46 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014bf4:	69fb      	ldr	r3, [r7, #28]
 8014bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014bfa:	689b      	ldr	r3, [r3, #8]
 8014bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d110      	bne.n	8014c26 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014c04:	69bb      	ldr	r3, [r7, #24]
 8014c06:	015a      	lsls	r2, r3, #5
 8014c08:	69fb      	ldr	r3, [r7, #28]
 8014c0a:	4413      	add	r3, r2
 8014c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	69ba      	ldr	r2, [r7, #24]
 8014c14:	0151      	lsls	r1, r2, #5
 8014c16:	69fa      	ldr	r2, [r7, #28]
 8014c18:	440a      	add	r2, r1
 8014c1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014c1e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014c22:	6013      	str	r3, [r2, #0]
 8014c24:	e00f      	b.n	8014c46 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014c26:	69bb      	ldr	r3, [r7, #24]
 8014c28:	015a      	lsls	r2, r3, #5
 8014c2a:	69fb      	ldr	r3, [r7, #28]
 8014c2c:	4413      	add	r3, r2
 8014c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	69ba      	ldr	r2, [r7, #24]
 8014c36:	0151      	lsls	r1, r2, #5
 8014c38:	69fa      	ldr	r2, [r7, #28]
 8014c3a:	440a      	add	r2, r1
 8014c3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014c44:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014c46:	69bb      	ldr	r3, [r7, #24]
 8014c48:	015a      	lsls	r2, r3, #5
 8014c4a:	69fb      	ldr	r3, [r7, #28]
 8014c4c:	4413      	add	r3, r2
 8014c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	69ba      	ldr	r2, [r7, #24]
 8014c56:	0151      	lsls	r1, r2, #5
 8014c58:	69fa      	ldr	r2, [r7, #28]
 8014c5a:	440a      	add	r2, r1
 8014c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014c60:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014c64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014c66:	2300      	movs	r3, #0
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3720      	adds	r7, #32
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	fff80000 	.word	0xfff80000
 8014c74:	e007ffff 	.word	0xe007ffff
 8014c78:	1ff80000 	.word	0x1ff80000

08014c7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b087      	sub	sp, #28
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
 8014c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014c86:	2300      	movs	r3, #0
 8014c88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	785b      	ldrb	r3, [r3, #1]
 8014c96:	2b01      	cmp	r3, #1
 8014c98:	d14a      	bne.n	8014d30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	015a      	lsls	r2, r3, #5
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	4413      	add	r3, r2
 8014ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014cb2:	f040 8086 	bne.w	8014dc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	015a      	lsls	r2, r3, #5
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	4413      	add	r3, r2
 8014cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	683a      	ldr	r2, [r7, #0]
 8014cc8:	7812      	ldrb	r2, [r2, #0]
 8014cca:	0151      	lsls	r1, r2, #5
 8014ccc:	693a      	ldr	r2, [r7, #16]
 8014cce:	440a      	add	r2, r1
 8014cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014cd8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	015a      	lsls	r2, r3, #5
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	4413      	add	r3, r2
 8014ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	683a      	ldr	r2, [r7, #0]
 8014cec:	7812      	ldrb	r2, [r2, #0]
 8014cee:	0151      	lsls	r1, r2, #5
 8014cf0:	693a      	ldr	r2, [r7, #16]
 8014cf2:	440a      	add	r2, r1
 8014cf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014cfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	3301      	adds	r3, #1
 8014d02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014d0a:	4293      	cmp	r3, r2
 8014d0c:	d902      	bls.n	8014d14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014d0e:	2301      	movs	r3, #1
 8014d10:	75fb      	strb	r3, [r7, #23]
          break;
 8014d12:	e056      	b.n	8014dc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	781b      	ldrb	r3, [r3, #0]
 8014d18:	015a      	lsls	r2, r3, #5
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014d28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014d2c:	d0e7      	beq.n	8014cfe <USB_EPStopXfer+0x82>
 8014d2e:	e048      	b.n	8014dc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	781b      	ldrb	r3, [r3, #0]
 8014d34:	015a      	lsls	r2, r3, #5
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	4413      	add	r3, r2
 8014d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014d44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014d48:	d13b      	bne.n	8014dc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	781b      	ldrb	r3, [r3, #0]
 8014d4e:	015a      	lsls	r2, r3, #5
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	4413      	add	r3, r2
 8014d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	683a      	ldr	r2, [r7, #0]
 8014d5c:	7812      	ldrb	r2, [r2, #0]
 8014d5e:	0151      	lsls	r1, r2, #5
 8014d60:	693a      	ldr	r2, [r7, #16]
 8014d62:	440a      	add	r2, r1
 8014d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014d6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	015a      	lsls	r2, r3, #5
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	4413      	add	r3, r2
 8014d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	683a      	ldr	r2, [r7, #0]
 8014d80:	7812      	ldrb	r2, [r2, #0]
 8014d82:	0151      	lsls	r1, r2, #5
 8014d84:	693a      	ldr	r2, [r7, #16]
 8014d86:	440a      	add	r2, r1
 8014d88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014d90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	3301      	adds	r3, #1
 8014d96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014d9e:	4293      	cmp	r3, r2
 8014da0:	d902      	bls.n	8014da8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014da2:	2301      	movs	r3, #1
 8014da4:	75fb      	strb	r3, [r7, #23]
          break;
 8014da6:	e00c      	b.n	8014dc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	781b      	ldrb	r3, [r3, #0]
 8014dac:	015a      	lsls	r2, r3, #5
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	4413      	add	r3, r2
 8014db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014dc0:	d0e7      	beq.n	8014d92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	371c      	adds	r7, #28
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dce:	4770      	bx	lr

08014dd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b089      	sub	sp, #36	@ 0x24
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	60f8      	str	r0, [r7, #12]
 8014dd8:	60b9      	str	r1, [r7, #8]
 8014dda:	4611      	mov	r1, r2
 8014ddc:	461a      	mov	r2, r3
 8014dde:	460b      	mov	r3, r1
 8014de0:	71fb      	strb	r3, [r7, #7]
 8014de2:	4613      	mov	r3, r2
 8014de4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014dee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d123      	bne.n	8014e3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014df6:	88bb      	ldrh	r3, [r7, #4]
 8014df8:	3303      	adds	r3, #3
 8014dfa:	089b      	lsrs	r3, r3, #2
 8014dfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014dfe:	2300      	movs	r3, #0
 8014e00:	61bb      	str	r3, [r7, #24]
 8014e02:	e018      	b.n	8014e36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014e04:	79fb      	ldrb	r3, [r7, #7]
 8014e06:	031a      	lsls	r2, r3, #12
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	4413      	add	r3, r2
 8014e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014e10:	461a      	mov	r2, r3
 8014e12:	69fb      	ldr	r3, [r7, #28]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014e1e:	69fb      	ldr	r3, [r7, #28]
 8014e20:	3301      	adds	r3, #1
 8014e22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014e24:	69fb      	ldr	r3, [r7, #28]
 8014e26:	3301      	adds	r3, #1
 8014e28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014e2a:	69fb      	ldr	r3, [r7, #28]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014e30:	69bb      	ldr	r3, [r7, #24]
 8014e32:	3301      	adds	r3, #1
 8014e34:	61bb      	str	r3, [r7, #24]
 8014e36:	69ba      	ldr	r2, [r7, #24]
 8014e38:	693b      	ldr	r3, [r7, #16]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d3e2      	bcc.n	8014e04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014e3e:	2300      	movs	r3, #0
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	3724      	adds	r7, #36	@ 0x24
 8014e44:	46bd      	mov	sp, r7
 8014e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4a:	4770      	bx	lr

08014e4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	b08b      	sub	sp, #44	@ 0x2c
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	60f8      	str	r0, [r7, #12]
 8014e54:	60b9      	str	r1, [r7, #8]
 8014e56:	4613      	mov	r3, r2
 8014e58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014e62:	88fb      	ldrh	r3, [r7, #6]
 8014e64:	089b      	lsrs	r3, r3, #2
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014e6a:	88fb      	ldrh	r3, [r7, #6]
 8014e6c:	f003 0303 	and.w	r3, r3, #3
 8014e70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014e72:	2300      	movs	r3, #0
 8014e74:	623b      	str	r3, [r7, #32]
 8014e76:	e014      	b.n	8014ea2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014e78:	69bb      	ldr	r3, [r7, #24]
 8014e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e82:	601a      	str	r2, [r3, #0]
    pDest++;
 8014e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e86:	3301      	adds	r3, #1
 8014e88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e8c:	3301      	adds	r3, #1
 8014e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e92:	3301      	adds	r3, #1
 8014e94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e98:	3301      	adds	r3, #1
 8014e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8014e9c:	6a3b      	ldr	r3, [r7, #32]
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	623b      	str	r3, [r7, #32]
 8014ea2:	6a3a      	ldr	r2, [r7, #32]
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d3e6      	bcc.n	8014e78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014eaa:	8bfb      	ldrh	r3, [r7, #30]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d01e      	beq.n	8014eee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014eb4:	69bb      	ldr	r3, [r7, #24]
 8014eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014eba:	461a      	mov	r2, r3
 8014ebc:	f107 0310 	add.w	r3, r7, #16
 8014ec0:	6812      	ldr	r2, [r2, #0]
 8014ec2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014ec4:	693a      	ldr	r2, [r7, #16]
 8014ec6:	6a3b      	ldr	r3, [r7, #32]
 8014ec8:	b2db      	uxtb	r3, r3
 8014eca:	00db      	lsls	r3, r3, #3
 8014ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8014ed0:	b2da      	uxtb	r2, r3
 8014ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ed4:	701a      	strb	r2, [r3, #0]
      i++;
 8014ed6:	6a3b      	ldr	r3, [r7, #32]
 8014ed8:	3301      	adds	r3, #1
 8014eda:	623b      	str	r3, [r7, #32]
      pDest++;
 8014edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ede:	3301      	adds	r3, #1
 8014ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8014ee2:	8bfb      	ldrh	r3, [r7, #30]
 8014ee4:	3b01      	subs	r3, #1
 8014ee6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014ee8:	8bfb      	ldrh	r3, [r7, #30]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d1ea      	bne.n	8014ec4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	372c      	adds	r7, #44	@ 0x2c
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr

08014efc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014efc:	b480      	push	{r7}
 8014efe:	b085      	sub	sp, #20
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
 8014f04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	781b      	ldrb	r3, [r3, #0]
 8014f0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	785b      	ldrb	r3, [r3, #1]
 8014f14:	2b01      	cmp	r3, #1
 8014f16:	d12c      	bne.n	8014f72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	015a      	lsls	r2, r3, #5
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	4413      	add	r3, r2
 8014f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	db12      	blt.n	8014f50 <USB_EPSetStall+0x54>
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d00f      	beq.n	8014f50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	015a      	lsls	r2, r3, #5
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	4413      	add	r3, r2
 8014f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	68ba      	ldr	r2, [r7, #8]
 8014f40:	0151      	lsls	r1, r2, #5
 8014f42:	68fa      	ldr	r2, [r7, #12]
 8014f44:	440a      	add	r2, r1
 8014f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8014f4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	015a      	lsls	r2, r3, #5
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	4413      	add	r3, r2
 8014f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	68ba      	ldr	r2, [r7, #8]
 8014f60:	0151      	lsls	r1, r2, #5
 8014f62:	68fa      	ldr	r2, [r7, #12]
 8014f64:	440a      	add	r2, r1
 8014f66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014f6e:	6013      	str	r3, [r2, #0]
 8014f70:	e02b      	b.n	8014fca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	015a      	lsls	r2, r3, #5
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	4413      	add	r3, r2
 8014f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	db12      	blt.n	8014faa <USB_EPSetStall+0xae>
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d00f      	beq.n	8014faa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	015a      	lsls	r2, r3, #5
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	4413      	add	r3, r2
 8014f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	68ba      	ldr	r2, [r7, #8]
 8014f9a:	0151      	lsls	r1, r2, #5
 8014f9c:	68fa      	ldr	r2, [r7, #12]
 8014f9e:	440a      	add	r2, r1
 8014fa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fa4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8014fa8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014faa:	68bb      	ldr	r3, [r7, #8]
 8014fac:	015a      	lsls	r2, r3, #5
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	4413      	add	r3, r2
 8014fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	68ba      	ldr	r2, [r7, #8]
 8014fba:	0151      	lsls	r1, r2, #5
 8014fbc:	68fa      	ldr	r2, [r7, #12]
 8014fbe:	440a      	add	r2, r1
 8014fc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014fc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014fca:	2300      	movs	r3, #0
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3714      	adds	r7, #20
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr

08014fd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014fd8:	b480      	push	{r7}
 8014fda:	b085      	sub	sp, #20
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	781b      	ldrb	r3, [r3, #0]
 8014fea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014fec:	683b      	ldr	r3, [r7, #0]
 8014fee:	785b      	ldrb	r3, [r3, #1]
 8014ff0:	2b01      	cmp	r3, #1
 8014ff2:	d128      	bne.n	8015046 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	015a      	lsls	r2, r3, #5
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	4413      	add	r3, r2
 8014ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	68ba      	ldr	r2, [r7, #8]
 8015004:	0151      	lsls	r1, r2, #5
 8015006:	68fa      	ldr	r2, [r7, #12]
 8015008:	440a      	add	r2, r1
 801500a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801500e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015012:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	791b      	ldrb	r3, [r3, #4]
 8015018:	2b03      	cmp	r3, #3
 801501a:	d003      	beq.n	8015024 <USB_EPClearStall+0x4c>
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	791b      	ldrb	r3, [r3, #4]
 8015020:	2b02      	cmp	r3, #2
 8015022:	d138      	bne.n	8015096 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	015a      	lsls	r2, r3, #5
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	4413      	add	r3, r2
 801502c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	68ba      	ldr	r2, [r7, #8]
 8015034:	0151      	lsls	r1, r2, #5
 8015036:	68fa      	ldr	r2, [r7, #12]
 8015038:	440a      	add	r2, r1
 801503a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801503e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015042:	6013      	str	r3, [r2, #0]
 8015044:	e027      	b.n	8015096 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	015a      	lsls	r2, r3, #5
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	4413      	add	r3, r2
 801504e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	68ba      	ldr	r2, [r7, #8]
 8015056:	0151      	lsls	r1, r2, #5
 8015058:	68fa      	ldr	r2, [r7, #12]
 801505a:	440a      	add	r2, r1
 801505c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015060:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015064:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	791b      	ldrb	r3, [r3, #4]
 801506a:	2b03      	cmp	r3, #3
 801506c:	d003      	beq.n	8015076 <USB_EPClearStall+0x9e>
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	791b      	ldrb	r3, [r3, #4]
 8015072:	2b02      	cmp	r3, #2
 8015074:	d10f      	bne.n	8015096 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015076:	68bb      	ldr	r3, [r7, #8]
 8015078:	015a      	lsls	r2, r3, #5
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	4413      	add	r3, r2
 801507e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	68ba      	ldr	r2, [r7, #8]
 8015086:	0151      	lsls	r1, r2, #5
 8015088:	68fa      	ldr	r2, [r7, #12]
 801508a:	440a      	add	r2, r1
 801508c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015094:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015096:	2300      	movs	r3, #0
}
 8015098:	4618      	mov	r0, r3
 801509a:	3714      	adds	r7, #20
 801509c:	46bd      	mov	sp, r7
 801509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a2:	4770      	bx	lr

080150a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80150a4:	b480      	push	{r7}
 80150a6:	b085      	sub	sp, #20
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	460b      	mov	r3, r1
 80150ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	68fa      	ldr	r2, [r7, #12]
 80150be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80150c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80150c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80150ce:	681a      	ldr	r2, [r3, #0]
 80150d0:	78fb      	ldrb	r3, [r7, #3]
 80150d2:	011b      	lsls	r3, r3, #4
 80150d4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80150d8:	68f9      	ldr	r1, [r7, #12]
 80150da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80150de:	4313      	orrs	r3, r2
 80150e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80150e2:	2300      	movs	r3, #0
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3714      	adds	r7, #20
 80150e8:	46bd      	mov	sp, r7
 80150ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ee:	4770      	bx	lr

080150f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80150f0:	b480      	push	{r7}
 80150f2:	b085      	sub	sp, #20
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	68fa      	ldr	r2, [r7, #12]
 8015106:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801510a:	f023 0303 	bic.w	r3, r3, #3
 801510e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	68fa      	ldr	r2, [r7, #12]
 801511a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801511e:	f023 0302 	bic.w	r3, r3, #2
 8015122:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015124:	2300      	movs	r3, #0
}
 8015126:	4618      	mov	r0, r3
 8015128:	3714      	adds	r7, #20
 801512a:	46bd      	mov	sp, r7
 801512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015130:	4770      	bx	lr

08015132 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015132:	b480      	push	{r7}
 8015134:	b085      	sub	sp, #20
 8015136:	af00      	add	r7, sp, #0
 8015138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	68fa      	ldr	r2, [r7, #12]
 8015148:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801514c:	f023 0303 	bic.w	r3, r3, #3
 8015150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015158:	685b      	ldr	r3, [r3, #4]
 801515a:	68fa      	ldr	r2, [r7, #12]
 801515c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015160:	f043 0302 	orr.w	r3, r3, #2
 8015164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015166:	2300      	movs	r3, #0
}
 8015168:	4618      	mov	r0, r3
 801516a:	3714      	adds	r7, #20
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr

08015174 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015174:	b480      	push	{r7}
 8015176:	b085      	sub	sp, #20
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	695b      	ldr	r3, [r3, #20]
 8015180:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	699b      	ldr	r3, [r3, #24]
 8015186:	68fa      	ldr	r2, [r7, #12]
 8015188:	4013      	ands	r3, r2
 801518a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801518c:	68fb      	ldr	r3, [r7, #12]
}
 801518e:	4618      	mov	r0, r3
 8015190:	3714      	adds	r7, #20
 8015192:	46bd      	mov	sp, r7
 8015194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015198:	4770      	bx	lr

0801519a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801519a:	b480      	push	{r7}
 801519c:	b085      	sub	sp, #20
 801519e:	af00      	add	r7, sp, #0
 80151a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151ac:	699b      	ldr	r3, [r3, #24]
 80151ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151b6:	69db      	ldr	r3, [r3, #28]
 80151b8:	68ba      	ldr	r2, [r7, #8]
 80151ba:	4013      	ands	r3, r2
 80151bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	0c1b      	lsrs	r3, r3, #16
}
 80151c2:	4618      	mov	r0, r3
 80151c4:	3714      	adds	r7, #20
 80151c6:	46bd      	mov	sp, r7
 80151c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151cc:	4770      	bx	lr

080151ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80151ce:	b480      	push	{r7}
 80151d0:	b085      	sub	sp, #20
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151e0:	699b      	ldr	r3, [r3, #24]
 80151e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151ea:	69db      	ldr	r3, [r3, #28]
 80151ec:	68ba      	ldr	r2, [r7, #8]
 80151ee:	4013      	ands	r3, r2
 80151f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	b29b      	uxth	r3, r3
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3714      	adds	r7, #20
 80151fa:	46bd      	mov	sp, r7
 80151fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015200:	4770      	bx	lr

08015202 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015202:	b480      	push	{r7}
 8015204:	b085      	sub	sp, #20
 8015206:	af00      	add	r7, sp, #0
 8015208:	6078      	str	r0, [r7, #4]
 801520a:	460b      	mov	r3, r1
 801520c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015212:	78fb      	ldrb	r3, [r7, #3]
 8015214:	015a      	lsls	r2, r3, #5
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	4413      	add	r3, r2
 801521a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801521e:	689b      	ldr	r3, [r3, #8]
 8015220:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015228:	695b      	ldr	r3, [r3, #20]
 801522a:	68ba      	ldr	r2, [r7, #8]
 801522c:	4013      	ands	r3, r2
 801522e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015230:	68bb      	ldr	r3, [r7, #8]
}
 8015232:	4618      	mov	r0, r3
 8015234:	3714      	adds	r7, #20
 8015236:	46bd      	mov	sp, r7
 8015238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523c:	4770      	bx	lr

0801523e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801523e:	b480      	push	{r7}
 8015240:	b087      	sub	sp, #28
 8015242:	af00      	add	r7, sp, #0
 8015244:	6078      	str	r0, [r7, #4]
 8015246:	460b      	mov	r3, r1
 8015248:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801524e:	697b      	ldr	r3, [r7, #20]
 8015250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015254:	691b      	ldr	r3, [r3, #16]
 8015256:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801525e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015260:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015262:	78fb      	ldrb	r3, [r7, #3]
 8015264:	f003 030f 	and.w	r3, r3, #15
 8015268:	68fa      	ldr	r2, [r7, #12]
 801526a:	fa22 f303 	lsr.w	r3, r2, r3
 801526e:	01db      	lsls	r3, r3, #7
 8015270:	b2db      	uxtb	r3, r3
 8015272:	693a      	ldr	r2, [r7, #16]
 8015274:	4313      	orrs	r3, r2
 8015276:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015278:	78fb      	ldrb	r3, [r7, #3]
 801527a:	015a      	lsls	r2, r3, #5
 801527c:	697b      	ldr	r3, [r7, #20]
 801527e:	4413      	add	r3, r2
 8015280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015284:	689b      	ldr	r3, [r3, #8]
 8015286:	693a      	ldr	r2, [r7, #16]
 8015288:	4013      	ands	r3, r2
 801528a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801528c:	68bb      	ldr	r3, [r7, #8]
}
 801528e:	4618      	mov	r0, r3
 8015290:	371c      	adds	r7, #28
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr

0801529a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801529a:	b480      	push	{r7}
 801529c:	b083      	sub	sp, #12
 801529e:	af00      	add	r7, sp, #0
 80152a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	695b      	ldr	r3, [r3, #20]
 80152a6:	f003 0301 	and.w	r3, r3, #1
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	370c      	adds	r7, #12
 80152ae:	46bd      	mov	sp, r7
 80152b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b4:	4770      	bx	lr
	...

080152b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80152b8:	b480      	push	{r7}
 80152ba:	b085      	sub	sp, #20
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152ca:	681a      	ldr	r2, [r3, #0]
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152d2:	4619      	mov	r1, r3
 80152d4:	4b09      	ldr	r3, [pc, #36]	@ (80152fc <USB_ActivateSetup+0x44>)
 80152d6:	4013      	ands	r3, r2
 80152d8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	68fa      	ldr	r2, [r7, #12]
 80152e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80152e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80152ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80152ee:	2300      	movs	r3, #0
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3714      	adds	r7, #20
 80152f4:	46bd      	mov	sp, r7
 80152f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fa:	4770      	bx	lr
 80152fc:	fffff800 	.word	0xfffff800

08015300 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015300:	b480      	push	{r7}
 8015302:	b087      	sub	sp, #28
 8015304:	af00      	add	r7, sp, #0
 8015306:	60f8      	str	r0, [r7, #12]
 8015308:	460b      	mov	r3, r1
 801530a:	607a      	str	r2, [r7, #4]
 801530c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	333c      	adds	r3, #60	@ 0x3c
 8015316:	3304      	adds	r3, #4
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	4a26      	ldr	r2, [pc, #152]	@ (80153b8 <USB_EP0_OutStart+0xb8>)
 8015320:	4293      	cmp	r3, r2
 8015322:	d90a      	bls.n	801533a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015334:	d101      	bne.n	801533a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8015336:	2300      	movs	r3, #0
 8015338:	e037      	b.n	80153aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801533a:	697b      	ldr	r3, [r7, #20]
 801533c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015340:	461a      	mov	r2, r3
 8015342:	2300      	movs	r3, #0
 8015344:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801534c:	691b      	ldr	r3, [r3, #16]
 801534e:	697a      	ldr	r2, [r7, #20]
 8015350:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015354:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015358:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015360:	691b      	ldr	r3, [r3, #16]
 8015362:	697a      	ldr	r2, [r7, #20]
 8015364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015368:	f043 0318 	orr.w	r3, r3, #24
 801536c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801536e:	697b      	ldr	r3, [r7, #20]
 8015370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015374:	691b      	ldr	r3, [r3, #16]
 8015376:	697a      	ldr	r2, [r7, #20]
 8015378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801537c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015380:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015382:	7afb      	ldrb	r3, [r7, #11]
 8015384:	2b01      	cmp	r3, #1
 8015386:	d10f      	bne.n	80153a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801538e:	461a      	mov	r2, r3
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	697a      	ldr	r2, [r7, #20]
 801539e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80153a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80153a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80153a8:	2300      	movs	r3, #0
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	371c      	adds	r7, #28
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop
 80153b8:	4f54300a 	.word	0x4f54300a

080153bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80153bc:	b480      	push	{r7}
 80153be:	b085      	sub	sp, #20
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80153c4:	2300      	movs	r3, #0
 80153c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	3301      	adds	r3, #1
 80153cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80153d4:	d901      	bls.n	80153da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80153d6:	2303      	movs	r3, #3
 80153d8:	e01b      	b.n	8015412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	691b      	ldr	r3, [r3, #16]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	daf2      	bge.n	80153c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80153e2:	2300      	movs	r3, #0
 80153e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	691b      	ldr	r3, [r3, #16]
 80153ea:	f043 0201 	orr.w	r2, r3, #1
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	3301      	adds	r3, #1
 80153f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80153fe:	d901      	bls.n	8015404 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015400:	2303      	movs	r3, #3
 8015402:	e006      	b.n	8015412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	691b      	ldr	r3, [r3, #16]
 8015408:	f003 0301 	and.w	r3, r3, #1
 801540c:	2b01      	cmp	r3, #1
 801540e:	d0f0      	beq.n	80153f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8015410:	2300      	movs	r3, #0
}
 8015412:	4618      	mov	r0, r3
 8015414:	3714      	adds	r7, #20
 8015416:	46bd      	mov	sp, r7
 8015418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541c:	4770      	bx	lr

0801541e <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 801541e:	b580      	push	{r7, lr}
 8015420:	b082      	sub	sp, #8
 8015422:	af00      	add	r7, sp, #0
 8015424:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	2200      	movs	r2, #0
 801542a:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2200      	movs	r2, #0
 8015430:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2200      	movs	r2, #0
 8015436:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2200      	movs	r2, #0
 801543c:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2200      	movs	r2, #0
 8015442:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2200      	movs	r2, #0
 8015448:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2200      	movs	r2, #0
 8015450:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 8015454:	2044      	movs	r0, #68	@ 0x44
 8015456:	f002 fe97 	bl	8018188 <malloc>
 801545a:	4603      	mov	r3, r0
 801545c:	461a      	mov	r2, r3
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 8015462:	2044      	movs	r0, #68	@ 0x44
 8015464:	f002 fe90 	bl	8018188 <malloc>
 8015468:	4603      	mov	r3, r0
 801546a:	461a      	mov	r2, r3
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	7e1b      	ldrb	r3, [r3, #24]
 8015474:	461a      	mov	r2, r3
 8015476:	4613      	mov	r3, r2
 8015478:	011b      	lsls	r3, r3, #4
 801547a:	4413      	add	r3, r2
 801547c:	009b      	lsls	r3, r3, #2
 801547e:	4618      	mov	r0, r3
 8015480:	f002 fe82 	bl	8018188 <malloc>
 8015484:	4603      	mov	r3, r0
 8015486:	461a      	mov	r2, r3
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015492:	461a      	mov	r2, r3
 8015494:	4613      	mov	r3, r2
 8015496:	011b      	lsls	r3, r3, #4
 8015498:	4413      	add	r3, r2
 801549a:	009b      	lsls	r3, r3, #2
 801549c:	4618      	mov	r0, r3
 801549e:	f002 fe73 	bl	8018188 <malloc>
 80154a2:	4603      	mov	r3, r0
 80154a4:	461a      	mov	r2, r3
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	6818      	ldr	r0, [r3, #0]
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	689b      	ldr	r3, [r3, #8]
 80154b2:	2244      	movs	r2, #68	@ 0x44
 80154b4:	4619      	mov	r1, r3
 80154b6:	f7fc fd4b 	bl	8011f50 <HAL_UART_Receive_DMA>
 80154ba:	4603      	mov	r3, r0
}
 80154bc:	4618      	mov	r0, r3
 80154be:	3708      	adds	r7, #8
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}

080154c4 <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 80154c4:	b480      	push	{r7}
 80154c6:	b087      	sub	sp, #28
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	60f8      	str	r0, [r7, #12]
 80154cc:	60b9      	str	r1, [r7, #8]
 80154ce:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	7e9a      	ldrb	r2, [r3, #26]
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	7e5b      	ldrb	r3, [r3, #25]
 80154d8:	429a      	cmp	r2, r3
 80154da:	d101      	bne.n	80154e0 <XBEE_RXPacket+0x1c>
 80154dc:	2301      	movs	r3, #1
 80154de:	e03c      	b.n	801555a <XBEE_RXPacket+0x96>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	695a      	ldr	r2, [r3, #20]
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	7e9b      	ldrb	r3, [r3, #26]
 80154e8:	4619      	mov	r1, r3
 80154ea:	460b      	mov	r3, r1
 80154ec:	011b      	lsls	r3, r3, #4
 80154ee:	440b      	add	r3, r1
 80154f0:	009b      	lsls	r3, r3, #2
 80154f2:	4413      	add	r3, r2
 80154f4:	617b      	str	r3, [r7, #20]

	// Get the 16 bit packet number field
	*pkt_num = 0;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	2200      	movs	r2, #0
 80154fa:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	881b      	ldrh	r3, [r3, #0]
 8015500:	697a      	ldr	r2, [r7, #20]
 8015502:	3201      	adds	r2, #1
 8015504:	7812      	ldrb	r2, [r2, #0]
 8015506:	4413      	add	r3, r2
 8015508:	b29a      	uxth	r2, r3
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	881b      	ldrh	r3, [r3, #0]
 8015512:	021b      	lsls	r3, r3, #8
 8015514:	b29a      	uxth	r2, r3
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	881b      	ldrh	r3, [r3, #0]
 801551e:	697a      	ldr	r2, [r7, #20]
 8015520:	3202      	adds	r2, #2
 8015522:	7812      	ldrb	r2, [r2, #0]
 8015524:	4413      	add	r3, r2
 8015526:	b29a      	uxth	r2, r3
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	1d1a      	adds	r2, r3, #4
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	601a      	str	r2, [r3, #0]

	hxbee->pktRx_idxPop += 1;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	7e9b      	ldrb	r3, [r3, #26]
 8015538:	3301      	adds	r3, #1
 801553a:	b2da      	uxtb	r2, r3
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	7e9b      	ldrb	r3, [r3, #26]
 8015544:	68fa      	ldr	r2, [r7, #12]
 8015546:	7e12      	ldrb	r2, [r2, #24]
 8015548:	fbb3 f1f2 	udiv	r1, r3, r2
 801554c:	fb01 f202 	mul.w	r2, r1, r2
 8015550:	1a9b      	subs	r3, r3, r2
 8015552:	b2da      	uxtb	r2, r3
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	769a      	strb	r2, [r3, #26]

	return 0;
 8015558:	2300      	movs	r3, #0
}
 801555a:	4618      	mov	r0, r3
 801555c:	371c      	adds	r7, #28
 801555e:	46bd      	mov	sp, r7
 8015560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015564:	4770      	bx	lr
	...

08015568 <XBEE_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_DMACallback(XBEE_HandleTypeDef *hxbee) {
 8015568:	b580      	push	{r7, lr}
 801556a:	b096      	sub	sp, #88	@ 0x58
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don;t actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	7e5b      	ldrb	r3, [r3, #25]
 8015574:	3301      	adds	r3, #1
 8015576:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	7e1a      	ldrb	r2, [r3, #24]
 801557e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8015582:	fbb3 f1f2 	udiv	r1, r3, r2
 8015586:	fb01 f202 	mul.w	r2, r1, r2
 801558a:	1a9b      	subs	r3, r3, r2
 801558c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	7e9b      	ldrb	r3, [r3, #26]
 8015594:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8015598:	429a      	cmp	r2, r3
 801559a:	d101      	bne.n	80155a0 <XBEE_DMACallback+0x38>
 801559c:	2301      	movs	r3, #1
 801559e:	e097      	b.n	80156d0 <XBEE_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	7c1b      	ldrb	r3, [r3, #16]
 80155a4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 80155a8:	2300      	movs	r3, #0
 80155aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 80155ae:	2300      	movs	r3, #0
 80155b0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80155b4:	e027      	b.n	8015606 <XBEE_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 80155b6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80155ba:	687a      	ldr	r2, [r7, #4]
 80155bc:	7c12      	ldrb	r2, [r2, #16]
 80155be:	441a      	add	r2, r3
 80155c0:	4b45      	ldr	r3, [pc, #276]	@ (80156d8 <XBEE_DMACallback+0x170>)
 80155c2:	fb83 1302 	smull	r1, r3, r3, r2
 80155c6:	1159      	asrs	r1, r3, #5
 80155c8:	17d3      	asrs	r3, r2, #31
 80155ca:	1ac9      	subs	r1, r1, r3
 80155cc:	460b      	mov	r3, r1
 80155ce:	011b      	lsls	r3, r3, #4
 80155d0:	440b      	add	r3, r1
 80155d2:	009b      	lsls	r3, r3, #2
 80155d4:	1ad1      	subs	r1, r2, r3
 80155d6:	460b      	mov	r3, r1
 80155d8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == 0b10101010) {
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	689a      	ldr	r2, [r3, #8]
 80155e0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80155e4:	4413      	add	r3, r2
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	2baa      	cmp	r3, #170	@ 0xaa
 80155ea:	d107      	bne.n	80155fc <XBEE_DMACallback+0x94>
			found_delim = 1;					// Update flag
 80155ec:	2301      	movs	r3, #1
 80155ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80155f8:	741a      	strb	r2, [r3, #16]
			break;
 80155fa:	e008      	b.n	801560e <XBEE_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 80155fc:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015600:	3301      	adds	r3, #1
 8015602:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8015606:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 801560a:	2b43      	cmp	r3, #67	@ 0x43
 801560c:	d9d3      	bls.n	80155b6 <XBEE_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 801560e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015612:	2b00      	cmp	r3, #0
 8015614:	d101      	bne.n	801561a <XBEE_DMACallback+0xb2>
 8015616:	2302      	movs	r3, #2
 8015618:	e05a      	b.n	80156d0 <XBEE_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	68da      	ldr	r2, [r3, #12]
 801561e:	f107 030c 	add.w	r3, r7, #12
 8015622:	4611      	mov	r1, r2
 8015624:	2244      	movs	r2, #68	@ 0x44
 8015626:	4618      	mov	r0, r3
 8015628:	f002 feca 	bl	80183c0 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	68d8      	ldr	r0, [r3, #12]
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	689b      	ldr	r3, [r3, #8]
 8015634:	687a      	ldr	r2, [r7, #4]
 8015636:	7c12      	ldrb	r2, [r2, #16]
 8015638:	1899      	adds	r1, r3, r2
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	7c1b      	ldrb	r3, [r3, #16]
 801563e:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015642:	461a      	mov	r2, r3
 8015644:	f002 febc 	bl	80183c0 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	7c1b      	ldrb	r3, [r3, #16]
 801564c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8015650:	429a      	cmp	r2, r3
 8015652:	d201      	bcs.n	8015658 <XBEE_DMACallback+0xf0>
		return 2;
 8015654:	2302      	movs	r3, #2
 8015656:	e03b      	b.n	80156d0 <XBEE_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 8015658:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801565c:	b29b      	uxth	r3, r3
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	7c12      	ldrb	r2, [r2, #16]
 8015662:	1a9b      	subs	r3, r3, r2
 8015664:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8015668:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801566c:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015670:	461a      	mov	r2, r3
 8015672:	f107 030c 	add.w	r3, r7, #12
 8015676:	4413      	add	r3, r2
 8015678:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 801567c:	2100      	movs	r1, #0
 801567e:	4618      	mov	r0, r3
 8015680:	f002 fe5a 	bl	8018338 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 8015684:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015688:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801568c:	1ad3      	subs	r3, r2, r3
 801568e:	3344      	adds	r3, #68	@ 0x44
 8015690:	f107 020c 	add.w	r2, r7, #12
 8015694:	18d0      	adds	r0, r2, r3
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	6899      	ldr	r1, [r3, #8]
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	7c1b      	ldrb	r3, [r3, #16]
 801569e:	461a      	mov	r2, r3
 80156a0:	f002 fe8e 	bl	80183c0 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80156aa:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	695a      	ldr	r2, [r3, #20]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	7e5b      	ldrb	r3, [r3, #25]
 80156b4:	4619      	mov	r1, r3
 80156b6:	460b      	mov	r3, r1
 80156b8:	011b      	lsls	r3, r3, #4
 80156ba:	440b      	add	r3, r1
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	4413      	add	r3, r2
 80156c0:	4618      	mov	r0, r3
 80156c2:	f107 030c 	add.w	r3, r7, #12
 80156c6:	2244      	movs	r2, #68	@ 0x44
 80156c8:	4619      	mov	r1, r3
 80156ca:	f002 fe79 	bl	80183c0 <memcpy>

	return 0;
 80156ce:	2300      	movs	r3, #0
}
 80156d0:	4618      	mov	r0, r3
 80156d2:	3758      	adds	r7, #88	@ 0x58
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	78787879 	.word	0x78787879

080156dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b084      	sub	sp, #16
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	460b      	mov	r3, r1
 80156e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80156e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80156ec:	f002 fd08 	bl	8018100 <USBD_static_malloc>
 80156f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d109      	bne.n	801570c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	32b0      	adds	r2, #176	@ 0xb0
 8015702:	2100      	movs	r1, #0
 8015704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015708:	2302      	movs	r3, #2
 801570a:	e0d4      	b.n	80158b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801570c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015710:	2100      	movs	r1, #0
 8015712:	68f8      	ldr	r0, [r7, #12]
 8015714:	f002 fe10 	bl	8018338 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	32b0      	adds	r2, #176	@ 0xb0
 8015722:	68f9      	ldr	r1, [r7, #12]
 8015724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	32b0      	adds	r2, #176	@ 0xb0
 8015732:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	7c1b      	ldrb	r3, [r3, #16]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d138      	bne.n	80157b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015744:	4b5e      	ldr	r3, [pc, #376]	@ (80158c0 <USBD_CDC_Init+0x1e4>)
 8015746:	7819      	ldrb	r1, [r3, #0]
 8015748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801574c:	2202      	movs	r2, #2
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	f002 fbb3 	bl	8017eba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015754:	4b5a      	ldr	r3, [pc, #360]	@ (80158c0 <USBD_CDC_Init+0x1e4>)
 8015756:	781b      	ldrb	r3, [r3, #0]
 8015758:	f003 020f 	and.w	r2, r3, #15
 801575c:	6879      	ldr	r1, [r7, #4]
 801575e:	4613      	mov	r3, r2
 8015760:	009b      	lsls	r3, r3, #2
 8015762:	4413      	add	r3, r2
 8015764:	009b      	lsls	r3, r3, #2
 8015766:	440b      	add	r3, r1
 8015768:	3324      	adds	r3, #36	@ 0x24
 801576a:	2201      	movs	r2, #1
 801576c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801576e:	4b55      	ldr	r3, [pc, #340]	@ (80158c4 <USBD_CDC_Init+0x1e8>)
 8015770:	7819      	ldrb	r1, [r3, #0]
 8015772:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015776:	2202      	movs	r2, #2
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	f002 fb9e 	bl	8017eba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801577e:	4b51      	ldr	r3, [pc, #324]	@ (80158c4 <USBD_CDC_Init+0x1e8>)
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	f003 020f 	and.w	r2, r3, #15
 8015786:	6879      	ldr	r1, [r7, #4]
 8015788:	4613      	mov	r3, r2
 801578a:	009b      	lsls	r3, r3, #2
 801578c:	4413      	add	r3, r2
 801578e:	009b      	lsls	r3, r3, #2
 8015790:	440b      	add	r3, r1
 8015792:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015796:	2201      	movs	r2, #1
 8015798:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801579a:	4b4b      	ldr	r3, [pc, #300]	@ (80158c8 <USBD_CDC_Init+0x1ec>)
 801579c:	781b      	ldrb	r3, [r3, #0]
 801579e:	f003 020f 	and.w	r2, r3, #15
 80157a2:	6879      	ldr	r1, [r7, #4]
 80157a4:	4613      	mov	r3, r2
 80157a6:	009b      	lsls	r3, r3, #2
 80157a8:	4413      	add	r3, r2
 80157aa:	009b      	lsls	r3, r3, #2
 80157ac:	440b      	add	r3, r1
 80157ae:	3326      	adds	r3, #38	@ 0x26
 80157b0:	2210      	movs	r2, #16
 80157b2:	801a      	strh	r2, [r3, #0]
 80157b4:	e035      	b.n	8015822 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80157b6:	4b42      	ldr	r3, [pc, #264]	@ (80158c0 <USBD_CDC_Init+0x1e4>)
 80157b8:	7819      	ldrb	r1, [r3, #0]
 80157ba:	2340      	movs	r3, #64	@ 0x40
 80157bc:	2202      	movs	r2, #2
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f002 fb7b 	bl	8017eba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80157c4:	4b3e      	ldr	r3, [pc, #248]	@ (80158c0 <USBD_CDC_Init+0x1e4>)
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	f003 020f 	and.w	r2, r3, #15
 80157cc:	6879      	ldr	r1, [r7, #4]
 80157ce:	4613      	mov	r3, r2
 80157d0:	009b      	lsls	r3, r3, #2
 80157d2:	4413      	add	r3, r2
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	440b      	add	r3, r1
 80157d8:	3324      	adds	r3, #36	@ 0x24
 80157da:	2201      	movs	r2, #1
 80157dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80157de:	4b39      	ldr	r3, [pc, #228]	@ (80158c4 <USBD_CDC_Init+0x1e8>)
 80157e0:	7819      	ldrb	r1, [r3, #0]
 80157e2:	2340      	movs	r3, #64	@ 0x40
 80157e4:	2202      	movs	r2, #2
 80157e6:	6878      	ldr	r0, [r7, #4]
 80157e8:	f002 fb67 	bl	8017eba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80157ec:	4b35      	ldr	r3, [pc, #212]	@ (80158c4 <USBD_CDC_Init+0x1e8>)
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	f003 020f 	and.w	r2, r3, #15
 80157f4:	6879      	ldr	r1, [r7, #4]
 80157f6:	4613      	mov	r3, r2
 80157f8:	009b      	lsls	r3, r3, #2
 80157fa:	4413      	add	r3, r2
 80157fc:	009b      	lsls	r3, r3, #2
 80157fe:	440b      	add	r3, r1
 8015800:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015804:	2201      	movs	r2, #1
 8015806:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015808:	4b2f      	ldr	r3, [pc, #188]	@ (80158c8 <USBD_CDC_Init+0x1ec>)
 801580a:	781b      	ldrb	r3, [r3, #0]
 801580c:	f003 020f 	and.w	r2, r3, #15
 8015810:	6879      	ldr	r1, [r7, #4]
 8015812:	4613      	mov	r3, r2
 8015814:	009b      	lsls	r3, r3, #2
 8015816:	4413      	add	r3, r2
 8015818:	009b      	lsls	r3, r3, #2
 801581a:	440b      	add	r3, r1
 801581c:	3326      	adds	r3, #38	@ 0x26
 801581e:	2210      	movs	r2, #16
 8015820:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015822:	4b29      	ldr	r3, [pc, #164]	@ (80158c8 <USBD_CDC_Init+0x1ec>)
 8015824:	7819      	ldrb	r1, [r3, #0]
 8015826:	2308      	movs	r3, #8
 8015828:	2203      	movs	r2, #3
 801582a:	6878      	ldr	r0, [r7, #4]
 801582c:	f002 fb45 	bl	8017eba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015830:	4b25      	ldr	r3, [pc, #148]	@ (80158c8 <USBD_CDC_Init+0x1ec>)
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	f003 020f 	and.w	r2, r3, #15
 8015838:	6879      	ldr	r1, [r7, #4]
 801583a:	4613      	mov	r3, r2
 801583c:	009b      	lsls	r3, r3, #2
 801583e:	4413      	add	r3, r2
 8015840:	009b      	lsls	r3, r3, #2
 8015842:	440b      	add	r3, r1
 8015844:	3324      	adds	r3, #36	@ 0x24
 8015846:	2201      	movs	r2, #1
 8015848:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	2200      	movs	r2, #0
 801584e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015858:	687a      	ldr	r2, [r7, #4]
 801585a:	33b0      	adds	r3, #176	@ 0xb0
 801585c:	009b      	lsls	r3, r3, #2
 801585e:	4413      	add	r3, r2
 8015860:	685b      	ldr	r3, [r3, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	2200      	movs	r2, #0
 801586a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	2200      	movs	r2, #0
 8015872:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801587c:	2b00      	cmp	r3, #0
 801587e:	d101      	bne.n	8015884 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015880:	2302      	movs	r3, #2
 8015882:	e018      	b.n	80158b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	7c1b      	ldrb	r3, [r3, #16]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d10a      	bne.n	80158a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801588c:	4b0d      	ldr	r3, [pc, #52]	@ (80158c4 <USBD_CDC_Init+0x1e8>)
 801588e:	7819      	ldrb	r1, [r3, #0]
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f002 fbfc 	bl	8018098 <USBD_LL_PrepareReceive>
 80158a0:	e008      	b.n	80158b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80158a2:	4b08      	ldr	r3, [pc, #32]	@ (80158c4 <USBD_CDC_Init+0x1e8>)
 80158a4:	7819      	ldrb	r1, [r3, #0]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80158ac:	2340      	movs	r3, #64	@ 0x40
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f002 fbf2 	bl	8018098 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80158b4:	2300      	movs	r3, #0
}
 80158b6:	4618      	mov	r0, r3
 80158b8:	3710      	adds	r7, #16
 80158ba:	46bd      	mov	sp, r7
 80158bc:	bd80      	pop	{r7, pc}
 80158be:	bf00      	nop
 80158c0:	240002ab 	.word	0x240002ab
 80158c4:	240002ac 	.word	0x240002ac
 80158c8:	240002ad 	.word	0x240002ad

080158cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b082      	sub	sp, #8
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	460b      	mov	r3, r1
 80158d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80158d8:	4b3a      	ldr	r3, [pc, #232]	@ (80159c4 <USBD_CDC_DeInit+0xf8>)
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	4619      	mov	r1, r3
 80158de:	6878      	ldr	r0, [r7, #4]
 80158e0:	f002 fb11 	bl	8017f06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80158e4:	4b37      	ldr	r3, [pc, #220]	@ (80159c4 <USBD_CDC_DeInit+0xf8>)
 80158e6:	781b      	ldrb	r3, [r3, #0]
 80158e8:	f003 020f 	and.w	r2, r3, #15
 80158ec:	6879      	ldr	r1, [r7, #4]
 80158ee:	4613      	mov	r3, r2
 80158f0:	009b      	lsls	r3, r3, #2
 80158f2:	4413      	add	r3, r2
 80158f4:	009b      	lsls	r3, r3, #2
 80158f6:	440b      	add	r3, r1
 80158f8:	3324      	adds	r3, #36	@ 0x24
 80158fa:	2200      	movs	r2, #0
 80158fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80158fe:	4b32      	ldr	r3, [pc, #200]	@ (80159c8 <USBD_CDC_DeInit+0xfc>)
 8015900:	781b      	ldrb	r3, [r3, #0]
 8015902:	4619      	mov	r1, r3
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f002 fafe 	bl	8017f06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801590a:	4b2f      	ldr	r3, [pc, #188]	@ (80159c8 <USBD_CDC_DeInit+0xfc>)
 801590c:	781b      	ldrb	r3, [r3, #0]
 801590e:	f003 020f 	and.w	r2, r3, #15
 8015912:	6879      	ldr	r1, [r7, #4]
 8015914:	4613      	mov	r3, r2
 8015916:	009b      	lsls	r3, r3, #2
 8015918:	4413      	add	r3, r2
 801591a:	009b      	lsls	r3, r3, #2
 801591c:	440b      	add	r3, r1
 801591e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015922:	2200      	movs	r2, #0
 8015924:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015926:	4b29      	ldr	r3, [pc, #164]	@ (80159cc <USBD_CDC_DeInit+0x100>)
 8015928:	781b      	ldrb	r3, [r3, #0]
 801592a:	4619      	mov	r1, r3
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f002 faea 	bl	8017f06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015932:	4b26      	ldr	r3, [pc, #152]	@ (80159cc <USBD_CDC_DeInit+0x100>)
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	f003 020f 	and.w	r2, r3, #15
 801593a:	6879      	ldr	r1, [r7, #4]
 801593c:	4613      	mov	r3, r2
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	4413      	add	r3, r2
 8015942:	009b      	lsls	r3, r3, #2
 8015944:	440b      	add	r3, r1
 8015946:	3324      	adds	r3, #36	@ 0x24
 8015948:	2200      	movs	r2, #0
 801594a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801594c:	4b1f      	ldr	r3, [pc, #124]	@ (80159cc <USBD_CDC_DeInit+0x100>)
 801594e:	781b      	ldrb	r3, [r3, #0]
 8015950:	f003 020f 	and.w	r2, r3, #15
 8015954:	6879      	ldr	r1, [r7, #4]
 8015956:	4613      	mov	r3, r2
 8015958:	009b      	lsls	r3, r3, #2
 801595a:	4413      	add	r3, r2
 801595c:	009b      	lsls	r3, r3, #2
 801595e:	440b      	add	r3, r1
 8015960:	3326      	adds	r3, #38	@ 0x26
 8015962:	2200      	movs	r2, #0
 8015964:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	32b0      	adds	r2, #176	@ 0xb0
 8015970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d01f      	beq.n	80159b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801597e:	687a      	ldr	r2, [r7, #4]
 8015980:	33b0      	adds	r3, #176	@ 0xb0
 8015982:	009b      	lsls	r3, r3, #2
 8015984:	4413      	add	r3, r2
 8015986:	685b      	ldr	r3, [r3, #4]
 8015988:	685b      	ldr	r3, [r3, #4]
 801598a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	32b0      	adds	r2, #176	@ 0xb0
 8015996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801599a:	4618      	mov	r0, r3
 801599c:	f002 fbbe 	bl	801811c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	32b0      	adds	r2, #176	@ 0xb0
 80159aa:	2100      	movs	r1, #0
 80159ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	2200      	movs	r2, #0
 80159b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80159b8:	2300      	movs	r3, #0
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3708      	adds	r7, #8
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}
 80159c2:	bf00      	nop
 80159c4:	240002ab 	.word	0x240002ab
 80159c8:	240002ac 	.word	0x240002ac
 80159cc:	240002ad 	.word	0x240002ad

080159d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b086      	sub	sp, #24
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
 80159d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	32b0      	adds	r2, #176	@ 0xb0
 80159e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80159ea:	2300      	movs	r3, #0
 80159ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80159ee:	2300      	movs	r3, #0
 80159f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80159f2:	2300      	movs	r3, #0
 80159f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80159f6:	693b      	ldr	r3, [r7, #16]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d101      	bne.n	8015a00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80159fc:	2303      	movs	r3, #3
 80159fe:	e0bf      	b.n	8015b80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	781b      	ldrb	r3, [r3, #0]
 8015a04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d050      	beq.n	8015aae <USBD_CDC_Setup+0xde>
 8015a0c:	2b20      	cmp	r3, #32
 8015a0e:	f040 80af 	bne.w	8015b70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	88db      	ldrh	r3, [r3, #6]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d03a      	beq.n	8015a90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	b25b      	sxtb	r3, r3
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	da1b      	bge.n	8015a5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	33b0      	adds	r3, #176	@ 0xb0
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	4413      	add	r3, r2
 8015a32:	685b      	ldr	r3, [r3, #4]
 8015a34:	689b      	ldr	r3, [r3, #8]
 8015a36:	683a      	ldr	r2, [r7, #0]
 8015a38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015a3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015a3c:	683a      	ldr	r2, [r7, #0]
 8015a3e:	88d2      	ldrh	r2, [r2, #6]
 8015a40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015a42:	683b      	ldr	r3, [r7, #0]
 8015a44:	88db      	ldrh	r3, [r3, #6]
 8015a46:	2b07      	cmp	r3, #7
 8015a48:	bf28      	it	cs
 8015a4a:	2307      	movcs	r3, #7
 8015a4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	89fa      	ldrh	r2, [r7, #14]
 8015a52:	4619      	mov	r1, r3
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f001 fdbd 	bl	80175d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015a5a:	e090      	b.n	8015b7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015a5c:	683b      	ldr	r3, [r7, #0]
 8015a5e:	785a      	ldrb	r2, [r3, #1]
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	88db      	ldrh	r3, [r3, #6]
 8015a6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8015a6c:	d803      	bhi.n	8015a76 <USBD_CDC_Setup+0xa6>
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	88db      	ldrh	r3, [r3, #6]
 8015a72:	b2da      	uxtb	r2, r3
 8015a74:	e000      	b.n	8015a78 <USBD_CDC_Setup+0xa8>
 8015a76:	2240      	movs	r2, #64	@ 0x40
 8015a78:	693b      	ldr	r3, [r7, #16]
 8015a7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015a7e:	6939      	ldr	r1, [r7, #16]
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015a86:	461a      	mov	r2, r3
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f001 fdcf 	bl	801762c <USBD_CtlPrepareRx>
      break;
 8015a8e:	e076      	b.n	8015b7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a96:	687a      	ldr	r2, [r7, #4]
 8015a98:	33b0      	adds	r3, #176	@ 0xb0
 8015a9a:	009b      	lsls	r3, r3, #2
 8015a9c:	4413      	add	r3, r2
 8015a9e:	685b      	ldr	r3, [r3, #4]
 8015aa0:	689b      	ldr	r3, [r3, #8]
 8015aa2:	683a      	ldr	r2, [r7, #0]
 8015aa4:	7850      	ldrb	r0, [r2, #1]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	6839      	ldr	r1, [r7, #0]
 8015aaa:	4798      	blx	r3
      break;
 8015aac:	e067      	b.n	8015b7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	785b      	ldrb	r3, [r3, #1]
 8015ab2:	2b0b      	cmp	r3, #11
 8015ab4:	d851      	bhi.n	8015b5a <USBD_CDC_Setup+0x18a>
 8015ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8015abc <USBD_CDC_Setup+0xec>)
 8015ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015abc:	08015aed 	.word	0x08015aed
 8015ac0:	08015b69 	.word	0x08015b69
 8015ac4:	08015b5b 	.word	0x08015b5b
 8015ac8:	08015b5b 	.word	0x08015b5b
 8015acc:	08015b5b 	.word	0x08015b5b
 8015ad0:	08015b5b 	.word	0x08015b5b
 8015ad4:	08015b5b 	.word	0x08015b5b
 8015ad8:	08015b5b 	.word	0x08015b5b
 8015adc:	08015b5b 	.word	0x08015b5b
 8015ae0:	08015b5b 	.word	0x08015b5b
 8015ae4:	08015b17 	.word	0x08015b17
 8015ae8:	08015b41 	.word	0x08015b41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015af2:	b2db      	uxtb	r3, r3
 8015af4:	2b03      	cmp	r3, #3
 8015af6:	d107      	bne.n	8015b08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015af8:	f107 030a 	add.w	r3, r7, #10
 8015afc:	2202      	movs	r2, #2
 8015afe:	4619      	mov	r1, r3
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f001 fd67 	bl	80175d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015b06:	e032      	b.n	8015b6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015b08:	6839      	ldr	r1, [r7, #0]
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f001 fce5 	bl	80174da <USBD_CtlError>
            ret = USBD_FAIL;
 8015b10:	2303      	movs	r3, #3
 8015b12:	75fb      	strb	r3, [r7, #23]
          break;
 8015b14:	e02b      	b.n	8015b6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	2b03      	cmp	r3, #3
 8015b20:	d107      	bne.n	8015b32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015b22:	f107 030d 	add.w	r3, r7, #13
 8015b26:	2201      	movs	r2, #1
 8015b28:	4619      	mov	r1, r3
 8015b2a:	6878      	ldr	r0, [r7, #4]
 8015b2c:	f001 fd52 	bl	80175d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015b30:	e01d      	b.n	8015b6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015b32:	6839      	ldr	r1, [r7, #0]
 8015b34:	6878      	ldr	r0, [r7, #4]
 8015b36:	f001 fcd0 	bl	80174da <USBD_CtlError>
            ret = USBD_FAIL;
 8015b3a:	2303      	movs	r3, #3
 8015b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8015b3e:	e016      	b.n	8015b6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b46:	b2db      	uxtb	r3, r3
 8015b48:	2b03      	cmp	r3, #3
 8015b4a:	d00f      	beq.n	8015b6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015b4c:	6839      	ldr	r1, [r7, #0]
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f001 fcc3 	bl	80174da <USBD_CtlError>
            ret = USBD_FAIL;
 8015b54:	2303      	movs	r3, #3
 8015b56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015b58:	e008      	b.n	8015b6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015b5a:	6839      	ldr	r1, [r7, #0]
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f001 fcbc 	bl	80174da <USBD_CtlError>
          ret = USBD_FAIL;
 8015b62:	2303      	movs	r3, #3
 8015b64:	75fb      	strb	r3, [r7, #23]
          break;
 8015b66:	e002      	b.n	8015b6e <USBD_CDC_Setup+0x19e>
          break;
 8015b68:	bf00      	nop
 8015b6a:	e008      	b.n	8015b7e <USBD_CDC_Setup+0x1ae>
          break;
 8015b6c:	bf00      	nop
      }
      break;
 8015b6e:	e006      	b.n	8015b7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015b70:	6839      	ldr	r1, [r7, #0]
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f001 fcb1 	bl	80174da <USBD_CtlError>
      ret = USBD_FAIL;
 8015b78:	2303      	movs	r3, #3
 8015b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8015b7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8015b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b80:	4618      	mov	r0, r3
 8015b82:	3718      	adds	r7, #24
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}

08015b88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	460b      	mov	r3, r1
 8015b92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015b9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	32b0      	adds	r2, #176	@ 0xb0
 8015ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d101      	bne.n	8015bb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015bae:	2303      	movs	r3, #3
 8015bb0:	e065      	b.n	8015c7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	32b0      	adds	r2, #176	@ 0xb0
 8015bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015bc2:	78fb      	ldrb	r3, [r7, #3]
 8015bc4:	f003 020f 	and.w	r2, r3, #15
 8015bc8:	6879      	ldr	r1, [r7, #4]
 8015bca:	4613      	mov	r3, r2
 8015bcc:	009b      	lsls	r3, r3, #2
 8015bce:	4413      	add	r3, r2
 8015bd0:	009b      	lsls	r3, r3, #2
 8015bd2:	440b      	add	r3, r1
 8015bd4:	3318      	adds	r3, #24
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d02f      	beq.n	8015c3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015bdc:	78fb      	ldrb	r3, [r7, #3]
 8015bde:	f003 020f 	and.w	r2, r3, #15
 8015be2:	6879      	ldr	r1, [r7, #4]
 8015be4:	4613      	mov	r3, r2
 8015be6:	009b      	lsls	r3, r3, #2
 8015be8:	4413      	add	r3, r2
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	440b      	add	r3, r1
 8015bee:	3318      	adds	r3, #24
 8015bf0:	681a      	ldr	r2, [r3, #0]
 8015bf2:	78fb      	ldrb	r3, [r7, #3]
 8015bf4:	f003 010f 	and.w	r1, r3, #15
 8015bf8:	68f8      	ldr	r0, [r7, #12]
 8015bfa:	460b      	mov	r3, r1
 8015bfc:	00db      	lsls	r3, r3, #3
 8015bfe:	440b      	add	r3, r1
 8015c00:	009b      	lsls	r3, r3, #2
 8015c02:	4403      	add	r3, r0
 8015c04:	331c      	adds	r3, #28
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	fbb2 f1f3 	udiv	r1, r2, r3
 8015c0c:	fb01 f303 	mul.w	r3, r1, r3
 8015c10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d112      	bne.n	8015c3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015c16:	78fb      	ldrb	r3, [r7, #3]
 8015c18:	f003 020f 	and.w	r2, r3, #15
 8015c1c:	6879      	ldr	r1, [r7, #4]
 8015c1e:	4613      	mov	r3, r2
 8015c20:	009b      	lsls	r3, r3, #2
 8015c22:	4413      	add	r3, r2
 8015c24:	009b      	lsls	r3, r3, #2
 8015c26:	440b      	add	r3, r1
 8015c28:	3318      	adds	r3, #24
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015c2e:	78f9      	ldrb	r1, [r7, #3]
 8015c30:	2300      	movs	r3, #0
 8015c32:	2200      	movs	r2, #0
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f002 fa0e 	bl	8018056 <USBD_LL_Transmit>
 8015c3a:	e01f      	b.n	8015c7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	2200      	movs	r2, #0
 8015c40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c4a:	687a      	ldr	r2, [r7, #4]
 8015c4c:	33b0      	adds	r3, #176	@ 0xb0
 8015c4e:	009b      	lsls	r3, r3, #2
 8015c50:	4413      	add	r3, r2
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	691b      	ldr	r3, [r3, #16]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d010      	beq.n	8015c7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c60:	687a      	ldr	r2, [r7, #4]
 8015c62:	33b0      	adds	r3, #176	@ 0xb0
 8015c64:	009b      	lsls	r3, r3, #2
 8015c66:	4413      	add	r3, r2
 8015c68:	685b      	ldr	r3, [r3, #4]
 8015c6a:	691b      	ldr	r3, [r3, #16]
 8015c6c:	68ba      	ldr	r2, [r7, #8]
 8015c6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015c72:	68ba      	ldr	r2, [r7, #8]
 8015c74:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015c78:	78fa      	ldrb	r2, [r7, #3]
 8015c7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015c7c:	2300      	movs	r3, #0
}
 8015c7e:	4618      	mov	r0, r3
 8015c80:	3710      	adds	r7, #16
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}

08015c86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015c86:	b580      	push	{r7, lr}
 8015c88:	b084      	sub	sp, #16
 8015c8a:	af00      	add	r7, sp, #0
 8015c8c:	6078      	str	r0, [r7, #4]
 8015c8e:	460b      	mov	r3, r1
 8015c90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	32b0      	adds	r2, #176	@ 0xb0
 8015c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ca0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	32b0      	adds	r2, #176	@ 0xb0
 8015cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d101      	bne.n	8015cb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015cb4:	2303      	movs	r3, #3
 8015cb6:	e01a      	b.n	8015cee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015cb8:	78fb      	ldrb	r3, [r7, #3]
 8015cba:	4619      	mov	r1, r3
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f002 fa0c 	bl	80180da <USBD_LL_GetRxDataSize>
 8015cc2:	4602      	mov	r2, r0
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	33b0      	adds	r3, #176	@ 0xb0
 8015cd4:	009b      	lsls	r3, r3, #2
 8015cd6:	4413      	add	r3, r2
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	68db      	ldr	r3, [r3, #12]
 8015cdc:	68fa      	ldr	r2, [r7, #12]
 8015cde:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015ce2:	68fa      	ldr	r2, [r7, #12]
 8015ce4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015ce8:	4611      	mov	r1, r2
 8015cea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015cec:	2300      	movs	r3, #0
}
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3710      	adds	r7, #16
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}

08015cf6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015cf6:	b580      	push	{r7, lr}
 8015cf8:	b084      	sub	sp, #16
 8015cfa:	af00      	add	r7, sp, #0
 8015cfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	32b0      	adds	r2, #176	@ 0xb0
 8015d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d101      	bne.n	8015d18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015d14:	2303      	movs	r3, #3
 8015d16:	e024      	b.n	8015d62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d1e:	687a      	ldr	r2, [r7, #4]
 8015d20:	33b0      	adds	r3, #176	@ 0xb0
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	4413      	add	r3, r2
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d019      	beq.n	8015d60 <USBD_CDC_EP0_RxReady+0x6a>
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015d32:	2bff      	cmp	r3, #255	@ 0xff
 8015d34:	d014      	beq.n	8015d60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d3c:	687a      	ldr	r2, [r7, #4]
 8015d3e:	33b0      	adds	r3, #176	@ 0xb0
 8015d40:	009b      	lsls	r3, r3, #2
 8015d42:	4413      	add	r3, r2
 8015d44:	685b      	ldr	r3, [r3, #4]
 8015d46:	689b      	ldr	r3, [r3, #8]
 8015d48:	68fa      	ldr	r2, [r7, #12]
 8015d4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8015d4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015d50:	68fa      	ldr	r2, [r7, #12]
 8015d52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015d56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	22ff      	movs	r2, #255	@ 0xff
 8015d5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8015d60:	2300      	movs	r3, #0
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3710      	adds	r7, #16
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
	...

08015d6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b086      	sub	sp, #24
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015d74:	2182      	movs	r1, #130	@ 0x82
 8015d76:	4818      	ldr	r0, [pc, #96]	@ (8015dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015d78:	f000 fd4f 	bl	801681a <USBD_GetEpDesc>
 8015d7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015d7e:	2101      	movs	r1, #1
 8015d80:	4815      	ldr	r0, [pc, #84]	@ (8015dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015d82:	f000 fd4a 	bl	801681a <USBD_GetEpDesc>
 8015d86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015d88:	2181      	movs	r1, #129	@ 0x81
 8015d8a:	4813      	ldr	r0, [pc, #76]	@ (8015dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015d8c:	f000 fd45 	bl	801681a <USBD_GetEpDesc>
 8015d90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d002      	beq.n	8015d9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015d98:	697b      	ldr	r3, [r7, #20]
 8015d9a:	2210      	movs	r2, #16
 8015d9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d006      	beq.n	8015db2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015da4:	693b      	ldr	r3, [r7, #16]
 8015da6:	2200      	movs	r2, #0
 8015da8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015dac:	711a      	strb	r2, [r3, #4]
 8015dae:	2200      	movs	r2, #0
 8015db0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d006      	beq.n	8015dc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	2200      	movs	r2, #0
 8015dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015dc0:	711a      	strb	r2, [r3, #4]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2243      	movs	r2, #67	@ 0x43
 8015dca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015dcc:	4b02      	ldr	r3, [pc, #8]	@ (8015dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3718      	adds	r7, #24
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bd80      	pop	{r7, pc}
 8015dd6:	bf00      	nop
 8015dd8:	24000268 	.word	0x24000268

08015ddc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b086      	sub	sp, #24
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015de4:	2182      	movs	r1, #130	@ 0x82
 8015de6:	4818      	ldr	r0, [pc, #96]	@ (8015e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015de8:	f000 fd17 	bl	801681a <USBD_GetEpDesc>
 8015dec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015dee:	2101      	movs	r1, #1
 8015df0:	4815      	ldr	r0, [pc, #84]	@ (8015e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015df2:	f000 fd12 	bl	801681a <USBD_GetEpDesc>
 8015df6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015df8:	2181      	movs	r1, #129	@ 0x81
 8015dfa:	4813      	ldr	r0, [pc, #76]	@ (8015e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015dfc:	f000 fd0d 	bl	801681a <USBD_GetEpDesc>
 8015e00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015e02:	697b      	ldr	r3, [r7, #20]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d002      	beq.n	8015e0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015e08:	697b      	ldr	r3, [r7, #20]
 8015e0a:	2210      	movs	r2, #16
 8015e0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d006      	beq.n	8015e22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015e14:	693b      	ldr	r3, [r7, #16]
 8015e16:	2200      	movs	r2, #0
 8015e18:	711a      	strb	r2, [r3, #4]
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	f042 0202 	orr.w	r2, r2, #2
 8015e20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d006      	beq.n	8015e36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	711a      	strb	r2, [r3, #4]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	f042 0202 	orr.w	r2, r2, #2
 8015e34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2243      	movs	r2, #67	@ 0x43
 8015e3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015e3c:	4b02      	ldr	r3, [pc, #8]	@ (8015e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3718      	adds	r7, #24
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}
 8015e46:	bf00      	nop
 8015e48:	24000268 	.word	0x24000268

08015e4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b086      	sub	sp, #24
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015e54:	2182      	movs	r1, #130	@ 0x82
 8015e56:	4818      	ldr	r0, [pc, #96]	@ (8015eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015e58:	f000 fcdf 	bl	801681a <USBD_GetEpDesc>
 8015e5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015e5e:	2101      	movs	r1, #1
 8015e60:	4815      	ldr	r0, [pc, #84]	@ (8015eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015e62:	f000 fcda 	bl	801681a <USBD_GetEpDesc>
 8015e66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015e68:	2181      	movs	r1, #129	@ 0x81
 8015e6a:	4813      	ldr	r0, [pc, #76]	@ (8015eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015e6c:	f000 fcd5 	bl	801681a <USBD_GetEpDesc>
 8015e70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015e72:	697b      	ldr	r3, [r7, #20]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d002      	beq.n	8015e7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	2210      	movs	r2, #16
 8015e7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d006      	beq.n	8015e92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015e84:	693b      	ldr	r3, [r7, #16]
 8015e86:	2200      	movs	r2, #0
 8015e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e8c:	711a      	strb	r2, [r3, #4]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d006      	beq.n	8015ea6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ea0:	711a      	strb	r2, [r3, #4]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2243      	movs	r2, #67	@ 0x43
 8015eaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015eac:	4b02      	ldr	r3, [pc, #8]	@ (8015eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	3718      	adds	r7, #24
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}
 8015eb6:	bf00      	nop
 8015eb8:	24000268 	.word	0x24000268

08015ebc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015ebc:	b480      	push	{r7}
 8015ebe:	b083      	sub	sp, #12
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	220a      	movs	r2, #10
 8015ec8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015eca:	4b03      	ldr	r3, [pc, #12]	@ (8015ed8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015ecc:	4618      	mov	r0, r3
 8015ece:	370c      	adds	r7, #12
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed6:	4770      	bx	lr
 8015ed8:	24000224 	.word	0x24000224

08015edc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015edc:	b480      	push	{r7}
 8015ede:	b083      	sub	sp, #12
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d101      	bne.n	8015ef0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015eec:	2303      	movs	r3, #3
 8015eee:	e009      	b.n	8015f04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015ef6:	687a      	ldr	r2, [r7, #4]
 8015ef8:	33b0      	adds	r3, #176	@ 0xb0
 8015efa:	009b      	lsls	r3, r3, #2
 8015efc:	4413      	add	r3, r2
 8015efe:	683a      	ldr	r2, [r7, #0]
 8015f00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015f02:	2300      	movs	r3, #0
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	370c      	adds	r7, #12
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0e:	4770      	bx	lr

08015f10 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015f10:	b480      	push	{r7}
 8015f12:	b087      	sub	sp, #28
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	60f8      	str	r0, [r7, #12]
 8015f18:	60b9      	str	r1, [r7, #8]
 8015f1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	32b0      	adds	r2, #176	@ 0xb0
 8015f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f2a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d101      	bne.n	8015f36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015f32:	2303      	movs	r3, #3
 8015f34:	e008      	b.n	8015f48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	68ba      	ldr	r2, [r7, #8]
 8015f3a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8015f3e:	697b      	ldr	r3, [r7, #20]
 8015f40:	687a      	ldr	r2, [r7, #4]
 8015f42:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8015f46:	2300      	movs	r3, #0
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	371c      	adds	r7, #28
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f52:	4770      	bx	lr

08015f54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015f54:	b480      	push	{r7}
 8015f56:	b085      	sub	sp, #20
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	32b0      	adds	r2, #176	@ 0xb0
 8015f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d101      	bne.n	8015f78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015f74:	2303      	movs	r3, #3
 8015f76:	e004      	b.n	8015f82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	683a      	ldr	r2, [r7, #0]
 8015f7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8015f80:	2300      	movs	r3, #0
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	3714      	adds	r7, #20
 8015f86:	46bd      	mov	sp, r7
 8015f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8c:	4770      	bx	lr
	...

08015f90 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b084      	sub	sp, #16
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	32b0      	adds	r2, #176	@ 0xb0
 8015fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fa6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015fa8:	2301      	movs	r3, #1
 8015faa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d101      	bne.n	8015fb6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015fb2:	2303      	movs	r3, #3
 8015fb4:	e025      	b.n	8016002 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015fb6:	68bb      	ldr	r3, [r7, #8]
 8015fb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d11f      	bne.n	8016000 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015fc8:	4b10      	ldr	r3, [pc, #64]	@ (801600c <USBD_CDC_TransmitPacket+0x7c>)
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	f003 020f 	and.w	r2, r3, #15
 8015fd0:	68bb      	ldr	r3, [r7, #8]
 8015fd2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8015fd6:	6878      	ldr	r0, [r7, #4]
 8015fd8:	4613      	mov	r3, r2
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	4413      	add	r3, r2
 8015fde:	009b      	lsls	r3, r3, #2
 8015fe0:	4403      	add	r3, r0
 8015fe2:	3318      	adds	r3, #24
 8015fe4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015fe6:	4b09      	ldr	r3, [pc, #36]	@ (801600c <USBD_CDC_TransmitPacket+0x7c>)
 8015fe8:	7819      	ldrb	r1, [r3, #0]
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8015ff0:	68bb      	ldr	r3, [r7, #8]
 8015ff2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8015ff6:	6878      	ldr	r0, [r7, #4]
 8015ff8:	f002 f82d 	bl	8018056 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016000:	7bfb      	ldrb	r3, [r7, #15]
}
 8016002:	4618      	mov	r0, r3
 8016004:	3710      	adds	r7, #16
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}
 801600a:	bf00      	nop
 801600c:	240002ab 	.word	0x240002ab

08016010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b084      	sub	sp, #16
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	32b0      	adds	r2, #176	@ 0xb0
 8016022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016026:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	32b0      	adds	r2, #176	@ 0xb0
 8016032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d101      	bne.n	801603e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801603a:	2303      	movs	r3, #3
 801603c:	e018      	b.n	8016070 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	7c1b      	ldrb	r3, [r3, #16]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d10a      	bne.n	801605c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016046:	4b0c      	ldr	r3, [pc, #48]	@ (8016078 <USBD_CDC_ReceivePacket+0x68>)
 8016048:	7819      	ldrb	r1, [r3, #0]
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f002 f81f 	bl	8018098 <USBD_LL_PrepareReceive>
 801605a:	e008      	b.n	801606e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801605c:	4b06      	ldr	r3, [pc, #24]	@ (8016078 <USBD_CDC_ReceivePacket+0x68>)
 801605e:	7819      	ldrb	r1, [r3, #0]
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016066:	2340      	movs	r3, #64	@ 0x40
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f002 f815 	bl	8018098 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801606e:	2300      	movs	r3, #0
}
 8016070:	4618      	mov	r0, r3
 8016072:	3710      	adds	r7, #16
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}
 8016078:	240002ac 	.word	0x240002ac

0801607c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b086      	sub	sp, #24
 8016080:	af00      	add	r7, sp, #0
 8016082:	60f8      	str	r0, [r7, #12]
 8016084:	60b9      	str	r1, [r7, #8]
 8016086:	4613      	mov	r3, r2
 8016088:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d101      	bne.n	8016094 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016090:	2303      	movs	r3, #3
 8016092:	e01f      	b.n	80160d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	2200      	movs	r2, #0
 8016098:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	2200      	movs	r2, #0
 80160a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	2200      	movs	r2, #0
 80160a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d003      	beq.n	80160ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	68ba      	ldr	r2, [r7, #8]
 80160b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2201      	movs	r2, #1
 80160be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	79fa      	ldrb	r2, [r7, #7]
 80160c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80160c8:	68f8      	ldr	r0, [r7, #12]
 80160ca:	f001 fe8b 	bl	8017de4 <USBD_LL_Init>
 80160ce:	4603      	mov	r3, r0
 80160d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80160d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3718      	adds	r7, #24
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}

080160dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b084      	sub	sp, #16
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
 80160e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80160e6:	2300      	movs	r3, #0
 80160e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d101      	bne.n	80160f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80160f0:	2303      	movs	r3, #3
 80160f2:	e025      	b.n	8016140 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	683a      	ldr	r2, [r7, #0]
 80160f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	32ae      	adds	r2, #174	@ 0xae
 8016106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801610c:	2b00      	cmp	r3, #0
 801610e:	d00f      	beq.n	8016130 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	32ae      	adds	r2, #174	@ 0xae
 801611a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016120:	f107 020e 	add.w	r2, r7, #14
 8016124:	4610      	mov	r0, r2
 8016126:	4798      	blx	r3
 8016128:	4602      	mov	r2, r0
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016136:	1c5a      	adds	r2, r3, #1
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801613e:	2300      	movs	r3, #0
}
 8016140:	4618      	mov	r0, r3
 8016142:	3710      	adds	r7, #16
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b082      	sub	sp, #8
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f001 fe97 	bl	8017e84 <USBD_LL_Start>
 8016156:	4603      	mov	r3, r0
}
 8016158:	4618      	mov	r0, r3
 801615a:	3708      	adds	r7, #8
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}

08016160 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016160:	b480      	push	{r7}
 8016162:	b083      	sub	sp, #12
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016168:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801616a:	4618      	mov	r0, r3
 801616c:	370c      	adds	r7, #12
 801616e:	46bd      	mov	sp, r7
 8016170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016174:	4770      	bx	lr

08016176 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016176:	b580      	push	{r7, lr}
 8016178:	b084      	sub	sp, #16
 801617a:	af00      	add	r7, sp, #0
 801617c:	6078      	str	r0, [r7, #4]
 801617e:	460b      	mov	r3, r1
 8016180:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016182:	2300      	movs	r3, #0
 8016184:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801618c:	2b00      	cmp	r3, #0
 801618e:	d009      	beq.n	80161a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	78fa      	ldrb	r2, [r7, #3]
 801619a:	4611      	mov	r1, r2
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	4798      	blx	r3
 80161a0:	4603      	mov	r3, r0
 80161a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80161a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3710      	adds	r7, #16
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}

080161ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80161ae:	b580      	push	{r7, lr}
 80161b0:	b084      	sub	sp, #16
 80161b2:	af00      	add	r7, sp, #0
 80161b4:	6078      	str	r0, [r7, #4]
 80161b6:	460b      	mov	r3, r1
 80161b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80161ba:	2300      	movs	r3, #0
 80161bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80161c4:	685b      	ldr	r3, [r3, #4]
 80161c6:	78fa      	ldrb	r2, [r7, #3]
 80161c8:	4611      	mov	r1, r2
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	4798      	blx	r3
 80161ce:	4603      	mov	r3, r0
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d001      	beq.n	80161d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80161d4:	2303      	movs	r3, #3
 80161d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80161d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3710      	adds	r7, #16
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}

080161e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80161e2:	b580      	push	{r7, lr}
 80161e4:	b084      	sub	sp, #16
 80161e6:	af00      	add	r7, sp, #0
 80161e8:	6078      	str	r0, [r7, #4]
 80161ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80161f2:	6839      	ldr	r1, [r7, #0]
 80161f4:	4618      	mov	r0, r3
 80161f6:	f001 f936 	bl	8017466 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	2201      	movs	r2, #1
 80161fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016208:	461a      	mov	r2, r3
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016216:	f003 031f 	and.w	r3, r3, #31
 801621a:	2b02      	cmp	r3, #2
 801621c:	d01a      	beq.n	8016254 <USBD_LL_SetupStage+0x72>
 801621e:	2b02      	cmp	r3, #2
 8016220:	d822      	bhi.n	8016268 <USBD_LL_SetupStage+0x86>
 8016222:	2b00      	cmp	r3, #0
 8016224:	d002      	beq.n	801622c <USBD_LL_SetupStage+0x4a>
 8016226:	2b01      	cmp	r3, #1
 8016228:	d00a      	beq.n	8016240 <USBD_LL_SetupStage+0x5e>
 801622a:	e01d      	b.n	8016268 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016232:	4619      	mov	r1, r3
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f000 fb63 	bl	8016900 <USBD_StdDevReq>
 801623a:	4603      	mov	r3, r0
 801623c:	73fb      	strb	r3, [r7, #15]
      break;
 801623e:	e020      	b.n	8016282 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016246:	4619      	mov	r1, r3
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f000 fbcb 	bl	80169e4 <USBD_StdItfReq>
 801624e:	4603      	mov	r3, r0
 8016250:	73fb      	strb	r3, [r7, #15]
      break;
 8016252:	e016      	b.n	8016282 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801625a:	4619      	mov	r1, r3
 801625c:	6878      	ldr	r0, [r7, #4]
 801625e:	f000 fc2d 	bl	8016abc <USBD_StdEPReq>
 8016262:	4603      	mov	r3, r0
 8016264:	73fb      	strb	r3, [r7, #15]
      break;
 8016266:	e00c      	b.n	8016282 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801626e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016272:	b2db      	uxtb	r3, r3
 8016274:	4619      	mov	r1, r3
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f001 fe64 	bl	8017f44 <USBD_LL_StallEP>
 801627c:	4603      	mov	r3, r0
 801627e:	73fb      	strb	r3, [r7, #15]
      break;
 8016280:	bf00      	nop
  }

  return ret;
 8016282:	7bfb      	ldrb	r3, [r7, #15]
}
 8016284:	4618      	mov	r0, r3
 8016286:	3710      	adds	r7, #16
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}

0801628c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b086      	sub	sp, #24
 8016290:	af00      	add	r7, sp, #0
 8016292:	60f8      	str	r0, [r7, #12]
 8016294:	460b      	mov	r3, r1
 8016296:	607a      	str	r2, [r7, #4]
 8016298:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801629a:	2300      	movs	r3, #0
 801629c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801629e:	7afb      	ldrb	r3, [r7, #11]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d16e      	bne.n	8016382 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80162aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80162b2:	2b03      	cmp	r3, #3
 80162b4:	f040 8098 	bne.w	80163e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	689a      	ldr	r2, [r3, #8]
 80162bc:	693b      	ldr	r3, [r7, #16]
 80162be:	68db      	ldr	r3, [r3, #12]
 80162c0:	429a      	cmp	r2, r3
 80162c2:	d913      	bls.n	80162ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80162c4:	693b      	ldr	r3, [r7, #16]
 80162c6:	689a      	ldr	r2, [r3, #8]
 80162c8:	693b      	ldr	r3, [r7, #16]
 80162ca:	68db      	ldr	r3, [r3, #12]
 80162cc:	1ad2      	subs	r2, r2, r3
 80162ce:	693b      	ldr	r3, [r7, #16]
 80162d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80162d2:	693b      	ldr	r3, [r7, #16]
 80162d4:	68da      	ldr	r2, [r3, #12]
 80162d6:	693b      	ldr	r3, [r7, #16]
 80162d8:	689b      	ldr	r3, [r3, #8]
 80162da:	4293      	cmp	r3, r2
 80162dc:	bf28      	it	cs
 80162de:	4613      	movcs	r3, r2
 80162e0:	461a      	mov	r2, r3
 80162e2:	6879      	ldr	r1, [r7, #4]
 80162e4:	68f8      	ldr	r0, [r7, #12]
 80162e6:	f001 f9be 	bl	8017666 <USBD_CtlContinueRx>
 80162ea:	e07d      	b.n	80163e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80162f2:	f003 031f 	and.w	r3, r3, #31
 80162f6:	2b02      	cmp	r3, #2
 80162f8:	d014      	beq.n	8016324 <USBD_LL_DataOutStage+0x98>
 80162fa:	2b02      	cmp	r3, #2
 80162fc:	d81d      	bhi.n	801633a <USBD_LL_DataOutStage+0xae>
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d002      	beq.n	8016308 <USBD_LL_DataOutStage+0x7c>
 8016302:	2b01      	cmp	r3, #1
 8016304:	d003      	beq.n	801630e <USBD_LL_DataOutStage+0x82>
 8016306:	e018      	b.n	801633a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016308:	2300      	movs	r3, #0
 801630a:	75bb      	strb	r3, [r7, #22]
            break;
 801630c:	e018      	b.n	8016340 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016314:	b2db      	uxtb	r3, r3
 8016316:	4619      	mov	r1, r3
 8016318:	68f8      	ldr	r0, [r7, #12]
 801631a:	f000 fa64 	bl	80167e6 <USBD_CoreFindIF>
 801631e:	4603      	mov	r3, r0
 8016320:	75bb      	strb	r3, [r7, #22]
            break;
 8016322:	e00d      	b.n	8016340 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801632a:	b2db      	uxtb	r3, r3
 801632c:	4619      	mov	r1, r3
 801632e:	68f8      	ldr	r0, [r7, #12]
 8016330:	f000 fa66 	bl	8016800 <USBD_CoreFindEP>
 8016334:	4603      	mov	r3, r0
 8016336:	75bb      	strb	r3, [r7, #22]
            break;
 8016338:	e002      	b.n	8016340 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801633a:	2300      	movs	r3, #0
 801633c:	75bb      	strb	r3, [r7, #22]
            break;
 801633e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016340:	7dbb      	ldrb	r3, [r7, #22]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d119      	bne.n	801637a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801634c:	b2db      	uxtb	r3, r3
 801634e:	2b03      	cmp	r3, #3
 8016350:	d113      	bne.n	801637a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016352:	7dba      	ldrb	r2, [r7, #22]
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	32ae      	adds	r2, #174	@ 0xae
 8016358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801635c:	691b      	ldr	r3, [r3, #16]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d00b      	beq.n	801637a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016362:	7dba      	ldrb	r2, [r7, #22]
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801636a:	7dba      	ldrb	r2, [r7, #22]
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	32ae      	adds	r2, #174	@ 0xae
 8016370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016374:	691b      	ldr	r3, [r3, #16]
 8016376:	68f8      	ldr	r0, [r7, #12]
 8016378:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801637a:	68f8      	ldr	r0, [r7, #12]
 801637c:	f001 f984 	bl	8017688 <USBD_CtlSendStatus>
 8016380:	e032      	b.n	80163e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016382:	7afb      	ldrb	r3, [r7, #11]
 8016384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016388:	b2db      	uxtb	r3, r3
 801638a:	4619      	mov	r1, r3
 801638c:	68f8      	ldr	r0, [r7, #12]
 801638e:	f000 fa37 	bl	8016800 <USBD_CoreFindEP>
 8016392:	4603      	mov	r3, r0
 8016394:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016396:	7dbb      	ldrb	r3, [r7, #22]
 8016398:	2bff      	cmp	r3, #255	@ 0xff
 801639a:	d025      	beq.n	80163e8 <USBD_LL_DataOutStage+0x15c>
 801639c:	7dbb      	ldrb	r3, [r7, #22]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d122      	bne.n	80163e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80163a8:	b2db      	uxtb	r3, r3
 80163aa:	2b03      	cmp	r3, #3
 80163ac:	d117      	bne.n	80163de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80163ae:	7dba      	ldrb	r2, [r7, #22]
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	32ae      	adds	r2, #174	@ 0xae
 80163b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163b8:	699b      	ldr	r3, [r3, #24]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d00f      	beq.n	80163de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80163be:	7dba      	ldrb	r2, [r7, #22]
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80163c6:	7dba      	ldrb	r2, [r7, #22]
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	32ae      	adds	r2, #174	@ 0xae
 80163cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163d0:	699b      	ldr	r3, [r3, #24]
 80163d2:	7afa      	ldrb	r2, [r7, #11]
 80163d4:	4611      	mov	r1, r2
 80163d6:	68f8      	ldr	r0, [r7, #12]
 80163d8:	4798      	blx	r3
 80163da:	4603      	mov	r3, r0
 80163dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80163de:	7dfb      	ldrb	r3, [r7, #23]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d001      	beq.n	80163e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80163e4:	7dfb      	ldrb	r3, [r7, #23]
 80163e6:	e000      	b.n	80163ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80163e8:	2300      	movs	r3, #0
}
 80163ea:	4618      	mov	r0, r3
 80163ec:	3718      	adds	r7, #24
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}

080163f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80163f2:	b580      	push	{r7, lr}
 80163f4:	b086      	sub	sp, #24
 80163f6:	af00      	add	r7, sp, #0
 80163f8:	60f8      	str	r0, [r7, #12]
 80163fa:	460b      	mov	r3, r1
 80163fc:	607a      	str	r2, [r7, #4]
 80163fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016400:	7afb      	ldrb	r3, [r7, #11]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d16f      	bne.n	80164e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	3314      	adds	r3, #20
 801640a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016412:	2b02      	cmp	r3, #2
 8016414:	d15a      	bne.n	80164cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016416:	693b      	ldr	r3, [r7, #16]
 8016418:	689a      	ldr	r2, [r3, #8]
 801641a:	693b      	ldr	r3, [r7, #16]
 801641c:	68db      	ldr	r3, [r3, #12]
 801641e:	429a      	cmp	r2, r3
 8016420:	d914      	bls.n	801644c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016422:	693b      	ldr	r3, [r7, #16]
 8016424:	689a      	ldr	r2, [r3, #8]
 8016426:	693b      	ldr	r3, [r7, #16]
 8016428:	68db      	ldr	r3, [r3, #12]
 801642a:	1ad2      	subs	r2, r2, r3
 801642c:	693b      	ldr	r3, [r7, #16]
 801642e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016430:	693b      	ldr	r3, [r7, #16]
 8016432:	689b      	ldr	r3, [r3, #8]
 8016434:	461a      	mov	r2, r3
 8016436:	6879      	ldr	r1, [r7, #4]
 8016438:	68f8      	ldr	r0, [r7, #12]
 801643a:	f001 f8e6 	bl	801760a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801643e:	2300      	movs	r3, #0
 8016440:	2200      	movs	r2, #0
 8016442:	2100      	movs	r1, #0
 8016444:	68f8      	ldr	r0, [r7, #12]
 8016446:	f001 fe27 	bl	8018098 <USBD_LL_PrepareReceive>
 801644a:	e03f      	b.n	80164cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801644c:	693b      	ldr	r3, [r7, #16]
 801644e:	68da      	ldr	r2, [r3, #12]
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	689b      	ldr	r3, [r3, #8]
 8016454:	429a      	cmp	r2, r3
 8016456:	d11c      	bne.n	8016492 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016458:	693b      	ldr	r3, [r7, #16]
 801645a:	685a      	ldr	r2, [r3, #4]
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016460:	429a      	cmp	r2, r3
 8016462:	d316      	bcc.n	8016492 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016464:	693b      	ldr	r3, [r7, #16]
 8016466:	685a      	ldr	r2, [r3, #4]
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801646e:	429a      	cmp	r2, r3
 8016470:	d20f      	bcs.n	8016492 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016472:	2200      	movs	r2, #0
 8016474:	2100      	movs	r1, #0
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	f001 f8c7 	bl	801760a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2200      	movs	r2, #0
 8016480:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016484:	2300      	movs	r3, #0
 8016486:	2200      	movs	r2, #0
 8016488:	2100      	movs	r1, #0
 801648a:	68f8      	ldr	r0, [r7, #12]
 801648c:	f001 fe04 	bl	8018098 <USBD_LL_PrepareReceive>
 8016490:	e01c      	b.n	80164cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016498:	b2db      	uxtb	r3, r3
 801649a:	2b03      	cmp	r3, #3
 801649c:	d10f      	bne.n	80164be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164a4:	68db      	ldr	r3, [r3, #12]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d009      	beq.n	80164be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	2200      	movs	r2, #0
 80164ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164b8:	68db      	ldr	r3, [r3, #12]
 80164ba:	68f8      	ldr	r0, [r7, #12]
 80164bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80164be:	2180      	movs	r1, #128	@ 0x80
 80164c0:	68f8      	ldr	r0, [r7, #12]
 80164c2:	f001 fd3f 	bl	8017f44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80164c6:	68f8      	ldr	r0, [r7, #12]
 80164c8:	f001 f8f1 	bl	80176ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d03a      	beq.n	801654c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80164d6:	68f8      	ldr	r0, [r7, #12]
 80164d8:	f7ff fe42 	bl	8016160 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	2200      	movs	r2, #0
 80164e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80164e4:	e032      	b.n	801654c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80164e6:	7afb      	ldrb	r3, [r7, #11]
 80164e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80164ec:	b2db      	uxtb	r3, r3
 80164ee:	4619      	mov	r1, r3
 80164f0:	68f8      	ldr	r0, [r7, #12]
 80164f2:	f000 f985 	bl	8016800 <USBD_CoreFindEP>
 80164f6:	4603      	mov	r3, r0
 80164f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80164fa:	7dfb      	ldrb	r3, [r7, #23]
 80164fc:	2bff      	cmp	r3, #255	@ 0xff
 80164fe:	d025      	beq.n	801654c <USBD_LL_DataInStage+0x15a>
 8016500:	7dfb      	ldrb	r3, [r7, #23]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d122      	bne.n	801654c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801650c:	b2db      	uxtb	r3, r3
 801650e:	2b03      	cmp	r3, #3
 8016510:	d11c      	bne.n	801654c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016512:	7dfa      	ldrb	r2, [r7, #23]
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	32ae      	adds	r2, #174	@ 0xae
 8016518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801651c:	695b      	ldr	r3, [r3, #20]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d014      	beq.n	801654c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016522:	7dfa      	ldrb	r2, [r7, #23]
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801652a:	7dfa      	ldrb	r2, [r7, #23]
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	32ae      	adds	r2, #174	@ 0xae
 8016530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016534:	695b      	ldr	r3, [r3, #20]
 8016536:	7afa      	ldrb	r2, [r7, #11]
 8016538:	4611      	mov	r1, r2
 801653a:	68f8      	ldr	r0, [r7, #12]
 801653c:	4798      	blx	r3
 801653e:	4603      	mov	r3, r0
 8016540:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016542:	7dbb      	ldrb	r3, [r7, #22]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d001      	beq.n	801654c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016548:	7dbb      	ldrb	r3, [r7, #22]
 801654a:	e000      	b.n	801654e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801654c:	2300      	movs	r3, #0
}
 801654e:	4618      	mov	r0, r3
 8016550:	3718      	adds	r7, #24
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}

08016556 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016556:	b580      	push	{r7, lr}
 8016558:	b084      	sub	sp, #16
 801655a:	af00      	add	r7, sp, #0
 801655c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801655e:	2300      	movs	r3, #0
 8016560:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	2201      	movs	r2, #1
 8016566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2200      	movs	r2, #0
 801656e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	2200      	movs	r2, #0
 8016576:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2200      	movs	r2, #0
 801657c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2200      	movs	r2, #0
 8016584:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801658e:	2b00      	cmp	r3, #0
 8016590:	d014      	beq.n	80165bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016598:	685b      	ldr	r3, [r3, #4]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d00e      	beq.n	80165bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165a4:	685b      	ldr	r3, [r3, #4]
 80165a6:	687a      	ldr	r2, [r7, #4]
 80165a8:	6852      	ldr	r2, [r2, #4]
 80165aa:	b2d2      	uxtb	r2, r2
 80165ac:	4611      	mov	r1, r2
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	4798      	blx	r3
 80165b2:	4603      	mov	r3, r0
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d001      	beq.n	80165bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80165b8:	2303      	movs	r3, #3
 80165ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80165bc:	2340      	movs	r3, #64	@ 0x40
 80165be:	2200      	movs	r2, #0
 80165c0:	2100      	movs	r1, #0
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f001 fc79 	bl	8017eba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2201      	movs	r2, #1
 80165cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2240      	movs	r2, #64	@ 0x40
 80165d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80165d8:	2340      	movs	r3, #64	@ 0x40
 80165da:	2200      	movs	r2, #0
 80165dc:	2180      	movs	r1, #128	@ 0x80
 80165de:	6878      	ldr	r0, [r7, #4]
 80165e0:	f001 fc6b 	bl	8017eba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2201      	movs	r2, #1
 80165e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	2240      	movs	r2, #64	@ 0x40
 80165ee:	621a      	str	r2, [r3, #32]

  return ret;
 80165f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80165f2:	4618      	mov	r0, r3
 80165f4:	3710      	adds	r7, #16
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd80      	pop	{r7, pc}

080165fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80165fa:	b480      	push	{r7}
 80165fc:	b083      	sub	sp, #12
 80165fe:	af00      	add	r7, sp, #0
 8016600:	6078      	str	r0, [r7, #4]
 8016602:	460b      	mov	r3, r1
 8016604:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	78fa      	ldrb	r2, [r7, #3]
 801660a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801660c:	2300      	movs	r3, #0
}
 801660e:	4618      	mov	r0, r3
 8016610:	370c      	adds	r7, #12
 8016612:	46bd      	mov	sp, r7
 8016614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016618:	4770      	bx	lr

0801661a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801661a:	b480      	push	{r7}
 801661c:	b083      	sub	sp, #12
 801661e:	af00      	add	r7, sp, #0
 8016620:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016628:	b2db      	uxtb	r3, r3
 801662a:	2b04      	cmp	r3, #4
 801662c:	d006      	beq.n	801663c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016634:	b2da      	uxtb	r2, r3
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2204      	movs	r2, #4
 8016640:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016644:	2300      	movs	r3, #0
}
 8016646:	4618      	mov	r0, r3
 8016648:	370c      	adds	r7, #12
 801664a:	46bd      	mov	sp, r7
 801664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016650:	4770      	bx	lr

08016652 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016652:	b480      	push	{r7}
 8016654:	b083      	sub	sp, #12
 8016656:	af00      	add	r7, sp, #0
 8016658:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016660:	b2db      	uxtb	r3, r3
 8016662:	2b04      	cmp	r3, #4
 8016664:	d106      	bne.n	8016674 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801666c:	b2da      	uxtb	r2, r3
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016674:	2300      	movs	r3, #0
}
 8016676:	4618      	mov	r0, r3
 8016678:	370c      	adds	r7, #12
 801667a:	46bd      	mov	sp, r7
 801667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016680:	4770      	bx	lr

08016682 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016682:	b580      	push	{r7, lr}
 8016684:	b082      	sub	sp, #8
 8016686:	af00      	add	r7, sp, #0
 8016688:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016690:	b2db      	uxtb	r3, r3
 8016692:	2b03      	cmp	r3, #3
 8016694:	d110      	bne.n	80166b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801669c:	2b00      	cmp	r3, #0
 801669e:	d00b      	beq.n	80166b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166a6:	69db      	ldr	r3, [r3, #28]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d005      	beq.n	80166b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166b2:	69db      	ldr	r3, [r3, #28]
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80166b8:	2300      	movs	r3, #0
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	3708      	adds	r7, #8
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd80      	pop	{r7, pc}

080166c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80166c2:	b580      	push	{r7, lr}
 80166c4:	b082      	sub	sp, #8
 80166c6:	af00      	add	r7, sp, #0
 80166c8:	6078      	str	r0, [r7, #4]
 80166ca:	460b      	mov	r3, r1
 80166cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	32ae      	adds	r2, #174	@ 0xae
 80166d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d101      	bne.n	80166e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80166e0:	2303      	movs	r3, #3
 80166e2:	e01c      	b.n	801671e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166ea:	b2db      	uxtb	r3, r3
 80166ec:	2b03      	cmp	r3, #3
 80166ee:	d115      	bne.n	801671c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	32ae      	adds	r2, #174	@ 0xae
 80166fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166fe:	6a1b      	ldr	r3, [r3, #32]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d00b      	beq.n	801671c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	32ae      	adds	r2, #174	@ 0xae
 801670e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016712:	6a1b      	ldr	r3, [r3, #32]
 8016714:	78fa      	ldrb	r2, [r7, #3]
 8016716:	4611      	mov	r1, r2
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801671c:	2300      	movs	r3, #0
}
 801671e:	4618      	mov	r0, r3
 8016720:	3708      	adds	r7, #8
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}

08016726 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016726:	b580      	push	{r7, lr}
 8016728:	b082      	sub	sp, #8
 801672a:	af00      	add	r7, sp, #0
 801672c:	6078      	str	r0, [r7, #4]
 801672e:	460b      	mov	r3, r1
 8016730:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	32ae      	adds	r2, #174	@ 0xae
 801673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d101      	bne.n	8016748 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016744:	2303      	movs	r3, #3
 8016746:	e01c      	b.n	8016782 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801674e:	b2db      	uxtb	r3, r3
 8016750:	2b03      	cmp	r3, #3
 8016752:	d115      	bne.n	8016780 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	32ae      	adds	r2, #174	@ 0xae
 801675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016764:	2b00      	cmp	r3, #0
 8016766:	d00b      	beq.n	8016780 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	32ae      	adds	r2, #174	@ 0xae
 8016772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016778:	78fa      	ldrb	r2, [r7, #3]
 801677a:	4611      	mov	r1, r2
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016780:	2300      	movs	r3, #0
}
 8016782:	4618      	mov	r0, r3
 8016784:	3708      	adds	r7, #8
 8016786:	46bd      	mov	sp, r7
 8016788:	bd80      	pop	{r7, pc}

0801678a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801678a:	b480      	push	{r7}
 801678c:	b083      	sub	sp, #12
 801678e:	af00      	add	r7, sp, #0
 8016790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016792:	2300      	movs	r3, #0
}
 8016794:	4618      	mov	r0, r3
 8016796:	370c      	adds	r7, #12
 8016798:	46bd      	mov	sp, r7
 801679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679e:	4770      	bx	lr

080167a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b084      	sub	sp, #16
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80167a8:	2300      	movs	r3, #0
 80167aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2201      	movs	r2, #1
 80167b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d00e      	beq.n	80167dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167c4:	685b      	ldr	r3, [r3, #4]
 80167c6:	687a      	ldr	r2, [r7, #4]
 80167c8:	6852      	ldr	r2, [r2, #4]
 80167ca:	b2d2      	uxtb	r2, r2
 80167cc:	4611      	mov	r1, r2
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	4798      	blx	r3
 80167d2:	4603      	mov	r3, r0
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d001      	beq.n	80167dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80167d8:	2303      	movs	r3, #3
 80167da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80167dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80167de:	4618      	mov	r0, r3
 80167e0:	3710      	adds	r7, #16
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}

080167e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80167e6:	b480      	push	{r7}
 80167e8:	b083      	sub	sp, #12
 80167ea:	af00      	add	r7, sp, #0
 80167ec:	6078      	str	r0, [r7, #4]
 80167ee:	460b      	mov	r3, r1
 80167f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80167f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	370c      	adds	r7, #12
 80167f8:	46bd      	mov	sp, r7
 80167fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fe:	4770      	bx	lr

08016800 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016800:	b480      	push	{r7}
 8016802:	b083      	sub	sp, #12
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
 8016808:	460b      	mov	r3, r1
 801680a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801680c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801680e:	4618      	mov	r0, r3
 8016810:	370c      	adds	r7, #12
 8016812:	46bd      	mov	sp, r7
 8016814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016818:	4770      	bx	lr

0801681a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801681a:	b580      	push	{r7, lr}
 801681c:	b086      	sub	sp, #24
 801681e:	af00      	add	r7, sp, #0
 8016820:	6078      	str	r0, [r7, #4]
 8016822:	460b      	mov	r3, r1
 8016824:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801682e:	2300      	movs	r3, #0
 8016830:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	885b      	ldrh	r3, [r3, #2]
 8016836:	b29b      	uxth	r3, r3
 8016838:	68fa      	ldr	r2, [r7, #12]
 801683a:	7812      	ldrb	r2, [r2, #0]
 801683c:	4293      	cmp	r3, r2
 801683e:	d91f      	bls.n	8016880 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	781b      	ldrb	r3, [r3, #0]
 8016844:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016846:	e013      	b.n	8016870 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016848:	f107 030a 	add.w	r3, r7, #10
 801684c:	4619      	mov	r1, r3
 801684e:	6978      	ldr	r0, [r7, #20]
 8016850:	f000 f81b 	bl	801688a <USBD_GetNextDesc>
 8016854:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016856:	697b      	ldr	r3, [r7, #20]
 8016858:	785b      	ldrb	r3, [r3, #1]
 801685a:	2b05      	cmp	r3, #5
 801685c:	d108      	bne.n	8016870 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	789b      	ldrb	r3, [r3, #2]
 8016866:	78fa      	ldrb	r2, [r7, #3]
 8016868:	429a      	cmp	r2, r3
 801686a:	d008      	beq.n	801687e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801686c:	2300      	movs	r3, #0
 801686e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	885b      	ldrh	r3, [r3, #2]
 8016874:	b29a      	uxth	r2, r3
 8016876:	897b      	ldrh	r3, [r7, #10]
 8016878:	429a      	cmp	r2, r3
 801687a:	d8e5      	bhi.n	8016848 <USBD_GetEpDesc+0x2e>
 801687c:	e000      	b.n	8016880 <USBD_GetEpDesc+0x66>
          break;
 801687e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016880:	693b      	ldr	r3, [r7, #16]
}
 8016882:	4618      	mov	r0, r3
 8016884:	3718      	adds	r7, #24
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}

0801688a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801688a:	b480      	push	{r7}
 801688c:	b085      	sub	sp, #20
 801688e:	af00      	add	r7, sp, #0
 8016890:	6078      	str	r0, [r7, #4]
 8016892:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	881b      	ldrh	r3, [r3, #0]
 801689c:	68fa      	ldr	r2, [r7, #12]
 801689e:	7812      	ldrb	r2, [r2, #0]
 80168a0:	4413      	add	r3, r2
 80168a2:	b29a      	uxth	r2, r3
 80168a4:	683b      	ldr	r3, [r7, #0]
 80168a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	461a      	mov	r2, r3
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	4413      	add	r3, r2
 80168b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80168b4:	68fb      	ldr	r3, [r7, #12]
}
 80168b6:	4618      	mov	r0, r3
 80168b8:	3714      	adds	r7, #20
 80168ba:	46bd      	mov	sp, r7
 80168bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c0:	4770      	bx	lr

080168c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80168c2:	b480      	push	{r7}
 80168c4:	b087      	sub	sp, #28
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80168d4:	697b      	ldr	r3, [r7, #20]
 80168d6:	3301      	adds	r3, #1
 80168d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80168da:	697b      	ldr	r3, [r7, #20]
 80168dc:	781b      	ldrb	r3, [r3, #0]
 80168de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80168e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80168e4:	021b      	lsls	r3, r3, #8
 80168e6:	b21a      	sxth	r2, r3
 80168e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80168ec:	4313      	orrs	r3, r2
 80168ee:	b21b      	sxth	r3, r3
 80168f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80168f2:	89fb      	ldrh	r3, [r7, #14]
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	371c      	adds	r7, #28
 80168f8:	46bd      	mov	sp, r7
 80168fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fe:	4770      	bx	lr

08016900 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b084      	sub	sp, #16
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801690a:	2300      	movs	r3, #0
 801690c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801690e:	683b      	ldr	r3, [r7, #0]
 8016910:	781b      	ldrb	r3, [r3, #0]
 8016912:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016916:	2b40      	cmp	r3, #64	@ 0x40
 8016918:	d005      	beq.n	8016926 <USBD_StdDevReq+0x26>
 801691a:	2b40      	cmp	r3, #64	@ 0x40
 801691c:	d857      	bhi.n	80169ce <USBD_StdDevReq+0xce>
 801691e:	2b00      	cmp	r3, #0
 8016920:	d00f      	beq.n	8016942 <USBD_StdDevReq+0x42>
 8016922:	2b20      	cmp	r3, #32
 8016924:	d153      	bne.n	80169ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	32ae      	adds	r2, #174	@ 0xae
 8016930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016934:	689b      	ldr	r3, [r3, #8]
 8016936:	6839      	ldr	r1, [r7, #0]
 8016938:	6878      	ldr	r0, [r7, #4]
 801693a:	4798      	blx	r3
 801693c:	4603      	mov	r3, r0
 801693e:	73fb      	strb	r3, [r7, #15]
      break;
 8016940:	e04a      	b.n	80169d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016942:	683b      	ldr	r3, [r7, #0]
 8016944:	785b      	ldrb	r3, [r3, #1]
 8016946:	2b09      	cmp	r3, #9
 8016948:	d83b      	bhi.n	80169c2 <USBD_StdDevReq+0xc2>
 801694a:	a201      	add	r2, pc, #4	@ (adr r2, 8016950 <USBD_StdDevReq+0x50>)
 801694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016950:	080169a5 	.word	0x080169a5
 8016954:	080169b9 	.word	0x080169b9
 8016958:	080169c3 	.word	0x080169c3
 801695c:	080169af 	.word	0x080169af
 8016960:	080169c3 	.word	0x080169c3
 8016964:	08016983 	.word	0x08016983
 8016968:	08016979 	.word	0x08016979
 801696c:	080169c3 	.word	0x080169c3
 8016970:	0801699b 	.word	0x0801699b
 8016974:	0801698d 	.word	0x0801698d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016978:	6839      	ldr	r1, [r7, #0]
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f000 fa3c 	bl	8016df8 <USBD_GetDescriptor>
          break;
 8016980:	e024      	b.n	80169cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016982:	6839      	ldr	r1, [r7, #0]
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f000 fbcb 	bl	8017120 <USBD_SetAddress>
          break;
 801698a:	e01f      	b.n	80169cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801698c:	6839      	ldr	r1, [r7, #0]
 801698e:	6878      	ldr	r0, [r7, #4]
 8016990:	f000 fc0a 	bl	80171a8 <USBD_SetConfig>
 8016994:	4603      	mov	r3, r0
 8016996:	73fb      	strb	r3, [r7, #15]
          break;
 8016998:	e018      	b.n	80169cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801699a:	6839      	ldr	r1, [r7, #0]
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f000 fcad 	bl	80172fc <USBD_GetConfig>
          break;
 80169a2:	e013      	b.n	80169cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80169a4:	6839      	ldr	r1, [r7, #0]
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f000 fcde 	bl	8017368 <USBD_GetStatus>
          break;
 80169ac:	e00e      	b.n	80169cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80169ae:	6839      	ldr	r1, [r7, #0]
 80169b0:	6878      	ldr	r0, [r7, #4]
 80169b2:	f000 fd0d 	bl	80173d0 <USBD_SetFeature>
          break;
 80169b6:	e009      	b.n	80169cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80169b8:	6839      	ldr	r1, [r7, #0]
 80169ba:	6878      	ldr	r0, [r7, #4]
 80169bc:	f000 fd31 	bl	8017422 <USBD_ClrFeature>
          break;
 80169c0:	e004      	b.n	80169cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80169c2:	6839      	ldr	r1, [r7, #0]
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f000 fd88 	bl	80174da <USBD_CtlError>
          break;
 80169ca:	bf00      	nop
      }
      break;
 80169cc:	e004      	b.n	80169d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80169ce:	6839      	ldr	r1, [r7, #0]
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f000 fd82 	bl	80174da <USBD_CtlError>
      break;
 80169d6:	bf00      	nop
  }

  return ret;
 80169d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169da:	4618      	mov	r0, r3
 80169dc:	3710      	adds	r7, #16
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop

080169e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b084      	sub	sp, #16
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
 80169ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80169ee:	2300      	movs	r3, #0
 80169f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80169f2:	683b      	ldr	r3, [r7, #0]
 80169f4:	781b      	ldrb	r3, [r3, #0]
 80169f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80169fa:	2b40      	cmp	r3, #64	@ 0x40
 80169fc:	d005      	beq.n	8016a0a <USBD_StdItfReq+0x26>
 80169fe:	2b40      	cmp	r3, #64	@ 0x40
 8016a00:	d852      	bhi.n	8016aa8 <USBD_StdItfReq+0xc4>
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d001      	beq.n	8016a0a <USBD_StdItfReq+0x26>
 8016a06:	2b20      	cmp	r3, #32
 8016a08:	d14e      	bne.n	8016aa8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a10:	b2db      	uxtb	r3, r3
 8016a12:	3b01      	subs	r3, #1
 8016a14:	2b02      	cmp	r3, #2
 8016a16:	d840      	bhi.n	8016a9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016a18:	683b      	ldr	r3, [r7, #0]
 8016a1a:	889b      	ldrh	r3, [r3, #4]
 8016a1c:	b2db      	uxtb	r3, r3
 8016a1e:	2b01      	cmp	r3, #1
 8016a20:	d836      	bhi.n	8016a90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016a22:	683b      	ldr	r3, [r7, #0]
 8016a24:	889b      	ldrh	r3, [r3, #4]
 8016a26:	b2db      	uxtb	r3, r3
 8016a28:	4619      	mov	r1, r3
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	f7ff fedb 	bl	80167e6 <USBD_CoreFindIF>
 8016a30:	4603      	mov	r3, r0
 8016a32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016a34:	7bbb      	ldrb	r3, [r7, #14]
 8016a36:	2bff      	cmp	r3, #255	@ 0xff
 8016a38:	d01d      	beq.n	8016a76 <USBD_StdItfReq+0x92>
 8016a3a:	7bbb      	ldrb	r3, [r7, #14]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d11a      	bne.n	8016a76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016a40:	7bba      	ldrb	r2, [r7, #14]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	32ae      	adds	r2, #174	@ 0xae
 8016a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a4a:	689b      	ldr	r3, [r3, #8]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d00f      	beq.n	8016a70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016a50:	7bba      	ldrb	r2, [r7, #14]
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016a58:	7bba      	ldrb	r2, [r7, #14]
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	32ae      	adds	r2, #174	@ 0xae
 8016a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a62:	689b      	ldr	r3, [r3, #8]
 8016a64:	6839      	ldr	r1, [r7, #0]
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	4798      	blx	r3
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016a6e:	e004      	b.n	8016a7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016a70:	2303      	movs	r3, #3
 8016a72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016a74:	e001      	b.n	8016a7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016a76:	2303      	movs	r3, #3
 8016a78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016a7a:	683b      	ldr	r3, [r7, #0]
 8016a7c:	88db      	ldrh	r3, [r3, #6]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d110      	bne.n	8016aa4 <USBD_StdItfReq+0xc0>
 8016a82:	7bfb      	ldrb	r3, [r7, #15]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d10d      	bne.n	8016aa4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f000 fdfd 	bl	8017688 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016a8e:	e009      	b.n	8016aa4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016a90:	6839      	ldr	r1, [r7, #0]
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f000 fd21 	bl	80174da <USBD_CtlError>
          break;
 8016a98:	e004      	b.n	8016aa4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016a9a:	6839      	ldr	r1, [r7, #0]
 8016a9c:	6878      	ldr	r0, [r7, #4]
 8016a9e:	f000 fd1c 	bl	80174da <USBD_CtlError>
          break;
 8016aa2:	e000      	b.n	8016aa6 <USBD_StdItfReq+0xc2>
          break;
 8016aa4:	bf00      	nop
      }
      break;
 8016aa6:	e004      	b.n	8016ab2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016aa8:	6839      	ldr	r1, [r7, #0]
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	f000 fd15 	bl	80174da <USBD_CtlError>
      break;
 8016ab0:	bf00      	nop
  }

  return ret;
 8016ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	3710      	adds	r7, #16
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	bd80      	pop	{r7, pc}

08016abc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b084      	sub	sp, #16
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016aca:	683b      	ldr	r3, [r7, #0]
 8016acc:	889b      	ldrh	r3, [r3, #4]
 8016ace:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016ad0:	683b      	ldr	r3, [r7, #0]
 8016ad2:	781b      	ldrb	r3, [r3, #0]
 8016ad4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016ad8:	2b40      	cmp	r3, #64	@ 0x40
 8016ada:	d007      	beq.n	8016aec <USBD_StdEPReq+0x30>
 8016adc:	2b40      	cmp	r3, #64	@ 0x40
 8016ade:	f200 817f 	bhi.w	8016de0 <USBD_StdEPReq+0x324>
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d02a      	beq.n	8016b3c <USBD_StdEPReq+0x80>
 8016ae6:	2b20      	cmp	r3, #32
 8016ae8:	f040 817a 	bne.w	8016de0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016aec:	7bbb      	ldrb	r3, [r7, #14]
 8016aee:	4619      	mov	r1, r3
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f7ff fe85 	bl	8016800 <USBD_CoreFindEP>
 8016af6:	4603      	mov	r3, r0
 8016af8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016afa:	7b7b      	ldrb	r3, [r7, #13]
 8016afc:	2bff      	cmp	r3, #255	@ 0xff
 8016afe:	f000 8174 	beq.w	8016dea <USBD_StdEPReq+0x32e>
 8016b02:	7b7b      	ldrb	r3, [r7, #13]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	f040 8170 	bne.w	8016dea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016b0a:	7b7a      	ldrb	r2, [r7, #13]
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016b12:	7b7a      	ldrb	r2, [r7, #13]
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	32ae      	adds	r2, #174	@ 0xae
 8016b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b1c:	689b      	ldr	r3, [r3, #8]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	f000 8163 	beq.w	8016dea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016b24:	7b7a      	ldrb	r2, [r7, #13]
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	32ae      	adds	r2, #174	@ 0xae
 8016b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b2e:	689b      	ldr	r3, [r3, #8]
 8016b30:	6839      	ldr	r1, [r7, #0]
 8016b32:	6878      	ldr	r0, [r7, #4]
 8016b34:	4798      	blx	r3
 8016b36:	4603      	mov	r3, r0
 8016b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016b3a:	e156      	b.n	8016dea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b3c:	683b      	ldr	r3, [r7, #0]
 8016b3e:	785b      	ldrb	r3, [r3, #1]
 8016b40:	2b03      	cmp	r3, #3
 8016b42:	d008      	beq.n	8016b56 <USBD_StdEPReq+0x9a>
 8016b44:	2b03      	cmp	r3, #3
 8016b46:	f300 8145 	bgt.w	8016dd4 <USBD_StdEPReq+0x318>
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	f000 809b 	beq.w	8016c86 <USBD_StdEPReq+0x1ca>
 8016b50:	2b01      	cmp	r3, #1
 8016b52:	d03c      	beq.n	8016bce <USBD_StdEPReq+0x112>
 8016b54:	e13e      	b.n	8016dd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b5c:	b2db      	uxtb	r3, r3
 8016b5e:	2b02      	cmp	r3, #2
 8016b60:	d002      	beq.n	8016b68 <USBD_StdEPReq+0xac>
 8016b62:	2b03      	cmp	r3, #3
 8016b64:	d016      	beq.n	8016b94 <USBD_StdEPReq+0xd8>
 8016b66:	e02c      	b.n	8016bc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016b68:	7bbb      	ldrb	r3, [r7, #14]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d00d      	beq.n	8016b8a <USBD_StdEPReq+0xce>
 8016b6e:	7bbb      	ldrb	r3, [r7, #14]
 8016b70:	2b80      	cmp	r3, #128	@ 0x80
 8016b72:	d00a      	beq.n	8016b8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016b74:	7bbb      	ldrb	r3, [r7, #14]
 8016b76:	4619      	mov	r1, r3
 8016b78:	6878      	ldr	r0, [r7, #4]
 8016b7a:	f001 f9e3 	bl	8017f44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b7e:	2180      	movs	r1, #128	@ 0x80
 8016b80:	6878      	ldr	r0, [r7, #4]
 8016b82:	f001 f9df 	bl	8017f44 <USBD_LL_StallEP>
 8016b86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016b88:	e020      	b.n	8016bcc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016b8a:	6839      	ldr	r1, [r7, #0]
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f000 fca4 	bl	80174da <USBD_CtlError>
              break;
 8016b92:	e01b      	b.n	8016bcc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016b94:	683b      	ldr	r3, [r7, #0]
 8016b96:	885b      	ldrh	r3, [r3, #2]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d10e      	bne.n	8016bba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016b9c:	7bbb      	ldrb	r3, [r7, #14]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d00b      	beq.n	8016bba <USBD_StdEPReq+0xfe>
 8016ba2:	7bbb      	ldrb	r3, [r7, #14]
 8016ba4:	2b80      	cmp	r3, #128	@ 0x80
 8016ba6:	d008      	beq.n	8016bba <USBD_StdEPReq+0xfe>
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	88db      	ldrh	r3, [r3, #6]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d104      	bne.n	8016bba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016bb0:	7bbb      	ldrb	r3, [r7, #14]
 8016bb2:	4619      	mov	r1, r3
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f001 f9c5 	bl	8017f44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016bba:	6878      	ldr	r0, [r7, #4]
 8016bbc:	f000 fd64 	bl	8017688 <USBD_CtlSendStatus>

              break;
 8016bc0:	e004      	b.n	8016bcc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016bc2:	6839      	ldr	r1, [r7, #0]
 8016bc4:	6878      	ldr	r0, [r7, #4]
 8016bc6:	f000 fc88 	bl	80174da <USBD_CtlError>
              break;
 8016bca:	bf00      	nop
          }
          break;
 8016bcc:	e107      	b.n	8016dde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016bd4:	b2db      	uxtb	r3, r3
 8016bd6:	2b02      	cmp	r3, #2
 8016bd8:	d002      	beq.n	8016be0 <USBD_StdEPReq+0x124>
 8016bda:	2b03      	cmp	r3, #3
 8016bdc:	d016      	beq.n	8016c0c <USBD_StdEPReq+0x150>
 8016bde:	e04b      	b.n	8016c78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016be0:	7bbb      	ldrb	r3, [r7, #14]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d00d      	beq.n	8016c02 <USBD_StdEPReq+0x146>
 8016be6:	7bbb      	ldrb	r3, [r7, #14]
 8016be8:	2b80      	cmp	r3, #128	@ 0x80
 8016bea:	d00a      	beq.n	8016c02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016bec:	7bbb      	ldrb	r3, [r7, #14]
 8016bee:	4619      	mov	r1, r3
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	f001 f9a7 	bl	8017f44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016bf6:	2180      	movs	r1, #128	@ 0x80
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f001 f9a3 	bl	8017f44 <USBD_LL_StallEP>
 8016bfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016c00:	e040      	b.n	8016c84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016c02:	6839      	ldr	r1, [r7, #0]
 8016c04:	6878      	ldr	r0, [r7, #4]
 8016c06:	f000 fc68 	bl	80174da <USBD_CtlError>
              break;
 8016c0a:	e03b      	b.n	8016c84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	885b      	ldrh	r3, [r3, #2]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d136      	bne.n	8016c82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016c14:	7bbb      	ldrb	r3, [r7, #14]
 8016c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d004      	beq.n	8016c28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016c1e:	7bbb      	ldrb	r3, [r7, #14]
 8016c20:	4619      	mov	r1, r3
 8016c22:	6878      	ldr	r0, [r7, #4]
 8016c24:	f001 f9ad 	bl	8017f82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016c28:	6878      	ldr	r0, [r7, #4]
 8016c2a:	f000 fd2d 	bl	8017688 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016c2e:	7bbb      	ldrb	r3, [r7, #14]
 8016c30:	4619      	mov	r1, r3
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f7ff fde4 	bl	8016800 <USBD_CoreFindEP>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016c3c:	7b7b      	ldrb	r3, [r7, #13]
 8016c3e:	2bff      	cmp	r3, #255	@ 0xff
 8016c40:	d01f      	beq.n	8016c82 <USBD_StdEPReq+0x1c6>
 8016c42:	7b7b      	ldrb	r3, [r7, #13]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d11c      	bne.n	8016c82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016c48:	7b7a      	ldrb	r2, [r7, #13]
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016c50:	7b7a      	ldrb	r2, [r7, #13]
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	32ae      	adds	r2, #174	@ 0xae
 8016c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c5a:	689b      	ldr	r3, [r3, #8]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d010      	beq.n	8016c82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016c60:	7b7a      	ldrb	r2, [r7, #13]
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	32ae      	adds	r2, #174	@ 0xae
 8016c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c6a:	689b      	ldr	r3, [r3, #8]
 8016c6c:	6839      	ldr	r1, [r7, #0]
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	4798      	blx	r3
 8016c72:	4603      	mov	r3, r0
 8016c74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016c76:	e004      	b.n	8016c82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016c78:	6839      	ldr	r1, [r7, #0]
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f000 fc2d 	bl	80174da <USBD_CtlError>
              break;
 8016c80:	e000      	b.n	8016c84 <USBD_StdEPReq+0x1c8>
              break;
 8016c82:	bf00      	nop
          }
          break;
 8016c84:	e0ab      	b.n	8016dde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c8c:	b2db      	uxtb	r3, r3
 8016c8e:	2b02      	cmp	r3, #2
 8016c90:	d002      	beq.n	8016c98 <USBD_StdEPReq+0x1dc>
 8016c92:	2b03      	cmp	r3, #3
 8016c94:	d032      	beq.n	8016cfc <USBD_StdEPReq+0x240>
 8016c96:	e097      	b.n	8016dc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c98:	7bbb      	ldrb	r3, [r7, #14]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d007      	beq.n	8016cae <USBD_StdEPReq+0x1f2>
 8016c9e:	7bbb      	ldrb	r3, [r7, #14]
 8016ca0:	2b80      	cmp	r3, #128	@ 0x80
 8016ca2:	d004      	beq.n	8016cae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016ca4:	6839      	ldr	r1, [r7, #0]
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f000 fc17 	bl	80174da <USBD_CtlError>
                break;
 8016cac:	e091      	b.n	8016dd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	da0b      	bge.n	8016cce <USBD_StdEPReq+0x212>
 8016cb6:	7bbb      	ldrb	r3, [r7, #14]
 8016cb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016cbc:	4613      	mov	r3, r2
 8016cbe:	009b      	lsls	r3, r3, #2
 8016cc0:	4413      	add	r3, r2
 8016cc2:	009b      	lsls	r3, r3, #2
 8016cc4:	3310      	adds	r3, #16
 8016cc6:	687a      	ldr	r2, [r7, #4]
 8016cc8:	4413      	add	r3, r2
 8016cca:	3304      	adds	r3, #4
 8016ccc:	e00b      	b.n	8016ce6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016cce:	7bbb      	ldrb	r3, [r7, #14]
 8016cd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016cd4:	4613      	mov	r3, r2
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	4413      	add	r3, r2
 8016cda:	009b      	lsls	r3, r3, #2
 8016cdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016ce0:	687a      	ldr	r2, [r7, #4]
 8016ce2:	4413      	add	r3, r2
 8016ce4:	3304      	adds	r3, #4
 8016ce6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	2200      	movs	r2, #0
 8016cec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016cee:	68bb      	ldr	r3, [r7, #8]
 8016cf0:	2202      	movs	r2, #2
 8016cf2:	4619      	mov	r1, r3
 8016cf4:	6878      	ldr	r0, [r7, #4]
 8016cf6:	f000 fc6d 	bl	80175d4 <USBD_CtlSendData>
              break;
 8016cfa:	e06a      	b.n	8016dd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	da11      	bge.n	8016d28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016d04:	7bbb      	ldrb	r3, [r7, #14]
 8016d06:	f003 020f 	and.w	r2, r3, #15
 8016d0a:	6879      	ldr	r1, [r7, #4]
 8016d0c:	4613      	mov	r3, r2
 8016d0e:	009b      	lsls	r3, r3, #2
 8016d10:	4413      	add	r3, r2
 8016d12:	009b      	lsls	r3, r3, #2
 8016d14:	440b      	add	r3, r1
 8016d16:	3324      	adds	r3, #36	@ 0x24
 8016d18:	881b      	ldrh	r3, [r3, #0]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d117      	bne.n	8016d4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016d1e:	6839      	ldr	r1, [r7, #0]
 8016d20:	6878      	ldr	r0, [r7, #4]
 8016d22:	f000 fbda 	bl	80174da <USBD_CtlError>
                  break;
 8016d26:	e054      	b.n	8016dd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016d28:	7bbb      	ldrb	r3, [r7, #14]
 8016d2a:	f003 020f 	and.w	r2, r3, #15
 8016d2e:	6879      	ldr	r1, [r7, #4]
 8016d30:	4613      	mov	r3, r2
 8016d32:	009b      	lsls	r3, r3, #2
 8016d34:	4413      	add	r3, r2
 8016d36:	009b      	lsls	r3, r3, #2
 8016d38:	440b      	add	r3, r1
 8016d3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016d3e:	881b      	ldrh	r3, [r3, #0]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d104      	bne.n	8016d4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016d44:	6839      	ldr	r1, [r7, #0]
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f000 fbc7 	bl	80174da <USBD_CtlError>
                  break;
 8016d4c:	e041      	b.n	8016dd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	da0b      	bge.n	8016d6e <USBD_StdEPReq+0x2b2>
 8016d56:	7bbb      	ldrb	r3, [r7, #14]
 8016d58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	009b      	lsls	r3, r3, #2
 8016d60:	4413      	add	r3, r2
 8016d62:	009b      	lsls	r3, r3, #2
 8016d64:	3310      	adds	r3, #16
 8016d66:	687a      	ldr	r2, [r7, #4]
 8016d68:	4413      	add	r3, r2
 8016d6a:	3304      	adds	r3, #4
 8016d6c:	e00b      	b.n	8016d86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016d6e:	7bbb      	ldrb	r3, [r7, #14]
 8016d70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d74:	4613      	mov	r3, r2
 8016d76:	009b      	lsls	r3, r3, #2
 8016d78:	4413      	add	r3, r2
 8016d7a:	009b      	lsls	r3, r3, #2
 8016d7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016d80:	687a      	ldr	r2, [r7, #4]
 8016d82:	4413      	add	r3, r2
 8016d84:	3304      	adds	r3, #4
 8016d86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016d88:	7bbb      	ldrb	r3, [r7, #14]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d002      	beq.n	8016d94 <USBD_StdEPReq+0x2d8>
 8016d8e:	7bbb      	ldrb	r3, [r7, #14]
 8016d90:	2b80      	cmp	r3, #128	@ 0x80
 8016d92:	d103      	bne.n	8016d9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	2200      	movs	r2, #0
 8016d98:	601a      	str	r2, [r3, #0]
 8016d9a:	e00e      	b.n	8016dba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016d9c:	7bbb      	ldrb	r3, [r7, #14]
 8016d9e:	4619      	mov	r1, r3
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f001 f90d 	bl	8017fc0 <USBD_LL_IsStallEP>
 8016da6:	4603      	mov	r3, r0
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d003      	beq.n	8016db4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016dac:	68bb      	ldr	r3, [r7, #8]
 8016dae:	2201      	movs	r2, #1
 8016db0:	601a      	str	r2, [r3, #0]
 8016db2:	e002      	b.n	8016dba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	2200      	movs	r2, #0
 8016db8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016dba:	68bb      	ldr	r3, [r7, #8]
 8016dbc:	2202      	movs	r2, #2
 8016dbe:	4619      	mov	r1, r3
 8016dc0:	6878      	ldr	r0, [r7, #4]
 8016dc2:	f000 fc07 	bl	80175d4 <USBD_CtlSendData>
              break;
 8016dc6:	e004      	b.n	8016dd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016dc8:	6839      	ldr	r1, [r7, #0]
 8016dca:	6878      	ldr	r0, [r7, #4]
 8016dcc:	f000 fb85 	bl	80174da <USBD_CtlError>
              break;
 8016dd0:	bf00      	nop
          }
          break;
 8016dd2:	e004      	b.n	8016dde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016dd4:	6839      	ldr	r1, [r7, #0]
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f000 fb7f 	bl	80174da <USBD_CtlError>
          break;
 8016ddc:	bf00      	nop
      }
      break;
 8016dde:	e005      	b.n	8016dec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016de0:	6839      	ldr	r1, [r7, #0]
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	f000 fb79 	bl	80174da <USBD_CtlError>
      break;
 8016de8:	e000      	b.n	8016dec <USBD_StdEPReq+0x330>
      break;
 8016dea:	bf00      	nop
  }

  return ret;
 8016dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dee:	4618      	mov	r0, r3
 8016df0:	3710      	adds	r7, #16
 8016df2:	46bd      	mov	sp, r7
 8016df4:	bd80      	pop	{r7, pc}
	...

08016df8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b084      	sub	sp, #16
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
 8016e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016e02:	2300      	movs	r3, #0
 8016e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016e06:	2300      	movs	r3, #0
 8016e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016e0e:	683b      	ldr	r3, [r7, #0]
 8016e10:	885b      	ldrh	r3, [r3, #2]
 8016e12:	0a1b      	lsrs	r3, r3, #8
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	3b01      	subs	r3, #1
 8016e18:	2b0e      	cmp	r3, #14
 8016e1a:	f200 8152 	bhi.w	80170c2 <USBD_GetDescriptor+0x2ca>
 8016e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8016e24 <USBD_GetDescriptor+0x2c>)
 8016e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e24:	08016e95 	.word	0x08016e95
 8016e28:	08016ead 	.word	0x08016ead
 8016e2c:	08016eed 	.word	0x08016eed
 8016e30:	080170c3 	.word	0x080170c3
 8016e34:	080170c3 	.word	0x080170c3
 8016e38:	08017063 	.word	0x08017063
 8016e3c:	0801708f 	.word	0x0801708f
 8016e40:	080170c3 	.word	0x080170c3
 8016e44:	080170c3 	.word	0x080170c3
 8016e48:	080170c3 	.word	0x080170c3
 8016e4c:	080170c3 	.word	0x080170c3
 8016e50:	080170c3 	.word	0x080170c3
 8016e54:	080170c3 	.word	0x080170c3
 8016e58:	080170c3 	.word	0x080170c3
 8016e5c:	08016e61 	.word	0x08016e61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e66:	69db      	ldr	r3, [r3, #28]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d00b      	beq.n	8016e84 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e72:	69db      	ldr	r3, [r3, #28]
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	7c12      	ldrb	r2, [r2, #16]
 8016e78:	f107 0108 	add.w	r1, r7, #8
 8016e7c:	4610      	mov	r0, r2
 8016e7e:	4798      	blx	r3
 8016e80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016e82:	e126      	b.n	80170d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016e84:	6839      	ldr	r1, [r7, #0]
 8016e86:	6878      	ldr	r0, [r7, #4]
 8016e88:	f000 fb27 	bl	80174da <USBD_CtlError>
        err++;
 8016e8c:	7afb      	ldrb	r3, [r7, #11]
 8016e8e:	3301      	adds	r3, #1
 8016e90:	72fb      	strb	r3, [r7, #11]
      break;
 8016e92:	e11e      	b.n	80170d2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	687a      	ldr	r2, [r7, #4]
 8016e9e:	7c12      	ldrb	r2, [r2, #16]
 8016ea0:	f107 0108 	add.w	r1, r7, #8
 8016ea4:	4610      	mov	r0, r2
 8016ea6:	4798      	blx	r3
 8016ea8:	60f8      	str	r0, [r7, #12]
      break;
 8016eaa:	e112      	b.n	80170d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	7c1b      	ldrb	r3, [r3, #16]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d10d      	bne.n	8016ed0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ebc:	f107 0208 	add.w	r2, r7, #8
 8016ec0:	4610      	mov	r0, r2
 8016ec2:	4798      	blx	r3
 8016ec4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	3301      	adds	r3, #1
 8016eca:	2202      	movs	r2, #2
 8016ecc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016ece:	e100      	b.n	80170d2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ed8:	f107 0208 	add.w	r2, r7, #8
 8016edc:	4610      	mov	r0, r2
 8016ede:	4798      	blx	r3
 8016ee0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	3301      	adds	r3, #1
 8016ee6:	2202      	movs	r2, #2
 8016ee8:	701a      	strb	r2, [r3, #0]
      break;
 8016eea:	e0f2      	b.n	80170d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016eec:	683b      	ldr	r3, [r7, #0]
 8016eee:	885b      	ldrh	r3, [r3, #2]
 8016ef0:	b2db      	uxtb	r3, r3
 8016ef2:	2b05      	cmp	r3, #5
 8016ef4:	f200 80ac 	bhi.w	8017050 <USBD_GetDescriptor+0x258>
 8016ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8016f00 <USBD_GetDescriptor+0x108>)
 8016efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016efe:	bf00      	nop
 8016f00:	08016f19 	.word	0x08016f19
 8016f04:	08016f4d 	.word	0x08016f4d
 8016f08:	08016f81 	.word	0x08016f81
 8016f0c:	08016fb5 	.word	0x08016fb5
 8016f10:	08016fe9 	.word	0x08016fe9
 8016f14:	0801701d 	.word	0x0801701d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f1e:	685b      	ldr	r3, [r3, #4]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d00b      	beq.n	8016f3c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f2a:	685b      	ldr	r3, [r3, #4]
 8016f2c:	687a      	ldr	r2, [r7, #4]
 8016f2e:	7c12      	ldrb	r2, [r2, #16]
 8016f30:	f107 0108 	add.w	r1, r7, #8
 8016f34:	4610      	mov	r0, r2
 8016f36:	4798      	blx	r3
 8016f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f3a:	e091      	b.n	8017060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016f3c:	6839      	ldr	r1, [r7, #0]
 8016f3e:	6878      	ldr	r0, [r7, #4]
 8016f40:	f000 facb 	bl	80174da <USBD_CtlError>
            err++;
 8016f44:	7afb      	ldrb	r3, [r7, #11]
 8016f46:	3301      	adds	r3, #1
 8016f48:	72fb      	strb	r3, [r7, #11]
          break;
 8016f4a:	e089      	b.n	8017060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f52:	689b      	ldr	r3, [r3, #8]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d00b      	beq.n	8016f70 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f5e:	689b      	ldr	r3, [r3, #8]
 8016f60:	687a      	ldr	r2, [r7, #4]
 8016f62:	7c12      	ldrb	r2, [r2, #16]
 8016f64:	f107 0108 	add.w	r1, r7, #8
 8016f68:	4610      	mov	r0, r2
 8016f6a:	4798      	blx	r3
 8016f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f6e:	e077      	b.n	8017060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016f70:	6839      	ldr	r1, [r7, #0]
 8016f72:	6878      	ldr	r0, [r7, #4]
 8016f74:	f000 fab1 	bl	80174da <USBD_CtlError>
            err++;
 8016f78:	7afb      	ldrb	r3, [r7, #11]
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8016f7e:	e06f      	b.n	8017060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f86:	68db      	ldr	r3, [r3, #12]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d00b      	beq.n	8016fa4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f92:	68db      	ldr	r3, [r3, #12]
 8016f94:	687a      	ldr	r2, [r7, #4]
 8016f96:	7c12      	ldrb	r2, [r2, #16]
 8016f98:	f107 0108 	add.w	r1, r7, #8
 8016f9c:	4610      	mov	r0, r2
 8016f9e:	4798      	blx	r3
 8016fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fa2:	e05d      	b.n	8017060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016fa4:	6839      	ldr	r1, [r7, #0]
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	f000 fa97 	bl	80174da <USBD_CtlError>
            err++;
 8016fac:	7afb      	ldrb	r3, [r7, #11]
 8016fae:	3301      	adds	r3, #1
 8016fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8016fb2:	e055      	b.n	8017060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fba:	691b      	ldr	r3, [r3, #16]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d00b      	beq.n	8016fd8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fc6:	691b      	ldr	r3, [r3, #16]
 8016fc8:	687a      	ldr	r2, [r7, #4]
 8016fca:	7c12      	ldrb	r2, [r2, #16]
 8016fcc:	f107 0108 	add.w	r1, r7, #8
 8016fd0:	4610      	mov	r0, r2
 8016fd2:	4798      	blx	r3
 8016fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fd6:	e043      	b.n	8017060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016fd8:	6839      	ldr	r1, [r7, #0]
 8016fda:	6878      	ldr	r0, [r7, #4]
 8016fdc:	f000 fa7d 	bl	80174da <USBD_CtlError>
            err++;
 8016fe0:	7afb      	ldrb	r3, [r7, #11]
 8016fe2:	3301      	adds	r3, #1
 8016fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8016fe6:	e03b      	b.n	8017060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fee:	695b      	ldr	r3, [r3, #20]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d00b      	beq.n	801700c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016ffa:	695b      	ldr	r3, [r3, #20]
 8016ffc:	687a      	ldr	r2, [r7, #4]
 8016ffe:	7c12      	ldrb	r2, [r2, #16]
 8017000:	f107 0108 	add.w	r1, r7, #8
 8017004:	4610      	mov	r0, r2
 8017006:	4798      	blx	r3
 8017008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801700a:	e029      	b.n	8017060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801700c:	6839      	ldr	r1, [r7, #0]
 801700e:	6878      	ldr	r0, [r7, #4]
 8017010:	f000 fa63 	bl	80174da <USBD_CtlError>
            err++;
 8017014:	7afb      	ldrb	r3, [r7, #11]
 8017016:	3301      	adds	r3, #1
 8017018:	72fb      	strb	r3, [r7, #11]
          break;
 801701a:	e021      	b.n	8017060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017022:	699b      	ldr	r3, [r3, #24]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d00b      	beq.n	8017040 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801702e:	699b      	ldr	r3, [r3, #24]
 8017030:	687a      	ldr	r2, [r7, #4]
 8017032:	7c12      	ldrb	r2, [r2, #16]
 8017034:	f107 0108 	add.w	r1, r7, #8
 8017038:	4610      	mov	r0, r2
 801703a:	4798      	blx	r3
 801703c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801703e:	e00f      	b.n	8017060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017040:	6839      	ldr	r1, [r7, #0]
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f000 fa49 	bl	80174da <USBD_CtlError>
            err++;
 8017048:	7afb      	ldrb	r3, [r7, #11]
 801704a:	3301      	adds	r3, #1
 801704c:	72fb      	strb	r3, [r7, #11]
          break;
 801704e:	e007      	b.n	8017060 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017050:	6839      	ldr	r1, [r7, #0]
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f000 fa41 	bl	80174da <USBD_CtlError>
          err++;
 8017058:	7afb      	ldrb	r3, [r7, #11]
 801705a:	3301      	adds	r3, #1
 801705c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801705e:	bf00      	nop
      }
      break;
 8017060:	e037      	b.n	80170d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	7c1b      	ldrb	r3, [r3, #16]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d109      	bne.n	801707e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017072:	f107 0208 	add.w	r2, r7, #8
 8017076:	4610      	mov	r0, r2
 8017078:	4798      	blx	r3
 801707a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801707c:	e029      	b.n	80170d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801707e:	6839      	ldr	r1, [r7, #0]
 8017080:	6878      	ldr	r0, [r7, #4]
 8017082:	f000 fa2a 	bl	80174da <USBD_CtlError>
        err++;
 8017086:	7afb      	ldrb	r3, [r7, #11]
 8017088:	3301      	adds	r3, #1
 801708a:	72fb      	strb	r3, [r7, #11]
      break;
 801708c:	e021      	b.n	80170d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	7c1b      	ldrb	r3, [r3, #16]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d10d      	bne.n	80170b2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801709c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801709e:	f107 0208 	add.w	r2, r7, #8
 80170a2:	4610      	mov	r0, r2
 80170a4:	4798      	blx	r3
 80170a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	3301      	adds	r3, #1
 80170ac:	2207      	movs	r2, #7
 80170ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80170b0:	e00f      	b.n	80170d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80170b2:	6839      	ldr	r1, [r7, #0]
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f000 fa10 	bl	80174da <USBD_CtlError>
        err++;
 80170ba:	7afb      	ldrb	r3, [r7, #11]
 80170bc:	3301      	adds	r3, #1
 80170be:	72fb      	strb	r3, [r7, #11]
      break;
 80170c0:	e007      	b.n	80170d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80170c2:	6839      	ldr	r1, [r7, #0]
 80170c4:	6878      	ldr	r0, [r7, #4]
 80170c6:	f000 fa08 	bl	80174da <USBD_CtlError>
      err++;
 80170ca:	7afb      	ldrb	r3, [r7, #11]
 80170cc:	3301      	adds	r3, #1
 80170ce:	72fb      	strb	r3, [r7, #11]
      break;
 80170d0:	bf00      	nop
  }

  if (err != 0U)
 80170d2:	7afb      	ldrb	r3, [r7, #11]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d11e      	bne.n	8017116 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80170d8:	683b      	ldr	r3, [r7, #0]
 80170da:	88db      	ldrh	r3, [r3, #6]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d016      	beq.n	801710e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80170e0:	893b      	ldrh	r3, [r7, #8]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d00e      	beq.n	8017104 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	88da      	ldrh	r2, [r3, #6]
 80170ea:	893b      	ldrh	r3, [r7, #8]
 80170ec:	4293      	cmp	r3, r2
 80170ee:	bf28      	it	cs
 80170f0:	4613      	movcs	r3, r2
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80170f6:	893b      	ldrh	r3, [r7, #8]
 80170f8:	461a      	mov	r2, r3
 80170fa:	68f9      	ldr	r1, [r7, #12]
 80170fc:	6878      	ldr	r0, [r7, #4]
 80170fe:	f000 fa69 	bl	80175d4 <USBD_CtlSendData>
 8017102:	e009      	b.n	8017118 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017104:	6839      	ldr	r1, [r7, #0]
 8017106:	6878      	ldr	r0, [r7, #4]
 8017108:	f000 f9e7 	bl	80174da <USBD_CtlError>
 801710c:	e004      	b.n	8017118 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801710e:	6878      	ldr	r0, [r7, #4]
 8017110:	f000 faba 	bl	8017688 <USBD_CtlSendStatus>
 8017114:	e000      	b.n	8017118 <USBD_GetDescriptor+0x320>
    return;
 8017116:	bf00      	nop
  }
}
 8017118:	3710      	adds	r7, #16
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop

08017120 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017120:	b580      	push	{r7, lr}
 8017122:	b084      	sub	sp, #16
 8017124:	af00      	add	r7, sp, #0
 8017126:	6078      	str	r0, [r7, #4]
 8017128:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	889b      	ldrh	r3, [r3, #4]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d131      	bne.n	8017196 <USBD_SetAddress+0x76>
 8017132:	683b      	ldr	r3, [r7, #0]
 8017134:	88db      	ldrh	r3, [r3, #6]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d12d      	bne.n	8017196 <USBD_SetAddress+0x76>
 801713a:	683b      	ldr	r3, [r7, #0]
 801713c:	885b      	ldrh	r3, [r3, #2]
 801713e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017140:	d829      	bhi.n	8017196 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	885b      	ldrh	r3, [r3, #2]
 8017146:	b2db      	uxtb	r3, r3
 8017148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801714c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017154:	b2db      	uxtb	r3, r3
 8017156:	2b03      	cmp	r3, #3
 8017158:	d104      	bne.n	8017164 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801715a:	6839      	ldr	r1, [r7, #0]
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	f000 f9bc 	bl	80174da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017162:	e01d      	b.n	80171a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	7bfa      	ldrb	r2, [r7, #15]
 8017168:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801716c:	7bfb      	ldrb	r3, [r7, #15]
 801716e:	4619      	mov	r1, r3
 8017170:	6878      	ldr	r0, [r7, #4]
 8017172:	f000 ff51 	bl	8018018 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017176:	6878      	ldr	r0, [r7, #4]
 8017178:	f000 fa86 	bl	8017688 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801717c:	7bfb      	ldrb	r3, [r7, #15]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d004      	beq.n	801718c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	2202      	movs	r2, #2
 8017186:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801718a:	e009      	b.n	80171a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2201      	movs	r2, #1
 8017190:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017194:	e004      	b.n	80171a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017196:	6839      	ldr	r1, [r7, #0]
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f000 f99e 	bl	80174da <USBD_CtlError>
  }
}
 801719e:	bf00      	nop
 80171a0:	bf00      	nop
 80171a2:	3710      	adds	r7, #16
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}

080171a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
 80171b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80171b2:	2300      	movs	r3, #0
 80171b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	885b      	ldrh	r3, [r3, #2]
 80171ba:	b2da      	uxtb	r2, r3
 80171bc:	4b4e      	ldr	r3, [pc, #312]	@ (80172f8 <USBD_SetConfig+0x150>)
 80171be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80171c0:	4b4d      	ldr	r3, [pc, #308]	@ (80172f8 <USBD_SetConfig+0x150>)
 80171c2:	781b      	ldrb	r3, [r3, #0]
 80171c4:	2b01      	cmp	r3, #1
 80171c6:	d905      	bls.n	80171d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80171c8:	6839      	ldr	r1, [r7, #0]
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f000 f985 	bl	80174da <USBD_CtlError>
    return USBD_FAIL;
 80171d0:	2303      	movs	r3, #3
 80171d2:	e08c      	b.n	80172ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80171da:	b2db      	uxtb	r3, r3
 80171dc:	2b02      	cmp	r3, #2
 80171de:	d002      	beq.n	80171e6 <USBD_SetConfig+0x3e>
 80171e0:	2b03      	cmp	r3, #3
 80171e2:	d029      	beq.n	8017238 <USBD_SetConfig+0x90>
 80171e4:	e075      	b.n	80172d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80171e6:	4b44      	ldr	r3, [pc, #272]	@ (80172f8 <USBD_SetConfig+0x150>)
 80171e8:	781b      	ldrb	r3, [r3, #0]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d020      	beq.n	8017230 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80171ee:	4b42      	ldr	r3, [pc, #264]	@ (80172f8 <USBD_SetConfig+0x150>)
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	461a      	mov	r2, r3
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80171f8:	4b3f      	ldr	r3, [pc, #252]	@ (80172f8 <USBD_SetConfig+0x150>)
 80171fa:	781b      	ldrb	r3, [r3, #0]
 80171fc:	4619      	mov	r1, r3
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f7fe ffb9 	bl	8016176 <USBD_SetClassConfig>
 8017204:	4603      	mov	r3, r0
 8017206:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017208:	7bfb      	ldrb	r3, [r7, #15]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d008      	beq.n	8017220 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801720e:	6839      	ldr	r1, [r7, #0]
 8017210:	6878      	ldr	r0, [r7, #4]
 8017212:	f000 f962 	bl	80174da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2202      	movs	r2, #2
 801721a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801721e:	e065      	b.n	80172ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017220:	6878      	ldr	r0, [r7, #4]
 8017222:	f000 fa31 	bl	8017688 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	2203      	movs	r2, #3
 801722a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801722e:	e05d      	b.n	80172ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f000 fa29 	bl	8017688 <USBD_CtlSendStatus>
      break;
 8017236:	e059      	b.n	80172ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017238:	4b2f      	ldr	r3, [pc, #188]	@ (80172f8 <USBD_SetConfig+0x150>)
 801723a:	781b      	ldrb	r3, [r3, #0]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d112      	bne.n	8017266 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	2202      	movs	r2, #2
 8017244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017248:	4b2b      	ldr	r3, [pc, #172]	@ (80172f8 <USBD_SetConfig+0x150>)
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	461a      	mov	r2, r3
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017252:	4b29      	ldr	r3, [pc, #164]	@ (80172f8 <USBD_SetConfig+0x150>)
 8017254:	781b      	ldrb	r3, [r3, #0]
 8017256:	4619      	mov	r1, r3
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f7fe ffa8 	bl	80161ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801725e:	6878      	ldr	r0, [r7, #4]
 8017260:	f000 fa12 	bl	8017688 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017264:	e042      	b.n	80172ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017266:	4b24      	ldr	r3, [pc, #144]	@ (80172f8 <USBD_SetConfig+0x150>)
 8017268:	781b      	ldrb	r3, [r3, #0]
 801726a:	461a      	mov	r2, r3
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	685b      	ldr	r3, [r3, #4]
 8017270:	429a      	cmp	r2, r3
 8017272:	d02a      	beq.n	80172ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	685b      	ldr	r3, [r3, #4]
 8017278:	b2db      	uxtb	r3, r3
 801727a:	4619      	mov	r1, r3
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f7fe ff96 	bl	80161ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017282:	4b1d      	ldr	r3, [pc, #116]	@ (80172f8 <USBD_SetConfig+0x150>)
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	461a      	mov	r2, r3
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801728c:	4b1a      	ldr	r3, [pc, #104]	@ (80172f8 <USBD_SetConfig+0x150>)
 801728e:	781b      	ldrb	r3, [r3, #0]
 8017290:	4619      	mov	r1, r3
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	f7fe ff6f 	bl	8016176 <USBD_SetClassConfig>
 8017298:	4603      	mov	r3, r0
 801729a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801729c:	7bfb      	ldrb	r3, [r7, #15]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d00f      	beq.n	80172c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80172a2:	6839      	ldr	r1, [r7, #0]
 80172a4:	6878      	ldr	r0, [r7, #4]
 80172a6:	f000 f918 	bl	80174da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	685b      	ldr	r3, [r3, #4]
 80172ae:	b2db      	uxtb	r3, r3
 80172b0:	4619      	mov	r1, r3
 80172b2:	6878      	ldr	r0, [r7, #4]
 80172b4:	f7fe ff7b 	bl	80161ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	2202      	movs	r2, #2
 80172bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80172c0:	e014      	b.n	80172ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80172c2:	6878      	ldr	r0, [r7, #4]
 80172c4:	f000 f9e0 	bl	8017688 <USBD_CtlSendStatus>
      break;
 80172c8:	e010      	b.n	80172ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80172ca:	6878      	ldr	r0, [r7, #4]
 80172cc:	f000 f9dc 	bl	8017688 <USBD_CtlSendStatus>
      break;
 80172d0:	e00c      	b.n	80172ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80172d2:	6839      	ldr	r1, [r7, #0]
 80172d4:	6878      	ldr	r0, [r7, #4]
 80172d6:	f000 f900 	bl	80174da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80172da:	4b07      	ldr	r3, [pc, #28]	@ (80172f8 <USBD_SetConfig+0x150>)
 80172dc:	781b      	ldrb	r3, [r3, #0]
 80172de:	4619      	mov	r1, r3
 80172e0:	6878      	ldr	r0, [r7, #4]
 80172e2:	f7fe ff64 	bl	80161ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80172e6:	2303      	movs	r3, #3
 80172e8:	73fb      	strb	r3, [r7, #15]
      break;
 80172ea:	bf00      	nop
  }

  return ret;
 80172ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3710      	adds	r7, #16
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}
 80172f6:	bf00      	nop
 80172f8:	24029328 	.word	0x24029328

080172fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b082      	sub	sp, #8
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
 8017304:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017306:	683b      	ldr	r3, [r7, #0]
 8017308:	88db      	ldrh	r3, [r3, #6]
 801730a:	2b01      	cmp	r3, #1
 801730c:	d004      	beq.n	8017318 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801730e:	6839      	ldr	r1, [r7, #0]
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	f000 f8e2 	bl	80174da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017316:	e023      	b.n	8017360 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801731e:	b2db      	uxtb	r3, r3
 8017320:	2b02      	cmp	r3, #2
 8017322:	dc02      	bgt.n	801732a <USBD_GetConfig+0x2e>
 8017324:	2b00      	cmp	r3, #0
 8017326:	dc03      	bgt.n	8017330 <USBD_GetConfig+0x34>
 8017328:	e015      	b.n	8017356 <USBD_GetConfig+0x5a>
 801732a:	2b03      	cmp	r3, #3
 801732c:	d00b      	beq.n	8017346 <USBD_GetConfig+0x4a>
 801732e:	e012      	b.n	8017356 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	2200      	movs	r2, #0
 8017334:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	3308      	adds	r3, #8
 801733a:	2201      	movs	r2, #1
 801733c:	4619      	mov	r1, r3
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f000 f948 	bl	80175d4 <USBD_CtlSendData>
        break;
 8017344:	e00c      	b.n	8017360 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	3304      	adds	r3, #4
 801734a:	2201      	movs	r2, #1
 801734c:	4619      	mov	r1, r3
 801734e:	6878      	ldr	r0, [r7, #4]
 8017350:	f000 f940 	bl	80175d4 <USBD_CtlSendData>
        break;
 8017354:	e004      	b.n	8017360 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017356:	6839      	ldr	r1, [r7, #0]
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f000 f8be 	bl	80174da <USBD_CtlError>
        break;
 801735e:	bf00      	nop
}
 8017360:	bf00      	nop
 8017362:	3708      	adds	r7, #8
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}

08017368 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b082      	sub	sp, #8
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
 8017370:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017378:	b2db      	uxtb	r3, r3
 801737a:	3b01      	subs	r3, #1
 801737c:	2b02      	cmp	r3, #2
 801737e:	d81e      	bhi.n	80173be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	88db      	ldrh	r3, [r3, #6]
 8017384:	2b02      	cmp	r3, #2
 8017386:	d004      	beq.n	8017392 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017388:	6839      	ldr	r1, [r7, #0]
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f000 f8a5 	bl	80174da <USBD_CtlError>
        break;
 8017390:	e01a      	b.n	80173c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	2201      	movs	r2, #1
 8017396:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d005      	beq.n	80173ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	68db      	ldr	r3, [r3, #12]
 80173a6:	f043 0202 	orr.w	r2, r3, #2
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	330c      	adds	r3, #12
 80173b2:	2202      	movs	r2, #2
 80173b4:	4619      	mov	r1, r3
 80173b6:	6878      	ldr	r0, [r7, #4]
 80173b8:	f000 f90c 	bl	80175d4 <USBD_CtlSendData>
      break;
 80173bc:	e004      	b.n	80173c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80173be:	6839      	ldr	r1, [r7, #0]
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f000 f88a 	bl	80174da <USBD_CtlError>
      break;
 80173c6:	bf00      	nop
  }
}
 80173c8:	bf00      	nop
 80173ca:	3708      	adds	r7, #8
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}

080173d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80173da:	683b      	ldr	r3, [r7, #0]
 80173dc:	885b      	ldrh	r3, [r3, #2]
 80173de:	2b01      	cmp	r3, #1
 80173e0:	d107      	bne.n	80173f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	2201      	movs	r2, #1
 80173e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80173ea:	6878      	ldr	r0, [r7, #4]
 80173ec:	f000 f94c 	bl	8017688 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80173f0:	e013      	b.n	801741a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	885b      	ldrh	r3, [r3, #2]
 80173f6:	2b02      	cmp	r3, #2
 80173f8:	d10b      	bne.n	8017412 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	889b      	ldrh	r3, [r3, #4]
 80173fe:	0a1b      	lsrs	r3, r3, #8
 8017400:	b29b      	uxth	r3, r3
 8017402:	b2da      	uxtb	r2, r3
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801740a:	6878      	ldr	r0, [r7, #4]
 801740c:	f000 f93c 	bl	8017688 <USBD_CtlSendStatus>
}
 8017410:	e003      	b.n	801741a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017412:	6839      	ldr	r1, [r7, #0]
 8017414:	6878      	ldr	r0, [r7, #4]
 8017416:	f000 f860 	bl	80174da <USBD_CtlError>
}
 801741a:	bf00      	nop
 801741c:	3708      	adds	r7, #8
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}

08017422 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017422:	b580      	push	{r7, lr}
 8017424:	b082      	sub	sp, #8
 8017426:	af00      	add	r7, sp, #0
 8017428:	6078      	str	r0, [r7, #4]
 801742a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017432:	b2db      	uxtb	r3, r3
 8017434:	3b01      	subs	r3, #1
 8017436:	2b02      	cmp	r3, #2
 8017438:	d80b      	bhi.n	8017452 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801743a:	683b      	ldr	r3, [r7, #0]
 801743c:	885b      	ldrh	r3, [r3, #2]
 801743e:	2b01      	cmp	r3, #1
 8017440:	d10c      	bne.n	801745c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	2200      	movs	r2, #0
 8017446:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f000 f91c 	bl	8017688 <USBD_CtlSendStatus>
      }
      break;
 8017450:	e004      	b.n	801745c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017452:	6839      	ldr	r1, [r7, #0]
 8017454:	6878      	ldr	r0, [r7, #4]
 8017456:	f000 f840 	bl	80174da <USBD_CtlError>
      break;
 801745a:	e000      	b.n	801745e <USBD_ClrFeature+0x3c>
      break;
 801745c:	bf00      	nop
  }
}
 801745e:	bf00      	nop
 8017460:	3708      	adds	r7, #8
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}

08017466 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017466:	b580      	push	{r7, lr}
 8017468:	b084      	sub	sp, #16
 801746a:	af00      	add	r7, sp, #0
 801746c:	6078      	str	r0, [r7, #4]
 801746e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017470:	683b      	ldr	r3, [r7, #0]
 8017472:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	781a      	ldrb	r2, [r3, #0]
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	3301      	adds	r3, #1
 8017480:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	781a      	ldrb	r2, [r3, #0]
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	3301      	adds	r3, #1
 801748e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017490:	68f8      	ldr	r0, [r7, #12]
 8017492:	f7ff fa16 	bl	80168c2 <SWAPBYTE>
 8017496:	4603      	mov	r3, r0
 8017498:	461a      	mov	r2, r3
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	3301      	adds	r3, #1
 80174a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	3301      	adds	r3, #1
 80174a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f7ff fa09 	bl	80168c2 <SWAPBYTE>
 80174b0:	4603      	mov	r3, r0
 80174b2:	461a      	mov	r2, r3
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	3301      	adds	r3, #1
 80174bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	3301      	adds	r3, #1
 80174c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80174c4:	68f8      	ldr	r0, [r7, #12]
 80174c6:	f7ff f9fc 	bl	80168c2 <SWAPBYTE>
 80174ca:	4603      	mov	r3, r0
 80174cc:	461a      	mov	r2, r3
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	80da      	strh	r2, [r3, #6]
}
 80174d2:	bf00      	nop
 80174d4:	3710      	adds	r7, #16
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd80      	pop	{r7, pc}

080174da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174da:	b580      	push	{r7, lr}
 80174dc:	b082      	sub	sp, #8
 80174de:	af00      	add	r7, sp, #0
 80174e0:	6078      	str	r0, [r7, #4]
 80174e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80174e4:	2180      	movs	r1, #128	@ 0x80
 80174e6:	6878      	ldr	r0, [r7, #4]
 80174e8:	f000 fd2c 	bl	8017f44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80174ec:	2100      	movs	r1, #0
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f000 fd28 	bl	8017f44 <USBD_LL_StallEP>
}
 80174f4:	bf00      	nop
 80174f6:	3708      	adds	r7, #8
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd80      	pop	{r7, pc}

080174fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b086      	sub	sp, #24
 8017500:	af00      	add	r7, sp, #0
 8017502:	60f8      	str	r0, [r7, #12]
 8017504:	60b9      	str	r1, [r7, #8]
 8017506:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017508:	2300      	movs	r3, #0
 801750a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d042      	beq.n	8017598 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8017516:	6938      	ldr	r0, [r7, #16]
 8017518:	f000 f842 	bl	80175a0 <USBD_GetLen>
 801751c:	4603      	mov	r3, r0
 801751e:	3301      	adds	r3, #1
 8017520:	005b      	lsls	r3, r3, #1
 8017522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017526:	d808      	bhi.n	801753a <USBD_GetString+0x3e>
 8017528:	6938      	ldr	r0, [r7, #16]
 801752a:	f000 f839 	bl	80175a0 <USBD_GetLen>
 801752e:	4603      	mov	r3, r0
 8017530:	3301      	adds	r3, #1
 8017532:	b29b      	uxth	r3, r3
 8017534:	005b      	lsls	r3, r3, #1
 8017536:	b29a      	uxth	r2, r3
 8017538:	e001      	b.n	801753e <USBD_GetString+0x42>
 801753a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017542:	7dfb      	ldrb	r3, [r7, #23]
 8017544:	68ba      	ldr	r2, [r7, #8]
 8017546:	4413      	add	r3, r2
 8017548:	687a      	ldr	r2, [r7, #4]
 801754a:	7812      	ldrb	r2, [r2, #0]
 801754c:	701a      	strb	r2, [r3, #0]
  idx++;
 801754e:	7dfb      	ldrb	r3, [r7, #23]
 8017550:	3301      	adds	r3, #1
 8017552:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017554:	7dfb      	ldrb	r3, [r7, #23]
 8017556:	68ba      	ldr	r2, [r7, #8]
 8017558:	4413      	add	r3, r2
 801755a:	2203      	movs	r2, #3
 801755c:	701a      	strb	r2, [r3, #0]
  idx++;
 801755e:	7dfb      	ldrb	r3, [r7, #23]
 8017560:	3301      	adds	r3, #1
 8017562:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017564:	e013      	b.n	801758e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8017566:	7dfb      	ldrb	r3, [r7, #23]
 8017568:	68ba      	ldr	r2, [r7, #8]
 801756a:	4413      	add	r3, r2
 801756c:	693a      	ldr	r2, [r7, #16]
 801756e:	7812      	ldrb	r2, [r2, #0]
 8017570:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	3301      	adds	r3, #1
 8017576:	613b      	str	r3, [r7, #16]
    idx++;
 8017578:	7dfb      	ldrb	r3, [r7, #23]
 801757a:	3301      	adds	r3, #1
 801757c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801757e:	7dfb      	ldrb	r3, [r7, #23]
 8017580:	68ba      	ldr	r2, [r7, #8]
 8017582:	4413      	add	r3, r2
 8017584:	2200      	movs	r2, #0
 8017586:	701a      	strb	r2, [r3, #0]
    idx++;
 8017588:	7dfb      	ldrb	r3, [r7, #23]
 801758a:	3301      	adds	r3, #1
 801758c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801758e:	693b      	ldr	r3, [r7, #16]
 8017590:	781b      	ldrb	r3, [r3, #0]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d1e7      	bne.n	8017566 <USBD_GetString+0x6a>
 8017596:	e000      	b.n	801759a <USBD_GetString+0x9e>
    return;
 8017598:	bf00      	nop
  }
}
 801759a:	3718      	adds	r7, #24
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}

080175a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80175a0:	b480      	push	{r7}
 80175a2:	b085      	sub	sp, #20
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80175a8:	2300      	movs	r3, #0
 80175aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80175b0:	e005      	b.n	80175be <USBD_GetLen+0x1e>
  {
    len++;
 80175b2:	7bfb      	ldrb	r3, [r7, #15]
 80175b4:	3301      	adds	r3, #1
 80175b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80175b8:	68bb      	ldr	r3, [r7, #8]
 80175ba:	3301      	adds	r3, #1
 80175bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80175be:	68bb      	ldr	r3, [r7, #8]
 80175c0:	781b      	ldrb	r3, [r3, #0]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d1f5      	bne.n	80175b2 <USBD_GetLen+0x12>
  }

  return len;
 80175c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	3714      	adds	r7, #20
 80175cc:	46bd      	mov	sp, r7
 80175ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d2:	4770      	bx	lr

080175d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b084      	sub	sp, #16
 80175d8:	af00      	add	r7, sp, #0
 80175da:	60f8      	str	r0, [r7, #12]
 80175dc:	60b9      	str	r1, [r7, #8]
 80175de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	2202      	movs	r2, #2
 80175e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	687a      	ldr	r2, [r7, #4]
 80175ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	687a      	ldr	r2, [r7, #4]
 80175f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	68ba      	ldr	r2, [r7, #8]
 80175f8:	2100      	movs	r1, #0
 80175fa:	68f8      	ldr	r0, [r7, #12]
 80175fc:	f000 fd2b 	bl	8018056 <USBD_LL_Transmit>

  return USBD_OK;
 8017600:	2300      	movs	r3, #0
}
 8017602:	4618      	mov	r0, r3
 8017604:	3710      	adds	r7, #16
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}

0801760a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801760a:	b580      	push	{r7, lr}
 801760c:	b084      	sub	sp, #16
 801760e:	af00      	add	r7, sp, #0
 8017610:	60f8      	str	r0, [r7, #12]
 8017612:	60b9      	str	r1, [r7, #8]
 8017614:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	68ba      	ldr	r2, [r7, #8]
 801761a:	2100      	movs	r1, #0
 801761c:	68f8      	ldr	r0, [r7, #12]
 801761e:	f000 fd1a 	bl	8018056 <USBD_LL_Transmit>

  return USBD_OK;
 8017622:	2300      	movs	r3, #0
}
 8017624:	4618      	mov	r0, r3
 8017626:	3710      	adds	r7, #16
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}

0801762c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b084      	sub	sp, #16
 8017630:	af00      	add	r7, sp, #0
 8017632:	60f8      	str	r0, [r7, #12]
 8017634:	60b9      	str	r1, [r7, #8]
 8017636:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	2203      	movs	r2, #3
 801763c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	687a      	ldr	r2, [r7, #4]
 8017644:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	687a      	ldr	r2, [r7, #4]
 801764c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	68ba      	ldr	r2, [r7, #8]
 8017654:	2100      	movs	r1, #0
 8017656:	68f8      	ldr	r0, [r7, #12]
 8017658:	f000 fd1e 	bl	8018098 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801765c:	2300      	movs	r3, #0
}
 801765e:	4618      	mov	r0, r3
 8017660:	3710      	adds	r7, #16
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}

08017666 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017666:	b580      	push	{r7, lr}
 8017668:	b084      	sub	sp, #16
 801766a:	af00      	add	r7, sp, #0
 801766c:	60f8      	str	r0, [r7, #12]
 801766e:	60b9      	str	r1, [r7, #8]
 8017670:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	68ba      	ldr	r2, [r7, #8]
 8017676:	2100      	movs	r1, #0
 8017678:	68f8      	ldr	r0, [r7, #12]
 801767a:	f000 fd0d 	bl	8018098 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801767e:	2300      	movs	r3, #0
}
 8017680:	4618      	mov	r0, r3
 8017682:	3710      	adds	r7, #16
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}

08017688 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b082      	sub	sp, #8
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	2204      	movs	r2, #4
 8017694:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017698:	2300      	movs	r3, #0
 801769a:	2200      	movs	r2, #0
 801769c:	2100      	movs	r1, #0
 801769e:	6878      	ldr	r0, [r7, #4]
 80176a0:	f000 fcd9 	bl	8018056 <USBD_LL_Transmit>

  return USBD_OK;
 80176a4:	2300      	movs	r3, #0
}
 80176a6:	4618      	mov	r0, r3
 80176a8:	3708      	adds	r7, #8
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}

080176ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80176ae:	b580      	push	{r7, lr}
 80176b0:	b082      	sub	sp, #8
 80176b2:	af00      	add	r7, sp, #0
 80176b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	2205      	movs	r2, #5
 80176ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80176be:	2300      	movs	r3, #0
 80176c0:	2200      	movs	r2, #0
 80176c2:	2100      	movs	r1, #0
 80176c4:	6878      	ldr	r0, [r7, #4]
 80176c6:	f000 fce7 	bl	8018098 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80176ca:	2300      	movs	r3, #0
}
 80176cc:	4618      	mov	r0, r3
 80176ce:	3708      	adds	r7, #8
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}

080176d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80176d8:	2200      	movs	r2, #0
 80176da:	4918      	ldr	r1, [pc, #96]	@ (801773c <MX_USB_DEVICE_Init+0x68>)
 80176dc:	4818      	ldr	r0, [pc, #96]	@ (8017740 <MX_USB_DEVICE_Init+0x6c>)
 80176de:	f7fe fccd 	bl	801607c <USBD_Init>
 80176e2:	4603      	mov	r3, r0
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d001      	beq.n	80176ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80176e8:	f7e9 ff9e 	bl	8001628 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80176ec:	4915      	ldr	r1, [pc, #84]	@ (8017744 <MX_USB_DEVICE_Init+0x70>)
 80176ee:	4814      	ldr	r0, [pc, #80]	@ (8017740 <MX_USB_DEVICE_Init+0x6c>)
 80176f0:	f7fe fcf4 	bl	80160dc <USBD_RegisterClass>
 80176f4:	4603      	mov	r3, r0
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d001      	beq.n	80176fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80176fa:	f7e9 ff95 	bl	8001628 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80176fe:	4912      	ldr	r1, [pc, #72]	@ (8017748 <MX_USB_DEVICE_Init+0x74>)
 8017700:	480f      	ldr	r0, [pc, #60]	@ (8017740 <MX_USB_DEVICE_Init+0x6c>)
 8017702:	f7fe fbeb 	bl	8015edc <USBD_CDC_RegisterInterface>
 8017706:	4603      	mov	r3, r0
 8017708:	2b00      	cmp	r3, #0
 801770a:	d001      	beq.n	8017710 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801770c:	f7e9 ff8c 	bl	8001628 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017710:	480b      	ldr	r0, [pc, #44]	@ (8017740 <MX_USB_DEVICE_Init+0x6c>)
 8017712:	f7fe fd19 	bl	8016148 <USBD_Start>
 8017716:	4603      	mov	r3, r0
 8017718:	2b00      	cmp	r3, #0
 801771a:	d001      	beq.n	8017720 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801771c:	f7e9 ff84 	bl	8001628 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017720:	f7f5 fe98 	bl	800d454 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8017724:	4b06      	ldr	r3, [pc, #24]	@ (8017740 <MX_USB_DEVICE_Init+0x6c>)
 8017726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801772a:	4a05      	ldr	r2, [pc, #20]	@ (8017740 <MX_USB_DEVICE_Init+0x6c>)
 801772c:	33b0      	adds	r3, #176	@ 0xb0
 801772e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017732:	4a06      	ldr	r2, [pc, #24]	@ (801774c <MX_USB_DEVICE_Init+0x78>)
 8017734:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017736:	bf00      	nop
 8017738:	bd80      	pop	{r7, pc}
 801773a:	bf00      	nop
 801773c:	240002c4 	.word	0x240002c4
 8017740:	2402932c 	.word	0x2402932c
 8017744:	24000230 	.word	0x24000230
 8017748:	240002b0 	.word	0x240002b0
 801774c:	24029608 	.word	0x24029608

08017750 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017754:	2200      	movs	r2, #0
 8017756:	4905      	ldr	r1, [pc, #20]	@ (801776c <CDC_Init_FS+0x1c>)
 8017758:	4805      	ldr	r0, [pc, #20]	@ (8017770 <CDC_Init_FS+0x20>)
 801775a:	f7fe fbd9 	bl	8015f10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801775e:	4905      	ldr	r1, [pc, #20]	@ (8017774 <CDC_Init_FS+0x24>)
 8017760:	4803      	ldr	r0, [pc, #12]	@ (8017770 <CDC_Init_FS+0x20>)
 8017762:	f7fe fbf7 	bl	8015f54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017766:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017768:	4618      	mov	r0, r3
 801776a:	bd80      	pop	{r7, pc}
 801776c:	24029e0c 	.word	0x24029e0c
 8017770:	2402932c 	.word	0x2402932c
 8017774:	2402960c 	.word	0x2402960c

08017778 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017778:	b480      	push	{r7}
 801777a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801777c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801777e:	4618      	mov	r0, r3
 8017780:	46bd      	mov	sp, r7
 8017782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017786:	4770      	bx	lr

08017788 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017788:	b480      	push	{r7}
 801778a:	b083      	sub	sp, #12
 801778c:	af00      	add	r7, sp, #0
 801778e:	4603      	mov	r3, r0
 8017790:	6039      	str	r1, [r7, #0]
 8017792:	71fb      	strb	r3, [r7, #7]
 8017794:	4613      	mov	r3, r2
 8017796:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017798:	79fb      	ldrb	r3, [r7, #7]
 801779a:	2b23      	cmp	r3, #35	@ 0x23
 801779c:	d84a      	bhi.n	8017834 <CDC_Control_FS+0xac>
 801779e:	a201      	add	r2, pc, #4	@ (adr r2, 80177a4 <CDC_Control_FS+0x1c>)
 80177a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177a4:	08017835 	.word	0x08017835
 80177a8:	08017835 	.word	0x08017835
 80177ac:	08017835 	.word	0x08017835
 80177b0:	08017835 	.word	0x08017835
 80177b4:	08017835 	.word	0x08017835
 80177b8:	08017835 	.word	0x08017835
 80177bc:	08017835 	.word	0x08017835
 80177c0:	08017835 	.word	0x08017835
 80177c4:	08017835 	.word	0x08017835
 80177c8:	08017835 	.word	0x08017835
 80177cc:	08017835 	.word	0x08017835
 80177d0:	08017835 	.word	0x08017835
 80177d4:	08017835 	.word	0x08017835
 80177d8:	08017835 	.word	0x08017835
 80177dc:	08017835 	.word	0x08017835
 80177e0:	08017835 	.word	0x08017835
 80177e4:	08017835 	.word	0x08017835
 80177e8:	08017835 	.word	0x08017835
 80177ec:	08017835 	.word	0x08017835
 80177f0:	08017835 	.word	0x08017835
 80177f4:	08017835 	.word	0x08017835
 80177f8:	08017835 	.word	0x08017835
 80177fc:	08017835 	.word	0x08017835
 8017800:	08017835 	.word	0x08017835
 8017804:	08017835 	.word	0x08017835
 8017808:	08017835 	.word	0x08017835
 801780c:	08017835 	.word	0x08017835
 8017810:	08017835 	.word	0x08017835
 8017814:	08017835 	.word	0x08017835
 8017818:	08017835 	.word	0x08017835
 801781c:	08017835 	.word	0x08017835
 8017820:	08017835 	.word	0x08017835
 8017824:	08017835 	.word	0x08017835
 8017828:	08017835 	.word	0x08017835
 801782c:	08017835 	.word	0x08017835
 8017830:	08017835 	.word	0x08017835
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017834:	bf00      	nop
  }

  return (USBD_OK);
 8017836:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017838:	4618      	mov	r0, r3
 801783a:	370c      	adds	r7, #12
 801783c:	46bd      	mov	sp, r7
 801783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017842:	4770      	bx	lr

08017844 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b082      	sub	sp, #8
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801784e:	6879      	ldr	r1, [r7, #4]
 8017850:	480a      	ldr	r0, [pc, #40]	@ (801787c <CDC_Receive_FS+0x38>)
 8017852:	f7fe fb7f 	bl	8015f54 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017856:	4809      	ldr	r0, [pc, #36]	@ (801787c <CDC_Receive_FS+0x38>)
 8017858:	f7fe fbda 	bl	8016010 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 801785c:	4b08      	ldr	r3, [pc, #32]	@ (8017880 <CDC_Receive_FS+0x3c>)
 801785e:	2201      	movs	r2, #1
 8017860:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8017862:	683b      	ldr	r3, [r7, #0]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	b29a      	uxth	r2, r3
 8017868:	2364      	movs	r3, #100	@ 0x64
 801786a:	6879      	ldr	r1, [r7, #4]
 801786c:	4805      	ldr	r0, [pc, #20]	@ (8017884 <CDC_Receive_FS+0x40>)
 801786e:	f7fa fae0 	bl	8011e32 <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8017872:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017874:	4618      	mov	r0, r3
 8017876:	3708      	adds	r7, #8
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}
 801787c:	2402932c 	.word	0x2402932c
 8017880:	2402931c 	.word	0x2402931c
 8017884:	24000828 	.word	0x24000828

08017888 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b084      	sub	sp, #16
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
 8017890:	460b      	mov	r3, r1
 8017892:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017894:	2300      	movs	r3, #0
 8017896:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017898:	4b0d      	ldr	r3, [pc, #52]	@ (80178d0 <CDC_Transmit_FS+0x48>)
 801789a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801789e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d001      	beq.n	80178ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80178aa:	2301      	movs	r3, #1
 80178ac:	e00b      	b.n	80178c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80178ae:	887b      	ldrh	r3, [r7, #2]
 80178b0:	461a      	mov	r2, r3
 80178b2:	6879      	ldr	r1, [r7, #4]
 80178b4:	4806      	ldr	r0, [pc, #24]	@ (80178d0 <CDC_Transmit_FS+0x48>)
 80178b6:	f7fe fb2b 	bl	8015f10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80178ba:	4805      	ldr	r0, [pc, #20]	@ (80178d0 <CDC_Transmit_FS+0x48>)
 80178bc:	f7fe fb68 	bl	8015f90 <USBD_CDC_TransmitPacket>
 80178c0:	4603      	mov	r3, r0
 80178c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80178c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80178c6:	4618      	mov	r0, r3
 80178c8:	3710      	adds	r7, #16
 80178ca:	46bd      	mov	sp, r7
 80178cc:	bd80      	pop	{r7, pc}
 80178ce:	bf00      	nop
 80178d0:	2402932c 	.word	0x2402932c

080178d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80178d4:	b480      	push	{r7}
 80178d6:	b087      	sub	sp, #28
 80178d8:	af00      	add	r7, sp, #0
 80178da:	60f8      	str	r0, [r7, #12]
 80178dc:	60b9      	str	r1, [r7, #8]
 80178de:	4613      	mov	r3, r2
 80178e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80178e2:	2300      	movs	r3, #0
 80178e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80178e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80178ea:	4618      	mov	r0, r3
 80178ec:	371c      	adds	r7, #28
 80178ee:	46bd      	mov	sp, r7
 80178f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f4:	4770      	bx	lr
	...

080178f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80178f8:	b480      	push	{r7}
 80178fa:	b083      	sub	sp, #12
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	4603      	mov	r3, r0
 8017900:	6039      	str	r1, [r7, #0]
 8017902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017904:	683b      	ldr	r3, [r7, #0]
 8017906:	2212      	movs	r2, #18
 8017908:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801790a:	4b03      	ldr	r3, [pc, #12]	@ (8017918 <USBD_FS_DeviceDescriptor+0x20>)
}
 801790c:	4618      	mov	r0, r3
 801790e:	370c      	adds	r7, #12
 8017910:	46bd      	mov	sp, r7
 8017912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017916:	4770      	bx	lr
 8017918:	240002e4 	.word	0x240002e4

0801791c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801791c:	b480      	push	{r7}
 801791e:	b083      	sub	sp, #12
 8017920:	af00      	add	r7, sp, #0
 8017922:	4603      	mov	r3, r0
 8017924:	6039      	str	r1, [r7, #0]
 8017926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	2204      	movs	r2, #4
 801792c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801792e:	4b03      	ldr	r3, [pc, #12]	@ (801793c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017930:	4618      	mov	r0, r3
 8017932:	370c      	adds	r7, #12
 8017934:	46bd      	mov	sp, r7
 8017936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793a:	4770      	bx	lr
 801793c:	240002f8 	.word	0x240002f8

08017940 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	4603      	mov	r3, r0
 8017948:	6039      	str	r1, [r7, #0]
 801794a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801794c:	79fb      	ldrb	r3, [r7, #7]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d105      	bne.n	801795e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017952:	683a      	ldr	r2, [r7, #0]
 8017954:	4907      	ldr	r1, [pc, #28]	@ (8017974 <USBD_FS_ProductStrDescriptor+0x34>)
 8017956:	4808      	ldr	r0, [pc, #32]	@ (8017978 <USBD_FS_ProductStrDescriptor+0x38>)
 8017958:	f7ff fdd0 	bl	80174fc <USBD_GetString>
 801795c:	e004      	b.n	8017968 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801795e:	683a      	ldr	r2, [r7, #0]
 8017960:	4904      	ldr	r1, [pc, #16]	@ (8017974 <USBD_FS_ProductStrDescriptor+0x34>)
 8017962:	4805      	ldr	r0, [pc, #20]	@ (8017978 <USBD_FS_ProductStrDescriptor+0x38>)
 8017964:	f7ff fdca 	bl	80174fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8017968:	4b02      	ldr	r3, [pc, #8]	@ (8017974 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801796a:	4618      	mov	r0, r3
 801796c:	3708      	adds	r7, #8
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
 8017972:	bf00      	nop
 8017974:	2402a60c 	.word	0x2402a60c
 8017978:	08018b98 	.word	0x08018b98

0801797c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801797c:	b580      	push	{r7, lr}
 801797e:	b082      	sub	sp, #8
 8017980:	af00      	add	r7, sp, #0
 8017982:	4603      	mov	r3, r0
 8017984:	6039      	str	r1, [r7, #0]
 8017986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017988:	683a      	ldr	r2, [r7, #0]
 801798a:	4904      	ldr	r1, [pc, #16]	@ (801799c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801798c:	4804      	ldr	r0, [pc, #16]	@ (80179a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801798e:	f7ff fdb5 	bl	80174fc <USBD_GetString>
  return USBD_StrDesc;
 8017992:	4b02      	ldr	r3, [pc, #8]	@ (801799c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017994:	4618      	mov	r0, r3
 8017996:	3708      	adds	r7, #8
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}
 801799c:	2402a60c 	.word	0x2402a60c
 80179a0:	08018bb0 	.word	0x08018bb0

080179a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	4603      	mov	r3, r0
 80179ac:	6039      	str	r1, [r7, #0]
 80179ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	221a      	movs	r2, #26
 80179b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80179b6:	f000 f843 	bl	8017a40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80179ba:	4b02      	ldr	r3, [pc, #8]	@ (80179c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80179bc:	4618      	mov	r0, r3
 80179be:	3708      	adds	r7, #8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	240002fc 	.word	0x240002fc

080179c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b082      	sub	sp, #8
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	4603      	mov	r3, r0
 80179d0:	6039      	str	r1, [r7, #0]
 80179d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80179d4:	79fb      	ldrb	r3, [r7, #7]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d105      	bne.n	80179e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80179da:	683a      	ldr	r2, [r7, #0]
 80179dc:	4907      	ldr	r1, [pc, #28]	@ (80179fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80179de:	4808      	ldr	r0, [pc, #32]	@ (8017a00 <USBD_FS_ConfigStrDescriptor+0x38>)
 80179e0:	f7ff fd8c 	bl	80174fc <USBD_GetString>
 80179e4:	e004      	b.n	80179f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80179e6:	683a      	ldr	r2, [r7, #0]
 80179e8:	4904      	ldr	r1, [pc, #16]	@ (80179fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80179ea:	4805      	ldr	r0, [pc, #20]	@ (8017a00 <USBD_FS_ConfigStrDescriptor+0x38>)
 80179ec:	f7ff fd86 	bl	80174fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80179f0:	4b02      	ldr	r3, [pc, #8]	@ (80179fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	3708      	adds	r7, #8
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}
 80179fa:	bf00      	nop
 80179fc:	2402a60c 	.word	0x2402a60c
 8017a00:	08018bc4 	.word	0x08018bc4

08017a04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b082      	sub	sp, #8
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	6039      	str	r1, [r7, #0]
 8017a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017a10:	79fb      	ldrb	r3, [r7, #7]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d105      	bne.n	8017a22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017a16:	683a      	ldr	r2, [r7, #0]
 8017a18:	4907      	ldr	r1, [pc, #28]	@ (8017a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017a1a:	4808      	ldr	r0, [pc, #32]	@ (8017a3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017a1c:	f7ff fd6e 	bl	80174fc <USBD_GetString>
 8017a20:	e004      	b.n	8017a2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017a22:	683a      	ldr	r2, [r7, #0]
 8017a24:	4904      	ldr	r1, [pc, #16]	@ (8017a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017a26:	4805      	ldr	r0, [pc, #20]	@ (8017a3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017a28:	f7ff fd68 	bl	80174fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a2c:	4b02      	ldr	r3, [pc, #8]	@ (8017a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017a2e:	4618      	mov	r0, r3
 8017a30:	3708      	adds	r7, #8
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}
 8017a36:	bf00      	nop
 8017a38:	2402a60c 	.word	0x2402a60c
 8017a3c:	08018bd0 	.word	0x08018bd0

08017a40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b084      	sub	sp, #16
 8017a44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017a46:	4b0f      	ldr	r3, [pc, #60]	@ (8017a84 <Get_SerialNum+0x44>)
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8017a88 <Get_SerialNum+0x48>)
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017a52:	4b0e      	ldr	r3, [pc, #56]	@ (8017a8c <Get_SerialNum+0x4c>)
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017a58:	68fa      	ldr	r2, [r7, #12]
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	4413      	add	r3, r2
 8017a5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d009      	beq.n	8017a7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017a66:	2208      	movs	r2, #8
 8017a68:	4909      	ldr	r1, [pc, #36]	@ (8017a90 <Get_SerialNum+0x50>)
 8017a6a:	68f8      	ldr	r0, [r7, #12]
 8017a6c:	f000 f814 	bl	8017a98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017a70:	2204      	movs	r2, #4
 8017a72:	4908      	ldr	r1, [pc, #32]	@ (8017a94 <Get_SerialNum+0x54>)
 8017a74:	68b8      	ldr	r0, [r7, #8]
 8017a76:	f000 f80f 	bl	8017a98 <IntToUnicode>
  }
}
 8017a7a:	bf00      	nop
 8017a7c:	3710      	adds	r7, #16
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	bd80      	pop	{r7, pc}
 8017a82:	bf00      	nop
 8017a84:	1ff1e800 	.word	0x1ff1e800
 8017a88:	1ff1e804 	.word	0x1ff1e804
 8017a8c:	1ff1e808 	.word	0x1ff1e808
 8017a90:	240002fe 	.word	0x240002fe
 8017a94:	2400030e 	.word	0x2400030e

08017a98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017a98:	b480      	push	{r7}
 8017a9a:	b087      	sub	sp, #28
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	60f8      	str	r0, [r7, #12]
 8017aa0:	60b9      	str	r1, [r7, #8]
 8017aa2:	4613      	mov	r3, r2
 8017aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017aaa:	2300      	movs	r3, #0
 8017aac:	75fb      	strb	r3, [r7, #23]
 8017aae:	e027      	b.n	8017b00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	0f1b      	lsrs	r3, r3, #28
 8017ab4:	2b09      	cmp	r3, #9
 8017ab6:	d80b      	bhi.n	8017ad0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	0f1b      	lsrs	r3, r3, #28
 8017abc:	b2da      	uxtb	r2, r3
 8017abe:	7dfb      	ldrb	r3, [r7, #23]
 8017ac0:	005b      	lsls	r3, r3, #1
 8017ac2:	4619      	mov	r1, r3
 8017ac4:	68bb      	ldr	r3, [r7, #8]
 8017ac6:	440b      	add	r3, r1
 8017ac8:	3230      	adds	r2, #48	@ 0x30
 8017aca:	b2d2      	uxtb	r2, r2
 8017acc:	701a      	strb	r2, [r3, #0]
 8017ace:	e00a      	b.n	8017ae6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	0f1b      	lsrs	r3, r3, #28
 8017ad4:	b2da      	uxtb	r2, r3
 8017ad6:	7dfb      	ldrb	r3, [r7, #23]
 8017ad8:	005b      	lsls	r3, r3, #1
 8017ada:	4619      	mov	r1, r3
 8017adc:	68bb      	ldr	r3, [r7, #8]
 8017ade:	440b      	add	r3, r1
 8017ae0:	3237      	adds	r2, #55	@ 0x37
 8017ae2:	b2d2      	uxtb	r2, r2
 8017ae4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	011b      	lsls	r3, r3, #4
 8017aea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017aec:	7dfb      	ldrb	r3, [r7, #23]
 8017aee:	005b      	lsls	r3, r3, #1
 8017af0:	3301      	adds	r3, #1
 8017af2:	68ba      	ldr	r2, [r7, #8]
 8017af4:	4413      	add	r3, r2
 8017af6:	2200      	movs	r2, #0
 8017af8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017afa:	7dfb      	ldrb	r3, [r7, #23]
 8017afc:	3301      	adds	r3, #1
 8017afe:	75fb      	strb	r3, [r7, #23]
 8017b00:	7dfa      	ldrb	r2, [r7, #23]
 8017b02:	79fb      	ldrb	r3, [r7, #7]
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d3d3      	bcc.n	8017ab0 <IntToUnicode+0x18>
  }
}
 8017b08:	bf00      	nop
 8017b0a:	bf00      	nop
 8017b0c:	371c      	adds	r7, #28
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b14:	4770      	bx	lr
	...

08017b18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b0ba      	sub	sp, #232	@ 0xe8
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017b24:	2200      	movs	r2, #0
 8017b26:	601a      	str	r2, [r3, #0]
 8017b28:	605a      	str	r2, [r3, #4]
 8017b2a:	609a      	str	r2, [r3, #8]
 8017b2c:	60da      	str	r2, [r3, #12]
 8017b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017b30:	f107 0310 	add.w	r3, r7, #16
 8017b34:	22c0      	movs	r2, #192	@ 0xc0
 8017b36:	2100      	movs	r1, #0
 8017b38:	4618      	mov	r0, r3
 8017b3a:	f000 fbfd 	bl	8018338 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	4a2c      	ldr	r2, [pc, #176]	@ (8017bf4 <HAL_PCD_MspInit+0xdc>)
 8017b44:	4293      	cmp	r3, r2
 8017b46:	d151      	bne.n	8017bec <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017b48:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017b4c:	f04f 0300 	mov.w	r3, #0
 8017b50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8017b54:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017b5c:	f107 0310 	add.w	r3, r7, #16
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7f6 fc6d 	bl	800e440 <HAL_RCCEx_PeriphCLKConfig>
 8017b66:	4603      	mov	r3, r0
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d001      	beq.n	8017b70 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017b6c:	f7e9 fd5c 	bl	8001628 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017b70:	f7f5 fc70 	bl	800d454 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b74:	4b20      	ldr	r3, [pc, #128]	@ (8017bf8 <HAL_PCD_MspInit+0xe0>)
 8017b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8017bf8 <HAL_PCD_MspInit+0xe0>)
 8017b7c:	f043 0301 	orr.w	r3, r3, #1
 8017b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017b84:	4b1c      	ldr	r3, [pc, #112]	@ (8017bf8 <HAL_PCD_MspInit+0xe0>)
 8017b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017b8a:	f003 0301 	and.w	r3, r3, #1
 8017b8e:	60fb      	str	r3, [r7, #12]
 8017b90:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017b92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b9a:	2302      	movs	r3, #2
 8017b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017bac:	230a      	movs	r3, #10
 8017bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017bb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017bb6:	4619      	mov	r1, r3
 8017bb8:	4810      	ldr	r0, [pc, #64]	@ (8017bfc <HAL_PCD_MspInit+0xe4>)
 8017bba:	f7ef f8bd 	bl	8006d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8017bf8 <HAL_PCD_MspInit+0xe0>)
 8017bc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8017bf8 <HAL_PCD_MspInit+0xe0>)
 8017bc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017bca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017bce:	4b0a      	ldr	r3, [pc, #40]	@ (8017bf8 <HAL_PCD_MspInit+0xe0>)
 8017bd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017bd8:	60bb      	str	r3, [r7, #8]
 8017bda:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017bdc:	2200      	movs	r2, #0
 8017bde:	2100      	movs	r1, #0
 8017be0:	2065      	movs	r0, #101	@ 0x65
 8017be2:	f7ec f9a6 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017be6:	2065      	movs	r0, #101	@ 0x65
 8017be8:	f7ec f9bd 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017bec:	bf00      	nop
 8017bee:	37e8      	adds	r7, #232	@ 0xe8
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	bd80      	pop	{r7, pc}
 8017bf4:	40080000 	.word	0x40080000
 8017bf8:	58024400 	.word	0x58024400
 8017bfc:	58020000 	.word	0x58020000

08017c00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b082      	sub	sp, #8
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017c14:	4619      	mov	r1, r3
 8017c16:	4610      	mov	r0, r2
 8017c18:	f7fe fae3 	bl	80161e2 <USBD_LL_SetupStage>
}
 8017c1c:	bf00      	nop
 8017c1e:	3708      	adds	r7, #8
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bd80      	pop	{r7, pc}

08017c24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b082      	sub	sp, #8
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
 8017c2c:	460b      	mov	r3, r1
 8017c2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017c36:	78fa      	ldrb	r2, [r7, #3]
 8017c38:	6879      	ldr	r1, [r7, #4]
 8017c3a:	4613      	mov	r3, r2
 8017c3c:	00db      	lsls	r3, r3, #3
 8017c3e:	4413      	add	r3, r2
 8017c40:	009b      	lsls	r3, r3, #2
 8017c42:	440b      	add	r3, r1
 8017c44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017c48:	681a      	ldr	r2, [r3, #0]
 8017c4a:	78fb      	ldrb	r3, [r7, #3]
 8017c4c:	4619      	mov	r1, r3
 8017c4e:	f7fe fb1d 	bl	801628c <USBD_LL_DataOutStage>
}
 8017c52:	bf00      	nop
 8017c54:	3708      	adds	r7, #8
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd80      	pop	{r7, pc}

08017c5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c5a:	b580      	push	{r7, lr}
 8017c5c:	b082      	sub	sp, #8
 8017c5e:	af00      	add	r7, sp, #0
 8017c60:	6078      	str	r0, [r7, #4]
 8017c62:	460b      	mov	r3, r1
 8017c64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017c6c:	78fa      	ldrb	r2, [r7, #3]
 8017c6e:	6879      	ldr	r1, [r7, #4]
 8017c70:	4613      	mov	r3, r2
 8017c72:	00db      	lsls	r3, r3, #3
 8017c74:	4413      	add	r3, r2
 8017c76:	009b      	lsls	r3, r3, #2
 8017c78:	440b      	add	r3, r1
 8017c7a:	3320      	adds	r3, #32
 8017c7c:	681a      	ldr	r2, [r3, #0]
 8017c7e:	78fb      	ldrb	r3, [r7, #3]
 8017c80:	4619      	mov	r1, r3
 8017c82:	f7fe fbb6 	bl	80163f2 <USBD_LL_DataInStage>
}
 8017c86:	bf00      	nop
 8017c88:	3708      	adds	r7, #8
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	bd80      	pop	{r7, pc}

08017c8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c8e:	b580      	push	{r7, lr}
 8017c90:	b082      	sub	sp, #8
 8017c92:	af00      	add	r7, sp, #0
 8017c94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f7fe fcf0 	bl	8016682 <USBD_LL_SOF>
}
 8017ca2:	bf00      	nop
 8017ca4:	3708      	adds	r7, #8
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}

08017caa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017caa:	b580      	push	{r7, lr}
 8017cac:	b084      	sub	sp, #16
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017cb2:	2301      	movs	r3, #1
 8017cb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	79db      	ldrb	r3, [r3, #7]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d102      	bne.n	8017cc4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	73fb      	strb	r3, [r7, #15]
 8017cc2:	e008      	b.n	8017cd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	79db      	ldrb	r3, [r3, #7]
 8017cc8:	2b02      	cmp	r3, #2
 8017cca:	d102      	bne.n	8017cd2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017ccc:	2301      	movs	r3, #1
 8017cce:	73fb      	strb	r3, [r7, #15]
 8017cd0:	e001      	b.n	8017cd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017cd2:	f7e9 fca9 	bl	8001628 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017cdc:	7bfa      	ldrb	r2, [r7, #15]
 8017cde:	4611      	mov	r1, r2
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7fe fc8a 	bl	80165fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017cec:	4618      	mov	r0, r3
 8017cee:	f7fe fc32 	bl	8016556 <USBD_LL_Reset>
}
 8017cf2:	bf00      	nop
 8017cf4:	3710      	adds	r7, #16
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}
	...

08017cfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	f7fe fc85 	bl	801661a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	687a      	ldr	r2, [r7, #4]
 8017d1c:	6812      	ldr	r2, [r2, #0]
 8017d1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017d22:	f043 0301 	orr.w	r3, r3, #1
 8017d26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	7adb      	ldrb	r3, [r3, #11]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d005      	beq.n	8017d3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017d30:	4b04      	ldr	r3, [pc, #16]	@ (8017d44 <HAL_PCD_SuspendCallback+0x48>)
 8017d32:	691b      	ldr	r3, [r3, #16]
 8017d34:	4a03      	ldr	r2, [pc, #12]	@ (8017d44 <HAL_PCD_SuspendCallback+0x48>)
 8017d36:	f043 0306 	orr.w	r3, r3, #6
 8017d3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017d3c:	bf00      	nop
 8017d3e:	3708      	adds	r7, #8
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}
 8017d44:	e000ed00 	.word	0xe000ed00

08017d48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b082      	sub	sp, #8
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d56:	4618      	mov	r0, r3
 8017d58:	f7fe fc7b 	bl	8016652 <USBD_LL_Resume>
}
 8017d5c:	bf00      	nop
 8017d5e:	3708      	adds	r7, #8
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}

08017d64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b082      	sub	sp, #8
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
 8017d6c:	460b      	mov	r3, r1
 8017d6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d76:	78fa      	ldrb	r2, [r7, #3]
 8017d78:	4611      	mov	r1, r2
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f7fe fcd3 	bl	8016726 <USBD_LL_IsoOUTIncomplete>
}
 8017d80:	bf00      	nop
 8017d82:	3708      	adds	r7, #8
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b082      	sub	sp, #8
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	460b      	mov	r3, r1
 8017d92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d9a:	78fa      	ldrb	r2, [r7, #3]
 8017d9c:	4611      	mov	r1, r2
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7fe fc8f 	bl	80166c2 <USBD_LL_IsoINIncomplete>
}
 8017da4:	bf00      	nop
 8017da6:	3708      	adds	r7, #8
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bd80      	pop	{r7, pc}

08017dac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b082      	sub	sp, #8
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f7fe fce5 	bl	801678a <USBD_LL_DevConnected>
}
 8017dc0:	bf00      	nop
 8017dc2:	3708      	adds	r7, #8
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	bd80      	pop	{r7, pc}

08017dc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b082      	sub	sp, #8
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7fe fce2 	bl	80167a0 <USBD_LL_DevDisconnected>
}
 8017ddc:	bf00      	nop
 8017dde:	3708      	adds	r7, #8
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}

08017de4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b082      	sub	sp, #8
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	781b      	ldrb	r3, [r3, #0]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d13e      	bne.n	8017e72 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017df4:	4a21      	ldr	r2, [pc, #132]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e00:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017e04:	4b1d      	ldr	r3, [pc, #116]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e06:	4a1e      	ldr	r2, [pc, #120]	@ (8017e80 <USBD_LL_Init+0x9c>)
 8017e08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8017e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e0c:	2209      	movs	r2, #9
 8017e0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017e10:	4b1a      	ldr	r3, [pc, #104]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e12:	2202      	movs	r2, #2
 8017e14:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017e16:	4b19      	ldr	r3, [pc, #100]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e18:	2200      	movs	r2, #0
 8017e1a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017e1c:	4b17      	ldr	r3, [pc, #92]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e1e:	2202      	movs	r2, #2
 8017e20:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017e22:	4b16      	ldr	r3, [pc, #88]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e24:	2200      	movs	r2, #0
 8017e26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017e28:	4b14      	ldr	r3, [pc, #80]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017e2e:	4b13      	ldr	r3, [pc, #76]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e30:	2200      	movs	r2, #0
 8017e32:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8017e34:	4b11      	ldr	r3, [pc, #68]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e36:	2200      	movs	r2, #0
 8017e38:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017e3a:	4b10      	ldr	r3, [pc, #64]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017e40:	4b0e      	ldr	r3, [pc, #56]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e42:	2200      	movs	r2, #0
 8017e44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017e46:	480d      	ldr	r0, [pc, #52]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e48:	f7f4 f82a 	bl	800bea0 <HAL_PCD_Init>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d001      	beq.n	8017e56 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017e52:	f7e9 fbe9 	bl	8001628 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017e56:	2180      	movs	r1, #128	@ 0x80
 8017e58:	4808      	ldr	r0, [pc, #32]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e5a:	f7f5 fa80 	bl	800d35e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017e5e:	2240      	movs	r2, #64	@ 0x40
 8017e60:	2100      	movs	r1, #0
 8017e62:	4806      	ldr	r0, [pc, #24]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e64:	f7f5 fa34 	bl	800d2d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017e68:	2280      	movs	r2, #128	@ 0x80
 8017e6a:	2101      	movs	r1, #1
 8017e6c:	4803      	ldr	r0, [pc, #12]	@ (8017e7c <USBD_LL_Init+0x98>)
 8017e6e:	f7f5 fa2f 	bl	800d2d0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8017e72:	2300      	movs	r3, #0
}
 8017e74:	4618      	mov	r0, r3
 8017e76:	3708      	adds	r7, #8
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}
 8017e7c:	2402a80c 	.word	0x2402a80c
 8017e80:	40080000 	.word	0x40080000

08017e84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b084      	sub	sp, #16
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e90:	2300      	movs	r3, #0
 8017e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7f4 f90c 	bl	800c0b8 <HAL_PCD_Start>
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ea4:	7bfb      	ldrb	r3, [r7, #15]
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f000 f942 	bl	8018130 <USBD_Get_USB_Status>
 8017eac:	4603      	mov	r3, r0
 8017eae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	3710      	adds	r7, #16
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	bd80      	pop	{r7, pc}

08017eba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017eba:	b580      	push	{r7, lr}
 8017ebc:	b084      	sub	sp, #16
 8017ebe:	af00      	add	r7, sp, #0
 8017ec0:	6078      	str	r0, [r7, #4]
 8017ec2:	4608      	mov	r0, r1
 8017ec4:	4611      	mov	r1, r2
 8017ec6:	461a      	mov	r2, r3
 8017ec8:	4603      	mov	r3, r0
 8017eca:	70fb      	strb	r3, [r7, #3]
 8017ecc:	460b      	mov	r3, r1
 8017ece:	70bb      	strb	r3, [r7, #2]
 8017ed0:	4613      	mov	r3, r2
 8017ed2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ed8:	2300      	movs	r3, #0
 8017eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017ee2:	78bb      	ldrb	r3, [r7, #2]
 8017ee4:	883a      	ldrh	r2, [r7, #0]
 8017ee6:	78f9      	ldrb	r1, [r7, #3]
 8017ee8:	f7f4 fe0d 	bl	800cb06 <HAL_PCD_EP_Open>
 8017eec:	4603      	mov	r3, r0
 8017eee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ef0:	7bfb      	ldrb	r3, [r7, #15]
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	f000 f91c 	bl	8018130 <USBD_Get_USB_Status>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017efe:	4618      	mov	r0, r3
 8017f00:	3710      	adds	r7, #16
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd80      	pop	{r7, pc}

08017f06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f06:	b580      	push	{r7, lr}
 8017f08:	b084      	sub	sp, #16
 8017f0a:	af00      	add	r7, sp, #0
 8017f0c:	6078      	str	r0, [r7, #4]
 8017f0e:	460b      	mov	r3, r1
 8017f10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f12:	2300      	movs	r3, #0
 8017f14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f16:	2300      	movs	r3, #0
 8017f18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f20:	78fa      	ldrb	r2, [r7, #3]
 8017f22:	4611      	mov	r1, r2
 8017f24:	4618      	mov	r0, r3
 8017f26:	f7f4 fe58 	bl	800cbda <HAL_PCD_EP_Close>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f2e:	7bfb      	ldrb	r3, [r7, #15]
 8017f30:	4618      	mov	r0, r3
 8017f32:	f000 f8fd 	bl	8018130 <USBD_Get_USB_Status>
 8017f36:	4603      	mov	r3, r0
 8017f38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	3710      	adds	r7, #16
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}

08017f44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b084      	sub	sp, #16
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
 8017f4c:	460b      	mov	r3, r1
 8017f4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f50:	2300      	movs	r3, #0
 8017f52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f54:	2300      	movs	r3, #0
 8017f56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f5e:	78fa      	ldrb	r2, [r7, #3]
 8017f60:	4611      	mov	r1, r2
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7f4 ff10 	bl	800cd88 <HAL_PCD_EP_SetStall>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f6c:	7bfb      	ldrb	r3, [r7, #15]
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f000 f8de 	bl	8018130 <USBD_Get_USB_Status>
 8017f74:	4603      	mov	r3, r0
 8017f76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f78:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	3710      	adds	r7, #16
 8017f7e:	46bd      	mov	sp, r7
 8017f80:	bd80      	pop	{r7, pc}

08017f82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f82:	b580      	push	{r7, lr}
 8017f84:	b084      	sub	sp, #16
 8017f86:	af00      	add	r7, sp, #0
 8017f88:	6078      	str	r0, [r7, #4]
 8017f8a:	460b      	mov	r3, r1
 8017f8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f92:	2300      	movs	r3, #0
 8017f94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f9c:	78fa      	ldrb	r2, [r7, #3]
 8017f9e:	4611      	mov	r1, r2
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7f4 ff54 	bl	800ce4e <HAL_PCD_EP_ClrStall>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017faa:	7bfb      	ldrb	r3, [r7, #15]
 8017fac:	4618      	mov	r0, r3
 8017fae:	f000 f8bf 	bl	8018130 <USBD_Get_USB_Status>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017fb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8017fb8:	4618      	mov	r0, r3
 8017fba:	3710      	adds	r7, #16
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bd80      	pop	{r7, pc}

08017fc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017fc0:	b480      	push	{r7}
 8017fc2:	b085      	sub	sp, #20
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
 8017fc8:	460b      	mov	r3, r1
 8017fca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017fd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	da0b      	bge.n	8017ff4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017fdc:	78fb      	ldrb	r3, [r7, #3]
 8017fde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017fe2:	68f9      	ldr	r1, [r7, #12]
 8017fe4:	4613      	mov	r3, r2
 8017fe6:	00db      	lsls	r3, r3, #3
 8017fe8:	4413      	add	r3, r2
 8017fea:	009b      	lsls	r3, r3, #2
 8017fec:	440b      	add	r3, r1
 8017fee:	3316      	adds	r3, #22
 8017ff0:	781b      	ldrb	r3, [r3, #0]
 8017ff2:	e00b      	b.n	801800c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017ff4:	78fb      	ldrb	r3, [r7, #3]
 8017ff6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017ffa:	68f9      	ldr	r1, [r7, #12]
 8017ffc:	4613      	mov	r3, r2
 8017ffe:	00db      	lsls	r3, r3, #3
 8018000:	4413      	add	r3, r2
 8018002:	009b      	lsls	r3, r3, #2
 8018004:	440b      	add	r3, r1
 8018006:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801800a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801800c:	4618      	mov	r0, r3
 801800e:	3714      	adds	r7, #20
 8018010:	46bd      	mov	sp, r7
 8018012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018016:	4770      	bx	lr

08018018 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b084      	sub	sp, #16
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	460b      	mov	r3, r1
 8018022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018024:	2300      	movs	r3, #0
 8018026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018028:	2300      	movs	r3, #0
 801802a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018032:	78fa      	ldrb	r2, [r7, #3]
 8018034:	4611      	mov	r1, r2
 8018036:	4618      	mov	r0, r3
 8018038:	f7f4 fd41 	bl	800cabe <HAL_PCD_SetAddress>
 801803c:	4603      	mov	r3, r0
 801803e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018040:	7bfb      	ldrb	r3, [r7, #15]
 8018042:	4618      	mov	r0, r3
 8018044:	f000 f874 	bl	8018130 <USBD_Get_USB_Status>
 8018048:	4603      	mov	r3, r0
 801804a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801804c:	7bbb      	ldrb	r3, [r7, #14]
}
 801804e:	4618      	mov	r0, r3
 8018050:	3710      	adds	r7, #16
 8018052:	46bd      	mov	sp, r7
 8018054:	bd80      	pop	{r7, pc}

08018056 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018056:	b580      	push	{r7, lr}
 8018058:	b086      	sub	sp, #24
 801805a:	af00      	add	r7, sp, #0
 801805c:	60f8      	str	r0, [r7, #12]
 801805e:	607a      	str	r2, [r7, #4]
 8018060:	603b      	str	r3, [r7, #0]
 8018062:	460b      	mov	r3, r1
 8018064:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018066:	2300      	movs	r3, #0
 8018068:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801806a:	2300      	movs	r3, #0
 801806c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018074:	7af9      	ldrb	r1, [r7, #11]
 8018076:	683b      	ldr	r3, [r7, #0]
 8018078:	687a      	ldr	r2, [r7, #4]
 801807a:	f7f4 fe4b 	bl	800cd14 <HAL_PCD_EP_Transmit>
 801807e:	4603      	mov	r3, r0
 8018080:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018082:	7dfb      	ldrb	r3, [r7, #23]
 8018084:	4618      	mov	r0, r3
 8018086:	f000 f853 	bl	8018130 <USBD_Get_USB_Status>
 801808a:	4603      	mov	r3, r0
 801808c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801808e:	7dbb      	ldrb	r3, [r7, #22]
}
 8018090:	4618      	mov	r0, r3
 8018092:	3718      	adds	r7, #24
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}

08018098 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b086      	sub	sp, #24
 801809c:	af00      	add	r7, sp, #0
 801809e:	60f8      	str	r0, [r7, #12]
 80180a0:	607a      	str	r2, [r7, #4]
 80180a2:	603b      	str	r3, [r7, #0]
 80180a4:	460b      	mov	r3, r1
 80180a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180a8:	2300      	movs	r3, #0
 80180aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180ac:	2300      	movs	r3, #0
 80180ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80180b6:	7af9      	ldrb	r1, [r7, #11]
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	687a      	ldr	r2, [r7, #4]
 80180bc:	f7f4 fdd7 	bl	800cc6e <HAL_PCD_EP_Receive>
 80180c0:	4603      	mov	r3, r0
 80180c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180c4:	7dfb      	ldrb	r3, [r7, #23]
 80180c6:	4618      	mov	r0, r3
 80180c8:	f000 f832 	bl	8018130 <USBD_Get_USB_Status>
 80180cc:	4603      	mov	r3, r0
 80180ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80180d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80180d2:	4618      	mov	r0, r3
 80180d4:	3718      	adds	r7, #24
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bd80      	pop	{r7, pc}

080180da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80180da:	b580      	push	{r7, lr}
 80180dc:	b082      	sub	sp, #8
 80180de:	af00      	add	r7, sp, #0
 80180e0:	6078      	str	r0, [r7, #4]
 80180e2:	460b      	mov	r3, r1
 80180e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80180ec:	78fa      	ldrb	r2, [r7, #3]
 80180ee:	4611      	mov	r1, r2
 80180f0:	4618      	mov	r0, r3
 80180f2:	f7f4 fdf7 	bl	800cce4 <HAL_PCD_EP_GetRxCount>
 80180f6:	4603      	mov	r3, r0
}
 80180f8:	4618      	mov	r0, r3
 80180fa:	3708      	adds	r7, #8
 80180fc:	46bd      	mov	sp, r7
 80180fe:	bd80      	pop	{r7, pc}

08018100 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018100:	b480      	push	{r7}
 8018102:	b083      	sub	sp, #12
 8018104:	af00      	add	r7, sp, #0
 8018106:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018108:	4b03      	ldr	r3, [pc, #12]	@ (8018118 <USBD_static_malloc+0x18>)
}
 801810a:	4618      	mov	r0, r3
 801810c:	370c      	adds	r7, #12
 801810e:	46bd      	mov	sp, r7
 8018110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018114:	4770      	bx	lr
 8018116:	bf00      	nop
 8018118:	2402acf0 	.word	0x2402acf0

0801811c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801811c:	b480      	push	{r7}
 801811e:	b083      	sub	sp, #12
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8018124:	bf00      	nop
 8018126:	370c      	adds	r7, #12
 8018128:	46bd      	mov	sp, r7
 801812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812e:	4770      	bx	lr

08018130 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018130:	b480      	push	{r7}
 8018132:	b085      	sub	sp, #20
 8018134:	af00      	add	r7, sp, #0
 8018136:	4603      	mov	r3, r0
 8018138:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801813a:	2300      	movs	r3, #0
 801813c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801813e:	79fb      	ldrb	r3, [r7, #7]
 8018140:	2b03      	cmp	r3, #3
 8018142:	d817      	bhi.n	8018174 <USBD_Get_USB_Status+0x44>
 8018144:	a201      	add	r2, pc, #4	@ (adr r2, 801814c <USBD_Get_USB_Status+0x1c>)
 8018146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801814a:	bf00      	nop
 801814c:	0801815d 	.word	0x0801815d
 8018150:	08018163 	.word	0x08018163
 8018154:	08018169 	.word	0x08018169
 8018158:	0801816f 	.word	0x0801816f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801815c:	2300      	movs	r3, #0
 801815e:	73fb      	strb	r3, [r7, #15]
    break;
 8018160:	e00b      	b.n	801817a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018162:	2303      	movs	r3, #3
 8018164:	73fb      	strb	r3, [r7, #15]
    break;
 8018166:	e008      	b.n	801817a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018168:	2301      	movs	r3, #1
 801816a:	73fb      	strb	r3, [r7, #15]
    break;
 801816c:	e005      	b.n	801817a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801816e:	2303      	movs	r3, #3
 8018170:	73fb      	strb	r3, [r7, #15]
    break;
 8018172:	e002      	b.n	801817a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018174:	2303      	movs	r3, #3
 8018176:	73fb      	strb	r3, [r7, #15]
    break;
 8018178:	bf00      	nop
  }
  return usb_status;
 801817a:	7bfb      	ldrb	r3, [r7, #15]
}
 801817c:	4618      	mov	r0, r3
 801817e:	3714      	adds	r7, #20
 8018180:	46bd      	mov	sp, r7
 8018182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018186:	4770      	bx	lr

08018188 <malloc>:
 8018188:	4b02      	ldr	r3, [pc, #8]	@ (8018194 <malloc+0xc>)
 801818a:	4601      	mov	r1, r0
 801818c:	6818      	ldr	r0, [r3, #0]
 801818e:	f000 b825 	b.w	80181dc <_malloc_r>
 8018192:	bf00      	nop
 8018194:	24000318 	.word	0x24000318

08018198 <sbrk_aligned>:
 8018198:	b570      	push	{r4, r5, r6, lr}
 801819a:	4e0f      	ldr	r6, [pc, #60]	@ (80181d8 <sbrk_aligned+0x40>)
 801819c:	460c      	mov	r4, r1
 801819e:	6831      	ldr	r1, [r6, #0]
 80181a0:	4605      	mov	r5, r0
 80181a2:	b911      	cbnz	r1, 80181aa <sbrk_aligned+0x12>
 80181a4:	f000 f8d0 	bl	8018348 <_sbrk_r>
 80181a8:	6030      	str	r0, [r6, #0]
 80181aa:	4621      	mov	r1, r4
 80181ac:	4628      	mov	r0, r5
 80181ae:	f000 f8cb 	bl	8018348 <_sbrk_r>
 80181b2:	1c43      	adds	r3, r0, #1
 80181b4:	d103      	bne.n	80181be <sbrk_aligned+0x26>
 80181b6:	f04f 34ff 	mov.w	r4, #4294967295
 80181ba:	4620      	mov	r0, r4
 80181bc:	bd70      	pop	{r4, r5, r6, pc}
 80181be:	1cc4      	adds	r4, r0, #3
 80181c0:	f024 0403 	bic.w	r4, r4, #3
 80181c4:	42a0      	cmp	r0, r4
 80181c6:	d0f8      	beq.n	80181ba <sbrk_aligned+0x22>
 80181c8:	1a21      	subs	r1, r4, r0
 80181ca:	4628      	mov	r0, r5
 80181cc:	f000 f8bc 	bl	8018348 <_sbrk_r>
 80181d0:	3001      	adds	r0, #1
 80181d2:	d1f2      	bne.n	80181ba <sbrk_aligned+0x22>
 80181d4:	e7ef      	b.n	80181b6 <sbrk_aligned+0x1e>
 80181d6:	bf00      	nop
 80181d8:	2402af10 	.word	0x2402af10

080181dc <_malloc_r>:
 80181dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181e0:	1ccd      	adds	r5, r1, #3
 80181e2:	f025 0503 	bic.w	r5, r5, #3
 80181e6:	3508      	adds	r5, #8
 80181e8:	2d0c      	cmp	r5, #12
 80181ea:	bf38      	it	cc
 80181ec:	250c      	movcc	r5, #12
 80181ee:	2d00      	cmp	r5, #0
 80181f0:	4606      	mov	r6, r0
 80181f2:	db01      	blt.n	80181f8 <_malloc_r+0x1c>
 80181f4:	42a9      	cmp	r1, r5
 80181f6:	d904      	bls.n	8018202 <_malloc_r+0x26>
 80181f8:	230c      	movs	r3, #12
 80181fa:	6033      	str	r3, [r6, #0]
 80181fc:	2000      	movs	r0, #0
 80181fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80182d8 <_malloc_r+0xfc>
 8018206:	f000 f869 	bl	80182dc <__malloc_lock>
 801820a:	f8d8 3000 	ldr.w	r3, [r8]
 801820e:	461c      	mov	r4, r3
 8018210:	bb44      	cbnz	r4, 8018264 <_malloc_r+0x88>
 8018212:	4629      	mov	r1, r5
 8018214:	4630      	mov	r0, r6
 8018216:	f7ff ffbf 	bl	8018198 <sbrk_aligned>
 801821a:	1c43      	adds	r3, r0, #1
 801821c:	4604      	mov	r4, r0
 801821e:	d158      	bne.n	80182d2 <_malloc_r+0xf6>
 8018220:	f8d8 4000 	ldr.w	r4, [r8]
 8018224:	4627      	mov	r7, r4
 8018226:	2f00      	cmp	r7, #0
 8018228:	d143      	bne.n	80182b2 <_malloc_r+0xd6>
 801822a:	2c00      	cmp	r4, #0
 801822c:	d04b      	beq.n	80182c6 <_malloc_r+0xea>
 801822e:	6823      	ldr	r3, [r4, #0]
 8018230:	4639      	mov	r1, r7
 8018232:	4630      	mov	r0, r6
 8018234:	eb04 0903 	add.w	r9, r4, r3
 8018238:	f000 f886 	bl	8018348 <_sbrk_r>
 801823c:	4581      	cmp	r9, r0
 801823e:	d142      	bne.n	80182c6 <_malloc_r+0xea>
 8018240:	6821      	ldr	r1, [r4, #0]
 8018242:	1a6d      	subs	r5, r5, r1
 8018244:	4629      	mov	r1, r5
 8018246:	4630      	mov	r0, r6
 8018248:	f7ff ffa6 	bl	8018198 <sbrk_aligned>
 801824c:	3001      	adds	r0, #1
 801824e:	d03a      	beq.n	80182c6 <_malloc_r+0xea>
 8018250:	6823      	ldr	r3, [r4, #0]
 8018252:	442b      	add	r3, r5
 8018254:	6023      	str	r3, [r4, #0]
 8018256:	f8d8 3000 	ldr.w	r3, [r8]
 801825a:	685a      	ldr	r2, [r3, #4]
 801825c:	bb62      	cbnz	r2, 80182b8 <_malloc_r+0xdc>
 801825e:	f8c8 7000 	str.w	r7, [r8]
 8018262:	e00f      	b.n	8018284 <_malloc_r+0xa8>
 8018264:	6822      	ldr	r2, [r4, #0]
 8018266:	1b52      	subs	r2, r2, r5
 8018268:	d420      	bmi.n	80182ac <_malloc_r+0xd0>
 801826a:	2a0b      	cmp	r2, #11
 801826c:	d917      	bls.n	801829e <_malloc_r+0xc2>
 801826e:	1961      	adds	r1, r4, r5
 8018270:	42a3      	cmp	r3, r4
 8018272:	6025      	str	r5, [r4, #0]
 8018274:	bf18      	it	ne
 8018276:	6059      	strne	r1, [r3, #4]
 8018278:	6863      	ldr	r3, [r4, #4]
 801827a:	bf08      	it	eq
 801827c:	f8c8 1000 	streq.w	r1, [r8]
 8018280:	5162      	str	r2, [r4, r5]
 8018282:	604b      	str	r3, [r1, #4]
 8018284:	4630      	mov	r0, r6
 8018286:	f000 f82f 	bl	80182e8 <__malloc_unlock>
 801828a:	f104 000b 	add.w	r0, r4, #11
 801828e:	1d23      	adds	r3, r4, #4
 8018290:	f020 0007 	bic.w	r0, r0, #7
 8018294:	1ac2      	subs	r2, r0, r3
 8018296:	bf1c      	itt	ne
 8018298:	1a1b      	subne	r3, r3, r0
 801829a:	50a3      	strne	r3, [r4, r2]
 801829c:	e7af      	b.n	80181fe <_malloc_r+0x22>
 801829e:	6862      	ldr	r2, [r4, #4]
 80182a0:	42a3      	cmp	r3, r4
 80182a2:	bf0c      	ite	eq
 80182a4:	f8c8 2000 	streq.w	r2, [r8]
 80182a8:	605a      	strne	r2, [r3, #4]
 80182aa:	e7eb      	b.n	8018284 <_malloc_r+0xa8>
 80182ac:	4623      	mov	r3, r4
 80182ae:	6864      	ldr	r4, [r4, #4]
 80182b0:	e7ae      	b.n	8018210 <_malloc_r+0x34>
 80182b2:	463c      	mov	r4, r7
 80182b4:	687f      	ldr	r7, [r7, #4]
 80182b6:	e7b6      	b.n	8018226 <_malloc_r+0x4a>
 80182b8:	461a      	mov	r2, r3
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	42a3      	cmp	r3, r4
 80182be:	d1fb      	bne.n	80182b8 <_malloc_r+0xdc>
 80182c0:	2300      	movs	r3, #0
 80182c2:	6053      	str	r3, [r2, #4]
 80182c4:	e7de      	b.n	8018284 <_malloc_r+0xa8>
 80182c6:	230c      	movs	r3, #12
 80182c8:	6033      	str	r3, [r6, #0]
 80182ca:	4630      	mov	r0, r6
 80182cc:	f000 f80c 	bl	80182e8 <__malloc_unlock>
 80182d0:	e794      	b.n	80181fc <_malloc_r+0x20>
 80182d2:	6005      	str	r5, [r0, #0]
 80182d4:	e7d6      	b.n	8018284 <_malloc_r+0xa8>
 80182d6:	bf00      	nop
 80182d8:	2402af14 	.word	0x2402af14

080182dc <__malloc_lock>:
 80182dc:	4801      	ldr	r0, [pc, #4]	@ (80182e4 <__malloc_lock+0x8>)
 80182de:	f000 b86d 	b.w	80183bc <__retarget_lock_acquire_recursive>
 80182e2:	bf00      	nop
 80182e4:	2402b054 	.word	0x2402b054

080182e8 <__malloc_unlock>:
 80182e8:	4801      	ldr	r0, [pc, #4]	@ (80182f0 <__malloc_unlock+0x8>)
 80182ea:	f000 b868 	b.w	80183be <__retarget_lock_release_recursive>
 80182ee:	bf00      	nop
 80182f0:	2402b054 	.word	0x2402b054

080182f4 <siprintf>:
 80182f4:	b40e      	push	{r1, r2, r3}
 80182f6:	b510      	push	{r4, lr}
 80182f8:	b09d      	sub	sp, #116	@ 0x74
 80182fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80182fc:	9002      	str	r0, [sp, #8]
 80182fe:	9006      	str	r0, [sp, #24]
 8018300:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018304:	480a      	ldr	r0, [pc, #40]	@ (8018330 <siprintf+0x3c>)
 8018306:	9107      	str	r1, [sp, #28]
 8018308:	9104      	str	r1, [sp, #16]
 801830a:	490a      	ldr	r1, [pc, #40]	@ (8018334 <siprintf+0x40>)
 801830c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018310:	9105      	str	r1, [sp, #20]
 8018312:	2400      	movs	r4, #0
 8018314:	a902      	add	r1, sp, #8
 8018316:	6800      	ldr	r0, [r0, #0]
 8018318:	9301      	str	r3, [sp, #4]
 801831a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801831c:	f000 f904 	bl	8018528 <_svfiprintf_r>
 8018320:	9b02      	ldr	r3, [sp, #8]
 8018322:	701c      	strb	r4, [r3, #0]
 8018324:	b01d      	add	sp, #116	@ 0x74
 8018326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801832a:	b003      	add	sp, #12
 801832c:	4770      	bx	lr
 801832e:	bf00      	nop
 8018330:	24000318 	.word	0x24000318
 8018334:	ffff0208 	.word	0xffff0208

08018338 <memset>:
 8018338:	4402      	add	r2, r0
 801833a:	4603      	mov	r3, r0
 801833c:	4293      	cmp	r3, r2
 801833e:	d100      	bne.n	8018342 <memset+0xa>
 8018340:	4770      	bx	lr
 8018342:	f803 1b01 	strb.w	r1, [r3], #1
 8018346:	e7f9      	b.n	801833c <memset+0x4>

08018348 <_sbrk_r>:
 8018348:	b538      	push	{r3, r4, r5, lr}
 801834a:	4d06      	ldr	r5, [pc, #24]	@ (8018364 <_sbrk_r+0x1c>)
 801834c:	2300      	movs	r3, #0
 801834e:	4604      	mov	r4, r0
 8018350:	4608      	mov	r0, r1
 8018352:	602b      	str	r3, [r5, #0]
 8018354:	f7e9 fdde 	bl	8001f14 <_sbrk>
 8018358:	1c43      	adds	r3, r0, #1
 801835a:	d102      	bne.n	8018362 <_sbrk_r+0x1a>
 801835c:	682b      	ldr	r3, [r5, #0]
 801835e:	b103      	cbz	r3, 8018362 <_sbrk_r+0x1a>
 8018360:	6023      	str	r3, [r4, #0]
 8018362:	bd38      	pop	{r3, r4, r5, pc}
 8018364:	2402b050 	.word	0x2402b050

08018368 <__errno>:
 8018368:	4b01      	ldr	r3, [pc, #4]	@ (8018370 <__errno+0x8>)
 801836a:	6818      	ldr	r0, [r3, #0]
 801836c:	4770      	bx	lr
 801836e:	bf00      	nop
 8018370:	24000318 	.word	0x24000318

08018374 <__libc_init_array>:
 8018374:	b570      	push	{r4, r5, r6, lr}
 8018376:	4d0d      	ldr	r5, [pc, #52]	@ (80183ac <__libc_init_array+0x38>)
 8018378:	4c0d      	ldr	r4, [pc, #52]	@ (80183b0 <__libc_init_array+0x3c>)
 801837a:	1b64      	subs	r4, r4, r5
 801837c:	10a4      	asrs	r4, r4, #2
 801837e:	2600      	movs	r6, #0
 8018380:	42a6      	cmp	r6, r4
 8018382:	d109      	bne.n	8018398 <__libc_init_array+0x24>
 8018384:	4d0b      	ldr	r5, [pc, #44]	@ (80183b4 <__libc_init_array+0x40>)
 8018386:	4c0c      	ldr	r4, [pc, #48]	@ (80183b8 <__libc_init_array+0x44>)
 8018388:	f000 fba6 	bl	8018ad8 <_init>
 801838c:	1b64      	subs	r4, r4, r5
 801838e:	10a4      	asrs	r4, r4, #2
 8018390:	2600      	movs	r6, #0
 8018392:	42a6      	cmp	r6, r4
 8018394:	d105      	bne.n	80183a2 <__libc_init_array+0x2e>
 8018396:	bd70      	pop	{r4, r5, r6, pc}
 8018398:	f855 3b04 	ldr.w	r3, [r5], #4
 801839c:	4798      	blx	r3
 801839e:	3601      	adds	r6, #1
 80183a0:	e7ee      	b.n	8018380 <__libc_init_array+0xc>
 80183a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80183a6:	4798      	blx	r3
 80183a8:	3601      	adds	r6, #1
 80183aa:	e7f2      	b.n	8018392 <__libc_init_array+0x1e>
 80183ac:	08019174 	.word	0x08019174
 80183b0:	08019174 	.word	0x08019174
 80183b4:	08019174 	.word	0x08019174
 80183b8:	08019178 	.word	0x08019178

080183bc <__retarget_lock_acquire_recursive>:
 80183bc:	4770      	bx	lr

080183be <__retarget_lock_release_recursive>:
 80183be:	4770      	bx	lr

080183c0 <memcpy>:
 80183c0:	440a      	add	r2, r1
 80183c2:	4291      	cmp	r1, r2
 80183c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80183c8:	d100      	bne.n	80183cc <memcpy+0xc>
 80183ca:	4770      	bx	lr
 80183cc:	b510      	push	{r4, lr}
 80183ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80183d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80183d6:	4291      	cmp	r1, r2
 80183d8:	d1f9      	bne.n	80183ce <memcpy+0xe>
 80183da:	bd10      	pop	{r4, pc}

080183dc <_free_r>:
 80183dc:	b538      	push	{r3, r4, r5, lr}
 80183de:	4605      	mov	r5, r0
 80183e0:	2900      	cmp	r1, #0
 80183e2:	d041      	beq.n	8018468 <_free_r+0x8c>
 80183e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183e8:	1f0c      	subs	r4, r1, #4
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	bfb8      	it	lt
 80183ee:	18e4      	addlt	r4, r4, r3
 80183f0:	f7ff ff74 	bl	80182dc <__malloc_lock>
 80183f4:	4a1d      	ldr	r2, [pc, #116]	@ (801846c <_free_r+0x90>)
 80183f6:	6813      	ldr	r3, [r2, #0]
 80183f8:	b933      	cbnz	r3, 8018408 <_free_r+0x2c>
 80183fa:	6063      	str	r3, [r4, #4]
 80183fc:	6014      	str	r4, [r2, #0]
 80183fe:	4628      	mov	r0, r5
 8018400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018404:	f7ff bf70 	b.w	80182e8 <__malloc_unlock>
 8018408:	42a3      	cmp	r3, r4
 801840a:	d908      	bls.n	801841e <_free_r+0x42>
 801840c:	6820      	ldr	r0, [r4, #0]
 801840e:	1821      	adds	r1, r4, r0
 8018410:	428b      	cmp	r3, r1
 8018412:	bf01      	itttt	eq
 8018414:	6819      	ldreq	r1, [r3, #0]
 8018416:	685b      	ldreq	r3, [r3, #4]
 8018418:	1809      	addeq	r1, r1, r0
 801841a:	6021      	streq	r1, [r4, #0]
 801841c:	e7ed      	b.n	80183fa <_free_r+0x1e>
 801841e:	461a      	mov	r2, r3
 8018420:	685b      	ldr	r3, [r3, #4]
 8018422:	b10b      	cbz	r3, 8018428 <_free_r+0x4c>
 8018424:	42a3      	cmp	r3, r4
 8018426:	d9fa      	bls.n	801841e <_free_r+0x42>
 8018428:	6811      	ldr	r1, [r2, #0]
 801842a:	1850      	adds	r0, r2, r1
 801842c:	42a0      	cmp	r0, r4
 801842e:	d10b      	bne.n	8018448 <_free_r+0x6c>
 8018430:	6820      	ldr	r0, [r4, #0]
 8018432:	4401      	add	r1, r0
 8018434:	1850      	adds	r0, r2, r1
 8018436:	4283      	cmp	r3, r0
 8018438:	6011      	str	r1, [r2, #0]
 801843a:	d1e0      	bne.n	80183fe <_free_r+0x22>
 801843c:	6818      	ldr	r0, [r3, #0]
 801843e:	685b      	ldr	r3, [r3, #4]
 8018440:	6053      	str	r3, [r2, #4]
 8018442:	4408      	add	r0, r1
 8018444:	6010      	str	r0, [r2, #0]
 8018446:	e7da      	b.n	80183fe <_free_r+0x22>
 8018448:	d902      	bls.n	8018450 <_free_r+0x74>
 801844a:	230c      	movs	r3, #12
 801844c:	602b      	str	r3, [r5, #0]
 801844e:	e7d6      	b.n	80183fe <_free_r+0x22>
 8018450:	6820      	ldr	r0, [r4, #0]
 8018452:	1821      	adds	r1, r4, r0
 8018454:	428b      	cmp	r3, r1
 8018456:	bf04      	itt	eq
 8018458:	6819      	ldreq	r1, [r3, #0]
 801845a:	685b      	ldreq	r3, [r3, #4]
 801845c:	6063      	str	r3, [r4, #4]
 801845e:	bf04      	itt	eq
 8018460:	1809      	addeq	r1, r1, r0
 8018462:	6021      	streq	r1, [r4, #0]
 8018464:	6054      	str	r4, [r2, #4]
 8018466:	e7ca      	b.n	80183fe <_free_r+0x22>
 8018468:	bd38      	pop	{r3, r4, r5, pc}
 801846a:	bf00      	nop
 801846c:	2402af14 	.word	0x2402af14

08018470 <__ssputs_r>:
 8018470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018474:	688e      	ldr	r6, [r1, #8]
 8018476:	461f      	mov	r7, r3
 8018478:	42be      	cmp	r6, r7
 801847a:	680b      	ldr	r3, [r1, #0]
 801847c:	4682      	mov	sl, r0
 801847e:	460c      	mov	r4, r1
 8018480:	4690      	mov	r8, r2
 8018482:	d82d      	bhi.n	80184e0 <__ssputs_r+0x70>
 8018484:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018488:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801848c:	d026      	beq.n	80184dc <__ssputs_r+0x6c>
 801848e:	6965      	ldr	r5, [r4, #20]
 8018490:	6909      	ldr	r1, [r1, #16]
 8018492:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018496:	eba3 0901 	sub.w	r9, r3, r1
 801849a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801849e:	1c7b      	adds	r3, r7, #1
 80184a0:	444b      	add	r3, r9
 80184a2:	106d      	asrs	r5, r5, #1
 80184a4:	429d      	cmp	r5, r3
 80184a6:	bf38      	it	cc
 80184a8:	461d      	movcc	r5, r3
 80184aa:	0553      	lsls	r3, r2, #21
 80184ac:	d527      	bpl.n	80184fe <__ssputs_r+0x8e>
 80184ae:	4629      	mov	r1, r5
 80184b0:	f7ff fe94 	bl	80181dc <_malloc_r>
 80184b4:	4606      	mov	r6, r0
 80184b6:	b360      	cbz	r0, 8018512 <__ssputs_r+0xa2>
 80184b8:	6921      	ldr	r1, [r4, #16]
 80184ba:	464a      	mov	r2, r9
 80184bc:	f7ff ff80 	bl	80183c0 <memcpy>
 80184c0:	89a3      	ldrh	r3, [r4, #12]
 80184c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80184c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80184ca:	81a3      	strh	r3, [r4, #12]
 80184cc:	6126      	str	r6, [r4, #16]
 80184ce:	6165      	str	r5, [r4, #20]
 80184d0:	444e      	add	r6, r9
 80184d2:	eba5 0509 	sub.w	r5, r5, r9
 80184d6:	6026      	str	r6, [r4, #0]
 80184d8:	60a5      	str	r5, [r4, #8]
 80184da:	463e      	mov	r6, r7
 80184dc:	42be      	cmp	r6, r7
 80184de:	d900      	bls.n	80184e2 <__ssputs_r+0x72>
 80184e0:	463e      	mov	r6, r7
 80184e2:	6820      	ldr	r0, [r4, #0]
 80184e4:	4632      	mov	r2, r6
 80184e6:	4641      	mov	r1, r8
 80184e8:	f000 faa6 	bl	8018a38 <memmove>
 80184ec:	68a3      	ldr	r3, [r4, #8]
 80184ee:	1b9b      	subs	r3, r3, r6
 80184f0:	60a3      	str	r3, [r4, #8]
 80184f2:	6823      	ldr	r3, [r4, #0]
 80184f4:	4433      	add	r3, r6
 80184f6:	6023      	str	r3, [r4, #0]
 80184f8:	2000      	movs	r0, #0
 80184fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184fe:	462a      	mov	r2, r5
 8018500:	f000 fab4 	bl	8018a6c <_realloc_r>
 8018504:	4606      	mov	r6, r0
 8018506:	2800      	cmp	r0, #0
 8018508:	d1e0      	bne.n	80184cc <__ssputs_r+0x5c>
 801850a:	6921      	ldr	r1, [r4, #16]
 801850c:	4650      	mov	r0, sl
 801850e:	f7ff ff65 	bl	80183dc <_free_r>
 8018512:	230c      	movs	r3, #12
 8018514:	f8ca 3000 	str.w	r3, [sl]
 8018518:	89a3      	ldrh	r3, [r4, #12]
 801851a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801851e:	81a3      	strh	r3, [r4, #12]
 8018520:	f04f 30ff 	mov.w	r0, #4294967295
 8018524:	e7e9      	b.n	80184fa <__ssputs_r+0x8a>
	...

08018528 <_svfiprintf_r>:
 8018528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801852c:	4698      	mov	r8, r3
 801852e:	898b      	ldrh	r3, [r1, #12]
 8018530:	061b      	lsls	r3, r3, #24
 8018532:	b09d      	sub	sp, #116	@ 0x74
 8018534:	4607      	mov	r7, r0
 8018536:	460d      	mov	r5, r1
 8018538:	4614      	mov	r4, r2
 801853a:	d510      	bpl.n	801855e <_svfiprintf_r+0x36>
 801853c:	690b      	ldr	r3, [r1, #16]
 801853e:	b973      	cbnz	r3, 801855e <_svfiprintf_r+0x36>
 8018540:	2140      	movs	r1, #64	@ 0x40
 8018542:	f7ff fe4b 	bl	80181dc <_malloc_r>
 8018546:	6028      	str	r0, [r5, #0]
 8018548:	6128      	str	r0, [r5, #16]
 801854a:	b930      	cbnz	r0, 801855a <_svfiprintf_r+0x32>
 801854c:	230c      	movs	r3, #12
 801854e:	603b      	str	r3, [r7, #0]
 8018550:	f04f 30ff 	mov.w	r0, #4294967295
 8018554:	b01d      	add	sp, #116	@ 0x74
 8018556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801855a:	2340      	movs	r3, #64	@ 0x40
 801855c:	616b      	str	r3, [r5, #20]
 801855e:	2300      	movs	r3, #0
 8018560:	9309      	str	r3, [sp, #36]	@ 0x24
 8018562:	2320      	movs	r3, #32
 8018564:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018568:	f8cd 800c 	str.w	r8, [sp, #12]
 801856c:	2330      	movs	r3, #48	@ 0x30
 801856e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801870c <_svfiprintf_r+0x1e4>
 8018572:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018576:	f04f 0901 	mov.w	r9, #1
 801857a:	4623      	mov	r3, r4
 801857c:	469a      	mov	sl, r3
 801857e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018582:	b10a      	cbz	r2, 8018588 <_svfiprintf_r+0x60>
 8018584:	2a25      	cmp	r2, #37	@ 0x25
 8018586:	d1f9      	bne.n	801857c <_svfiprintf_r+0x54>
 8018588:	ebba 0b04 	subs.w	fp, sl, r4
 801858c:	d00b      	beq.n	80185a6 <_svfiprintf_r+0x7e>
 801858e:	465b      	mov	r3, fp
 8018590:	4622      	mov	r2, r4
 8018592:	4629      	mov	r1, r5
 8018594:	4638      	mov	r0, r7
 8018596:	f7ff ff6b 	bl	8018470 <__ssputs_r>
 801859a:	3001      	adds	r0, #1
 801859c:	f000 80a7 	beq.w	80186ee <_svfiprintf_r+0x1c6>
 80185a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80185a2:	445a      	add	r2, fp
 80185a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80185a6:	f89a 3000 	ldrb.w	r3, [sl]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	f000 809f 	beq.w	80186ee <_svfiprintf_r+0x1c6>
 80185b0:	2300      	movs	r3, #0
 80185b2:	f04f 32ff 	mov.w	r2, #4294967295
 80185b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80185ba:	f10a 0a01 	add.w	sl, sl, #1
 80185be:	9304      	str	r3, [sp, #16]
 80185c0:	9307      	str	r3, [sp, #28]
 80185c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80185c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80185c8:	4654      	mov	r4, sl
 80185ca:	2205      	movs	r2, #5
 80185cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185d0:	484e      	ldr	r0, [pc, #312]	@ (801870c <_svfiprintf_r+0x1e4>)
 80185d2:	f7e7 fe8d 	bl	80002f0 <memchr>
 80185d6:	9a04      	ldr	r2, [sp, #16]
 80185d8:	b9d8      	cbnz	r0, 8018612 <_svfiprintf_r+0xea>
 80185da:	06d0      	lsls	r0, r2, #27
 80185dc:	bf44      	itt	mi
 80185de:	2320      	movmi	r3, #32
 80185e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80185e4:	0711      	lsls	r1, r2, #28
 80185e6:	bf44      	itt	mi
 80185e8:	232b      	movmi	r3, #43	@ 0x2b
 80185ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80185ee:	f89a 3000 	ldrb.w	r3, [sl]
 80185f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80185f4:	d015      	beq.n	8018622 <_svfiprintf_r+0xfa>
 80185f6:	9a07      	ldr	r2, [sp, #28]
 80185f8:	4654      	mov	r4, sl
 80185fa:	2000      	movs	r0, #0
 80185fc:	f04f 0c0a 	mov.w	ip, #10
 8018600:	4621      	mov	r1, r4
 8018602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018606:	3b30      	subs	r3, #48	@ 0x30
 8018608:	2b09      	cmp	r3, #9
 801860a:	d94b      	bls.n	80186a4 <_svfiprintf_r+0x17c>
 801860c:	b1b0      	cbz	r0, 801863c <_svfiprintf_r+0x114>
 801860e:	9207      	str	r2, [sp, #28]
 8018610:	e014      	b.n	801863c <_svfiprintf_r+0x114>
 8018612:	eba0 0308 	sub.w	r3, r0, r8
 8018616:	fa09 f303 	lsl.w	r3, r9, r3
 801861a:	4313      	orrs	r3, r2
 801861c:	9304      	str	r3, [sp, #16]
 801861e:	46a2      	mov	sl, r4
 8018620:	e7d2      	b.n	80185c8 <_svfiprintf_r+0xa0>
 8018622:	9b03      	ldr	r3, [sp, #12]
 8018624:	1d19      	adds	r1, r3, #4
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	9103      	str	r1, [sp, #12]
 801862a:	2b00      	cmp	r3, #0
 801862c:	bfbb      	ittet	lt
 801862e:	425b      	neglt	r3, r3
 8018630:	f042 0202 	orrlt.w	r2, r2, #2
 8018634:	9307      	strge	r3, [sp, #28]
 8018636:	9307      	strlt	r3, [sp, #28]
 8018638:	bfb8      	it	lt
 801863a:	9204      	strlt	r2, [sp, #16]
 801863c:	7823      	ldrb	r3, [r4, #0]
 801863e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018640:	d10a      	bne.n	8018658 <_svfiprintf_r+0x130>
 8018642:	7863      	ldrb	r3, [r4, #1]
 8018644:	2b2a      	cmp	r3, #42	@ 0x2a
 8018646:	d132      	bne.n	80186ae <_svfiprintf_r+0x186>
 8018648:	9b03      	ldr	r3, [sp, #12]
 801864a:	1d1a      	adds	r2, r3, #4
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	9203      	str	r2, [sp, #12]
 8018650:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018654:	3402      	adds	r4, #2
 8018656:	9305      	str	r3, [sp, #20]
 8018658:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801871c <_svfiprintf_r+0x1f4>
 801865c:	7821      	ldrb	r1, [r4, #0]
 801865e:	2203      	movs	r2, #3
 8018660:	4650      	mov	r0, sl
 8018662:	f7e7 fe45 	bl	80002f0 <memchr>
 8018666:	b138      	cbz	r0, 8018678 <_svfiprintf_r+0x150>
 8018668:	9b04      	ldr	r3, [sp, #16]
 801866a:	eba0 000a 	sub.w	r0, r0, sl
 801866e:	2240      	movs	r2, #64	@ 0x40
 8018670:	4082      	lsls	r2, r0
 8018672:	4313      	orrs	r3, r2
 8018674:	3401      	adds	r4, #1
 8018676:	9304      	str	r3, [sp, #16]
 8018678:	f814 1b01 	ldrb.w	r1, [r4], #1
 801867c:	4824      	ldr	r0, [pc, #144]	@ (8018710 <_svfiprintf_r+0x1e8>)
 801867e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018682:	2206      	movs	r2, #6
 8018684:	f7e7 fe34 	bl	80002f0 <memchr>
 8018688:	2800      	cmp	r0, #0
 801868a:	d036      	beq.n	80186fa <_svfiprintf_r+0x1d2>
 801868c:	4b21      	ldr	r3, [pc, #132]	@ (8018714 <_svfiprintf_r+0x1ec>)
 801868e:	bb1b      	cbnz	r3, 80186d8 <_svfiprintf_r+0x1b0>
 8018690:	9b03      	ldr	r3, [sp, #12]
 8018692:	3307      	adds	r3, #7
 8018694:	f023 0307 	bic.w	r3, r3, #7
 8018698:	3308      	adds	r3, #8
 801869a:	9303      	str	r3, [sp, #12]
 801869c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801869e:	4433      	add	r3, r6
 80186a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80186a2:	e76a      	b.n	801857a <_svfiprintf_r+0x52>
 80186a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80186a8:	460c      	mov	r4, r1
 80186aa:	2001      	movs	r0, #1
 80186ac:	e7a8      	b.n	8018600 <_svfiprintf_r+0xd8>
 80186ae:	2300      	movs	r3, #0
 80186b0:	3401      	adds	r4, #1
 80186b2:	9305      	str	r3, [sp, #20]
 80186b4:	4619      	mov	r1, r3
 80186b6:	f04f 0c0a 	mov.w	ip, #10
 80186ba:	4620      	mov	r0, r4
 80186bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186c0:	3a30      	subs	r2, #48	@ 0x30
 80186c2:	2a09      	cmp	r2, #9
 80186c4:	d903      	bls.n	80186ce <_svfiprintf_r+0x1a6>
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d0c6      	beq.n	8018658 <_svfiprintf_r+0x130>
 80186ca:	9105      	str	r1, [sp, #20]
 80186cc:	e7c4      	b.n	8018658 <_svfiprintf_r+0x130>
 80186ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80186d2:	4604      	mov	r4, r0
 80186d4:	2301      	movs	r3, #1
 80186d6:	e7f0      	b.n	80186ba <_svfiprintf_r+0x192>
 80186d8:	ab03      	add	r3, sp, #12
 80186da:	9300      	str	r3, [sp, #0]
 80186dc:	462a      	mov	r2, r5
 80186de:	4b0e      	ldr	r3, [pc, #56]	@ (8018718 <_svfiprintf_r+0x1f0>)
 80186e0:	a904      	add	r1, sp, #16
 80186e2:	4638      	mov	r0, r7
 80186e4:	f3af 8000 	nop.w
 80186e8:	1c42      	adds	r2, r0, #1
 80186ea:	4606      	mov	r6, r0
 80186ec:	d1d6      	bne.n	801869c <_svfiprintf_r+0x174>
 80186ee:	89ab      	ldrh	r3, [r5, #12]
 80186f0:	065b      	lsls	r3, r3, #25
 80186f2:	f53f af2d 	bmi.w	8018550 <_svfiprintf_r+0x28>
 80186f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80186f8:	e72c      	b.n	8018554 <_svfiprintf_r+0x2c>
 80186fa:	ab03      	add	r3, sp, #12
 80186fc:	9300      	str	r3, [sp, #0]
 80186fe:	462a      	mov	r2, r5
 8018700:	4b05      	ldr	r3, [pc, #20]	@ (8018718 <_svfiprintf_r+0x1f0>)
 8018702:	a904      	add	r1, sp, #16
 8018704:	4638      	mov	r0, r7
 8018706:	f000 f879 	bl	80187fc <_printf_i>
 801870a:	e7ed      	b.n	80186e8 <_svfiprintf_r+0x1c0>
 801870c:	08019138 	.word	0x08019138
 8018710:	08019142 	.word	0x08019142
 8018714:	00000000 	.word	0x00000000
 8018718:	08018471 	.word	0x08018471
 801871c:	0801913e 	.word	0x0801913e

08018720 <_printf_common>:
 8018720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018724:	4616      	mov	r6, r2
 8018726:	4698      	mov	r8, r3
 8018728:	688a      	ldr	r2, [r1, #8]
 801872a:	690b      	ldr	r3, [r1, #16]
 801872c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018730:	4293      	cmp	r3, r2
 8018732:	bfb8      	it	lt
 8018734:	4613      	movlt	r3, r2
 8018736:	6033      	str	r3, [r6, #0]
 8018738:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801873c:	4607      	mov	r7, r0
 801873e:	460c      	mov	r4, r1
 8018740:	b10a      	cbz	r2, 8018746 <_printf_common+0x26>
 8018742:	3301      	adds	r3, #1
 8018744:	6033      	str	r3, [r6, #0]
 8018746:	6823      	ldr	r3, [r4, #0]
 8018748:	0699      	lsls	r1, r3, #26
 801874a:	bf42      	ittt	mi
 801874c:	6833      	ldrmi	r3, [r6, #0]
 801874e:	3302      	addmi	r3, #2
 8018750:	6033      	strmi	r3, [r6, #0]
 8018752:	6825      	ldr	r5, [r4, #0]
 8018754:	f015 0506 	ands.w	r5, r5, #6
 8018758:	d106      	bne.n	8018768 <_printf_common+0x48>
 801875a:	f104 0a19 	add.w	sl, r4, #25
 801875e:	68e3      	ldr	r3, [r4, #12]
 8018760:	6832      	ldr	r2, [r6, #0]
 8018762:	1a9b      	subs	r3, r3, r2
 8018764:	42ab      	cmp	r3, r5
 8018766:	dc26      	bgt.n	80187b6 <_printf_common+0x96>
 8018768:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801876c:	6822      	ldr	r2, [r4, #0]
 801876e:	3b00      	subs	r3, #0
 8018770:	bf18      	it	ne
 8018772:	2301      	movne	r3, #1
 8018774:	0692      	lsls	r2, r2, #26
 8018776:	d42b      	bmi.n	80187d0 <_printf_common+0xb0>
 8018778:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801877c:	4641      	mov	r1, r8
 801877e:	4638      	mov	r0, r7
 8018780:	47c8      	blx	r9
 8018782:	3001      	adds	r0, #1
 8018784:	d01e      	beq.n	80187c4 <_printf_common+0xa4>
 8018786:	6823      	ldr	r3, [r4, #0]
 8018788:	6922      	ldr	r2, [r4, #16]
 801878a:	f003 0306 	and.w	r3, r3, #6
 801878e:	2b04      	cmp	r3, #4
 8018790:	bf02      	ittt	eq
 8018792:	68e5      	ldreq	r5, [r4, #12]
 8018794:	6833      	ldreq	r3, [r6, #0]
 8018796:	1aed      	subeq	r5, r5, r3
 8018798:	68a3      	ldr	r3, [r4, #8]
 801879a:	bf0c      	ite	eq
 801879c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80187a0:	2500      	movne	r5, #0
 80187a2:	4293      	cmp	r3, r2
 80187a4:	bfc4      	itt	gt
 80187a6:	1a9b      	subgt	r3, r3, r2
 80187a8:	18ed      	addgt	r5, r5, r3
 80187aa:	2600      	movs	r6, #0
 80187ac:	341a      	adds	r4, #26
 80187ae:	42b5      	cmp	r5, r6
 80187b0:	d11a      	bne.n	80187e8 <_printf_common+0xc8>
 80187b2:	2000      	movs	r0, #0
 80187b4:	e008      	b.n	80187c8 <_printf_common+0xa8>
 80187b6:	2301      	movs	r3, #1
 80187b8:	4652      	mov	r2, sl
 80187ba:	4641      	mov	r1, r8
 80187bc:	4638      	mov	r0, r7
 80187be:	47c8      	blx	r9
 80187c0:	3001      	adds	r0, #1
 80187c2:	d103      	bne.n	80187cc <_printf_common+0xac>
 80187c4:	f04f 30ff 	mov.w	r0, #4294967295
 80187c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187cc:	3501      	adds	r5, #1
 80187ce:	e7c6      	b.n	801875e <_printf_common+0x3e>
 80187d0:	18e1      	adds	r1, r4, r3
 80187d2:	1c5a      	adds	r2, r3, #1
 80187d4:	2030      	movs	r0, #48	@ 0x30
 80187d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80187da:	4422      	add	r2, r4
 80187dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80187e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80187e4:	3302      	adds	r3, #2
 80187e6:	e7c7      	b.n	8018778 <_printf_common+0x58>
 80187e8:	2301      	movs	r3, #1
 80187ea:	4622      	mov	r2, r4
 80187ec:	4641      	mov	r1, r8
 80187ee:	4638      	mov	r0, r7
 80187f0:	47c8      	blx	r9
 80187f2:	3001      	adds	r0, #1
 80187f4:	d0e6      	beq.n	80187c4 <_printf_common+0xa4>
 80187f6:	3601      	adds	r6, #1
 80187f8:	e7d9      	b.n	80187ae <_printf_common+0x8e>
	...

080187fc <_printf_i>:
 80187fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018800:	7e0f      	ldrb	r7, [r1, #24]
 8018802:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018804:	2f78      	cmp	r7, #120	@ 0x78
 8018806:	4691      	mov	r9, r2
 8018808:	4680      	mov	r8, r0
 801880a:	460c      	mov	r4, r1
 801880c:	469a      	mov	sl, r3
 801880e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018812:	d807      	bhi.n	8018824 <_printf_i+0x28>
 8018814:	2f62      	cmp	r7, #98	@ 0x62
 8018816:	d80a      	bhi.n	801882e <_printf_i+0x32>
 8018818:	2f00      	cmp	r7, #0
 801881a:	f000 80d1 	beq.w	80189c0 <_printf_i+0x1c4>
 801881e:	2f58      	cmp	r7, #88	@ 0x58
 8018820:	f000 80b8 	beq.w	8018994 <_printf_i+0x198>
 8018824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018828:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801882c:	e03a      	b.n	80188a4 <_printf_i+0xa8>
 801882e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018832:	2b15      	cmp	r3, #21
 8018834:	d8f6      	bhi.n	8018824 <_printf_i+0x28>
 8018836:	a101      	add	r1, pc, #4	@ (adr r1, 801883c <_printf_i+0x40>)
 8018838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801883c:	08018895 	.word	0x08018895
 8018840:	080188a9 	.word	0x080188a9
 8018844:	08018825 	.word	0x08018825
 8018848:	08018825 	.word	0x08018825
 801884c:	08018825 	.word	0x08018825
 8018850:	08018825 	.word	0x08018825
 8018854:	080188a9 	.word	0x080188a9
 8018858:	08018825 	.word	0x08018825
 801885c:	08018825 	.word	0x08018825
 8018860:	08018825 	.word	0x08018825
 8018864:	08018825 	.word	0x08018825
 8018868:	080189a7 	.word	0x080189a7
 801886c:	080188d3 	.word	0x080188d3
 8018870:	08018961 	.word	0x08018961
 8018874:	08018825 	.word	0x08018825
 8018878:	08018825 	.word	0x08018825
 801887c:	080189c9 	.word	0x080189c9
 8018880:	08018825 	.word	0x08018825
 8018884:	080188d3 	.word	0x080188d3
 8018888:	08018825 	.word	0x08018825
 801888c:	08018825 	.word	0x08018825
 8018890:	08018969 	.word	0x08018969
 8018894:	6833      	ldr	r3, [r6, #0]
 8018896:	1d1a      	adds	r2, r3, #4
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	6032      	str	r2, [r6, #0]
 801889c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80188a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80188a4:	2301      	movs	r3, #1
 80188a6:	e09c      	b.n	80189e2 <_printf_i+0x1e6>
 80188a8:	6833      	ldr	r3, [r6, #0]
 80188aa:	6820      	ldr	r0, [r4, #0]
 80188ac:	1d19      	adds	r1, r3, #4
 80188ae:	6031      	str	r1, [r6, #0]
 80188b0:	0606      	lsls	r6, r0, #24
 80188b2:	d501      	bpl.n	80188b8 <_printf_i+0xbc>
 80188b4:	681d      	ldr	r5, [r3, #0]
 80188b6:	e003      	b.n	80188c0 <_printf_i+0xc4>
 80188b8:	0645      	lsls	r5, r0, #25
 80188ba:	d5fb      	bpl.n	80188b4 <_printf_i+0xb8>
 80188bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80188c0:	2d00      	cmp	r5, #0
 80188c2:	da03      	bge.n	80188cc <_printf_i+0xd0>
 80188c4:	232d      	movs	r3, #45	@ 0x2d
 80188c6:	426d      	negs	r5, r5
 80188c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80188cc:	4858      	ldr	r0, [pc, #352]	@ (8018a30 <_printf_i+0x234>)
 80188ce:	230a      	movs	r3, #10
 80188d0:	e011      	b.n	80188f6 <_printf_i+0xfa>
 80188d2:	6821      	ldr	r1, [r4, #0]
 80188d4:	6833      	ldr	r3, [r6, #0]
 80188d6:	0608      	lsls	r0, r1, #24
 80188d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80188dc:	d402      	bmi.n	80188e4 <_printf_i+0xe8>
 80188de:	0649      	lsls	r1, r1, #25
 80188e0:	bf48      	it	mi
 80188e2:	b2ad      	uxthmi	r5, r5
 80188e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80188e6:	4852      	ldr	r0, [pc, #328]	@ (8018a30 <_printf_i+0x234>)
 80188e8:	6033      	str	r3, [r6, #0]
 80188ea:	bf14      	ite	ne
 80188ec:	230a      	movne	r3, #10
 80188ee:	2308      	moveq	r3, #8
 80188f0:	2100      	movs	r1, #0
 80188f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80188f6:	6866      	ldr	r6, [r4, #4]
 80188f8:	60a6      	str	r6, [r4, #8]
 80188fa:	2e00      	cmp	r6, #0
 80188fc:	db05      	blt.n	801890a <_printf_i+0x10e>
 80188fe:	6821      	ldr	r1, [r4, #0]
 8018900:	432e      	orrs	r6, r5
 8018902:	f021 0104 	bic.w	r1, r1, #4
 8018906:	6021      	str	r1, [r4, #0]
 8018908:	d04b      	beq.n	80189a2 <_printf_i+0x1a6>
 801890a:	4616      	mov	r6, r2
 801890c:	fbb5 f1f3 	udiv	r1, r5, r3
 8018910:	fb03 5711 	mls	r7, r3, r1, r5
 8018914:	5dc7      	ldrb	r7, [r0, r7]
 8018916:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801891a:	462f      	mov	r7, r5
 801891c:	42bb      	cmp	r3, r7
 801891e:	460d      	mov	r5, r1
 8018920:	d9f4      	bls.n	801890c <_printf_i+0x110>
 8018922:	2b08      	cmp	r3, #8
 8018924:	d10b      	bne.n	801893e <_printf_i+0x142>
 8018926:	6823      	ldr	r3, [r4, #0]
 8018928:	07df      	lsls	r7, r3, #31
 801892a:	d508      	bpl.n	801893e <_printf_i+0x142>
 801892c:	6923      	ldr	r3, [r4, #16]
 801892e:	6861      	ldr	r1, [r4, #4]
 8018930:	4299      	cmp	r1, r3
 8018932:	bfde      	ittt	le
 8018934:	2330      	movle	r3, #48	@ 0x30
 8018936:	f806 3c01 	strble.w	r3, [r6, #-1]
 801893a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801893e:	1b92      	subs	r2, r2, r6
 8018940:	6122      	str	r2, [r4, #16]
 8018942:	f8cd a000 	str.w	sl, [sp]
 8018946:	464b      	mov	r3, r9
 8018948:	aa03      	add	r2, sp, #12
 801894a:	4621      	mov	r1, r4
 801894c:	4640      	mov	r0, r8
 801894e:	f7ff fee7 	bl	8018720 <_printf_common>
 8018952:	3001      	adds	r0, #1
 8018954:	d14a      	bne.n	80189ec <_printf_i+0x1f0>
 8018956:	f04f 30ff 	mov.w	r0, #4294967295
 801895a:	b004      	add	sp, #16
 801895c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018960:	6823      	ldr	r3, [r4, #0]
 8018962:	f043 0320 	orr.w	r3, r3, #32
 8018966:	6023      	str	r3, [r4, #0]
 8018968:	4832      	ldr	r0, [pc, #200]	@ (8018a34 <_printf_i+0x238>)
 801896a:	2778      	movs	r7, #120	@ 0x78
 801896c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018970:	6823      	ldr	r3, [r4, #0]
 8018972:	6831      	ldr	r1, [r6, #0]
 8018974:	061f      	lsls	r7, r3, #24
 8018976:	f851 5b04 	ldr.w	r5, [r1], #4
 801897a:	d402      	bmi.n	8018982 <_printf_i+0x186>
 801897c:	065f      	lsls	r7, r3, #25
 801897e:	bf48      	it	mi
 8018980:	b2ad      	uxthmi	r5, r5
 8018982:	6031      	str	r1, [r6, #0]
 8018984:	07d9      	lsls	r1, r3, #31
 8018986:	bf44      	itt	mi
 8018988:	f043 0320 	orrmi.w	r3, r3, #32
 801898c:	6023      	strmi	r3, [r4, #0]
 801898e:	b11d      	cbz	r5, 8018998 <_printf_i+0x19c>
 8018990:	2310      	movs	r3, #16
 8018992:	e7ad      	b.n	80188f0 <_printf_i+0xf4>
 8018994:	4826      	ldr	r0, [pc, #152]	@ (8018a30 <_printf_i+0x234>)
 8018996:	e7e9      	b.n	801896c <_printf_i+0x170>
 8018998:	6823      	ldr	r3, [r4, #0]
 801899a:	f023 0320 	bic.w	r3, r3, #32
 801899e:	6023      	str	r3, [r4, #0]
 80189a0:	e7f6      	b.n	8018990 <_printf_i+0x194>
 80189a2:	4616      	mov	r6, r2
 80189a4:	e7bd      	b.n	8018922 <_printf_i+0x126>
 80189a6:	6833      	ldr	r3, [r6, #0]
 80189a8:	6825      	ldr	r5, [r4, #0]
 80189aa:	6961      	ldr	r1, [r4, #20]
 80189ac:	1d18      	adds	r0, r3, #4
 80189ae:	6030      	str	r0, [r6, #0]
 80189b0:	062e      	lsls	r6, r5, #24
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	d501      	bpl.n	80189ba <_printf_i+0x1be>
 80189b6:	6019      	str	r1, [r3, #0]
 80189b8:	e002      	b.n	80189c0 <_printf_i+0x1c4>
 80189ba:	0668      	lsls	r0, r5, #25
 80189bc:	d5fb      	bpl.n	80189b6 <_printf_i+0x1ba>
 80189be:	8019      	strh	r1, [r3, #0]
 80189c0:	2300      	movs	r3, #0
 80189c2:	6123      	str	r3, [r4, #16]
 80189c4:	4616      	mov	r6, r2
 80189c6:	e7bc      	b.n	8018942 <_printf_i+0x146>
 80189c8:	6833      	ldr	r3, [r6, #0]
 80189ca:	1d1a      	adds	r2, r3, #4
 80189cc:	6032      	str	r2, [r6, #0]
 80189ce:	681e      	ldr	r6, [r3, #0]
 80189d0:	6862      	ldr	r2, [r4, #4]
 80189d2:	2100      	movs	r1, #0
 80189d4:	4630      	mov	r0, r6
 80189d6:	f7e7 fc8b 	bl	80002f0 <memchr>
 80189da:	b108      	cbz	r0, 80189e0 <_printf_i+0x1e4>
 80189dc:	1b80      	subs	r0, r0, r6
 80189de:	6060      	str	r0, [r4, #4]
 80189e0:	6863      	ldr	r3, [r4, #4]
 80189e2:	6123      	str	r3, [r4, #16]
 80189e4:	2300      	movs	r3, #0
 80189e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80189ea:	e7aa      	b.n	8018942 <_printf_i+0x146>
 80189ec:	6923      	ldr	r3, [r4, #16]
 80189ee:	4632      	mov	r2, r6
 80189f0:	4649      	mov	r1, r9
 80189f2:	4640      	mov	r0, r8
 80189f4:	47d0      	blx	sl
 80189f6:	3001      	adds	r0, #1
 80189f8:	d0ad      	beq.n	8018956 <_printf_i+0x15a>
 80189fa:	6823      	ldr	r3, [r4, #0]
 80189fc:	079b      	lsls	r3, r3, #30
 80189fe:	d413      	bmi.n	8018a28 <_printf_i+0x22c>
 8018a00:	68e0      	ldr	r0, [r4, #12]
 8018a02:	9b03      	ldr	r3, [sp, #12]
 8018a04:	4298      	cmp	r0, r3
 8018a06:	bfb8      	it	lt
 8018a08:	4618      	movlt	r0, r3
 8018a0a:	e7a6      	b.n	801895a <_printf_i+0x15e>
 8018a0c:	2301      	movs	r3, #1
 8018a0e:	4632      	mov	r2, r6
 8018a10:	4649      	mov	r1, r9
 8018a12:	4640      	mov	r0, r8
 8018a14:	47d0      	blx	sl
 8018a16:	3001      	adds	r0, #1
 8018a18:	d09d      	beq.n	8018956 <_printf_i+0x15a>
 8018a1a:	3501      	adds	r5, #1
 8018a1c:	68e3      	ldr	r3, [r4, #12]
 8018a1e:	9903      	ldr	r1, [sp, #12]
 8018a20:	1a5b      	subs	r3, r3, r1
 8018a22:	42ab      	cmp	r3, r5
 8018a24:	dcf2      	bgt.n	8018a0c <_printf_i+0x210>
 8018a26:	e7eb      	b.n	8018a00 <_printf_i+0x204>
 8018a28:	2500      	movs	r5, #0
 8018a2a:	f104 0619 	add.w	r6, r4, #25
 8018a2e:	e7f5      	b.n	8018a1c <_printf_i+0x220>
 8018a30:	08019149 	.word	0x08019149
 8018a34:	0801915a 	.word	0x0801915a

08018a38 <memmove>:
 8018a38:	4288      	cmp	r0, r1
 8018a3a:	b510      	push	{r4, lr}
 8018a3c:	eb01 0402 	add.w	r4, r1, r2
 8018a40:	d902      	bls.n	8018a48 <memmove+0x10>
 8018a42:	4284      	cmp	r4, r0
 8018a44:	4623      	mov	r3, r4
 8018a46:	d807      	bhi.n	8018a58 <memmove+0x20>
 8018a48:	1e43      	subs	r3, r0, #1
 8018a4a:	42a1      	cmp	r1, r4
 8018a4c:	d008      	beq.n	8018a60 <memmove+0x28>
 8018a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018a56:	e7f8      	b.n	8018a4a <memmove+0x12>
 8018a58:	4402      	add	r2, r0
 8018a5a:	4601      	mov	r1, r0
 8018a5c:	428a      	cmp	r2, r1
 8018a5e:	d100      	bne.n	8018a62 <memmove+0x2a>
 8018a60:	bd10      	pop	{r4, pc}
 8018a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018a6a:	e7f7      	b.n	8018a5c <memmove+0x24>

08018a6c <_realloc_r>:
 8018a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a70:	4607      	mov	r7, r0
 8018a72:	4614      	mov	r4, r2
 8018a74:	460d      	mov	r5, r1
 8018a76:	b921      	cbnz	r1, 8018a82 <_realloc_r+0x16>
 8018a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a7c:	4611      	mov	r1, r2
 8018a7e:	f7ff bbad 	b.w	80181dc <_malloc_r>
 8018a82:	b92a      	cbnz	r2, 8018a90 <_realloc_r+0x24>
 8018a84:	f7ff fcaa 	bl	80183dc <_free_r>
 8018a88:	4625      	mov	r5, r4
 8018a8a:	4628      	mov	r0, r5
 8018a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a90:	f000 f81a 	bl	8018ac8 <_malloc_usable_size_r>
 8018a94:	4284      	cmp	r4, r0
 8018a96:	4606      	mov	r6, r0
 8018a98:	d802      	bhi.n	8018aa0 <_realloc_r+0x34>
 8018a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018a9e:	d8f4      	bhi.n	8018a8a <_realloc_r+0x1e>
 8018aa0:	4621      	mov	r1, r4
 8018aa2:	4638      	mov	r0, r7
 8018aa4:	f7ff fb9a 	bl	80181dc <_malloc_r>
 8018aa8:	4680      	mov	r8, r0
 8018aaa:	b908      	cbnz	r0, 8018ab0 <_realloc_r+0x44>
 8018aac:	4645      	mov	r5, r8
 8018aae:	e7ec      	b.n	8018a8a <_realloc_r+0x1e>
 8018ab0:	42b4      	cmp	r4, r6
 8018ab2:	4622      	mov	r2, r4
 8018ab4:	4629      	mov	r1, r5
 8018ab6:	bf28      	it	cs
 8018ab8:	4632      	movcs	r2, r6
 8018aba:	f7ff fc81 	bl	80183c0 <memcpy>
 8018abe:	4629      	mov	r1, r5
 8018ac0:	4638      	mov	r0, r7
 8018ac2:	f7ff fc8b 	bl	80183dc <_free_r>
 8018ac6:	e7f1      	b.n	8018aac <_realloc_r+0x40>

08018ac8 <_malloc_usable_size_r>:
 8018ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018acc:	1f18      	subs	r0, r3, #4
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	bfbc      	itt	lt
 8018ad2:	580b      	ldrlt	r3, [r1, r0]
 8018ad4:	18c0      	addlt	r0, r0, r3
 8018ad6:	4770      	bx	lr

08018ad8 <_init>:
 8018ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ada:	bf00      	nop
 8018adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ade:	bc08      	pop	{r3}
 8018ae0:	469e      	mov	lr, r3
 8018ae2:	4770      	bx	lr

08018ae4 <_fini>:
 8018ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ae6:	bf00      	nop
 8018ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018aea:	bc08      	pop	{r3}
 8018aec:	469e      	mov	lr, r3
 8018aee:	4770      	bx	lr
